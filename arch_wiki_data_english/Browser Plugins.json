{
  "title": "Browser Plugins",
  "url": "https://wiki.archlinux.org/title/Browser_Plugins",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Browser extensions\n\nThere are two types of browser plugins, based on the plugin API they use:\n\n- Netscape plugin API (NPAPI): these plugins work in some smaller browsers (Firefox and Chromium no longer support these plugins).\n- Pepper plugin API (PPAPI): these plugins work in some smaller browsers (Chromium no longer supports these plugins).\n\n"
    },
    {
      "title": "Adobe Flash Player",
      "level": 3,
      "content": "A standalone version can be installed with the flashplayer-standaloneAUR package, which continues to work without a time bomb. For the browsers that still support it, flashpluginAUR (NPAPI) and pepper-flashAUR (PPAPI) provide the last plugin from Adobe but patch it to remove the \"kill switch\" from it.\n\n"
    },
    {
      "title": "Lightspark",
      "level": 3,
      "content": "Lightspark is another attempt to provide a free alternative to Adobe Flash aimed at supporting newer Flash formats. Lightspark has the ability to fall back on Gnash for old content, which enables users to install both and enjoy wider coverage. Although it is still very much in development, it supports some popular sites.\n\nLightspark can be installed with the lightsparkAUR or lightspark-gitAUR package.\n\n"
    },
    {
      "title": "Ruffle",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with Browser extensions.** This article or section is a candidate for merging with Browser extensions.\n\nThis article or section is a candidate for merging with Browser extensions.\n\nRuffle is a Flash Player emulator written in Rust. It runs natively as a standalone application, or on modern browsers through the use of WebAssembly. Unlike Flash Player and Lightspark, Ruffle is only available in browsers as an extension, not as a plug-in. While still being under active development, decent ActionScript 1.0/2.0 support is in place and improving; ActionScript 3.0 support is in early stages.\n\nTo run natively, Ruffle can be installed with one of the ruffle-gitAUR or ruffle-nightly-binAUR packages. As another option, if you only want to play Flash on the web, it can be installed as a Firefox extension without installing the native packages.\n\n"
    },
    {
      "title": "Java (IcedTea)",
      "level": 2,
      "content": "To enable Java support in your browser, you have two options: the open-source OpenJDK (recommended) or Oracle's proprietary version. For details about why OpenJDK is recommended see [2].\n\nTo use OpenJDK, you have to install the IcedTea browser plugin, icedtea-web.\n\nIf you want to use Oracle's JRE, install the jreAUR package.\n\n"
    },
    {
      "title": "Multimedia playback",
      "level": 2,
      "content": "Many browsers support the GStreamer framework to play multimedia inside HTML5 <audio> and <video> elements. Check the optional dependencies of the browser package (or of the web engine, e.g. webkit2gtk or qt5-webkitAUR) to see if GStreamer is supported. See GStreamer#Installation for the description of each plugin.\n\nFor media formats that are not natively supported by your browser (e.g. most browsers do not play .mkv files), the following plugins are available:\n\n- VLC Plugin â€” NPAPI plugin that uses VLC as backend.\n\n"
    },
    {
      "title": "MozPlugger",
      "level": 2,
      "content": "MozPlugger is a NPAPI plugin which can show many types of multimedia inside your browser. To accomplish this, it uses external programs such as MPlayer, xine, Evince, OpenOffice, TiMidity, etc.\n\nMozPlugger can be installed with the mozpluggerAUR package.\n\nTo modify or add applications to be used by MozPlugger just modify the /etc/mozpluggerrc file. For a more complete list of MozPlugger options see mozplugger(7).\n\n"
    },
    {
      "title": "PDF viewers",
      "level": 3,
      "content": "Find the lines containing pdf in the /etc/mozpluggerrc file and modify the corresponding line after GV() as below:\n\n```\nrepeat noisy swallow(pdf_reader) fill: pdf_reader \"$file\"\n```\n\nWhen using Firefox, you may need to change 2 values in about:config:\n\n- Change pdfjs.disabled's value to true;\n- Change plugin.disable_full_page_plugin_for_types's value to an empty value.\n\nThen restart Firefox to use the plugin.\n\n"
    },
    {
      "title": "Use LibreOffice instead of OpenOffice",
      "level": 3,
      "content": "For example, MozPlugger uses OpenOffice by default to open doc files. To change it to use LibreOffice instead, look for the OpenOffice section:\n\n```\n/etc/mozpluggerrc\n```\n\n```\n...\n### OpenOffice\ndefine([OO],[swallow(VCLSalFrame) fill: ooffice2.0 -nologo -norestore -view $1 \"$file\"\n    swallow(VCLSalFrame) fill: ooffice -nologo -norestore -view $1 \"$file\"\n    swallow(VCLSalFrame) fill: soffice -nologo $1 \"$file\"])\n...\n```\n\nand add LibreOffice at the beginning of the list:\n\n```\n/etc/mozpluggerrc\n```\n\n```\n...\n### LibreOffice/OpenOffice\ndefine([OO],[swallow(VCLSalFrame) fill: libreoffice --nologo --norestore --view $1 \"$file\"\n    swallow(VCLSalFrame) fill: ooffice2.0 -nologo -norestore -view $1 \"$file\"\n    swallow(VCLSalFrame) fill: ooffice -nologo -norestore -view $1 \"$file\"\n    swallow(VCLSalFrame) fill: soffice -nologo $1 \"$file\"])\n...\n```\n\n"
    },
    {
      "title": "Open cpp files in Kate",
      "level": 3,
      "content": "As another simple example, if you want to open cpp files with your favorite text editor (we will use Kate) to get syntax highlighting, just add a new section to your mozpluggerrc file:\n\n```\n/etc/mozpluggerrc\n```\n\n```\ntext/x-c++:cpp:C++ Source File\ntext/x-c++:hpp:C++ Header File\n    repeat noisy swallow(kate) fill: kate -b \"$file\"\n```\n\n"
    },
    {
      "title": "Use mpv instead of MPlayer",
      "level": 3,
      "content": "To change the default of MPlayer so that mpv is used instead, change the appropriate lines such that:\n\n```\n/etc/mozpluggerrc\n```\n\n```\n...\n### MPlayer\n\n#define(MP_CMD,[mplayer -really-quiet -nojoystick -nofs -zoom -vo xv,x11 -ao esd,alsa,oss,arts,null -osdlevel 0 $1 </dev/null])\ndefine(MP_CMD,[mpv -really-quiet $1 </dev/null])\n\n#define(MP_EMBED,[embed noisy ignore_errors: MP_CMD(-xy $width -wid $window $1)])\ndefine(MP_EMBED,[embed noisy ignore_errors: MP_CMD(--autofit=$width -wid $window $1)])\n\n#define(MP_NOEMBED,[noembed noisy ignore_errors maxaspect swallow(MPlayer): MP_CMD($1)])\ndefine(MP_NOEMBED,[noembed noisy ignore_errors maxaspect swallow(mpv): MP_CMD($1)])\n\n...\n\n#define(MP_AUDIO,[mplayer -quiet -nojoystick $1 </dev/null])\ndefine(MP_AUDIO,[mpv -really-quiet $1 </dev/null])\n\n#define(MP_AUDIO_STREAM,[controls stream noisy ignore_errors: mplayer -quiet -nojoystick $1 \"$file\" </dev/null])\ndefine(MP_AUDIO_STREAM,[controls stream noisy ignore_errors: mpv -really-quiet $1 \"$file\" </dev/null])\n...\n```\n\n"
    }
  ]
}