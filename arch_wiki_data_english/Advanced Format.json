{
  "title": "Advanced Format",
  "url": "https://wiki.archlinux.org/title/Advanced_Format",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section is a candidate for moving to Storage layout and alignment.** This article or section is a candidate for moving to Storage layout and alignment.\n\nThis article or section is a candidate for moving to Storage layout and alignment.\n\nThe minimum physical storage unit of a hard disk drive (HDD) is a sector. The solid state drive (SSD) equivalent is a page.[1] Storage device firmware abstract away their physical sectors into logical sectors that software can operate on. The size of this sector refers to the size of the smallest addressable unit on the disk.\n\nThe different \"layers\", namely the device, stacked block devices, and file systems, should utilize the same sector sizes. If they do not, the mapping process from the firmware's translation layer, although usually transparent, will result in overhead that can be avoided.\n\nThe current physical and logical sector sizes values can be listed with lsblk:\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\n```\n$ lsblk -td\n```\n\n```\nNAME    ALIGNMENT MIN-IO OPT-IO PHY-SEC LOG-SEC ROTA SCHED       RQ-SIZE  RA WSAME\nsda             0   4096      0    4096    4096    1 mq-deadline      64 128    0B\nnvme1n1         0   4096      0    4096    4096    0 none           1023 128    0B\nnvme0n1         0   4096      0    4096    4096    0 none           1023 128    0B\n```\n\nThe PHY-SEC shows the physical sector size and LOG-SEC—the logical sector size.\n\nAlternatively, the values for a specific drive can read from the following sysfs entries:\n\n```\n$ cat /sys/class/block/drive/queue/physical_block_size\n$ cat /sys/class/block/drive/queue/logical_block_size\n```\n\nSector sizes can also be seen in fdisk, smartctl and hdparm output.\n\n"
    },
    {
      "title": "Changing sector size",
      "level": 2,
      "content": "Some NVMe drives and \"enterprise\" SATA hard disk drives support changing their reported sector size using standard NVMe (Format NVM from NVM Command Set Specification 1.0 or later) or ATA (SET SECTOR CONFIGURATION EXT from ATA Command Set - 4 or later) commands, respectively. For hard disk drives this changes the logical sector size in order to match the physical sector size for optimal performance. While for NVMe solid state drives, both the logical and physical sector size values get changed.\n\nSATA solid state drives typically do not support changing their sector size. Exception are certain Intel SATA SSDs that can change the reported physical sector size, but not the logical sector size.[2] Follow #Intel to change their reported physical sector size.\n\nChanging the sector size of a drive is a complex process that requires low-level formatting. As an alternative, you can manually specify the desired sector size when creating file systems on the drive to get optimal performance. See #dm-crypt and #File systems.\n\n"
    },
    {
      "title": "Advanced Format hard disk drives",
      "level": 3,
      "content": "To determine if the sector size of an Advanced Format hard disk drive can be changed, use the hdparm utility:\n\n```\n# hdparm -I /dev/sdX | grep 'Sector size:'\n```\n\nAdvanced Format drives whose Sector Configuration Log lists multiple logical sector sizes will show a list of them:\n\n```\nLogical  Sector size:                   512 bytes [ Supported: 512 4096 ]\n        Physical Sector size:                  4096 bytes\n```\n\nHard disk drives which do not support multiple changeable logical sector sizes will simply report the current sector sizes. E.g., an Advanced Format 512e drive:\n\n```\nLogical  Sector size:                   512 bytes\n        Physical Sector size:                  4096 bytes\n```\n\nFor optimal performance on these types of drives, ensure the #dm-crypt sector size or #File systems block size is at least 4096 bytes and aligns to it.\n\nAn Advanced Format 4Kn drive:\n\n```\nLogical  Sector size:                  4096 bytes\n        Physical Sector size:                  4096 bytes\n```\n\n4Kn drives already have the optimal configuration out of the box and do not need special considerations when partitioning/formatting. They can be simply used as is.\n\nIf your SATA HDD supports multiple logical sector sizes and the optional ATA command SET SECTOR CONFIGURATION EXT (usually only available in so-called \"enterprise\" class HDDs), you can use hdparm to change between the supported logical sector sizes. To set it to 4096 bytes, i.e. 4Kn, run:\n\n```\n# hdparm --set-sector-size 4096 --please-destroy-my-drive /dev/sdX\n```\n\nAfterwards, hdparm should report the logical sector size as 4096 bytes:\n\n```\n# hdparm -I /dev/sdX | grep 'Sector size:'\n```\n\n```\nLogical  Sector size:                  4096 bytes [ Supported: 512 4096 ]\n        Physical Sector size:                  4096 bytes\n```\n\n"
    },
    {
      "title": "NVMe solid state drives",
      "level": 3,
      "content": "Most solid state drives (SSDs) report their logical block address size as 512 bytes, even though they use larger blocks physically - typically 4 KiB, 8 KiB, or sometimes larger.\n\nTo check the formatted logical block address size (FLBAS) of an NVMe drive, use the nvme-cli utility in addition with Identify Namespace command:\n\n```\n# nvme id-ns -H /dev/nvme0n1 | grep \"Relative Performance\"\n```\n\n```\nLBA Format  0 : Metadata Size: 0   bytes - Data Size: 512 bytes - Relative Performance: 0x2 Good (in use)\nLBA Format  1 : Metadata Size: 0   bytes - Data Size: 4096 bytes - Relative Performance: 0x1 Better\n```\n\n- Metadata Size is the number of extra metadata bytes per logical block address (LBA). As this is not well supported under Linux, it is best to select a format with a value of 0 here.\n- Relative Performance indicates which format will provide degraded, good, better or best performance.\n\nsmartctl can also display the supported logical block address sizes, but it does not provide user friendly descriptions. E.g.:\n\n```\n# smartctl -c /dev/nvme0n1\n```\n\n```\n...\nSupported LBA Sizes (NSID 0x1)\nId Fmt  Data  Metadt  Rel_Perf\n 0 +     512       0         2\n 1 -    4096       0         1\n```\n\nTo change the logical block address size, use nvme format and specify the preferred value with the --lbaf parameter:\n\n```\n# nvme format --lbaf=1 /dev/nvme0n1\n```\n\n```\nYou are about to format nvme0n1, namespace 0x1.\nWARNING: Format may irrevocably delete this device's data.\nYou have 10 seconds to press Ctrl-C to cancel this operation.\n\nUse the force [--force] option to suppress this warning.\nSending format operation ... \nSuccess formatting namespace:1\n```\n\nThis should take just a few seconds to proceed.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nDrives older than 2020 can block the Format NVM command when used on systems that issue a non-standard \"security freeze\" at the end of POST.[3][4] If nvme format fails, try to suspend the system (make sure to use S3 sleep not S0ix) and then try running nvme format again after waking it.[5][6]\n\n"
    },
    {
      "title": "Using manufacturer specific programs",
      "level": 3,
      "content": "If the above generic utilities do not allow changing the sector size, it may still be possible to change it using an utility from the drive's manufacturer.\n\n"
    },
    {
      "title": "Intel",
      "level": 4,
      "content": "For Intel use the Intel Memory and Storage (MAS) Tool (intel-mas-cli-toolAUR) with the -set PhysicalSectorSize=4096 option. Notice that only reported physical sector size will be changed, logical sector size will remain the same.\n\n"
    },
    {
      "title": "Seagate",
      "level": 4,
      "content": "For Seagate use openseachestAUR.\n\nScan all drives to find the correct one, and print info from the one you found:\n\n```\n# openSeaChest_Basics --scan\n# openSeaChest_Basics -d /dev/sdX -i\n```\n\nShould print out information about the drive. Make sure to check the serial number.\n\nCheck the logical block sizes supported by the drive:\n\n```\n# openSeaChest_Format -d /dev/sdX --showSupportedFormats\n```\n\nIf 4096 is listed, you can change the logical sector size to it as follows:\n\n```\n# openSeaChest_Format -d /dev/sdX --setSectorSize=4096 --confirm this-will-erase-data\n```\n\nThis will take a couple of minutes, after which your drive now uses a 4 KiB native sector size.\n\n"
    },
    {
      "title": "Partition alignment",
      "level": 2,
      "content": "Aligning partitions correctly avoids excessive read-modify-write cycles. A typical practice for personal computers is to have each partition's start and size aligned to 1 MiB (1 048 576 bytes) marks. This covers all common page and block size scenarios, as it is divisible by all commonly used sizes—1 MiB, 512 KiB, 128 KiB, 4 KiB, and 512 B.\n\n- fdisk, cfdisk and sfdisk handle alignment automatically.\n- gdisk and cgdisk handle alignment automatically. sgdisk by default only aligns the start of partitions. Use the -I/--align-end option to additionally enable partition size/end alignment.\n- Parted only aligns the start of the partition, but not the size/end. When creating partitions, make sure to specify the partition end in mebibytes or a larger IEC binary unit.\n\n- sgdisk by default only aligns the start of partitions. Use the -I/--align-end option to additionally enable partition size/end alignment.\n\ncheckpartitionsalignment.sh is a bash script that checks for alignment using Parted and awk.\n\n"
    },
    {
      "title": "dm-crypt",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nAs of Cryptsetup 2.4.0, luksFormat automatically detects the optimal encryption sector size for LUKS2 format [8].\n\nHowever, for this to work, the device needs to report the correct default sector size, see #Changing sector size.\n\nAfter using cryptsetup luksFormat, you can check the sector size used by the LUKS2 volume with\n\n```\n# cryptsetup luksDump device | grep sector\n```\n\nIf the default sector size is incorrect, you can force create a LUKS2 container with a 4 KiB sector size and otherwise default options with:\n\n```\n# cryptsetup luksFormat --sector-size=4096 device\n```\n\nThe command will abort on an error if the requested size does not match your device:\n\n```\n# cryptsetup luksFormat --sector-size 4096 device\n(...)\nVerify passphrase: \nDevice size is not aligned to requested sector size.\n```\n\nIf you encrypted your device with the wrong sector size, the device can be re-encrypted by running:\n\n```\n# cryptsetup reencrypt --sector-size=4096 device\n```\n\n"
    },
    {
      "title": "File systems",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nOn 4Kn disks (4096 byte physical sector size and 4096 byte logical sector size) all mkfs utilities will use a block size of 4096 bytes. On 512e (4096 byte physical sector size, 512 byte logical sector size) and 512n (512 byte physical sector size and 512 byte logical sector size) disks, each mkfs utility behaves differently.\n\nTable content:\nmkfs utility | 512e disk | 512n disk\nmkfs.bcachefs | 4096 | 512\nmkfs.btrfs(8) | 4096 | 4096\nmkfs.exfat(8) | 4096 | 512\nmkfs.ext4(8) | 40961 | 40961\nmkfs.fat(8) | 512 | 512\nmkfs.f2fs(8) | 512 | 512\nmkfs.jfs(8) | 4096 | 4096\nmkfs.nilfs2(8) | 4096 | 4096\nmkfs.ntfs(8) | 512 | 512\nmkfs.reiserfs(8) | 4096 | 4096\nmkfs.udf(8) | 512 | 512\nmkfs.xfs(8) | 4096 | 512\nmkswap(8) | 4096 | 4096\nzpool-create(8) | 512 | 512\n\n1. mkfs.ext4(8) defaults to 1024 byte sectors for file systems smaller than 512 MiB and 4096 byte sectors for 512 MiB and larger.\n\nIf the storage device does not report the correct sector size, you can explicitly format the partitions according to the physical sector size.\n\nIn particular shingled magnetic recording (SMR) drives that are firmware-managed are severely and negatively impacted if using a logical sector size of 512 bytes if their physical sector size is of 4096 bytes. Those drives have different performance writing zones and remapping reallocation occurs while being idle, but during heavy active writes (e.g., RAID resilvering, backups, writing many small files, rsync, etc.), a different file system sector size could drop write speed to single digit megabytes/second, as the higher performance write areas get depleted, and the sector translation layer gets overworked on the shingled areas.\n\nHere are some examples to set the 4096-byte sector size explicitly:\n\n- Bcachefs: # bcachefs format --block_size=4096 /dev/device0 /dev/deviceN --replicas=n\n- exFAT: # mkfs.exfat -s 4096 /dev/device\n- ext4: # mkfs.ext4 -b 4096 /dev/device\n- FAT: # mkfs.fat -S 4096 /dev/device\n- NTFS-3G: # mkfs.ntfs -Q -s 4096 /dev/device\n- UDF: # mkfs.udf -b 4096 /dev/device\n- XFS: # mkfs.xfs -s size=4096 /dev/device\n- ZFS: # zpool create -o ashift=12 poolname raidz device0 … deviceN\n\n```\n# bcachefs format --block_size=4096 /dev/device0 /dev/deviceN --replicas=n\n```\n\n```\n# mkfs.exfat -s 4096 /dev/device\n```\n\n```\n# mkfs.ext4 -b 4096 /dev/device\n```\n\n```\n# mkfs.fat -S 4096 /dev/device\n```\n\n```\n# mkfs.ntfs -Q -s 4096 /dev/device\n```\n\n```\n# mkfs.udf -b 4096 /dev/device\n```\n\n```\n# mkfs.xfs -s size=4096 /dev/device\n```\n\n```\n# zpool create -o ashift=12 poolname raidz device0 … deviceN\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Western Digital’s Advanced Format: The 4K Sector Transition Begins\n- White paper entitled \"Advanced Format Technology.\"\n- Failure to align one's HDD results in poor read/write performance. See [9] for specific examples.\n\n"
    }
  ]
}