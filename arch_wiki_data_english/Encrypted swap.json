{
  "title": "Encrypted swap",
  "url": "https://wiki.archlinux.org/title/Encrypted_swap",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Depending on requirements, different methods may be used to encrypt the swap partition which are described in the following. A setup where the swap encryption is re-initialised on reboot (with a new encryption) provides higher data protection, because it avoids sensitive file fragments which may have been swapped out a long time ago without being overwritten. However, re-encrypting swap also forbids using a suspend-to-disk feature generally.\n\n"
    },
    {
      "title": "Without suspend-to-disk support",
      "level": 2,
      "content": "In systems where suspend-to-disk (hibernation) is not a desired feature, /etc/crypttab can be set up to decrypt the swap partition with a random password with plain dm-crypt at boot-time. The random password is discarded on shutdown, leaving behind only encrypted, inaccessible data in the swap device.\n\nTo enable this feature, simply uncomment the line beginning with swap in /etc/crypttab. Change the device parameter to the name of your swap device. For example, it will look something like this:\n\n```\n/etc/crypttab\n```\n\n```\n# <name>  <device>     <password>     <options>\nswap      /dev/sdX#    /dev/urandom   swap,cipher=aes-xts-plain64,size=512,sector-size=4096\n```\n\nThis will map /dev/sdX# to /dev/mapper/swap as a swap partition that can be added in /etc/fstab like a normal swap. If you had a non-encrypted swap partition before, do not forget to disable it - or re-use its fstab entry by changing the device to /dev/mapper/swap. The default options should be sufficient for most usage. For other options and an explanation of each column, see crypttab(5) as well as point cryptsetup FAQ 2.3.\n\nNote: **deleted** \n\n- Use by-id and by-path paths. However, these are both are susceptible to hardware changes. See Persistent block device naming#by-id and by-path.\n- Use PARTLABEL.\n- Use an LVM logical volume's name.\n- Use the method described in #UUID and LABEL. Labels and UUIDS cannot be used directly because of the recreation and re-encryption of the swap device on every boot with mkswap, see cryptsetup FAQ.\n\nTo use a by-id persistent device naming instead of kernel simple naming, first identify the swap device:\n\n```\n# find -L /dev/disk -samefile /dev/sdaX\n```\n\n```\n/dev/disk/by-id/ata-WDC_WD2500BEVT-22ZCT0_WD-WXE908VF0470-partX\n/dev/disk/by-id/wwn-0x60015ee0000b237f-partX\n```\n\nThen use as a persistent reference for the /dev/sdX# example partition (if two results are returned as above, choose either one of them):\n\n```\n/etc/crypttab\n```\n\n```\n# <name>  <device>                                                         <password>     <options>\nswap      /dev/disk/by-id/ata-WDC_WD2500BEVT-22ZCT0_WD-WXE908VF0470-partX  /dev/urandom   swap,cipher=aes-xts-plain64,size=512,sector-size=4096\n```\n\nAfter a reboot to activate the encrypted swap, you will note that running swapon -s shows an arbitrary device mapper entry (e.g. /dev/dm-1) for it, while the lsblk command shows crypt in the FSTYPE column. Due to fresh encryption each boot, the UUID for /dev/mapper/swap will change every time.\n\n"
    },
    {
      "title": "UUID and LABEL",
      "level": 3,
      "content": "It is dangerous to use crypttab swap with simple kernel device names like /dev/sdX# or even /dev/disk/by-id/ata-SERIAL-partX. A small change in your device names or partitioning layout and /etc/crypttab will see your valuable data formatted on the next boot. Same if you use PARTUUID and then decide to use that partition for something else without removing the crypttab entry first.\n\nIt is more reliable to identify the correct partition by giving it a genuine UUID or LABEL. By default that does not work because dm-crypt and mkswap would simply overwrite any content on that partition which would remove the UUID and LABEL too; however, it is possible to specify a swap offset. This allows you to create a very small, empty, bogus filesystem with no other purpose than providing a persistent UUID or LABEL for the swap encryption.\n\nCreate a filesystem with label of your choice:\n\n```\n# mkfs.ext2 -L cryptswap /dev/sdX# 1M\n```\n\nThe unusual parameter after the device name limits the filesystem size to 1 MiB, leaving room for encrypted swap behind it.\n\n```\n# blkid /dev/sdX#\n```\n\n```\n/dev/sdX#: LABEL=\"cryptswap\" UUID=\"b72c384e-bd3c-49aa-b7a7-a28ea81a2605\" TYPE=\"ext2\"\n```\n\nWith this, /dev/sdX# now can easily be identified either by UUID or LABEL, regardless of how its device name or even partition number might change in the future. All that is left are the /etc/crypttab and /etc/fstab entries. For example, using different encryption options:\n\n```\n/etc/crypttab\n```\n\n```\n# <name> <device>         <password>    <options>\nswap     LABEL=cryptswap  /dev/urandom  swap,offset=2048,cipher=aes-xts-plain64,size=512,sector-size=4096\n```\n\nNote the offset: it is 2048 sectors of 512 bytes (it is not affected by the dm-crypt sector size), thus 1 MiB. This way the encrypted swap will not affect the filesystem LABEL/UUID, and data alignment works out as well.\n\n```\n/etc/fstab\n```\n\n```\n# <filesystem>    <dir>  <type>  <options>  <dump>  <pass>\n/dev/mapper/swap  none   swap    defaults   0       0\n```\n\nUsing this setup, the cryptswap will only try to use the partition with the corresponding LABEL, regardless of what its device name may be. Should you decide to use the partition for something else, by formatting it the cryptswap LABEL would also be gone, so /etc/crypttab will not overwrite it on your next boot.\n\n"
    },
    {
      "title": "Disabling hibernation in desktop environments",
      "level": 3,
      "content": "Desktop environments may not automatically detect that a swap partition is randomly encrypted and cannot be used for suspend-to-disk.\n\nXfce can be configured to hide its Hibernate and Hybrid Sleep buttons by running these commands:\n\n```\n$ xfconf-query -c xfce4-session -np /shutdown/ShowHibernate -t bool -s false\n$ xfconf-query -c xfce4-session -np /shutdown/ShowHybridSleep -t bool -s false\n```\n\n"
    },
    {
      "title": "With suspend-to-disk support",
      "level": 2,
      "content": "The following three methods are alternatives for setting up an encrypted swap for suspend-to-disk (hibernation). If you apply any of them, be aware that critical data swapped out by the system may potentially stay in the swap over a long period (i.e. until it is overwritten). To reduce this risk consider setting up a system job which re-encrypts swap, e.g. each time the system is going into a regular shut-down, along with the method of your choice.\n\n"
    },
    {
      "title": "Using a swap file",
      "level": 3,
      "content": "A swap file can be placed in a file system within an encrypted device. Follow the swap file creation instructions in Swap#Swap file and set up hibernation according to Power management/Suspend and hibernate#Configure the initramfs.\n\nWhen used with a systemd-based initrd and an encrypted root filesystem, this can be a very simple and flexible method for encrypting swap. After setting up an encrypted root filesystem, the swap file can be made, activated, and added to /etc/fstab and work for hibernation without any further setup.\n\n"
    },
    {
      "title": "Using a swap partition",
      "level": 3,
      "content": "Use cryptsetup-luksFormat(8) to create the encrypted container for the swap partition:\n\n```\n# cryptsetup luksFormat --label swap /dev/device\n```\n\nOpen the container to /dev/mapper/swap:\n\n```\n# cryptsetup open /dev/disk/by-label/swap swap\n```\n\nCreate a swap filesystem inside the mapped partition:\n\n```\n# mkswap /dev/mapper/swap\n```\n\nIf not using systemd#GPT partition automounting, add the mapped partition to /etc/fstab by adding the following line:\n\n```\n/dev/mapper/swap none swap defaults 0 0\n```\n\nTo set up your system to resume from hibernation, use the resume=/dev/mapper/swap kernel parameter. See Power management/Suspend and hibernate#Pass hibernate location to initramfs for details.\n\n"
    },
    {
      "title": "Using a TPM",
      "level": 4,
      "content": "The following provides unattended swap decryption with a key stored in the TPM.\n\nYou can use systemd-cryptenroll to enroll the key to the Luks container and TPM, and wipe the previously created keyslot containing the password:\n\n```\n# systemd-cryptenroll --tpm2-device auto /dev/device\n# systemd-cryptenroll --wipe-slot password /dev/device\n```\n\nCheck the result with\n\n```\n# systemd-cryptenroll /dev/device\nSLOT TYPE\n   0 tpm2\n```\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Using an additional passphrase or keyfile",
      "level": 4,
      "content": "The basic setup above has the disadvantage of having to insert an additional passphrase for the swap partition manually on every boot.\n\n"
    },
    {
      "title": "Unlocking the partition in the initramfs",
      "level": 4,
      "content": "To resume from an encrypted swap partition, the encrypted partition must be unlocked in the initramfs.\n\nWhen using the systemd-based initramfs with the sd-encrypt mkinitcpio hook, either\n\n- specify the appropriate rd.luks.uuid= kernel parameters to unlock the swap partition, or\n- edit crypttab.initramfs and regenerate the initramfs.\n\nFor example, for a TPM backed encrypted swap device:\n\n```\n/etc/crypttab.initramfs\n```\n\n```\nswap UUID=56f8ee97-54b3-4a65-9282-688deb922527 none tpm2-device=auto\n```\n\nWhen using the default busybox-based initramfs with the encrypt hook, follow the instructions below.\n\nIf the swap device is on a different device from that of the root file system, it will not be opened by the encrypt hook, i.e. the resume will take place before /etc/crypttab can be used, therefore it is required to create a hook in /etc/mkinitcpio.conf to open the swap LUKS device before resuming.\n\nNote: **This article or section is a candidate for merging with dm-crypt/Specialties#Multiple non-root partitions.** This article or section is a candidate for merging with dm-crypt/Specialties#Multiple non-root partitions.\n\nThis article or section is a candidate for merging with dm-crypt/Specialties#Multiple non-root partitions.\n\nNow you have to create a hook to open the swap at boot time. You can either install and configure mkinitcpio-openswapAUR, or follow the following instructions. Create a hook file containing the open command:\n\n```\n/etc/initcpio/hooks/openswap\n```\n\n```\nrun_hook ()\n{\n    cryptsetup open /dev/device swap\n}\n```\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nfor opening the swap device by typing your password or\n\n```\n/etc/initcpio/hooks/openswap\n```\n\n```\nrun_hook ()\n{\n    ## Optional: To avoid race conditions\n    x=0;\n    while [ ! -b /dev/mapper/root-device ] && [ $x -le 10 ]; do\n       x=$((x+1))\n       sleep .2\n    done\n    ## End of optional\n\n    mkdir crypto_key_device\n    mount /dev/mapper/root-device crypto_key_device\n    cryptsetup open --key-file crypto_key_device/path-to-the-key /dev/device swap\n    umount crypto_key_device\n}\n```\n\nfor opening the swap device by loading a keyfile from a crypted root device.\n\nOn some computers race conditions may occur when mkinitcpio tries to mount the device before the decryption process and device enumeration is completed. The commented Optional block will delay the boot process up to 2 seconds until the root device is ready to mount.\n\nThen create and edit the hook setup file:\n\n```\n/etc/initcpio/install/openswap\n```\n\n```\nbuild ()\n{\n   add_runscript\n}\nhelp ()\n{\ncat<<HELPEOF\n  This opens the swap encrypted partition /dev/device in /dev/mapper/swap\nHELPEOF\n}\n```\n\nAdd the hook openswap in the HOOKS array in /etc/mkinitcpio.conf, before filesystem but after encrypt. Do not forget to add the resume hook after openswap.\n\n```\nHOOKS=(... encrypt openswap resume filesystems ...)\n```\n\nRegenerate the initramfs.\n\nAt boot time, the openswap hook will open the swap partition so the kernel resume may use it. If you use special hooks for resuming from hibernation, make sure they are placed after openswap in the HOOKS array. Please note that because of initrd opening swap, there is no entry for swap in /etc/crypttab needed in this case.\n\nCreate a keyfile:\n\n```\n# dd bs=512 count=4 if=/dev/random iflag=fullblock | install -m 0600 /dev/stdin /etc/cryptsetup-keys.d/swap.key\n```\n\nAdd the keyfile to LUKS:\n\n```\n# cryptsetup luksAddKey /dev/device /etc/cryptsetup-keys.d/swap.key\n```\n\nConfigure dracut to include the resume module and add the swap.key file to the initramfs (See also dracut#Hibernation):\n\n```\n/etc/dracut.conf.d/resume-from-hibernate.conf\n```\n\n```\nadd_dracutmodules+=\" resume \"\ninstall_items+=\" /etc/cryptsetup-keys.d/swap.key \"\n```\n\nRegenerate the initramfs.\n\nAdd the rd.luks.name and rd.luks.key (replace the swap's partition UUID) entries to your kernel command line. Your kernel command might look like this now:\n\n```\nkernel /vmlinuz-linux cryptdevice=/dev/sda2:root root=/dev/mapper/root resume=/dev/mapper/swap rd.luks.name=fd839505-3213-4603-9a70-c5a96a24768f=swap rd.luks.key=/etc/cryptsetup-keys.d/swap.key ro\n```\n\n"
    },
    {
      "title": "LVM on LUKS",
      "level": 3,
      "content": "If the swap volume is in a volume group that gets activated in initramfs, simply follow the instructions in Power management/Suspend and hibernate#Hibernation.\n\n"
    },
    {
      "title": "Known issues",
      "level": 2,
      "content": "- Stopped (with error) /dev/dm-1 in logs. See systemd issue 1620.\n\n"
    }
  ]
}