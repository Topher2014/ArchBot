{
  "title": "Clamav",
  "url": "https://wiki.archlinux.org/title/Clamav",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Clam AntiVirus is an open source (GPL) anti-virus toolkit for UNIX. It provides a number of utilities including a flexible and scalable multi-threaded daemon, a command line scanner and advanced tool for automatic database updates. Because ClamAV's main use is on file/mail servers, it primarily detects malware with its built-in signatures and is not a traditional endpoint security suite.\n\nThe current situation of anti-malware products on Linux is inadequate due to several factors:\n\n1. Limited Variety: Compared to Windows, there are fewer users/clients resulting in limited interest for companies to develop products for Linux.\n1. Complacency: Many believe Linux is inherently secure, leading to a lack of awareness and focus on malware protection. This creates a gap in proactive defense mechanisms.\n1. Lack of Features: Existing tools often lack advanced features which are common in Windows anti-malware products, making them less effective on Linux.\n\nThis is especially bad because the amount of malware on Linux is increasing just as the possible attack surface due to the increasing number of Linux-based servers and IoT devices.\n\nCurrently on Linux one of the few existing and actively developed anti-malware solutions is ClamAV.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the clamav package.\n\nThis will install the following tools:\n\n```\nclamd: ClamAV Daemon\nclamonacc: On-Access real-time protection\nclamdscan: A simple scanning client\nclamdtop: A resource monitoring interface for clamd\nfreshclam: Daemon for virus signature updates\nclamconf: Tool to create and check configuration files\n```\n\nAll ClamAV related tools, services and daemons communicate with clamd via a socket.\n\nBy default this is done via a local socket configured and named as \"LocalSocket\".\n\nClamAV also provides the possibility to enable communication via remote locations by using a network socket which is configured and names as \"TCPSocket\".\n\nNote: For more details see:\n\nFor more details see:\n\nhttps://blog.clamav.net/2016/06/regarding-use-of-clamav-daemons-tcp.html\n\nAnother important thing to note is that when using LocalSocket, then clamd will need to be run under a user with the right permissions to scan the files you plan on including in your monitoring.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Default configuration files should already exists. Other wise you can manually create them by using clamconf:\n\n```\n# clamconf -g freshclam.conf > freshclam.conf\n# clamconf -g clamd.conf > clamd.conf\n# clamconf -g clamav-milter.conf > clamav-milter.conf\n```\n\nThe following files contain the relevant configuration options.\n\n- freshclam: /etc/clamav/freshclam.conf\n- clamd: /etc/clamav/clamd.conf\n- clamd mail filtering: /etc/clamav/clamav-milter.conf\n\nLast but not least you can check your config files by running clamconf\n\nThe default installation will create sane default configurations such as clamav user+group and the required clamd configuration.\n\nAdditional recommended configurations can be set:\n\n```\n/etc/clamav/clamd.conf\n```\n\n```\n# Log time with each message.\n# Default: no\nLogTime yes\n\n# Log additional information about the infected file, such as its\n# size and hash, together with the virus name.\nExtendedDetectionInfo yes\n\n# Run as another user (clamd must be started by root for this option to work)\n# Default: don't drop privileges\nUser clamav\n\n# Maximum depth directories are scanned at.\n# Default: 15\nMaxDirectoryRecursion 20\n\nDetectPUA yes\nHeuristicAlerts yes\nScanPE yes\nScanELF yes\nScanOLE2 yes\nScanPDF yes\nScanSWF yes\nScanXMLDOCS yes\nScanHWP3 yes\nScanOneNote yes\nScanMail yes\nScanHTML yes\nScanArchive yes\nBytecode yes\nAlertBrokenExecutables yes\nAlertBrokenMedia yes\nAlertEncrypted yes\nAlertEncryptedArchive yes\nAlertEncryptedDoc yes\nAlertOLE2Macros yes\nAlertPartitionIntersection yes\n```\n\n"
    },
    {
      "title": "Enabling real-time protection OnAccessScan",
      "level": 3,
      "content": "On-access scanning is the real-time protection daemon which will scan the file while reading, writing or executing it. It can be configured to either notify on detection or prevent/block on detection.\n\nConfiguration OnAccessScan is done via editing the /etc/clamav/clamd.conf configuration file.\n\nThe following changes are required for OnAccessScan to work:\n\n```\n/etc/clamav/clamd.conf\n```\n\n```\n# Exclude the UID of the scanner itself from checking, to prevent loops\nOnAccessExcludeUname clamav\n```\n\nThe following additional changes are recommended and will put the On-Access Scanner into notify-only mode:\n\n```\n/etc/clamav/clamd.conf\n```\n\n```\n# Set the mount point where to recursively perform the scan,\n# this could be every path or multiple path (one line for path)\nOnAccessMountPath /\n\n# Alternatively, add some directories instead of mount points\n# OnAccessIncludePath /home\n\n# Prevention doesn't work with OnAccessMountPath.\n# It works with OnAccessIncludePath, as long as /usr and /etc are not included.\n# Including /var while activating prevention is also not recommended, because\n# this would slow down package installation by a factor of 1000.\nOnAccessPrevention no\n\n# Perform scans on newly created, moved, or renamed files\nOnAccessExtraScanning yes\n\n# Optionallyexclude root-owned processes\n# OnAccessExcludeRootUID true\n```\n\n"
    },
    {
      "title": "Creating notification popups for alerts",
      "level": 4,
      "content": "So far ClamAV will silently log any detection but not alert the user. A pop-up to alert the user on any detection can be added.\n\nFirst add the following line to your clamd configuration:\n\n```\n/etc/clamav/clamd.conf\n```\n\n```\nVirusEvent /etc/clamav/virus-event.bash\n```\n\nNext, allow the clamav user to run notify-send as any user with custom environment variables via sudo:\n\n```\n/etc/sudoers.d/clamav\n```\n\n```\nclamav ALL = (ALL) NOPASSWD: SETENV: /usr/bin/notify-send\n```\n\nNext, create the file /etc/clamav/virus-event.bash, make it executable and add the following:\n\n```\n/etc/clamav/virus-event.bash\n```\n\n```\n#!/bin/bash\nPATH=/usr/bin\nALERT=\"Signature detected by clamav: $CLAM_VIRUSEVENT_VIRUSNAME in $CLAM_VIRUSEVENT_FILENAME\"\n\n# Send an alert to all graphical users.\nfor ADDRESS in /run/user/*; do\n    USERID=${ADDRESS#/run/user/}\n    /usr/bin/sudo -u \"#$USERID\" DBUS_SESSION_BUS_ADDRESS=\"unix:path=$ADDRESS/bus\" PATH=${PATH} \\\n        /usr/bin/notify-send -w -u critical -i dialog-warning \"Virus found!\" \"$ALERT\"\ndone\n```\n\nThis allows you to change/specify the message when a virus has been detected by clamd's on-access scanning service.\n\nBy default, clamonacc passes clamav the names of just-accessed files for scanning. This is a problem, because files inaccessible to the clamav user cannot be scanned this way. Instead, it is possible to instruct clamonacc (which always runs as root) to use file descriptor passing. Edit clamav-clamonacc.service with the following:\n\n```\n[Service]\nExecStart=\nExecStart=/usr/sbin/clamonacc -F --fdpass --log=/var/log/clamav/clamonacc.log\n```\n\nLastly, you will need to start/enable or restart the clamav-clamonacc.service as well as the clamav-daemon.service\n\nSee: #Starting the ClamAV + OnAccessScanning daemon\n\nIf you get AppArmor denials about clamd, set the profile to a complain-only mode:\n\n```\n# aa-complain clamd\n```\n\n"
    },
    {
      "title": "Updating database",
      "level": 2,
      "content": "Update the virus definitions with:\n\n```\n# freshclam\n```\n\nIf you are behind a proxy, edit /etc/clamav/freshclam.conf and update HTTPProxyServer, HTTPProxyPort, HTTPProxyUsername and HTTPProxyPassword.\n\nThe database files are saved in:\n\n```\n/var/lib/clamav/daily.cld\n/var/lib/clamav/main.cld\n/var/lib/clamav/bytecode.cvd\n```\n\nFor automatic updates first create and set the requires freshclam.log file:\n\n```\ntouch /var/log/clamav/freshclam.log\nchmod 600 /var/log/clamav/freshclam.log\nchown clamav /var/log/clamav/freshclam.log\n```\n\nStart/enable clamav-freshclam.service or clamav-freshclam-once.timer so that the virus definitions are kept recent.\n\nThe clamav-freshclam.service launches freshclam in daemon mode, defaulting to 12 checks per day (every 2 hours). The frequency can be changed in /etc/clamav/freshclam.conf.\n\nThe clamav-freshclam-once.timer launches the freshclam check once per day. The frequency can be changed in /usr/lib/systemd/system/clamav-freshclam-once.timer.\n\n- Freshclam in daemon mode checks on every (service) start.\n- Over 1 check per hour results in being blocked by the CDN for 24 hours.\n- The .timer unit follows the set schedule, regardless of reboots or service restarts.\n- You can add additional virus signature databases by following #Adding more databases/signatures repositories.\n\n"
    },
    {
      "title": "Starting the ClamAV + OnAccessScanning daemon",
      "level": 2,
      "content": "This will load all virus signatures in RAM. As of February 2024 these signatures require at least 1.6GB of free RAM. Twice that amount of RAM is used shortly, during the periodic update of the signatures.\n\n- You will need to run freshclam before starting the service for the first time or you will run into trouble/errors which will prevent ClamAV from starting correctly.\n- The daemon is not needed if you only want to perform stand-alone scans. See Scan for viruses below.\n- The daemon by itself does not do anything yet unless you enable On-Access Scanning. See: #Enabling real-time protection OnAccessScan\n\nThe service is called clamav-daemon.service. Start it and enable it to start at boot.\n\nAdditionally start and enable clamav-clamonacc.service for real-time on access protection.\n\n"
    },
    {
      "title": "Testing the software",
      "level": 2,
      "content": "In order to make sure ClamAV and the definitions are installed correctly, scan the EICAR test file (a harmless signature with no virus code) with clamscan.\n\n```\n$ curl https://secure.eicar.org/eicar.com.txt | clamscan -\n```\n\nThe output must include:\n\n```\nstdin: Win.Test.EICAR_HDB-1 FOUND\n```\n\n"
    },
    {
      "title": "Real-time protection",
      "level": 3,
      "content": "You can download and save a the eicar file in one of the directories you configured clamonacc to monitor. For example:\n\n```\n$ cd /home/user/Downloads/\n$ wget https://secure.eicar.org/eicar.com.txt\n$ cat eicar.com.txt\n```\n\n"
    },
    {
      "title": "Adding more databases/signatures repositories",
      "level": 2,
      "content": "ClamAV can use databases/signature from other repositories or security vendors.\n\nTo add the most important ones in a single step, install either clamav-unofficial-sigsAUR (see GitHub description) or python-fangfrischAUR (see online documentation). Both will add signatures/databases from popular providers, e.g. MalwarePatrol, SecuriteInfo, Yara, Linux Malware Detect, etc.\n\n"
    },
    {
      "title": "Option #1: Set up Fangfrisch",
      "level": 3,
      "content": "Fangfrisch was designed as a more secure, flexible and convenient replacement for clamav-unofficial-sigs, and requires very little configuration (/etc/fangfrisch/fangfrisch.conf).\n\nMost importantly, Fangfrisch never needs to be run with root permissions, unlike clamav-unofficial-sigs.\n\nCreate database structure by running:\n\n```\n# sudo -u clamav /usr/bin/fangfrisch --conf /etc/fangfrisch/fangfrisch.conf initdb\n```\n\nEnable the fangfrisch.timer (system-level).\n\n"
    },
    {
      "title": "Option #2: Set up clamav-unofficial-sigs",
      "level": 3,
      "content": "Enable the clamav-unofficial-sigs.timer.\n\nThis will regularly update the unofficial signatures based on the configuration files in the directory /etc/clamav-unofficial-sigs.\n\nTo update signatures manually, run the following:\n\n```\n# clamav-unofficial-sigs.sh\n```\n\nTo change any default settings, refer and modify /etc/clamav-unofficial-sigs/user.conf.\n\n"
    },
    {
      "title": "MalwarePatrol database",
      "level": 4,
      "content": "If you would like to use the MalwarePatrol database, sign up for an account at https://malwareblocklist.org/ (for a fee).\n\nIn /etc/clamav-unofficial-sigs/user.conf, change the following to enable this functionality:\n\n```\nmalwarepatrol_receipt_code=\"YOUR-RECEIPT-NUMBER\" # enter your receipt number here\nmalwarepatrol_product_code=\"8\" # Use 8 if you have a Free account or 15 if you are a Premium customer.\nmalwarepatrol_list=\"clamav_basic\" # clamav_basic or clamav_ext\nmalwarepatrol_free=\"yes\" # Set to yes if you have a Free account or no if you are a Premium customer.\n```\n\nSource: https://www.malwarepatrol.net/clamav-configuration-guide/\n\n"
    },
    {
      "title": "Scan for viruses",
      "level": 2,
      "content": "There are two options for on-demand scanning:\n\n"
    },
    {
      "title": "using the stand-alone scanner",
      "level": 3,
      "content": "clamscan can be used to scan certain files, home directories, or an entire system:\n\n```\n$ clamscan myfile\n$ clamscan --recursive --infected /home/archie\n# clamscan --recursive --infected --exclude-dir='^/sys|^/dev' /\n```\n\nIf you would like clamscan to remove the infected file add to the command the --remove option, or you can use --move=/dir to quarantine them.\n\nYou may also want clamscan to scan larger files. In this case, append the options --max-filesize=4000M and --max-scansize=4000M to the command. '4000M' is the largest possible value, and may be lowered as necessary.\n\nUsing the -l /path/to/file option will print the clamscan logs to a text file for locating reported infections.\n\n"
    },
    {
      "title": "using the daemon",
      "level": 3,
      "content": "clamdscan is similar to the above but utilizes the daemon, which must be running for the command to work. Most options are ignored since the daemon reads the settings specified in /etc/clamav/clamd.conf.\n\n"
    },
    {
      "title": "Using the milter",
      "level": 2,
      "content": "Milter will scan your sendmail server for email containing virus. Adjust /etc/clamav/clamav-milter.conf to your needs. For example:\n\n```\n/etc/clamav/clamav-milter.conf\n```\n\n```\nMilterSocket /tmp/clamav-milter.socket\nMilterSocketMode 660\nFixStaleSocket yes\nUser clamav\nMilterSocketGroup clamav\nPidFile /run/clamav/clamav-milter.pid\nTemporaryDirectory /tmp\nClamdSocket unix:/run/clamav/clamd.ctl\nLogSyslog yes\nLogInfected Basic\n```\n\nCreate /etc/systemd/system/clamav-milter.service:\n\n```\n/etc/systemd/system/clamav-milter.service\n```\n\n```\n[Unit]\nDescription='ClamAV Milter'\nAfter=clamav-daemon.service\n\n[Service]\nType=forking\nExecStart=/usr/bin/clamav-milter --config-file /etc/clamav/clamav-milter.conf\nRestart=Always\n\n[Install]\nWantedBy=multi-user.target\n```\n\nYour system may require a different Restart= directive. It is needed, for example, when an automatism like logrotate stops the service.\n\nEnable and start clamav-milter.service.\n\nFor Postfix add the following lines to /etc/postfix/main.cf:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsmtpd_milters = unix:/tmp/clamav-milter.socket\nmilter_default_action = tempfail\n```\n\nCheck journalctl if the permission to access clamav-milter.socket for postfix is set accordingly, if not, add user postfix to group clamav.\n\n"
    },
    {
      "title": "Using clamscan",
      "level": 4,
      "content": "When scanning a file or directory from command line using clamscan only single CPU thread is used. This may be ok in cases when timing is not critical or you do not want computer to become sluggish. If there is a need to scan large directory or USB drive quickly you may want to use all available CPUs to speed up the process.\n\nclamscan is designed to be single-threaded, so xargs can be used to run the scan in parallel:\n\n```\n$ find /home/archie -type f -print0 | xargs -0 -P $(nproc) clamscan\n```\n\nIn this example the -P parameter for xargs runs clamscan in as many processes as there are CPUs (reported by nproc) at the same time. --max-lines and --max-args options will allow even finer control of batching the workload across the threads.\n\nThis will consume loads of RAM as all processes are individual and will load the signature files. A single thread will consume around 1G (or more) of RAM, and may hang your computer unless OOM is clever enough. You may want to consider using clamdscan instead.\n\n"
    },
    {
      "title": "Using clamdscan",
      "level": 4,
      "content": "If you already have clamd daemon running clamdscan can be used instead (see #Starting the ClamAV + OnAccessScanning daemon):\n\n```\n$ clamdscan --multiscan --fdpass /home/archie\n```\n\nHere the --multiscan parameter enables clamd to scan the contents of the directory in parallel using available threads. --fdpass parameter is required to pass the file descriptor permissions to clamd as the daemon is running under clamav user and group.\n\nThe number of available threads for clamdscan is determined in /etc/clamav/clamd.conf via MaxThreads parameter clamd.conf(5). Even though you may see that the number of MaxThreads specified is more than one (current default is 10), when you start the scan using clamdscan from command line and do not specify --multiscan option, only one effective CPU thread will be used for scanning.\n\n"
    },
    {
      "title": "Enable TCPSocket",
      "level": 4,
      "content": "If you enable TCPSocket in /etc/clamav/clamd.conf, you must edit clamav-daemon.socket too (see FS#57669). The systemd socket file needs to be configured with a matching port and IP address:\n\n```\n/etc/systemd/system/clamav-daemon.socket.d/override.conf\n```\n\n```\n[Socket]\nListenStream=\nListenStream=/run/clamav/clamd.ctl\nListenStream=127.0.0.1:3310\n```\n\nAnd finally restart clamav-daemon.socket to see a Clamd binding at TCP port 3310:\n\n```\n# ss -tulpn | grep clamd\n```\n\n```\ntcp   LISTEN 0      4096       127.0.0.1:3310      0.0.0.0:*    users:((\"clamd\",pid=599,fd=4),(\"systemd\",pid=1,fd=44))\n```\n\n"
    },
    {
      "title": "Error: Clamd was NOT notified",
      "level": 3,
      "content": "If you get the following messages after running freshclam:\n\n```\nWARNING: Clamd was NOT notified: Cannot connect to clamd through\n/var/lib/clamav/clamd.sock connect(): No such file or directory\n```\n\nAdd a sock file for ClamAV:\n\n```\n# touch /run/clamav/clamd.ctl\n# chown clamav:clamav /run/clamav/clamd.ctl\n```\n\nThen, edit /etc/clamav/clamd.conf - uncomment this line:\n\n```\nLocalSocket /run/clamav/clamd.ctl\n```\n\nSave the file and restart clamav-daemon.service.\n\n"
    },
    {
      "title": "Error: No supported database files found",
      "level": 3,
      "content": "If you get the next error when starting the daemon:\n\n```\nLibClamAV Error: cli_loaddb(): No supported database files found\nin /var/lib/clamav ERROR: Not supported data format\n```\n\nThis happens because of mismatch between /etc/clamav/freshclam.conf setting DatabaseDirectory and /etc/clamav/clamd.conf setting DatabaseDirectory. /etc/clamav/freshclam.conf pointing to /var/lib/clamav, but /etc/clamav/clamd.conf (default directory) pointing to /usr/share/clamav, or other directory. Edit in /etc/clamav/clamd.conf and replace with the same DatabaseDirectory as in /etc/clamav/freshclam.conf. After that clamav will start up successfully.\n\n"
    },
    {
      "title": "Error: Can't create temporary directory",
      "level": 3,
      "content": "If you get the following error, along with a 'HINT' containing a UID and a GID number:\n\n```\n# can't create temporary directory\n```\n\nCorrect permissions:\n\n```\n# chown UID:GID /var/lib/clamav && chmod 755 /var/lib/clamav\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:ClamAV\n\n"
    }
  ]
}