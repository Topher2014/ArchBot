{
  "title": "Iwd",
  "url": "https://wiki.archlinux.org/title/Iwd",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Network configuration\n- Wireless network configuration\n- wpa_supplicant\n\niwd (iNet wireless daemon) is a wireless daemon for Linux written by Intel. The core goal of the project is to optimize resource utilization by not depending on any external libraries and instead utilizing features provided by the Linux Kernel to the maximum extent possible.\n\niwd can work in standalone mode or in combination with comprehensive network managers like ConnMan, systemd-networkd and NetworkManager.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the iwd package.\n\nOptionally, third-party graphical and terminal user interface front-ends can be installed:\n\n- impala — A TUI (Terminal User Interface) for iwd.\n\n- iwdgui — A graphical front-end for iwd.\n\n- iwgtk — A graphical front-end for iwd and an indicator (tray) icon.\n\n- iwmenu — A menu-driven interface for iwd.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "The iwd package provides the client program iwctl, the daemon iwd and the Wi-Fi monitoring tool iwmon.\n\nStart/enable iwd.service so it can be controlled through the iwctl command or through iwgtk.\n\n"
    },
    {
      "title": "iwctl",
      "level": 3,
      "content": "To get an interactive prompt do:\n\n```\n$ iwctl\n```\n\nThe interactive prompt is then displayed with a prefix of [iwd]#.\n\n- In the iwctl prompt you can auto-complete commands and device names by hitting Tab.\n- To exit the interactive prompt, send EOF by pressing Ctrl+d.\n- You can use all commands as command line arguments without entering an interactive prompt. For example: iwctl device wlan0 show.\n\nTo list all available commands:\n\n```\n[iwd]# help\n```\n\n"
    },
    {
      "title": "Connect to a network",
      "level": 4,
      "content": "First, if you do not know your wireless device name, list all Wi-Fi devices:\n\n```\n[iwd]# device list\n```\n\nIf the device or its corresponding adapter is turned off, turn it on:\n\n```\n[iwd]# device name set-property Powered on\n```\n\n```\n[iwd]# adapter adapter set-property Powered on\n```\n\nThen, to initiate a scan for networks (note that this command will not output anything):\n\n```\n[iwd]# station name scan\n```\n\nYou can then list all available networks:\n\n```\n[iwd]# station name get-networks\n```\n\nFinally, to connect to a network:\n\n```\n[iwd]# station name connect SSID\n```\n\nIf network is hidden:\n\n```\n[iwd]# station name connect-hidden SSID\n```\n\nIf a passphrase is required (and it is not already stored in one of the profiles that iwd automatically checks), you will be prompted to enter it. Alternatively, you can supply it as a command line argument:\n\n```\n$ iwctl --passphrase passphrase station name connect SSID\n```\n\n- iwd automatically stores network passphrases in the /var/lib/iwd directory and uses them to auto-connect in the future. See #Network configuration.\n- To connect to a network with spaces in the SSID, the network name should be double quoted when connecting.\n- iwd only supports PSK pass-phrases from 8 to 63 ASCII-encoded characters. The following error message will be given if the requirements are not met: PMK generation failed. Ensure Crypto Engine is properly configured.\n\n"
    },
    {
      "title": "Connect to a network using WPS/WSC",
      "level": 4,
      "content": "If your network is configured such that you can connect to it by pressing a button (Wikipedia:Wi-Fi Protected Setup), check first that your network device is also capable of using this setup procedure.\n\n```\n[iwd]# wsc list\n```\n\nThen, provided that your device appeared in the above list,\n\n```\n[iwd]# wsc device push-button\n```\n\nand push the button on your router. The procedure works also if the button was pushed beforehand, less than 2 minutes earlier.\n\nIf your network requires to validate a PIN number to connect that way, check the help command output to see how to provide the right options to the wsc command.\n\n"
    },
    {
      "title": "Disconnect from a network",
      "level": 4,
      "content": "To disconnect from a network:\n\n```\n[iwd]# station device disconnect\n```\n\n"
    },
    {
      "title": "Show device and connection information",
      "level": 4,
      "content": "To display the details of a Wi-Fi device, like MAC address:\n\n```\n[iwd]# device device show\n```\n\nTo display the connection state, including the connected network of a Wi-Fi device:\n\n```\n[iwd]# station device show\n```\n\n"
    },
    {
      "title": "Manage known networks",
      "level": 4,
      "content": "To list networks you have connected to previously:\n\n```\n[iwd]# known-networks list\n```\n\nTo forget a known network:\n\n```\n[iwd]# known-networks SSID forget\n```\n\n"
    },
    {
      "title": "iwgtk",
      "level": 3,
      "content": "Alternatively, iwgtkAUR provides a GUI front-end through which iwd can be controlled.\n\nRunning iwgtk without any arguments launches the application window, which can be used to toggle your adapters and devices on/off, change their operating modes, view available networks, connect to available networks, and manage known networks.\n\n"
    },
    {
      "title": "Indicator icon",
      "level": 4,
      "content": "To launch iwgtk's indicator (tray) icon daemon, run:\n\n```\n$ iwgtk -i\n```\n\nIf the indicator icon does not appear, then your system tray most likely lacks support for the StatusNotifierItem API, in which case you need to run a compatibility layer such as snixembed-gitAUR.\n\nThe following system trays support StatusNotifierItem, and therefore work out of the box:\n\n- KDE Plasma\n- swaybar\n- xfce4-panel\n\nThe following trays only support XEmbed, and therefore require snixembed-gitAUR:\n\n- AwesomeWM\n- i3bar\n- stalonetray\n\n"
    },
    {
      "title": "Autostart",
      "level": 4,
      "content": "The most common use case for iwgtk is to start the indicator daemon every time you log into your desktop. If your desktop environment supports the XDG Autostart standard, this should happen automatically due to the iwgtk-indicator.desktop file which is placed in /etc/xdg/autostart/ by the AUR package.\n\nAlternatively, a systemd unit file to start the indicator daemon is provided by the AUR package. If your desktop environment supports systemd's graphical-session.target unit, then iwgtk can be autostarted via systemd by enabling the iwgtk.service user unit.\n\n"
    },
    {
      "title": "Network configuration",
      "level": 2,
      "content": "By default, iwd stores the network configuration in the directory /var/lib/iwd. The configuration file is named as network.type, where network is the network SSID and .type is the network type, either .open, .psk or .8021x. The file is used to store the encrypted PreSharedKey and optionally the cleartext Passphrase and can also be created by the user without invoking iwctl. The file can be used for other configuration pertaining to that network SSID as well. For more settings, see iwd.network(5).\n\n"
    },
    {
      "title": "WPA-PSK",
      "level": 3,
      "content": "A minimal example file to connect to a WPA-PSK or WPA2-PSK secured network with SSID \"spaceship\" and passphrase \"test1234\":\n\n```\n/var/lib/iwd/spaceship.psk\n```\n\n```\n[Security]\nPreSharedKey=aafb192ce2da24d8c7805c956136f45dd612103f086034c402ed266355297295\n```\n\nTo calculate the pre-shared key from the passphrase, one of these two methods can be used:\n\n- Enter the passphrase in cleartext in the configuration file:\n\n```\n/var/lib/iwd/spaceship.psk\n```\n\n```\n[Security]\nPassphrase=test1234\n```\n\n```\n/var/lib/iwd/spaceship.psk\n```\n\n```\n[Security]\nPassphrase=test1234\nPreSharedKey=aafb192ce2da24d8c7805c956136f45dd612103f086034c402ed266355297295\n```\n\n- Or the pre-shared key can be calculated from the SSID and the passphrase using wpa_passphrase (from wpa_supplicant) or wpa-pskAUR. See wpa_supplicant#Connecting with wpa_passphrase for more details.\n\n"
    },
    {
      "title": "EAP-PWD",
      "level": 4,
      "content": "For connecting to a EAP-PWD protected enterprise access point you need to create a file called: essid.8021x in the /var/lib/iwd directory with the following content:\n\n```\n/var/lib/iwd/essid.8021x\n```\n\n```\n[Security]\nEAP-Method=PWD\nEAP-Identity=your_enterprise_email\nEAP-Password=your_password\n\n[Settings]\nAutoConnect=true\n```\n\nIf you do not want autoconnect to the AP you can set the option to False and connect manually to the access point via iwctl. The same applies to the password, if you do not want to store it plaintext leave the option out of the file and just connect to the enterprise AP.\n\n"
    },
    {
      "title": "EAP-PEAP",
      "level": 4,
      "content": "Like EAP-PWD, you also need to create a essid.8021x file in the directory. Before you proceed to write the configuration file, this is also a good time to find out which CA certificate your organization uses. This is an example configuration file that uses MSCHAPv2 password authentication:\n\n```\n/var/lib/iwd/essid.8021x\n```\n\n```\n[Security]\nEAP-Method=PEAP\nEAP-Identity=anonymous@realm.edu\nEAP-PEAP-CACert=/path/to/root.crt\nEAP-PEAP-ServerDomainMask=radius.realm.edu\nEAP-PEAP-Phase2-Method=MSCHAPV2\nEAP-PEAP-Phase2-Identity=johndoe@realm.edu\nEAP-PEAP-Phase2-Password=hunter2\n\n[Settings]\nAutoConnect=true\n```\n\nMsCHAPv2 passwords can also be stored as an encrypted hash. The correct md4 hash can be calculated with:\n\n```\n$ iconv -t utf16le | openssl md4 -provider legacy\n```\n\nInsert an EOF after your password by pressing Ctrl+d, do not hit Enter. The resulting hash needs to be stored inside the EAP-PEAP-Phase2-Password-Hash key.\n\n"
    },
    {
      "title": "TTLS-PAP",
      "level": 4,
      "content": "Like EAP-PWD, you also need to create a essid.8021x file in the directory. Before you proceed to write the configuration file, this is also a good time to find out which CA certificate your organization uses. This is an example configuration file that uses PAP password authentication:\n\n```\n/var/lib/iwd/essid.8021x\n```\n\n```\n[Security]\nEAP-Method=TTLS\nEAP-Identity=anonymous@uni-test.de\nEAP-TTLS-CACert=cert.pem\nEAP-TTLS-ServerDomainMask=*.uni-test.de\nEAP-TTLS-Phase2-Method=Tunneled-PAP\nEAP-TTLS-Phase2-Identity=user\nEAP-TTLS-Phase2-Password=password\n\n[Settings]\nAutoConnect=true\n```\n\n"
    },
    {
      "title": "EAP-TLS",
      "level": 4,
      "content": "EAP-TLS uses x509 client certificates to authenticate you. Like ssh keys, these use public-key cryptography, so the Wi-Fi authentication server never needs to be sent a secret, and you do not need to copy and reuse a password between devices. Usually each device will use a distinct cert, one that can, in theory at least, be revoked without forcing you to change a password or disrupt your other devices.\n\nAs with the other enterprise methods you need to know the CA cert your organization uses (cacert.pem), which is used to prove to your device it is connecting to the right place. You also need to have the client certificate, which represents you and will be uploaded on each connection (client-cert.pem), and the private key that goes with it (client-key.pem), which is used to prove you own that client certificate.\n\nYou can either provide a path to the required certificate or you can embed them inside your configuration.\n\nWhen you have collected the credentials, put this in your /var/lib/iwd/essid.8021x file:\n\n```\n/var/lib/iwd/essid.8021x\n```\n\n```\n[Security]\n\nEAP-Method=TLS\nEAP-TLS-CACert=/path/to/cacert.pem\nEAP-Identity=your_enterprise_email\nEAP-TLS-ClientCert=/path/to/client-cert.pem\nEAP-TLS-ClientKey=/path/to/client-key.pem\n#EAP-TLS-ClientKeyPassphrase=key-passphrase  # if client-key.pem is encrypted, provide its passphrase\n\n[Settings]\nAutoConnect=true\n```\n\n"
    },
    {
      "title": "eduroam",
      "level": 4,
      "content": "One possible method of connecting to eduroam via iwd is provided here. Create the following file, filling in the necessary values:\n\n```\n/var/lib/iwd/eduroam.8021x\n```\n\n```\n[Security]\nEAP-Method=PEAP\nEAP-Identity=anonymous@university.domain\nEAP-PEAP-Phase2-Method=MSCHAPV2\nEAP-PEAP-Phase2-Identity=username@university.domain\nEAP-PEAP-Phase2-Password=password\n\n[Settings]\nAutoConnect=true\n```\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nIf that does not work, eduroam also offers a configuration assistant tool (CAT). If your organisation has a profile within the CAT, getting connected to eduroam can be done by downloading the Linux script and running it using python. If your organisation does not support CAT, you will have to create the configuration file manually using parameters provided to you by the administrators (the below table can be helpful in doing so). It is possible to extract the necessary configuration options from the generated configuration, including the certificate and server domain mask. Additionally, some institutions are upgrading to EAP-TLS, and outsourcing the generation of client-cert.pem to SecureW2, in which case you will need to use their tool as well to generate a client cert.\n\nThe following table contains a mapping of iwd configuration options to eduroam CAT install script variables.\n\nTable content:\nIwd Configuration Option | CAT Script Variable\nessid | one of Config.ssids\nEAP-Method | Config.eap_outer\nEAP-Identity | Config.anonymous_identity\nEAP-method-CACert | the content of Config.CA, an absolute path to a .pem file containing Config.CA or an embedded certificate.\nEAP-method-ServerDomainMask | one of Config.servers\nEAP-method-Phase2-Method | Config.eap_inner unless it is equal to PAP, in that case use instead Tunneled-PAP\nEAP-method-Phase2-Identity | username@Config.user_realm\n\nwhere method is the content of EAP-Method and should be either TLS, TTLS or PEAP. Once you have extracted all necessary information and converted them to their iwd configuration equivalent you can put them in a configuration file called essid.8021x as explained in the preceding methods.\n\n- EAP-Identity may not be required by your eduroam provider, in which case you might have to use anonymous@Config.user_realm in this field.\n- If your EAP-method-ServerDomainMask starts with DNS:, use only the part after DNS:.\n\n"
    },
    {
      "title": "Other cases",
      "level": 4,
      "content": "More example tests can be found in the test cases of the upstream repository.\n\n"
    },
    {
      "title": "Embedded certificates",
      "level": 4,
      "content": "Instead of including an absolute path to a PEM file (for certificates and keys), the PEM itself can be included inside the network configuration file.\n\nAn embedded PEM can appear anywhere in the settings file using the following format:\n\n```\n[@pem@my_ca_cert]\n----- BEGIN CERTIFICATE -----\nPEM data\n----- END CERTIFICATE -----\n```\n\nwhere my_ca_cert is any name you can use to identify the certificate inside the configuration file.\n\nThen the embedded certificate can be used anywhere in the settings file a certificate path is required by prefixing the value with embed:\n\n```\nEAP-TTLS-CACert=embed:my_ca_cert\n```\n\nThis is not limited to CA certificates either. Client certificates, client keys (encrypted or not), and certificate chains can be included.\n\n"
    },
    {
      "title": "Optional configuration",
      "level": 2,
      "content": "File /etc/iwd/main.conf can be used for main configuration. See iwd.config(5).\n\n"
    },
    {
      "title": "Disable auto-connect for a particular network",
      "level": 3,
      "content": "Create or edit the file /var/lib/iwd/network.type. Add the following section to it:\n\n```\n/var/lib/iwd/spaceship.psk (for example)\n```\n\n```\n[Settings]\nAutoConnect=false\n```\n\n"
    },
    {
      "title": "Disable periodic scan for available networks",
      "level": 3,
      "content": "By default when iwd is in disconnected state, it periodically scans for available networks. To disable periodic scan (so as to always scan manually), create / edit file /etc/iwd/main.conf and add the following section to it:\n\n```\n/etc/iwd/main.conf\n```\n\n```\n[Scan]\nDisablePeriodicScan=true\n```\n\n"
    },
    {
      "title": "Enable built-in network configuration",
      "level": 3,
      "content": "Since version 0.19, iwd can assign IP address(es) and set up routes using a built-in DHCP client or with static configuration. It is a good alternative to standalone DHCP clients.\n\nTo activate iwd's network configuration feature, create/edit /etc/iwd/main.conf and add the following section to it:\n\n```\n/etc/iwd/main.conf\n```\n\n```\n[General]\nEnableNetworkConfiguration=true\n```\n\nThere is also ability to set route metric with RoutePriorityOffset:\n\n```\n/etc/iwd/main.conf\n```\n\n```\n[Network]\nRoutePriorityOffset=300\n```\n\n"
    },
    {
      "title": "IPv6 support",
      "level": 4,
      "content": "Since version 1.10, iwd supports IPv6, but it is disabled by default in versions below 2.0. Since version 2.0, it is enabled by default.\n\nTo disable it, add the following to the configuration file:\n\n```\n/etc/iwd/main.conf\n```\n\n```\n[Network]\nEnableIPv6=false\n```\n\nTo enable it in version below 2.0 and higher than 1.10:\n\n```\n/etc/iwd/main.conf\n```\n\n```\n[Network]\nEnableIPv6=true\n```\n\nThis setting is required to be enabled whether you want to use DHCPv6 or static IPv6 configuration. It can also be set on a per-network basis.\n\n"
    },
    {
      "title": "Setting static IP address in network configuration",
      "level": 4,
      "content": "Add the following section to /var/lib/iwd/network.type file. For example:\n\n```\n/var/lib/iwd/spaceship.psk\n```\n\n```\n[IPv4]\nAddress=192.168.1.10\nNetmask=255.255.255.0\nGateway=192.168.1.1\nBroadcast=192.168.1.255\nDNS=192.168.1.1\n```\n\n"
    },
    {
      "title": "Select DNS manager",
      "level": 4,
      "content": "At the moment, iwd supports two DNS managers—systemd-resolved and resolvconf.\n\nAdd the following section to /etc/iwd/main.conf for systemd-resolved:\n\n```\n/etc/iwd/main.conf\n```\n\n```\n[Network]\nNameResolvingService=systemd\n```\n\nFor resolvconf:\n\n```\n/etc/iwd/main.conf\n```\n\n```\n[Network]\nNameResolvingService=resolvconf\n```\n\n"
    },
    {
      "title": "Allow any user to read status information",
      "level": 3,
      "content": "If you want to allow any user to read the status information, but not modify the settings, you can create the following D-Bus configuration file:\n\n```\n/etc/dbus-1/system.d/iwd-allow-read.conf\n```\n\n```\n<!-- Allow any user to read iwd status information. Overrides some part\n     of /usr/share/dbus-1/system.d/iwd-dbus.conf. -->\n\n<!DOCTYPE busconfig PUBLIC \"-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN\"\n \"http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd\">\n<busconfig>\n\n  <policy context=\"default\">\n    <deny send_destination=\"net.connman.iwd\"/>\n    <allow send_destination=\"net.connman.iwd\" send_interface=\"org.freedesktop.DBus.Properties\" send_member=\"GetAll\" />\n    <allow send_destination=\"net.connman.iwd\" send_interface=\"org.freedesktop.DBus.Properties\" send_member=\"Get\" />\n    <allow send_destination=\"net.connman.iwd\" send_interface=\"org.freedesktop.DBus.ObjectManager\" send_member=\"GetManagedObjects\" />\n    <allow send_destination=\"net.connman.iwd\" send_interface=\"net.connman.iwd.Device\" send_member=\"RegisterSignalLevelAgent\" />\n    <allow send_destination=\"net.connman.iwd\" send_interface=\"net.connman.iwd.Device\" send_member=\"UnregisterSignalLevelAgent\" />\n  </policy>\n\n</busconfig>\n```\n\n"
    },
    {
      "title": "Encrypted network profiles",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nBy default, iwd stores network credentials to the system unencrypted. Since iwd version 1.25, iwd provides experimental support for creating encrypted profiles for systems using systemd.\n\nFirst, create an encrypted credential. The following example uses systemd-creds and creates an encrypted credential called iwd-secret that is bound to the system's Trusted Platform Module which will be used to create encrypted profiles:\n\n```\n# systemd-ask-password -n | systemd-creds --tpm2-device=auto --name=iwd-secret encrypt - /etc/credstore.encrypted/iwd-secret.cred\n```\n\nNext, add the LoadCredentialEncrypted option by creating a drop-in file for the iwd service.\n\n```\n/etc/systemd/system/iwd.service.d/use-creds.conf\n```\n\n```\n[Service]\nLoadCredentialEncrypted=iwd-secret:/etc/credstore.encrypted/iwd-secret.cred\n```\n\nFinally, add the SystemdEncrypt option with the value being the named credential to the iwd configuration file, reload the systemd manager, and restart the iwd service.\n\n```\n/etc/iwd/main.conf\n```\n\n```\n[General]\n...\nSystemdEncrypt=iwd-secret\n```\n\n- Any profiles currently on the system will be encrypted automatically. At this point there is nothing else needed, and any future profiles will be encrypted automatically.\n- In the above example, the encrypted credential is implicitly bound to TPM PCR 7. Therefore, if the secure boot state or firmware certificates change then connecting to networks will not be possible for that booted session.\n\n"
    },
    {
      "title": "Verbose TLS debugging",
      "level": 3,
      "content": "This can be useful, if you have trouble setting up MSCHAPv2 or TTLS. You can set the following environment variable via a drop-in snippet:\n\n```\n/etc/systemd/system/iwd.service.d/tls-debug.conf\n```\n\n```\n[Service]\nEnvironment=IWD_TLS_DEBUG=TRUE\n```\n\nCheck the iwd logs afterwards by running journalctl -u iwd.service as root.\n\n"
    },
    {
      "title": "Restarting iwd.service after boot",
      "level": 3,
      "content": "On some machines, it is reported that iwd.service has to be restarted to work after boot. See FS#63912 and thread 251432. This probably occurs because iwd starts before wireless network card powers on.\n\nAs a workaround, find the unit needed to wait for by systemctl list-units --type=device | grep wlan0 and extend the unit accordingly:\n\n```\n/etc/systemd/system/iwd.service.d/override.conf\n```\n\n```\n[Unit]\nAfter=sys-XXXX-net-wlan0.device\nWants=sys-XXXX-net-wlan0.device\n```\n\nThen reload the systemd manager configuration.\n\nIf it does not work, try also\n\n```\n[Service]\nExecStartPre=ip link set wlan0 up\n```\n\nor\n\n```\n[Service]\nExecStartPre=/usr/bin/sleep 2\n```\n\n"
    },
    {
      "title": "Wireless device is not renamed by udev",
      "level": 3,
      "content": "Since version 1.0, iwd disables predictable renaming of wireless device. It installs the following systemd network link configuration file which prevents udev from renaming the interface to wlp#s#:\n\n```\n/usr/lib/systemd/network/80-iwd.link\n```\n\n```\n[Match]\nType=wlan\n\n[Link]\nNamePolicy=keep kernel\n```\n\nAs a result the wireless link name wlan# is kept after boot. This resolved a race condition between iwd and udev on interface renaming as explained in iwd udev interface renaming.\n\nIf this results in issues try masking it with:\n\n```\n# ln -s /dev/null /etc/systemd/network/80-iwd.link\n```\n\n"
    },
    {
      "title": "No DHCP in AP mode",
      "level": 3,
      "content": "Clients may not receive an IP address via DHCP when connecting to iwd in AP mode. It is therefore necessary to enable network configuration by iwd on managed interfaces:\n\n```\n/etc/iwd/main.conf\n```\n\n```\n[General]\nEnableNetworkConfiguration=True\n```\n\nThe mentioned file has to be created if it does not already exist.\n\n"
    },
    {
      "title": "Wi-Fi keeps disconnecting due to iwd crash",
      "level": 3,
      "content": "Some users experience disconnections with Wi-Fi, re-connecting continuously but stabilizing eventually and managing to connect.\n\nUsers report crashes ([1]) of iwd.service in their journal.\n\nThe core issue is having multiple conflicting services for managing their network connections. Check that you do not have enabled them at the same time to fix this issue.\n\n"
    },
    {
      "title": "Error loading client private key",
      "level": 3,
      "content": "To load key files iwd requires the pkcs8_key_parser kernel module. While on boot it gets loaded by systemd-modules-load.service(8) using /usr/lib/modules-load.d/pkcs8.conf, that will not be the case if iwd has just been installed.\n\nIf messages such as Error loading client private key /path/to/key show up in the journal when trying to connect to WPA Enterprise networks, manually load the module:\n\n```\n# modprobe pkcs8_key_parser\n```\n\n"
    },
    {
      "title": "iwd keeps roaming",
      "level": 3,
      "content": "iwd will roam to other known APs if the connection is too bad.\n\nThis will show up in the system log as wlan0: deauthenticating from xx:xx:xx:xx:xx:xx by local choice (Reason: 3=DEAUTH_LEAVING)\n\nYou can see the connection signal strength with\n\n```\niwctl station wlan0 show | grep RSSI\n```\n\nYou can increase the threshold to allow a worse connection. RoamThreshold defaults to -70 and RoamThreshold5G to -76.\n\n```\n/etc/iwd/main.conf\n```\n\n```\n[General]\nRoamThreshold=-75\nRoamThreshold5G=-80\n```\n\n"
    },
    {
      "title": "Hostname not sent in DHCP request",
      "level": 3,
      "content": "Set SendHostname in the network's configuration file, not in /etc/iwd/main.conf.\n\n```\n/var/lib/iwd/SomeNetwork.psk\n```\n\n```\n...\n[IPv4]\nSendHostname=true\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Getting Started with iwd\n- Network Configuration Settings\n- More Examples for WPA Enterprise\n- The IWD thread on the Arch Linux Forums\n- 2017 Update on new WiFi daemon for Linux by Marcel Holtmann - YouTube\n- The New Wi-Fi Experience for Linux - Marcel Holtmann, Intel - YouTube\n- How to set up a simple access point with iwd\n\n"
    }
  ]
}