{
  "title": "Xbindkeys",
  "url": "https://wiki.archlinux.org/title/Xbindkeys",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Sxhkd\n- Xmodmap\n- Xorg#Automation\n\nxbindkeys is a program that allows to bind commands to certain keys or key combinations on the keyboard. It works with multimedia keys and is independent of the window manager and desktop environment.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the xbindkeys package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Create a blank ~/.xbindkeysrc, or you can create a sample file:\n\n```\n$ xbindkeys -d > ~/.xbindkeysrc\n```\n\nNow you can either edit ~/.xbindkeysrc to set keybindings, or you can do that with the #GUI method.\n\n"
    },
    {
      "title": "Audio control",
      "level": 3,
      "content": "Here is an example configuration file that binds Fn key combos on a laptop to pactl commands that adjust audio, such as sound volume and mute status. Note that pound (#) symbols can be used to create comments.\n\n```\n~/.xbindkeysrc\n```\n\n```\n# Increase volume\n\"pactl set-sink-volume @DEFAULT_SINK@ +1000\"\n   XF86AudioRaiseVolume\n\n# Decrease volume\n\"pactl set-sink-volume @DEFAULT_SINK@ -1000\"\n   XF86AudioLowerVolume\n\n# Mute volume\n\"pactl set-sink-mute @DEFAULT_SINK@ toggle\"\n   XF86AudioMute\n\n# Mute microphone\n\"pactl set-source-mute @DEFAULT_SOURCE@ toggle\"\n   XF86AudioMicMute\n```\n\nFor alternative commands to control volume, see PulseAudio#Keyboard volume control or ALSA#Keyboard volume control.\n\n"
    },
    {
      "title": "Backlight control",
      "level": 3,
      "content": "Keybindings for backlight control can be defined using the XF86MonBrightnessUp and XF86MonBrightnessDown keys. See Backlight#Backlight utilities for the available backlight control utilities.\n\n"
    },
    {
      "title": "GUI method",
      "level": 3,
      "content": "For graphical configuration install the xbindkeys_config-gtk2AUR package and run:\n\n```\n$ xbindkeys_config\n```\n\n"
    },
    {
      "title": "Identifying keycodes",
      "level": 2,
      "content": "To find the keycodes for a particular key, enter the following command:\n\n```\n$ xbindkeys --key\n```\n\nor the following to grab multiple keys:\n\n```\n$ xbindkeys --multikey\n```\n\nA blank window will pop up. Press the key(s) to which you wish to assign a command and xbindkeys will output a handy snippet that can be entered into ~/.xbindkeysrc. For example, while the blank window is open, press Alt+o to get the following output (results may vary):\n\n```\n\"(Scheme function)\"\n    m:0x8 + c:32\n    Alt + o\n```\n\n1. The first line represents a command.\n1. The second line contains the state (0x8) and keycode (32) as reported by the tool xev.\n1. The third line contains the keysyms associated with the given keycodes.\n\nTo use this output, copy either one of the last two lines to ~/.xbindkeysrc and replace \"(Scheme function)\" with the command you wish to perform.\n\nTo identify mouse buttons, xev can be used, see [1].\n\n"
    },
    {
      "title": "Making changes permanent",
      "level": 2,
      "content": "Once you are done configuring your keys, edit your xprofile or xinitrc file (depending on your window manager) and place\n\n```\nxbindkeys\n```\n\nbefore the line that starts your window manager or DE.\n\n"
    },
    {
      "title": "Simulating multimedia keys",
      "level": 2,
      "content": "The XF86Audio* and other multimedia keys (see LQWiki:XF86 keyboard symbols) are pretty-much well-recognized by the major DEs. For keyboards without such keys, you can simulate their effect with other keys\n\n```\n# Decrease volume on pressing Super-minus\n\"pactl set-sink-volume 0 -1000\"\n   m:0x50 + c:20\n   Mod2+Mod4 + minus\n```\n\nHowever, to actually call the keys themselves you can use tools like xdotool and xmacroAUR. Unfortunately since you would already be holding down some modifier key (Super or Shift, for example), X will see the result as Super-XF86AudioLowerVolume which will not do anything useful. Here is a script based on xmacro and xmodmap from the xorg-xmodmap package for doing this[2].\n\n```\n#!/bin/sh\necho 'KeyStrRelease Super_L KeyStrRelease minus' | xmacroplay :0\nxmodmap -e 'remove Mod4 = Super_L'\necho 'KeyStrPress XF86AudioLowerVolume KeyStrRelease XF86AudioLowerVolume' | xmacroplay :0\nxmodmap -e 'add Mod4 = Super_L'\n```\n\nThis works for calling XF86AudioLowerVolume once (assuming you are using Super+minus), but repeatedly calling it without releasing the Super key (like tapping on a volume button) does not work. If you would like it to work that way, add the following line to the bottom of the script.\n\n```\necho 'KeyStrPress Super_L' | xmacroplay :0\n```\n\nWith this modified script, if you press the key combination fast enough your Super_L key will remain 'on' till the next time you hit it, which may result in some interesting side-effects. Just tap it again to remove that state, or use the original script if you want things to 'just work' and do not mind not multi-tapping on volume up/down.\n\nThese instructions are valid for pretty much any one of the XF86 multimedia keys (important ones would be XF86AudioRaiseVolume, XF86AudioLowerVolume, XF86AudioPlay, XF86AudioPrev, XF86AudioNext).\n\n"
    },
    {
      "title": "Mouse chording",
      "level": 2,
      "content": "By dedicating one button on the mouse as a \"chording\" key (much like the Shift key on a keyboard), it is possible to use xbindkeys to configure your mouse to perform more actions than would otherwise be possible. This requires the use of Scheme rather than the simplified xbindkeys syntax.\n\n```\n.xbindkeysrc.scm\n```\n\n```\n(define (define-mouse-chords chord-key . definitions)\n  (define (start-mouse-chord)\n    (let ((cmd #f))\n      (for-each\n        (lambda (definition)\n          (let ((key (list-ref definition 0)) (binding (list-ref definition 1)))\n            (xbindkey-function key (lambda () (set! cmd binding)))))\n        definitions)\n      (xbindkey-function `(release ,chord-key)\n        (lambda ()\n          (remove-xbindkey `(release ,chord-key))\n          (for-each\n            (lambda (definition)\n              (let ((key (list-ref definition 0)))\n                (remove-xbindkey key)))\n            definitions)\n          (if cmd\n            (begin\n              (run-command cmd)\n              (set! cmd #f))\n          )))))\n  (xbindkey-function chord-key start-mouse-chord))\n```\n\nWith this function defined, you can now configure some chorded commands:\n\n```\n(define-mouse-chords \"b:10\"\n  (list '(release \"b:1\") \"xdotool click 8\")\n  (list '(release \"b:2\") \"xdotool click 9\")\n)\n```\n\nThis defines \"button 10\" as as chording key on your mouse. When button 10 is pressed down, the function will create bindings for the buttons defined inside the block. When button 10 is released, those bindings will be removed. So for example: with button 10 held down, pressing and releasing button 1, and then releasing button 10, will result in a virtual \"button 8\" (back) event being generated.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "If, for any reason, a hotkey you already set in ~/.xbindkeysrc does not work, open up a terminal and type the following:\n\n```\n$ xbindkeys -n\n```\n\nBy pressing the non-working key, you will be able to see any error xbindkeys encounter (e.g: mistyped command/keycode,...).\n\nIf the command for a keybind works via the xdotool in command line, but not when activated by the hotkey try adding \"+ Release\" to the hotkey (especially notable on GNOME):\n\n```\n\"xdotool key --clearmodifiers XF86AudioPlay\"\n    Mod2 + F7 + Release\n```\n\nThis will make the F7 key play/pause audio. Where the \"xdotool\" command would work in commandline, if the \"+ Release\" is removed it will fail with xbindkeys.\n\n"
    }
  ]
}