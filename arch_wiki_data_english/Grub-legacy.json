{
  "title": "Grub-legacy",
  "url": "https://wiki.archlinux.org/title/Grub-legacy",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Arch boot process\n- General troubleshooting#Boot problems\n- Kernel parameters\n\nGRUB Legacy is a multiboot boot loader previously maintained by the GNU Project. It was derived from GRUB, the GRand Unified Bootloader, which was originally designed and implemented by Erich Stefan Boleyn.\n\nBriefly, the boot loader is the first software program that runs when a computer starts. It is responsible for loading and transferring control to the Linux kernel. The kernel, in turn, initializes the rest of the operating system.\n\n"
    },
    {
      "title": "Supported file systems",
      "level": 2,
      "content": "GRUB legacy bundles its own support for multiple file systems, notably FAT32, ext2, ReiserFS or XFS (although v4 only).\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "GRUB Legacy can be installed from the grub-legacyAUR package.\n\nAdditionally, GRUB must be installed to the boot sector of a drive or partition to serve as a boot loader. This is covered in #Boot loader installation.\n\n"
    },
    {
      "title": "Upgrading to GRUB2",
      "level": 2,
      "content": "Note: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\n"
    },
    {
      "title": "Is upgrading necessary?",
      "level": 3,
      "content": "The short answer is No. GRUB legacy will not be removed from your system and will stay fully functional.\n\nHowever, as any other packages which are not supported anymore, bugs are unlikely to be fixed. So you should consider upgrading to GRUB version 2.x, or one of the other supported Boot loaders.\n\n"
    },
    {
      "title": "How to upgrade",
      "level": 3,
      "content": "Upgrade from GRUB Legacy to GRUB version 2.x is much the same as installing GRUB on a running Arch Linux. Detailed instructions is covered here.\n\n"
    },
    {
      "title": "Differences",
      "level": 3,
      "content": "- There are differences in the commands of GRUB Legacy and GRUB. Familiarize yourself with GRUB commands before proceeding (e.g. \"find\" has been replaced with \"search\").\n- GRUB is now modular and no longer requires \"stage 1.5\". As a result, the boot loader itself is limited -- modules are loaded from the hard drive as needed to expand functionality (e.g. for LVM or RAID support).\n- Device naming has changed between GRUB Legacy and GRUB. Partitions are numbered from 1 instead of 0 while drives are still numbered from 0, and prefixed with partition-table type. For example, /dev/sda1 would be referred to as (hd0,msdos1) (for MBR) or (hd0,gpt1) (for GPT).\n- GRUB is noticeably bigger than GRUB legacy (occupies ~13 MB in /boot). If you are booting from a separate /boot partition, and this partition is smaller than 32 MB, you will run into disk space issues, and pacman will refuse to install new kernels.\n\n"
    },
    {
      "title": "Backup important data",
      "level": 4,
      "content": "Although a GRUB installation should run smoothly, it is strongly recommended to keep the GRUB Legacy files before upgrading to GRUB v2.\n\n```\n# mv /boot/grub /boot/grub-legacy\n```\n\nBackup the MBR which contains the boot code and partition table (replace /dev/sdX with your actual disk path):\n\n```\n# dd if=/dev/sdX of=/path/to/backup/mbr_backup bs=512 count=1\n```\n\nOnly 446 bytes of the MBR contain boot code, the next 64 contain the partition table. If you do not want to overwrite your partition table when restoring, it is strongly advised to backup only the MBR boot code:\n\n```\n# dd if=/dev/sdX of=/path/to/backup/bootcode_backup bs=446 count=1\n```\n\nIf unable to install GRUB2 correctly, see #Restore GRUB Legacy.\n\n"
    },
    {
      "title": "Converting GRUB Legacy's configuration file to the new format",
      "level": 3,
      "content": "If grub-mkconfig fails, convert your /boot/grub/menu.lst file to /boot/grub/grub.cfg using:\n\n```\n# grub-menulst2cfg /boot/grub/menu.lst /boot/grub/grub.cfg\n```\n\nFor example:\n\n```\n/boot/grub/menu.lst\n```\n\n```\ndefault=0\ntimeout=5\n\ntitle  Arch Linux Stock Kernel\nroot   (hd0,0)\nkernel /vmlinuz-linux root=/dev/sda2 ro\ninitrd /initramfs-linux.img\n\ntitle  Arch Linux Stock Kernel Fallback\nroot   (hd0,0)\nkernel /vmlinuz-linux root=/dev/sda2 ro\ninitrd /initramfs-linux-fallback.img\n```\n\n```\n/boot/grub/grub.cfg\n```\n\n```\nset default='0'; if [ x\"$default\" = xsaved ]; then load_env; set default=\"$saved_entry\"; fi\nset timeout=5\n\nmenuentry 'Arch Linux Stock Kernel' {\n  set root='(hd0,1)'; set legacy_hdbias='0'\n  legacy_kernel   '/vmlinuz-linux' '/vmlinuz-linux' 'root=/dev/sda2' 'ro'\n  legacy_initrd '/initramfs-linux.img' '/initramfs-linux.img'\n}\n\nmenuentry 'Arch Linux Stock Kernel Fallback' {\n  set root='(hd0,1)'; set legacy_hdbias='0'\n  legacy_kernel   '/vmlinuz-linux' '/vmlinuz-linux' 'root=/dev/sda2' 'ro'\n  legacy_initrd '/initramfs-linux-fallback.img' '/initramfs-linux-fallback.img'\n}\n```\n\nIf you forgot to create a GRUB /boot/grub/grub.cfg configuration file and simply rebooted into GRUB Command Shell, type:\n\n```\nsh:grub> insmod legacycfg\nsh:grub> legacy_configfile ${prefix}/menu.lst\n```\n\nBoot into Arch and re-create the proper GRUB /boot/grub/grub.cfg configuration file.\n\n"
    },
    {
      "title": "Restore GRUB Legacy",
      "level": 3,
      "content": "- Move GRUB v2 files out of the way:\n\n```\n# mv /boot/grub /boot/grub.nonfunctional\n```\n\n- Copy GRUB Legacy back to /boot:\n\n```\n# cp -af /boot/grub-legacy /boot/grub\n```\n\n- Replace MBR and next 62 sectors of sda with backed up copy\n\nNote: **will** \n\n```\n# dd if=/path/to/backup/first-sectors of=/dev/sdX bs=512 count=1\n```\n\nA safer way is to restore only the MBR boot code use:\n\n```\n# dd if=/path/to/backup/mbr-boot-code of=/dev/sdX bs=446 count=1\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The configuration file is located at /boot/grub/menu.lst. Edit this file to suit your needs.\n\n- timeout # -- time to wait (in seconds) before the default operating system is automatically loaded.\n- default # -- the default boot entry that is chosen when the timeout has expired.\n\nAn example configuration (with /boot on a separate partition) is provided with the package.\n\n"
    },
    {
      "title": "Finding GRUB's root",
      "level": 3,
      "content": "GRUB must be told where its files reside on the system, since multiple instances may exist (i.e., in multi-boot environments). GRUB files always reside under /boot, which may be on a dedicated partition.\n\n- Hard disks are defined as (hdX); this also refers to any USB storage devices.\n- Device and partitioning numbering begin at zero. For example, the first hard disk recognized in the BIOS will be defined as (hd0). The second device will be called (hd1). This also applies to partitions. So, the second partition on the first hard disk will be defined as (hd0,1).\n\nIf you are unaware of the location of /boot, use the GRUB shell find command to locate the GRUB files. Enter the GRUB shell as root by:\n\n```\n# grub\n```\n\nThe following example is for systems without a separate /boot partition, wherein /boot is merely a directory under /:\n\n```\ngrub> find /boot/grub/stage1\n```\n\nThe following example is for systems with a separate /boot partition:\n\n```\ngrub> find /grub/stage1\n```\n\nGRUB will find the file, and output the location of the stage1 file. For example:\n\n```\ngrub> find /grub/stage1\n```\n\n```\n(hd0,0)\n```\n\nThis value should be entered on the root line in your configuration file. Type quit to exit the shell.\n\n"
    },
    {
      "title": "Dual booting with Windows",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nAdd the following to the end of your /boot/grub/menu.lst (assuming that your Windows partition is on the first partition of the first drive):\n\n```\n/boot/grub/menu.lst\n```\n\n```\ntitle Windows\n rootnoverify (hd0,0)\n makeactive\n chainloader +1\n```\n\n- If you are attempting to dual-boot with Windows 7, you should comment out the line makeactive.\n- Windows 2000 and later versions do NOT need to be on the first partition to boot (contrary to popular belief). If the Windows partition changes (i.e. if you add a partition before the Windows partition), you will need to edit the Windows boot.ini file to reflect the change (see this article for details on how to do that).\n\nIf Windows is located on another hard disk, the map command must be used. This will make your Windows install think it is actually on the first drive. Assuming that your Windows partition is on the first partition of the second drive:\n\n```\n/boot/grub/menu.lst\n```\n\n```\ntitle Windows\n map (hd0) (hd1)\n map (hd1) (hd0)\n rootnoverify (hd1,0)\n makeactive\n chainloader +1\n```\n\n"
    },
    {
      "title": "Dual booting with GNU/Linux",
      "level": 3,
      "content": "This can be done the same way that an Arch Linux install is defined. For example:\n\n```\n/boot/grub/menu.lst\n```\n\n```\ntitle Other Linux\n root (hd0,2)\n kernel /path/to/kernel root=/dev/sda3 ro\n initrd /path/to/initrd\n```\n\n"
    },
    {
      "title": "chainloader and configfile",
      "level": 3,
      "content": "To facilitate system maintenance, the chainloader or configfile command should be used to boot another Linux distribution that provides an \"automagic\" GRUB configuration mechanism (e.g. Debian, Ubuntu, openSUSE). This allows the distribution to manage its own menu.lst and boot options.\n\n- The chainloader command will load another boot loader (rather than a kernel image); useful if another boot loader is installed in a partition's boot sector (GRUB, for example). This allows one to install a \"main\" instance of GRUB to the MBR and distribution-specific instances of GRUB to each partition boot record (PBR).\n\n- The configfile command will instruct the currently running GRUB instance to load the specified configuration file. This can be used to load another distribution's menu.lst without a separate GRUB installation. The caveat of this approach is that other menu.lst may not be compatible with the installed version of GRUB; some distributions heavily patch their versions of GRUB.\n\nFor example, GRUB is to be installed to the MBR and some other boot loader (be it GRUB or LILO) is already installed to the boot sector of (hd0,2).\n\n```\n---------------------------------------------\n|   |           |           |   %           |\n| M |           |           | B %           |\n| B |  (hd0,0)  |  (hd0,1)  | L %  (hd0,2)  |\n| R |           |           |   %           |\n|   |           |           |   %           |\n---------------------------------------------\n  |                           ^\n  |       chainloading        |\n  -----------------------------\n```\n\nOne can simply include in menu.lst:\n\n```\ntitle Other Linux\nroot (hd0,2)\nchainloader +1\n```\n\nOr, if the boot loader on (hd0,2) is GRUB:\n\n```\ntitle Other Linux\nroot (hd0,2)\nconfigfile /boot/grub/menu.lst\n```\n\nThe chainloader command can also be used to load the MBR of a second drive:\n\n```\ntitle Other drive\nrootnoverify (hd1)\nchainloader +1\n```\n\n"
    },
    {
      "title": "Dual booting with GNU/Linux (GRUB2)",
      "level": 3,
      "content": "If the other Linux distribution uses GRUB2 (e.g. Ubuntu 9.10+), and you installed its boot loader to its root partition, you can add an entry like this one to your /boot/grub/menu.lst:\n\n```\n/boot/grub/menu.lst\n```\n\n```\n# other Linux using GRUB2\n title Ubuntu\n root (hd0,2)\n kernel /boot/grub/core.img\n```\n\nSelecting this entry at boot will load the other distribution's GRUB2 menu assuming that the distribution is installed on /dev/sda3.\n\n"
    },
    {
      "title": "Manual recovery of GRUB libs",
      "level": 3,
      "content": "The *stage* files are expected to be in /boot/grub, which may not be the case if the boot loader was not installed during system installation or if the partition/filesystem was damaged, accidentally deleted, etc.\n\nManually copy the GRUB libs like so:\n\n```\n# cp -a /usr/lib/grub/i386-pc/* /boot/grub\n```\n\n"
    },
    {
      "title": "General notes about boot loader installation",
      "level": 3,
      "content": "GRUB may be installed from a separate medium (e.g. a LiveCD), or directly from a running Arch install. GRUB is seldom required to be reinstalled and installation is not necessary when:\n\n- The configuration file is updated.\n- The grub-legacyAUR package is updated.\n\nInstallation is necessary when:\n\n- A boot loader is not already installed.\n- Another operating system overwrites the Linux boot loader.\n- The boot loader fails for some unknown reason.\n\nBefore continuing, a few notes:\n\n- Be sure that your GRUB configuration is correct (/boot/grub/menu.lst) before proceeding. Refer to Finding GRUB's root to ensure your devices are defined correctly.\n- GRUB must be installed on the MBR (first sector of the hard disk), or the first partition of the first storage device to be recognized by most BIOSes. To allow individual distributions the ability to manage their own GRUB menus, multiple instances of GRUB can be used, see #chainloader and configfile.\n- Installing GRUB may need to be done from within a chrooted environment (i.e. from installed environment via a separate medium) for cases like RAID configurations or if you forgot/broke your GRUB installation. You will need to Change root from a LiveCD or another Linux installation to do so.\n\nFirst, enter the GRUB shell:\n\n```\n# grub\n```\n\nUse the root command with the output from the find command (see #Finding GRUB's root) to instruct GRUB which partition contains stage1 (and therefore, /boot):\n\n```\ngrub> root (hd1,0)\n```\n\n"
    },
    {
      "title": "Installing to the MBR",
      "level": 3,
      "content": "The following example installs GRUB to the MBR of the first drive:\n\n```\ngrub> setup (hd0)\n```\n\n"
    },
    {
      "title": "Installing to a partition",
      "level": 3,
      "content": "The following example installs GRUB to the first partition of the first drive:\n\n```\ngrub> setup (hd0,0)\n```\n\nAfter running setup, enter quit to exit the shell. If you chrooted, exit your chroot and unmount partitions. Now reboot to test.\n\n"
    },
    {
      "title": "Alternate method (grub-install)",
      "level": 3,
      "content": "Use the grub-install command followed by the location to install the boot loader. For example to install GRUB to the MBR of the first drive:\n\n```\n# grub-install /dev/sda\n```\n\nGRUB will indicate whether it successfully installs. If it does not, you will have to use the GRUB shell method.\n\n"
    },
    {
      "title": "Framebuffer resolution",
      "level": 3,
      "content": "One can use the resolution given in the menu.lst, but you might want to use your LCD wide-screen at its full native resolution. Here is what you can do to achieve this:\n\nOn Wikipedia, there is a list of extended framebuffer resolutions (i.e. beyond the ones in the VBE standard).\n\nIf the desired resolution does not work with the codes obtained from the table, it usually is because the graphics card manufacturers are free to choose any number they wish, as this is not part of the VBE 3 standard. These codes may change from one card to the other (possibly even for the same manufacturer).\n\nInstead of using that table, use one of the tools mentioned below to get the correct code:\n\n"
    },
    {
      "title": "GRUB recognized value",
      "level": 4,
      "content": "This is an easy way to find the resolution code using only GRUB itself.\n\nOn the kernel line, specify that the kernel should ask you which mode to use.\n\n```\nkernel /vmlinuz-linux root=/dev/sda1 ro vga=ask\n```\n\nNow reboot. GRUB will now present a list of suitable codes to use and the option to scan for even more.\n\nYou can pick the code you would like to use (do not forget it, it is needed for the next step) and boot using it.\n\nNow replace ask in the kernel line with the correct one you have picked.\n\ne.g. the kernel line for [369] 1680x1050x32 would be:\n\n```\nkernel /vmlinuz-linux root=/dev/sda1 ro vga=0x369\n```\n\n"
    },
    {
      "title": "hwinfo",
      "level": 4,
      "content": "1. Install the hwinfo package.\n1. Run hwinfo --framebuffer as root.\n1. Pick up the code corresponding to the desired resolution.\n1. Use the 6 digit code with 0x prefix in vga= kernel option in menu.lst. Or convert it to decimal to avoid the use of 0x prefix.\n\nExample output of hwinfo:\n\n```\nMode 0x0364: 1440x900 (+1440), 8 bits\nMode 0x0365: 1440x900 (+5760), 24 bits\n```\n\nAnd the kernel line:\n\n```\nkernel /vmlinuz-linux root=/dev/sda1 ro vga=0x0365\n```\n\n"
    },
    {
      "title": "By Label",
      "level": 4,
      "content": "If you alter (or plan to alter) partition sizes from time to time, you might want to consider defining your drive/partitions by a label. You can label ext2, ext3, ext4 partitions by:\n\n```\ne2label /dev/drive|partition label\n```\n\nThe label name can be up to 16 characters long but cannot have spaces for GRUB to understand it. Then define it in your menu.lst:\n\n```\nkernel /boot/vmlinuz-linux root=/dev/disk/by-label/Arch_Linux ro\n```\n\n"
    },
    {
      "title": "By UUID",
      "level": 4,
      "content": "The UUID (Universally Unique IDentifier) of a partition may be discovered with blkid or ls -l /dev/disk/by-uuid. It is defined in menu.lst with either:\n\n```\nkernel /boot/vmlinuz-linux root=/dev/disk/by-uuid/uuid_number\n```\n\nor:\n\n```\nkernel /boot/vmlinuz-linux root=UUID=uuid_number\n```\n\n"
    },
    {
      "title": "Boot as root (single-user mode)",
      "level": 3,
      "content": "At the boot loader, select an entry and edit it (e key). Append the following parameters to the kernel options:\n\n```\n[...] single init=/bin/bash\n```\n\nThis will start in single-user mode (init 1), i.e. you will end up to a root prompt without being asked for password. This may be useful for recovery features, like resetting the root password. However, this is a huge security flaw if you have not set any #Password protection for grub.\n\n"
    },
    {
      "title": "Password protection",
      "level": 3,
      "content": "You can enable password protection in the GRUB configuration file for operating systems you wish to have protected. Boot loader password protection may be desired if your BIOS lacks such functionality and you need the extra security.\n\nFirst, choose a password you can remember and then encrypt it:\n\n```\n# grub-md5-crypt\n```\n\n```\nPassword:\n Retype password:\n $1$ZOGor$GABXUQ/hnzns/d5JYqqjw\n```\n\nThen add your password to the beginning of the GRUB configuration file at /boot/grub/menu.lst (the password must be at the beginning of the configuration file for GRUB to be able to recognize it):\n\n```\n# general configuration\ntimeout   5\ndefault   0\ncolor light-blue/black light-cyan/blue\n\npassword --md5 $1$ZOGor$GABXUQ/hnzns/d5JYqqjw\n```\n\nThen for each operating system you wish to protect, add the lock command:\n\n```\n# (0) Arch Linux\ntitle  Arch Linux\nlock\nroot   (hd0,1)\nkernel /boot/vmlinuz-linux root=/dev/disk/by-label/Arch_Linux ro\ninitrd /boot/initramfs-linux.img\n```\n\nIt is always possible to reset your BIOS settings by setting the appropriate jumper on the motherboard (see your motherboard's manual, as it is specific to every model). So in case other have access to the hardware, there is basically no way to prevent boot breakthroughs.\n\n"
    },
    {
      "title": "Restart with named boot choice",
      "level": 3,
      "content": "If you realize that you often need to switch to some other non-default OS (e.g. Windows) having to reboot and wait for the GRUB menu to appear is tedious. GRUB offers a way to record your OS choice when restarting instead of waiting for the menu, by designating a temporary new default which will be reset as soon as it has been used.\n\nSupposing a simple menu.lst setup like this:\n\n```\n/boot/grub/menu.lst\n```\n\n```\n# general configuration:\ntimeout 10\ndefault 0\ncolor light-blue/black light-cyan/blue\n\n# (0) Arch\ntitle  Arch Linux\nroot (hd0,1)\nkernel /boot/vmlinuz-linux root=/dev/disk/by-label/ARCH ro\ninitrd /boot/initramfs-linux.img\n\n# (1) Windows\ntitle Windows XP\nrootnoverify (hd0,0)\nmakeactive\nchainloader +1\n```\n\nArch is the default (0). We want to restart in to Windows. Change default 0 to default saved -- this will record the current default in a default file in the GRUB directory whenever the savedefault command is used. Now add the line savedefault 0 to the bottom of the Windows entry. Whenever Windows is booted, it will reset the default to Arch, thus making changing the default to Windows temporary.\n\nNow all that is needed is a way to easily change the default manually. This can be accomplished using the command grub-set-default. So, to reboot into Windows, enter the following commands:\n\n```\n# grub-set-default 1\n```\n\nThen reboot.\n\nFor ease of use, you might to wish to setup sudo and add /sbin/grub-set-default amongst the commands the user is allowed to issue without supplying a password.\n\n"
    },
    {
      "title": "LILO and GRUB interaction",
      "level": 3,
      "content": "If the LILO package is installed on your system, uninstall it. As some tasks (e.g. kernel compilation using make all) will make a LILO call, and LILO will then be installed over GRUB. LILO may have been included in your base system, depending on your installer media version and whether you selected/deselected it during the package selection stage.\n\n"
    },
    {
      "title": "GRUB boot disk",
      "level": 3,
      "content": "First, format a floppy disk:\n\n```\n# fdformat /dev/fd0\n# mke2fs /dev/fd0\n```\n\nNow mount the disk:\n\n```\n# mount -t ext2 /dev/fd0 /mnt/fl\n```\n\nInstall GRUB to the disk:\n\n```\n# grub-install --root-directory=/mnt/fl '(fd0)'\n```\n\nCopy your menu.lst file to the disk:\n\n```\n# cp /boot/grub/menu.lst /mnt/fl/boot/grub/menu.lst\n```\n\nNow unmount your floppy:\n\n```\n# umount /mnt/fl\n```\n\nNow you should be able to restart your computer with the disk in the drive and it should boot to GRUB. Make sure that your floppy disk is set to have higher priority than your hard drive when booting in your BIOS first, of course.\n\nSee also: Super GRUB Disk.\n\n"
    },
    {
      "title": "Hide GRUB menu",
      "level": 3,
      "content": "The hiddenmenu option can be used in order to hide the menu by default. That way no menu is displayed and the default option is going to be automatically selected after the timeout passes. Still, you are able to press Esc and the menu shows up. To use it, just add to your /boot/grub/menu.lst:\n\n```\nhiddenmenu\n```\n\n"
    },
    {
      "title": "GRUB Error 17",
      "level": 3,
      "content": "The first check to do is to unplug any external drive. Seems obvious, but sometimes we get tired ;)\n\nIf your partition table gets messed up, an unpleasant \"GRUB error 17\" message might be the only thing that greets you on your next reboot. There are a number of reasons why the partition table could get messed up. Commonly, users who manipulate their partitions with GParted -- particularly logical drives -- can cause the order of the partitions to change. For example, you delete /dev/sda6 and resize /dev/sda7, then finally re-create what used to be /dev/sda6 only now it appears at the bottom of the list, /dev/sda9 for example. Although the physical order of the partitions/logical drives has not changed, the order in which they are recognized has changed.\n\nFixing the partition table is easy. Boot from your Arch CD/DVD/USB, login as root and fix the partition table:\n\n```\n# fdisk /dev/sda\n```\n\nOnce in disk, enter e[x]tra/expert mode, [f]ix the partition order, then [w]rite the table and exit.\n\nYou can verify that the partition table was indeed fixed by issuing an fdisk -l. Now you just need to fix GRUB. See #Boot loader installation.\n\nBasically you need to tell GRUB the correct location of your /boot then re-write GRUB to the MBR on the disk.\n\nFor example:\n\n```\n# grub\n```\n\n```\ngrub> root (hd0,6)\ngrub> setup (hd0)\ngrub> quit\n```\n\nSee [1] for a more in-depth summary of this section.\n\n"
    },
    {
      "title": "/boot/grub/stage1 not read correctly",
      "level": 3,
      "content": "If you see this error message while trying to set up GRUB, and you are not using a fresh partition table, it is worth checking it.\n\n```\n# fdisk -l /dev/sda\n```\n\nThis will show you the partition table for /dev/sda. So check here, whether the \"Id\" values of your partitions are correct. The \"System\" column will show you the description of the \"Id\" values.\n\nIf your boot partition is marked as being \"HPFS/NTFS\", for example, then you have to change it to \"Linux\". To do this, go to fdisk,\n\n```\n# fdisk /dev/sda\n```\n\nchange a partition's system id with t, select your partition number and type in the new system id (Linux = 83). You can also list all available system ids by typing L instead of a system id.\n\nIf you have changed a partitions system id, you should [v]erify your partition table and then [w]rite it.\n\nNow try to set up GRUB again.\n\nSee also the forum post reporting this problem.\n\n"
    },
    {
      "title": "Accidental install to a Windows partition",
      "level": 3,
      "content": "If you accidentally install GRUB to a Windows partition, GRUB will write some information to the boot sector of the partition, erasing the reference to the Windows boot loader. (This is true for NTLDR the boot loader for Windows XP and earlier, unsure about later versions).\n\nTo fix this you will need to use the Windows Recovery Console for your Windows release. Because many computer manufacturers do not include this with their product (many choose to use a recovery partition) Microsoft has made them available for download. If you use XP, look at this page to be able to turn the floppy disks to a Recovery CD. Boot the Recovery CD (or enable Windows Recovery mode) and run fixboot to repair the partition boot sector. After this, you will have to install GRUB again---this time, to the MBR, not to the Windows partition---to boot Linux.\n\nSee Dual boot with Windows#Restoring a Windows boot record for more information.\n\n"
    },
    {
      "title": "Edit GRUB entries in the boot menu",
      "level": 3,
      "content": "Once you have selected an entry in the boot menu, you can edit it by pressing key e. Use tab-completion if you need to discover devices then Esc to exit. Then you can try to boot by pressing b.\n\nNote: **will not be saved** \n\n"
    },
    {
      "title": "device.map error",
      "level": 3,
      "content": "If an error is raised mentioning /boot/grub/device.map during installation or boot, run:\n\n```\n# grub-install --recheck /dev/sda\n```\n\nto force GRUB to recheck the device map, even if it already exists. This may be necessary after resizing partitions or adding/removing drives.\n\n"
    },
    {
      "title": "KDE reboot pull-down menu fails",
      "level": 3,
      "content": "If you have opened a sub-menu with the list of all operating systems configured in GRUB, selected one, and upon restart, you still booted your default OS, then you might want to check if you have the line:\n\n```\ndefault saved\n```\n\nin /boot/grub/menu.lst.\n\n"
    },
    {
      "title": "GRUB fails to find or install to any virtio /dev/vd* or other non-BIOS devices",
      "level": 3,
      "content": "I had trouble installing GRUB while installing Arch Linux in an virtual KVM machine using a virtio device for hard drive. To install GRUB, I figured out the following: Enter a virtual console by typing Ctrl+Alt+F2 or any other F-key for a free virtual console. This assumes that your root file system is mounted in the folder /mnt and the boot file system is either mounted or stored in the folder /mnt/boot.\n\n1. Assure that all needed GRUB files is present in your boot directory (assuming it is mounted in /mnt/boot folder), by issuing the command:\n\n```\n# ls /mnt/boot/grub\n```\n\n2. If the /mnt/boot/grub folder already contains all the needed files, jump to step 3. Otherwise, do the following commands (replacing /mnt, your_kernel and your_initrd with the real paths and file names). You should also have the menu.lst file written to this folder:\n\n```\n# mkdir -p /mnt/boot/grub                # if the folder is not yet present\n# cp -r /boot/grub/stage1 /boot/grub/stage2 /mnt/boot/grub\n# cp -r your_kernel your_initrd /mnt/boot\n```\n\n3. Start the GRUB shell with the following command:\n\n```\n# grub --device-map=/dev/null\n```\n\n4. Enter the following commands. Replace /dev/vda, and (hd0,0) with the correct device and partition corresponding to your setup.\n\n```\ndevice (hd0) /dev/vda\nroot (hd0,0)\nsetup (hd0)\nquit\n```\n\n5. If GRUB reports no error messages, then you probably are done. You also need to add appropriate modules to the ramdisk. For more information, please refer to QEMU#Preparing an Arch Linux guest.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- GNU GRUB\n- GRUB Grotto\n- Boot debugging - Debugging with GRUB, set module values\n- Boot with GRUB legacy\n\n"
    }
  ]
}