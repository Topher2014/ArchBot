{
  "title": "Rxvt-unicode",
  "url": "https://wiki.archlinux.org/title/Rxvt-unicode",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- rxvt-unicode/Tips and tricks\n\nrxvt-unicode (urxvt) is a customizable terminal emulator forked from rxvt, with support for Perl extensions.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install one of the following:\n\n- rxvt-unicode,\n- rxvt-unicode-truecolor-wide-glyphsAUR — improved font rendering, enhanced glyph support, applied True color support,\n\nor search AUR for opinionated builds with different patches and configuration options applied.\n\nTable content:\nFile name | Description\n7-bit-queries.patch | multiple-char sequence for 7-bit queries — is needed for correct work of color OSC commands; merged upstream\n24-bit-color.patch | True Color support\n256color.patch | 256 ~/.Xresources colors\nbackground-opacity.patch | fixed opacity (pixbuf-related)\nclear.patch | Control-L keeps all lines from the screen in the scrollback buffer (VTE-like behavior)\nenable-wide-glyphs.patch | enhancing glyph support, required by improve-font-rendering.patch\nfont-width-fix.patch | decreasing space between symbols, incompatible with (replaced by) improve-font-rendering.patch\nimprove-font-rendering.patch | font rendering improvements\nline-spacing-fix.patch | vertical spacing improvement, incompatible with (replaced by) improve-font-rendering.patch\nlines-rewrap.patch | solves the #Wrong shell prompt placement after upgrading to 9.31 problem\nmatcher-vi-bindings.patch | add vi-style (hjkl) keys to matcher extension to mimic deprecated ulr-select behavior\nnoinc.diff | no increment resizing — is needed for better Openbox user experience\nperl-5.38.patch | locale fix required by Perl 5.38; merged upstream\npopup-menu-hang.diff | fixing popup Perl extension hanging\nrxvt-unicode-sixel.patch | DEC Sixel support expressing character bitmap image via DEC Device Control String (DCS) Sixel P…q escape sequence like \"ESC Pq ... ESC\\\"\nrxvt-unicode-truecolor.patch | the same as 24-bit-color.patch\nsecondaryWheel.patch | scrolling in the secondary screen with the mouse wheel\nstarttop.patch | commenting out line 397 of screen.C — one of the approaches to the #Wrong shell prompt placement after upgrading to 9.31 problem\n\nTable content:\nFile name, link | Package | Description\nkeyboard-select | urxvt-perls | use keyboard shortcuts to select and copy text\nresize-font | urxvt-resize-font-gitAUR | use keyboard shortcuts to adjust the font size; fractional intervals (like 0.5) also supported\n\nlink\n\n"
    },
    {
      "title": "X resources",
      "level": 3,
      "content": "Rxvt-unicode is controlled by command-line arguments or X resources. Command-line arguments override, and take precedence over resource settings.\n\nThe first component of a resource is either the class (URxvt) or an application (instance) name. Application name can be specified with urxvt(1) § name command-line option and is set to urxvt — a binary basename(1) — by default. For a given instance, resources defined with an application name override, and take precedence over defined with the class name ones.\n\nSee urxvt(1) and urxvt(7) for available settings, resources and values. Also urxvt --help prints all available resources to the standard error. Each resource can be used as a long command-line option.\n\nUse xrdb(1) (xorg-xrdb) to apply the configuration like so: xrdb ~/.Xresources. Depending on your environment you may have to use -merge option. The new configuration is applied to only new instances, not the existing ones.\n\n"
    },
    {
      "title": "Fonts",
      "level": 3,
      "content": "Rxvt-unicode does not utilize fontconfig library for font substitution when a font or individual character is not present. I.e. you must provide all font names in the corresponding resources (set the fontsets) for all glyphs you are interested in.\n\nAbility to use non-monospaced fonts (like Nerd Font vs. Nerd Font Mono) hardly depends on your environment (see #Spacing) and the font itself.\n\nIf a glyph cannot be displayed or cannot be found it is substituted with an empty square.\n\nRxvt-unicode supports both X FreeType (Xft) and X Logical Font Description (XLFD), urclock(1) supports XLFD only.\n\n"
    },
    {
      "title": "Permanent",
      "level": 4,
      "content": "```\n~/.Xresources\n```\n\n```\nURxvt.font:           xft:Input Mono:size=13:style=Regular,\\\n                      xft:Font Awesome 6 Free:style=Solid\nURxvt.boldFont:       xft:Input Mono:size=13:style=Medium\nURxvt.italicFont:     xft:Input Mono:size=13:style=Italic\nURxvt.boldItalicFont: xft:Input Mono:size=13:style=Medium Italic\n```\n\n"
    },
    {
      "title": "Non-permanent",
      "level": 4,
      "content": "You can change the fonts of the current instance with Xterm Operating System Commands (OSC). Use numeric (Ps) parameters 710–713 followed by corresponding text (Pt) parameter, like so (also see urxvt(1) § CHANGING FONTS):\n\n```\n$ printf '\\x1b\\x5d710;%s\\x1b\\x5c' \"xft:Terminus:pixelsize=22\"\n$ printf      '\\e]711;%s\\a'       \"xft:Terminus:pixelsize=22:bold\"\n```\n\nTo change font size of the current instance with keyboard shortcuts use resize-font Perl extension.\n\n"
    },
    {
      "title": "Spacing",
      "level": 4,
      "content": "You may need to tweak the horizontal distance between characters with letterSpace and/or the vertical distance between rows with urxvt(1) § lineSpace:. These needs depend on:\n\n- using rendering improvement patches, like enable-wide-glyphs.patch, improve-font-rendering.patch, font-width-fix.patch or line-spacing-fix.patch,\n- using languages with glyphs that are too different from English letters, like Arabian, Chinese, Hebrew, Japanese or Korean,\n- your font and its size.\n\n"
    },
    {
      "title": "Behavior on receiving new output",
      "level": 4,
      "content": "By default, when shell output appears, the scrollback view will automatically jump to the bottom of the buffer to display new output.\n\nIf you want to see previous output (e.g., compiler messages) while pseudo-TTY is still receiving new lines, and jump to the bottom of the scrollback buffer on key press, use the following options:\n\n```\nURxvt.scrollTtyOutput:   False\nURxvt.scrollWithBuffer:  True\nURxvt.scrollTtyKeypress: True\n```\n\n"
    },
    {
      "title": "Secondary screen",
      "level": 4,
      "content": "When you scroll a pager in a secondary screen (e.g. using less(1) without the -X/--no-init option), it may be a good idea to disable secondary screen scroll to be able to scroll in the pager itself, instead of the terminal's buffer.\n\nThis is default and unchangeable behavior in Konsole and VTE-based terminal emulators. To achieve the same behavior in urxvt, use the following:\n\n```\nURxvt.secondaryScroll: False\n```\n\nThe above configuration works as expected, except when scrolling with a mouse wheel. When you scroll a pager in the secondary screen with the mouse wheel, and there has been something in the scrollback buffer — the scrollback buffer will be scrolled by the mouse wheel, instead of the pager itself.\n\nTo solve this issue, it is necessary to introduce a new option into urxvt. Use packages like rxvt-unicode-better-wheel-scrolling-unicode3AUR or rxvt-unicode-fontspacing-noinc-vteclear-secondarywheelAUR , or apply secondaryWheel.patch. After installing, set the following:\n\n```\nURxvt.secondaryWheel: True\n```\n\n"
    },
    {
      "title": "Clearance",
      "level": 4,
      "content": "Reset to Initial State (RIS) ESC 06/03 control function empties the screen and the scrollback buffer. You can bind it to your desired keys like so:\n\n```\nURxvt.keysym.Meta-Control-l: command:\\033c\n```\n\n"
    },
    {
      "title": "Keeping the screen content on screen clearance",
      "level": 4,
      "content": "In urxvt pressing Control-L empties the screen, and the screen content is thrown away — you cannot see it in the scrollback buffer later. This behavior might seems controversial for users with Konsole or VTE-based terminal emulators experience, where Control-L keeps the screen content in the scrollback buffer.\n\nTo achieve such VTE-like behavior in urxvt you can use appropriate package like rxvt-unicode-better-wheel-scrolling-unicode3AUR or rxvt-unicode-fontspacing-noinc-vteclear-secondarywheelAUR, or apply clear.patch in your preferred build.\n\n"
    },
    {
      "title": "Scrollbar",
      "level": 4,
      "content": "Scrollbar look and feel is controlled by a dozen of resources. Look at the manual around urxvt(1) § scrollstyle: and urxvt(1) § scrollColor: resources, and see urxvt(1) § THE SCROLLBAR section.\n\nYou can also change visibility of scrollbar on the fly for the current instance with DEC Private Modes urxvt(7) § Escape Sequences (Pm = 30). For example, you can bind scrollbar visibility toggling to a keyboard shortcut:\n\n```\nURxvt.keysym.Meta-Control-s: command:\\033[?30t\n```\n\n"
    },
    {
      "title": "Saving to a file",
      "level": 4,
      "content": "Ctrl-Print or Shift-Print saves the scrollback buffer content to a file with a setting like so:\n\n```\nURxvt.print-pipe: cat > ~/Downloads/URxvt_$(date '+%Y-%m-%d_%H:%M:%S').txt\n```\n\n- Print is usually the Print Screen key.\n- Print alone saves the screen without the scrollback buffer.\n\n"
    },
    {
      "title": "Clipboard",
      "level": 3,
      "content": "Rxvt-unicode clipboard behavior might seem controversy for people without xterm background. See urxvt(1) § THE SELECTION: SELECTING AND PASTING TEXT for details.\n\nYou can use urxvt-eval(1) with key bindings to setup copying to and pasting from CLIPBOARD:\n\n```\nURxvt.keysym.Control-Insert:    eval:selection_to_clipboard\nURxvt.keysym.Shift-Insert:      eval:paste_clipboard\n```\n\nurxvt-selection-to-clipboard(1) can be used to synchronize CLIPBOARD with PRIMARY selection.\n\nThe urxvt-confirm-paste(1) extension displays a confirmation dialog when a paste containing control characters (like newlines) is detected. It is part of the default set and is loaded automatically, see urxvt(1) § perl-ext-common and #Disabling Perl extensions for more info.\n\n"
    },
    {
      "title": "Perl extensions",
      "level": 2,
      "content": "We can enable Perl extensions by including the following line:\n\n```\nURxvt.perl-ext-common: extension_name_1,extension_name_2,...\n```\n\nNote: **should not** \n\nSee also:\n\n- urxvt(1) § perl-ext-common — the resource description\n- urxvt-extensions(1) — list of available (prepackaged) extensions, do not confuse with default extension set\n- $ man 1 urxvt-extension_name — manual pages for specific prepackaged extensions\n- urxvtperl(3) — embedded Perl interpreter manual\n\n"
    },
    {
      "title": "Clickable URLs",
      "level": 3,
      "content": "You can make URLs in the terminal clickable using the matcher extension. For example, to open links in the default web browser with the left mouse button, add the following to .Xresources:\n\n```\nURxvt.perl-ext-common: default,matcher\nURxvt.url-launcher: /usr/bin/xdg-open\nURxvt.matcher.button: 1\n```\n\nSince rxvt-unicode 9.14, it is also possible to use matcher to open and list recent (currently limited to 10) URLs via keyboard:\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n```\nURxvt.keysym.C-Delete: perl:matcher:last\nURxvt.keysym.M-Delete: perl:matcher:list\n```\n\nMatching links can be colored with a chosen foreground or background color (see urxvt(1) § COLOURS AND GRAPHICS), for example blue:\n\n```\nURxvt.matcher.rend.0: Uline Bold fg4\n```\n\nAlternatively, use colorUL for a #RRGGBB color. This will however color all underlined text, instead of only link matches:\n\n```\nURxvt.colorUL: #4682B4\n```\n\n"
    },
    {
      "title": "Simple tabs",
      "level": 3,
      "content": "To add tabs to urxvt, add the following to your ~/.Xresources:\n\n```\nURxvt.perl-ext-common: ...,tabbed,...\n```\n\nTo control tabs use:\n\nTable content:\nKey | Description\nShift+Down | New tab\nShift+Left | Go to left tab\nShift+Right | Go to right tab\nCtrl+Left | Move tab to the left\nCtrl+Right | Move tab to the right\nCtrl+d | Close tab\n\nYou can change the colors of tabs with the following:\n\n```\nURxvt.tabbed.tabbar-fg: 2\nURxvt.tabbed.tabbar-bg: 0\nURxvt.tabbed.tab-fg: 3\nURxvt.tabbed.tab-bg: 0\n```\n\nIn order to make the tabbar transparent set its value to -1\n\n```\nURxvt.tabbed.tabbar-bg: -1\n```\n\nIf you need to rename the tab, you would probably want to install urxvt-tabbedexAUR instead.\n\n"
    },
    {
      "title": "Fullscreen",
      "level": 3,
      "content": "You can install the AUR package urxvt-fullscreenAUR, and then set a key binding to put urxvt fullscreen.\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n```\nURxvt.perl-ext-common:  ...,fullscreen,...\nURxvt.keysym.F11:       perl:fullscreen:switch\n```\n\n"
    },
    {
      "title": "Disabling Perl extensions",
      "level": 3,
      "content": "If you do not use the Perl extension features, you can improve the security and speed by disabling Perl extensions completely:\n\n```\nURxvt.perl-ext-common:\n```\n\nTo selectively disable an extension, you need to prepend a hyphen before the extension name:\n\n```\nUrxvt.perl-ext-common: default,-extension\n```\n\nAlternatively, you can explicitly list every extension you need, effectively disabling all others:\n\n```\nURxvt.perl-ext-common: eval,searchable-scrollback,resize-font\n```\n\n"
    },
    {
      "title": "Wrong shell prompt placement after upgrading to 9.31",
      "level": 3,
      "content": "Some window managers may have the problem that your prompt appears somewhere in the middle of the window. It may happens on start and/or on window resize. The root cause is update in lines-rewrap algorithm.\n\nTo solve the problem you should apply lines-rewrap.patch.\n\nYou can also play with geometry, but result is environment– and workflow–dependent, there is no \"one size fits all\" solution:\n\n- Set the real geometry: URxvt.geometry: 174x47.\n- Set unrealistic geometry: URxvt.geometry: 400x400.\n- Set rows to -1: URxvt.geometry: 80x-1.\n\nUltimate solution is reverting changes in the source code:\n\n- Comment out one line in screen.C (also see starttop.patch).\n- Fully revert algorithm changes: FS#77062#comment216001.\n\n"
    },
    {
      "title": "Remote hosts",
      "level": 3,
      "content": "If you are logging into a remote host, you may encounter problems when running text-mode programs under rxvt-unicode. This can be fixed by installing rxvt-unicode-terminfo on the remote host or by copying /usr/share/terminfo/r/rxvt-unicode from your local machine to your host at ~/.terminfo/r/rxvt-unicode; same for rxvt-unicode-256color.\n\nSome remote systems do not change title automatically unless you specify TERM=xterm. To fix the issue add this line to .bashrc on the remote machine:\n\n```\nPROMPT_COMMAND='echo -ne \"\\033]0;${USER}@${HOSTNAME}:${PWD}\\007\"'\n```\n\nAnother fix you can try is to put following in your .Xresources:\n\n```\nURxvt.termName: rxvt\n```\n\nThis is useful when connecting into remote hosts without admin privileges to install terminfo definition for rxvt-unicode.\n\n"
    },
    {
      "title": "Using rxvt-unicode as gmrun terminal",
      "level": 3,
      "content": "Unlike some other terminals, urxvt expects the arguments to -e to be given separately, rather than grouped together with quotes. This causes trouble with gmrun, which assumes the opposite behavior. This can be worked around by putting an eval in front of gmrun's Terminal variable in .gmrunrc:\n\n```\nTerminal = eval urxvt\nTermExec = ${Terminal} -e\n```\n\ngmrun uses /bin/sh to execute commands, so the eval is understood here. The eval has the side-effect of \"breaking up\" the argument to -e in the same way that $@ does in Bash, making the command intelligible to urxvt.\n\n"
    },
    {
      "title": "My numerical keypad acts weird and generates differing output? (e.g. in vim)",
      "level": 3,
      "content": "Note: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\nSome Debian GNU/Linux users seem to have this problem, although no specific details were reported so far. It is possible that this is caused by the wrong TERM setting, although the details of whether and how this can happen are unknown, as TERM=rxvt should offer a compatible keymap.\n\nHowever, using the xmodmap program (xorg-xmodmap), you can re-map your number pad keys back.\n\n1. Check the keycode that your numerical keypad (numpad) generates using xev program.\n\n- Start the xev program\n- Press your number pad keys and look for ... keycode xxx ... in xev's output. For example, numpad 1 in some keyboards is also \"End\" key, that have a 'keycode 87'.\n\n2. Create or modify your xmodmap file, usually ~/.Xmodmap, with the content representing your keycode.\n\nExample of xmodmap file with number pad keycode:\n\n```\nkeycode 63 = KP_Multiply\nkeycode 79 = Home KP_7\nkeycode 80 = Up KP_8\nkeycode 81 = Prior KP_9\nkeycode 82 = KP_Subtract\nkeycode 83 = Left KP_4\nkeycode 84 = KP_5\nkeycode 85 = Right KP_6\nkeycode 86 = KP_Add\nkeycode 87 = End KP_1\nkeycode 88 = Down KP_2\nkeycode 89 = Next KP_3\nkeycode 90 = Insert KP_0\nkeycode 91 = Delete KP_Decimal\nkeycode 112 = Prior\nkeycode 117 = Next\n```\n\n3. Load your xmodmap file at X session start-up.\n\nFor example, in ~/.xinitrc file add:\n\n```\n...\nxmodmap ~/.Xmodmap\n...\n```\n\n"
    },
    {
      "title": "Key combinations do not work",
      "level": 3,
      "content": "See Get Alt key to work in terminal.\n\n"
    },
    {
      "title": "Very long lines cause slowdown",
      "level": 3,
      "content": "The matcher plugin may be the culprit here. It must match a regex against a line every time the line updates, and if you have a large saveLines value this can exacerbate the problem by allowing a very large maximum line length.\n\nThere are some simple workarounds:\n\n- Reduce saveLines\n- Disable the matcher plugin\n\nIf neither of those are palatable options, you can compromise by disabling URL matching past a certain cutoff point:\n\n1. Copy /usr/lib/urxvt/perl/matcher to ~/.urxvt/ext/ (creating the directory if necessary)\n1. Edit ~/.urxvt/ext/matcher, and find the my ($self, $row) = @_; line in the on_line_update sub. It should be line 270.\n1. After that line, insert the line return () if $row < -100;. This disables URL matching on any line that starts more than 100 rows behind the top of the terminal.\n\n"
    },
    {
      "title": "No bold text in Midnight Commander",
      "level": 3,
      "content": "If started under rxvt-unicode with the default TERM setting, text that is usually bold in many other terminals will not appear so. The root of the issue is because xterm couples bright text color with the bold attribute (thus, bright colors will always appear as bold in xterm).\n\nrxvt-unicode does not have this limitation, which S-Lang (the library Midnight Commander uses for text display by default) honors. Because S-Lang can decouple the bold attribute from bright colors on rxvt-unicode, Midnight Commander would need to explicitly specify the bold attribute as appropriate, which it does not.\n\nThe solution is to configure Midnight Commander to explicitly use bold colors as desired, e.g. by editing the default skin as follows:\n\n```\n$ mkdir ~/.local/share/mc/skins\n$ cp /usr/share/mc/skins/default.ini ~/.local/share/mc/skins/\n$ sed -i -E 's/^(.* = (gray|brightred|brightgreen|yellow|brightblue|brightmagenta|brightcyan|white);.*)$/\\0;bold/' ~/.local/share/mc/skins/default.ini\n```\n\nThe above will create a copy of the default skin, but with all bright colors having an explicit bold attribute added.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Rxvt Unicode — video tutorial by Alex Booker\n- Browsable CVS — the source code\n- rxvt-unicode — enable-wide-glyphs.patch developer's dotfile\n\n"
    }
  ]
}