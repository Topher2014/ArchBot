{
  "title": "Syncthing",
  "url": "https://wiki.archlinux.org/title/Syncthing",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Resilio Sync\n- Synchronization and backup programs\n\nSyncthing is an open-source file synchronization client/server application written in Go, which implements its own - equally free - Block Exchange Protocol. All transit communications between syncthing nodes are encrypted using TLS and all nodes are uniquely identified with cryptographic certificates.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the syncthing package.\n\nSyncthing provides a #Web-GUI for control and monitoring. GUI wrappers like #Syncthing-GTK and #Syncthing Tray (provided in separate packages) also exist.\n\n"
    },
    {
      "title": "Starting Syncthing",
      "level": 3,
      "content": "Run the syncthing binary manually from a terminal. The multiple optional parameters are described in syncthing(1).\n\n"
    },
    {
      "title": "Autostarting Syncthing",
      "level": 3,
      "content": "Syncthing can either be installed as a systemd system-wide service or as a systemd user service to run automatically at startup.\n\n"
    },
    {
      "title": "System service",
      "level": 4,
      "content": "Running Syncthing as a system service ensures that it is running at startup even if the user has no active session, it is intended to be used on a server. Enable and start the syncthing@myusername.service where myusername is the actual name of the Syncthing user.\n\nNote: To set the umask in the service for all users, consider using a SystemD drop-in file:\n\nTo set the umask in the service for all users, consider using a SystemD drop-in file:\n\n```\n/etc/systemd/system/syncthing@.service.d/override.conf\n```\n\n```\n[Service]\nUMask=0077\n```\n\nThen, restart any relevant service units.\n\nThis will set up all new downloaded files for synchronized directories to be readable and writeable only by the relevant user. Fixing existing files to have more restrictive permissions can be done with a chmod og-rwx -R <relevant directory here>. Depending on your usecase, you may want to use slightly more relaxed permissions than \"only readable/writable by the specific users with syncthing running\" - alter the umask values accordingly.\n\nTo configure the Syncthing umask for a single user, simply add the username after the @ symbol in the path to the drop-in file to select the appropriate instantiation of the templated SystemD unit. This will override the umask only when starting the syncthing service for that single user.\n\n"
    },
    {
      "title": "User service: on login",
      "level": 4,
      "content": "Running Syncthing as a systemd user service ensures that Syncthing only starts after the user has logged into the system (e.g., via the graphical login screen, or ssh). This method is intended to be used on a (multiuser) computer. To run the user service, start/enable the user unit syncthing.service (i.e. with the --user flag).\n\n"
    },
    {
      "title": "User service: on boot",
      "level": 4,
      "content": "The systemd-user service can be started at boot time (i.e. without logging in) using Systemd/User#Automatic start-up of systemd user instances.\n\n"
    },
    {
      "title": "User service: on mount",
      "level": 4,
      "content": "The Syncthing systemd user service can be started after a specific (optionally encrypted) device has been mounted, and stopped when the device has been unmounted. To create a user service dependent on a mount point, after the device has been mounted, find the systemd mount name by running systemctl list-units -t mount. Then create a new service similar to the one below:\n\n```\n/home/$USER/.config/systemd/user/syncthing.service\n```\n\n```\n[Unit]\nDescription=Syncthing\nBindsTo=run-media-user-and-hash.mount\n\n[Service]\nExecStart=/usr/bin/syncthing\n\n[Install]\nWantedBy=run-media-user-and-hash.mount\n```\n\n"
    },
    {
      "title": "Syncthing-GTK",
      "level": 3,
      "content": "syncthing-gtkAUR provides a GTK graphical user interface, desktop notifications and integration with the file managers Nautilus, Nemo and Caja. Syncthing can be launched by Syncthing-GTK: use the interface settings to run syncthing-gtk at startup, and to state whether to launch the syncthing daemon.\n\n"
    },
    {
      "title": "Web-GUI",
      "level": 3,
      "content": "Syncthing provides a web interface accessible by default on http://localhost:8384.\n\n"
    },
    {
      "title": "Syncthing Tray",
      "level": 3,
      "content": "syncthingtray-qt6AUR complements the Web-GUI by providing a Qt-based system tray icon and desktop notifications. There exists a desktop environment neutral version and a Plasmoid for Plasma. It also provides integration with systemd and the Dolphin file manager.\n\nFor further remarks, see the pinned comments on the AUR. When you are unsure about configuration it is also advisable to read upstream's README.\n\nThe packages also comes with the syncthingctl utility which allows to interact with Syncthing from the command line.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "After installation, Syncthing already has a proper start-up configuration. New servers and/or folders can be added by visiting the web interface. For detailed instructions on how to setup a simple network, read Syncthing's getting started.\n\nAfter a successful first start, a default repository at ~/Sync is created. You can see this in the web admin interface. On the right is the list of nodes you have added. On the left is the list of repositories, which are folders you can choose to share with other nodes.\n\nTo add another node, click \"Add Node\" underneath the list of nodes. You will be prompted for their Node ID (which can be found on the other machine by clicking Edit > Show ID) as well as a short name and the address. If you specify \"dynamic\" for the address, the syncthing announce server will be used to automatically exchange addresses between nodes. If you want to know more about Node IDs, including the cryptographic implications, you can read the appropriate Syncthing documentation page.\n\nAfter saving the configuration, the syncthing server restarts automatically. Next, you can either change the configuration of the default node (click its name and then Edit), or create a new one to share data with. Simply tick the node you wish to share the data with, and they will have permission to access it.\n\n"
    },
    {
      "title": "Local network setup",
      "level": 3,
      "content": "In the typical case several machines share a LAN (Local Area Network) behind a NAT (Network Address Translation) router, it is advised for a versatile configuration to:\n\n- Activate both local and global discovery on each node. This will allow discovery in all situations, including if some of the nodes are mobile devices like laptops or Android phones, and leave the LAN and connect to the internet from the outside. This way they will still be found with global discovery.\n\n- Use a different listen address port for each machine, like tcp://:22010, tcp://:22011, tcp://:22012 and so forth. This will differentiate the nodes on the global discovery servers and avoid the \"Connected to myself - should not happen\" message on the other local devices whenever they leave the LAN.\n\n- If running multiple instances for different users on the same machine, set a different port for each user's localAnnouncePort (IPv4 broadcasts) as to avoid Syncthing complaints and choose the same localAnnounceMCAddr (IPv6 multicasts) as to find other devices on the LAN without global discovery (see Options Element).\n\n- If two instances on the same machine should find each other without global discovery, add tcp://127.0.0.1:xxxxx as device's second address, e.g., tcp://127.0.0.1:22001 and tcp://127.0.0.1:22002 (see Device Element).\n\n- Enable if possible UPnP port forwarding or manually forward each port to the right machine on the LAN. When a new node is discovered, Syncthing tries to use its configured listening port, 22000 by default. If this port happens to be closed, it will seek another port locally: whenever NAT traversal is enabled in Syncthing, it will attempt to use UPnP to map a random external port to the internal listening port chosen, for example 22000. If UPnP is not supported or if this is not desirable, each port should be manually forwarded to the right machine on the LAN. Eventually, if no open port can be found on both sides, relaying will be used.\n\n"
    },
    {
      "title": "Using inotify",
      "level": 3,
      "content": "inotify (inode notify) is a Linux kernel subsystem that acts to extend filesystems to notice changes to the filesystem, and report those changes to applications. Syncthing supports inotify and the functionality can be enabled in the configuration menu for individual folders.\n\n"
    },
    {
      "title": "Participate in the infrastructure",
      "level": 2,
      "content": "One can participate in the Syncthing infrastructure by running a global discovery server or a relay server.\n\n"
    },
    {
      "title": "Running a relay",
      "level": 3,
      "content": "Syncthing has the ability to connect two devices via a relay when it is not possible to establish a direct connection between them. Relayed connections are end-to-end encrypted in the usual manner, so the relay has no insight into the connection other than the knowledge of the IP addresses and device IDs.\n\nAnyone can run a relay server and it will automatically join the Syncthing relay pool and be available to all Syncthing's users. To run your own relay, install syncthing-relaysrv and Start/Enable syncthing-relaysrv.service. Rate limiting and other options can be configured via the command line. These options can be set in the ExecStart directive of the service drop-in file as follows:\n\n```\n/etc/systemd/system/syncthing-relaysrv.service.d/override.conf\n```\n\n```\n[Service]\nExecStart=\nExecStart=/usr/bin/syncthing-relaysrv -global-rate 500000 -provided-by relayprovidername\n```\n\n"
    },
    {
      "title": "Running a discovery server",
      "level": 3,
      "content": "Global discovery is used by Syncthing to find peers on the internet. Any device announces itself at startup to the discovery server which stores the device ID, IP address, port and current time. Then on request, for a given device ID, it returns the information stored in JSON format, for instance.\n\nAs an example, the request https://discovery.syncthing.net/?device=ITZRNXE-YNROGBZ-HXTH5P7-VK5NYE5-QHRQGE2-7JQ6VNJ-KZUEDIU-5PPR5AM returns {\"seen\":\"2020-02-29T14:56:08.34589801Z\",\"addresses\":[\"quic://212.121.228.172:22000\",\"tcp://212.121.228.172:22000\"]} .\n\nA list of public of global discovery server is provided. In addition, anyone can run a discovery server, to run your own, install the syncthing-discosrv package.\n\nThe default unit file provided by the package stores data at /var/lib/syncthing-discosrv and appears to work fine if you don't need to customize any flags; see list.\n\nAn example replacement unit file follows, which stores data at /var/discosrv instead of /var/lib/syncthing-discosrv. The user/group syncthing-discosrv needs permissions to be able to read the certificate files. You need to edit the systemd unit file to correctly point to the certificates and to undertake any other configuration change you may want.\n\n```\nsyncthing-discosrv.service\n```\n\n```\n[Unit]\nDescription=Syncthing discovery server\nAfter=network.target\n\n[Service]\nUser=syncthing\nGroup=syncthing\nExecStart=/usr/bin/syncthing-discosrv --db-dir /var/discosrv/discosrv.db --cert /var/discosrv/cert.pem --key /var/discosrv/key.pem\nRestart=on-failure\nSuccessExitStatus=2\n\nPrivateDevices=true\nProtectSystem=full\nProtectHome=true\nNoNewPrivileges=true\n\n[Install]\nWantedBy=multi-user.target\n```\n\nTo point the client to your discovery server, change the Global Discovery Servers variable under Settings to https://yourserver:8443/ (default port) or whatever port you have reconfigured to. The variable takes a comma-separated list of discovery servers. It is possible to include multiple ones, including the default one.\n\nIf you are using self-signed certificates, the client refuses to connect unless you append the discovery server ID to its domain. The ID is printed to stdout upon launching the discovery server. Amend the Global Discovery Servers entry to add the ID: https://yourserver.com:8443/?id=AAAAAAA-BBBBBBB-CCCCCCC-DDDDDDD-EEEEEEE-FFFFFFF-GGGGGGG-HHHHHHH.\n\n"
    },
    {
      "title": "Stop journal spam",
      "level": 3,
      "content": "Syncthing can be quite noisy even while it is not doing anything. The service ExecStart can be overridden to filter output directly without an extra script (adjust \"grep\" as needed):\n\n```\n/etc/systemd/system/syncthing@.service.d/nospam.conf\n```\n\n```\n[Service]\nExecStart=\nExecStart=/bin/bash -c 'set -o pipefail; /usr/bin/syncthing -no-browser -no-restart -logflags=0 | grep -v \"INFO: \"'\n```\n\n"
    },
    {
      "title": "Run in VirtualBox",
      "level": 3,
      "content": "It is possible to have Syncthing connect both locally and globally within a VirtualBox virtual machine (VM) while keeping its network adapter in the standard NAT mode (as opposed to bridged networking attached to the host computer's adapter).\n\nTo enable this mode, Syncthing should listen to a port in the VM different from the listening port already used by the host. For example, if the default 22000 port is used by the host, one could use 22001 in the VM. The listening port in the VM can be changed through Syncthing's Sync Protocol Listen Addresses to tcp://:22001 in the GUI Settings.\n\nThe 22001/TCP port of the host must be forwarded to the guest in this configuration. This can be done with the following command:\n\n```\n$ VBoxManage modifyvm myvmname --natpf1 \"syncthing,tcp,,22001,,22001\"\n```\n\nIn this setup, relaying should not be necessary: local devices can connect to the VM on port 22001 while global devices are accessible as long as they have themselves an open port.\n\n"
    },
    {
      "title": "Running through a proxy",
      "level": 3,
      "content": "Syncthing can be run through a proxy to enable use behind a corporate firewall or tunneling via SSH. According to the using proxies documentation it is necessary to set the all_proxy environment variable, and it must indicate a socks5 proxy type.\n\n- If the service is run from a script or from the command line, you must set the variables beforehand as follows:\n\n```\nexport all_proxy=\"socks5://proxy_address:proxy_port\"\nexport no_proxy=\"127.0.0.1\"\n```\n\n- If it is run as a service, you must define the variables in the service configuration as follows:\n\n```\n/etc/systemd/system/syncthing@myusername.service.d/override.conf\n```\n\n```\n[Service]\nEnvironment=\"all_proxy=socks5://proxy_address:proxy_port\"\nEnvironment=\"no_proxy=127.0.0.1\"\n```\n\nYou must then do a daemon-reload and restart the syncthing@myusername.service.\n\nThis file can be edited using systemd on the syncthing@myusername.service according to the systemd#Editing provided units section.\n\n"
    },
    {
      "title": "Syncthing FUSE",
      "level": 3,
      "content": "SyncthingFUSE is a FUSE driver which provides access to a syncthing share without actually syncing it to local storage. When you open a file, the contents are served from a local cache, if possible. If the contents are not in the cache, SyncthingFUSE asks peers for the contents and adds them to the cache. The local cache will not grow larger than a fixed size, though. If no peers are currently available for the file, opening it will fail.\n\n"
    },
    {
      "title": "Database issue",
      "level": 3,
      "content": "Occasionally, Syncthing may be impacted by database issues. A common symptom of this is when \"Out of Sync Items\" is reported by the client but never resolved, even after disconnecting devices and restarting Syncthing. To force a rescan of files and resync of the database the next time Syncthing is started, use the following command:\n\n```\n$ syncthing --reset-database\n```\n\n"
    },
    {
      "title": "Read-only file system error, even when run as root",
      "level": 3,
      "content": "If Syncthing complains that there is a read-only file system, although the user (e.g. root) has write permissions, check the template unit's definition:\n\n```\n$ systemctl cat syncthing@.service\n```\n\nWithin the [Service] part, there is a Hardening part and below that, a ProtectSystem directive which is set to full by default. See systemd.exec(5) § SANDBOXING for more information on this directive.\n\nCreate a drop-in file to override the value to something that suits your needs. If you are trying to sync a sub-folder of /etc, ProtectSystem=true should do the trick.\n\n"
    },
    {
      "title": "Others",
      "level": 3,
      "content": "See Debugging Syncthing.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- List of Syncthing integrations\n\n"
    }
  ]
}