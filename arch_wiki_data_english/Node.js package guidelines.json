{
  "title": "Node.js package guidelines",
  "url": "https://wiki.archlinux.org/title/Node.js_package_guidelines",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "32-bit – CLR – CMake – Cross – DKMS – Eclipse – Electron – Font – Free Pascal – GNOME – Go – Haskell – Java – KDE – Kernel modules – Lisp – Meson – MinGW – Node.js – Nonfree – OCaml – Perl – PHP – Python – R – Ruby – Rust - Security – Shell – VCS – Web – Wine\n\nThis document covers standards and guidelines on writing PKGBUILDs for Node.js packages.\n\n"
    },
    {
      "title": "Package naming",
      "level": 2,
      "content": "Package names for Node.js libraries should start with a nodejs- prefix. For standalone applications, just use the program name.\n\n"
    },
    {
      "title": "Source",
      "level": 2,
      "content": "npm provides a stable naming scheme for download URLs. PKGBUILD#source source=() array can use the following URL template:\n\n```\nhttps://registry.npmjs.org/$_pkgname/-/$_pkgname-$pkgver.tgz\n```\n\n"
    },
    {
      "title": "Using npm",
      "level": 2,
      "content": "When installing with npm, add it as a build dependency:\n\n```\nmakedepends=('npm')\n```\n\nThere is also usually no need to extract the tarball:\n\n```\nnoextract=(\"${_pkgname}-${pkgver}.tgz\")\n```\n\nThis is a minimal package function:\n\n```\npackage() {\n    npm install -g --prefix \"${pkgdir}/usr\" \"${srcdir}/${_pkgname}-${pkgver}.tgz\"\n}\n```\n\n"
    },
    {
      "title": "Setting temporary cache",
      "level": 3,
      "content": "When npm processes package.json in order to build a package it downloads dependencies to its default cache folder at $HOME/.npm. To avoid littering user's home folder we can temporarily set a different cache folder with --cache flag.\n\nDownload dependencies to ${srcdir}/npm-cache and install them in package directory:\n\n```\nnpm install --cache \"${srcdir}/npm-cache\"\n```\n\nContinue with packaging as usual:\n\n```\nnpm run packager\n```\n\n"
    },
    {
      "title": "Package contains reference to $srcdir/$pkgdir",
      "level": 3,
      "content": "npm unfortunately creates references to the source dir and the pkg dir, this is a known issue. However, you may remove those references manually since they are not used in any way.\n\nAll dependencies will contain a reference to $pkgdir, in the _where attribute. You can usually remove those attributes with some sed magic as follows:\n\n```\nfind \"$pkgdir\" -name package.json -print0 | xargs -r -0 sed -i '/_where/d'\n```\n\nYour main package will have some other references too. The easiest way to remove those is to remove all underscored properties, but that is not as easy with sed. Instead, you can use jq for similar results as follows:\n\n```\nlocal tmppackage=\"$(mktemp)\"\nlocal pkgjson=\"$pkgdir/usr/lib/node_modules/$_pkgname/package.json\"\njq '.|=with_entries(select(.key|test(\"_.+\")|not))' \"$pkgjson\" > \"$tmppackage\"\nmv \"$tmppackage\" \"$pkgjson\"\nchmod 644 \"$pkgjson\"\n```\n\nAnother place where you may find references to $pkgdir is the man attributes of packages. If you do not care about man pages (they will not be installed for dependencies anyway), you may delete them like this:\n\n```\nfind \"$pkgdir\" -type f -name package.json | while read pkgjson; do\n    local tmppackage=\"$(mktemp)\"\n    jq 'del(.man)' \"$pkgjson\" > \"$tmppackage\"\n    mv \"$tmppackage\" \"$pkgjson\"\n    chmod 644 \"$pkgjson\"\ndone\n```\n\nAn example of all three of these techniques can be seen in nodejs-readability-cli's PKGBUILD.\n\n"
    },
    {
      "title": "Using nvm",
      "level": 2,
      "content": "When a node.js-based application requires different version for building or packaging, then nvm can be leveraged.\n\nAdd it as a build dependency:\n\n```\nmakedepends=('npm' 'nvm')\n```\n\nnvm uses NVM_DIR environment variable to look for its prefix, which is set to $HOME/.nvm if not specified before nvm initialization.\n\nYou can use the following function to create and isolate your custom prefix from user's location:\n\n```\n_ensure_local_nvm() {\n    # let's be sure we are starting clean\n    which nvm >/dev/null 2>&1 && nvm deactivate && nvm unload\n    export NVM_DIR=\"${srcdir}/.nvm\"\n\n    # The init script returns 3 if version specified\n    # in ./.nvmrc is not (yet) installed in $NVM_DIR\n    # but nvm itself still gets loaded ok\n    source /usr/share/nvm/init-nvm.sh || [[ $? != 1 ]]\n}\n```\n\nThis function should be called before interacting with nvm, npm or any other Node.js based programs that should use the specified version.\n\n"
    },
    {
      "title": "Example PKGBUILD usage",
      "level": 3,
      "content": "```\nprepare() {\n    _ensure_local_nvm\n    nvm install 14.15.0\n}\n\nbuild() {\n    _ensure_local_nvm\n    npm install\n}\n```\n\nAlternatively, bare nvm install will look for a version string in .nvmrc file in the current directory.\n\nAn example of this usage can be seen in insomniaAUR. See PKGBUILD for more information.\n\n"
    }
  ]
}