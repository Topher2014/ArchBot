{
  "title": "Package standards",
  "url": "https://wiki.archlinux.org/title/Package_standards",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "32-bit – CLR – CMake – Cross – DKMS – Eclipse – Electron – Font – Free Pascal – GNOME – Go – Haskell – Java – KDE – Kernel modules – Lisp – Meson – MinGW – Node.js – Nonfree – OCaml – Perl – PHP – Python – R – Ruby – Rust - Security – Shell – VCS – Web – Wine\n\nRelated articles\n\n- /Security\n- Arch build system\n- Creating packages\n- makepkg\n- PKGBUILD\n\nWhen building packages for Arch Linux, adhere to the package guidelines below, especially if the intention is to contribute a new package to Arch Linux. You should also see the PKGBUILD(5) and makepkg(8) man pages.\n\nImportant points listed on this page are not repeated on the other package guideline pages. These specific guidelines are intended as an addition to the standards listed below.\n\nPackages submitted to the Arch User Repository must additionally comply with AUR submission guidelines.\n\nSee .proto files in the /usr/share/pacman/ directory as PKGBUILD examples.\n\n"
    },
    {
      "title": "Package etiquette",
      "level": 2,
      "content": "- Packages should never be installed to /usr/local/.\n\n- Do not introduce new variables or functions into PKGBUILD build scripts, unless the package cannot be built without doing so, as these could possibly conflict with variables and functions used in makepkg itself.\n\n- If a new variable or a new function is absolutely required, prefix its name with an underscore (_), e.g. _customvariable=\n\n```\n_customvariable=\n```\n\n- Avoid using /usr/libexec/ for anything. Use /usr/lib/$pkgname/ instead.\n\n- The packager field from the package meta file can be customized by the package builder by modifying the appropriate option in the /etc/makepkg.conf file, or alternatively override it by creating ~/.makepkg.conf.\n\n- Do not use makepkg subroutines (e.g. error, msg, msg2, plain, warning) as they might change at any time. To print data, use printf or echo.\n\n- All important messages should be echoed during install using an .install file. For example, if a package needs extra setup to work, directions should be included.\n\n- Dependencies are the most common packaging error. Please take the time to verify them carefully, for example by running ldd on dynamic executables, checking tools required by scripts or looking at the documentation of the software. The namcap utility can help you in this regard. This tool can analyze both PKGBUILD and the resulting package tarball and will warn you about bad permissions, missing dependencies, redundant dependencies, and other common mistakes.\n\n- Any optional dependencies that are not needed to run the package or have it generally function should not be included in the depends array; instead the information should be added to the optdepends array:\n\n```\noptdepends=('cups: printing support'\n            'sane: scanners support'\n            'libgphoto2: digital cameras support'\n            'alsa-lib: sound support'\n            'giflib: GIF images support'\n            'libjpeg: JPEG images support'\n            'libpng: PNG images support')\n```\n\n- When creating a package description for a package, do not include the package name in a self-referencing way. For example, \"Nedit is a text editor for X11\" could be simplified to \"A text editor for X11\". Also try to keep the descriptions to ~80 characters or less.\n\n- Try to keep the line length in the PKGBUILD below ~100 characters.\n\n- Where possible, remove empty lines from the PKGBUILD (provides, replaces, etc.)\n\n- It is common practice to preserve the order of the PKGBUILD fields in the same order as given in the PKGBUILD article. However, this is not mandatory, as the only requirement in this context is correct Bash syntax.\n\n- Quote variables which may contain spaces, such as \"$pkgdir\" and \"$srcdir\".\n\n- To ensure the integrity of packages, make sure that the integrity variables contain correct values. These can be updated using the updpkgsums(8) tool.\n\n"
    },
    {
      "title": "Package naming",
      "level": 2,
      "content": "- Package names can contain only alphanumeric characters and any of @, ., _, +, -. Names are not allowed to start with hyphens or dots. All letters should be lowercase.\n- Package names should not be suffixed with the upstream major release version number (e.g. we do not want libfoo2 if upstream calls it libfoo v2.3.4) in case the library and its dependencies are expected to be able to keep using the most recent library version with each respective upstream release. However, for some software or dependencies, this can not be assumed. In the past this has been especially true for widget toolkits such as GTK and Qt. Software that depends on such toolkits can usually not be trivially ported to a new major version. As such, in cases where software can not trivially keep rolling alongside its dependencies, package names should carry the major version suffix (e.g. gtk2, gtk3, qt4, qt5). For cases where most dependencies can keep rolling along the newest release but some cannot (for instance closed source that needs libpng12 or similar), a deprecated version of that package might be called libfoo1 while the current version is just libfoo.\n\n"
    },
    {
      "title": "Package versioning",
      "level": 2,
      "content": "- Package version — pkgver — should be the same as the version released by the author.\n- Versions can include letters if need be, e.g. version could be 2.54BETA32.\n- Version tags may not include hyphens, and may contain letters, numbers, and periods only. If the upstream version contains a hyphen, it must be replaced with an underscore.\n\n- Package releases — pkgrel — are specific to Arch Linux packages. These allow users to differentiate between newer and older package builds. When a new package version is first released, the release count starts at 1. Then as fixes and optimizations are made, the package will be re-released to the Arch Linux public and the release number will increment.\n- When a new version comes out, the release count resets to 1.\n- Package release tags follow the same naming restrictions as version tags.\n\n"
    },
    {
      "title": "Package dependencies",
      "level": 2,
      "content": "- Do not rely on transitive dependencies in any of the PKGBUILD#Dependencies, as they might break, if one of the dependencies is updated.\n- List all direct library dependencies. To identify them find-libdeps(1) (part of devtools) can be used.\n\n"
    },
    {
      "title": "Package relations",
      "level": 2,
      "content": "- Do not add $pkgname to PKGBUILD#provides, as it is always implicitly provided by the package.\n- List all external shared libraries of a package in PKGBUILD#provides (e.g. 'libsomething.so'). To identify them find-libprovides(1) (part of devtools) can be used.\n\n"
    },
    {
      "title": "Package sources",
      "level": 2,
      "content": "- HTTPS sources (https:// for tarballs, git+https:// for git sources) should be used wherever possible\n- Sources should be verified using PGP signatures wherever possible (this might entail building from a git tag instead of a source tarball, if upstream signs commits and tags but not the tarballs)\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\n- When building from a git tag, use its object hash obtained from git rev-parse instead of the tag name:\n\n```\n_tag=1234567890123456789012345678901234567890 # git rev-parse \"v$pkgver\"\nsource=(git+https://$url.git?signed#tag=$_tag)\n\npkgver() {\n    cd \"$pkgname\"\n    git describe\n}\n```\n\n- Do not diminish the security or validity of a package (e.g. by removing a checksum check or by removing PGP signature verification), because an upstream release is broken or suddenly lacks a certain feature (e.g. PGP signature missing for a new release)\n- Sources have to be unique in srcdir (this might require renaming them when downloading, e.g. \"${pkgname}-${pkgver}.tar.gz::https://${pkgname}.tld/download/${pkgver}.tar.gz\")\n- Avoid using specific mirrors (e.g. on sourceforge) to download, as they might become unavailable\n\n"
    },
    {
      "title": "Working with upstream",
      "level": 2,
      "content": "It is considered best-practice to work closely with upstream wherever possible. This entails reporting problems about building and testing a package.\n\n- Report problems to upstream right away.\n- Upstream patches wherever possible.\n- Add comments with links to relevant (upstream) bug tracker tickets in the PKGBUILD (this is particularly important, as it ensures, that other packagers can understand changes and work with a package as well).\n\nIt is recommended to track upstream with tools such as nvchecker, nvrsAUR or urlwatch to be informed about new stable releases.\n\n"
    },
    {
      "title": "Directories",
      "level": 2,
      "content": "- Configuration files should be placed in the /etc directory. If there is more than one configuration file, it is customary to use a subdirectory in order to keep the /etc area as clean as possible. Use /etc/pkg where pkg is the name of the package (or a suitable alternative, eg, apache uses /etc/httpd/).\n- Package files should follow these general directory guidelines:\n\nTable content:\n/etc | System-essential configuration files\n/usr/bin | Binaries\n/usr/lib | Libraries\n/usr/include | Header files\n/usr/lib/pkg | Modules, plugins, etc.\n/usr/share/doc/pkg | Application documentation\n/usr/share/info | GNU Info system files\n/usr/share/licenses/pkg | Application licenses\n/usr/share/man | Manpages\n/usr/share/pkg | Application data\n/var/lib/pkg | Persistent application storage\n/etc/pkg | Configuration files for pkg\n/opt/pkg | Large self-contained packages\n\n- Packages should not contain any of the following directories: /bin /sbin /dev /home /srv /media /mnt /proc /root /selinux /sys /tmp /var/tmp /run\n\n- /bin\n- /sbin\n- /dev\n- /home\n- /srv\n- /media\n- /mnt\n- /proc\n- /root\n- /selinux\n- /sys\n- /tmp\n- /var/tmp\n- /run\n\n"
    },
    {
      "title": "Makepkg duties",
      "level": 2,
      "content": "When makepkg is used to build a package, it does the following automatically:\n\n1. Checks if package dependencies and makedepends are installed\n1. Downloads source files from servers\n1. Checks the integrity of source files\n1. Unpacks source files\n1. Does any necessary patching\n1. Builds the software and installs it in a fake root\n1. Strips symbols from binaries\n1. Strips debugging symbols from libraries\n1. Compresses manual and/or info pages\n1. Generates the package meta file which is included with each package\n1. Compresses the fake root into the package file\n1. Stores the package file in the configured destination directory (i.e. the current working directory by default)\n\n"
    },
    {
      "title": "Architectures",
      "level": 2,
      "content": "The arch array should contain 'x86_64' if the compiled package is architecture-specific. Otherwise, use 'any' for architecture independent packages.\n\n"
    },
    {
      "title": "Licenses",
      "level": 2,
      "content": "See PKGBUILD#license.\n\n"
    },
    {
      "title": "Reproducible builds",
      "level": 2,
      "content": "Arch is working on making all packages reproducible. A packager can check if a package is reproducible with makerepropkg from devtools or repro from archlinux-repro.\n\n```\n$ makerepropkg $pkgname-1-1-any.pkg.tar.zst\n```\n\nOr\n\n```\n$ repro -f $pkgname-1-1-any.pkg.tar.zst\n```\n\nIf the timestamp is required at build-time, use the environment variable SOURCE_DATE_EPOCH. The format is documented upstream.\n\n"
    }
  ]
}