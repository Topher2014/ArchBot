{
  "title": "Mbsync",
  "url": "https://wiki.archlinux.org/title/Mbsync",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "isync is a command line application to synchronize mailboxes; it supports Maildir and IMAP4 mailboxes. New messages, message deletions and flag changes can be propagated both ways.\n\nSynchronization is based on unique message identifiers (UIDs), so no identification conflicts can occur (as opposed to some other mail synchronizers). Synchronization state is kept in one local text file per mailbox pair; multiple replicas of a mailbox can be maintained.\n\n"
    },
    {
      "title": "Installing",
      "level": 2,
      "content": "Install the isync package.\n\n"
    },
    {
      "title": "Configuring",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nNote: **Subfolders** \n\n- Google appears to block isync from downloading emails by default. If you have 2-step authentication enabled, you need to set up an app password and use that with isync, otherwise you need to go to Google's Security Page and toggle \"Allow less secure apps\" to \"on\".\n- Subfolders setting in MaildirStore now seems to be required to be set: iSync Config SubFolders SubFolders Legacy worked as previous unset - Oct 2017\n\nFirst, a main configuration file needs to be created, either as isyncrc in the user's XDG_CONFIG_HOME directory, or .mbsyncrc in the user's home directory root. The package supplies an example /usr/share/doc/isync/examples/mbsyncrc.sample file. Another example for a Google-mail account is as follows:\n\n```\n~/.mbsyncrc\n```\n\n```\nIMAPAccount gmail\n# Address to connect to\nHost imap.gmail.com\nUser username@gmail.com\nPass ***************\n# To store the password in an encrypted file use PassCmd instead of Pass\n# PassCmd \"gpg2 -q --for-your-eyes-only --no-tty -d ~/.mailpass.gpg\"\n#\n# Use TLS\nTLSType IMAPS\n# The following line should work. If you get certificate errors, uncomment the two following lines and read the \"Troubleshooting\" section.\nCertificateFile /etc/ssl/certs/ca-certificates.crt\n#CertificateFile ~/.cert/imap.gmail.com.pem\n#CertificateFile ~/.cert/Equifax_Secure_CA.pem\n\nIMAPStore gmail-remote\nAccount gmail\n\nMaildirStore gmail-local\nSubFolders Verbatim\n# The trailing \"/\" is important\nPath ~/.mail/gmail/\nInbox ~/.mail/gmail/Inbox\n\nChannel gmail\nFar :gmail-remote:\nNear :gmail-local:\n# Exclude everything under the internal [Gmail] folder, except the interesting folders\nPatterns *Â ![Gmail]* \"[Gmail]/Sent Mail\" \"[Gmail]/Starred\" \"[Gmail]/All Mail\"\n# Or include everything\n#Patterns *\n# Automatically create missing mailboxes, both locally and on the server\nCreate Both\n# Sync the movement of messages between folders and deletions, add after making sure the sync works\nExpunge Both\n# Save the synchronization state files in the relevant directory\nSyncState *\n```\n\nIt is possible to avoid the proprietary [Gmail] (or [Google Mail]) folder categorization by using separate channels for each directory, and later merging them to a group:\n\n```\n~/.mbsyncrc\n```\n\n```\nChannel sync-googlemail-default\nFar :gmail-remote:\nNear :gmail-local:\n# Select some mailboxes to sync\nPatterns \"INBOX\" \"arch\"\nCreate Both\n\nChannel sync-googlemail-sent\nFar :gmail-remote:\"[Google Mail]/Gesendet\"\nNear :gmail-local:sent\nCreate Near\n\nChannel sync-googlemail-trash\nFar :gmail-remote:\"[Google Mail]/Papierkorb\"\nNear :gmail-local:trash\nCreate Near\n\n# Get all the channels together into a group.\nGroup googlemail\nChannel sync-googlemail-default\nChannel sync-googlemail-sent\nChannel sync-googlemail-trash\n```\n\nAs you can see, name-translations are possible this way as well.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "First make any folders that were specified as Maildirs.\n\n```\n$ mkdir -p ~/.mail/gmail\n```\n\nThen to retrieve the mail for a specific channel run:\n\n```\n$ mbsync gmail\n```\n\nor to retrive the mail for all channels:\n\n```\n$ mbsync -a\n```\n\n"
    },
    {
      "title": "Using Path and/or Inbox on NTFS partitions",
      "level": 3,
      "content": "Since NTFS partitions will not accept a semicolon in a filename, you need to change your InfoDelimiter and your FieldDelimiter to something else, you can achieve this by globaly (outside any store or channel configuration) changing the later, like below:\n\n```\n~/.mbsyncrc\n```\n\n```\nFieldDelimiter -\n```\n\n"
    },
    {
      "title": "Importing EML emails",
      "level": 3,
      "content": "Importing emails in the EML format is achieved by copying the .eml files under the cur directory of the desired Maildir directory. For example, using mv message.eml ~/.mail/myaccount/Inbox. The new emails should be detected during the subsequent run of mbsync.\n\n"
    },
    {
      "title": "With a timer",
      "level": 4,
      "content": "If you want to automatically synchronize your mailboxes, isync can be started automatically with a systemd/User unit. The following service file can start the mbsync command:\n\n```\n~/.config/systemd/user/mbsync.service\n```\n\n```\n[Unit]\nDescription=Mailbox synchronization service\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/mbsync -Va\n\n[Install]\nWantedBy=default.target\n```\n\nThe following timer configures mbsync to be started 2 minutes after boot, and then every 5 minutes:\n\n```\n~/.config/systemd/user/mbsync.timer\n```\n\n```\n[Unit]\nDescription=Mailbox synchronization timer\n\n[Timer]\nOnBootSec=2m\nOnUnitActiveSec=5m\nUnit=mbsync.service\n\n[Install]\nWantedBy=timers.target\n```\n\nOnce those two files are created, reload systemd, then enable and start mbsync.timer, adding the --user flag to systemctl.\n\nIf you want to run notmuch or mu/mu4e after automatically synchronizing your mails, it is preferable to modify the above mbsync.service by adding a post-start hook, like below:\n\n```\n~/.config/systemd/user/mbsync.service\n```\n\n```\n[Unit]\nDescription=Mailbox synchronization service\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/mbsync -Va\nExecStartPost=/usr/bin/notmuch new\n```\n\nYou can also index mu by changing the ExecStartPost line to ExecStartPost=/usr/bin/mu index, or to ExecStartPost=/usr/bin/emacsclient -e '(mu4e-update-index)' if you are running emacsclient and would like to index mu4e.\n\nThis modification assumes that you have already setup notmuch or mu/mu4e for your user. If the ExecStart command does not execute successfully, the ExecStartPost command will not execute, so be aware of this!\n\nTrigger syncing immediately when making local changes (such as marking messages as read) by watching the .notmuch directory:\n\n```\n~/.config/systemd/user/mbsync.path\n```\n\n```\n[Path]\nPathChanged=%h/mail/.notmuch\n\n[Install]\nWantedBy=default.target\n```\n\nSystemd defaults ensure that the service will not trigger redundantly.\n\n"
    },
    {
      "title": "With imapnotify",
      "level": 4,
      "content": "IMAP IDLE is a way to get push notifications to download new email, rather than polling the server intermittently. This has the advantage of saving bandwidth and delivering your mail as soon as it's available. Isync does not have native IDLE support, but we can use a program like imapnotify to call mbsync when you receive new email. For this example we will use the goimapnotify package which is reported to work better with frequent network interruptions.\n\nInstall goimapnotify and create a configuration file for each mail server you want to poll. Note that the file name format, including the .conf, is necessary if you want to use the provided systemd service:\n\n```\n~/.config/imapnotify/gmail.conf\n```\n\n```\n{\n  \"host\": \"imap.gmail.com\",\n  \"port\": 993,\n  \"tls\": true,\n  \"tlsOptions\": {\n    \"rejectUnauthorized\": false\n  },\n  \"username\": \"username@gmail.com\",\n  \"password\": \"\",\n    \"passwordCmd\": \"pass gmail | head -n1\",\n  \"onNewMail\": \"mbsync gmail\",\n  \"onNewMailPost\": \"\",\n  \"boxes\": [ \"INBOX\" ]\n}\n```\n\n(You can view the full configuration options in the project's README.)\n\nStart/enable the goimapnotify@gmail.service user unit.\n\nNote that IMAP IDLE only triggers when new mail arrives, not when there is undownloaded mail on the server. For example, if you receive 100 emails with your computer powered off, then turn on your computer, imapnotify will still not download new mail until you receive another email. For this reason you may want to run mbsync once when you log in.\n\n"
    },
    {
      "title": "Using XOAUTH2",
      "level": 3,
      "content": "First install an XOAUTH2 SASL plugin, like cyrus-sasl-xoauth2-gitAUR.\n\nFor all OAuth2 helpers listed below, choose either one among them, you need to provide a client_id and optionally a client_secret of your own or of a suitable FOSS registered application.\n\nIn order to get a client_id and client_secret, you will need an app registration with the provider. You should create your own app registration if possible, otherwise, for example due to missing rights, you can use existing app registrations, such as Thunderbird's (under kIssuers) or Evolution's, which are publicly available until dynamic client registration is supported.\n\nAnother option is to temporarily use an incognito browser window to create a free outlook.com account and use that to create the app registration.\n\n"
    },
    {
      "title": "oama",
      "level": 4,
      "content": "oama is a utility which provides IMAP/SMTP clients with renewal capabilities and authorization of OAuth2 credentials. install oama-binAUR and configure it according to its README. You can find configuration templates in /usr/share/oama.\n\nBefore you are able to use oama with your credentials you need to authorize OAuth2 access by running the command below:\n\n```\n$ oama authorize service email\n```\n\nWhere service is your email provider (e.g. google) and email is your email address.\n\nAfter the authorization completed add AuthMechs XOAUTH2 and PassCmd \"oama access email\" to the IMAPAccount section in the .mbsyncrc.\n\n"
    },
    {
      "title": "oauth2token",
      "level": 4,
      "content": "Install oauth2tokenAUR and follow its README to configure the account. It will be responsible for getting the current XOAUTH2 token using the account credentials every time mbsync needs to authenticate.\n\nFinally, add AuthMechs XOAUTH2 and PassCmd \"oauth2get provider account\", substituting provider and account with the values you used for oauth2create, to the IMAPAccount section in the .mbsyncrc.\n\n"
    },
    {
      "title": "mutt_oauth2.py",
      "level": 4,
      "content": "mutt_oauth2.py is known to work with Google and Microsoft accounts. Download mutt_oauth2.py (make it executable and put in your PATH if desired) and follow its README for background and to configure the account.\n\nIn short, you will need to modify the ENCRYPTION_PIPE and DECRYPTION_PIPE for your preferred encryption system directly in script's source or specify them on each subsequent renew invocation using flags. During authorization, add the client_id and client_secret from an app registration with the provider (see #Using XOAUTH2). Then to initialize your tokens, you run and answer the questions in:\n\n```\n$ mutt_oauth2.py userid@myschool.edu.tokens --verbose --authorize\n```\n\nNote that gmail only supports the localhostauthcode authflow while MS only supports the authcode authflow.\n\nTo subsequently receive your access token (the script automatically handles renewing of tokens), you can run:\n\n```\n$ mutt_oauth2.py userid@myschool.edu.tokens\n```\n\nAs the ENCRYPTION_PIPE and DECRYPTION_PIPE options are not stored within the token file, you have to pass them separately if you do not want to hardcode your gpg key name in script's source:\n\n```\n$ mutt_oauth2.py userid@myschool.edu.tokens --encryption-pipe 'gpg --encrypt --recipient <gpg-key>'\n```\n\nFinally, add AuthMechs XOAUTH2 and PassCmd \"mutt_oauth2.py userid@myschool.edu.tokens\", with the correct paths if necessary, to the IMAPAccount section in the .mbsyncrc.\n\n"
    },
    {
      "title": "oauth2ms",
      "level": 4,
      "content": "oauth2ms can be used to fetch oauth2 tokens from the Microsoft identity endpoint. Additionally, it can encode the token in the XOAUTH2 format to be used as authentication in IMAP mail servers.\n\nInstall oauth2ms as indicated and create a config file $XDG_CONFIG_HOME/oauth2ms/config.json containing the client_id.\n\nFinally, add AuthMechs XOAUTH2 and PassCmd \"oauth2ms\", or the full path to oauth2ms if necessary, to the IMAPAccount section in .mbsyncrc.\n\n"
    },
    {
      "title": "Integration with ProtonMail",
      "level": 3,
      "content": "Proton Mail solution for interfacing with conventional email clients is for the user to run a local IMAP/SMTP server that will communicate with ProtonMail servers -- it is known as ProtonMail Bridge and available in the protonmail-bridge-core package. Note that this software requires a running and working software implementing FreeDesktop.org's Secret Service API (e.g., GNOME Keyring or KeePassXC) and gpg-agent.\n\n"
    },
    {
      "title": "Bridge installation and configuration",
      "level": 4,
      "content": "1. Run the bridge and login using ProtonMail credentials:\n\n```\n$ protonmail-bridge-core --cli\n   >>> login\n   >>> info\n```\n\n2. To let IMAP clients accessing the local Bridge IMAP server, get the ProtonMail self-signed certificate:\n\n```\n$ openssl s_client -starttls imap -connect 127.0.0.1:1143 -showcerts\n```\n\n3. Manually copy lines between -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- and put them inside a file, e.g., ~/.config/protonmail/bridge-v3/cert.pem.\n\n4. After checking that everything is working, stop the Bridge from the command-line and run it as a service:\n\n```\n$ systemctl --user enable --now protonmail-bridge.service\n```\n\n"
    },
    {
      "title": "Isync configuration for interacting with Bridge",
      "level": 4,
      "content": "Configuring Isync to use ProtonMail Bridge as an IMAP server is possible using the following in your ~/.mbsyncrc configuration. The following is a working example in a two-way sync between the local machine the ProtonMail account.\n\n```\nIMAPStore proton-remote\n   Port 1143\n   Host 127.0.0.1\n   User YOUR_EMAIL\n   PassCmd YOUR_PASSWORD\n   TLSType STARTTLS\n   CertificateFile YOUR_CERTIFICATE_PATH\n\n   MaildirStore proton-local\n   SubFolders Verbatim\n   Path ~/PATH/TO/MAILBOX/\n   Inbox ~/PATH/TO/MAILBOX/Inbox\n\n   Channel proton\n   Far :proton-remote:\n   Near :proton-local:\n   Patterns * !Labels*Â !\"All Mail\"\n   Create Both\n   Expunge Both\n   SyncState *\n```\n\n"
    },
    {
      "title": "SSL error",
      "level": 3,
      "content": "If you get the following error:\n\n```\nSSL error connecting imap.gmail.com (108.177.125.109:993): self signed certificate\n```\n\nSince google enforce SNI when you use TLS 1.3, ensure to run at least isync v1.3.0 See https://sourceforge.net/p/isync/isync/merge-requests/2/ for more details\n\nIf you get certificate related errors like:\n\n```\nSSL error connecting pop.mail.com (193.222.111.111:143): error:00000012:lib(0):func(0):reason(18)\n```\n\nyou may need to retrieve the server's certificates manually in order for mbsync to correctly verify it.\n\n"
    },
    {
      "title": "Step #1: Get the certificates",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\n```\n$ mkdir ~/.cert\n$ openssl s_client -connect some.imap.server:port -showcerts 2>&1 < /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sed -ne '1,/-END CERTIFICATE-/p' > ~/.cert/some.imap.server.pem\n```\n\nThis will create a certificate file called ~/.cert/some.imap.server.pem (e.g. ~/.cert/imap.gmail.com.pem). Alternatively one can download get_certs.sh and run it:\n\n```\n$ mkdir ~/.cert\n$ wget https://gist.githubusercontent.com/petRUShka/af96ae25ce8280729b9ea049b929f31d/raw/a79471ce8aee3f6d04049039adf870a53a524f7f/get_certs.sh\n$ sh get_certs.sh some.imap.server port ~/.cert/\n```\n\nIf you wish to do this manually, you may enter:\n\n```\n$ openssl s_client -connect some.imap.server:port -showcerts\n```\n\nand it will display output something like:\n\n```\nCONNECTED(00000003)\ndepth=1 C = US, O = Google Inc, CN = Google Internet Authority\nverify error:num=20:unable to get local issuer certificate\nverify return:0\n---\nCertificate chain\n 0 s:/C=US/ST=California/L=Mountain View/O=Google Inc/CN=imap.gmail.com\n   i:/C=US/O=Google Inc/CN=Google Internet Authority\n-----BEGIN CERTIFICATE-----\nMIIDgDCCAumgAwIBAgIKO3MmiwAAAABopTANBgkqhkiG9w0BAQUFADBGMQswCQYD\nVQQGEwJVUzETMBEGA1UEChMKR29vZ2xlIEluYzEiMCAGA1UEAxMZR29vZ2xlIElu\ndGVybmV0IEF1dGhvcml0eTAeFw0xMjA5MTIxMTU1NDlaFw0xMzA2MDcxOTQzMjda\nMGgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1N\nb3VudGFpbiBWaWV3MRMwEQYDVQQKEwpHb29nbGUgSW5jMRcwFQYDVQQDEw5pbWFw\nLmdtYWlsLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA2OmU9DjI+DFQ\nThqIN4vL6EqZbzH0ejLKcc+zhxsq9BU5hXohSJ1sS5FUU2vReDKk8fd+ZR3cWtpf\nCTYAUSvdnz1ZFjESSzyUBmGRqByhoc0yqdfb61NosA4CDaO+z7DtAgKyecqnAJad\nTPYYf9aLk/UgJuc6GseitjzFYonXi6ECAwEAAaOCAVEwggFNMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNVHQ4EFgQUFuLyTg2NcsyaEESytZbLbQan\nYIowHwYDVR0jBBgwFoAUv8Aw6/VDET5nup6R+/xq2uNrEiQwWwYDVR0fBFQwUjBQ\noE6gTIZKaHR0cDovL3d3dy5nc3RhdGljLmNvbS9Hb29nbGVJbnRlcm5ldEF1dGhv\ncml0eS9Hb29nbGVJbnRlcm5ldEF1dGhvcml0eS5jcmwwZgYIKwYBBQUHAQEEWjBY\nMFYGCCsGAQUFBzAChkpodHRwOi8vd3d3LmdzdGF0aWMuY29tL0dvb2dsZUludGVy\nbmV0QXV0aG9yaXR5L0dvb2dsZUludGVybmV0QXV0aG9yaXR5LmNydDAMBgNVHRMB\nAf8EAjAAMBkGA1UdEQQSMBCCDmltYXAuZ21haWwuY29tMA0GCSqGSIb3DQEBBQUA\nA4GBAC1LV7tM6pcyVJLcwdPml4DomtowsjTrqvy5ZFa3SMKANK0iZBgFu74O0THX\n8SxP/vn4eAs0yRQxcT1ZuoishLGQl5NoimLaQ4BGQnzFQHDJendfaVKDl21GenJp\nis72sIrAeprsVU8PbNsllUamWsIjKr3DH5xQdH54hDtzQojY\n-----END CERTIFICATE-----\n 1 s:/C=US/O=Google Inc/CN=Google Internet Authority\n   i:/C=US/O=Equifax/OU=Equifax Secure Certificate Authority\n-----BEGIN CERTIFICATE-----\nMIICsDCCAhmgAwIBAgIDC2dxMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT\nMRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0\naWZpY2F0ZSBBdXRob3JpdHkwHhcNMDkwNjA4MjA0MzI3WhcNMTMwNjA3MTk0MzI3\nWjBGMQswCQYDVQQGEwJVUzETMBEGA1UEChMKR29vZ2xlIEluYzEiMCAGA1UEAxMZ\nR29vZ2xlIEludGVybmV0IEF1dGhvcml0eTCBnzANBgkqhkiG9w0BAQEFAAOBjQAw\ngYkCgYEAye23pIucV+eEPkB9hPSP0XFjU5nneXQUr0SZMyCSjXvlKAy6rWxJfoNf\nNFlOCnowzdDXxFdF7dWq1nMmzq0yE7jXDx07393cCDaob1FEm8rWIFJztyaHNWrb\nqeXUWaUr/GcZOfqTGBhs3t0lig4zFEfC7wFQeeT9adGnwKziV28CAwEAAaOBozCB\noDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFL/AMOv1QxE+Z7qekfv8atrjaxIk\nMB8GA1UdIwQYMBaAFEjmaPkr0rKV10fYIyAQTzOYkJ/UMBIGA1UdEwEB/wQIMAYB\nAf8CAQAwOgYDVR0fBDMwMTAvoC2gK4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20v\nY3Jscy9zZWN1cmVjYS5jcmwwDQYJKoZIhvcNAQEFBQADgYEAuIojxkiWsRF8YHde\nBZqrocb6ghwYB8TrgbCoZutJqOkM0ymt9e8kTP3kS8p/XmOrmSfLnzYhLLkQYGfN\n0rTw8Ktx5YtaiScRhKqOv5nwnQkhClIZmloJ0pC3+gz4fniisIWvXEyZ2VxVKfml\nUUIuOss4jHg7y/j7lYe8vJD5UDI=\n-----END CERTIFICATE-----\n---\nServer certificate\nsubject=/C=US/ST=California/L=Mountain View/O=Google Inc/CN=imap.gmail.com\nissuer=/C=US/O=Google Inc/CN=Google Internet Authority\n---\nNo client certificate CA names sent\n---\nSSL handshake has read 2108 bytes and written 350 bytes\n---\nNew, TLSv1/SSLv3, Cipher is ECDHE-RSA-RC4-SHA\nServer public key is 1024 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nSSL-Session:\n    Protocol Â : TLSv1.1\n    Cipher   Â : ECDHE-RSA-RC4-SHA\n    Session-ID: 77136647F42633D82DEDFBB9EB62AB516547A3697D83BD1884726034613C1C09\n    Session-ID-ctx: \n    Master-Key: 635957FBA0762B10694560488905F73BDD2DB674C41970542ED079446F27234E2CA51CF26938B8CA56DF5BBC71E429A7\n    Key-Arg  Â : None\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    TLS session ticket lifetime hint: 100800 (seconds)\n    TLS session ticket:\n    0000 - d6 5b a0 a7 10 0e 64 04-72 93 7c 9f 94 fa 07 57   .[....d.r.|....W\n    0010 - f1 8b 9d 24 8b 9d 1b f3-a8 b1 4d 2c a9 00 e1 82   ...$......M,....\n    0020 - 00 83 1e 3f e5 f2 b2 2c-d2 a8 87 83 16 02 0d 1e   ...?...,........\n    0030 - bf b6 c1 d6 75 21 04 e6-63 6b ab 5b ed 94 7a 30   ....u!..ck.[..z0\n    0040 - 1a d0 aa 44 c2 04 9b 10-06 28 b5 7b a0 43 a6 0d   ...D.....(.{.C..\n    0050 - 3b 4a 85 1f 2e 07 0a e1-32 9b bd 5d 65 41 4c e2   ;J......2..]eAL.\n    0060 - 7c d7 43 ec c4 18 77 53-b5 d4 84 b4 c9 bd 51 d6   |.C...wS......Q.\n    0070 - 2d 4f 2e 10 a6 ed 38 c5-8e 9d f8 8b 8a 63 3f 7b   -O....8......c?{\n    0080 - ee e6 b8 bf 7a f8 b8 e8-47 92 84 f1 9b 0c 63 30   ....z...G.....c0\n    0090 - 76 d8 e1 44                                       v..D\n\n    Start Time: 1352632558\n    Timeout  Â : 300 (sec)\n    Verify return code: 20 (unable to get local issuer certificate)\n---\n* OK Gimap ready for requests from 108.78.162.240 o67if11168976yhc.67\n```\n\nSimply copy the first block that begins with -----BEGIN CERTIFICATE----- and ends with -----END CERTIFICATE-----, paste into a file, and save with a .pem extension (this is necessary for the next step). Older instructions state that, with Gmail, both certificate blocks must be saved but on testing this was found to be unnecessary.\n\nNow, copy the root issuer certificate to your local certificate folder. In this example (Gmail), the root issuer is Equifax Secure Certificate Authority. This certificate is included in the ca-certificates package.\n\n```\n$ cp /usr/share/ca-certificates/mozilla/Equifax_Secure_CA.crt ~/.cert/Equifax_Secure_CA.pem\n```\n\n"
    },
    {
      "title": "Step #2: Setup mbsync",
      "level": 4,
      "content": "Configure mbsync to use that certificate:\n\n```\n~/.mbsyncrc\n```\n\n```\nIMAPAccount gmail\nHost imap.gmail.com\n# ...\nCertificateFile ~/.cert/imap.gmail.com.pem\n```\n\n"
    },
    {
      "title": "BAD Command with Exchange 2003",
      "level": 3,
      "content": "When connecting to an MS Exchange 2003 server, there could be problems when using pipelining (i.e. executing multiple imap commands concurrently). Such an issue could look as follows:\n\n```\nmbsync -V exchange\n```\n\n```\n>>> 9 SELECT \"arch\"^M\n* 250 EXISTS\n* 0 RECENT\n* FLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft $MDNSent)\n* OK [PERMANENTFLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft $MDNSent)] Permanent flags\n* OK [UNSEEN 241] Is the first unseen message\n* OK [UIDVALIDITY 4352] UIDVALIDITY value\n9 OK [READ-WRITE] SELECT completed.\n>>> 10 UID FETCH 1:1000000000 (UID FLAGS)^M\n* 1 FETCH (UID 1 FLAGS (\\Seen \\Answered))\n* 2 FETCH (UID 2 FLAGS (\\Seen \\Answered))\n...\n* 249 FETCH (UID 696 FLAGS ())\n* 250 FETCH (UID 697 FLAGS (\\Seen))\n10 OK FETCH completed.\n>>> 11 APPEND \"arch\" (\\Seen) {4878+}^M\n(1 in progress) >>> 12 UID FETCH 697 (BODY.PEEK[])^M\n(2 in progress) >>> 13 UID STORE 696 +FLAGS.SILENT (\\Deleted)^M\n12 BAD Command is not valid in this state.\n```\n\nSo command 9 is to select a new folder, command 10 checks the mail and commands 11, 12 and 13 run in parallel, writing/getting/flagging a mail. In this case, the Exchange server would terminate the connection after the BAD return value and go on to the next channel. (And if all went well in this channel, mbsync would return with 0.) After setting\n\n```\nPipelineDepth 1\n```\n\nin the IMAPStore config part of the Exchange, this problem did not occur any more.\n\n"
    },
    {
      "title": "Emails on remote server have the wrong date",
      "level": 3,
      "content": "This fix works when syncing with fastmail, but it likely applies to other services as well.\n\nIf you move an email to a new folder using an email client, and mbsync causes the email to appear with the wrong date on the server, add this to your configuration file:\n\n```\nCopyArrivalDate yes\n```\n\nFor example, without this setting, moving an old email from Inbox to Archive using mu4e and then syncing to fastmail with mbsync will cause the email to appear in Archive but with the date of the sync.\n\nmbsync uses mtime of email message when uploading from maildir to imap server. You can use fix_maildir_mail_mtime.py script to set mtime from email header.\n\n"
    },
    {
      "title": "External links",
      "level": 2,
      "content": "- Home page\n- Sourceforge page\n- backing up gmail with mbsync\n- How To Verify SSL Certificate From A Shell Prompt\n\n"
    }
  ]
}