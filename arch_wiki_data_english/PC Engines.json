{
  "title": "PC Engines",
  "url": "https://wiki.archlinux.org/title/PC_Engines",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "PC Engines is a Swiss hardware manufacturer for embedded x86 devices.\n\n"
    },
    {
      "title": "apu2c4",
      "level": 2,
      "content": "This document describes how to install Arch Linux to the SSD via an SD card or USB flash drive.\n\n"
    },
    {
      "title": "Hardware",
      "level": 3,
      "content": "CPU: AMD Embedded G series GX-412TC, 1 GHz quad Jaguar core with 64 bit\n\nRAM: 4GB DRAM with ECC\n\nAssemble the device with care and read the guide for the cooling system!\n\n"
    },
    {
      "title": "Setup preperations",
      "level": 3,
      "content": "- You need a serial (RS-232) connection to the APU to control it.\n- Add your user to uucp.\n- Install picocom or something similar, see Working with the serial console#Making Connections.\n- Download and verify the installation image.\n\n"
    },
    {
      "title": "Boot the system",
      "level": 3,
      "content": "To see the BIOS use this command:\n\n```\n$ LANG=C picocom --baud 115200 /dev/ttyUSB0\n```\n\nIf your device does not boot from the SD card or USB flash drive, press F10 during boot to bring up a boot menu. Then close picocom with Ctrl+a Ctrl+q\n\nReconnect to the Archiso GRUB:\n\n```\n$ LANG=C picocom --baud 38400 /dev/ttyUSB0\n```\n\nEnter CLI mode by pressing Tab, and append the following kernel parameter to the line:\n\n```\nconsole=ttyS0,115200\n```\n\nPress Enter.\n\nNow exit picocom and reconnect with the first command again to switch to the higher baud rate of 115200. Finally wait for about 30 seconds and you will get a colorful boot prompt.\n\n"
    },
    {
      "title": "Install the system",
      "level": 3,
      "content": "The most comfortable way to install Arch now is to start the ssh server and use the installation guide.\n\nYou may need to get a new IP with dhclient and start sshd.service.\n\nOne possible layout of the SSD maybe looking like this:\n\n```\n/dev/sda1           2048   264191   262144  128M 83 Linux\n /dev/sda2         264192 25430015 25165824   12G 83 Linux\n /dev/sda3       25430016 31277231  5847216  2.8G 82 Linux swap / Solaris\n```\n\nIt is a good idea to use a MBR layout with GRUB:\n\n```\n# grub-install --target=i386-pc /dev/sda\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\nIf using Syslinux, make sure to provide a console option in the boot menu:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nLABEL arch\n    MENU LABEL Arch Linux\n    LINUX ../vmlinuz-linux\n    APPEND root=UUID=1ef5a2eb-1908-4929-9b91-f6c4183695ac rw console=ttyS0,115200\n    INITRD ../initramfs-linux.img\n```\n\nSee also Working with the serial console#Configure console access on the target machine.\n\nRemember to remove the SD card or USB flash drive after you finished your setup.\n\n"
    },
    {
      "title": "LED Control",
      "level": 3,
      "content": "While there are 2 mainline kernel drivers (leds-apu and pcengines-apuv2) that can control the LEDs on various APU models, if you are running mainline PC Engines firmware it is advised to let ACPI handle LED control. In conjunction with the ledtrig_netdev module, the APU LEDs can be controlled through the following sysfs entries:\n\n```\n/sys/class/leds/apu2:green:led1\n/sys/class/leds/apu2:green:led2\n/sys/class/leds/apu2:green:led3\n```\n\n"
    },
    {
      "title": "Module Handling",
      "level": 4,
      "content": "You will have to manually load ledtrig_netdev. You also want to blacklist both leds_apu and pcengines-apuv2.\n\n"
    },
    {
      "title": "Example Configuration",
      "level": 4,
      "content": "A common use case is to use the APU as a wireless router. In this scenario, one wired NIC (wan0) is connected upstream to an ISP and the remaining wired & wireless NICs are bridged (br0) together as the LAN. A typical LED configuration using the netdev trigger might be:\n\n```\nLED1: power on / power off indicator\nLED2: upstream network (wan0) traffic indicator\nLED3: local network (br0) traffic indicator\n```\n\nTo enable this setup:\n\n```\necho \"1\" > /sys/class/leds/apu2:green:led1/brightness\necho \"netdev\" > /sys/class/leds/apu2:green:led2/trigger\necho \"wan0\" > /sys/class/leds/apu2:green:led2/device_name\necho \"1\" > /sys/class/leds/apu2:green:led2/tx\necho \"1\" > /sys/class/leds/apu2:green:led2/rx\necho \"netdev\" >  /sys/class/leds/apu2:green:led3/trigger\necho \"br0\" >  /sys/class/leds/apu2:green:led3/device_name\necho \"1\" >  /sys/class/leds/apu2:green:led3/tx\necho \"1\" >  /sys/class/leds/apu2:green:led3/rx\n```\n\n- View triggers supported by the currently loaded modules: cat /sys/class/leds/apu2:green:led1/trigger.\n- Additional trigger modules are available here: /lib/modules/$(uname -r)/kernel/drivers/leds/trigger.\n\n"
    },
    {
      "title": "Persist Configuration",
      "level": 4,
      "content": "Systemd automatic module loading and tmpfiles.d can be used to persist this configuration across restarts.\n\n```\n/etc/modules-load.d/ledtrig-netdev.conf\n```\n\n```\nledtrig_netdev\n```\n\n```\n/etc/tmpfiles.d/leds.conf\n```\n\n```\n#Power on/off\nw /sys/class/leds/apu2:green:led1/brightness - - - - 1\n#WAN activity\nw /sys/class/leds/apu2:green:led2/trigger - - - - netdev\nw /sys/class/leds/apu2:green:led2/device_name - - - - wan0\nw /sys/class/leds/apu2:green:led2/tx - - - - 1\nw /sys/class/leds/apu2:green:led2/rx - - - - 1\n#LAN activity\nw /sys/class/leds/apu2:green:led3/trigger - - - - netdev\nw /sys/class/leds/apu2:green:led3/device_name - - - - br0\nw /sys/class/leds/apu2:green:led3/tx - - - - 1\nw /sys/class/leds/apu2:green:led3/rx - - - - 1\n```\n\n"
    },
    {
      "title": "Firmware",
      "level": 2,
      "content": "The APUx devices use coreboot firmware, not UEFI. To update the firmware on APU2/3/4/5 devices, use flashrom:\n\n```\n# flashrom --programmer internal --read old.rom --output read-old.txt\n# flashrom --programmer internal --write new.rom --output write-new.txt\n# systemctl poweroff\n```\n\nThen unplug and replug. If a full reboot is impossible, e.g. because firmware is being updated remotely, workarounds are available. For details, see:\n\n- APUx firmware flashing\n- APUx firmware downloads\n\n"
    },
    {
      "title": "BIOS serial console interfering with GRUB serial console",
      "level": 3,
      "content": "If the GRUB boot screen shows most characters twice, check if the serial console in the BIOS menu is enabled and disable it. See [1] for details.\n\n"
    }
  ]
}