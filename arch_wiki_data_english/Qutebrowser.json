{
  "title": "Qutebrowser",
  "url": "https://wiki.archlinux.org/title/Qutebrowser",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "qutebrowser is a keyboard-focused web browser based on Python and PyQt5.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install either the qutebrowser or qutebrowser-gitAUR package.\n\n"
    },
    {
      "title": "Basic usage",
      "level": 2,
      "content": "Use : to access the command prompt. You can use Tab to auto-complete.\n\nOn first usage of qutebrowser, a Quickstart page appears. It is later accessible via :help. See the cheatsheet for keyboard shortcuts.\n\n"
    },
    {
      "title": "User configuration",
      "level": 3,
      "content": "qutebrowser can be configured via the UI, the qutebrowser command-line or a Python script. qutebrowser's own documentation explains in detail how to configure qutebrowser with these different methods. To open qutebrowser's help system, type :help. On the help page, choose Configuring qutebrowser.\n\nTo find out the paths where the configuration files will be located, open the special page qute://version. On Arch Linux, this will typically be $XDG_CONFIG_HOME/qutebrowser/. The configuration made in qutebrowser will be stored in autoconfig.yml (which should not be touched by the user) while the user's Python script is config.py.\n\n"
    },
    {
      "title": "Configuration in qutebrowser",
      "level": 4,
      "content": "To set a single configuration item, you can simply type :set followed by the name of the configuration item and the new value that you would like to set. For example, you could type\n\n```\n:set auto_save.session true\n```\n\nto open your previous tabs when you reopen qutebrowser.\n\nTo open qutebrowser's UI settings page, type\n\n```\n:set\n```\n\nwithout further arguments. There, you can edit the different settings in the UI. When you are finished, type :set again to store your configuration.\n\nFor example, under url.searchengines you can configure your search engines which are stored as a list of key-value pairs. When you have not changed this setting yet, this should look something like\n\n```\n{\"DEFAULT\": \"https://duckduckgo.com/?q={}\"}\n```\n\nThis configures DuckDuckGo as your default search engine while the placeholder {} will be replaced by your search term. To add a shortcut for quickly searching the Arch Linux wiki, you could use\n\n```\n{\"DEFAULT\": \"https://duckduckgo.com/?q={}\", \"wa\": \"https://wiki.archlinux.org/?search={}\"}\n```\n\nThen, as described by the comment in the qutebrowser UI, you can search the Arch Linux wiki by typing o wa <searchterm>. Notice that the arguments required to perform a search vary across search engines. For example, to set up Google, use https://www.google.com/search?hl=en&q={}. Or to set up Brave Search, use https://search.brave.com/search?q={}.\n\nIf Tor is installed and running on your system and you wish to use DuckDuckGo onion page instead, the setting should be something like\n\n```\n{\"DEFAULT\": \"https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/?q={}\", \"wa\": \"https://wiki.archlinux.org/?search={}\"}\n```\n\n"
    },
    {
      "title": "Keybindings",
      "level": 4,
      "content": "You can edit the keybindings directly from the browser with the command :bind key command or you can edit them directly from the file. Notice that there are many, many keybinds already in place. If you notice a lag on one of your keybind it is because some other keybind is also starting with the same key.\n\nSee the documentation for examples.\n\n"
    },
    {
      "title": "Video playback",
      "level": 3,
      "content": "See Browser plugins#Multimedia playback.\n\nAlternatively you can add an option in your config.py to open a video in mpv, in the following example pressing Ctrl+/ will bring up all the available video links on the page, then simply press the corresponding key combination for the video link you require and it will open it up in mpv\n\n```\nconfig.py\n```\n\n```\n...\nconfig.bind('<Ctrl+/>', 'hint links spawn --detach mpv {hint-url}')\n...\n```\n\n"
    },
    {
      "title": "Importing quickmarks/bookmarks",
      "level": 3,
      "content": "Qutebrowser supports importing bookmarks from several formats via the python script /usr/share/qutebrowser/scripts/importer.py. The default output format is qutebrowser's quickmarks format. For a short explanation of the differences between bookmarks and quickmarks see the qutebrowser FAQ.\n\n"
    },
    {
      "title": "From Chromium/Chrome",
      "level": 4,
      "content": "Run the script mentioned above specifying chromium as the first argument and the directory containing the bookmarks file as the second argument. For Chromium this is ~/.config/chromium/Default and ~/.config/google-chrome/Default for Chrome. The output of the script can be appended to ~/.config/qutebrowser/quickmarks. Some of the input formats are explained below. Additional information can be found by supplying the -h flag to importer.py.\n\n```\n$ python /usr/share/qutebrowser/scripts/importer.py chromium ~/.config/chromium/Default >> ~/.config/qutebrowser/quickmarks\n```\n\n"
    },
    {
      "title": "From Firefox",
      "level": 4,
      "content": "Export Firefox bookmarks to an an HTML file (see [1]). Then, use the script to import.\n\n```\n$ python /usr/share/qutebrowser/scripts/importer.py bookmarks.html >> ~/.config/qutebrowser/quickmarks\n```\n\n"
    },
    {
      "title": "From bookmarks.html file",
      "level": 4,
      "content": "The import from a bookmarks.html file requires the package python-beautifulsoup4. To import you just supply your bookmarks.html file to importer.py and append the output to ~/.config/qutebrowser/quickmarks.\n\n```\n$ python /usr/share/qutebrowser/scripts/importer.py ~/.config/chromium/Default >> ~/.config/qutebrowser/quickmarks\n```\n\n"
    },
    {
      "title": "Import as bookmarks instead of quickmarks",
      "level": 4,
      "content": "You can use any of the above mentioned methods and supply an additional -b flag to change the output format of the script to bookmarks. The output should then be appended to ~/.config/qutebrowser/bookmarks/urls.\n\n```\n$ python /usr/share/qutebrowser/scripts/importer.py -b chromium ~/.config/chromium/Default >> ~/.config/qutebrowser/bookmarks/urls\n```\n\nNote that the flag must be added before the browser specification.\n\n"
    },
    {
      "title": "Automatically enter login information",
      "level": 3,
      "content": "You can use the qute-pass userscript to automatically enter login information stored in your Pass password-store. You will need a dmenu-compatible application launcher and python-tldextract. Set up a keybinding which executes :spawn --userscript qute-pass.\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nTo quote from the script's description:\n\n```\nThe domain of the site has to appear as a segment in the pass path, for example: \"github.com/cryzed\" or \"websites/github.com\". How the username and password are determined is freely configurable using the CLI arguments. The login information is inserted by emulating key events using qutebrowser's fake-key command in this manner: [USERNAME]<Tab>[PASSWORD], which is compatible with almost all login forms.\n```\n\nTo further clarify, the pass-structure that is used by default should look something like this:\n\n```\nuser@computer$ pass\n```\n\n```\nPassword Store \n ├── example.site1.com \n │   └── username \n ├── example.site2.com \n │   └── username1 \n │   └── username2\n```\n\nThis means is that each website is a directory in your ~/.password-store folder. Within each website-named directory is where the files are titled username.gpg, username2.pgp, etc. and each file contains the password associated with each username for the website. For those of you migrating from Firefox, a modified version of firefox_decrypt should migrate things in this format.\n\nThe userscript provides many options to accomodate most workflows and special circumstances (such as only wanting to insert the password or the regular method of inserting the username and password not working).\n\n"
    },
    {
      "title": "Turn on spell checking",
      "level": 3,
      "content": "First, download the appropriate dictionary using the dictcli.py script that comes bundled with qutebrowser.\n\nFor example, for English (US):\n\n```\n$ /usr/share/qutebrowser/scripts/dictcli.py install en-US\n```\n\nThe script has other features too, which can be shown by using --help.\n\nThen set the following in qutebrowser:\n\n```\n:set spellcheck.languages [\"en-US\"]\n```\n\n"
    },
    {
      "title": "Minimize fingerprinting",
      "level": 3,
      "content": "Websites may be able to identify you based on combining information on screen size, user-agent, HTTP_ACCEPT headers, and more. See [2] for more information and to test the uniqueness of your browser. Below are a few steps that can be taken to make your qutebrowser installation more \"generic\".\n\nAdditionally see Firefox/Privacy#Configuration for more ideas.\n\n"
    },
    {
      "title": "Set a common user-agent",
      "level": 4,
      "content": "Several user agents are available as options when using set content.headers.user_agent. Another, possibly more generic user-agent is:\n\n```\nMozilla/5.0 (Windows NT 10.0; rv:68.0) Gecko/20100101 Firefox/68.0\n```\n\n- You may want to change Windows NT 10.0 by X11; Linux x86_64, since websites can also gather your platform type via Javascript, and this setting cannot be changed in qutebrowser.\n- Changing your user-agent away from the default will prevent some websites from working properly. For example, CAPTCHA will mention your browser is not supported if the user agent is listed as an out-of-date browser.\n\n"
    },
    {
      "title": "Set a common HTTP_ACCEPT header",
      "level": 4,
      "content": "The following is a common HTTP_ACCEPT header (Firefox default). Simply type the following commands at the prompt\n\n```\nset content.headers.accept_language en-US,en;q=0.5\nset content.headers.custom '{\"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"}'\n```\n\n"
    },
    {
      "title": "Disable reading from canvas",
      "level": 4,
      "content": "```\nset content.canvas_reading false\n```\n\n"
    },
    {
      "title": "Disable WebGL",
      "level": 4,
      "content": "Set content.webgl to false to disable WebGL.\n\n"
    },
    {
      "title": "Disable websites",
      "level": 3,
      "content": "Create ~/.config/qutebrowser/blocked-hosts and enter websites you want to block in each line; www.youtube.com for example. This will keep the built-in adblock list while adding the websites in. Restart qutebrowser, and run :adblock-update.\n\n"
    },
    {
      "title": "Enable Brave browser adblocker",
      "level": 3,
      "content": "Install the python-adblock package and enable the adblocker within qutebrowser:\n\n```\n:set content.blocking.method both\n```\n\n"
    },
    {
      "title": "Open some links in mpv",
      "level": 3,
      "content": "To open some specific links in mpv (like YouTube, reddit, etc) instead of loading the webpage. This can be used to bypass ads, tracking, etc. You can of course replace mpv by the video player of your choice.\n\n```\n:bind M hint links spawn mpv {hint-url}\n```\n\n"
    },
    {
      "title": "Enable darktheme everywhere",
      "level": 3,
      "content": "```\n:set colors.webpage.darkmode.enabled true\n```\n\n"
    },
    {
      "title": "Disable javascript",
      "level": 3,
      "content": "```\n:set content.javascript.enabled false\n```\n\n"
    },
    {
      "title": "Route the traffic through tor",
      "level": 3,
      "content": "This requires tor to be enabled and running. Note this is only using the tor proxy but does not provide you any protection from fingerprinting you might have on tor browser.\n\n```\n:set content.proxy socks://localhost:9050/\n```\n\n"
    },
    {
      "title": "Change the context menu theme",
      "level": 3,
      "content": "To change the context menu theme, find the relevant section of your config.py and set the appropriate settings. For example:\n\n```\nconfig.py\n```\n\n```\n...\nc.colors.contextmenu.disabled.fg = '#808080'\nc.colors.contextmenu.menu.bg = '#353535'\nc.colors.contextmenu.menu.fg = '#ffffff'\nc.colors.contextmenu.selected.bg = '#909090'\n...\n```\n\n"
    },
    {
      "title": "Integrate with KeePassXC",
      "level": 3,
      "content": "Qutebrowser ships with qute-keepassxc for integration with KeePassXC.\n\nTo integrate with KeePassXC:\n\n1. Enable KeepassXC-Browser extensions in your KeepassXC config.From KeePassXC go to Tools->Settings->Browser Integration, and check \"Enable browser integration\".\n1. Make sure to have a working private-public-key-pair in your GPG keyring.Find your secret keys with gpg --list-secret-keys --keyid-format=long. The key must be trusted, e.g. it should contain \"[ultimate]\" in the \"uid\" field.If it is not trusted, you can trust it with gpg --edit-key KEYID, then trust, 5 (ultimate trust) and confirm.Finally, copy the key id.\n1. Install the package python-pynacl\n1. Adapt your qutebrowser config.You can e.g. add the following lines to your ~/.config/qutebrowser/config.py. Remember to replace `ABC1234` with your actual GPG key id.\n\n```\nconfig.py\n```\n\n```\nconfig.bind('<Alt-Shift-u>', 'spawn --userscript qute-keepassxc --key ABC1234', mode='insert')\nconfig.bind('pw', 'spawn --userscript qute-keepassxc --key ABC1234', mode='normal')\n```\n\nTo manage multiple accounts you also need rofi installed.\n\n"
    },
    {
      "title": "Unreadable tooltips",
      "level": 3,
      "content": "Depending on your Qt theme, tooltips might be hard to read. In order to fix this, create a Qt Style Sheet file. For example:\n\n```\n~/.local/share/qutebrowser/fix-tooltips.qss\n```\n\n```\nQToolTip {\n\tbackground-color: palette(highlight);\n\tborder: 2px solid palette(highlight);\n\tcolor: palette(text);\n}\n```\n\nThen load the style sheet when launching qutebrowser:\n\n```\nqutebrowser --qt-arg stylesheet ~/.local/share/qutebrowser/fix-tooltips.qss\n```\n\nSee the bug report for details.\n\nThe bug report offers another method using qt5ctl that does not require arguments at launch:\n\n1. In qutebrowser, :set qt.force_platformtheme qt5ctl\n1. In qt5ct, set style: gtk2, standard dialogs: gtk2, palette: default\n1. Change to Style Sheets tab, and create a new file (I called it tooltip-gtk2.qss but it should not matter)\n1. Put the following contents inside: QToolTip{ background: QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 0, stop: 0 palette(window), stop: 1 palette(alternate-window)); border-radius: 3px; border: 1px solid #000000; padding: 1px; color: palette(text); }\n1. Click Save then Ok\n1. Make sure to check the box next to this new file so that it will be applied to the theme\n1. Click Apply\n\n```\nQToolTip{\n\tbackground: QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 0, stop: 0 palette(window), stop: 1 palette(alternate-window));\n\tborder-radius: 3px;\n\tborder: 1px solid #000000;\n\tpadding: 1px;\n\tcolor: palette(text);\n}\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- GitHub repository\n- Homepage\n- BBS thread\n- New configuration example\n\n"
    }
  ]
}