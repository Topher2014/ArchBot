{
  "title": "Full System Backup with tar",
  "url": "https://wiki.archlinux.org/title/Full_System_Backup_with_tar",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- System backup\n- Full system backup with SquashFS\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article will show you how to do a full system backup with tar.\n\nBacking up with tar has the advantages of using compression that can help save disk space, and simplicity. The process only requires several steps, they are:\n\n1. Boot from a LiveCD\n1. Change root to the Linux install\n1. Mount additional (if any) partitions/drives\n1. Add exclusions\n1. Use the backup script to backup\n\nTo minimize downtime the backup can alternatively be performed on a running system using LVM snapshots, if all filesystems reside on LVM volumes.\n\n"
    },
    {
      "title": "Boot with LiveCD",
      "level": 2,
      "content": "Many Linux bootable CDs, USBs... have the ability to let you change root to your install. While changing root is not necessary to do a backup, it provides the ability to just run the script without need to transfer it to a temporary drive or having to locate it on the filesystem. The Live medium must be of the same architecture that your Linux install currently is (i.e. i686 or x86_64).\n\n"
    },
    {
      "title": "Changing root",
      "level": 2,
      "content": "First you should have a scripting environment set up on your current Linux install. If you do not know what that is, it means that you are able to execute any scripts that you may have as if they are regular programs. If you do not, see this article on how to do that. What you will need to do next is change root, to learn more about what changing root is, read this. When you change root, you do not need to mount any temporary file systems (/proc, /sys, and /dev). These temporary file systems get populated on boot and you actually do not want to backup them up because they can interfere with the normal (and necessary) population process which can change on any upgrade. To change root, you will need to mount your current Linux installs root partition. For example:\n\n```\n# mkdir /mnt/arch\n# mount /dev/your-partition-or-drive\n```\n\nUse fdisk -l to discover you partitions and drives. Now chroot:\n\n```\n# cd /mnt/arch\n# chroot . /bin/bash\n```\n\nThis example obviously uses bash but you can use other shells if available. Now you will be in your scripted environment (this is provided that you have your ~/.bashrc sourced on entry):\n\n```\n~/.bash_profile\n```\n\n```\n# If using bash, source the local .bashrc\nsource ~/.bashrc\n```\n\n"
    },
    {
      "title": "Mount other partitions",
      "level": 2,
      "content": "Other partitions that you use (if any) will need to be mounted in their proper places (e.g. if you have a separate /home partition).\n\n"
    },
    {
      "title": "Exclude file",
      "level": 2,
      "content": "tar has the ability to ignore specified files and directories. The syntax is one definition per line. tar also has the capability to understand regular expressions (regexps). For example:\n\n```\n# Not old backups                                                               \n/opt/backup/arch-full*                                                                   \n                                                                                \n# Not temporary files                                                           \n/tmp/*\n\n# Not the cache for pacman\n/var/cache/pacman/pkg/\n...\n```\n\n"
    },
    {
      "title": "Backup script",
      "level": 2,
      "content": "Backing up with bsdtar is straight-forward process. Here is a basic script that can do it and provides a couple checks. You will need to modify this script to define your backup location, and exclude file (if you have one), and then just run this command after you have chrooted and mounted all your partitions. Note that GNU tar with --xattrs will not preserve extended attributes.\n\n```\n#!/bin/bash\n# full system backup\n\n# Backup destination\nbackdest=/opt/backup\n\n# Labels for backup name\n#PC=${HOSTNAME}\npc=pavilion\ndistro=arch\ntype=full\ndate=$(date \"+%F\")\nbackupfile=\"$backdest/$distro-$type-$date.tar.gz\"\n\n# Exclude file location\nprog=${0##*/} # Program name from filename\nexcdir=\"/home/<user>/.bin/root/backup\"\nexclude_file=\"$excdir/$prog-exc.txt\"\n\n# Check if chrooted prompt.\necho -n \"First chroot from a LiveCD.  Are you ready to backup? (y/n): \"\nread executeback\n\n# Check if exclude file exists\nif [Â ! -f $exclude_file ]; then\n  echo -n \"No exclude file exists, continue? (y/n): \"\n  read continue\n  if [ $continue == \"n\" ]; then exit; fi\nfi\n\nif [ $executeback = \"y\" ]; then\n  # -p, --acls and --xattrs store all permissions, ACLs and extended attributes. \n  # Without both of these, many programs will stop working!\n  # It is safe to remove the verbose (-v) flag. If you are using a \n  # slow terminal, this can greatly speed up the backup process.\n  # Use bsdtar because GNU tar will not preserve extended attributes.\n  bsdtar --exclude-from=\"$exclude_file\" --acls --xattrs -cpvaf \"$backupfile\" /\nfi\n```\n\n"
    },
    {
      "title": "Restoring",
      "level": 2,
      "content": "To restore from a previous backup, mount all relevant partitions, change the current working directory to the root directory, and execute\n\n```\n$ bsdtar --acls --xattrs -xpzf backupfile\n```\n\nreplacing backupfile with the backup archive. Removing all files that had been added since the backup was made must be done manually. Recreating the filesystem(s) is an easy way to do this.\n\n"
    },
    {
      "title": "Backup with parallel compression",
      "level": 2,
      "content": "To back up using parallel compression (SMP), use pbzip2 (Parallel bzip2):\n\n```\n# bsdtar -cvf /path/to/chosen/directory/etc-backup.tar.bz2 -I pbzip2 /etc\n```\n\nStore etc-backup.tar.bz2 on one or more offline media, such as a USB stick, external hard drive, or CD-R. Occasionally verify the integrity of the backup process by comparing original files and directories with their backups. Possibly maintain a list of hashes of the backed up files to make the comparison quicker.\n\nRestore corrupted /etc files by extracting the etc-backup.tar.bz2 file in a temporary working directory, and copying over individual files and directories as needed. To restore the entire /etc directory with all its contents execute the following command as root:\n\n```\n# bsdtar -xvf etc-backup.tar.bz2 -C /\n```\n\n"
    }
  ]
}