{
  "title": "Nebula",
  "url": "https://wiki.archlinux.org/title/Nebula",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Nebula is a user-space mesh virtual private network (VPN) daemon that uses tunneling and encryption to create a secure private mesh network between participating hosts.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the nebula package.\n\n"
    },
    {
      "title": "Basic concepts and terminology",
      "level": 2,
      "content": "Nebula is a mesh VPN technology, inspired by tinc. In a mesh VPN, individual nodes form direct tunnels between each other. This allows for high speed direct communication between nodes, without the need to go through a central node. Nodes are authenticated using certificates signed by a certificate authority.\n\nThis is in contrast to WireGuard, which is a peer-to-peer VPN technology (although there exist mesh network managers for WireGuard, e.g. innernet and wesherAUR).\n\nThis is also different from OpenVPN, which uses a star topology (also called hub and spoke).\n\n"
    },
    {
      "title": "Network setup",
      "level": 3,
      "content": "In this example, we have 3 nodes:\n\n- lighthouse Nebula IP: 192.168.100.1 Routable IP: 12.34.56.78\n- hostA Nebula IP: 192.168.100.101 Routable IP: 10.0.0.22\n- hostB Nebula IP: 192.168.100.102 Routable IP: 23.45.67.89\n\n- Nebula IP: 192.168.100.1\n- Routable IP: 12.34.56.78\n\n- Nebula IP: 192.168.100.101\n- Routable IP: 10.0.0.22\n\n- Nebula IP: 192.168.100.102\n- Routable IP: 23.45.67.89\n\nThe lighthouse has a public static IP address and is reachable by hostA and hostB. hostA lives behind a NAT. hostB has a public IP address.\n\nIn our case, we will use a /24 subnet for the VPN network. We will call this network \"My Nebula Network\".\n\n"
    },
    {
      "title": "Certificate and key generation",
      "level": 3,
      "content": "First, generate the CA certificate and private key with nebula-cert ca -name \"My Nebula Network\". This will create two files:\n\n- ca.crt: The CA certificate file\n- ca.key: the CA private key\n\nSubsequently, generate the certificate and private key files for the nodes in the network:\n\n```\n$ nebula-cert sign -name lighthouse -ip 192.168.100.1/24\n$ nebula-cert sign -name hostA -ip 192.168.100.101/24\n$ nebula-cert sign -name hostB -ip 192.168.100.102/24\n```\n\nNotice that we did not specify ca.crt and ca.key. By default, nebula-cert looks for those files in the current directory.\n\nAfter this step, we will have these files:\n\n- lighthouse.crt, lighthouse.key\n- hostA.crt, hostA.key\n- hostB.crt, hostB.key\n\n"
    },
    {
      "title": "Configuration",
      "level": 3,
      "content": "Create this configuration file on the lighthouse node:\n\n```\n/etc/nebula/config.yml\n```\n\n```\npki:\n  ca: /etc/nebula/ca.crt\n  cert: /etc/nebula/lighthouse.crt\n  key: /etc/nebula/lighthouse.key\n\nlighthouse:\n  am_lighthouse: true\n  \nlisten:\n  port: 4242\n\nfirewall:\n  outbound:\n    - port: any\n      proto: any\n      host: any\n  inbound:\n    - port: any\n      proto: any\n      host: any\n```\n\nCreate this configuration file on hostA:\n\n```\n/etc/nebula/config.yml\n```\n\n```\npki:\n  ca: /etc/nebula/ca.crt\n  cert: /etc/nebula/hostA.crt\n  key: /etc/nebula/hostA.key\n\nstatic_host_map:\n  \"192.168.100.1\": [\"12.34.56.78:4242\"]\n\nlighthouse:\n  hosts:\n    - \"192.168.100.1\"\n\npunchy:\n  punch: true\n\nfirewall:\n  outbound:\n    - port: any\n      proto: any\n      host: any\n  inbound:\n    - port: any\n      proto: any\n      host: any\n```\n\nFinally, use this configuration file for hostB:\n\n```\n/etc/nebula/config.yml\n```\n\n```\npki:\n  ca: /etc/nebula/ca.crt\n  cert: /etc/nebula/hostB.crt\n  key: /etc/nebula/hostB.key\n\nstatic_host_map:\n  \"192.168.100.1\": [\"12.34.56.78:4242\"]\n\nlighthouse:\n  hosts:\n    - \"192.168.100.1\"\n\nfirewall:\n  outbound:\n    - port: any\n      proto: any\n      host: any\n  inbound:\n    - port: any\n      proto: any\n      host: any\n```\n\n"
    },
    {
      "title": "Distribute certificates and private keys",
      "level": 3,
      "content": "Because the certificates and private keys were generated by the certificate authority, they need to be distributed to each node. SCP and SFTP are suitable for this purpose.\n\nSpecifically:\n\n- ca.crt should be copied to all 3 nodes: lighthouse, hostA, and hostB\n- lighthouse.crt and lighthouse.key should be copied to the lighthouse node\n- hostA.crt and hostA.key should be copied to hostA\n- hostB.crt and hostB.key should be copied to hostB\n\n"
    },
    {
      "title": "Start the nebula daemon",
      "level": 3,
      "content": "On each node, start nebula.service. Optionally, enable it so that it will be started on boot.\n\nNote that it does not matter which node starts the nebula daemon. The lighthouse node can even be started last. Each individual node always tries to connect to the list of known lighthouse nodes, so any network interruption can be rectified quickly.\n\n"
    },
    {
      "title": "Test for mesh functionality",
      "level": 3,
      "content": "With a mesh network, every node is directly connected to every other node. So, even if the connection between lighthouse and both hostA and hostB is slow, traffic between hostA and hostB can be fast, as long as there is a direct link between those two.\n\nThis can be demonstrated by a simple ping test on hostA:\n\n```\n$ ping -c 5 12.34.56.78\n```\n\n```\nPING 12.34.56.78 (12.34.56.78) 56(84) bytes of data.\n64 bytes from 12.34.56.78: icmp_seq=1 ttl=56 time=457 ms\n64 bytes from 12.34.56.78: icmp_seq=2 ttl=56 time=480 ms\n64 bytes from 12.34.56.78: icmp_seq=3 ttl=56 time=262 ms\n64 bytes from 12.34.56.78: icmp_seq=4 ttl=56 time=199 ms\n64 bytes from 12.34.56.78: icmp_seq=5 ttl=56 time=344 ms\n\n--- 12.34.56.78 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4004ms\nrtt min/avg/max/mdev = 199.141/348.555/480.349/108.654 ms\n```\n\n```\n$ ping -c 5 192.168.100.1\n```\n\n```\nPING 192.168.100.1 (192.168.100.1) 56(84) bytes of data.\n64 bytes from 192.168.100.1: icmp_seq=1 ttl=64 time=218 ms\n64 bytes from 192.168.100.1: icmp_seq=2 ttl=64 time=241 ms\n64 bytes from 192.168.100.1: icmp_seq=3 ttl=64 time=264 ms\n64 bytes from 192.168.100.1: icmp_seq=4 ttl=64 time=288 ms\n64 bytes from 192.168.100.1: icmp_seq=5 ttl=64 time=163 ms\n\n--- 192.168.100.1 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4004ms\nrtt min/avg/max/mdev = 162.776/234.874/288.073/42.902 ms\n```\n\n```\n$ ping -c 5 192.168.100.102\n```\n\n```\nPING 192.168.100.102 (192.168.100.102) 56(84) bytes of data.\n64 bytes from 192.168.100.102: icmp_seq=1 ttl=64 time=106 ms\n64 bytes from 192.168.100.102: icmp_seq=2 ttl=64 time=2.14 ms\n64 bytes from 192.168.100.102: icmp_seq=3 ttl=64 time=4.53 ms\n64 bytes from 192.168.100.102: icmp_seq=4 ttl=64 time=4.29 ms\n64 bytes from 192.168.100.102: icmp_seq=5 ttl=64 time=5.39 ms\n\n--- 192.168.100.102 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4006ms\nrtt min/avg/max/mdev = 2.136/24.535/106.344/40.918 ms\n```\n\nNotice that the connection between hostA and lighthouse is slow, but the connection between hostA and hostB is very fast. Also notice that the first packet between hostA and hostB is delayed a bit, but subsequent packets take almost no time at all.\n\n"
    },
    {
      "title": "My lighthouse node takes forever to handshake",
      "level": 3,
      "content": "If your lighthouse node needs a long time to handshake, and it prints multiple handshake messages all at once when handshake is completed, maybe it does not support recvmmsg(). To get around this issue, add this configuration option:\n\n```\n/etc/nebula/config.yml\n```\n\n```\nlisten:\n  batch: 1\n```\n\nThis problem usually happens if your Linux kernel is too old (<2.6.34). The proper solution is to upgrade it.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Nebula Project\n- Blog post explaining Nebula VPN\n\n"
    }
  ]
}