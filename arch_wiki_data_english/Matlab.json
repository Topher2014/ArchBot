{
  "title": "Matlab",
  "url": "https://wiki.archlinux.org/title/Matlab",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nRelated articles\n\n- Octave\n- Sage-mathematics\n- Mathematica\n\nFrom the official website:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "MATLAB is proprietary software produced by The MathWorks and requires a license to obtain, install, and activate. New versions of MATLAB are released twice a year, release names are composed of R, the year of the release and a or b.\n\nArch Linux is not in the list of officially supported distributions.\n\nA complete copy of the MATLAB software must be obtained before it can be installed. The MATLAB software is available to licenses holders on both a DVD and through the MathWorks website. In addition to the software a file installation key is required.\n\nIt is possible to install MATLAB either with the MATLAB Package Manager, matlabAUR, or from the MATLAB installation software directly. The recommended and most robust method is by using the MATLAB Package Manager, as it automates the installation of both MATLAB and toolboxes. Since the standard MATLAB installer does not support Wayland, the MPM is the only way to install MATLAB if running Wayland. Please note that MATLAB itself will require xorg-xwayland.\n\n"
    },
    {
      "title": "Installing with MATLAB Package Manager (MPM)",
      "level": 3,
      "content": "MATLAB Package Manager (MPM) offers a streamlined method to install MATLAB and accompanying MathWorks products on Linux systems, directly from the command line. This utility facilitates programmatic installation without necessitating user sign-in, a File Installation Key, or a pre-acquired license file, deferring activation and licensing to post-installation. MPM permits specification of MATLAB release version, additional toolboxes, and installation directory. Additionally, it serves well for constructing MATLAB Docker containers. As of 2023, the MATLAB installer does not support Wayland, and this is an easy way to install MATLAB via command-line.\n\nDownload mpm from https://www.mathworks.com/mpm/glnxa64/mpm and make it executable.\n\nTo install MATLAB R2021b along with select toolboxes to a specified directory, the command could be for example:\n\n```\n$ ./mpm install --release=R2021b --destination=/home/username/matlab MATLAB Simulink Deep_Learning_Toolbox Parallel_Computing_Toolbox\n```\n\nThe full list of correctly formatted product names can be found within the template input files.\n\n"
    },
    {
      "title": "Installing from the MATLAB installation software",
      "level": 3,
      "content": "The MATLAB installation software is self contained and does not require any additional packages to install in silent mode. To install with the GUI a working Xorg graphical display is necessary. Wayland is not officially supported yet, so it will run in a Xwayland session. The installation is handled by the install script. You can run the script as root to install MATLAB system-wide or your user to install it only for you.\n\nDuring the installation, you are asked if you want symlinks to be created. If you did not choose to do so, you can now manually create a symlink in /usr/local/bin to make it easier to launch in terminal:\n\n```\n# ln -s /{MATLAB}/bin/matlab /usr/local/bin\n```\n\nOr you could add MATLAB install path to PATH environment variable.\n\n"
    },
    {
      "title": "Desktop entry",
      "level": 4,
      "content": "Optionally create a desktop entry. The MIME type of MATLAB files is text/x-matlab.\n\nStart matlab with:\n\n- -desktop to run Matlab without a terminal.\n- -nosplash to prevent the splash screen from showing up.\n- -useStartupFolderPref to use the folder specified by the Initial working folder preference [1]\n\nIn order for icons to appear correctly StartupWMClass needs to be set in the desktop entry. To find it out start MATLAB, run xprop | grep WM_CLASS and select the MATLAB window.\n\nExample desktop entry:\n\n```\n/usr/share/applications/matlab.desktop\n```\n\n```\n[Desktop Entry]\nType=Application\nTerminal=false\nMimeType=text/x-matlab\nExec=/usr/local/MATLAB/R20xyz/bin/matlab -desktop -useStartupFolderPref\nName=MATLAB\nIcon=matlab\nCategories=Development;Math;Science\nComment=Scientific computing environment\nStartupNotify=true\n```\n\nIf one need to set environment variable, one could prepend env in Exec, for example, to system's libfreetype:\n\n```\nExec=env LD_PRELOAD=/usr/lib/libfreetype.so.6 matlab\n```\n\nOne might want to use the system's libstdc++.\n\n"
    },
    {
      "title": "Running on Wayland",
      "level": 4,
      "content": "To make MATLAB run on Wayland, set the environment variable QT_QPA_PLATFORM=xcb.\n\n"
    },
    {
      "title": "Installing from the AUR package",
      "level": 3,
      "content": "The matlabAUR package is designed to allow MATLAB to be integrated into and managed by Arch. The advantage of the matlabAUR package is that it manages dependencies and some of the nuances of the installation process. Note however, that the package does not contain the installation files, and you are expected to place them in the cloned package folder yourself. It can be problematic to build the package using AUR helpers, so you are expected to do so manually. You can obtain the actual MATLAB software using the installer from the MathWorks website.\n\n- Clone the matlabAUR package and cd into it.\n- Download the zip file containing the MATLAB installer from MathWorks into the current directory.\n- Run the extracted installer with:\n\n```\n$ ./matlab/install\n```\n\n- The installer gives you a choice of either installing the software now or only downloading selected modules. Choose the second option. This option may also be under the \"Advanced Options\" dropdown menu.\n- The installer will give you an option to change the download path. You might want to change it to something temporary (like /tmp if you have big enough ram disk) as you will soon move the contents to a different location.\n- Wait for the download to finish and close the installer. Merge the downloaded archives into the extracted matlab subdirectory:\n\n```\n$ rsync -a /selected/download/folder/YYYY_MM_DD_HH_MM_SS/ matlab\n```\n\n- Then package the directory into a tarball:\n\n```\n$ tar -cvf matlab.tar matlab\n```\n\n- Download your licence:Go to your MathWorks account and click on the licence number you want to use. Then, go to the Install and activate tab and select Activate to retrieve licence File. Follow the instructions and download the licence file needed for the installation. Name the file matlab.lic and place it in the AUR package directory. There will also be a File Installation Key (FIK) visible on the MathWorks website. Copy-paste it in a new file named matlab.fik and save it next to PKGBUILD just like you did with the matlab.lic.\n- Now, you will create a pacman package. You can customize the modules you want the package to contain by modifying the PKGBUILD or leave it at default:\n\n```\nPKGBUILD\n```\n\n```\n...\n# Limit products to lower size, set this to true to do a partial install\npartialinstall=false\n# Example list of products for a partial install; check README.md for details\nproducts=(\n  \"MATLAB\"\n  #---MATLAB Product Family---#\n  \"Curve_Fitting_Toolbox\"           # Math and Optimization\n  \"Database_Toolbox\"              # Database Access and Reporting\n  \"Deep_Learning_HDL_Toolbox\"\n  \"Deep_Learning_Toolbox\"\n  \"DSP_System_Toolbox\"\n  \"Global_Optimization_Toolbox\"\n  \"GPU_Coder\"\n  \"MATLAB_Coder\"                # Code Generation\n  \"MATLAB_Compiler\"               # Application Deployement\n  \"MATLAB_Compiler_SDK\"\n  \"Optimization_Toolbox\"\n  \"Parallel_Computing_Toolbox\"        # Parallel computing\n  \"Partial_Differential_Equation_Toolbox\"\n  \"Reinforcement_Learning_Toolbox\"\n  \"Statistics_and_Machine_Learning_Toolbox\"   # AI, Data Science, Statistics\n  \"Symbolic_Math_Toolbox\"\n  \"Text_Analytics_Toolbox\"\n  #---Application Products---#\n  \"Audio_Toolbox\"\n  \"Bioinformatics_Toolbox\"          # Computational Biology\n  \"Computer_Vision_Toolbox\"\n  \"Image_Processing_Toolbox\"          # Image Processing and Computer Vision\n  \"Signal_Processing_Toolbox\"         # Signal Processing\n  \"Wavelet_Toolbox\"\n)\n...\n```\n\n- Finally, use makepkg command to build and install the package:\n\n```\n$ makepkg -sri\n```\n\n"
    },
    {
      "title": "Java",
      "level": 3,
      "content": "The MATLAB software is bundled with a JVM and therefore it is not necessary to install Java. The JVM version supported by MATLAB is listed in System Requirements & Platform Availability or simply type version -java in MATLAB. One could set the MATLAB_JAVA environment variable to use custom JVM, for example, to specify the jre8-openjdk JRE, launch MATLAB with:\n\n```\n$ env MATLAB_JAVA=/usr/lib/jvm/java-8-openjdk/jre matlab\n```\n\n"
    },
    {
      "title": "OpenGL acceleration",
      "level": 3,
      "content": "MATLAB can take advantage of hardware based 2D and 3D OpenGL acceleration. Support for hardware acceleration needs to be configured outside of MATLAB. Appropriate video drivers need to be installed along with the OpenGL utility library glu package. If X11 forwarding is being used, the video drivers need to be installed on both the client and server. To check if MATLAB is making use of hardware based OpenGL acceleration run:\n\n```\n$ matlab -nodesktop -nosplash -r \"opengl info; exit\" | grep Software\n```\n\nIf \"software rendering\" is not \"false\", then there is a problem with your hardware acceleration. If this is the case make sure OpenGL is configured correctly on the system. This can be done with the glxinfo program from the mesa-utils package:\n\n```\n$ glxinfo | grep \"direct rendering\"\n```\n\nIf \"direct rendering\" is not \"yes\", then there is likely a problem with your system configuration.\n\nIf glxinfo works but not matlab, you can try to run:\n\n```\n$ export LD_PRELOAD=/usr/lib/libstdc++.so; export LD_LIBRARY_PATH=/usr/lib/xorg/modules/dri/; matlab -nodesktop -nosplash -r \"opengl info; exit\" | grep Software\n```\n\nIf it works, you can edit Matlab launcher script to add:\n\n```\nexport LD_PRELOAD=/usr/lib/libstdc++.so\nexport LD_LIBRARY_PATH=/usr/lib/dri/\n```\n\nAfter these changes, you may see low-level graphics errors in the MATLAB console such as:\n\n```\ncom.jogamp.opengl.GLException: X11GLXDrawableFactory - Could not initialize shared resources for X11GraphicsDevice[type .x11, connection :0, unitID 0, handle 0x0, owner false, ResourceToolkitLock[obj 0x76ddc7cd, isOwner false, <6876ff80, 5d5c50dc>[count 0, qsz 0, owner <NULL>]]]\n    at jogamp.opengl.x11.glx.X11GLXDrawableFactory$SharedResourceImplementation.createSharedResource(X11GLXDrawableFactory.java:326)\n    at jogamp.opengl.SharedResourceRunner.run(SharedResourceRunner.java:297)\n    at java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.NullPointerException\n    at jogamp.opengl.GLContextImpl.makeCurrent(GLContextImpl.java:688)\n    at jogamp.opengl.GLContextImpl.makeCurrent(GLContextImpl.java:580)\n    at jogamp.opengl.x11.glx.X11GLXDrawableFactory$SharedResourceImplementation.createSharedResource(X11GLXDrawableFactory.java:297)\n    ... 2 more\n```\n\nIn that case, create a file with the name 'java.opts' in the directory where MATLAB is executed (for example /usr/local/MATLAB/R2020a/bin/glnxa64) with the following line:\n\n```\njava.opts\n```\n\n```\n-Djogl.disable.openglarbcontext=1\n```\n\n"
    },
    {
      "title": "Sound",
      "level": 3,
      "content": "To confirm that MATLAB is able to use the default soundcard to present sounds run:\n\n```\n$ matlab -nodesktop -nosplash -r \"load handel; sound(y, Fs); pause(length(y)/Fs); exit\" > /dev/null\n```\n\nThis should play an except from Handel's \"Hallelujah Chorus.\" If this fails make sure ALSA is properly configured. This can be done with the speaker-test program from the alsa-utils package:\n\n```\n$ speaker-test\n```\n\nIf you do not hear anything, then there is likely a problem with your system configuration.\n\n"
    },
    {
      "title": "GPU computing",
      "level": 3,
      "content": "MATLAB can take advantage of CUDA enabled GPUs to speed up applications. In order to take advantage of a supported GPU install the nvidia, nvidia-utils, ocl-icd, opencl-nvidia, and cuda packages. To check if MATLAB is able to utilize the GPU run:\n\n```\n$ matlab -nodesktop -nosplash -r \"x=rand(10, 'single'); g=gpuArray(x); Success=isequal(gather(g), x), exit\"  | sed -ne '/Success =/,$p'\n```\n\n"
    },
    {
      "title": "Install supported compilers",
      "level": 3,
      "content": "In order to access the full functionality of MATLAB (e.g., to use Simulink, Builder JA, and MEX-file compilation), supported versions of the gcc, g++, gfortran, and jdk compilers must be installed. Details about the supported compilers for the current release and previous releases are available online. Many of the supported gcc, g++, jdk compiler versions for past MATLAB releases are available from the AUR (e.g., gcc43AUR, gcc44AUR, gcc47AUR, gcc49AURand jdk7AUR), while past versions of the gfortran compilers are not packaged.\n\nTo use previous versions of the gcc, g++, and gfortran compilers with MEX files, edit ${MATLAB}/bin/mexopts.sh and replace all occurrences of CC='gcc' with CC='gcc-4.X', CXX='g++' with CXX='g++-4.X', and FC='gfortran' with FC='gfortran-4.X', where X is the compiler version appropriate for the particular MATLAB release.\n\n- Newer versions of Matlab (at least 2017a) does not seem to respect the ${MATLAB}/bin/mexopts.sh customization. Instead it uses ${MATLAB}/bin/glnxa64/mexopts/LANG_glnxa64.xml file.\n- Though, it is not officially supported, one could still use higher version of compiler, and ignore the warnings.\n\n"
    },
    {
      "title": "Help browser",
      "level": 3,
      "content": "The help browser uses valuable slots in the dynamic thread vector and causes competition with core functionality provided by libraries like the BLAS that also depend on the dynamic thread vector. The help browser can be configured to use fewer slots in the dynamic thread vector with\n\n```\n>> webutils.htmlrenderer('basic');\n```\n\nThis is a persistent change and to reverse it use\n\n```\n>> webutils.htmlrenderer('default');\n```\n\n"
    },
    {
      "title": "Serial port access",
      "level": 3,
      "content": "To successfully connect to any serial port, MATLAB expects to have write access directly to /var/lock which is not allowed on Arch Linux for security reasons. Instead of allowing this access just for MATLAB, you can work around this problem by redirecting device locking using lockdev-redirectAUR. All you have to do is executing MATLAB like this:\n\n```\n# lockdev-redirect /{MATLAB}/bin/matlab\n```\n\nIf you have created a .desktop file as shortcut to MATLAB, then add \"lockdev-redirect\" as a prefix to your \"Exec=\" entry.\n\n"
    },
    {
      "title": "HiDPI and 4k",
      "level": 3,
      "content": "See HiDPI#MATLAB.\n\n"
    },
    {
      "title": "Warning: Initializing MATLAB Graphics failed",
      "level": 3,
      "content": "This error seems to happen on multi-monitor setups, see this forum post.\n\n"
    },
    {
      "title": "X11GLXDrawableFactory - Could not initialize shared resources for X11GraphicsDevice",
      "level": 3,
      "content": "Create a file java.opts in the folder where the matlab executable is:\n\n```\njava.opts\n```\n\n```\n-Djogl.disable.openglarbcontext=1\n```\n\nor look at this forum post for other solutions\n\nor disable hardware acceleration:\n\n```\n>> opengl('save','software')\n```\n\n"
    },
    {
      "title": "Black screen in help browser and livescripts",
      "level": 3,
      "content": "In order to use help browser and livescripts install libselinuxAUR.\n\n"
    },
    {
      "title": "Static TLS errors",
      "level": 3,
      "content": "MATLAB has a number of libraries that have been compiled with static thread local storage (TLS) including the help browser doc and the BLAS libraries. For example,\n\n```\n>> doc('help');\n>> ones(10)*randn(10);\nError using  * \nBLAS loading error:\ndlopen: cannot load any more object with static TLS\n```\n\nis related to the bugs:\n\n- 961964 for which patched libraries are available from MathWorks[dead link 2020-03-30 ⓘ]\n- 1003952 for which workarounds exist\n\nA more general solution of recompiling glibc has also been suggested. [2]\n\n"
    },
    {
      "title": "Blank/grey UI when using WM (non-reparenting window manager)",
      "level": 3,
      "content": "See Java#Gray window, applications not resizing with WM, menus immediately closing.\n\n"
    },
    {
      "title": "Corrupted text and fonts in menus and fields",
      "level": 3,
      "content": "If you notice that the menus or the input fields are corrupted or not appearing correctly then you can try to activate the \"Use antialiasing to smooth desktop fonts\" option in Matlab preferences, it seems to solve the problem. Go to Preferences > Matlab > Fonts and activate it. You will need to restart Matlab in order to take effect.\n\n"
    },
    {
      "title": "Installation dependencies missing",
      "level": 3,
      "content": "Matlab might complain that it cannot find a package. Look at the package name and install it with Pacman, or in the case of x86_64 there are some libraries only in AUR. matlabAUR contains a list of up-to-date dependencies for the newest Matlab version.\n\nSee also #Unable to launch the MATLABWindow application.\n\n"
    },
    {
      "title": "Installation error: archive is not a ZIP archive",
      "level": 3,
      "content": "During the installation you can get:\n\n```\nThe following error was detected while installing package_name: archive is not a ZIP archive \nWould you like to retry installing package_name? If you press No, the installer will exit without completing the installation. More information can be found at /tmp/mathworks_root.log\n```\n\nMatlab downloads all packages to /tmp/ directory which resides in RAM and is maximum size of half of available memory. In this case it is not enough for installation files and Matlab 2019a installer will warn you about this. If it did not, or if you ignored the warning, you will have got the above error.\n\nYou can either resize tmpfs (3,5 GB is not enough, 6 GB works), or remove packages from base install and add them later with built-in Matlab add-on installer.\n\n"
    },
    {
      "title": "Install-time library errors",
      "level": 3,
      "content": "- Make sure that the symlink bin/glnx64/libstdc++.so.6 is pointing to the correct version of libstdc++.so.xx (which is also in the same directory and has numbers where 'xx' is). By default, it may be pointing to an older (and nonexistent) version (different value for 'xx').\n\n- Make sure the device you are installing from is not mounted as noexec\n\n- If you downloaded the files from Mathworks' website, make sure they are not on an NTFS or FAT partition, because that can mess up the symlinks. Ext4 or Ext3 should work.\n\n"
    },
    {
      "title": "Hangs on rendering or exiting with Intel graphics",
      "level": 3,
      "content": "Some users have reported issues with DRI3 enabled on Intel Graphics chips. A possible workaround is to disable DRI3 and run MATLAB with hardware rendering on DRI2; to do so, launch MATLAB with the environment variable LIBGL_DRI3_DISABLE set to 1:\n\n```\nLIBGL_DRI3_DISABLE=1 /{MATLAB}/bin/matlab\n```\n\nIf the previous workaround does not work, the issue can be circumvented by selecting software rendering with the MATLAB command (beware, performance may be very poor when doing e.g. big or complex 3D plots):\n\n```\nopengl('save','software')\n```\n\nSee [3] and [4] for more.\n\n"
    },
    {
      "title": "LiveScript errors",
      "level": 3,
      "content": "If you get the error when attempting to load or create a LiveScript:\n\n```\nViewing matlab live script files is not currently supported by this operating system configuration\n```\n\n- It could be because of broken symlinks of libgcrypt and other dependencies, after system updates. On the first start of the Live Editor the components are extracted and these libary symlinks are created (if not existing).\n\n```\nmatlab_root/sys/jxbrowser-chromium\n```\n\n```\n~/.matlab/R2017b/HtmlPanel\n```\n\n```\nmatlab_root/bin/glnxa64\n```\n\n- Also the steps in #Unable to launch the MATLABWindow application may resolve the issue.\n- It can also happen due to missing gconf package. Make sure gconfAUR is installed.\n- If the above does not help, execute in the command window\n\n```\n>> com.mathworks.mde.liveeditor.widget.rtc.CachedLightweightBrowserFactory.createLightweightBrowser()\n```\n\nto get a more detailed error message.\n\n- A debugging console can be opened with\n\n```\n>> com.mathworks.mde.webbrowser.HtmlPanelDebugConsole.invoke;\n```\n\n"
    },
    {
      "title": "Using webcam/video device",
      "level": 3,
      "content": "Make sure the correct support package add-ons are installed (webcam or OS Generic Video Interface for example). If running matlab as a user, make sure your user has write permissions to wherever the support packages are being downloaded and installed.\n\nSince MATLAB R2017a, Image Acqusition Toolbox is using GStreamer library version 1.0. It previously used version 0.10.\n\nIn general, USB Webcam Support Package does a better job working with UVC and built-in cameras than OS Generic Video Interface Support Package.\n\n"
    },
    {
      "title": "MATLAB hangs for several minutes when closing Help Browser",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nSince upgrade of glibc from 2.24 to 2.25, MATLAB (at least R2017a) hangs when closing Help Browser. The issue is related to the particular version of jxbrowser-chromium shipped with MATLAB. This issue is still present with glibc 2.26 and MATLAB R2017b and R2018a.\n\nTo fix this issue, download the latest jxbrowser and replace the following jars from MATLAB:\n\n```\nmatlab_root/java/jarext/jxbrowser-chromium/jxbrowser-chromium.jar\nmatlab_root/java/jarext/jxbrowser-chromium/jxbrowser-linux64.jar\n```\n\nMATLAB should automatically unpack those jars into matlab_root/sys/jxbrowser-chromium/glnxa64/chromium when first opening Help Browser. Remove matlab_root/sys/jxbrowser-chromium/glnxa64/chromium directory to make sure MATLAB uses the latest jxbrowser.\n\nUnfortunately, this workaround does not work in R2017b anymore. Going deeper into investigation of this issue, it is related to a crash of one of jxbrowser-chromium processes. The parent process of jxbrowser-chromium then sits there and waits for response from a process that is already dead. This causes MATLAB main window to freeze. You can easily unfreeze MATLAB by manually killing all leftover jxbrowser-chromium processes.\n\nI have come up with this simple script that uses inotify and waits for user to close Help browser in MATLAB. It triggers when user closes Help browser and sends kill signal to all leftover jxbrowser-chromium processes:\n\n```\n#!/bin/sh\n\nif [ -z \"$1\" ]; then\n\tREL=R2017b\nelse\n\tREL=$1\nfi\n\nJXPATH=\"/path/to/MATLAB/$REL/sys/jxbrowser-chromium/glnxa64/chromium\"\nCMD=\"inotifywait -m -e CLOSE $JXPATH/resources.pak\"\n\n#Exit if the daemon is already active\nif ! pgrep -f \"$CMD\" > /dev/null; then\n\t#Wait for user to close Help Browser, then killall leftover jxbrowser processes\n\t$CMD |\n\twhile read line\n\tdo\n\t\tkillall \"$JXPATH/jxbrowser-chromium\"\n\tdone\nelse\n\texit\nfi\n```\n\nI run this script as part of my MATLAB start script like that:\n\n```\n~/bin/unfreeze_matlab.sh R2017b &\n```\n\nTo make sure that this background job is killed when I exit MATLAB, I use this in the beginning of MATLAB start script:\n\n```\ntrap \"trap - SIGTERM && kill -- -$$\" SIGINT SIGTERM EXIT\n```\n\n"
    },
    {
      "title": "Some dropdown menus cannot be selected",
      "level": 3,
      "content": "In some interfaces - such as Simulation Data Inspector or Simulink Test Manager - nothing happens when choosing an item in dropdown menu (for example, when trying to change a number of subplots in Simulation Data Inspector). To work around this issue, hold down the Shift key while clicking the item in dropdown menu.\n\n"
    },
    {
      "title": "Not starting - licensing error",
      "level": 3,
      "content": "In case MATLAB will not start from a desktop environment by the call of its desktop file one should see the output as you start it from the terminal.\n\nFor a Licensing error such as:\n\n```\n# matlab\n```\n\n```\nMATLAB is selecting SOFTWARE OPENGL rendering.\nLicense checkout failed.\nLicense Manager Error -9\nThis error may occur when: \n-The hostid of this computer does not match the hostid in the license file. \n-A Designated Computer installation is in use by another user. \nIf no other user is currently running MATLAB, you may need to activate.\n\nTroubleshoot this issue by visiting: \nhttps://www.mathworks.com/support/lme/R2017a/9\n\nDiagnostic Information:\nFeature: MATLAB \nLicense path: /home/<USER>/.matlab/R2017a_licenses/license_<NUM>_R2017a.lic:/home/<USER>/.matlab/R2017a_licenses/lice\nnse_Darkness_<NUM>_R2017a.lic:/opt/MATLAB/R2017a/licenses/license.dat:/opt/MATLAB/R2017a/licenses/*\n.lic \nLicensing error: -9,57.\n```\n\nA re-activation might solve the problem.\n\n```\n/usr/local/MATLAB/R2017a/bin/activate_matlab.sh -javadir /usr/lib/jvm/java-8-openjdk/jre/\n```\n\n"
    },
    {
      "title": "MATLAB crashes with \"Failure loading desktop class\" on startup",
      "level": 3,
      "content": "In case MATLAB will not start and starting it from command line gives you the following error:\n\n```\n$ matlab\n```\n\n```\nFatal Internal Error: Internal Error: Failure occurs during desktop startup. Details: Failure loading desktop class.\n```\n\nand you have the option -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel set in your _JAVA_OPTIONS environment variable, start MATLAB with\n\n```\n$ _JAVA_OPTIONS= matlab\n```\n\nIf this works, add the line\n\n```\nexport _JAVA_OPTIONS=\n```\n\nto your MATLAB launcher script. Optionally re-add other Java options.\n\n"
    },
    {
      "title": "Unable to type in text fields of interfaces based on MATLABWindow",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nSince R2018a, it is not possible to type text in interfaces based on MATLABWindow - like Signal Editor, Add-Ons Explorer and others. MATLABWindow and MATLAB's webwindow infrastructure is based on Chromium Embedded Framework, and it looks like a known and long standing bug: https://bitbucket.org/chromiumembedded/cef/issues/2026/multiple-major-keyboard-focus-issues-on\n\nOne possible workaround is to switch focus from the MATLABWindow to another window and then switch back - so that you can type.\n\nTo elaborate more on this workaround (since the problem is still there in R2018b), here is what i did in my Openbox config (note that the A-Middle keybinding already exist in default config):\n\n```\n<mousebind button=\"A-Middle\" action=\"Press\">\n       <action name=\"Unfocus\"/>\n       <action name=\"Focus\"/>\n     </mousebind>\n```\n\nNow, whenever it is not possible to type in a text field, I press Alt+Mouse middle mouse and then I can type again.\n\nThis problem is critical during installation. After one clicks some elements in the installation window, he will not be able to type into any textbox anymore and switching between windows does not always work. To circumvent the issue, one shall only use key-press, instead of mouse click during installation. MATLAB installer has a poor support on Wayland, one may also consider using other WM instead during installation.\n\n"
    },
    {
      "title": "Unable to launch the MATLABWindow application",
      "level": 3,
      "content": "In MATLAB versions R2018b until R2022b, the installer crashes as follows:\n\n```\n$ ./install\n```\n\n```\nterminate called after throwing an instance of 'std::runtime_error'\n  what():  Failed to launch web window with error: Unable to launch the MATLABWindow application. The exit code was: 127\n[1]    1409378 IOT instruction (core dumped)  ./install\n```\n\nTo find out why MATLABWindow is crashing, run it manually to get detailed information.\n\n```\n$ ./bin/glnxa64/MATLABWindow\n```\n\n```\nbin/glnxa64/MATLABWindow: symbol lookup error: /usr/lib/libcairo.so.2: undefined symbol: FT_Get_Color_Glyph_Layer\n```\n\nFT_Get_Color_Glyph_Layer is a symbol of freetype2, which indicates a library incompatibility between the MATLAB application and the Arch Linux packages. [5]\n\nTo fix this, put aside MATLAB's libfreetype.so*.\n\n```\n$ rm ./bin/glnxa64/libfreetype.so*\n```\n\nYou can also use LD_PRELOAD environment variable to force MATLAB use Arch Linux's libfreetype without removing the lib file.\n\n```\n$ export LD_PRELOAD=/lib64/libfreetype.so\n$ ./install\n```\n\nSimilarly, if the error is caused by undefined symbol: g_log_structured..., put aside MATLAB's libglib-2.0.so*. If the error is caused by path to/libstdc++.so.6: version `CXXABI_1.3.9' not found (required by _somelibrary_), put aside MATLAB's libstdc++.so.6.\n\n"
    },
    {
      "title": "Cannot verify university login during installation",
      "level": 3,
      "content": "For total headcount license users, MATLAB will pop-up a window asking the user to login with their credentials in a web browser. However, if run with sudo, most browsers (especially chromium) will not run. To circumvent this problem, one shall 'active the computer' through MATLAB's website using a browser by a normal user. See this issue\n\n"
    },
    {
      "title": "Missing libcrypt.so.1",
      "level": 3,
      "content": "If you get this error when launching or installing MATLAB (R2020a and later), install libxcrypt-compat.\n\n"
    },
    {
      "title": "Running installer as root does not launch the GUI",
      "level": 3,
      "content": "If you run the installer as root and the GUI does not appear (but does appear without launching as root), try temporarily allowing the root user to access the X Server by running the following commands in order (where ./install is the command to run the installer as root):\n\n```\n$ xhost +SI:localuser:root\n# ./install\n$ xhost -SI:localuser:root\n```\n\nNote that the last command should be executed upon finishing the installation process, and localuser is a string literal. See this support answer, and xhost(1).\n\nIn addition, verify that the DISPLAY environment variable is set.\n\nAn alternative is to install MATLAB as a local user.\n\n"
    },
    {
      "title": "GUI installer is unable to create the target folder when installing as user",
      "level": 3,
      "content": "Make the folder manually (as root), and take ownership. The path is typically /usr/local/MATLAB\n\n```\n# mkdir -p /path/to/MATLAB/R20XXx\n# chown -R $LOGNAME: /path/to/MATLAB/R20XXx\n```\n\n"
    },
    {
      "title": "MATLAB crashes when opening Simulink",
      "level": 3,
      "content": "When running from terminal the error message is:\n\n```\nInconsistency detected by ld.so: ../elf/dl-tls.c: 597: _dl_allocate_tls_init: Assertion `listp != NULL' failed!\n```\n\nSee upstream bug report here: https://www.mathworks.com/support/bugreports/details/2632298\n\n"
    },
    {
      "title": "MATLAB cannot open or create script files",
      "level": 3,
      "content": "See #Unable to launch the MATLABWindow application.\n\n"
    },
    {
      "title": "Calls to mex fail",
      "level": 3,
      "content": "If calls from MATLAB or Simulink to mex (e.g. rapid accelerator) fail with the error *.mexa64 is not a MEX file, even though the resulting file is usable, it may help to edit in either matlab/bin/ or ~/.matlab7rc.sh by changing the LDPATH_PREFIX variable from its empty default: [6]\n\n```\nmatlab/bin/.matlab7rc.sh (or ~/.matlab7rc.sh)\n```\n\n```\n...\n    case \"$ARCH\" in\n\tglnx*) #  Make sure you are modifying case glnx*\n\t    AUTOMOUNT_MAP=''\n\t    DISPLAY=\"$DISPLAY\"\n\t    ARCH=\"$ARCH\"\n\t    TOOLBOX=\"$TOOLBOX\"\n\t    MATLABPATH=\"$MATLABPATH\"\n\t    SHELL=\"$SHELL\"\n\t    LDPATH_PREFIX='/usr/lib' \n...\n```\n\n"
    },
    {
      "title": "Incompatibilities with some python libraries using MKL",
      "level": 3,
      "content": "Some python code running inside matlab may fail with an error mentioning Parameter * was incorrect on entry to . This can be avoided by calling\n\n```\npy.sys.setdlopenflags(int32(bitor(int64(py.os.RTLD_NOW), int64(py.os.RTLD_DEEPBIND))));\n```\n\nor\n\n```\npy.sys.setdlopenflags(int32(bitor(int64(py.os.RTLD_LAZY), int64(py.os.RTLD_DEEPBIND))));\n```\n\ndirectly before any calls to py and after calls to pyenv. See this support answer.\n\n"
    },
    {
      "title": "Settings not persisting between MATLAB restarts",
      "level": 3,
      "content": "In some cases on recent Arch systems matlab is unable to export .mlsettings files, preventing toolbox and some matlab settings from being saved to disk and persisted. These cases come from matlab trying to hard link new files from /tmp directly to the preferences directory (usually ~/.matlab/release where release is the matlab version, e.g. R2021b). As a workaround, run matlab with the $TMPDIR environment variable set to a folder on the same file system as the preferences directory. [7]\n\n"
    },
    {
      "title": "\"Unable to open this file in the current system configuration\"",
      "level": 3,
      "content": "The error can be fixed by setting aside the libfreetype.so.6 in matlab_root/bin/glnxa64/. You may run the following command:\n\n```\ncd matlab_root/bin/glnxa64/\nmv libfreetype.so.6 libfreetype.so.6.old\n```\n\n"
    },
    {
      "title": "Symbols in toolstrip menus are not diplayed properly",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nThis issue can be fixed by installing noto-fonts.\n\n"
    },
    {
      "title": "Blank screen on Xwayland",
      "level": 3,
      "content": "As suggested in Wayland#Java, this issue can be fixed by adding in the Matlab launcher script:\n\n```\nexport _JAVA_AWT_WM_NONREPARENTING=1\n```\n\n"
    },
    {
      "title": "Desktop Error with text not rendering",
      "level": 3,
      "content": "Launching MATLAB you get an error dialog with a message of \"desktop error\" and the text does not render. The error log looks like this\n\n```\nERROR\n```\n\n```\nCrash report:\nAjava.lang.ExceptionInInitializerError\nat com.mathworks.mde.cmdwin.CmdWin.<init>(CmdWin.java:111)\nat com.mathworks.mde.cmdwin.CmdWin.<clinit>(CmdWin.java:107)\nat java.lang.Class.forName0(Native Method)\nat java.lang.Class.forName(Class.java:264)\nat com.mathworks.jmi.ClassLoaderManager.loadClass(ClassLoaderManager.java:442)\nat com.mathworks.jmi.ClassLoaderManager.findClass(ClassLoaderManager.java:422)\nat com.mathworks.jmi.Matlab$2.findClass(Matlab.java:517)\nat com.mathworks.util.ClassLoaderBridge.findClass(ClassLoaderBridge.java:23)\nat com.mathworks.widgets.desk.DTClient.createComponent(DTClient.java:275)\nat com.mathworks.widgets.desk.Desktop.createClientComponent(Desktop.java:6468)\nat com.mathworks.mde.desk.MLDesktop.createClientComponent(MLDesktop.java:1040)\nat com.mathworks.widgets.desk.Desktop.createClientComponentWrapper(Desktop.java:6482)\nat com.mathworks.widgets.desk.Desktop.setClientShowing(Desktop.java:7181)\nat com.mathworks.widgets.desk.Desktop.setClientShowing(Desktop.java:7168)\nat com.mathworks.widgets.desk.DTNestingContainer$ViewState.restore(DTNestingContainer.java:2910)\nat com.mathworks.widgets.desk.DTNestingContainer$SplitState.restore(DTNestingContainer.java:2536)\nat com.mathworks.widgets.desk.DTNestingContainer$SplitState.restore(DTNestingContainer.java:2537)\nat com.mathworks.widgets.desk.DTNestingContainer$RootState.restore(DTNestingContainer.java:2422)\nat com.mathworks.widgets.desk.DTNestingContainer$RootState.restore(DTNestingContainer.java:2417)\nat com.mathworks.widgets.desk.DTNestingContainer.restoreState(DTNestingContainer.java:2291)\nat com.mathworks.widgets.desk.DTMultipleClientFrame.restoreState(DTMultipleClientFrame.java:2791)\nat com.mathworks.widgets.desk.Desktop.restoreLayout(Desktop.java:5947)\nat com.mathworks.mde.desk.MLDesktop.restoreLayout(MLDesktop.java:1652)\nat com.mathworks.widgets.desk.Desktop.restoreLayout(Desktop.java:5706)\nat com.mathworks.mde.desk.MLDesktop.setDefaultDesktop(MLDesktop.java:1539)\nat com.mathworks.widgets.desk.Desktop.initMainFrame(Desktop.java:296)\nat com.mathworks.mde.desk.MLDesktop.initMainFrameFromThread(MLDesktop.java:844)\nat com.mathworks.mde.desk.MLDesktop.access$600(MLDesktop.java:224)\nat com.mathworks.mde.desk.MLDesktop$Initializer.run(MLDesktop.java:1215)\nat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)\nat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)\nat java.awt.EventQueue.access$500(EventQueue.java:97)\nat java.awt.EventQueue$3.run(EventQueue.java:709)\nat java.awt.EventQueue$3.run(EventQueue.java:703)\nat java.security.AccessController.doPrivileged(Native Method)\nat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:74)\nat java.awt.EventQueue.dispatchEvent(EventQueue.java:728)\nat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:205)\nat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)\nat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)\nat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)\nat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)\nat java.awt.EventDispatchThread.run(EventDispatchThread.java:82)\nCaused by: java.lang.ArithmeticException: / by zero\nat com.mathworks.mde.cmdwin.XCmdWndView.getPotentialColumns(XCmdWndView.java:1072)\nat com.mathworks.mde.cmdwin.XCmdWndView.setCWFont(XCmdWndView.java:1651)\nat com.mathworks.mde.cmdwin.XCmdWndView.initPrefs(XCmdWndView.java:907)\nat com.mathworks.mde.cmdwin.XCmdWndView.<init>(XCmdWndView.java:401)\nat com.mathworks.mde.cmdwin.XCmdWndView.<clinit>(XCmdWndView.java:329)\n... 43 more\n```\n\nThe error is related to missing fonts and can be fixed installing from the AUR the package ttf-ms-fonts\n\n"
    },
    {
      "title": "Simulink on KDE Dark Theme has inappriopriate color scheme",
      "level": 3,
      "content": "When running Simulink module, the workspace window may render some dark border causing text and icons in corners not visible at all in some scenarios. According to the potential solution it can be fixed by setting XDG_CURRENT_DESKTOP and GTK_THEME environment variables with\n\n```\nexport XDG_CURRENT_DESKTOP=GNOME\nexport GTK_THEME=Adwaita:light\n```\n\n"
    },
    {
      "title": "canberra message in terminal",
      "level": 3,
      "content": "Starting matlab from a terminal, one may receive a line like the following\n\n```\nGtk-Message: 20:01:53.344: Failed to load module \"canberra-gtk-module\"\n```\n\nAccording to [8] this can be fixed by setting the environment variable GTK_PATH. The packages gtk2 and libcanberra need to be installed of course.\n\n```\nenv GTK_PATH=/usr/lib/gtk-2.0\n```\n\n"
    },
    {
      "title": "executable stack error with MATLAB versions at or before R2024b",
      "level": 3,
      "content": "The recent release of glibc 2.41 also causes issues with MATLAB. MATLAB will throw an error similiar to the following:\n\n```\n$ bin/matlab\n```\n\n```\nCommand `service` threw an exception\nError loading /home/user/.MathWorks/ServiceHost/-mw_shared_installs/$version/bin/glnxa64/mathworksservicehost/rcf/matlabconnector/serviceprocess/rcf/service/libmwmshrcfservice.so. libmwfoundation_crash_handling.so: cannot enable executable stack as shared object requires: Invalid argument: Success: Success\n```\n\nStricter security settings now require that executable stack permissions are disabled for the libmwfoundation_crash_handling.so shared object file. This can be done with execstackAUR.\n\n```\n$ execstack -c ~/.MathWorks/ServiceHost/-mw_shared_installs/$version/bin/glnxa64/libmwfoundation_crash_handling.so\n```\n\n"
    },
    {
      "title": "MATLAB in a systemd-nspawn",
      "level": 2,
      "content": "MATLAB can be run within a systemd-nspawn container to maintain a static system and avoid the library issues that often plague matlab installs after significant updates to libraries in Arch. Refer to Systemd-nspawn for detailed information on setting up such containers.\n\nThe following instruction is to get a MATLAB R2021b installation running in a minimal Debian 11 environment. It assumes MATLAB is already installed as normal in \"/usr/local/MATLAB/R2021b\".\n\nUse Xhost to allow the nspawn environment to use the existing X server instance, see also Systemd-nspawn#Use an X environment.\n\nCreate a minimal Debian environment in a directory (\"deb11\" here) with:\n\n```\n$ debootstrap --include=systemd-container --components=main,contrib bullseye deb11\n```\n\nSet a password for the root user and create regular user:\n\n```\n$ systemd-nspawn -D deb11\npasswd\nuseradd -m username\nlogout\n```\n\nand then boot the environment with:\n\n```\n$ systemd-nspawn --bind-ro=/dev/dri --bind-ro=/tmp/.X11-unix --bind=/dev/shm --bind=/usr/local/MATLAB --setenv=DISPLAY=:0 --setenv=MESA_LOADER_DRIVER_OVERRIDE=i965 -b -D deb11\n```\n\nInstall the following packages to have the required libraries in the nspawn environment for MATLAB: https://github.com/mathworks-ref-arch/container-images/blob/master/matlab-deps/r2021b/ubuntu20.04/Dockerfile\n\n\"mesa-utils\" and dependencies needs to be installed to support graphics acceleration. \"usbutils\" can be installed to support usb interfaces for I/O with MATLAB.\n\nInstall the matlab-support (from contrib source) package in the environment for some convenient integration.\n\n```\n$ apt-get install matlab-support\n```\n\nMATLAB can be launched from within the environment normally by using the binary at matlab_root/bin.\n\nAnother way is to add something like\n\n```\n-u username -a /usr/local/MATLAB/R2021b/bin/matlab -nosoftwareopengl -useStartupFolderPref\n```\n\nto the systemd-nspawn command above.\n\n"
    }
  ]
}