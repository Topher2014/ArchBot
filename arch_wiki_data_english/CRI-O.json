{
  "title": "CRI-O",
  "url": "https://wiki.archlinux.org/title/CRI-O",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "CRI-O is an OCI-based implementation of the Kubernetes Container Runtime Interface. As such, it is one of the container runtimes that can be used with a node of a Kubernetes cluster.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the cri-o package.\n\nThe package will set the system up to load the overlay and br_netfilter modules and set the following sysctl options:\n\n```\nnet.bridge.bridge-nf-call-iptables = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward = 1\n```\n\nTo use CRI-O without a reboot, make sure to load the modules and configure the sysctl values accordingly.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "CRI-O is configured via /etc/crio/crio.conf or via drop-in configuration files in /etc/crio/crio.conf.d/.\n\n"
    },
    {
      "title": "Plugin installation",
      "level": 4,
      "content": "CRI-O can make use of container networking as provided by cni-plugins, or plugins installed with in-cluster deployments such as weave, flannel, calico, etc.\n\n"
    },
    {
      "title": "Plugin directories",
      "level": 4,
      "content": "Arch installs the plugins provided by cni-plugins to both /usr/lib/cni and /opt/cni/bin, but most other plugins (e.g. in-cluster deployments, kubelet managed plugins, etc.) by default only install to the second directory. CRI-O is only configured to look for plugins in the first directory, and as a result, any plugins in the second directory are unavailable without some configuration changes.\n\nThis may present itself as a non-working network and an entry in the CRI-O logs similar to the following error:\n\n```\nError validating CNI config file /etc/cni/net.d/<plugin-config-file>.conf: [failed to find plugin \"<plugin>\" in path [/usr/lib/cni/]]\n```\n\nThere are two solutions available to resolve this: either have each of the other systems changed to use /usr/lib/cni instead, or update CRI-O to use the latter directory instead of the first. The second solution can be achieved with a drop-in configuration file:\n\n```\n/etc/crio/crio.conf.d/00-plugin-dir.conf\n```\n\n```\n[crio.network]\nplugin_dirs = [\n  \"/opt/cni/bin/\",\n]\n```\n\nAs this is an array, you can also set both or any other directories here as possible plugin locations.\n\n"
    },
    {
      "title": "Plugin configuration",
      "level": 4,
      "content": "Copy one of the examples from /usr/share/doc/cri-o/examples/cni/ to /etc/cni/net.d and modify it as needed.\n\n"
    },
    {
      "title": "Storage",
      "level": 3,
      "content": "By default, CRI-O makes use of the overlay driver as its storage_driver for the container storage in /var/lib/containers/storage/. However, it can also be configured to use Btrfs or ZFS natively by changing the driver in containers-storage.conf(5):\n\n```\n/etc/containers/storage.conf\n```\n\n```\n[storage]\ndriver = \"btrfs\"\n```\n\n"
    },
    {
      "title": "Runtime",
      "level": 3,
      "content": "The cri-o package depends on the oci-runtime virtual package, which selects crun by default using lexicographic ordering.\n\nHowever, CRI-O makes use of the runc container runtime by default. Either install the runc package explicitly, or configure crun as the container runtime by adding the following drop-in configuration file:\n\n```\n/etc/crio/crio.conf.d/01-crun.conf\n```\n\n```\n[crio.runtime]\ndefault_runtime = \"crun\"\n\n[crio.runtime.runtimes.crun]\nruntime_path = \"/usr/bin/crun\"\nruntime_type = \"oci\"\nruntime_root = \"/run/crun\"\n```\n\n"
    },
    {
      "title": "Running",
      "level": 2,
      "content": "Start and enable the crio.service systemd unit.\n\n"
    },
    {
      "title": "Testing",
      "level": 2,
      "content": "Use crio status like this:\n\n```\n# crio status info\n```\n\n```\ncgroup driver: systemd\nstorage driver: overlay\nstorage graph root: /var/lib/containers/storage\nstorage image:\ndefault GID mappings (format <container>:<host>:<size>):\n  0:0:4294967295\ndefault UID mappings (format <container>:<host>:<size>):\n  0:0:4294967295\n```\n\nand:\n\n```\n# crio status config\n```\n\nNow install the crictl package, and see e.g. https://kubernetes.io/docs/tasks/debug-application-cluster/crictl/ or https://github.com/kubernetes-sigs/cri-tools/blob/master/docs/crictl.md, or simply:\n\n```\n# source <(crictl completion bash)\n```\n\n```\n# crictl pull index.docker.io/busybox\n# crictl pull quay.io/prometheus/busybox\n# crictl images\n```\n\n```\n# curl -O https://raw.githubusercontent.com/kubernetes-sigs/cri-tools/master/docs/examples/podsandbox-config.yaml\n# curl -O https://raw.githubusercontent.com/kubernetes-sigs/cri-tools/master/docs/examples/container-config.yaml\n# crictl run container-config.yaml podsandbox-config.yaml\n```\n\n```\n# crictl logs $(crictl ps --last 1 --output yaml | yq -r .containers[0].id)\n# crictl exec -it $(crictl ps --last 1 --output yaml | yq -r .containers[0].id) /bin/sh\n```\n\n```\n# crictl rm -af\n# crictl rmp -af\n```\n\nNote how Docker Hub is not hard-coded, so specify container registry explicitly. (See also https://github.com/kubernetes-sigs/cri-tools/pull/718.)\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- CRI-O on Github - CRI-O repository on Github\n- CRI-O Website - The official CRI-O website\n\n"
    }
  ]
}