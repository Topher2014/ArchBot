{
  "title": "Joomla",
  "url": "https://wiki.archlinux.org/title/Joomla",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Apache HTTP Server\n- PHP\n- MySQL\n- PostgreSQL\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nJoomla! is a free and open-source content management system (CMS) for publishing web content. It is written in PHP and stores the data in a MySQL, PostgreSQL or MS SQL database.\n\nAmong the supported features are page caching, RSS feeds, printable versions of pages, news flashes, blogs, search, and support for language internationalization.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "In order for Joomla to function, the following components need to be installed and configured:\n\n- An HTTP server with support for PHP (in the following example Apache HTTP Server will be used)\n- A PHP libraries\n- An SQL engine (PostgreSQL, MySQL)\n\n"
    },
    {
      "title": "In place of a PHP server",
      "level": 3,
      "content": "Install the joomlaAUR package.\n\n"
    },
    {
      "title": "From scratch",
      "level": 3,
      "content": "Start by installing all of the necessary packages: apache php php-apache mariadb\n\nFor MySQL (MariaDB) or PostgreSQL see #Choosing between MySQL and PostgreSQL\n\n"
    },
    {
      "title": "Apache",
      "level": 3,
      "content": "See Apache HTTP Server#Configuration\n\nAfter following the instructions you should have a running copy of Apache.\n\nNow to enable PHP support we need to get back to editing /etc/httpd/conf/httpd.conf: PHP is known not to work with mod_mpm_event.so module. So we need to disable it in favor of mod_mpm_prefork.so like this:\n\n```\n#LoadModule mpm_event_module modules/mod_mpm_event.so\nLoadModule mpm_prefork_module modules/mod_mpm_prefork.so\n```\n\nNow we need to add(uncomment) the following line after the mod_dir.so module:\n\n```\nLoadModule php_module modules/libphp.so\n```\n\nAdd the handler:\n\n```\nAddHandler php-script php\n```\n\nAppend at the end of the Include list:\n\n```\nInclude conf/extra/php_module.conf\n```\n\nAnd we are done!\n\n"
    },
    {
      "title": "Choosing between MySQL and PostgreSQL",
      "level": 4,
      "content": "When choosing between MySQL(MariaDB) and PostgreSQL one should consider that MySQL's design is supposed to be fast and light vs more solid all-in-one PostgreSQL approach. For the purpose of this article MySQL was chosen because:\n\n- it is more lightweight\n- it is licensed under GPL(vs MIT)\n\nSee MariaDB to install.\n\nAfter the base installation and configuration has been completed, it is time to perform some more detailed setup.\n\nFirst, create the database for your future website:\n\n```\n$ mysqladmin -u root -p create joomla\n```\n\nThe naming convention is optional, but for the sake of clarity the database will be called 'joomla'\n\nIt is recommended to avoid using root MySQL account for everyday tasks. In order to create another user one must first invoke mysql interface with:\n\n```\n$ mysql -u root -p\n```\n\nIt will prompt you for MySQL's root password. If everything went OK and MySQL server is running, you sould end up with MariaDB prompt akin to this one:\n\n```\nMariaDB [(none)]>\n```\n\nIn order to create a privileged user issue a following command:\n\n```\nGRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, \\\nLOCK TABLES ON joomla.* TO '$USER'@'localhost' IDENTIFIED BY '$PASSWD';\n```\n\nIf you are setting up a personal server feel free to experiment with the $USER and $PASSWD values.\n\n- The password you enter here will be saved in ~/.mysql_history;\n- It is impromptu that you get rid of the lines containing your password from that file;\n\nNow, to apply these settings:\n\n```\nFLUSH PRIVILEGES;\nquit\n```\n\n"
    },
    {
      "title": "PHP",
      "level": 3,
      "content": "Now to setup our PHP server. We will be running it using Apache. Edit /etc/php/php.ini:\n\nA minimal configuration goes as follows:\n\n- Comment out\n\n```\n;output_buffering = 4096\n```\n\n- Edit the following value for a more verbose error reporting\n\n```\nerror_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT\ndisplay_errors = On\n```\n\n- Optional: enable logging\n\n```\nlog_errors = On\n```\n\n- Enable MySQL support(uncomment the following options):\n\n```\nextension=pdo_mysql\nextension=mysqli\n```\n\nTo test whether PHP was configured properly add this line somewhere in the body of a simple html page file:\n\n```\n<?php echo '<p>Hello World</p>';Â ?>\n```\n\nSave this as some_page.php\n\nNow restart httpd and navigate to http://localhost/some_page.php\n\n"
    },
    {
      "title": "Joomla",
      "level": 3,
      "content": "By now you should have a working instance of Apache with PHP and MySQL up and running.\n\nNow to get started with joomla, copy the contents of /usr/share/webapps/joomla to your document root.\n\nNavigate to your localhost\n\nYou should be presented with the Joomla! installation screen.\n\n"
    },
    {
      "title": "The file Cache Storage is not supported on this platform",
      "level": 3,
      "content": "It is most likely that Apache does not have write permissions on $DocumentRoot/cache\n\nSince by default Apache is ran as 'http' user, those must be tweaked accordingly for $DocumentRoot/cache and $DocumentRoot/administrator/cache\n\n"
    }
  ]
}