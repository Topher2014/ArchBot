{
  "title": "Pkgbuild-introspection",
  "url": "https://wiki.archlinux.org/title/Pkgbuild-introspection",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- AUR Cleanup Day\n- AUR helpers\n- AUR submission guidelines\n- Aurweb RPC interface\n- Creating packages\n- Official repositories\n- Package Maintainer guidelines\n- Unofficial user repositories\n- .SRCINFO\n\nThe Arch User Repository (AUR) is a community-driven repository for Arch Linux users. It contains package descriptions (PKGBUILDs) that allow you to compile a package from source with makepkg and then install it via pacman. The AUR was created to organize and share new packages from the community and to help expedite popular packages' inclusion into the extra repository. This document explains how users can access and utilize the AUR.\n\nA good number of new packages that enter the official repositories start in the AUR. In the AUR, users are able to contribute their own package builds (PKGBUILD and related files). The AUR community has the ability to vote for packages in the AUR. If a package becomes popular enough — provided it has a compatible license and good packaging technique — it may be entered into the extra repository (directly accessible by pacman or from the Arch build system).\n\n"
    },
    {
      "title": "Getting started",
      "level": 2,
      "content": "Users can search and download PKGBUILDs from the AUR Web Interface. These PKGBUILDs can be built into installable packages using makepkg, then installed using pacman.\n\n- Ensure base-devel is installed.\n- Glance over the #Frequently asked questions for answers to the most common questions.\n- You may wish to adjust /etc/makepkg.conf to optimize the build process to your system prior to building packages from the AUR. A significant improvement in package build times can be realized on systems with multi-core processors by adjusting the MAKEFLAGS variable, by using multiple cores for compression, or by using different compression algorithm. Users can also enable hardware-specific compiler optimizations via the CFLAGS variable. See makepkg#Tips and tricks for more information.\n\nif you have set up AUR SSH authentication then it is also possible to interact with the AUR through SSH: type ssh aur@aur.archlinux.org help for a list of available commands.\n\n"
    },
    {
      "title": "Installing and upgrading packages",
      "level": 2,
      "content": "Installing packages from the AUR is a relatively simple process. Essentially:\n\n1. Acquire the build files, including the PKGBUILD and possibly other required files, like systemd units and patches (often not the actual code).\n1. Verify that the PKGBUILD and accompanying files are not malicious or untrustworthy.\n1. Run makepkg in the directory where the files are saved. This will download the code, compile it, and package it.\n1. Run pacman -U package_file to install the package onto your system.\n\n"
    },
    {
      "title": "Prerequisites",
      "level": 3,
      "content": "First, ensure that the necessary tools are installed by installing base-devel; this meta package has make and other tools needed for compiling from source, listed as dependencies.\n\nNext, choose an appropriate build directory. A build directory is simply a directory where the package will be made or \"built\" from source, and can be any directory. The examples in the following sections will use ~/builds as the build directory.\n\n"
    },
    {
      "title": "Acquire build files",
      "level": 3,
      "content": "Locate the package in the AUR. This is done using the search field at the top of the AUR home page. Clicking the application's name in the search list brings up an information page on the package. Read through the description to confirm that this is the desired package, note when the package was last updated, and read any comments.\n\nThere are several methods for acquiring the build files for a package:\n\n- Clone its git repository, labeled \"Git Clone URL\" in the \"Package Details\" on its AUR page. This is the preferred method, an advantage of which is that you can easily get updates to the package via git pull.\n\n```\n$ git clone https://aur.archlinux.org/package_name.git\n```\n\n- Download a snapshot, either by clicking the \"Download snapshot\" link under \"Package Actions\" on the right hand side of its AUR page, or in a terminal:\n\n```\n$ curl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/package_name.tar.gz\n```\n\n- Use the read-only mirror archlinux/aur on GitHub, where every package is located in a branch. It is recommended to clone only a single branch (the whole repository is too big and performance would be low). You can do this with one of the following two methods: Use git clone --single-branch: $ git clone --branch package_name --single-branch https://github.com/archlinux/aur.git Do a partial clone of this repository (git clone --depth=1) and add branches selectively:\n\n- Use git clone --single-branch: $ git clone --branch package_name --single-branch https://github.com/archlinux/aur.git\n- Do a partial clone of this repository (git clone --depth=1) and add branches selectively:\n\n```\n$ git clone --branch package_name --single-branch https://github.com/archlinux/aur.git\n```\n\n```\n$ git clone --depth=1 https://github.com/archlinux/aur.git; cd aur$ git remote set-branches --add origin package_name$ git fetch$ git checkout package_name\n```\n\n"
    },
    {
      "title": "Acquire a PGP public key if needed",
      "level": 3,
      "content": "Check if a signature file in the form of .sig or .asc is part of the PKGBUILD source array. If that is the case, then acquire one of the public keys listed in the PKGBUILD validpgpkeys array. Refer to makepkg#Signature checking for more information.\n\n"
    },
    {
      "title": "Build the package",
      "level": 3,
      "content": "Change directories to the directory containing the package PKGBUILD.\n\n```\n$ cd package_name\n```\n\nView the contents of all provided files. For example, to use the pager less to view PKGBUILD, do:\n\n```\n$ less PKGBUILD\n```\n\n- To view changes since the last git commit, you can use git show.\n- To view changes since the last commit using vimdiff, do git difftool @~..@ --tool=vimdiff. The advantage of vimdiff is that you view the entire contents of each file along with indicators on what has changed.\n\nMake the package. After manually confirming the contents of the files, run makepkg as a normal user. Some helpful flags:\n\n- -s/--syncdeps automatically resolves and installs any dependencies with pacman before building. If the package depends on other AUR packages, you will need to manually install them first.\n- -i/--install installs the package if it is built successfully. This lets you skip the next step that is usually done manually.\n- -r/--rmdeps removes build-time dependencies after the build, as they are no longer needed. However, these dependencies may need to be reinstalled the next time the package is updated.\n- -c/--clean cleans up temporary build files after the build, as they are no longer needed. These files are usually needed only when debugging the build process.\n\n"
    },
    {
      "title": "Install the package",
      "level": 3,
      "content": "The package can now be installed with pacman:\n\n```\n# pacman -U package_name-version-architecture.pkg.tar.zst\n```\n\nNote: **highly** \n\n- If you have changed your PKGEXT in makepkg.conf, the name of the package file may be slightly different.\n- The above example is only a brief summary of the build process. It is highly recommended to read the makepkg and Arch build system articles for more details.\n\n"
    },
    {
      "title": "Upgrading packages",
      "level": 3,
      "content": "In the directory containing the package's PKGBUILD, you must first update the files and changes by using the command\n\n```\n$ git pull\n```\n\nthen follow the previous build and install instructions.\n\n"
    },
    {
      "title": "Updating packages",
      "level": 3,
      "content": "The AUR is unsupported, so any packages you install are your responsibility to update, not pacman's. If packages in the official repositories are updated, you will need to rebuild any AUR packages that depend on those libraries.\n\n"
    },
    {
      "title": "Suspension",
      "level": 3,
      "content": "When editing a user as a Package Maintainer, the Suspended field can be set, which suspends the target user. When a user is suspended, they cannot:\n\n- Login to https://aur.archlinux.org\n- Receive notifications\n- Interact with the git interface\n\n"
    },
    {
      "title": "Inactivity",
      "level": 3,
      "content": "When editing your own account or another as a Package Maintainer, the Inactive field can be set. Inactive accounts are used for two reasons:\n\n- Display the date someone was marked inactive on their account page\n- Generate a current count of active Package Maintainer based on their inactivity for new proposals\n\n"
    },
    {
      "title": "Commenting on packages",
      "level": 3,
      "content": "The AUR Web Interface has a comments facility that allows users to provide suggestions and feedback on improvements to the PKGBUILD contributor.\n\nPython-Markdown provides basic Markdown syntax to format comments.\n\n- This implementation has some occasional differences with the official syntax rules.\n- Commit hashes to the Git repository of the package and references to Flyspray tickets are converted to links automatically.\n- Long comments are collapsed and can be expanded on demand.\n\n"
    },
    {
      "title": "Voting for packages",
      "level": 3,
      "content": "One of the easiest activities for all Arch users is to browse the AUR and vote for their favourite packages using the online interface. All packages are eligible for adoption by a Package Maintainer for inclusion in the extra repository, and the vote count is one of the considerations in that process; it is in everyone's interest to vote!\n\nSign up on the AUR website to get a \"Vote for this package\" option while browsing packages. After signing up, it is also possible to vote from the commandline with aur-auto-vote-gitAUR.\n\nAlternatively, if you have set up AUR SSH authentication, you can directly vote from the command line using your ssh key. This means that you will not need to save or type in your AUR password.\n\n```\n$ ssh aur@aur.archlinux.org vote package_name\n```\n\n"
    },
    {
      "title": "Flagging packages out-of-date",
      "level": 3,
      "content": "First, you should flag the package out-of-date indicating details on why the package is outdated, preferably including links to the release announcement or the new release tarball.\n\nYou should also try to reach out to the maintainer directly by email. If there is no response from the maintainer after two weeks, you can file an orphan request. See AUR submission guidelines#Requests for details.\n\n"
    },
    {
      "title": "Debugging the package build process",
      "level": 2,
      "content": "1. Ensure your build environment is up-to-date by upgrading before building anything.\n1. Ensure you have base-devel installed.\n1. Use the -s option with makepkg to check and install all dependencies needed before starting the build process.\n1. Try the default makepkg configuration.\n1. See Makepkg#Troubleshooting for common issues.\n\nIf you are having trouble building a package, first read its PKGBUILD and the comments on its AUR page.\n\nIt is possible that a PKGBUILD is broken for everyone. If you cannot figure it out on your own, report it to the maintainer (e.g. by posting the errors you are getting in the comments on the AUR page). You may also seek help in the AUR Issues, Discussion & PKGBUILD Requests forum.\n\nThe reason might not be trivial after all. Custom CFLAGS, LDFLAGS and MAKEFLAGS can cause failures. To avoid problems caused by your particular system configuration, build packages in a clean chroot. If the build process still fails in a clean chroot, the issue is probably with the PKGBUILD.\n\nSee Creating packages#Checking package sanity about using namcap. If you would like to have a PKGBUILD reviewed, post it on the aur-general mailing list to get feedback from the Package Maintainers and fellow AUR members, or the Creating & Modifying Packages forum. You could also seek help in the IRC channel #archlinux-aur on the Libera Chat network.\n\n"
    },
    {
      "title": "Submitting packages",
      "level": 2,
      "content": "Users can share PKGBUILDs using the Arch User Repository. See AUR submission guidelines for details.\n\n"
    },
    {
      "title": "Web interface translation",
      "level": 2,
      "content": "See i18n.md in the AUR source tree for information about creating and maintaining translation of the AUR Web Interface.\n\n"
    },
    {
      "title": "History",
      "level": 2,
      "content": "In the beginning, there was ftp://ftp.archlinux.org/incoming, and people contributed by simply uploading the PKGBUILD, the needed supplementary files, and the built package itself to the server. The package and associated files remained there until a \"Trusted user\" (renamed as Package Maintainer) saw the program and adopted it.\n\nThen the Trusted User Repositories were born. Certain individuals in the community were allowed to host their own repositories for anyone to use. The AUR expanded on this basis, with the aim of making it both more flexible and more usable. In fact, the AUR maintainers were referred to as TUs (Trusted Users) until the change in naming to Package Maintainers.\n\nBetween 2015-06-08 and 2015-08-08, the AUR transitioned from version 3.5.1 to 4.0.0, introducing the use of Git repositories for publishing the PKGBUILDs. Existing packages were dropped unless manually migrated to the new infrastructure by their maintainers.\n\n"
    },
    {
      "title": "Git repositories for AUR3 packages",
      "level": 3,
      "content": "The AUR Archive on GitHub has a repository for every package that was in AUR 3 at the time of the migration. Alternatively, there is the aur3-mirror repository which provides the same.\n\n"
    },
    {
      "title": "What kind of packages are permitted on the AUR?",
      "level": 3,
      "content": "The packages on the AUR are merely \"build scripts\", i.e. recipes to build binaries for pacman. For most cases, everything is permitted, subject to usefulness and scope guidelines, as long as you are in compliance with the licensing terms of the content. For other cases, where it is mentioned that \"you may not link\" to downloads, i.e. contents that are not redistributable, you may only use the file name itself as the source. This means and requires that users already have the restricted source in the build directory prior to building the package. When in doubt, ask.\n\n"
    },
    {
      "title": "How can I vote for packages in the AUR?",
      "level": 3,
      "content": "See #Voting for packages.\n\n"
    },
    {
      "title": "What is a package maintainer?",
      "level": 3,
      "content": "See Arch terminology#Package maintainer.\n\n"
    },
    {
      "title": "What is the difference between the Arch User Repository and the extra repository?",
      "level": 3,
      "content": "The Arch User Repository is where all PKGBUILDs that users submit are stored, and must be built manually with makepkg. When PKGBUILDs receive enough community interest and the support of a Package Maintainer, they are moved into the extra repository (maintained by the Package Maintainers), where the binary packages can be installed with pacman.\n\n"
    },
    {
      "title": "Foo in the AUR is outdated; what should I do?",
      "level": 3,
      "content": "See #Flagging packages out-of-date.\n\nIn the meantime, you can try updating the package yourself by editing the PKGBUILD locally. Sometimes, updates do not require changes to the build or package process, in which case simply updating the pkgver or source array is sufficient.\n\n"
    },
    {
      "title": "Foo in the AUR does not compile when I run makepkg; what should I do?",
      "level": 3,
      "content": "You are probably missing something trivial; see #Debugging the package build process.\n\n"
    },
    {
      "title": "ERROR: One or more PGP signatures could not be verified!; what should I do?",
      "level": 3,
      "content": "Most likely, you do not have the required public key(s) in your personal keyring to verify downloaded files. See Makepkg#Signature checking for details.\n\n"
    },
    {
      "title": "How do I create a PKGBUILD?",
      "level": 3,
      "content": "Consult the AUR submission guidelines#Rules of submission, then see creating packages.\n\n"
    },
    {
      "title": "I have a PKGBUILD I would like to submit; can someone check it to see if there are any errors?",
      "level": 3,
      "content": "There are several channels available to submit your package for review; see #Debugging the package build process.\n\n"
    },
    {
      "title": "How to get a PKGBUILD into the extra repository?",
      "level": 3,
      "content": "Usually, at least 10 votes are required for something to move into extra. However, if a Package Maintainer wants to support a package, it will often be found in the repository.\n\nReaching the required minimum of votes is not the only requirement; there has to be a package maintainer willing to maintain the package. Package Maintainers are not required to move a package into the extra repository even if it has thousands of votes.\n\nUsually, when a very popular package stays in the AUR, it is because:\n\n- Arch Linux already has another version of a package in the repositories\n- Its license prohibits redistribution\n- It helps retrieve user-submitted PKGBUILDs. AUR helpers are unsupported by definition.\n\nSee also Rules for Packages Entering the extra repository\n\n"
    },
    {
      "title": "How can I speed up repeated build processes?",
      "level": 3,
      "content": "See Makepkg#Improving build times.\n\n"
    },
    {
      "title": "What is the difference between foo and foo-git packages?",
      "level": 3,
      "content": "Many AUR packages come in \"stable\" release and \"unstable\" development versions. Development packages usually have a suffix denoting their Version Control System and are not intended for regular use, but may offer new features or bugfixes. Because these packages only download the latest available source when you execute makepkg, their pkgver() in the AUR does not reflect upstream changes. Likewise, these packages cannot perform an authenticity checksum on any VCS source.\n\nSee also System maintenance#Use proven software packages.\n\n"
    },
    {
      "title": "Why has foo disappeared from the AUR?",
      "level": 3,
      "content": "It is possible the package has been adopted by a Package Maintainer and is now in the extra repository.\n\nPackages may be deleted if they did not fulfill the rules of submission. See the aur-requests archives for the reason for deletion.\n\n"
    },
    {
      "title": "How do I find out if any of my installed packages disappeared from AUR?",
      "level": 3,
      "content": "The simplest way is to check the HTTP status of the package's AUR page:\n\n```\n$ comm -23 <(pacman -Qqm | sort) <(curl https://aur.archlinux.org/packages.gz | gzip -cd | sort)\n```\n\n"
    },
    {
      "title": "How can I obtain a list of all AUR packages?",
      "level": 3,
      "content": "- https://aur.archlinux.org/packages.gz\n- Use aurpkglist from python3-aurAUR\n- New AUR Metadata Archives\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- AUR Web Interface\n- AUR Mailing List\n\n"
    }
  ]
}