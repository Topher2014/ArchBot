{
  "title": "Chromium tweaks",
  "url": "https://wiki.archlinux.org/title/Chromium_tweaks",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Browser extensions\n- Firefox\n- Vivaldi\n\nChromium is an open-source graphical web browser based on the Blink rendering engine. It is the basis for the proprietary Google Chrome browser.\n\nSee this page for an explanation of the differences between Chromium and Google Chrome. Additionally:\n\n- Sync is unavailable in Chromium 89+ (2021-03-02) [1]\n\nNote: Consider switching to xbrowsersync for bookmarks syncing as long term solution.\n\nConsider switching to xbrowsersync for bookmarks syncing as long term solution.\n\nSee List of applications/Internet#Blink-based for other browsers based on Chromium.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "There are several packages available to install Chromium with:\n\n- chromium — stable release;\n- chromium-devAUR — development release;\n- chromium-snapshot-binAUR — nightly build.\n\nGoogle Chrome packages:\n\n- google-chromeAUR — stable release;\n- google-chrome-betaAUR — beta release;\n- google-chrome-devAUR — development release.\n- google-chrome-canaryAUR — canary release.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Note: **This article or section is a candidate for merging with Chromium#Tips and tricks 2.** This article or section is a candidate for merging with Chromium#Tips and tricks 2.\n\nThis article or section is a candidate for merging with Chromium#Tips and tricks 2.\n\n"
    },
    {
      "title": "Default applications",
      "level": 3,
      "content": "To set Chromium as the default browser and to change which applications Chromium launches when opening downloaded files, see default applications.\n\n"
    },
    {
      "title": "Certificates",
      "level": 3,
      "content": "Chromium uses Network Security Services for certificate management. Certificates can be managed in chrome://settings/certificates.\n\n"
    },
    {
      "title": "Making flags persistent",
      "level": 3,
      "content": "You can put your flags in a chromium-flags.conf file under $HOME/.config/ (or under $XDG_CONFIG_HOME if you have configured that environment variable) or /etc/ for global.\n\nNo special syntax is used; flags are defined as if they were written in a terminal.\n\n- The arguments are split on whitespace and shell quoting rules apply, but no further parsing is performed.\n- In case of improper quoting anywhere in the file, a fatal error is raised.\n- Flags can be placed in separate lines for readability, but this is not required.\n- Lines starting with a hash symbol (#) are skipped. (This is only supported by the Chromium launcher script and will not work when using Google Chrome.)\n\nBelow is an example chromium-flags.conf file that defines the flags --start-maximized --incognito:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n# This line will be ignored.\n--start-maximized\n--incognito\n```\n\n"
    },
    {
      "title": "Force GPU acceleration",
      "level": 3,
      "content": "Since at least Chromium 110, GPU acceleration is enabled by default for most systems. You may have to append the following flags to persistent configuration if your system configuration is matched by the block list:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--ignore-gpu-blocklist\n--enable-zero-copy\n```\n\n"
    },
    {
      "title": "Hardware video acceleration",
      "level": 3,
      "content": "- There is no official support from Chromium or Arch Linux for this feature [2]. However, chromium from official repositories is compiled with VA-API support and you may ask for help in the dedicated forum thread.\n- Since Chromium version 122, an extra VA-API package is no longer needed. VA-API works when using the native Wayland backend with the chromium package from official repositories.\n- On AMD GPU devices, VA-API does not work out of the box and requires mesa >= 24.1 as well as enabling Vulkan. This may cause issues with WebGL under X11/XWayland. Vulkan with #Native Wayland support works since version 125.0.6422.141-1.\n\nIf you have confirmed working VA-API support by checking the output of vainfo (see Hardware video acceleration#Verifying VA-API), you might first try the following flag alone:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--enable-features=AcceleratedVideoDecodeLinuxGL\n```\n\nOtherwise, continue reading.\n\nTo enable accelerated encoding in Chromium:\n\n- Append the AcceleratedVideoEncoder feature, e.g. --enable-features=AcceleratedVideoDecodeLinuxGL,AcceleratedVideoEncoder. See [3] and [4] for details.\n\nTo enable VA-API support:\n\n- Install the correct VA-API driver for your video card and verify VA-API has been enabled and working correctly, see Hardware video acceleration. For proprietary NVIDIA support, installing libva-nvidia-driver is required.\n- Set the option --enable-features=VaapiVideoDecoder. This is enough when using ANGLE GL renderer and libva-intel-driver.\n- When using ANGLE, Chromium forces the older i965 driver and fails when intel-media-driver is used. As a workaround, configure VA-API manually. See [5] for details.\n- To use the system GL renderer on Xorg or Wayland, use --use-gl=egl. Setting this option might no longer be needed when using Chrome 112 and may break GPU acceleration when using AMD GPUs.\n- If VA-API still does not work, try the --enable-features=VaapiIgnoreDriverChecks or--disable-features=UseChromeOSDirectVideoDecoder flag\n- If VA-API still does not work on X11 and old GPUs, set the LIBVA_DRI3_DISABLE=1 environment variable [6].\n\n"
    },
    {
      "title": "Vulkan",
      "level": 4,
      "content": "When using Vulkan, the following flags are required and might also be sufficient on Chromium 126 and Mesa 24.1:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--enable-features=VaapiVideoDecoder,VaapiIgnoreDriverChecks,Vulkan,DefaultANGLEVulkan,VulkanFromANGLE\n```\n\nwithout any of the additional flags mentioned above.\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 4,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n- Chromium uses VaapiVideoDecoder for AV1 on Wayland + RADV\n- Chromium uses VaapiVideoDecoder for videos of any size on Wayland + RADV\n\nTo check if it is working play a video which is using a codec supported by your VA-API driver (vainfo tells you which codecs are supported, but Chromium will only support VP9 and h264):\n\n- Open the DevTools by pressing Ctrl+Shift+I or on the Inspect button of the context (right-click) menu\n- Add the Media inspection tab: Hamburger menu > More tools > Media\n- In the newly opened Media tab, look at the hardware decoder state of the video decoder\n\nTest on a large enough video. Starting with version 86, Chromium on desktop will only accelerate videos larger than 720p.\n\nTo reduce CPU usage while watching YouTube where VP8/VP9 hardware decoding is not available use the h264ify, enhanced-h264ify or Not yet, AV1[7] extension.\n\nOn some systems (especially on Xwayland) you might need to #Force GPU acceleration. Only --ignore-gpu-blocklist is enough for our purposes.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nYou might need to disable the Skia renderer, as it is currently not compatible with video decode acceleration: --disable-features=UseSkiaRenderer\n\n"
    },
    {
      "title": "KDE integration",
      "level": 3,
      "content": "For integration into Plasma install plasma-browser-integration. See KDE Plasma Browser Integration for more details.\n\n"
    },
    {
      "title": "PDF viewer plugin",
      "level": 3,
      "content": "Chromium and Google Chrome are bundled with the Chromium PDF Viewer plugin. If you do not want to use this plugin, check Download PDFs in chrome://settings/content/pdfDocuments.\n\n"
    },
    {
      "title": "Running on Xwayland",
      "level": 3,
      "content": "If you are using NVIDIA's proprietary driver, running Chromium on Xwayland may cause the GPU process to occasionally crash. To prevent the GPU process from crashing, add the following flags:\n\n```\n--use-angle=vulkan --use-cmd-decoder=passthrough\n```\n\n"
    },
    {
      "title": "Native Wayland support",
      "level": 3,
      "content": "Since version 97, native Wayland support in Chromium can be enabled with the following flags [8]:\n\n```\n--ozone-platform-hint=auto\n```\n\nIf this doesn't work, e.g. on version 106 under Weston, then use:\n\n```\n--ozone-platform=wayland\n```\n\nSee #Making flags persistent for a permanent configuration. The flag is also available via browser flags menu.\n\nThis will select wayland Ozone backend when in wayland session, so you can use a single desktop entry if you switch between X11 and Wayland often.\n\nAdditionally, if you are having trouble with input methods you may also want to force newer GTK:\n\n```\n--gtk-version=4\n```\n\nIf a AltGr/Compose key stops working, adding this workaround might fix it:\n\n```\n--disable-gtk-ime\n```\n\nIf you are using Fcitx5 and not work properly when using the above flags, try using the --enable-wayland-ime flag instead of --gtk-version=4. [9]\n\n```\n--enable-wayland-ime --wayland-text-input-version=3\n```\n\n"
    },
    {
      "title": "Touchpad gestures for navigation",
      "level": 4,
      "content": "To enable two finger swipe to go back and forward through your history, use the following flags:\n\n```\n--ozone-platform-hint=auto --enable-features=TouchpadOverscrollHistoryNavigation\n```\n\n"
    },
    {
      "title": "Force device scale factor",
      "level": 4,
      "content": "Note: **This article or section is a candidate for merging with HiDPI#Chromium / Google Chrome.** This article or section is a candidate for merging with HiDPI#Chromium / Google Chrome.\n\nThis article or section is a candidate for merging with HiDPI#Chromium / Google Chrome.\n\nTo force a scale factor on native Wayland, use the following flags [10]:\n\n```\n--force-device-scale-factor=1.33 --gtk-version=4 --enable-features=WaylandPerSurfaceScale,WaylandUiScale\n```\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "The following tips and tricks should work for both Chromium and Chrome unless explicitly stated.\n\n"
    },
    {
      "title": "chrome:// URLs",
      "level": 4,
      "content": "A number of tweaks can be accessed via Chrome URLs. See chrome://chrome-urls for a complete list.\n\n- chrome://flags - access experimental features such as WebGL and rendering webpages with GPU, etc.\n- chrome://extensions - view, enable and disable the currently used Chromium extensions.\n- chrome://gpu - status of different GPU options.\n- chrome://sandbox - indicate sandbox status.\n- chrome://version - display version and switches used to invoke the active /usr/bin/chromium.\n\nAn automatically updated, complete listing of Chromium switches (command line parameters) is available here.\n\n"
    },
    {
      "title": "Chromium task manager",
      "level": 4,
      "content": "Shift+ESC can be used to bring up the browser task manager wherein memory, CPU, and network usage can be viewed.\n\n"
    },
    {
      "title": "Chromium overrides/overwrites Preferences file",
      "level": 4,
      "content": "If you enabled syncing with a Google Account, then Chromium will override any direct edits to the Preferences file found under ~/.config/chromium/Default/Preferences. To work around this, start Chromium with the --disable-sync-preferences switch:\n\n```\n$ chromium --disable-sync-preferences\n```\n\nIf Chromium is started in the background when you login in to your desktop environment, make sure the command your desktop environment uses is:\n\n```\n$ chromium --disable-sync-preferences --no-startup-window\n```\n\n"
    },
    {
      "title": "Search engines",
      "level": 4,
      "content": "Make sites like wiki.archlinux.org and wikipedia.org easily searchable by first executing a search on those pages, then going to Settings > Search and click the Manage search engines.. button. From there, \"Edit\" the Wikipedia entry and change its keyword to w (or some other shortcut you prefer). Now searching Wikipedia for \"Arch Linux\" from the address bar is done simply by entering \"w arch linux\".\n\nNote: **?** \n\n"
    },
    {
      "title": "Tmpfs",
      "level": 4,
      "content": "To limit Chromium from writing its cache to a physical disk, one can define an alternative location via the --disk-cache-dir flag:\n\n```\n$ chromium --disk-cache-dir=\"$XDG_RUNTIME_DIR/chromium-cache\"\n```\n\nCache should be considered temporary and will not be saved after a reboot or hard lock. Another option is to setup the space in /etc/fstab:\n\n```\n/etc/fstab\n```\n\n```\ntmpfs\t/home/username/.cache\ttmpfs\tnoatime,nodev,nosuid,size=400M\t0\t0\n```\n\nAlternatively create a symbolic link to /tmp. Make sure to delete Chromium's cache folder before you run the command:\n\n```\n$ ln -s /tmp /home/username/.cache/chromium\n```\n\nRelocate the browser profile to a tmpfs filesystem, including /tmp, or /dev/shm for improvements in application response as the entire profile is now stored in RAM.\n\nUse an active profile management tool such as profile-sync-daemon for maximal reliability and ease of use. It symlinks or bind mounts and syncs the browser profile directories to RAM. For more, see Profile-sync-daemon.\n\n"
    },
    {
      "title": "Launch a new browser instance",
      "level": 4,
      "content": "When you launch the browser, it first checks if another instance using the same data directory is already running. If there is one, the new window is associated with the old instance. If you want to launch an independent instance of the browser, you must specify separate directory using the --user-data-dir parameter:\n\n```\n$ chromium --user-data-dir=/path/to/some/directory\n```\n\n"
    },
    {
      "title": "Directly open *.torrent files and magnet links with a torrent client",
      "level": 4,
      "content": "By default, Chromium downloads *.torrent files directly and you need to click the notification from the bottom-left corner of the screen in order for the file to be opened with your default torrent client. This can be avoided with the following method:\n\n- Download a *.torrent file.\n- Right-click the notification displayed at the bottom-left corner of the screen.\n- Check the \"Always Open Files of This Type\" checkbox.\n\nSee xdg-open to change the default assocation.\n\n"
    },
    {
      "title": "Touch Scrolling on touchscreen devices",
      "level": 4,
      "content": "You may need to specify which touch device to use. Find your touchscreen device with xinput list then launch Chromium with the --touch-devices=x parameter, where \"x\" is the id of your device.\n\n"
    },
    {
      "title": "Reduce memory usage",
      "level": 4,
      "content": "By default, Chromium uses a separate OS process for each instance of a visited web site. [11] However, you can specify command-line switches when starting Chromium to modify this behaviour.\n\nFor example, to share one process for all instances of a website:\n\n```\n$ chromium --process-per-site\n```\n\nTo use a single process model:\n\n```\n$ chromium --single-process\n```\n\nIn addition, you can suspend or store inactive Tabs with extensions such as Tab Suspender and OneTab.\n\n"
    },
    {
      "title": "User Agent",
      "level": 4,
      "content": "The User Agent can be arbitrarily modified at the start of Chromium's base instance via its --user-agent=\"[string]\" parameter.\n\n"
    },
    {
      "title": "DOM Distiller",
      "level": 4,
      "content": "Chromium has a similar reader mode to Firefox. In this case it is called DOM Distiller, which is an open source project. It is disabled by default, but can be enabled using the chrome://flags/#enable-reader-mode flag, which you can also make persistent. Not only does DOM Distiller provide a better reading experience by distilling the content of the page, it also simplifies pages for print. Even though the latter checkbox option has been removed from the print dialog, you can still print the distilled page, which basically has the same effect.\n\nAfter enabling the flag, you will find a new \"Enter reader mode\" menu item and corresponding icon in the address bar when Chromium thinks the website you are visiting could do with some distilling.\n\n"
    },
    {
      "title": "Forcing specific GPU",
      "level": 4,
      "content": "In multi-GPU systems, Chromium automatically detects which GPU should be used for rendering (discrete or integrated). This works 99% of the time, except when it does not - if an unavailable GPU is picked (for example, discrete graphics on VFIO GPU passthrough-enabled systems), chrome://gpu will complain about not being able to initialize the GPU process. On the same page below Driver Information there will be multiple GPUs shown (GPU0, GPU1, ...). There is no way to switch between them in a user-friendly way, but you can read the device/vendor IDs present there and configure Chromium to use a specific GPU with flags:\n\n```\n$ chromium --gpu-testing-vendor-id=0x8086 --gpu-testing-device-id=0x1912\n```\n\n...where 0x8086 and 0x1912 is replaced by the IDs of the GPU you want to use (as shown on the chrome://gpu page).\n\n"
    },
    {
      "title": "Import bookmarks from Firefox",
      "level": 4,
      "content": "To ease the transition, you can import bookmarks from Firefox into Chromium.\n\nNavigate Chromium to chrome://settings/importData\n\nIf Firefox is already installed on your computer, you can directly import bookmarks as well as many other things from Firefox.\n\nMake sure Mozilla Firefox is selected. Optionally, you can uncheck some unwanted items here. Click the Import and then Done. You are done with it.\n\nIf you import bookmarks from another PC, you have to export bookmarks from Firefox first.\n\nCtrl+Shift+o Import and Backup > Export Bookmarks To HTML in Firefox.\n\nThe procedure is pretty much the same. You need to go to chrome://settings/importData. However, this time, in the From drop-down menu, select Bookmarks HTML File and click the Choose File button and upload the desired bookmark file.\n\n"
    },
    {
      "title": "Enabling native notifications",
      "level": 4,
      "content": "Go to chrome://flags#enable-system-notifications and select Enabled.\n\n"
    },
    {
      "title": "Enabling autoscroll with middle mouse button",
      "level": 4,
      "content": "The autoscroll is still an experimental feature [13]. It is intended to be disabled by default if Chromium or Chromium-based browsers are not a development build and is running on a Linux environment. [14]\n\nTo enable this feature, launch your browser with the --enable-features=MiddleClickAutoscroll flag. In case you want to make the option persistent, see #Making flags persistent.\n\n- While setting --enable-blink-features works in the same way as only typing --enable-features, the browser instead may display a warning to state this is an unsupported flag, which \"stability and security will suffer\".\n- As an alternative you can add an extension like WHEELY with similar behavior from Chrome Web Store.\n\n"
    },
    {
      "title": "U2F authentication",
      "level": 4,
      "content": "Install libfido2 library. This provides the udev rules required to enable access to the U2F key as a user. U2F keys are by default only accessible by root, and without these rules Chromium will give an error.\n\n"
    },
    {
      "title": "Theming",
      "level": 4,
      "content": "You can make Chromium use your current GTK theme for browser menus and controls. Simply press Use GTK in chrome://settings/appearance.\n\n"
    },
    {
      "title": "Dark mode",
      "level": 4,
      "content": "Since Chromium 114, XDG Desktop Portal is used to automatically determine the user's preferred appearance (issue), thereby dissociating dark mode enablement from the user's GTK theme. This preference will be applied to prefers-color-scheme in CSS, JavaScript, Settings and Dev-Tools.\n\nThe way to change the preferred appearance depends on your XDG Desktop Portal backend. For instance, many desktop environments have a switch in their appearance settings. Or when using e.g. xdg-desktop-portal-gtk, set the preferred mode to prefer-light, prefer-dark or default with:\n\n```\n$ dconf write /org/gnome/desktop/interface/color-scheme \\'prefer-dark\\'\n```\n\nYou can query the current preferred appearance using dbus-send in dbus (documentation):\n\n```\n$ dbus-send --session --print-reply=literal --dest=org.freedesktop.portal.Desktop /org/freedesktop/portal/desktop org.freedesktop.portal.Settings.Read string:org.freedesktop.appearance string:color-scheme | tr -s ' ' | cut -d ' ' -f 5\n```\n\n- 0: No preference\n- 1: Prefer dark appearance\n- 2: Prefer light appearance\n\nTo enable dark mode and enable the dark theme (normally used for incognito mode) append the following flag to persistent configuration:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--force-dark-mode\n--enable-features=WebUIDarkMode\n```\n\n"
    },
    {
      "title": "Enable Side Panel",
      "level": 4,
      "content": "The Side Panel can be enabled through chrome://flags. You can enable or disable Side panel, and change options such as Side panel border and Side panel drag and drop.\n\n"
    },
    {
      "title": "Profile maintenance",
      "level": 3,
      "content": "Chromium uses SQLite databases to manage history and the like. Sqlite databases become fragmented over time and empty spaces appear all around. But, since there are no managing processes checking and optimizing the database, these factors eventually result in a performance hit. A good way to improve startup and some other bookmarks- and history-related tasks is to defragment and trim unused space from these databases.\n\nprofile-cleaner and browser-vacuumAUR do just this.\n\n"
    },
    {
      "title": "Disable JIT",
      "level": 4,
      "content": "At the cost of reduced performance, you can disable just-in-time compilation of JavaScript to native code, which is responsible for roughly half of the security vulnerabilities in the JS engine, using the flag --js-flags=--jitless.\n\n"
    },
    {
      "title": "WebRTC",
      "level": 4,
      "content": "WebRTC is a communication protocol that relies on JavaScript that can leak one's actual IP address and hardware hash from behind a VPN. While some software may prevent the leaking scripts from running, it is probably a good idea to block this protocol directly as well, just to be safe. As of October 2016, there is no way to disable WebRTC on Chromium on desktop, there are extensions available to disable local IP address leak, one is this extension.\n\nOne can test WebRTC via https://browserleaks.com/webrtc.\n\n"
    },
    {
      "title": "SSL certificates",
      "level": 4,
      "content": "Chromium does not have an SSL certificate manager. It relies on the NSS Shared DB ~/.pki/nssdb. In order to add SSL certificates to the database, users will have to use the shell.\n\nGrab the CAcerts and create an nssdb, if one does not already exist. To do this, first install the nss package, then complete these steps:\n\n```\n$ mkdir -p $HOME/.pki/nssdb\n$ cd $HOME/.pki/nssdb\n$ certutil -N -d sql:.\n```\n\n```\n$ curl -k -o \"cacert-root.crt\" \"http://www.cacert.org/certs/root.crt\"\n$ curl -k -o \"cacert-class3.crt\" \"http://www.cacert.org/certs/class3.crt\"\n$ certutil -d sql:$HOME/.pki/nssdb -A -t TC -n \"CAcert.org\" -i cacert-root.crt \n$ certutil -d sql:$HOME/.pki/nssdb -A -t TC -n \"CAcert.org Class 3\" -i cacert-class3.crt\n```\n\nNow users may manually import a self-signed certificate.\n\nBelow is a simple script that will extract and add a certificate to the user's nssdb:\n\n```\n#!/bin/sh\n#\n# usage:  import-cert.sh remote.host.name [port]\n#\nREMHOST=$1\nREMPORT=${2:-443}\nexec 6>&1\nexec > $REMHOST\necho | openssl s_client -connect ${REMHOST}:${REMPORT} 2>&1 |sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'\ncertutil -d sql:$HOME/.pki/nssdb -A -t \"P,,\" -n \"$REMHOST\" -i $REMHOST \nexec 1>&6 6>&-\n```\n\nSyntax is advertised in the commented lines.\n\nReferences:\n\n- https://web.archive.org/web/20180718193807/https://blog.avirtualhome.com/adding-ssl-certificates-to-google-chrome-linux-ubuntu\n- https://chromium.googlesource.com/chromium/src/+/master/docs/linux/cert_management.md\n\nThe firefox browser can be used to save the certificate to a file for manual import into the database.\n\nUsing firefox:\n\n1. Browse to the target URL.\n1. Upon seeing the \"This Connection is Untrusted\" warning screen, click: I understand the Risks > Add Exception...\n1. Click: View > Details > Export and save the certificate to a temporary location (/tmp/easy.pem in this example).\n\nNow import the certificate for use in Chromium:\n\n```\n$ certutil -d sql:$HOME/.pki/nssdb -A -t TC -n \"easy\" -i /tmp/easy.pem\n```\n\nReference:\n\n- https://sahissam.blogspot.com/2012/06/new-ssl-certificates-for-tomatousb-and.html\n\n"
    },
    {
      "title": "Canvas Fingerprinting",
      "level": 4,
      "content": "Canvas fingerprinting is a technique that allows websites to identify users by detecting differences when rendering to an HTML5 canvas. This information can be made inaccessible by using the --disable-reading-from-canvas flag.\n\nTo confirm this is working run this test and make sure \"hash of canvas fingerprint\" is reported as undetermined in the full results.\n\n- Some extensions require reading from canvas and may be broken by setting --disable-reading-from-canvas.\n- The YouTube player or Google Maps do not work properly without canvas reading (see Qutebrowser issue 5345, BBS#255958, BBS#276425).\n\n"
    },
    {
      "title": "Privacy extensions",
      "level": 4,
      "content": "See Browser extensions#Privacy.\n\n"
    },
    {
      "title": "Do Not Track",
      "level": 4,
      "content": "To enable Do Not Track, visit chrome://settings, scroll down to Advanced and under Privacy and security, check Send a \"Do Not Track\" request with your browsing traffic.\n\n"
    },
    {
      "title": "Force a password store",
      "level": 4,
      "content": "Chromium uses a password store to store your passwords and the Chromium Safe Storage key, which is used to encrypt cookie values. [15]\n\nBy default Chromium auto-detects which password store to use, which can lead to you apparently losing your passwords and cookies when switching to another desktop environment or window manager.\n\nYou can force Chromium to use a specific password store by launching it with the --password-store flag with one of following the values [16]:\n\n- gnome-libsecret, uses Gnome Keyring via libsecret.\n- kwallet5, uses KDE Wallet 5\n- kwallet6, uses KDE Wallet 6\n- basic, saves the passwords and the cookies' encryption key as plain text in the file Login Data\n- detect, the default auto-detect behavior\n\nFor example, to force Chromium to use Gnome Keyring in another desktop or WM use --password-store=gnome-libsecret, see #Making flags persistent for making it permanent.\n\nWhen using a password store of another desktop environment you probably also want to unlock it automatically. See GNOME/Keyring#Using the keyring and KDE Wallet#Unlock KDE Wallet automatically on login.\n\n"
    },
    {
      "title": "Enable hybrid post-quantum key exchange",
      "level": 4,
      "content": "Chromium supports the hybrid post-quantum key exchange X25519Kyber768 for TLS 1.3 since version 155 [17]. This feature is disabled by default, but can be enabled using the chrome://flags/#enable-tls13-kyber flag.\n\n"
    },
    {
      "title": "Tab font size is too large",
      "level": 4,
      "content": "Chromium will use the GTK settings as described in GTK#Configuration. When configured, Chromium will use the gtk-font-name setting for tabs (which may mismatch window font size). To override these settings, use --force-device-scale-factor=1.0.\n\nSince Chrome Refresh 2023 became default, GNOME users with Cantarell font may notice some characters (like lowercase g) cut off in the tab title. See the issue on chromium.org.\n\nUntil the issue resolved, a workaround is to replace Cantarell with another font using a configuration based on Font configuration#Set default or fallback fonts, e.g.\n\n```\n~/.config/fontconfig/conf.d/10-chromium-font.conf\n```\n\n```\n<match target=\"pattern\">\n    <test name=\"prgname\" compare=\"eq\">\n        <string>chromium</string>\n    </test>\n    <test qual=\"any\" name=\"family\">\n         <string>Cantarell</string>\n    </test>\n    <edit name=\"family\" mode=\"assign\" binding=\"strong\">\n        <string>Ubuntu</string>\n    </edit>\n</match>\n```\n\nThis configuration will apply only if process name chromium matches. You can use chrome for Google Chrome.\n\n"
    },
    {
      "title": "WebGL",
      "level": 3,
      "content": "There is the possibility that your graphics card has been blacklisted by Chromium. See #Force GPU acceleration.\n\nIf you are using Chromium with Bumblebee, WebGL might crash due to GPU sandboxing. In this case, you can disable GPU sandboxing with optirun chromium --disable-gpu-sandbox.\n\nVisit chrome://gpu/ for debugging information about WebGL support.\n\nChromium can save incorrect data about your GPU in your user profile (e.g. if you use switch between an Nvidia card using Optimus and Intel, it will show the Nvidia card in chrome://gpu even when you are not using it or primusrun/optirun). Running using a different user directory, e.g, chromium --user-data-dir=$(mktemp -d) may solve this issue. For a persistent solution you can reset the GPU information by deleting ~/.config/chromium/Local\\ State.\n\n"
    },
    {
      "title": "Incorrect HiDPI rendering",
      "level": 3,
      "content": "Chromium will automatically scale for a HiDPI display, however, this may cause an incorrect rendered GUI.\n\nThe flag --force-device-scale-factor=1 may be used to overrule the automatic scaling factor.\n\nWhen native Wayland support is enabled, Chromium will automatically scale based on the configured scale of each monitor.\n\n"
    },
    {
      "title": "Password prompt on every start with GNOME Keyring",
      "level": 3,
      "content": "See GNOME/Keyring#Passwords are not remembered.\n\n"
    },
    {
      "title": "Everything is syncing except for password",
      "level": 3,
      "content": "If synchronization is not working for password only (you can check it on chrome://sync-internals/) delete profile login data:\n\n```\n$ rm ~/.config/chromium/Default/Login\\ Data*\n```\n\nSee Google Chrome Help forum for details.\n\n"
    },
    {
      "title": "Losing cookies and passwords when switching between desktop environments",
      "level": 3,
      "content": "If you see the message Failed to decrypt token for service AccountId-* in the terminal when you start Chromium, it might try to use the wrong password storage backend. This might happen when you switch between Desktop Environments.\n\nSee #Force a password store.\n\n"
    },
    {
      "title": "Hang on startup when Google Sync enabled",
      "level": 3,
      "content": "Try launching Chrome with --password-store=basic or another appropriate password store.\n\nSee #Force a password store.\n\n"
    },
    {
      "title": "Chromium asks to be set as the default browser every time it starts",
      "level": 3,
      "content": "If you are using KDE and have once set Firefox as the default browser (by clicking the button inside Firefox), you might find Chromium asks to be set as the default browser every time it starts, even if you click the \"set as default\" button.\n\nChromium checks for this status by running xdg-settings check default-web-browser chromium.desktop. If the output is \"no\", it is not considering itself to be the default browser. The script xdg-settings checks for the following MIME associations and expect all of them to be chromium.desktop:\n\n```\nx-scheme-handler/http\nx-scheme-handler/https\ntext/html\n```\n\nTo fix it, go to System settings > Applications > Default applications > Web browser and choose Chromium. Then, set the MIME association for text/html:\n\n```\n$ xdg-mime default chromium.desktop text/html\n```\n\nFinally, update the MIME database:\n\n```\n$ update-mime-database ~/.local/share/mime\n```\n\n"
    },
    {
      "title": "\"This browser or app may not be secure\" error logging in to Google",
      "level": 3,
      "content": "As of 2020.04.20 if you run chromium with --remote-debugging-port=9222 flag for web development, you cannot log in to your Google account. Temporarily disable this flag to login and then you can enable it back.\n\n"
    },
    {
      "title": "Chromium rendering at 60 FPS despite using a display with a higher refresh rate",
      "level": 3,
      "content": "Upstream bug report about the general issue which may contain some additional workarounds can be found here, and a sister issue about mixed refresh rates here.\n\n"
    },
    {
      "title": "Mixed refresh rates",
      "level": 4,
      "content": "When using displays with mixed refresh rates(for example 60Hz and 144Hz), Chromium might render for the lower Hz display.\n\nThere is a suitable workaround for this issue, append the following flags to persistent configuration:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--use-gl=egl\n--ignore-gpu-blocklist\n--enable-gpu-rasterization\n```\n\nThis should make Chromium run at 144 FPS when used on a 144Hz display, assuming your compositor is also refreshing at 144 FPS. Keep in mind it might be a little choppy due to FS#67035, but it is way better than being stuck at 60 FPS.\n\n"
    },
    {
      "title": "Running on the Wayland backend",
      "level": 4,
      "content": "There seem to be Wayland compositor-specific problems that trigger this issue. Notably, Plasma 5 seems to only ever render on 60Hz no matter the setup, but Plasma 6(rc1, at the time of writing) makes Chromium work flawlessly on high refresh rates.\n\nA workaround may be to switch to the XWayland backend if all else fails.\n\n"
    },
    {
      "title": "Chromium slow scroll speed",
      "level": 3,
      "content": "Mouse whell scrolling in chromium and electron based applications may be too slow for daily usage. Here are some solutions.\n\nLibinput#Mouse wheel scrolling speed scaling injects libinput_event_pointer_get_axis_value function in libinput and provides an interface to change scale factor. This is not an application level injection, so an addition script for application specific scale factor tuning is needed. Note that scroll on chromium's small height developer tools may be too fast when scale factor is big enough.\n\nIMWheel increases scroll distance by replaying X wheel button event for multiple times. However, chromium assumes the real scroll and the replayed ones as two events. There is a small but noticeable delay between them, so one mouse wheel scroll leads to twice page jumps. Also, touchpad scroll needs additional care.\n\nLinux Scroll Speed Fix and SmoothScroll are two chromium extensions with support for scroll distance modification. Upon wheel scroll in a web page, the closest scrollable ancestor of current focused node will be found, then a scroll method with given pixel distance will be called on it, even if it has been scrolled to bottom. So once you scroll into a text editor or any scrollable element, you can never scroll out of it, except moving mouse. Also, extension based methods can not be used outside chromium.\n\n"
    },
    {
      "title": "Videos load but do not play",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nThis may be a PulseAudio issue. See the suggested fix in PulseAudio/Troubleshooting#Browsers (firefox) load videos but do no play.\n\n"
    },
    {
      "title": "Passwords are not saved due to a corrupted database",
      "level": 3,
      "content": "The stored password database can become corrupted and in need of getting rebuilt. Doing so will destroy all data therein/lose stored passwords.\n\nLaunch chromium from a terminal and look for output like:\n\n```\n[472531:472565:1207/055404.688559:ERROR:login_database.cc(1048)] Password decryption failed, encryption_result is 2\n```\n\nExit chromium and then delete these three database files: ~/.config/chromium/Default/Login Data*\n\nLaunching chromium again should re-create them.\n\n"
    },
    {
      "title": "Cursor is not correct on KDE Wayland",
      "level": 3,
      "content": "See KDE#Plasma cursor sometimes shown incorrectly.\n\n"
    },
    {
      "title": "Chromium window is transparent under Wayland",
      "level": 3,
      "content": "Due to a bug, chromium 124 must be started with the explicit command line flag --ozone-platform=wayland.\n\n"
    },
    {
      "title": "Wayland hardware acceleration buffer handle is null errors",
      "level": 3,
      "content": "Due to a bug, you may see the below in your log when launching from terminal, especially with hardware acceleration enabled on Wayland:\n\n```\n[333310:333425:0919/121130.103852:ERROR:gpu_channel.cc(502)] Buffer Handle is null.\n[333341:18:0919/121130.104000:ERROR:shared_image_interface_proxy.cc(134)] Buffer handle is null. Not creating a mailbox from it.\n[333310:333425:0919/121130.137149:ERROR:gbm_pixmap_wayland.cc(82)] Cannot create bo with format= YUV_420_BIPLANAR and usage=SCANOUT_CPU_READ_WRITE\n```\n\nWorkaround for now is adding this flag:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--disable-gpu-memory-buffer-video-frames\n```\n\n"
    },
    {
      "title": "No audio available without sound server",
      "level": 3,
      "content": "Chromium does not support Advanced Linux Sound Architecture#Addressing hardware directly. Set output device to pcm.dmixer for mixing and use the --alsa-output-device=pcm.dmixer flag.\n\n"
    },
    {
      "title": "Gnome \"Global Shortcuts\" menu appears on startup",
      "level": 3,
      "content": "Due to extensions which define global shortcuts (such as obsidian web clipper), the gnome \"Global Shortcuts\" appears at startup. This is described in https://github.com/brave/brave-browser/issues/44886 and can be fixed by adding this flag:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--disable-features=GlobalShortcutsPortal\n```\n\n"
    },
    {
      "title": "Compose key does not work: Typing special characters with keyboard not possible",
      "level": 3,
      "content": "Due to a bug the \"Compose\" key does not work in recent versions of chromium. This becomes apparent when user tries to type in special characters such as `@` or umlauts anywhere in the browser. The special key combinations utilizing the compose key (for example `ALT GR`) work in all applications except chromium. This issue is most likely related to gtk and cannot be resolved by switching between Wayland and X11. It is described at https://issues.chromium.org/issues/327158031 and can be fixed by adding this flag:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--disable-gtk-ime\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Chromium homepage\n- Google Chrome release notes\n- Chrome web store\n- Differences between Chromium and Google Chrome\n- List of Chromium command-line switches\n- Profile-sync-daemon - Systemd service that saves Chromium profile in tmpfs and syncs to disk\n- Tmpfs - Tmpfs Filesystem in /etc/fstab\n- Official tmpfs kernel Documentation\n\n"
    }
  ]
}