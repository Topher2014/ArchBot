{
  "title": "Demlo",
  "url": "https://wiki.archlinux.org/title/Demlo",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Demlo is a batch music tagger and library organizer powered by Lua and FFmpeg. It supports transcoding, case checking, cue sheets, online tagging with MusicBrainz, manual tag editing with your favorite editor, cover downloading and processing, and more.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the demloAUR package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The package provides a sample configuration. It is a good idea to start from there:\n\n```\n$ install -Dm644 /usr/share/demlo/demlorc -t ~/.config/demlo\n```\n\n"
    },
    {
      "title": "Scripts",
      "level": 2,
      "content": "Demlo runs a chain of Lua scripts of the files passed as arguments. You can select which scripts from the configuration file or at run-time.\n\nEach script can access an input table and modify an output table with information such as the path, tags, covers and encoding properties.\n\nDemlo comes with its set of official scripts to choose from.\n\nIf you want to write a temporary script (for instance a script that makes sense for one album only), you can create a script in the local folder, call it from command line, then remove it.\n\nFor more persistent user scripts, you can store them in Demlo's configuration folder.\n\nYou can derive your scripts from the official ones as for the configuration:\n\n```\n$ install -Dm644 /usr/share/demlo/scripts/tag.lua -t ~/.config/demlo/scripts/\n```\n\nThe user script folder has precedence over the system script folder: if two scripts share the same basename, the user script will be used.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "By default Demlo only previews changes. Use the -p commandline flag to confirm processing.\n\nSee demlo -h for all options and parameters, the demlo manual is also available.\n\nUsage examples:\n\nRun Demlo over a set of file to preview the changes:\n\n```\n$ demlo *.ogg album/ other-album/*.flac\n```\n\nSet the script chain to change the result:\n\n```\n$ demlo -s tag -s ./my-script.lua -s encoding input-files\n```\n\nIf you need fine-grained tuning, you can run Lua commands before and after the script chain from command line:\n\n```\n$ demlo -pre 'o.artist=\"John Doe\";o.disc=output.filename:match(\"Disc (\\d+)\")' -post 'output.format=\"ogg\"' input-files\n```\n\nTo process the files, use the -p parameter. Demlo uses all available cores by default. You can restrict it:\n\n```\n$ demlo -cores 2 -p input-files\n```\n\nIf you just want to fetch covers online:\n\n```\n$ demlo -c -s cover -s 90-rmsrc -p input-files\n```\n\nIf you want to edit tags or properties manually (in case scripts would not be able to fix them automatically), you can export the changes to an index file:\n\n```\n$ demlo some-tuning input-files >> ./index.json\n```\n\nYou can stack different output to the same index file, Demlo does not mind. You can edit this file with your favorite editor. To apply the changes, call Demlo over the desired set of files with the -i option. Scripts can still be called or they can be left out if you do not want to perform any additional change.\n\n```\n$ demlo -i ./index.json -r '' -post 'o.artist,o.album_artist=o.album_artist,artist' input-files\n```\n\nIndex files can be used to interface Demlo with other programs, both as input and output.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Arch Linux forum thread\n- Development page\n\n"
    }
  ]
}