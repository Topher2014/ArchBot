{
  "title": "Bisecting Mesa",
  "url": "https://wiki.archlinux.org/title/Bisecting_Mesa",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Often when reporting bugs encountered with projects such as Mesa or Linux kernel, a user may be asked to bisect between the last known version that worked for them and the newer version which is causing them problems in order to see what is the troublesome commit. On Arch this can be done fairly trivially thanks to the functionality of the AUR.\n\n"
    },
    {
      "title": "Reverting to an older release",
      "level": 2,
      "content": "It might be useful to confirm that it is the new package release that is causing the problem. Downgrading packages on Arch can be accomplished trivially as long as an older version of the package is still stored as cache on your system, or you can use Arch Linux Archive.\n\n"
    },
    {
      "title": "Building package from git",
      "level": 2,
      "content": "In order to bisect we are going to need to build a version of package from git. This can be accomplished by building the -git package from the AUR.\n\n"
    },
    {
      "title": "Setting up the bisect",
      "level": 2,
      "content": "Once package is successfully built you need to change into the git root directory in the src/ directory. The name of the git root directory is often the same as pkgname (or without the -git suffix):\n\n```\n$ cd src/git_root\n```\n\nFrom there you can start the process of bisecting:\n\n```\n$ git bisect start\n```\n\nThe following command will show you all the tags you can use to specify where to bisect:\n\n```\n$ git tag\n```\n\nFollowing on from the earlier example, we will assume that the version oldver worked for us while newver did not:\n\n```\n$ git bisect good oldver\n$ git bisect bad newver\n```\n\nNow that we have our good and bad versions tagged we can proceed to test commits.\n\n"
    },
    {
      "title": "Bisecting",
      "level": 2,
      "content": "Change back into the directory with the PKGBUILD. If you are still in the directory mentioned in the previous section this can be accomplished like so:\n\n```\n$ cd ../..\n```\n\nYou can now rebuild and install the specific revision of the package:\n\n```\n$ makepkg -efsi\n```\n\nOnce the new package is installed you can test for your previously discovered error. Return to the directory you were in the previous section:\n\n```\n$ cd src/git_root\n```\n\nIf you encountered your problem, tell that the revision was bad:\n\n```\n$ git bisect bad\n```\n\nIf you did not encounter your problem, tell that the revision it was good:\n\n```\n$ git bisect good\n```\n\nThen do as described at the beginning of this section again and repeat until git bisect names the troublesome commit.\n\n- You may need to run a make clean after issuing the git bisect command.\n- It will actually count down the number of steps all the way down to zero, so it is important not to stop until it actually names the first bad commit.\n\n"
    },
    {
      "title": "Ccache",
      "level": 3,
      "content": "If you are bisecting a large project built using gcc, it might be possible to reduce build times by enabling ccache. It may take several build iterations before you start to see benefits from the cache, however. The likelihood of cache hits generally increases as the distance between bisection points decreases.\n\n"
    },
    {
      "title": "Restoring package",
      "level": 2,
      "content": "Reverting to an original version of the package can be done by installing the package from repositories with pacman.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Fighting regressions with git bisect\n- git-bisect(1)\n- Gentoo:Kernel git-bisect\n\n"
    }
  ]
}