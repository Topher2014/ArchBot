{
  "title": "Wg",
  "url": "https://wiki.archlinux.org/title/Wg",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Linux Containers/Using VPNs\n\nFrom the WireGuard project homepage:\n\nA rough introduction to the main concepts used in this article can be found on WireGuard's project homepage. WireGuard has been included in the Linux kernel since late 2019.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the wireguard-tools package for userspace utilities.\n\nAlternatively, various network managers provide support for WireGuard, provided that peer keys are available. See #Persistent configuration for details.\n\n"
    },
    {
      "title": "Graphical clients",
      "level": 3,
      "content": "- wireguird — A linux GTK GUI client for WireGuard.\n\n"
    },
    {
      "title": "Command-line tools",
      "level": 3,
      "content": "- wg_tool — Tool to manage wireguard configs for server and users.\n\n- wg-client — Linux client with both command line and GUI.\n\n- wg2nd — A tool to convert WireGuard configurations from wg-quick(8) format into systemd-networkd compatible configurations.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThe commands below demonstrate how to set up a basic tunnel between two or more peers with the following settings:\n\nTable content:\n | External (public) addresses | Internal IP addresses | Port\nDomain name | IPv4 address | IPv6 address | IPv4 address | IPv6 address\nPeer A |  | 198.51.100.101 | 2001:db8:a85b:70a:ffd4:ec1b:4650:a001 | 10.0.0.1/24 | fdc9:281f:04d7:9ee9::1/64 | UDP/51871\nPeer B | peer-b.example | 203.0.113.102 | 2001:db8:40f0:147a:80ad:3e88:f8e9:b002 | 10.0.0.2/24 | fdc9:281f:04d7:9ee9::2/64 | UDP/51902\nPeer C |  | dynamic | dynamic | 10.0.0.3/24 | fdc9:281f:04d7:9ee9::3/64 | UDP/51993\n\nThe external addresses should already exist. For example, if ICMP echo requests are not blocked, peer A should be able to ping peer B via its public IP address(es) and vice versa.\n\nThe internal addresses will be new addresses, created either manually using the ip(8) utility or by network management software, which will be used internally within the new WireGuard network. The following examples will use 10.0.0.0/24 and fdc9:281f:04d7:9ee9::/64 as the internal network. The /24 and /64 in the IP addresses is the CIDR.\n\n"
    },
    {
      "title": "Key generation",
      "level": 3,
      "content": "Create a private and public key for each peer. If connecting dozens of peers optionally consider a vanity keypair to personalize the Base64 encoded public key string. See #Vanity keys.\n\nTo create a private key run:\n\n```\n$ (umask 0077; wg genkey > peer_A.key)\n```\n\nTo create a public key:\n\n```\n$ wg pubkey < peer_A.key > peer_A.pub\n```\n\nAlternatively, do this all at once:\n\n```\n$ wg genkey | (umask 0077 && tee peer_A.key) | wg pubkey > peer_A.pub\n```\n\nOne can also generate a pre-shared key to add an additional layer of symmetric-key cryptography to be mixed into the already existing public-key cryptography, for post-quantum resistance. A pre-shared key should be generated for each peer pair and should not be reused. For example, three interconnected peers, A, B, and, C will need three separate pre-shared keys, one for each peer pair.\n\nGenerate a pre-shared key for each peer pair using the following command (make sure to use umask 0077 for this as well):\n\n```\n$ wg genpsk > peer_A-peer_B.psk\n$ wg genpsk > peer_A-peer_C.psk\n$ wg genpsk > peer_B-peer_C.psk\n```\n\n"
    },
    {
      "title": "Vanity keys",
      "level": 4,
      "content": "Currently, WireGuard does not support comments or attaching human-memorable names to keys. This makes identifying the key's owner difficult particularly when multiple keys are in use. One solution is to generate a public key that contains some familiar characters (perhaps the first few letters of the owner's name or of the hostname etc.), wireguard-vanity-address, or alternatively wicuvanityAUR do this.\n\nFor example:\n\n```\n$ wireguard-vanity-address --in 8 leslie\n```\n\n```\nsearching for 'leslie' in pubkey[0..10], one of every 214748364 keys should match\none core runs at 2.69e6 keys/s, CPU cores available: 16\nest yield: 5.0 seconds per key, 200.10e-3 keys/s\nhit Ctrl-C to stop\nprivate wEoVMj92P+E3fQXVf9IixWJqpCqcnP/4OfvrB1g3zmY=  public LEsliEny+aMcWcRbh8Qf414XsQHSBOAFk3TaEk/aSD0=\nprivate EAOwlGGqpHVbZ9ehaCspdBJt+lkMcCfkwiA5T5a4JFs=  public VlesLiEB5BFd//OD2ILKXviolfz+hodG6uZ+XjoalC8=\nprivate UDWG4VWI+RzAGzNSnlC+0X4d3nk9goWPs/NRC5tX524=  public 9lESlieIFOlJFV6dG7Omao2WS+amWgshDdBYn8ahRjo=\n```\n\n"
    },
    {
      "title": "Peer setup",
      "level": 4,
      "content": "Manual setup is accomplished by using ip(8) and wg(8).\n\nPeer A setup:\n\nIn this example, peer A will listen on UDP port 51871 and will accept connection from peers B and C.\n\n```\n# ip link add dev wg0 type wireguard\n# ip addr add 10.0.0.1/24 dev wg0\n# ip addr add fdc9:281f:04d7:9ee9::1/64 dev wg0\n# wg set wg0 listen-port 51871 private-key /path/to/peer_A.key\n# wg set wg0 peer PEER_B_PUBLIC_KEY preshared-key /path/to/peer_A-peer_B.psk endpoint peer-b.example:51902 allowed-ips 10.0.0.2/32,fdc9:281f:04d7:9ee9::2/128\n# wg set wg0 peer PEER_C_PUBLIC_KEY preshared-key /path/to/peer_A-peer_C.psk allowed-ips 10.0.0.3/32,fdc9:281f:04d7:9ee9::3/128\n# ip link set wg0 up\n```\n\nPEER_X_PUBLIC_KEY should be the contents of peer_X.pub.\n\nThe keyword allowed-ips is a list of addresses that will get routed to the peer. Make sure to specify at least one address range that contains the WireGuard connection's internal IP address(es).\n\nPeer B setup:\n\n```\n# ip link add dev wg0 type wireguard\n# ip addr add 10.0.0.2/24 dev wg0\n# ip addr add fdc9:281f:04d7:9ee9::2/64 dev wg0\n# wg set wg0 listen-port 51902 private-key /path/to/peer_B.key\n# wg set wg0 peer PEER_A_PUBLIC_KEY preshared-key /path/to/peer_A-peer_B.psk endpoint 198.51.100.101:51871 allowed-ips 10.0.0.1/32,fdc9:281f:04d7:9ee9::1/128\n# wg set wg0 peer PEER_C_PUBLIC_KEY preshared-key /path/to/peer_B-peer_C.psk allowed-ips 10.0.0.3/32,fdc9:281f:04d7:9ee9::3/128\n# ip link set wg0 up\n```\n\nPeer C setup:\n\n```\n# ip link add dev wg0 type wireguard\n# ip addr add 10.0.0.3/24 dev wg0\n# ip addr add fdc9:281f:04d7:9ee9::3/64 dev wg0\n# wg set wg0 listen-port 51993 private-key /path/to/peer_C.key\n# wg set wg0 peer PEER_A_PUBLIC_KEY preshared-key /path/to/peer_A-peer_C.psk endpoint 198.51.100.101:51871 allowed-ips 10.0.0.1/32,fdc9:281f:04d7:9ee9::1/128\n# wg set wg0 peer PEER_B_PUBLIC_KEY preshared-key /path/to/peer_B-peer_C.psk endpoint peer-b.example:51902 allowed-ips 10.0.0.2/32,fdc9:281f:04d7:9ee9::2/128\n# ip link set wg0 up\n```\n\n"
    },
    {
      "title": "Additional routes",
      "level": 4,
      "content": "To establish connections more complicated than point-to-point, additional setup is necessary.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nTo access the network of a peer, specify the network subnet(s) in allowed-ips in the configuration of the peers who should be able to connect to it. E.g. allowed-ips 10.0.0.2/32,fdc9:281f:04d7:9ee9::2/128,192.168.35.0/24,fd7b:d0bd:7a6e::/64.\n\nMake sure to also set up the routing table with ip-route(8). E.g.:\n\n```\n# ip route add 192.168.35.0/24 dev wg0\n# ip route add fd7b:d0bd:7a6e::/64 dev wg0\n```\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nIf the intent is to connect a device to a network with WireGuard peer(s), set up routes on each device so they know that the peer(s) are reachable via the device.\n\nAfter that, enable IP forwarding on the peer through which other devices on the network will connect to WireGuard peer(s).\n\nTo connect two (or more) networks, apply both #Point-to-site and #Site-to-point on all sites.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nTo route all traffic through a peer, add the default route to allowed-ips, i.e. allowed-ips 0.0.0.0/0,::/0.\n\n"
    },
    {
      "title": "DNS",
      "level": 4,
      "content": "To use a peer as a DNS server, add its WireGuard tunnel IP address(es) to /etc/resolv.conf. For example, to use peer B as the DNS server:\n\n```\n/etc/resolv.conf\n```\n\n```\nnameserver fdc9:281f:04d7:9ee9::2\nnameserver 10.0.0.2\n```\n\n"
    },
    {
      "title": "Basic checkups",
      "level": 3,
      "content": "Invoking the wg(8) command without parameters will give a quick overview of the current configuration.\n\nAs an example, when peer A has been configured we are able to see its identity and its associated peers:\n\n```\n# wg\n```\n\n```\ninterface: wg0\n  public key: UguPyBThx/+xMXeTbRYkKlP0Wh/QZT3vTLPOVaaXTD8=\n  private key: (hidden)\n  listening port: 51871\n\npeer: 9jalV3EEBnVXahro0pRMQ+cHlmjE33Slo9tddzCVtCw=\n  endpoint: 203.0.113.102:51902\n  allowed ips: 10.0.0.2/32, fdc9:281f:04d7:9ee9::2\n\npeer: 2RzKFbGMx5g7fG0BrWCI7JIpGvcwGkqUaCoENYueJw4=\n  endpoint: 192.0.2.103:51993\n  allowed ips: 10.0.0.3/32, fdc9:281f:04d7:9ee9::3\n```\n\nAt this point one could reach the end of the tunnel. If the peers do not block ICMP echo requests, try pinging a peer to test the connection between them.\n\nUsing ICMPv4:\n\n```\n$ ping 10.0.0.2\n```\n\nUsing ICMPv6:\n\n```\n$ ping fdc9:281f:04d7:9ee9::2\n```\n\nAfter transferring some data between peers, the wg utility will show additional information:\n\n```\n# wg\n```\n\n```\ninterface: wg0\n  public key: UguPyBThx/+xMXeTbRYkKlP0Wh/QZT3vTLPOVaaXTD8=\n  private key: (hidden)\n  listening port: 51871\n\npeer: 9jalV3EEBnVXahro0pRMQ+cHlmjE33Slo9tddzCVtCw=\n  endpoint: 203.0.113.102:51902\n  allowed ips: 10.0.0.2/32, fdc9:281f:04d7:9ee9::2\n  latest handshake: 5 seconds ago\n  transfer: 1.24 KiB received, 1.38 KiB sent\n\npeer: 2RzKFbGMx5g7fG0BrWCI7JIpGvcwGkqUaCoENYueJw4=\n  allowed ips: 10.0.0.3/32, fdc9:281f:04d7:9ee9::3\n```\n\n"
    },
    {
      "title": "Persistent configuration",
      "level": 3,
      "content": "Persistent configuration can be achieved using wg-quick@.service, which is shipped with wireguard-tools, or using a network manager. Network managers that support WireGuard are systemd-networkd, netctl[2], NetworkManager and ConnMan[3].\n\n- netctl relies on wg(8) from wireguard-tools and /etc/wireguard/interfacename.conf configuration files for establishing WireGuard connections.\n- ConnMan has a very limited support for WireGuard. It can connect to only one peer.[4]\n\n"
    },
    {
      "title": "wg-quick",
      "level": 4,
      "content": "wg-quick(8) configures WireGuard tunnels using configuration files from /etc/wireguard/interfacename.conf.\n\nThe current WireGuard configuration can be saved by utilizing the wg(8) utility's showconf command. For example:\n\n```\n# wg showconf wg0 > /etc/wireguard/wg0.conf\n```\n\nTo start a tunnel with a configuration file, use\n\n```\n# wg-quick up interfacename\n```\n\nor use the systemd service—wg-quick@interfacename.service. To start the tunnel at boot, enable the unit.\n\n- Users configuring the WireGuard interface using wg-quick, should make sure that no other network management software tries to manage it. To use NetworkManager and to not configure WireGuard interfaces with it, see #Routes are periodically reset.\n- wg-quick adds additional configuration options to the configuration file format thus making it incompatible with wg(8) § CONFIGURATION FILE FORMAT. See the wg-quick(8) § CONFIGURATION man page for the configuration values in question. A wg-compatible configuration file can be produced by using wg-quick strip.\n- wg-quick does not provide a way to instruct resolvconf to set the WireGuard interface as private. Even if there are search domains specified, all DNS queries from the system, not just those that match the search domains, will be sent to the DNS servers which are set in the WireGuard configuration.\n\nPeer A setup:\n\n```\n/etc/wireguard/wg0.conf\n```\n\n```\n[Interface]\nAddress = 10.0.0.1/24, fdc9:281f:04d7:9ee9::1/64\nListenPort = 51871\nPrivateKey = PEER_A_PRIVATE_KEY\n\n[Peer]\nPublicKey = PEER_B_PUBLIC_KEY\nPresharedKey = PEER_A-PEER_B-PRESHARED_KEY\nAllowedIPs = 10.0.0.2/32, fdc9:281f:04d7:9ee9::2/128\nEndpoint = peer-b.example:51902\n\n[Peer]\nPublicKey = PEER_C_PUBLIC_KEY\nPresharedKey = PEER_A-PEER_C-PRESHARED_KEY\nAllowedIPs = 10.0.0.3/32, fdc9:281f:04d7:9ee9::3/128\n```\n\n- To route all traffic through the tunnel to a specific peer, add the default route (0.0.0.0/0 for IPv4 and ::/0 for IPv6) to AllowedIPs. E.g. AllowedIPs = 0.0.0.0/0, ::/0. wg-quick will automatically take care of setting up correct routing and fwmark[5] so that networking still functions.\n- To use a peer as a DNS server, set DNS = wireguard_internal_ip_address_of_peer in the [Interface] section. Search domains are also set with the DNS = option. Separate all values in the list with commas.\n\nPeer B setup:\n\n```\n/etc/wireguard/wg0.conf\n```\n\n```\n[Interface]\nAddress = 10.0.0.2/24, fdc9:281f:04d7:9ee9::2/64\nListenPort = 51902\nPrivateKey = PEER_B_PRIVATE_KEY\n\n[Peer]\nPublicKey = PEER_A_PUBLIC_KEY\nPresharedKey = PEER_A-PEER_B-PRESHARED_KEY\nAllowedIPs = 10.0.0.1/32, fdc9:281f:04d7:9ee9::1/128\nEndpoint = 198.51.100.101:51871\n\n[Peer]\nPublicKey = PEER_C_PUBLIC_KEY\nPresharedKey = PEER_B-PEER_C-PRESHARED_KEY\nAllowedIPs = 10.0.0.3/32, fdc9:281f:04d7:9ee9::3/128\n```\n\nPeer C setup:\n\n```\n/etc/wireguard/wg0.conf\n```\n\n```\n[Interface]\nAddress = 10.0.0.3/24, fdc9:281f:04d7:9ee9::3/64\nListenPort = 51993\nPrivateKey = PEER_C_PRIVATE_KEY\n\n[Peer]\nPublicKey = PEER_A_PUBLIC_KEY\nPresharedKey = PEER_A-PEER_C-PRESHARED_KEY\nAllowedIPs = 10.0.0.1/32, fdc9:281f:04d7:9ee9::1/128\nEndpoint = 198.51.100.101:51871\n\n[Peer]\nPublicKey = PEER_B_PUBLIC_KEY\nPresharedKey = PEER_B-PEER_C-PRESHARED_KEY\nAllowedIPs = 10.0.0.2/32, fdc9:281f:04d7:9ee9::2/128\nEndpoint = peer-b.example:51902\n```\n\n"
    },
    {
      "title": "systemd-networkd",
      "level": 4,
      "content": "systemd-networkd has native support for setting up WireGuard interfaces. An example is provided in the systemd.netdev(5) § EXAMPLES man page.\n\nPeer A setup:\n\n```\n/etc/systemd/network/99-wg0.netdev\n```\n\n```\n[NetDev]\nName=wg0\nKind=wireguard\nDescription=WireGuard tunnel wg0\n\n[WireGuard]\nListenPort=51871\nPrivateKey=PEER_A_PRIVATE_KEY\n\n[WireGuardPeer]\nPublicKey=PEER_B_PUBLIC_KEY\nPresharedKey=PEER_A-PEER_B-PRESHARED_KEY\nAllowedIPs=10.0.0.2/32,fdc9:281f:04d7:9ee9::2/128\nEndpoint=peer-b.example:51902\n\n[WireGuardPeer]\nPublicKey=PEER_C_PUBLIC_KEY\nPresharedKey=PEER_A-PEER_C-PRESHARED_KEY\nAllowedIPs=10.0.0.3/32,fdc9:281f:04d7:9ee9::3/128\n```\n\n```\n/etc/systemd/network/99-wg0.network\n```\n\n```\n[Match]\nName=wg0\n\n[Network]\nAddress=10.0.0.1/24\nAddress=fdc9:281f:04d7:9ee9::1/64\n```\n\n- To use a peer as a DNS server, specify its WireGuard tunnel's IP address(es) in the .network file using the DNS= option. For search domains use the Domains= option. See systemd.network(5) § [NETWORK] SECTION OPTIONS for details.\n- To use a peer as the only DNS server set DNSDefaultRoute=true and Domains=~. in the [Network] section of .network file's.\n- To automatically create routes for everything in AllowedIPs, add RouteTable=main to the [WireGuard] or [WireGuardPeer] sections in the .netdev file. Alternatively, additional routes can be specified manually using [Route] sections in the .network file.\n\nNote: Alternatively, the keys can be stored in separate files and referenced with PrivateKeyFile=, PresharedKeyFile= and PublicKeyFile=, or they can be stored encrypted using systemd-creds. See #Using systemd credentials for private keys (systemd-networkd).\n\n```\n# chown root:systemd-network /etc/systemd/network/99-wg*.netdev\n# chmod 0640 /etc/systemd/network/99-wg*.netdev\n```\n\nAlternatively, the keys can be stored in separate files and referenced with PrivateKeyFile=, PresharedKeyFile= and PublicKeyFile=, or they can be stored encrypted using systemd-creds. See #Using systemd credentials for private keys (systemd-networkd).\n\n```\n/etc/systemd/network/99-wg0.network\n```\n\n```\n...\n[Address]\nAddress=10.0.0.1/24\nNFTSet=address:inet:my_table:wg_ipv4_address\nNFTSet=prefix:inet:my_table:wg_ipv4_prefix\nNFTSet=ifindex:inet:my_table:wg_ifindex\n\n[Address]\nAddress=fdc9:281f:04d7:9ee9::1/64\nNFTSet=address:inet:my_table:wg_ipv6_address\nNFTSet=prefix:inet:my_table:wg_ipv6_prefix\nNFTSet=ifindex:inet:my_table:wg_ifindex\n```\n\nPeer B setup:\n\n```\n/etc/systemd/network/99-wg0.netdev\n```\n\n```\n[NetDev]\nName=wg0\nKind=wireguard\nDescription=WireGuard tunnel wg0\n\n[WireGuard]\nListenPort=51902\nPrivateKey=PEER_B_PRIVATE_KEY\n\n[WireGuardPeer]\nPublicKey=PEER_A_PUBLIC_KEY\nPresharedKey=PEER_A-PEER_B-PRESHARED_KEY\nAllowedIPs=10.0.0.1/32,fdc9:281f:04d7:9ee9::1/128\nEndpoint=198.51.100.101:51871\n\n[WireGuardPeer]\nPublicKey=PEER_C_PUBLIC_KEY\nPresharedKey=PEER_B-PEER_C-PRESHARED_KEY\nAllowedIPs=10.0.0.3/32,fdc9:281f:04d7:9ee9::3/128\n```\n\n```\n/etc/systemd/network/99-wg0.network\n```\n\n```\n[Match]\nName=wg0\n\n[Network]\nAddress=10.0.0.2/24\nAddress=fdc9:281f:04d7:9ee9::2/64\n```\n\nPeer C setup:\n\n```\n/etc/systemd/network/99-wg0.netdev\n```\n\n```\n[NetDev]\nName=wg0\nKind=wireguard\nDescription=WireGuard tunnel wg0\n\n[WireGuard]\nListenPort=51993\nPrivateKey=PEER_C_PRIVATE_KEY\n\n[WireGuardPeer]\nPublicKey=PEER_A_PUBLIC_KEY\nPresharedKey=PEER_A-PEER_C-PRESHARED_KEY\nAllowedIPs=10.0.0.1/32,fdc9:281f:04d7:9ee9::1/128\nEndpoint=198.51.100.101:51871\n\n[WireGuardPeer]\nPublicKey=PEER_B_PUBLIC_KEY\nPresharedKey=PEER_B-PEER_C-PRESHARED_KEY\nAllowedIPs=10.0.0.2/32,fdc9:281f:04d7:9ee9::2/128\nEndpoint=peer-b.example:51902\n```\n\n```\n/etc/systemd/network/99-wg0.network\n```\n\n```\n[Match]\nName=wg0\n\n[Network]\nAddress=10.0.0.3/24\nAddress=fdc9:281f:04d7:9ee9::3/64\n```\n\n"
    },
    {
      "title": "systemd-networkd: routing all traffic over WireGuard",
      "level": 4,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nIn this example, Peer B connects to Peer A with a public IP address. Peer B routes all its traffic over the WireGuard tunnel and uses Peer A for handling DNS requests.\n\nPeer A setup\n\n```\n/etc/systemd/network/99-wg0.netdev\n```\n\n```\n[NetDev]\nName=wg0\nKind=wireguard\nDescription=WireGuard tunnel wg0\n\n[WireGuard]\nListenPort=51871\nPrivateKey=PEER_A_PRIVATE_KEY\n\n[WireGuardPeer]\nPublicKey=PEER_B_PUBLIC_KEY\nPresharedKey=PEER_A-PEER_B-PRESHARED_KEY\nAllowedIPs=10.0.0.2/32\n```\n\n```\n/etc/systemd/network/99-wg0.network\n```\n\n```\n[Match]\nName=wg0\n\n[Network]\nAddress=10.0.0.1/24\nIPMasquerade=ipv4\n```\n\n- Enable IP forwarding for the interface that is used for connecting to the Internet (i.e. add IPv4Forwarding=yes to its .network file).\n- Make sure that the firewall does not block forwarding.\n- Configure the local DNS server to accept connections to the WireGuard interface IP address. For systemd-resolved see systemd-resolved#Additional listening interfaces.\n\nPeer B setup:\n\n```\n/etc/systemd/network/99-wg0.netdev\n```\n\n```\n[NetDev]\nName=wg0\nKind=wireguard\nDescription=WireGuard tunnel wg0\n\n[WireGuard]\nListenPort=51902\nPrivateKey=PEER_B_PRIVATE_KEY\nFirewallMark=0x8888\n\n[WireGuardPeer]\nPublicKey=PEER_A_PUBLIC_KEY\nPresharedKey=PEER_A-PEER_B-PRESHARED_KEY\nAllowedIPs=0.0.0.0/0\nEndpoint=198.51.100.101:51871\nRouteTable=1000\n```\n\n```\n/etc/systemd/network/50-wg0.network\n```\n\n```\n[Match]\nName=wg0\n\n[Network]\nAddress=10.0.0.2/32\nDNS=10.0.0.1\nDNSDefaultRoute=true\nDomains=~.\n\n[RoutingPolicyRule]\nFirewallMark=0x8888\nInvertRule=true\nTable=1000\nPriority=10\n\n# Exempt the endpoint IP address so that wireguard can still connect to it.\n[RoutingPolicyRule]\nTo=198.51.100.101/32\nPriority=5\n```\n\nExempting specific addresses\n\nIn order to exempt specific addresses (such as private LAN addresses) from routing over the WireGuard tunnel, add them to another RoutingPolicyRule with higher priority.\n\n```\n/etc/systemd/network/50-wg0.network\n```\n\n```\n...\n[RoutingPolicyRule]\nTo=192.168.0.0/24\nPriority=9\n...\n```\n\nRoute for specific user\n\nIt may be desirable to route WAN traffic over the tunnel only for a specific user, for example, the transmission user in order to use the tunnel for torrent traffic.\n\n```\n/etc/systemd/network/99-wg0.network\n```\n\n```\n...\n[RoutingPolicyRule]\nTable=1000\nUser=transmission\nPriority=30001\nFamily=both\n\n[RoutingPolicyRule]\nTable=main\nUser=transmission\nSuppressPrefixLength=0\nPriority=30000\nFamily=both\n...\n```\n\n"
    },
    {
      "title": "Netctl",
      "level": 4,
      "content": "Netctl has native support for setting up WireGuard interfaces. A typical set of WireGuard netctl profile configuration files would look like this:\n\nPeer A setup:\n\n```\n/etc/netctl/wg0\n```\n\n```\nDescription=\"WireGuard tunnel on peer A\"\nInterface=wg0\nConnection=wireguard\nWGConfigFile=/etc/wireguard/wg0.conf\n\nIP=static\nAddress=('10.0.0.1/24')\n```\n\n```\n/etc/wireguard/wg0.conf\n```\n\n```\n[Interface]\nListenPort = 51871\nPrivateKey = PEER_A_PRIVATE_KEY\n\n[Peer]\nPublicKey = PEER_B_PUBLIC_KEY\nAllowedIPs = 10.0.0.2/32\nEndpoint = peer-b.example:51902\n\n[Peer]\nPublicKey = PEER_C_PUBLIC_KEY\nAllowedIPs = 10.0.0.3/32\n```\n\nPeer B setup:\n\n```\n/etc/netctl/wg0\n```\n\n```\nDescription=\"WireGuard tunnel on peer B\"\nInterface=wg0\nConnection=wireguard\nWGConfigFile=/etc/wireguard/wg0.conf\n\nIP=static\nAddress=('10.0.0.2/24')\n```\n\n```\n/etc/wireguard/wg0.conf\n```\n\n```\n[Interface]\nListenPort = 51902\nPrivateKey = PEER_B_PRIVATE_KEY\n\n[Peer]\nPublicKey = PEER_A_PUBLIC_KEY\nAllowedIPs = 10.0.0.1/32\nEndpoint = peer-a.example:51871\n\n[Peer]\nPublicKey = PEER_C_PUBLIC_KEY\nAllowedIPs = 10.0.0.3/32\n```\n\nPeer C setup:\n\n```\n/etc/netctl/wg0\n```\n\n```\nDescription=\"WireGuard tunnel on peer C\"\nInterface=wg0\nConnection=wireguard\nWGConfigFile=/etc/wireguard/wg0.conf\n\nIP=static\nAddress=('10.0.0.3/24')\n```\n\n```\n/etc/wireguard/wg0.conf\n```\n\n```\n[Interface]\nListenPort = 51993\nPrivateKey = PEER_C_PRIVATE_KEY\n\n[Peer]\nPublicKey = PEER_A_PUBLIC_KEY\nAllowedIPs = 10.0.0.1/32\nEndpoint = peer-a.example:51871\n\n[Peer]\nPublicKey = PEER_B_PUBLIC_KEY\nAllowedIPs = 10.0.0.2/32\nEndpoint = peer-b.example:51902\n```\n\nThen start and/or enable the wg0 interface on every participating peer as needed, i.e.\n\n```\n# netctl start wg0\n```\n\nTo implement persistent site-to-peer, peer-to-site or site-to-site type of connection with WireGuard and Netctl, just add appropriate Routes= line into the netctl profile configuration file and add this network to AllowedIPs in the WireGuard profile, e.g. Routes=('192.168.10.0/24 dev wg0') in the /etc/netctl/wg0 and AllowedIPs=10.0.0.1/32, 192.168.10.0/24 in /etc/wireguard/wg0.conf and then do not forget to enable IP forwarding.\n\n"
    },
    {
      "title": "NetworkManager",
      "level": 4,
      "content": "NetworkManager has native support for setting up WireGuard interfaces. For all details about WireGuard usage in NetworkManager, read Thomas Haller's blog post—WireGuard in NetworkManager.\n\n```\n# nmcli connection import type wireguard file /etc/wireguard/wg0.conf\n```\n\nThe following examples configure WireGuard via the keyfile format .nmconnection files. See nm-settings-keyfile(5) and nm-settings(5) for an explanation on the syntax and available options.\n\nPeer A setup:\n\n```\n/etc/NetworkManager/system-connections/wg0.nmconnection\n```\n\n```\n[connection]\nid=wg0\ntype=wireguard\ninterface-name=wg0\n\n[wireguard]\nlisten-port=51871\nprivate-key=PEER_A_PRIVATE_KEY\nprivate-key-flags=0\n\n[wireguard-peer.PEER_B_PUBLIC_KEY]\nendpoint=peer-b.example:51902\npreshared-key=PEER_A-PEER_B-PRESHARED_KEY\npreshared-key-flags=0\nallowed-ips=10.0.0.2/32;fdc9:281f:04d7:9ee9::2/128;\n\n[wireguard-peer.PEER_C_PUBLIC_KEY]\npreshared-key=PEER_A-PEER_C-PRESHARED_KEY\npreshared-key-flags=0\nallowed-ips=10.0.0.3/32;fdc9:281f:04d7:9ee9::3/128;\n\n[ipv4]\naddress1=10.0.0.1/24\nmethod=manual\n\n[ipv6]\naddress1=fdc9:281f:04d7:9ee9::1/64\nmethod=manual\n```\n\n- To route all traffic through the tunnel to a specific peer, add the default route (0.0.0.0/0 for IPv4 and ::/0 for IPv6) to wireguard-peer.PEER_X_PUBLIC_KEY.allowed-ips. E.g. wireguard-peer.PEER_B_PUBLIC_KEY.allowed-ips=0.0.0.0/0;::/0;. Special handling of the default route in WireGuard connections is supported since NetworkManager 1.20.0.\n- To use a peer as a DNS server, specify its WireGuard tunnel's IP address(es) with the ipv4.dns and ipv6.dns settings. Search domains can be specified with the ipv4.dns-search= and ipv6.dns-search= options. See nm-settings(5) for more details. For example, using the keyfile format:\n\n```\n...\n[ipv4]\n...\ndns=10.0.0.2;\ndns-search=corp;\n...\n[ipv6]\n...\ndns=fdc9:281f:04d7:9ee9::2;\ndns-search=corp;\n...\n```\n\nTo use a peer as the only DNS server, set a negative DNS priority (e.g. dns-priority=-1) and add ~. to the dns-search= settings.\n\nPeer B setup:\n\n```\n/etc/NetworkManager/system-connections/wg0.nmconnection\n```\n\n```\n[connection]\nid=wg0\ntype=wireguard\ninterface-name=wg0\n\n[wireguard]\nlisten-port=51902\nprivate-key=PEER_B_PRIVATE_KEY\nprivate-key-flags=0\n\n[wireguard-peer.PEER_A_PUBLIC_KEY]\nendpoint=198.51.100.101:51871\npreshared-key=PEER_A-PEER_B-PRESHARED_KEY\npreshared-key-flags=0\nallowed-ips=10.0.0.1/32;fdc9:281f:04d7:9ee9::1/128;\n\n[wireguard-peer.PEER_C_PUBLIC_KEY]\npreshared-key=PEER_B-PEER_C-PRESHARED_KEY\npreshared-key-flags=0\nallowed-ips=10.0.0.3/32;fdc9:281f:04d7:9ee9::3/128;\n\n[ipv4]\naddress1=10.0.0.2/24\nmethod=manual\n\n[ipv6]\naddress1=fdc9:281f:04d7:9ee9::2/64\nmethod=manual\n```\n\nPeer C setup:\n\n```\n/etc/NetworkManager/system-connections/wg0.nmconnection\n```\n\n```\n[connection]\nid=wg0\ntype=wireguard\ninterface-name=wg0\n\n[wireguard]\nlisten-port=51993\nprivate-key=PEER_C_PRIVATE_KEY\nprivate-key-flags=0\n\n[wireguard-peer.PEER_A_PUBLIC_KEY]\nendpoint=198.51.100.101:51871\npreshared-key=PEER_A-PEER_C-PRESHARED_KEY\npreshared-key-flags=0\nallowed-ips=10.0.0.1/32;fdc9:281f:04d7:9ee9::1/128;\n\n[wireguard-peer.PEER_B_PUBLIC_KEY]\nendpoint=peer-b.example:51902\npreshared-key=PEER_B-PEER_C-PRESHARED_KEY\npreshared-key-flags=0\nallowed-ips=10.0.0.2/32;fdc9:281f:04d7:9ee9::2/128;\n\n[ipv4]\naddress1=10.0.0.3/24\nmethod=manual\n\n[ipv6]\naddress1=fdc9:281f:04d7:9ee9::3/64\nmethod=manual\n```\n\n"
    },
    {
      "title": "Specific use-case: VPN server",
      "level": 2,
      "content": "Note: **This article or section is a candidate for merging with #wg-quick.** This article or section is a candidate for merging with #wg-quick.\n\nThis article or section is a candidate for merging with #wg-quick.\n\nThe purpose of this section is to set up a WireGuard \"server\" and generic \"clients\" to enable access to the server/network resources through an encrypted and secured tunnel like OpenVPN and others. The \"server\" runs on Linux and the \"clients\" can run on any number of platforms (the WireGuard Project offers apps on both iOS and Android platforms in addition to Linux, Windows and MacOS). See the official project install link for more.\n\n"
    },
    {
      "title": "Server",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with #Site-to-point.** This article or section is a candidate for merging with #Site-to-point.\n\nThis article or section is a candidate for merging with #Site-to-point.\n\nOn the peer that will act as the \"server\", first enable IPv4 forwarding.\n\nIf the server has a public IP configured, be sure to:\n\n- Allow UDP traffic on the specified port(s) on which WireGuard will be running (for example allowing traffic on 51820/UDP).\n- Setup the forwarding policy for the firewall if it is not included in the WireGuard configuration for the interface itself /etc/wireguard/wg0.conf. The example below should have the iptables rules and work as-is.\n\nIf the server is behind NAT, be sure to forward the specified port(s) on which WireGuard will be running (for example, 51820/UDP) from the router to the WireGuard server.\n\n"
    },
    {
      "title": "Key generation",
      "level": 3,
      "content": "Generate key pairs for the server and for each client as explained in #Key generation.\n\n"
    },
    {
      "title": "Server configuration",
      "level": 3,
      "content": "Create the \"server\" configuration file:\n\n```\n/etc/wireguard/wg0.conf\n```\n\n```\n[Interface]\nAddress = 10.200.200.1/24\nListenPort = 51820\nPrivateKey = SERVER_PRIVATE_KEY\n\n# substitute eth0 in the following lines to match the Internet-facing interface\n# the FORWARD rules will always be needed since traffic needs to be forwarded between the WireGuard\n# interface and the other interfaces on the server.\n# if the server is behind a router and receives traffic via NAT, specify static routing back to the\n# 10.200.200.0/24 subnet, the NAT iptables rules are not needed but the FORWARD rules are needed.\n# if the server is behind a router and receives traffic via NAT but one cannot specify static routing back to\n# 10.200.200.0/24 subnet, both the NAT and FORWARD iptables rules are needed. \nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n[Peer]\n# foo\nPublicKey = PEER_FOO_PUBLIC_KEY\nPresharedKey = PRE-SHARED_KEY\nAllowedIPs = 10.200.200.2/32\n\n[Peer]\n# bar\nPublicKey = PEER_BAR_PUBLIC_KEY\nPresharedKey = PRE-SHARED_KEY\nAllowedIPs = 10.200.200.3/32\n```\n\nAdditional peers (\"clients\") can be listed in the same format as needed. Each peer requires the PublicKey to be set. However, specifying PresharedKey is optional.\n\nNotice that the Address has a netmask of /24 and the clients on AllowedIPs /32. The clients only use their IP and the server only sends back their respective addresses.\n\nThe interface can be managed manually using wg-quick(8) or using a systemd service managed via systemctl(1).\n\nThe interface may be brought up using wg-quick up wg0 respectively by starting and potentially enabling the interface via wg-quick@interface.service, e.g. wg-quick@wg0.service. To close the interface use wg-quick down wg0 respectively stop wg-quick@interface.service.\n\n"
    },
    {
      "title": "Client configuration",
      "level": 3,
      "content": "Create the corresponding \"client\" configuration file(s):\n\n```\nfoo.conf\n```\n\n```\n[Interface]\nAddress = 10.200.200.2/32\nPrivateKey = PEER_FOO_PRIVATE_KEY\nDNS = 10.200.200.1\n\n[Peer]\nPublicKey = SERVER_PUBLICKEY\nPresharedKey = PRE-SHARED_KEY\nEndpoint = my.ddns.example.com:51820\nAllowedIPs = 0.0.0.0/0, ::/0\n```\n\n```\nbar.conf\n```\n\n```\n[Interface]\nAddress = 10.200.200.3/32\nPrivateKey = PEER_BAR_PRIVATE_KEY\nDNS = 10.200.200.1\n\n[Peer]\nPublicKey = SERVER_PUBLICKEY\nPresharedKey = PRE-SHARED KEY\nEndpoint = my.ddns.example.com:51820\nAllowedIPs = 0.0.0.0/0, ::/0\n```\n\nUsing the catch-all AllowedIPs = 0.0.0.0/0, ::/0 will forward all IPv4 (0.0.0.0/0) and IPv6 (::/0) traffic over the VPN.\n\n"
    },
    {
      "title": "Testing the tunnel",
      "level": 2,
      "content": "Note: **This article or section is a candidate for merging with #Basic checkups.** This article or section is a candidate for merging with #Basic checkups.\n\nThis article or section is a candidate for merging with #Basic checkups.\n\nOnce a tunnel has been established, one can use netcat to send traffic through it to test out throughput, CPU usage, etc. On one side of the tunnel, run nc in listen mode and on the other side, pipe some data from /dev/zero into nc in sending mode.\n\nIn the example below, port 2222 is used for the traffic (be sure to allow traffic on port 2222 if using a firewall).\n\nOn one side of the tunnel listen for traffic:\n\n```\n$ nc -vvlnp 2222\n```\n\nOn the other side of the tunnel, send some traffic:\n\n```\n$ dd if=/dev/zero bs=1024K count=1024 | nc -v 10.0.0.203 2222\n```\n\nStatus can be monitored using wg directly.\n\n```\n# wg\n```\n\n```\ninterface: wg0\n  public key: UguPyBThx/+xMXeTbRYkKlP0Wh/QZT3vTLPOVaaXTD8=\n  private key: (hidden)\n  listening port: 51820\n\npeer: 9jalV3EEBnVXahro0pRMQ+cHlmjE33Slo9tddzCVtCw=\n  preshared key: (hidden)\n  endpoint: 192.168.1.216:53207\n  allowed ips: 10.0.0.0/0\n  latest handshake: 1 minutes, 17 seconds ago\n  transfer: 56.43 GiB received, 1.06 TiB sent\n```\n\n"
    },
    {
      "title": "Store private keys in encrypted form (wg-quick)",
      "level": 3,
      "content": "It may be desirable to store private keys in encrypted form, such as through use of pass. Just replace the PrivateKey line under [Interface] in the WireGuard configuration file with:\n\n```\nPostUp = wg set %i private-key <(su user -c \"export PASSWORD_STORE_DIR=/path/to/your/store/; pass WireGuard/private-keys/%i\")\n```\n\nwhere user is the Linux username of interest. See the wg-quick(8) man page for more details.\n\nAlternatively, systemd-creds can be used. This can be helpful to create encrypted private keys that are bound to the system's TPM. See systemd-creds(1) for more details.\n\nFirst, create an encrypted credential:\n\n```\n# echo -n your_wg_private_key | systemd-creds --tpm2-device=auto encrypt - /etc/credstore.encrypted/wg-private-key.cred\n```\n\nFinally, replace the PrivateKey line under [Interface] in the WireGuard configuration file with:\n\n```\nPostUp = wg set %i private-key <(systemd-creds decrypt /etc/credstore.encrypted/wg-private-key.cred)\n```\n\n"
    },
    {
      "title": "Using systemd credentials for private keys (systemd-networkd)",
      "level": 3,
      "content": "You can use systemd-creds to store your private keys encrypted.\n\n```\n# echo -n your_wg_private_key | systemd-creds encrypt - /etc/credstore.encrypted/network.wireguard.private.wg0\n# echo -n your_pre_shared_key | systemd-creds encrypt - /etc/credstore.encrypted/network.wireguard.psk.wg0\n```\n\nModify your .netdev file to use\n\n```\nPrivateKey = @network.wireguard.private.wg0\nPresharedKey = @network.wireguard.psk.wg0\n```\n\n"
    },
    {
      "title": "Endpoint with changing IP",
      "level": 3,
      "content": "After resolving a server's domain, WireGuard will not check for changes in DNS again.\n\nIf the WireGuard server is frequently changing its IP-address due DHCP, Dyndns, IPv6, etc., any WireGuard client is going to lose its connection, until its endpoint is updated via something like wg set \"$INTERFACE\" peer \"$PUBLIC_KEY\" endpoint \"$ENDPOINT\".\n\nAlso be aware, if the endpoint is ever going to change its address (for example when moving to a new provider/datacenter), just updating DNS will not be enough, so periodically running reresolve-dns might make sense on any DNS-based setup.\n\nLuckily, wireguard-tools provides an example script /usr/share/wireguard-tools/examples/reresolve-dns/reresolve-dns.sh, that parses WG configuration files and automatically resets the endpoint address.\n\nOne needs to run the /usr/share/wireguard-tools/examples/reresolve-dns/reresolve-dns.sh /etc/wireguard/wg.conf periodically to recover from an endpoint that has changed its IP.\n\nOne way of doing so is by updating all WireGuard endpoints once every thirty seconds[6] via a systemd timer:\n\n```\n/etc/systemd/system/wireguard_reresolve-dns.timer\n```\n\n```\n[Unit]\nDescription=Periodically reresolve DNS of all WireGuard endpoints\n\n[Timer]\nOnCalendar=*:*:0/30\n\n[Install]\nWantedBy=timers.target\n```\n\n```\n/etc/systemd/system/wireguard_reresolve-dns.service\n```\n\n```\n[Unit]\nDescription=Reresolve DNS of all WireGuard endpoints\nWants=network-online.target\nAfter=network-online.target nss-lookup.target\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c 'for i in /etc/wireguard/*.conf; do /usr/share/wireguard-tools/examples/reresolve-dns/reresolve-dns.sh \"$i\"; done'\n```\n\nAfterwards enable and start wireguard_reresolve-dns.timer\n\n"
    },
    {
      "title": "Generate QR code",
      "level": 3,
      "content": "If the client is a mobile device such as a phone, qrencode can be used to generate client's configuration QR code and display it in terminal:\n\n```\n$ qrencode -t ansiutf8 -r client.conf\n```\n\n"
    },
    {
      "title": "Enable debug logs",
      "level": 3,
      "content": "When using the Linux kernel module on a kernel that supports dynamic debugging, debugging information can be written into the kernel ring buffer (viewable with dmesg and journalctl) by running:\n\n```\n# modprobe wireguard\n# echo module wireguard +p > /sys/kernel/debug/dynamic_debug/control\n```\n\n"
    },
    {
      "title": "Reload peer (server) configuration",
      "level": 3,
      "content": "In case the WireGuard peer (mostly server) adding or removing another peers from its configuration and wants to reload it without stopping any active sessions, one can execute the following command to do it:\n\n```\n# wg syncconf ${WGNET} <(wg-quick strip ${WGNET})\n```\n\nWhere $WGNET is WireGuard interface name or configuration base name, for example wg0 (for server) or client (without the .conf extension, for client).\n\nUsers of wg-quick@.service can simply reload the service.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Workaround for some public Wi-Fi networks seemingly blocking WireGuard connections",
      "level": 3,
      "content": "Some Wi-Fi networks can be configured to actively identify and block WireGuard's handshake thus preventing the initial connection and preventing the establishment of the secure tunnel.\n\nThis strategy works for blocking new WireGuard connections but it is useless against existing connections. Therefore, to use WireGuard on such a network, simply connect to the WireGuard peer over cellular before joining the Wi-Fi network thus allowing the handshake to take place before the active blocking can occur. WireGuard will keep this tunnel open as the devices transitions from cellular to Wi-Fi.\n\n"
    },
    {
      "title": "Routes are periodically reset",
      "level": 3,
      "content": "Users of NetworkManager should make sure that it is not managing the WireGuard interface(s). For example, create the following configuration file:\n\n```\n/etc/NetworkManager/conf.d/unmanaged.conf\n```\n\n```\n[keyfile]\nunmanaged-devices=type:wireguard\n```\n\n"
    },
    {
      "title": "Broken DNS resolution",
      "level": 3,
      "content": "When tunneling all traffic through a WireGuard interface, the connection can become seemingly lost after a while or upon new connection. This could be caused by a network manager or DHCP client overwriting /etc/resolv.conf.\n\nBy default wg-quick uses resolvconf to register new DNS entries (from the DNS keyword in the configuration file). This will cause issues with network managers and DHCP clients that do not use resolvconf, as they will overwrite /etc/resolv.conf thus removing the DNS servers added by wg-quick.\n\nThe solution is to use networking software that supports resolvconf.\n\nUsers of NetworkManager should know that it does not use resolvconf by default. It is recommended to use systemd-resolved. If this is undesirable, install openresolv and configure NetworkManager to use it: NetworkManager#Use openresolv.\n\n"
    },
    {
      "title": "Adjusting the MTU value",
      "level": 3,
      "content": "A default Wireguard maximum transmission unit (MTU) value is 1420.\n\nDue to a too low MTU (lower than 1280), wg-quick may have failed to create the WireGuard interface. This can be solved by setting the MTU value in WireGuard configuration in Interface section on client.\n\n```\nfoo.config\n```\n\n```\n[Interface]\nAddress = 10.200.200.2/24\nMTU = 1420\nPrivateKey = PEER_FOO_PRIVATE_KEY\nDNS = 10.200.200.1\n```\n\nDepending on your network, a lower MTU value can also make your WireGuard connection work.\n\nIn certain cases larger MTU values can lead to unstable or intermittent connection because of unreliable Path MTU discovery (PMTU) along the route. Which may lead to situations where ICMP ping works because of its low packet size, but most of TCP connections fail because of full MTU size utilization. For example, an IPv6 connection has a higher packet overhead than IPv4, hence fragmentation may occur earlier with the same MTU value.\n\nIt is worth checking the links MTU size on both peers and other routers involved to determine the minimum value.\n\n```\n# ip link show\n```\n\n```\n5: wg0: <POINTOPOINT,NOARP,UP,LOWER_UP> mtu 1400 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\nlink/none\n```\n\nAnother option is falling back to a MTU of 1280 and finding appropriate value for given path with a trial/error approach.\n\nAn MTU of 1420 and above can lead to partially broken links which could be interpreted as a firewall or routing issue instead of actual MTU size.\n\n"
    },
    {
      "title": "Key is not the correct length or format",
      "level": 3,
      "content": "To avoid the following error, put the key value in the configuration file and not the path to the key file.\n\n```\n# wg-quick up wg0\n```\n\n```\n[#] ip link add wg0 type wireguard\n[#] wg setconf wg0 /dev/fd/63\nKey is not the correct length or format: `/path/example.key'\nConfiguration parsing error\n[#] ip link delete dev wg0\n```\n\n"
    },
    {
      "title": "Unable to establish a persistent connection behind NAT / firewall",
      "level": 3,
      "content": "By default, WireGuard peers remain silent while they do not need to communicate, so peers located behind a NAT and/or firewall may be unreachable from other peers until they reach out to other peers themselves (or the connection may time out). Adding PersistentKeepalive = 25 to the [Peer] settings of a peer located behind a NAT and/or firewall can ensure that the connection remains open.\n\nTo temporarily set the persistent-keepalive setting via command line, run the following command:\n\n```\n# wg set wg0 peer public_key persistent-keepalive 25\n```\n\n"
    },
    {
      "title": "Loop routing",
      "level": 3,
      "content": "Adding the endpoint IP to the allowed IPs list, the kernel will attempt to send handshakes to said device binding, rather than using the original route. This results in failed handshake attempts.\n\nAs a workaround, the correct route to the endpoint needs to be manually added using\n\n```\n# ip route add endpoint_ip via gateway dev network_interface\n```\n\nE.g. for peer B from above in a standard LAN setup:\n\n```\n# ip route add 203.0.113.102 via 192.168.0.1 dev eth0\n```\n\nTo make this route persistent, the command can be added as PostUp = ip route ... to the [Interface] section of wg0.conf. However, on certain setups (e.g. using wg-quick@.service in combination with NetworkManager) this might fail on resume. Furthermore, this only works for a static network setup and fails if gateways or devices change (e.g. using Ethernet or Wi-Fi on a laptop).\n\nUsing NetworkManager, a more flexible solution is to start WireGuard using a dispatcher script. As root, create\n\n```\n/etc/NetworkManager/dispatcher.d/50-wg0.sh\n```\n\n```\n#!/bin/sh\ncase $2 in\n  up)\n    wg-quick up wg0\n    ip route add <endpoint ip> via $IP4_GATEWAY dev $DEVICE_IP_IFACE\n    ;;\n  pre-down)\n    wg-quick down wg0\n    ;;\nesac\n```\n\nIf not already running, start and enable NetworkManager-dispatcher.service. Also make sure that NetworkManager is not managing routes for wg0, see #Routes are periodically reset.\n\n"
    },
    {
      "title": "Connection lost after sleep using systemd-networkd",
      "level": 3,
      "content": "systemd version 253 introduced a change in how network interfaces are reconfigured when resuming from a suspended state[7]. In doing so, network connections managed by systemd-networkd will lose connection to the wireguard interface. Unless a kill switch is configured, this risks exposing the public IP address after resuming from suspension. To fix this, uncomment and change the value to no for ManageForeignRoutingPolicyRules in /etc/systemd/networkd.conf. [8]\n\nReview the systemd-networkd page in full to become informed of any other potential side effects of this change, if any.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:WireGuard\n- Presentations by Jason Donenfeld.\n- Mailing list\n- Unofficial WireGuard Documentation\n- Debian:Wireguard\n\n"
    }
  ]
}