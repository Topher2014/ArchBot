{
  "title": "ASUS C302",
  "url": "https://wiki.archlinux.org/title/ASUS_C302",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section does not follow the Laptop page guidelines.** This article or section does not follow the Laptop page guidelines.\n\nThis article or section does not follow the Laptop page guidelines.\n\nThe Asus C302 (also known as Asus C302C and Asus C302CA) is a Chromebook, which can have Linux installed. Here are some pointers on the smooth running of Arch Linux.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Add acpi_osi=Linux intel_iommu=on,igfx_off to your kernel parameters.\n\nintel_iommu=on,igfx_off is from BBS#228604, to prevent the following error from appearing in the output of dmesg:\n\n```\n[drm:intel_cpu_fifo_underrun_irq_handler [i915]] *ERROR* CPU pipe A FIFO underrun\n```\n\nThe CPU is an Intel Core M3, so install intel-ucode.\n\n"
    },
    {
      "title": "Kernel Modules",
      "level": 2,
      "content": "In e.g. /etc/modprobe.d/skylake.conf\n\n```\n# Needed, for the nau8825 kernel sound modules to initialize\nblacklist snd_hda_intel\n```\n\n```\noptions tpm_tis interrupts=0\n```\n\n"
    },
    {
      "title": "Screen",
      "level": 2,
      "content": "The screen is 12.5 inches diagonally. At 1920x1080 resolution, this is 176 DPI, which is HiDPI.\n\nIn ~/.xinitrc, to set the screen dimensions (measured in millimetres):\n\n```\nxrandr --fbmm 277x156\n```\n\n"
    },
    {
      "title": "Vsync",
      "level": 3,
      "content": "For proper vsync (including e.g. fullscreen Youtube in Firefox) in XFCE, install xfwm4-gitAUR, and enable XFCE's compositor.\n\nProper vsync also requires xf86-video-intel, rather than modesetting.\n\nIn /etc/X11/xorg.conf.d/20-intel.conf\n\n```\nSection \"Device\"\n    Identifier \"Intel Graphics\"\n    Driver \"intel\"\nEndSection\n```\n\n"
    },
    {
      "title": "Screen Flipping",
      "level": 3,
      "content": "To use the laptop in tent mode, the following script will flip both the screen and touch input:\n\n```\n#!/bin/dash\n\nset_normal() {\n\tr=\"normal\"\n\tctm=\"1 0 0 0 1 0 0 0 1\"\n\n}\n\nset_upside_down() {\n\tr=\"inverted\"\n\tctm=\"-1 0 1 0 -1 1 0 0 1\"\n}\n\nline=$(xrandr | grep '^eDP.* connected ')\nscreen=$(printf \"%s\" \"$line\" | cut -d\" \" -f1)\n\nif $(printf \"%s\" \"$line\" | grep -q ' inverted (normal') ; then\n\tset_normal\nelse\n\tset_upside_down\nfi\n\nxrandr --output \"$screen\" --rotate \"$r\"\nxinput set-prop \"Elan Touchscreen\" \"Coordinate Transformation Matrix\" $ctm\n```\n\n"
    },
    {
      "title": "Keyboard",
      "level": 2,
      "content": "To use the top row of Chromebook keys as useful keys in xorg, use e.g.:\n\nIn ~/.Xmodmap\n\n```\nkeycode   9 = Escape NoSymbol Escape\nkeycode  22 = BackSpace BackSpace BackSpace BackSpace Delete NoSymbol Delete\nkeycode  37 = Control_L NoSymbol Control_L\nkeycode  50 = Shift_L NoSymbol Shift_L\nkeycode  66 = Caps_Lock NoSymbol Caps_Lock\nkeycode  67 = Home F1 Home F1 F1 F1 XF86Switch_VT_1\nkeycode  68 = End F2 End F2 F2 F2 XF86Switch_VT_2\nkeycode  69 = Prior F3 Prior F3 F3 F3 XF86Switch_VT_3\nkeycode  70 = Next F4 Next F4 F4 F4 XF86Switch_VT_4\nkeycode  71 = Delete F5 Delete F5 F5 F5 XF86Switch_VT_5\nkeycode  72 = XF86MonBrightnessDown F6 XF86MonBrightnessDown F6 F6 F6 XF86Switch_VT_6\nkeycode  73 = XF86MonBrightnessUp F7 XF86MonBrightnessUp F7 F7 F7 XF86Switch_VT_7\nkeycode  74 = XF86AudioMute F8 XF86AudioMute F8 F8 F8 XF86Switch_VT_8\nkeycode  75 = XF86AudioLowerVolume F9 XF86AudioLowerVolume F9 F9 F9 XF86Switch_VT_9\nkeycode  76 = XF86AudioRaiseVolume F10 XF86AudioRaiseVolume F10 F10 F10 XF86Switch_VT_10\nkeycode 111 = Up Up Up Up Prior Prior\nkeycode 112 = Prior NoSymbol Prior\nkeycode 113 = Left Left Left Left Home Home\nkeycode 114 = Right Right Right Right End End\nkeycode 115 = End NoSymbol End\nkeycode 116 = Down Down Down Down Next Next\nkeycode 117 = Next NoSymbol Next\nkeycode 118 = Insert NoSymbol Insert\nkeycode 119 = Delete NoSymbol Delete\nkeycode 124 = XF86PowerOff NoSymbol XF86PowerOff\nkeycode 167 = XF86Forward NoSymbol XF86Forward\nkeycode 182 = XF86Close NoSymbol XF86Close\nkeycode 191 = XF86ScreenSaver NoSymbol XF86ScreenSaver\n```\n\n(This list can be pruned.)\n\n~/.Xmodmap will be loaded by /etc/X11/xinit/xinitrc, which effectively runs:\n\n```\nxmodmap ~/.Xmodmap\n```\n\n"
    },
    {
      "title": "Keyboard Backlight",
      "level": 3,
      "content": "To be able to change the keyboard backlight brightness as a normal user, run as root:\n\n```\nb=\"/sys/devices/platform/GOOG0002:00/leds/chromeos::kbd_backlight/brightness\"\nchgrp users \"$b\" &&\nchmod 660 \"$b\" &&\necho 6 > \"$b\"\n```\n\nIt is a value between 0 (off) and 100 (full brightness). The default on ChromeOS is 25. 6 is a reasonable lower value.\n\nChromeOS is able to disable the keyboard backlight, when the keyboard is not being used - that functionality does not appear to be available in the Linux kernel, but can be replicated in a simple script, with the aid of xprintidle, e.g.:\n\n```\n#!/bin/dash\n\nset_keyboard_backlight() {\n\tprintf \"%s\" \"$1\" > \"/sys/devices/platform/GOOG0002:00/leds/chromeos::kbd_backlight/brightness\"\n\tb=\"$1\"\n}\n\nb=0\n\nwhile true ; do\n\tpgrep ^Xorg > /dev/null || exit 0\n\n\tseconds_to_sleep=10\n\tidle_millis=$(xprintidle)\n\tif [ \"$idle_millis\" -gt 10000 ] ; then\n\t\tnb=0\n\t\tseconds_to_sleep=5\n\telse\n\t\tnb=25\n\t\tseconds_to_sleep=15\n\tfi\n\n\tif [ \"$nb\" -ne \"$b\" ] ; then\n\t\tset_keyboard_backlight \"$nb\"\n\tfi\n\n\techo \"nb=$nb, sleeping for $seconds_to_sleep\"\n\tsleep \"$seconds_to_sleep\"\ndone\n```\n\n"
    },
    {
      "title": "Touchpad",
      "level": 2,
      "content": "As of libinput 1.12.0-2, the touchpad works nicely with all of:\n\n- Tapping: 1-finger tap = \"left\" button 2-finger tap = \"right\" button 3-finger tap = \"middle\" button\n\n- 1-finger tap = \"left\" button\n- 2-finger tap = \"right\" button\n- 3-finger tap = \"middle\" button\n\n- Clickpad (clicking the lower portion of the touchpad): Left side = \"left\" button Right side = \"right\" button Middle = \"middle\" button\n\n- Left side = \"left\" button\n- Right side = \"right\" button\n- Middle = \"middle\" button\n\n"
    },
    {
      "title": "Mouse",
      "level": 2,
      "content": "Due to the limited amount of USB ports, a Bluetooth mouse is a good option. The Logitech M590 mouse works great.\n\nRun \"bluetoothctl power on &\" at startup, e.g. in ~/.xinitrc\n\nIn e.g. /etc/X11/xorg.conf.d/99-mouse.conf\n\n```\nSection \"InputClass\"\n    Identifier \"Logitech M590\"\n    MatchIsPointer \"on\"\n    MatchDevicePath \"/dev/input/event*\"\n    Driver \"libinput\"\n    Option \"AccelProfile\" \"flat\"\nEndSection\n```\n\nThen, the \"speed\" of the mouse can be set using the XFCE GUI, in \"Settings - Mouse\", setting the \"acceleration\" to e.g. 2.0\n\n"
    },
    {
      "title": "Sound",
      "level": 2,
      "content": "Sound is a work in-progress. Sound is reliable when using headphones only.\n\nSave the audio firmware as /lib/firmware/9d70-CORE-COREBOOT-0-tplg.bin (filesize 23120 bytes).\n\nTo set audio to a sensible level, run in ~/.xinitrc:\n\n```\namixer -q -c0 sset Headphone 70% &\n```\n\n"
    },
    {
      "title": "PulseAudio",
      "level": 3,
      "content": "To prevent audio \"clicks\", comment out \"load-module module-suspend-on-idle\" in /etc/pulse/default.pa and /etc/pulse/system.pa\n\n"
    },
    {
      "title": "Coil Whine",
      "level": 2,
      "content": "There is occasional coil whine, which can be greatly reduced by running:\n\n```\nprintf \"1\" > /sys/devices/system/cpu/intel_pstate/no_turbo\n```\n\n"
    }
  ]
}