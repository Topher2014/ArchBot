{
  "title": "Clipboard",
  "url": "https://wiki.archlinux.org/title/Clipboard",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Copying text from a terminal\n- Firefox#Middle-click behavior\n- GTK#Disable mouse paste\n- Vim#Clipboard\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nAccording to Wikipedia:\n\n"
    },
    {
      "title": "History",
      "level": 2,
      "content": "In X10 (1985), cut buffers were introduced. These were limited buffers that stored arbitrary text and were used by most applications. However, they were inefficient and implementation of them varied, so selections were introduced. Cut buffers are long deprecated, and although some applications (such as xterm) may have legacy support for them, it is both not likely and not recommended that they be used.\n\n"
    },
    {
      "title": "Selections",
      "level": 2,
      "content": "Freedesktop.org describes the two main selections as follows:[4]\n\nThe majority of programs for Xorg, including Qt and GTK applications, follow this behavior. While ICCCM also defines a SECONDARY selection, it does not have a consensually agreed upon purpose. Despite the naming, all three selections are basically \"clipboards\". Rather than the old \"cut buffers\" system where arbitrary applications could modify data stored in the cut buffers, only one application may control or \"own\" a selection at one time. This prevents inconsistencies in the operation of the selections.\n\nSee the Keyboard shortcuts page which lists the default shortcuts in many programs.\n\nIt is also important to realize that according to the selection protocols, nothing is copied until it is pasted. For example, if you select some word in a terminal window, close the terminal and then want to paste it somewhere else, it will not work because the terminal is gone and the text has not been copied anywhere. If you want the word to be preserved after closing terminal window, consider installing a clipboard manager.\n\n"
    },
    {
      "title": "Disabling middle-click paste",
      "level": 2,
      "content": "The following disables the middle-click pasting behavior by automatically clearing PRIMARY, without disabling the middle-click button or altering its other functionalities (like opening in a new tab or scrolling).\n\n"
    },
    {
      "title": "Using sxhkd",
      "level": 4,
      "content": "Using sxhkd, add the following to the configuration file:\n\n```\n~button2\n    ;echo -n | xclip -in\n```\n\nThe command makes use of xclip. See sxhkd#Usage for configuring sxhkd to autostart.\n\n"
    },
    {
      "title": "Using xsel",
      "level": 4,
      "content": "Run the script\n\n```\n#!/bin/sh\nwhile true; do\n    xsel --follow --input --nodetach </dev/null\ndone\n```\n\n"
    },
    {
      "title": "Application-specific",
      "level": 3,
      "content": "- GTK — See GTK#Disable mouse paste\n- Firefox — See Firefox#Middle-click behavior\n- LibreOffice — Can be disabled from Tools > Options > LibreOffice > View > Mouse\n\n"
    },
    {
      "title": "Tools",
      "level": 2,
      "content": "This section lists command-line tools to manipulate the clipboards.\n\n- sselp — Simple X selection printer. Prints the X selection to stdout.\n\n- xclip — A lightweight, command-line based interface to the clipboard.\n\n- xsel — Command-line program for getting and setting the contents of the X selection.\n\n- wl-clipboard — A simple copy/paste tool for Wayland compositors.\n\n"
    },
    {
      "title": "Managers",
      "level": 2,
      "content": "This section lists clipboard managers which provide additional features such as clipboard history or synchronization.\n\n- Anamnesis — Clipboard manager that stores all the clipboard history and offers an interface to do a full-text search. It has both a command line and GUI mode available.\n\n- Autocutsel — Command line and daemon interfaces to synchronize PRIMARY, CLIPBOARD and cut buffer selections.\n\n- Clipboard — Easy-to-use clipboard manager for terminals with multiple different clipboards, persistent clipboards, and regex selection.\n\n- Clipboard Indicator — Clipboard manager extension for GNOME Shell. Adds a clipboard indicator to the top panel, and caches clipboard history.\n\n- Clipcat — Clipboard manager written in Rust which allows user to select clipboard history from application launchers such as dmenu, rofi.\n\n- cliphist — wayland clipboard manager with support for multimedia.\n\n- Clipman — Clipboard manager plugin for the Xfce4 panel. It keeps the clipboard contents around while it is usually lost when you close an application. It is able to handle text and images, and has a feature to execute actions on specific text selections by matching them against regular expressions.\n\n- Clipmenu — Dmenu based clipboard manager\n\n- Clipmon — A lightweight clipboard manager for Wayland. Intended as a monitoring tool that will send a notification when an application pastes from the clipboard on its own (this feature is a work in progress).\n\n- clipsim — Simple and fast X clipboard manager written in C.\n\n- Clipster — A lightweight, command-line-driven clipboard manager, written in Python.\n\n- Clipton — Clipboard manager with a Rofi frontend.\n\n- CopyQ — Clever Qt clipboard manager with searchable and editable history, custom actions on items and command line support.\n\n- Gnome Clipboard History — Gnome Clipboard History is a clipboard manager GNOME extension that saves what you've copied into an easily accessible, searchable history panel.\n\n- GPaste — Clipboard management system that aims at being a new generation Parcellite, with a modular structure split in a couple of libraries and a daemon for adaptability. Offers a GNOME Shell extension and a CLI interface.\n\n- Greenclip — Simple clipboard manager to be integrated with rofi\n\n- Klipper — Full featured clipboard manager for the KDE desktop.\n\n- Parcellite — Lightweight yet feature-rich clipboard manager. It has both a command line and GUI mode available.\n\n- Qlipper — Lightweight and cross-platform clipboard history applet based on Qt.\n\n- xclipboard — Official X clipboard command-line client.\n\n- xcmenu — Clipboard synchronizer developed for window manager users.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Cut-and-paste in X\n- X Selections, Cut Buffers, and Kill Rings.\n- X11: How does “the” clipboard work?\n- Wayland's Primary selection protocol\n\n"
    }
  ]
}