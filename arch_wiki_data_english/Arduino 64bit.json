{
  "title": "Arduino 64bit",
  "url": "https://wiki.archlinux.org/title/Arduino_64bit",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- AVR\n\nArduino is an open-source electronics prototyping platform based on flexible, easy-to-use hardware and software. It is intended for artists, designers, hobbyists, and anyone interested in creating interactive objects or environments.\n\nOnce hooked up and configured the user may perform read/write tasks over the established serial connection. Examples are interfacing over UART using a serial monitoring program, or programming the microcontroller. Writing, compiling and uploading your code is facilitated by using the official Arduino IDE, which is available in the official repositories. Equally the user may use a compiler and programmer of choice to program the microcontroller.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "- Install either arduino-cli for the official CLI or arduino-ide for the new 2.x release of the IDE.\n- Enable user access to the device.\n- You may need to load the cdc_acm module.\n\n"
    },
    {
      "title": "Arduino IDE 1.x",
      "level": 3,
      "content": "The following section only applies to the 1.x version of the IDE. However, it may be possible to adapt some of this for the new IDE.\n\n"
    },
    {
      "title": "AVR Boards",
      "level": 4,
      "content": "To use AVR boards such as the Arduino Uno you can install arduino-avr-coreAUR optionally to use Arch Linux upstream avr-gcc instead of the bundled older avr-core. If you still want to use the older arduino-core you need to install it in the board manager. You can always switch between the different cores in the Tools > Board menu.\n\n"
    },
    {
      "title": "Pinoccio Scout",
      "level": 4,
      "content": "Pinoccio Scouts can also be programmed using the Arduino IDE. Instructions can be found here. Alternative you can install arduino-pinoccioAUR.\n\n"
    },
    {
      "title": "Intel Galileo",
      "level": 4,
      "content": "To use the Intel Galileo boards with Arch Linux install the Arduino IDE and download the Galileo tools package via Tools > Board > Boards Manager. To fix the installation you can follow this github post.\n\n"
    },
    {
      "title": "Arduino IDE 1.x or 2.x",
      "level": 3,
      "content": "These steps should be valid for both versions of the IDE.\n\n"
    },
    {
      "title": "AVR Boards",
      "level": 4,
      "content": "AVR boards are automatically installed by the 2.x release of the IDE however on both the 1.x and 2.x releases the AVR boards can be managed from the boards manager.\n\n"
    },
    {
      "title": "SparkFun",
      "level": 4,
      "content": "To use SparkFun boards such as the Pro Micro you need to download their board definitions. More information here and here.\n\n"
    },
    {
      "title": "RedBear Duo",
      "level": 4,
      "content": "You might need to install perl-archive-zip or you will get an error about missing crc32.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Most Arduino boards have a USB port which can be used for establishing a serial connection. This serial connection allows the user to program the board. The main microcontroller of most Arduinos, however, does not have a USB interface built-in. Hence, the board is usually equipped with a USB to serial chip in between the main microcontroller and the USB port.\n\nTo achieve the serial connection over USB, most genuine Arduino boards are equipped with another ATmega microcontroller (e.g. ATmega16U2) or an FTDI USB UART converter (e.g. FT232RL). Both of these chips register themselves over USB as an ACM device, and as such, Linux will use the cdc_acm module. The Arduino will then show up as /dev/ttyACMx.\n\nNon-genuine Arduino boards cheap out on the interfacing chip. They are typically equipped with a Chinese WCH CH340x or a counterfeit of the aforementioned models. The CH340x exposes itself as a proprietary UART over USB device. Here the ch341 module is used, making such Arduinos show up as /dev/ttyUSBx. This naming pattern may be customized by altering udev rules.\n\nSome boards may be equipped with a main microcontroller which does expose a native USB interface by itself. Whether the board has a dedicated interface chip or not, genuine boards will come out of the factory with a proper bootloader pre-installed. Such bootloaders automatically establish a serial connection over USB once they are connected.\n\n"
    },
    {
      "title": "Accessing serial",
      "level": 3,
      "content": "For the boards that expose a UART over USB, it is necessary to allow read/write access to the serial port to users[1]. As explained in Udev#Allowing regular users to use devices, create a file containing:\n\n```\n/etc/udev/rules.d/01-ttyusb.rules\n```\n\n```\nSUBSYSTEMS==\"usb-serial\", TAG+=\"uaccess\"\n```\n\nReload the udev rules and replug the Arduino device. Before uploading to the Arduino, be sure to set the correct serial port, board, and processor from the Tools menu in 1.x and the Select board option (located at the top of the IDE) in 2.x.\n\n"
    },
    {
      "title": "stty",
      "level": 2,
      "content": "Preparing:\n\n```\n# stty -F /dev/ttyACM0 cs8 9600 ignbrk -brkint -imaxbel -opost -onlcr -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke noflsh -ixon -crtscts\n```\n\nSending commands through Terminal without new line after command\n\n```\n# echo -n \"Hello World\" > /dev/ttyACM0\n```\n\nReading what your Arduino has to tell you:\n\n```\n$ cat /dev/ttyACM0\n```\n\n"
    },
    {
      "title": "Arduino-Builder",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nYou can also build Arduino sketches with the arduino-builderAUR command line tool. In order to use the provided arduino-avr-coreAUR with upstream avr-gcc and avrdude you need to create a small settings file:\n\n```\nbuild.options.json\n```\n\n```\n{\n    \"fqbn\": \"archlinux-arduino:avr:uno\",\n    \"hardwareFolders\": \"/usr/share/arduino/hardware\",\n    \"toolsFolders\": \"/usr/bin\"\n}\n```\n\nCompile a sketch with:\n\n```\n$ arduino-builder -build-options-file build.options.json blink.ino\n```\n\nOr pass all options via command line:\n\n```\n$ arduino-builder -fqbn archlinux-arduino:avr:uno -hardware /usr/share/arduino/hardware -tools /usr/bin blink.ino\n```\n\n"
    },
    {
      "title": "Arduino-CMake",
      "level": 3,
      "content": "Using Arduino-CMake-Toolchain and CMake you can build Arduino firmware from the command line using multiple build systems. CMake lets you generate the build system that fits your needs, using the tools you like. It can generate any type of build system, from simple Makefiles, to complete projects for Eclipse, Visual Studio, XCode, etc.\n\nRequirements: cmake, arduino, avr-gcc, avr-binutils, avr-libc, avrdude.\n\n"
    },
    {
      "title": "Makefile",
      "level": 3,
      "content": "Instead of using the Arduino IDE it is possible to use another editor and a Makefile.\n\nSet up a directory to program your Arduino and copy the Makefile into this directory. A copy of the Makefile can be obtained from this GitHub template. You will have to modify this a little bit to reflect your settings. The makefile should be pretty self explanatory. Here are some lines you may have to edit.\n\n```\nPORT = usually /dev/ttyUSBx, where x is the usb serial port your arduino is plugged into\nTARGET = your sketch's name\nARDUINO = /usr/share/arduino/lib/targets/arduino\n```\n\nDepending on which library functions you call in your sketch, you may need to compile parts of the library. To do that you need to edit your SRC and CXXSRC to include the required libraries.\n\nNow you should be able to make && make upload to your board to execute your sketch.\n\n"
    },
    {
      "title": "Arduino-mk",
      "level": 3,
      "content": "arduino-mk is another alternative Makefile approach. It allows users to have a local Makefile that includes Arduino.mk.\n\nFor Arduino 1.5, try the following local Makefile (because Arduino 1.5's library directory structure is slightly different):\n\n```\nARDUINO_DIR = /usr/share/arduino\nARDMK_DIR = /usr/share/arduino\nAVR_TOOLS_DIR = /usr\nAVRDUDE_CONF = /etc/avrdude.conf\nARDUINO_CORE_PATH = /usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino\nARDUINO_PLATFORM_LIB_PATH = /usr/share/arduino/hardware/archlinux-arduino/avr/libraries\nBOARDS_TXT = /usr/share/arduino/hardware/archlinux-arduino/avr/boards.txt\nARDUINO_VAR_PATH = /usr/share/arduino/hardware/archlinux-arduino/avr/variants\nBOOTLOADER_PARENT = /usr/share/arduino/hardware/archlinux-arduino/avr/bootloaders\n\n\nBOARD_TAG    = uno\nARDUINO_LIBS =\n\ninclude /usr/share/arduino/Arduino.mk\n```\n\nIn some cases you could need to install avr-libc and avrdude.\n\n"
    },
    {
      "title": "Scons",
      "level": 3,
      "content": "Using scons together with arscons it is very easy to use to compile and upload Arduino projects from the command line. Scons is based on python and you will need python-pyserial to use the serial interface. Install python-pyserial and scons.\n\nThat will get the dependencies you need too. You will also need Arduino itself so install it as described above. Create project directory (eg. test), then create an arduino project file in your new directory. Use the same name as the directory and add .ino (eg. test.ino). Get the SConstruct script from arscons and put it in your directory. Have a peek in it and, if necessary, edit it. It is a python script. Edit your project as you please, then run\n\n```\n$ scons                # This will build the project\n$ scons upload         # This will upload the project to your Arduino\n```\n\n"
    },
    {
      "title": "PlatformIO",
      "level": 3,
      "content": "PlatformIO is a python tool to build and upload sketches for multiple Hardware Platforms, at the moment of writing these are Arduino/AVR based boards, TI MSP430 and TI TM4C12x Boards. In the near future the author plans to add a library function that allows to search and include libraries directly from GitHub.\n\n"
    },
    {
      "title": "Installation",
      "level": 4,
      "content": "Install the platformio-core or platformio-gitAUR package.\n\n"
    },
    {
      "title": "Usage",
      "level": 4,
      "content": "The following is based on the official PlatformIO quickstart guide, which shows how to create and upload an example project.\n\nCreate a new directory for the platformio project and enter the directory. Then run the following command to initialize the project for a specific board (here the megaatmega2560):\n\n```\n$ pio project init --board megaatmega2560\n```\n\nThis downloads the tool chain and dependencies, and creates platformio.ini:\n\n```\nplatformio.ini\n```\n\n```\n; PlatformIO Project Configuration File\n[env:megaatmega2560]\nplatform = atmelavr\nboard = megaatmega2560\nframework = arduino\n```\n\nCreate and add code to main.cpp in the src/ folder such as the example code in the quickstart guide.\n\nThen compile the code and upload it to the devices specified in platformio.ini:\n\n```\n$ pio run\n$ pio run --target upload\n```\n\n"
    },
    {
      "title": "Emacs",
      "level": 3,
      "content": "It is possible to configure Emacs as IDE.\n\nInstall the package emacs-arduino-mode-gitAUR in order to enable the arduino-mode in emacs.\n\nAdd to the init script:\n\n```\n~/.emacs\n```\n\n```\n;; arduino-mode\n(require 'cl)\n(autoload 'arduino-mode \"arduino-mode\" \"Arduino editing mode.\" t)\n(add-to-list 'auto-mode-alist '(\"\\.ino$\" . arduino-mode))\n```\n\nYou can compile and upload the sketches using Arduino-mk (see above) with M-x compile make upload.\n\nMain resource: here.\n\n"
    },
    {
      "title": "Consistent naming of Arduino devices",
      "level": 3,
      "content": "If you have more than one Arduino you may have noticed that they names /dev/ttyUSB[0-9] are assigned in the order of connection. In the IDE this is not so much of a problem, but when you have programmed your own software to communicate with an Arduino project in the background this can be annoying. Use the following udev rules to assign static symlinks to your Arduino's:\n\n```\n/etc/udev/rules.d/52-arduino.rules\n```\n\n```\nSUBSYSTEMS==\"usb\", KERNEL==\"ttyUSB[0-9]*\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"6001\", SYMLINK+=\"sensors/ftdi_%s{serial}\"\n```\n\nYour Arduino's will be available under names like /dev/sensors/ftdi_A700dzaF. If you want you can also assign more meaningful names to several devices like this:\n\n```\n/etc/udev/rules.d/52-arduino.rules\n```\n\n```\nSUBSYSTEMS==\"usb\", KERNEL==\"ttyUSB[0-9]*\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"6001\", ATTRS{serial}==\"A700dzaF\", SYMLINK+=\"arduino/nano\"\n```\n\nwhich will create a symlink in /dev/arduino/nano to the device with the specified serialnumber. You do need to unplug and replug your Arduino for this to take effect or run\n\n```\n# udevadm trigger\n```\n\nCommon idVendor/idProduct pairs can be found in /usr/share/arduino/hardware/archlinux-arduino/avr/boards.txt in the distribution package. Note that some of them (notably FTDI ones) are not unique to the Arduino platform. Using serial attribute is a good way to distinguish between various devices.\n\n"
    },
    {
      "title": "Error opening serial port",
      "level": 3,
      "content": "You may see the serial port initially when the IDE starts, but the TX/RX leds do nothing when uploading. You may have previously changed the baudrate in the serial monitor to something it does not like. Edit ~/.arduino/preferences.txt so that serial.debug_rate is a different speed, like 115200.\n\n"
    },
    {
      "title": "Working with Uno/Mega2560",
      "level": 3,
      "content": "The Arduino Uno and Mega2560 have an onboard USB interface (an Atmel 8U2) that accepts serial data, so they are accessed through /dev/ttyACM0 created by the cdc-acm kernel module when it is plugged in.\n\nThe 8U2 firmware may need an update to ease serial communications. See [2] for more details and reply #11 for a fix. The original arduino bbs, where you can find an image explaining how to get your Uno into DFU, is now in a read-only state. If you do not have an account to view the image, see [3].\n\nYou can perform a general function test of the Uno by putting it in loopback mode and typing characters into the arduino serial monitor at 115200 baud. It should echo the characters back to you. To put it in loopback, short pins 0 -> 1 on the digital side and either hold the reset button or short the GND -> RESET pins while you type.\n\n"
    },
    {
      "title": "Not recognizing USB port with Mega2560 cheap Chinese clones",
      "level": 3,
      "content": "Try installing its driver: i2c-ch341-dkmsAUR.\n\n"
    },
    {
      "title": "Fails to upload: programmer is not responding",
      "level": 3,
      "content": "Changing processor setting from ATmega328P to ATmega328P (Old Bootloader) (See Tools->Processor in Arduino IDE) may help with upload failures.\n\n"
    },
    {
      "title": "Serial port conflict with brltty",
      "level": 3,
      "content": "If the serial port for the arduino is not visible at /dev/ttyUSB*, and the journal contains the following when the device is connected:\n\n```\nusb 3-1: usbfs: interface 0 claimed by ch341 while 'brltty' sets config #1\nch341-uart ttyUSB0: ch341-uart converter now disconnected from ttyUSB0\n```\n\nThen you may need to uninstall the brltty package. See [4] for more details.\n\n"
    },
    {
      "title": "Failure to upload with Nano RP2040 Connect",
      "level": 3,
      "content": "If your upload fails with:\n\n```\nFailed uploading: uploading error: exit status 1\n```\n\nyou have skipped #Accessing serial: follow its directions to allow read/write access to the serial port to users.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official website\n- IDE v2 Getting Started Guide\n- https://answers.ros.org/question/9097/how-can-i-get-a-unique-device-path-for-my-arduinoftdi-device/\n\n"
    }
  ]
}