{
  "title": "SSD Benchmarking",
  "url": "https://wiki.archlinux.org/title/SSD_Benchmarking",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Improving performance\n- Stress testing\n\nBenchmarking is the act of measuring performance and comparing the results to another system's results or a widely accepted standard through a unified procedure. This unified method of evaluating system performance can help answer questions such as:\n\n- Is the system performing as it should?\n- What driver version should be used to get optimal performance?\n- Is the system capable of doing task x?\n\nMany tools can be used to determine system performance, the following provides a list of tools available.\n\n"
    },
    {
      "title": "UnixBench",
      "level": 3,
      "content": "Install unixbenchAUR, to run the benchmark run ubench.\n\nSee also:\n\n- https://github.com/kdlucas/byte-unixbench\n- https://github.com/kdlucas/byte-unixbench/blob/master/UnixBench/USAGE\n\n"
    },
    {
      "title": "interbench",
      "level": 3,
      "content": "interbench is an application designed to benchmark interactivity in Linux. It is designed to measure the effect of changes in Linux kernel design or system configuration changes such as CPU, I/O scheduler and filesystem changes and options.\n\ninterbench is available in the AUR: interbenchAUR.\n\nSee also:\n\n- Realtime process management\n- Advanced traffic control\n- Linux-ck\n- Linux-pf\n\n"
    },
    {
      "title": "fio",
      "level": 3,
      "content": "fio (Flexible I/O Tester) is a utility that can simulate various workloads such as several threads issuing reads using asynchronous I/O. Fio spawns a number of threads or processes doing a particular type of I/O action as specified by the user. Docs\n\nExample usage:\n\n```\n# fio --filename=/mnt/test.fio --size=8GB --direct=1 --rw=randrw --bs=4k --ioengine=libaio --iodepth=256 --runtime=120 --numjobs=4 --time_based --group_reporting --name=iops-test-job --eta-newline=1\n```\n\n"
    },
    {
      "title": "ttcp",
      "level": 3,
      "content": "ttcp (Test TCP) measures point-to-point bandwidth over any network connection. The program must be provided on both nodes between which bandwidth is to be determined.\n\nVarious flavors of ttcp can be found in the AUR:\n\n- ttcpAUR\n- nuttcpAUR\n\n"
    },
    {
      "title": "iperf",
      "level": 3,
      "content": "iperf is an easy to use point-to-point bandwidth testing tool that can use either TCP or UDP. It has nicely formatted output and a parallel test mode.\n\niperf can be installed, or a different version of iperf is available with iperf3.\n\n"
    },
    {
      "title": "time",
      "level": 3,
      "content": "The time(1) command provides timing statistics about the command run by displaying the time that passed between invocation and termination. time contains the time command and some shells provide time as a builtin command.\n\n```\n$ time tar -zxvf archive.tar.gz\n```\n\n"
    },
    {
      "title": "hdparm",
      "level": 3,
      "content": "Storage media can be benchmarked with hdparm (hdparm). Using hdparm with the -Tt switch, one can time sequential reads. This method is independent of partition alignment!\n\n```\n# hdparm -Tt /dev/sdX\n```\n\n```\n/dev/sdX:\nTiming cached reads:   x MB in  y seconds = z MB/sec\nTiming buffered disk reads:  x MB in  y seconds = z MB/sec\n```\n\n"
    },
    {
      "title": "gnome-disks",
      "level": 3,
      "content": "There is a graphical benchmark called gnome-disks contained in the gnome-disk-utility package that will give min/max/ave reads along with average access time and a nice graphical display. This method is independent of partition alignment!\n\n```\n# gnome-disks\n```\n\nUsers will need to navigate through the GUI to the benchmark button (\"More actions...\" > \"Benchmark Volume...\"). Example\n\n"
    },
    {
      "title": "KDiskMark",
      "level": 3,
      "content": "kdiskmark is an HDD and SSD benchmark tool with a very friendly graphical user interface. KDiskMark with its presets and powerful GUI calls Flexible I/O Tester and handles the output to provide an easy to view and interpret comprehensive benchmark result.\n\n"
    },
    {
      "title": "systemd-analyze",
      "level": 3,
      "content": "```\n$ systemd-analyze plot > boot.svg\n```\n\nWill plot a detailed graphic with the boot sequence: kernel time, userspace time, time taken by each service. Example\n\n"
    },
    {
      "title": "dd",
      "level": 3,
      "content": "The dd utility can be used to measure both reads and writes. This method is dependent on partition alignment! In other words, if you failed to properly align your partitions, this fact will be seen here since you are writing and reading to a mounted filesystem.\n\nFirst, enter a directory on the SSD with at least 1.1 GB of free space (and one that gives your user wrx permissions) and write a test file to measure write speeds and to give the device something to read:\n\n```\n$ dd if=/dev/zero of=/path/to/SSD/tempfile bs=1M count=1024 conv=fdatasync,notrunc status=progress\n```\n\n```\n1024+0 records in\n1024+0 records out\nv bytes (w MB, x MiB) copied, y s, z MB/s\n```\n\nNext, clear the buffer-cache to accurately measure read speeds directly from the device:\n\n```\n# echo 3 > /proc/sys/vm/drop_caches\n$ dd if=tempfile of=/dev/null bs=1M count=1024 status=progress\n```\n\n```\n1024+0 records in\n1024+0 records out\nv bytes (w MB, x MiB) copied, y s, z MB/s\n```\n\nNow that the last file is in the buffer, repeat the command to see the speed of the buffer-cache:\n\n```\n$ dd if=tempfile of=/dev/null bs=1M count=1024 status=progress\n```\n\n```\n1024+0 records in\n1024+0 records out\nv bytes (w MB, x MiB) copied, y s, z MB/s\n```\n\nFinally, delete the temp file\n\n```\n$ rm tempfile\n```\n\n"
    },
    {
      "title": "dcfldd",
      "level": 3,
      "content": "Dcfldd does not print the average speed in MB/s like good old dd does but with time you can work around that.\n\nTime the run clearing the disk:\n\n```\n# time dcfldd if=/dev/zero of=/dev/sdX bs=4M\n```\n\n```\n18944 blocks (75776Mb) written.dcfldd:: No space left of device\nreal     16m17.033s\nuser     0m0.377s\nsys      0m51.160s\n```\n\nCalculate MB/s by dividing the output of the dcfldd command by the time in seconds. For this example: 75776Mb / (16.4 min * 60) = 77.0 MB/s.\n\n"
    },
    {
      "title": "7z",
      "level": 3,
      "content": "7z benchmark command can be used to measure the CPU speed in MIPS and also to check RAM for errors. Just install p7zip and run the command below. More detailed information can be found at [1].\n\n```\n$ 7z b\n```\n\n"
    },
    {
      "title": "peakperf",
      "level": 3,
      "content": "peakperf-gitAUR is a microbenchmark that achieves peak performance on x86_64 CPUs. Some issues may reduce the performance provided by your CPU, like CPU cooling. With peakperf you can check if your CPU provides the full power it is capable of doing.\n\nYou can calculate the performance (measured in GFLOP/s) you should get using your CPU (see [2]) and compare it with the performance that peakperf gives you. If both values are the same (or very similar), your CPU behaves as it should.\n\n"
    },
    {
      "title": "cryptsetup",
      "level": 3,
      "content": "cryptsetup benchmark can be used to measure the speed of various cryptographic algorithms (ciphers).\n\n```\n$ cryptsetup benchmark\n```\n\n"
    },
    {
      "title": "Bonnie++",
      "level": 3,
      "content": "bonnie++ is a C++ rewrite of the original Bonnie benchmarking suite is aimed at performing several tests of hard drive and filesystem performance.\n\nSee also:\n\n- Author's site\n- Wikipedia:Bonnie++\n\n"
    },
    {
      "title": "IOzone",
      "level": 3,
      "content": "IOzone is useful for performing a broad filesystem analysis of a vendorâ€™s computer platform.\n\nThis program is available in the AUR: iozoneAUR.\n\nThe following can approximate the output of several tests of CrystalDiskMark, a popular Windows benchmarking utility:\n\n1. Sequential 1M read/write: iozone -e -I -s 1g -r 1m -i 0 -i 1\n1. Sequential 128k read/write: iozone -e -I -s 1g -r 128k -i 0 -i 1\n1. Random 4k read/write: iozone -e -I -s 1g -r 4k -i 0 -i 2 -i 1\n\nResults will be in Kb/s so divide by 1024 to get them in MB/s.\n\nSee also BBS Article: iozone to evaluate I/O schedulers... results NOT what you'd expect!.\n\n"
    },
    {
      "title": "HardInfo",
      "level": 3,
      "content": "hardinfo2AUR can gather information about your system's hardware and operating system, perform benchmarks, and generate printable reports either in HTML or in plain text formats. HardInfo performs CPU and FPU benchmarks and has a very clean GTK-based interface.\n\n"
    },
    {
      "title": "Phoronix Test Suite",
      "level": 3,
      "content": "The Phoronix Test Suite is the most comprehensive testing and benchmarking platform available that provides an extensible framework for which new tests can be easily added. The software is designed to effectively carry out both qualitative and quantitative benchmarks in a clean, reproducible, and easy-to-use manner.\n\nThe Phoronix Test Suite is based upon the extensive testing and internal tools developed by Phoronix.com since 2004 along with support from leading tier-one computer hardware and software vendors. This software is open-source and licensed under the GNU GPLv3.\n\nOriginally developed for automated Linux testing, support to the Phoronix Test Suite has since been added for OpenSolaris, Apple macOS, Microsoft Windows, and BSD operating systems. The Phoronix Test Suite consists of a lightweight processing core (pts-core) with each benchmark consisting of an XML-based profile and related resource scripts. The process from the benchmark installation, to the actual benchmarking, to the parsing of important hardware and software components is heavily automated and completely repeatable, asking users only for confirmation of actions.\n\nThe Phoronix Test Suite interfaces with OpenBenchmarking.org as a collaborative web platform for the centralized storage of test results, sharing of test profiles and results, advanced analytical features, and other functionality. Phoromatic is an enterprise component to orchestrate test execution across multiple systems with remote management capabilities.\n\nThis suite can be installed with the package phoronix-test-suiteAUR. There is also a developmental version available with phoronix-test-suite-gitAUR.\n\n"
    },
    {
      "title": "S",
      "level": 3,
      "content": "S, an I/O Benchmark Suite, is a small collection of scripts to measure storage I/O performance.\n\nDownload or clone the project, install its dependencies and run it as root (privileges needed to change disk scheduler).\n\n"
    },
    {
      "title": "s-tui",
      "level": 3,
      "content": "s-tui is an aesthetically pleasing and useful curses-style interface that shows graphs of CPU frequency, utilization, temperature, power consumption and has a built in stress tester.\n\n"
    },
    {
      "title": "sysbench",
      "level": 3,
      "content": "sysbench is an all-round multi-threaded benchmark tool. Written in C and Perl, it can be used in CLI directly to benchmark filesystem, DRAM, CPU, thread-based scheduler and POSIX mutex performance. Or it can be used as Lua script interpreter to benchmark any arbitrarily complex workload. It provides a collection of scripts for database benchmarks.\n\n"
    },
    {
      "title": "Flash media",
      "level": 2,
      "content": "Performance characteristics can be measured quantitatively using iozoneAUR. Sustained read and write values can, but often do not, correlate to real-world use cases of I/O heavy operations, such as unpacking and writing a number of files on a system update. A relevant metric to consider in these cases is the random write speed for small files.\n\nThe example invocation tests a 10M file using a 4k record size:\n\n```\n$ iozone -e -I -a -s 10M -r 4k -i 0 -i 1 -i 2\n```\n\n```\n...\n\n                                                                random   random\n              kB  reclen    write  rewrite    read    reread    read     write\n           10240       4      661      649     5802     5822     3892      624\n```\n\n"
    },
    {
      "title": "Basemark GPU",
      "level": 3,
      "content": "Basemark GPU is an evaluation tool to analyze and measure graphics API (OpenGL 4.5, OpenGL ES 3.1, Vulkan and Microsoft DirectX 12) performance across mobile and desktop platforms. Basemark GPU targets both Desktop and Mobile platforms by providing both High Quality and Medium Quality modes. The High-Quality mode addresses cutting-edge Desktop workloads while the Medium Quality mode addresses equivalent Mobile workloads.\n\nIf you are using AMD GPU and have several vulkan implementations installed simultaneously, in the Test page you will see them as separate GPUs in Graphics Device dropdown list.\n\nBasemark GPU is available in basemarkAUR package.\n\n"
    },
    {
      "title": "Blender-benchmark",
      "level": 3,
      "content": "Blender-benchmark will gather information about the system, such as operating system, RAM, graphics cards, CPU model, as well as information about the performance of the system during the execution of the benchmark. After that, the user will be able to share the result online on the Blender Open Data platform, or to save the data locally.\n\nBlender-benchmark is available in the blender-benchmarkAUR package.\n\n"
    },
    {
      "title": "GFXBench",
      "level": 3,
      "content": "GFXBench is a high-end graphics benchmark that measures mobile and desktop performance with next-gen graphics features across all platforms. As a true cross-API benchmark, GFXBench supports all the industry-standard and vendor-specific APIs including OpenGL, OpenGL ES, Vulkan, Metal, DirectX/Direct3D and DX12.\n\nVulkan API tests are currently under development and are only available for their corporate partners.\n\nGFXBench is available in gfxbenchAUR package.\n\n"
    },
    {
      "title": "glmark2",
      "level": 3,
      "content": "glmark2 is an OpenGL 2.0 and ES 2.0 benchmark.\n\nglmark2 is available in glmark2 package.\n\n"
    },
    {
      "title": "glxgears",
      "level": 3,
      "content": "glxgears is a popular OpenGL test that renders a very simple OpenGL performance and outputs the frame rate. Though glxgears can be useful as a test of direct rendering capabilities of the graphics driver, it is an outdated tool that is not representative of the current state of GNU/Linux graphics and overall OpenGL possibilities. glxgears only tests a small segment of the OpenGL capabilities that might be used in a game. Performance increases noted in glxgears will not necessarily be realized in any given game. See here for more information.\n\nglxgears can be installed via the mesa-utils and lib32-mesa-utils (for multilib) packages.\n\n"
    },
    {
      "title": "GpuTest",
      "level": 3,
      "content": "GpuTest is a cross-platform (Windows, Linux and Max OS X) GPU stress test and OpenGL benchmark. GpuTest comes with several GPU tests including some popular ones from Windows'world (FurMark or TessMark).\n\nGpuTest is available in gputestAUR package.\n\n"
    },
    {
      "title": "intel-gpu-tools",
      "level": 3,
      "content": "intel-gpu-tools gives you some top-like info for the integrated GPU. This can be quite useful in diagnosing GPU acceleration issues.\n\nTo use it, install the intel-gpu-tools package.\n\n"
    },
    {
      "title": "MangoHud",
      "level": 3,
      "content": "See MangoHud.\n\n"
    },
    {
      "title": "Unigine Engine",
      "level": 3,
      "content": "Unigine corp. has produced several modern OpenGL benchmarks based on their graphics engine with features such as:\n\n- Per-pixel dynamic lighting\n- Normal & parallax occlusion mapping\n- 64-bit HDR rendering\n- Volumetric fog and light\n- Powerful particle systems: fire, smoke, explosions\n- Extensible set of shaders (GLSL / HLSL)\n- Post-processing: depth of field, refraction, glow, blurring, color correction and much more.\n\nUnigine benchmarks have found recent usage by those looking to overclock their systems. Heaven especially has been used for initial stability testing of overclocks.\n\nThese benchmarks can be found in AUR:\n\n- unigine-sanctuaryAUR (2007)\n- unigine-tropicsAUR (2008)\n- unigine-heavenAUR (2009)\n- unigine-valleyAUR (2013)\n- unigine-superpositionAUR (2017)\n\n"
    },
    {
      "title": "vkmark",
      "level": 3,
      "content": "vkmark is an extensible Vulkan benchmarking suite with targeted, configurable scenes.\n\nvkmark is available in vkmark package.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Linux Benchmarking Homepage\n- Phoronix.com\n- Interbench Homepage\n- Unigine.com\n\n"
    }
  ]
}