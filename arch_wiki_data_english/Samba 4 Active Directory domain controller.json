{
  "title": "Samba 4 Active Directory domain controller",
  "url": "https://wiki.archlinux.org/title/Samba_4_Active_Directory_domain_controller",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Active Directory Integration\n- Samba\n- SOGo\n\nThis article explains how to setup an Active Directory domain controller using Samba. It is assumed that all configuration files are in their unmodified, post-installation state. This article was written and tested on a fresh installation, with no modifications other than setting up a static IPv4 network connection (required). Finally, most of the commands below will require elevated privileges. Despite conventional wisdom, it may be easier to run these short few commands from a root session as opposed to obtaining rights on an as needed basis.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "A fully functional samba domain controller requires several programs beyond those included with the Samba distribution. Install the krb5, ntp, python-dnspython, python-markdown, openresolv and samba packages from the official repositories.\n\nSamba contains its own fully functional DNS server, but if you need to maintain DNS zones for external domains, you are strongly encouraged to use BIND instead. If you need to share printers, you will also need CUPS. If needed, install the bind and/or cups packages.\n\n"
    },
    {
      "title": "Provisioning",
      "level": 3,
      "content": "The first step to creating an Active Directory domain is provisioning. This involves setting up the internal LDAP, Kerberos, and DNS servers and performing all of the basic configuration needed for the directory. If you have set up a directory server before, you are undoubtedly aware of the potential for errors in making these individual components work together as a single unit. The difficulty in doing so is the very reason that the Samba developers chose to provide internal versions of these programs. The server packages above were installed only for the client utilities. Provisioning is quite a bit easier with Samba. Just issue the following command:\n\n```\n# samba-tool domain provision --use-rfc2307 --interactive\n```\n\n"
    },
    {
      "title": "Argument explanations",
      "level": 4,
      "content": "Alternately, you can review the help for the provision step by running samba-tool domain provision --help.\n\n"
    },
    {
      "title": "NTPD",
      "level": 4,
      "content": "Create a suitable NTP configuration for your network time server. See Network Time Protocol daemon for explanations of, and additional configuration options.\n\nModify the /etc/ntp.conf file with the following contents:\n\n```\n/etc/ntp.conf\n```\n\n```\n# Please consider joining the pool:\n#\n#     http://www.pool.ntp.org/join.html\n#\n# For additional information see:\n# - https://wiki.archlinux.org/index.php/Network_Time_Protocol_daemon\n# - http://support.ntp.org/bin/view/Support/GettingStarted\n# - the ntp.conf man page\n\n# Associate to Arch's NTP pool\nserver 0.arch.pool.ntp.org\nserver 1.arch.pool.ntp.org\nserver 2.arch.pool.ntp.org\nserver 3.arch.pool.ntp.org\n\n# Restrictions\nrestrict default kod limited nomodify notrap nopeer mssntp\nrestrict 127.0.0.1\nrestrict ::1\nrestrict 0.arch.pool.ntp.org mask 255.255.255.255 nomodify notrap nopeer noquery\nrestrict 1.arch.pool.ntp.org mask 255.255.255.255 nomodify notrap nopeer noquery\nrestrict 2.arch.pool.ntp.org mask 255.255.255.255 nomodify notrap nopeer noquery\nrestrict 3.arch.pool.ntp.org mask 255.255.255.255 nomodify notrap nopeer noquery\n\n# Location of drift file\ndriftfile /var/lib/ntp/ntpd.drift\n\n# Location of the update directory\nntpsigndsocket /var/lib/samba/ntp_signd/\n```\n\nCreate the state directory and set permissions:\n\n```\n# install -d /var/lib/samba/ntp_signd\n# chown root:ntp /var/lib/samba/ntp_signd\n# chmod 0750 /var/lib/samba/ntp_signd\n```\n\nEnable and start the ntpd.service unit.\n\n"
    },
    {
      "title": "BIND",
      "level": 4,
      "content": "If you elected to use the BIND9_DLZ DNS backend, Install the bind package and create the following BIND configuration. See BIND for explanations of, and additional configuration options. Be sure to replace the x characters with suitable values:\n\nCreate the /etc/named.conf file:\n\n```\n/etc/named.conf\n```\n\n```\n// vim:set ts=4 sw=4 et:\nacl local-networks {\n    127.0.0.0/8;\n    xxx.xxx.xxx.xxx/xx;\n// Uncomment the following line(s) if using IPv6\n    //::1/128;\n    //xxxx:xxxx:xxxx:xxxx::/64;\n};\n\noptions {\n    directory \"/var/named\";\n    pid-file \"/run/named/named.pid\";\n    session-keyfile \"/run/named/session.key\";\n\n    // Uncomment this line to enable IPv6 connections support\n    //  listen-on-v6 { any; };\n    // Add this for no IPv4:\n    //  listen-on { none; };\n\n    // Add any subnets or hosts you want to allow to the local-networks acl\n    allow-query       { local-networks; };\n    allow-recursion   { local-networks; };\n    allow-query-cache { local-networks; };\n    allow-transfer    { none; };\n    allow-update      { none; };\n\n    version none;\n    hostname none;\n    server-id none;\n\n    auth-nxdomain yes;\n    datasize default;\n    empty-zones-enable no;\n    tkey-gssapi-keytab \"/var/lib/samba/bind-dns/dns.keytab\";\n\n    // Uncomment if you wish to use ISP forwarders\n    //  forwarders { xxx.xxx.xxx.xxx; xxx.xxx.xxx.xxx; };\n};\n\nzone \"localhost\" IN {\n    type master;\n    file \"localhost.zone\";\n};\n\nzone \"0.0.127.in-addr.arpa\" IN {\n    type master;\n    file \"127.0.0.zone\";\n};\n\nzone \"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa\" {\n    type master;\n    file \"localhost.ip6.zone\";\n};\n\n// Load AD integrated zones\ninclude \"/var/lib/samba/bind-dns/named.conf\";\n\n//zone \"example.org\" IN {\n//    type slave;\n//    file \"example.zone\";\n//    masters {\n//        192.168.1.100;\n//    };\n//    allow-query { any; };\n//    allow-transfer { any; };\n//};\n\nlogging {\n    channel xfer-log {\n        file \"/var/log/named.log\";\n            print-category yes;\n            print-severity yes;\n            severity info;\n        };\n        category xfer-in { xfer-log; };\n        category xfer-out { xfer-log; };\n        category notify { xfer-log; };\n};\n```\n\nSet permissions:\n\n```\n# chgrp named /var/lib/samba/private/dns.keytab\n# chmod g+r /var/lib/samba/private/dns.keytab\n# touch /var/log/named.log\n# chown root:named /var/log/named.log\n# chmod 664 /var/log/named.log\n```\n\nEnable and start the named.service unit.\n\nGood values for forwarders are your ISP's DNS servers. Google (8.8.8.8, 8.8.4.4, 2001:4860:4860::8888, and 2001:4860:4860::8844) and OpenDNS (208.67.222.222, 208.67.220.220, 2620:0:ccc::2 and 2620:0:ccd::2) provide suitable public DNS servers free of charge. Appropriate values for subnets are specific to your network.\n\n"
    },
    {
      "title": "Kerberos client utilities",
      "level": 4,
      "content": "The provisioning step above created a perfectly valid krb5.conf file for use with a Samba domain controller. Install it with the following commands:\n\n```\n# mv /etc/krb5.conf{,.default}\n# cp /var/lib/samba/private/krb5.conf /etc\n```\n\n"
    },
    {
      "title": "DNS",
      "level": 4,
      "content": "You will need to begin using the local DNS server now. Reconfigure resolvconf to use only localhost for DNS lookups. Create the /etc/resolv.conf.tail (do not forget to substitute internal.domain.tld with your internal domain):\n\n```\n# Samba configuration\nsearch internal.domain.tld\n# If using IPv6, uncomment the following line\n#nameserver ::1\nnameserver 127.0.0.1\n```\n\nSet permissions and regenerate the new /etc/resolv.conf file:\n\n```\n# chmod 644 /etc/resolv.conf.tail\n# resolvconf -u\n```\n\n"
    },
    {
      "title": "Samba",
      "level": 4,
      "content": "Enable and start the samba.service unit. If you intend to use the LDB utilities, you will also need create the /etc/profile.d/sambaldb.sh file to set LDB_MODULES_PATH:\n\n```\nexport LDB_MODULES_PATH=\"${LDB_MODULES_PATH}:/usr/lib/samba/ldb\"\n```\n\nSet permissions on the file and source it:\n\n```\n# chmod 0755 /etc/profile.d/sambaldb.sh\n# . /etc/profile.d/sambaldb.sh\n```\n\n"
    },
    {
      "title": "DNS",
      "level": 4,
      "content": "First, verify that DNS is working as expected. Execute the following commands substituting appropriate values for internal.domain.com and server:\n\n```\n# host -t SRV _ldap._tcp.internal.domain.com.\n# host -t SRV _kerberos._udp.internal.domain.com.\n# host -t A server.internal.domain.com.\n```\n\nYou should receive output similar to the following:\n\n```\n_ldap._tcp.internal.domain.com has SRV record 0 100 389 server.internal.domain.com.\n_kerberos._udp.internal.domain.com has SRV record 0 100 88 server.internal.domain.com.\nserver.internal.domain.com has address xxx.xxx.xxx.xxx\n```\n\n"
    },
    {
      "title": "NT authentication",
      "level": 4,
      "content": "Next, verify that password authentication is working as expected:\n\n```\n# smbclient //localhost/netlogon -U Administrator -c 'ls'\n```\n\nYou will be prompted for a password (the one you selected earlier), and will get a directory listing like the following:\n\n```\n.                                   D        0  Wed Nov 27 23:59:07 2013\n  ..                                  D        0  Wed Nov 27 23:59:12 2013\n\n\t\t50332 blocks of size 2097152. 47185 blocks available\n```\n\n"
    },
    {
      "title": "Kerberos",
      "level": 4,
      "content": "Now verify that the KDC is working as expected. Be sure to replace INTERNAL.DOMAIN.COM and use uppercase letters:\n\n```\n# kinit administrator@INTERNAL.DOMAIN.COM\n```\n\nYou should be prompted for a password and get output similar to the following:\n\n```\nWarning: Your password will expire in 41 days on Wed 08 Jan 2014 11:59:11 PM CST\n```\n\nVerify that you actually got a ticket:\n\n```\n# klist\n```\n\nYou should get output similar to below:\n\n```\nTicket cache: FILE:/tmp/krb5cc_0\nDefault principal: administrator@INTERNAL.DOMAIN.COM\n\nValid starting       Expires              Service principal\n11/28/2013 00:22:17  11/28/2013 10:22:17  krbtgt/INTERNAL.DOMAIN.COM@INTERNAL.DOMAIN.COM\n\trenew until 11/29/2013 00:22:14\n```\n\nAs a final test, use smbclient with your recently acquired ticket. Replace server with the correct server name:\n\n```\n# smbclient //server/netlogon -k -c 'ls'\n```\n\nThe output should be the same as when testing password authentication above.\n\n"
    },
    {
      "title": "DNS",
      "level": 4,
      "content": "You will also need to create a reverse lookup zone for each subnet in your environment in DNS. It is important that this is kept in Samba's DNS as opposed to BIND to allow for dynamic updates by cleints. For each subnet, create a reverse lookup zone with the following commands. Replace server.internal.domain.tld and xxx.xxx.xxx with appropriate values. For xxx.xxx.xxx, use the first three octets of the subnet in reverse order (for example: 192.168.0.0/24 becomes 0.168.192):\n\n```\n# samba-tool dns zonecreate server.internal.domain.tld xxx.xxx.xxx.in-addr.arpa -U Administrator\n```\n\nNow, add a record for you server (if your server is multi-homed, add for each subnet) again substituting appropriate values as above. zzz will be replaced by the fourth octet of the IP for the server:\n\n```\n# samba-tool dns add server.internal.domain.tld xxx.xxx.xxx.in-addr.arpa zzz PTR server.internal.domain.tld -U Administrator\n```\n\nFinally, test the lookup. Replace xxx.xxx.xxx.xxx with the IP of your server:\n\n```\n# host -t PTR xxx.xxx.xxx.xxx\n```\n\nYou should get output similar to the following:\n\n```\nxxx.xxx.xxx.xxx.in-addr.arpa domain name pointer server.internal.domain.tld.\n```\n\n"
    },
    {
      "title": "TLS",
      "level": 4,
      "content": "TLS support is not enabled by default, however, a default certificate was created when the DC was brought up. With the release of Samba 4.3.8 and 4.2.2, unsecured LDAP binds are disabled by default, and you must configure TLS to use Samba as an authentication source (without reducing the security of your Samba installation). To use the default keys, append the following lines to the \"[global]\" section of the /etc/samba/smb.conf file:\n\n```\n/etc/samba/smb.conf\n```\n\n```\n[global]\ntls enabled  = yes\ntls keyfile  = tls/key.pem\ntls certfile = tls/cert.pem\ntls cafile   = tls/ca.pem\n```\n\nIf a trusted certificate is needed, create a signing key and a certificate request (see OpenSSL for detailed instructions). Get the request signed by your chosen certificate authority, and put into this directory. If your certificate authority also needs an intermediate certificate, concatenate the certs (server cert first, then intermediate) and leave tls cafile blank.\n\nRestart samba for the changes to take effect.\n\n"
    },
    {
      "title": "Prerequisites",
      "level": 3,
      "content": "As with the provisioning setup when setting up a new domain, you must have ntp configured per the above instructions. Additionally, some of the arguments and parameters on the original domain setup must be replicated here.\n\n"
    },
    {
      "title": "Argument explanations",
      "level": 4,
      "content": "See the output of samba-tool domain join --help for additional options.\n\n"
    },
    {
      "title": "Joining an existing domain as a new DC",
      "level": 3,
      "content": "Execute the following command (adding any necessary parameters above to the end of the command):\n\n```\n# samba-tool domain join internal.domain.tld DC -U\"INTERNAL\\administrator\"\n```\n\nNow copy the krb5.conf:\n\n```\n# cp /var/lib/samba/private/krb5.conf /etc/krb5.conf\n```\n\nIf you used the RFC 2307 schema extensions, you need to copy the idmap from an existing DC. If using Samba, execute the following command from another DC:\n\n```\n# tdbbackup -s .bak /var/lib/samba/private/idmap.ldb\n```\n\nThis will generate a file /var/lib/samba/private/idmap.ldb.bak, transfer this file to the new server in the /var/lib/samba/private directory, removing the .bak extension. If you intend to keep multiple DCs, you will need to automate this process going forward using one of the methods listed on the Samba website here. This also applies to transferring the idmap from Windows DCs.\n\nEnable and start the samba.service unit.\n\nIf using BIND9_DLZ DNS backend, you'll need to follow the BIND section above. Check if the /var/lib/samba/private/dns directory is created, and if not, run the following command (ignore warning about updating named.conf):\n\n```\n# samba_upgradedns --dns-backend=BIND9_DLZ\n```\n\nRestart the named.service and then update the DNS records with the following command:\n\n```\n# samba_dnsupdate --all-names --use-samba-tool --verbose\n```\n\nNow proceed with LDB configuration and testing as with a new domain here.\n\n"
    },
    {
      "title": "Transferring the FSMO roles",
      "level": 3,
      "content": "If this is intended to replace an existing domain controller, you will need to transfer the FSMO roles before demoting the existing DC. This is currently outside the scope of this document. See the Samba wiki here.\n\n"
    },
    {
      "title": "Printing",
      "level": 3,
      "content": "By default, a Samba server, when configured as a domain controller, does not enable printing by default. You will need to add the following lines to the global section of the /etc/samba/smb.conf file:\n\n```\n/etc/samba/smb.conf\n```\n\n```\n[global]\n...\n        rpc_server:spoolss = external\n        rpc_daemon:spoolssd = fork\n        printing = CUPS\n...\n[printers]\n       path = /var/spool/samba/\n       printable = yes\n```\n\nThe above configuration will enable automatic sharing of all CUPS print queues. If you wish to share only specific print queues, you will want to add the following additional lines (removing the [printers] share above):\n\n```\n/etc/samba/smb.conf\n```\n\n```\n[global]\n...\n        load printers = no\n...\n# Add an example print share\n[HPDJ3050]\n       path = /var/spool/samba/\n       printable = yes\n       printer name = hpdj3050\n```\n\n"
    },
    {
      "title": "DHCP with dynamic DNS updates",
      "level": 3,
      "content": "It should be noted that using this method will affect functionality of windows clients, as they will still attempt to update DNS on their own. When this occurs, the machine will be denied permission to do so as the record will be owned by the dhcp user rather than the machine account. While this is essentially harmless, it will generate warnings in the system log of the offending machine. You should create a GPO to overcome this, but unfortunately, Samba does not yet have a command line utility to modify GPOs. You will need a Windows PC with the RSAT tools installed. Simply create a dedicated GPO with the Group Policy Editor, and apply only to OUs that contain workstations using DHCP (so that Samba/Windows servers and statically configured Samba/Windows clients can still update using 'ipconfig /registerdns') and configure the following settings:\n\n```\nComputer Configuration\n  Policies\n    Administrative Templates\n      Network\n        DNS Client\n          Dynamic Update = Disabled\n          Register PTR Records = Disabled\n```\n\nInstall the dhcp, sudo, and the samba-dhcpd-updateAUR packages.\n\nCreate an unprivileged user in AD for performing the updates. When prompted for password, use a secure password. 63 random, mixed case, alpha-numeric characters is sufficient. Optionally samba-tool also takes a random argument:\n\n```\n# samba-tool user create dhcp --description=\"Unprivileged user for DNS updates via DHCP server\"\n```\n\nSince this is a service account, disabling password expiration on the user account is recommended, but not required:\n\n```\n# samba-tool user setexpiry dhcp --noexpiry\n```\n\nGive the user privileges to administer DNS:\n\n```\n# samba-tool group addmembers DnsAdmins dhcp\n```\n\nCreate an SPN and export the users credentials to a private keytab:\n\n```\n# samba-tool spn add server/server.internal.domain.tld@INTERNAL.DOMAIN.TLD dhcp\n# samba-tool domain exportkeytab --principal=dhcp@INTERNAL.DOMAIN.TLD dhcpd.keytab\n# install -vdm 755 /etc/dhcpd\n# mv dhcpd.keytab /etc/dhcpd\n# chown root:root /etc/dhcpd/dhcpd.keytab\n# chmod 400 /etc/dhcpd/dhcpd.keytab\n```\n\nModify the dhcpd-update-samba-dns.conf file with the following commands (substituting correct values for server, internal.domain.tld, and INTERNAL.DOMAIN.TLD):\n\n```\n/etc/dhcpd/dhcpd-update-samba-dns.conf\n```\n\n```\n# Variables\nKRB5CC=\"/tmp/dhcpd4.krb5cc\"\nKEYTAB=\"/etc/dhcpd/dhcpd.keytab\"\nDOMAIN=\"internal.domain.tld\"\nREALM=\"INTERNAL.DOMAIN.TLD\"\nPRINCIPAL=\"dhcp@${REALM}\"\nNAMESERVER=\"server.${DOMAIN}\"\nZONE=\"${DOMAIN}\"\n```\n\nGrant the dhcp user account permissions to run the update script without a password prompt (replace server with the hostname of the server):\n\n```\n/etc/sudoers.d/dhcp-update\n```\n\n```\ndhcp server = (root) NOPASSWD: /usr/bin/dhcpd-update-samba-dns.sh\n```\n\nConfigure the dhcpd server following the dhcpd article and add the following to all subnet declarations in the /etc/dhcpd.conf file that provide DHCP service:\n\n```\non commit {\n    set ClientIP = binary-to-ascii(10, 8, \".\", leased-address);\n    set ClientName = pick-first-value(option host-name, host-decl-name);\n    execute(\"/usr/bin/sudo\", \"/usr/bin/dhcpd-update-samba-dns.sh\", \"add\", ClientIP, ClientName);\n  }\n\n  on release {\n    set ClientIP = binary-to-ascii(10, 8, \".\", leased-address);\n    set ClientName = pick-first-value(option host-name, host-decl-name);\n    execute(\"/usr/bin/sudo\", \"/usr/bin/dhcpd-update-samba-dns.sh\", \"delete\", ClientIP, ClientName);\n  }\n\n    on expiry {\n    set ClientIP = binary-to-ascii(10, 8, \".\", leased-address);\n    set ClientName = pick-first-value(option host-name, host-decl-name);\n    execute(\"/usr/bin/sudo\", \"/usr/bin/dhcpd-update-samba-dns.sh\", \"delete\", ClientIP, ClientName);\n```\n\nHere is a complete example /etc/dhcpd.conf file for reference:\n\n```\n/etc/dhcpd.conf\n```\n\n```\nsubnet 192.168.1.0 netmask 255.255.255.0 {\n  range 192.168.1.100 192.168.1.199;\n  option subnet-mask 255.255.255.0;\n  option routers 192.168.1.254;\n  option domain-name \"internal.domain.tld\";\n  option domain-name-servers 192.168.1.1;\n  option broadcast-address 192.168.1.255;\n  default-lease-time 28800;\n  max-lease-time 43200;\n  authoritative;\n\n  on commit {\n    set ClientIP = binary-to-ascii(10, 8, \".\", leased-address);\n    set ClientName = pick-first-value(option host-name, host-decl-name);\n    execute(\"/usr/bin/sudo\", \"/usr/bin/dhcpd-update-samba-dns.sh\", \"add\", ClientIP, ClientName);\n  }\n\n  on release {\n    set ClientIP = binary-to-ascii(10, 8, \".\", leased-address);\n    set ClientName = pick-first-value(option host-name, host-decl-name);\n    execute(\"/usr/bin/sudo\", \"/usr/bin/dhcpd-update-samba-dns.sh\", \"delete\", ClientIP, ClientName);\n  }\n\n    on expiry {\n    set ClientIP = binary-to-ascii(10, 8, \".\", leased-address);\n    set ClientName = pick-first-value(option host-name, host-decl-name);\n    execute(\"/usr/bin/sudo\", \"/usr/bin/dhcpd-update-samba-dns.sh\", \"delete\", ClientIP, ClientName);\n  }\n}\n```\n\nFinally, enable and start (or restart) the dhcpd4 service.\n\n"
    },
    {
      "title": "Transferring users from one directory to another",
      "level": 3,
      "content": "Unfortunately, there is no built-in utility to export users from one directory to another. This is one way, albeit exceptionally ugly, to get the user specific fields out of your existing SAM and into a suitable LDIF format for ldbmodify:\n\n```\n# ldbsearch -H /var/lib/samba/private/sam.ldb \\\n    -s sub -b cn=Users,dc=internal,dc=domain,dc=tld '(objectClass=user)' | \\\n    grep -e \"^\\# record\" -e \"^accountExpires:\" -e \"^c:\" -e \"^cn:\" -e \"^co:\" -e \"^codePage:\" \\\n         -e \"^comment:\" -e \"^company:\" -e \"^countryCode:\" -e \"^department:\" \\\n         -e \"^description:\" -e \"^displayName\" -e \"^displayNamePrintable:\" \\\n         -e \"^distinguishedName\" -e \"^division:\" -e \"^dn:\" -e \"^employeeID:\" \\\n         -e \"^facsimileTelephoneNumber:\" -e \"^generationQualifier:\" \\\n         -e \"^givenName\" -e \"^homeDirectory:\" -e \"^homeDrive:\" -e \"^homePhone:\" \\\n         -e \"^homePostalAddress:\" -e \"^info:\" -e \"^initials:\" \\\n         -e \"^internationalISDNNumber:\" -e \"^ipPhone:\" -e \"^l:\" -e \"^mail:\" \\\n         -e \"^manager:\" -e \"^middleName:\" -e \"^mobile:\" -e \"^name:\" -e \"^o:\" \\\n         -e \"^objectClass\" -e \"^otherFacsimileTelephoneNumber:\" \\\n         -e \"^otherHomePhone:\" -e \"^otherIpPhone:\" -e \"^otherMailbox:\" \\\n         -e \"^otherMobile:\" -e \"^otherPager:\" -e \"^otherTelephone:\" -e \"^pager:\" \\\n         -e \"^personalTitle:\" -e \"^physicalDeliveryOfficeName:\" -e \"^postalAddress:\" \\\n         -e \"^postalCode:\" -e \"^postOfficeBox:\" -e \"^proxyAddresses\\: SMTP\" \\\n         -e \"^proxyAddresses: smtp\" -e \"^referredDeliveryMethod:\" \\\n         -e \"^primaryInternationalISDNNumber:\" -e \"^primaryTelexNumber:\" \\\n         -e \"^profilePath:\" -e \"^registeredAddress:\" -e \"^sAMAccountName:\" \\\n         -e \"^scriptPath:\" -e \"^sn:\" -e \"^st:\" -e \"^street:\" -e \"^streetAddress:\" \\\n         -e \"^telephoneNumber:\" -e \"^teletexTerminalIdentifier:\" \\\n         -e \"^telexNumber:\" -e \"^title:\" -e \"^userAccountControl:\" -e \"^userPrincipalName:\"\\\n         -e \"^url:\" -e \"^userSharedFolder:\" -e \"^userSharedFolderOther:\" -e \"^wWWHomePage:\" | \\\n    sed '/^dn:.*/ a\\changetype: add' | sed '/^# record/ i\\\\n' > user-export.ldif\n```\n\nExplanation: Run an ldbsearch in the users container only, using sub-tree search for objectclass=user. If you need the whole directory, you can modify the search base to use the root or some other OU. The output from ldbsearch is then piped into a really long grep command that returns only appropriate attributes to keep in the new directory. This is obviously subjective, and probably should be tailored to your specific use case. Finally, we use sed to insert the changetype line (needed to tell ldbmodify that we are adding a user), and prefix with a blank line (to make it easier to read) for each exported object.\n\nTo import, after editing the file and transferring to the new server, simply run the following command on your new samba domain controller:\n\n```\n# ldbmodify -H /var/lib/samba/private/sam.ldb user-export.ldif\n```\n\n"
    },
    {
      "title": "Password Complexity",
      "level": 3,
      "content": "By default, Samba requires strong passwords. To disable the complexity check, issue the following command:\n\n```\n# samba-tool domain passwordsettings set --complexity=off\n```\n\nSet Password Settings Objects in the Samba wiki for more information\n\n"
    }
  ]
}