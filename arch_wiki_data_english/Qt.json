{
  "title": "Qt",
  "url": "https://wiki.archlinux.org/title/Qt",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- KDE\n- Uniform look for Qt and GTK applications\n- GTK\n\nQt is a cross-platform application and widget toolkit that uses standard C++ but makes extensive use of a special code generator (called the Meta Object Compiler, or moc) together with several macros to enrich the language. Some of its more important features include:\n\n- Running on the major desktop platforms and some of the mobile platforms.\n- Extensive internationalization support.\n- A complete library that provides SQL database access, XML parsing, thread management, network support, and a unified cross-platform application programming interface (API) for file handling.\n\nThe Qt framework is the basis of the KDE software community, as well as other important open source and proprietary applications such as VLC, VirtualBox, Mathematica and many others.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Qt 6.x and 5.x are available in the official repositories. Legacy versions of Qt (4.x and 3.x) are available from the AUR. They can be installed with the following packages:\n\n- Qt 6.x is available in the qt6-base package, with documentation in the qt6-doc package.\n- Qt 5.x is available in the qt5-base package, with documentation in the qt5-doc package.\n- Qt 4.x is available in the qt4AUR package, with documentation in the qt4-docAUR package.\n- Qt 3.x is available in the qt3AUR package, without documentation package.\n\n"
    },
    {
      "title": "Known issues",
      "level": 2,
      "content": "Note: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\n- Qt applications improperly renders emojis with the variation selector character without workarounds (tracked in QTBUG-97401)\n- Qt applications improperly renders multi-character emojis if a character is in the preferred font (tracked in QTBUG-97400)\n\n"
    },
    {
      "title": "Default Qt toolkit",
      "level": 2,
      "content": "To define the default Qt toolkit, you can create the QT_SELECT environment variable. For example, to use Qt n, set QT_SELECT=n.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n"
    },
    {
      "title": "Styles in Qt 5",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nQt 5 decides the style to use based on what desktop environment is used:\n\n- In KDE Plasma, it uses the actually selected Qt style. It can be configured using KDE System Settings (systemsettings), the settings can be found in Appearance > Application Style > Widget Style.\n- In Cinnamon, GNOME, MATE, LXDE, Xfce, it uses GTK (QGtkStyle).\n- In other desktop environments, it uses Fusion.\n\nTo force a specific style, you can set the QT_STYLE_OVERRIDE environment variable. Specifically, set it to gtk2 if you want to use the GTK theme (Note: you will need to install the Qt style plugins mention below to get the GTK style). Qt 5 applications also support the -style flag, which you can use to launch a Qt 5 application with a specific style.\n\nThe following styles are included in Qt 5: Fusion, Windows. Others can be installed separately:\n\n- Breeze — Artwork, styles and assets for the Breeze visual style for the Plasma Desktop.\n\n- Oxygen — KDE Oxygen style.\n\n- Lightly — Lightly is a fork of breeze theme style that aims to be visually modern and minimalistic.\n\n- QtCurve — A configurable set of widget styles for KDE and Gtk.\n\n- Adwaita-Qt — A style to bend Qt applications to look like they belong into GNOME Shell.\n\n- Qt style plugins — Additional style plugins for Qt 5, including GTK, Cleanlooks, Motif, Plastique.\n\n- Kvantum — customizable SVG-based theme engine with a variety of built-in styles, including imitations of some popular GTK themes such as Adapta, Arc, Ambiance\n\n"
    },
    {
      "title": "Styles in Qt 4",
      "level": 3,
      "content": "Qt 4 application will try to mimic the behavior of the desktop environment they are running on, unless they run into some problems or hard-coded settings.\n\n- In KDE Plasma, it uses the actually selected Qt style. It can be configured using KDE System Settings (systemsettings), the settings can be found in Appearance > Application Style > Widget Style.\n- In Cinnamon, GNOME, Xfce, it uses GTK (QGtkStyle).\n- In other desktop environments, it uses Windows.\n\nFor those who want to change the look and feel of Qt 4 applications, the Qt Configuration (qtconfig-qt4) GUI tool is provided by the qt4AUR package. It offers a simple interface to configure the appearance of Qt 4 applications including style, colors, fonts and some further options.\n\nQt keeps all its configuration information in /etc/xdg/Trolltech.conf (system-wide) or ~/.config/Trolltech.conf (user-specific). The file is rather difficult to navigate because it contains a lot of information not related to appearance, but for any changes you can just add to the end of the file and overwrite any previous values (make sure to add your modification under the [Qt] header).\n\nFor example, to change the theme to QtCurve, add:\n\n```\n~/.config/Trolltech.conf\n```\n\n```\n...\n[Qt]\nstyle=QtCurve\n```\n\nThe following styles are included in Qt 4: CDE, Cleanlooks, GTK, Motif, Plastique, Windows. Others can be installed separately:\n\n- Adwaita-Qt — A style to bend Qt applications to look like they belong into GNOME Shell.\n\n"
    },
    {
      "title": "Qt Style Sheets",
      "level": 3,
      "content": "An interesting way of customizing the look and feel of a Qt application is using Style Sheets, which are just simple CSS files. Using Style Sheets, one can modify the appearance of every widget in the application.\n\nTo run an application with a different style just execute:\n\n```\n$ qt_application -stylesheet style.qss\n```\n\nFor more information on Qt Style Sheets see the official documentation or other tutorials. As an example Style Sheet see this Dolphin modification.\n\n"
    },
    {
      "title": "GTK and Qt",
      "level": 3,
      "content": "If you have GTK and Qt applications, their looks might not exactly blend in very well. If you wish to make your GTK styles match your Qt styles please read Uniform look for Qt and GTK applications.\n\n"
    },
    {
      "title": "Configuration of Qt 5/6 applications under environments other than KDE Plasma",
      "level": 3,
      "content": "Unlike Qt 4, Qt 5 does not ship a qtconfig utility to configure fonts, icons or styles. Instead, it will try to use the settings from the running desktop environment. In KDE Plasma or GNOME this works well, but in other less popular desktop environments or window managers it can lead to missing icons in Qt 5 applications. One way to solve this is to fake the running desktop environment by setting XDG_CURRENT_DESKTOP=KDE or GNOME, and then using the corresponding configuration application to set the desired icon set.\n\nAnother solution is provided by the qt5ct/qt6ct packages, which provide a QPA independent of the desktop environment and a configuration utility. After installing package, run qt5ct/qt6ct to set an icon theme, and set the environment variable QT_QPA_PLATFORMTHEME=qt5ct:qt6ct so that the settings are picked up by Qt applications. Alternatively, use --platformtheme qt5ct as argument to the Qt 5 application.\n\nqt5ct-kdeAUR and qt6ct-kdeAUR provide patched qt5ct/qt6ct with better integration to KDE applications, including KDE QML applications and can read and apply KColorSchemes.\n\nIf the errors below are received, and some icons still do not appear in some of the applications, install oxygen and oxygen-icons:\n\n```\nIcon theme \"oxygen\" not found.\nIcon theme \"oxygen\" not found.\nError: standard icon theme \"oxygen\" not found!\n```\n\n"
    },
    {
      "title": "Supported platforms",
      "level": 3,
      "content": "Qt supports most platforms that are available today, even some of the more obscure ones, with more ports appearing every once in a while. For a more complete list see the Qt Wikipedia article.\n\n"
    },
    {
      "title": "Android",
      "level": 4,
      "content": "First of all, you need an Android SDK and NDK from AUR or using Android Studio.\n\nSDK requires OpenJDK too. Different Qt versions have different version requirements, check here for detail.\n\nNext you are going to need Qt 5 for Android. You can install it from AUR as described below or build it yourself, you can find build instructions on Qt wiki page.\n\nIn case of problems you may want to visit known issues.\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n- android-armv7a-eabi-qt5AUR[broken link: package not found] - armeabi-v7a\n- android-aarch64-qt5AUR[broken link: package not found] - aarch64\n- android-x86-qt5AUR[broken link: package not found] - x86\n- android-x86-64-qt5AUR[broken link: package not found] - x86_64\n\nAlternatively, you can use the official Qt installer.\n\n"
    },
    {
      "title": "Tools",
      "level": 3,
      "content": "The following are official Qt tools:\n\n- Qt Creator — A cross-platform IDE tailored for Qt that supports all of its features.\n\n- Qt Linguist — A set of tools that speed the translation and internationalization of Qt applications.\n\n- Qt Assistant — A configurable and redistributable documentation reader for Qt qch files.\n\n- Qt Widgets Designer — A powerful cross-platform GUI layout and forms builder for Qt widgets.\n\n- Qt Quick Designer — A visual editor for QML files which supports WYSIWYG. It allows you to rapidly design and build Qt Quick applications and components from scratch.\n\n- qmlscene — A tool for loading QML documents that makes it easy to quickly develop and debug QML applications.\n\n- qmake — A tool that helps simplify the build process for development project across different platforms, similar to cmake, but with fewer options and tailored for Qt applications.\n\n- uic — A tool that reads *.ui XML files and generates the corresponding C++ files.\n\n- rcc — A tool that is used to embed resources (such as pictures) into a Qt application during the build process. It works by generating a C++ source file containing data specified in a Qt resource (.qrc) file.\n\n- moc — A tool that handles Qt's C++ extensions (the signals and slots mechanism, the run-time type information, and the dynamic property system, etc.).\n\n"
    },
    {
      "title": "Disable/Change Qt journal logging behaviour",
      "level": 3,
      "content": "When using KDE and/or any other Qt desktop environment debug info may be frequently logged in the systemd journal.\n\nSet QT_LOGGING_RULES as environment variable to change this behaviour, e.g. to completely disable logging:\n\n```\n/etc/environment\n```\n\n```\nQT_LOGGING_RULES='*=false'\n```\n\nTo disable only debug logging, use QT_LOGGING_RULES=\"*.debug=false\".\n\n"
    },
    {
      "title": "Icon theme is not applied",
      "level": 3,
      "content": "Since Qt 5.1 SVG support has moved into a module. Since qt5-base does not depend on qt5-svg it may happen that the qt5-base is installed but not qt5-svg. This results in deceptive icon theme behaviour. Since SVG is not supported the icons are silently skipped and the icon theme may seem to be unused. Installing qt5-svg explicitly solves the problem.\n\n"
    },
    {
      "title": "Theme not applied to root applications",
      "level": 3,
      "content": "As the user theme file ($XDG_CONFIG_HOME/Trolltech.conf), are not read by other accounts, the selected theme will not apply to X applications run as root. Possible solutions include:\n\n- Create symlinks, e.g # ln -s /home/[username]/.config/Trolltech.conf /etc/xdg/Trolltech.conf\n- Configure system-wide theme file: /etc/xdg/Trolltech.conf\n- Adjust the theme as root\n\n```\n# ln -s /home/[username]/.config/Trolltech.conf /etc/xdg/Trolltech.conf\n```\n\n"
    },
    {
      "title": "Qt 4 style not respected",
      "level": 3,
      "content": "If pure Qt 4 (non-KDE) applications do not stick with your selected Qt 4 style, then you will probably need to tell Qt 4 how to find KDE's styles (Oxygen, Phase etc.). You just need to set the environment variable QT_PLUGIN_PATH. E.g.:\n\n```\nQT_PLUGIN_PATH=$HOME/.kde4/lib/kde4/plugins/:/usr/lib/kde4/plugins/\n```\n\nqtconfig-qt4 should then be able to find your kde styles and everything should look nice again!\n\nAlternatively, you can symlink the Qt 4 styles directory to the KDE4 styles one:\n\n```\n# ln -s /usr/lib/{kde,qt}4/plugins/styles/theme_name\n```\n\n"
    },
    {
      "title": "All Qt 5-based applications fail to run after Qt 5 update",
      "level": 3,
      "content": "If you get an error similar to\n\n```\nQt FATAL: Cannot mix incompatible Qt library (version 0x50900) with this library (version 0x50901)\n```\n\nthen you are most likely using a Qt 5 platform theme or style plugin which has not been recompiled against the latest version of Qt 5. These usually use Qt private headers which means they depend on an exact version of Qt and not just a matching soname. Figure out which theme/style you are using by checking the QT_STYLE_OVERRIDE and QT_QPA_PLATFORMTHEME environment variables, and rebuild the AUR package that provides it.\n\n"
    },
    {
      "title": "QXcbConnection: XCB error: 2 (BadValue)",
      "level": 3,
      "content": "Create a file with such content [1]:\n\n```\n/etc/xdg/QtProject/qtlogging.ini\n```\n\n```\n[Rules]\nqt.qpa.xcb.xcberror=false\n```\n\n"
    },
    {
      "title": "Graphics misaligned or scaled improperly",
      "level": 3,
      "content": "See HiDPI#Qt 5.\n\n"
    },
    {
      "title": "Dead keys not working for Qt apps",
      "level": 3,
      "content": "If you have set the right keyboard configuration and dead keys are working in GTK apps (or other widget toolkits) but not in KDE or any Qt apps, then you might not have the proper compose file loaded in your Xorg session.\n\nA way to confirm that is to:\n\n1. launch a Qt app with qt.xkb.compose.debug logging rule enabled, eg. launching qtqr: QT_LOGGING_RULES=qt.xkb.compose.debug=true qtqr\n1. then try to write a character using a dead key, eg. <dead_circumflex> <e> for ê (LATIN SMALL LETTER E WITH CIRCUMFLEX)\n1. if you encounter qt.xkb.compose: failed to create compose table then you probably have this issue.\n\nTo fix this, first identify your locale. Then, if your locale doesn't have its own folder in /usr/share/X11/locale/, eg. fr_FR.UTF-8, look for it in the compose.dir mapping file to find the corresponding compose file (eg. en_US.UTF-8/Compose):\n\n```\n$ grep fr_FR.UTF-8 /usr/share/X11/locale/compose.dir\n```\n\n```\nen_US.UTF-8/Compose             fr_FR.UTF-8\nen_US.UTF-8/Compose:            fr_FR.UTF-8\n```\n\nNow create or edit ~/.XCompose to include this compose file:\n\n```\n~/.XCompose\n```\n\n```\ninclude \"%S/en_US.UTF-8/Compose\"\n```\n\nFinally, restart your Qt app, dead keys should be working and qt.xkb.compose: failed to create compose table error should have disappeared whenever you debug with QT_LOGGING_RULES=qt.xkb.compose.debug=true.\n\n"
    },
    {
      "title": "File dialog are very slow and crash the related application",
      "level": 3,
      "content": "The ~/.config/QtProject.conf file has been filled with garbage data and weighs hundreds of MiB: remove it. [2][3]\n\n"
    },
    {
      "title": "Qt 6.7 under Wayland sometimes ignore input method",
      "level": 3,
      "content": "Qt introduced text-input-v3 for Wayland platform. However, the implementation is not perfect and may cause serious issues preventing the usage of input method.\n\nSet the following environment variable globally if your Wayland compositor supports text-input-v2:\n\n```\n/etc/environment\n```\n\n```\nQT_WAYLAND_TEXT_INPUT_PROTOCOL=zwp_text_input_v2\n```\n\n"
    },
    {
      "title": "Emojis render as black and white despite a color emoji font being installed",
      "level": 3,
      "content": "Note: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\nQt does not support automatically looking up the best font for emojis, and therefore the user must manually add a color emoji font as a fallback. [4]\n\nTo do this, save the contents of this gist to /etc/fonts/conf.d/75-noto-color-emoji.conf. This adds noto-fonts-emoji as a fallback, though \"Noto Color Emoji\" can be replaced with a different font family if the user desires.\n\nAfterwards, relaunch the Qt applications affected to load the new font settings.\n\n"
    },
    {
      "title": "Crash or wrong scaling under Wayland",
      "level": 3,
      "content": "Some Qt apps, like keepassxc, crash [5] or suffer scaling issues [6] on Wayland.\n\nTo fix that, install qt5-wayland or qt6-wayland as explained on the Qt section of the Wayland page.\n\n"
    },
    {
      "title": "KDE Global Menu not working",
      "level": 3,
      "content": "Some Qt 5 apps like keepassxc, fails to use the Global Menu of KDE [7].\n\nTo fix that, install plasma5-integration as explained on the Troubleshooting section of the KDE page.\n\nQt 6 apps shouldn't pose a problem since plasma-integration is pulled by plasma-workspace.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official Website\n- Qt Documentation\n- Planet Qt\n\n"
    }
  ]
}