{
  "title": "Jre",
  "url": "https://wiki.archlinux.org/title/Jre",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Java Package Guidelines\n- Java Runtime Environment fonts\n\nFrom the Wikipedia article:\n\nArch Linux officially supports the open source OpenJDK versions 8, 11, 17 and 21 — Long-Term Support (LTS) versions, and 24 — the latest released version. All these JVMs can be installed without conflict and switched between using helper script archlinux-java (installed with java-runtime-common package). Several other Java environments are available in Arch User Repository but are not officially supported.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "- Arch Linux officially supports the OpenJDK implementations only.\n- After installation, the Java environment will need to be recognized by the shell ($PATH variable). This can be done by sourcing /etc/profile from the command line, by logging out/in again of the Desktop environment, or by rebooting.\n\nTwo common packages are respectively pulled as dependency, named java-runtime-common (containing common files for Java Runtime Environments) and java-environment-common (containing common files for Java Development Kits).\n\nThe provided /etc/profile.d/jre.sh and /etc/profile.d/jre.csh files point to a linked location /usr/lib/jvm/default/bin, set by the archlinux-java helper script.\n\nNote: **always** \n\nMost executables of the Java installation are provided by direct links in /usr/bin/, while others are available in $PATH.\n\n"
    },
    {
      "title": "OpenJDK",
      "level": 3,
      "content": "OpenJDK is an open-source implementation of the Java Platform, Standard Edition (Java SE), designated as the official reference implementation. There are several distributors of OpenJDK builds such as Adoptium (formerly known as AdoptOpenJDK) and Amazon Corretto. The Arch Linux OpenJDK packages are built from the upstream OpenJDK source code.\n\nJDK, full JRE and headless JRE conflict with each other, as the smaller packages are subsets:\n\n- JDK conflicts and provides full JRE,\n- full JRE conflicts and provides headless JRE.\n\nTable content:\nVersion | Headless JRE | Full JRE | JDK | Documentation | Sources\nOpenJDK 24 | jre-openjdk-headless | jre-openjdk | jdk-openjdk | openjdk-doc | openjdk-src\nOpenJDK 21 | jre21-openjdk-headless | jre21-openjdk | jdk21-openjdk | openjdk21-doc | openjdk21-src\nOpenJDK 17 | jre17-openjdk-headless | jre17-openjdk | jdk17-openjdk | openjdk17-doc | openjdk17-src\nOpenJDK 11 | jre11-openjdk-headless | jre11-openjdk | jdk11-openjdk | openjdk11-doc | openjdk11-src\nOpenJDK 8 | jre8-openjdk-headless | jre8-openjdk | jdk8-openjdk | openjdk8-doc | openjdk8-src\n\nIcedTea-Web — Java Web Start and the deprecated Java browser plugin.\n\nOpenJDK EA — OpenJDK Early-Access build for development version from Oracle.\n\nOpenJDK GA — OpenJDK General-Availability Release build from Oracle.\n\nOpenJDK Wakefield — Support implementation in JDK for the Wayland display server.\n\n"
    },
    {
      "title": "OpenJFX",
      "level": 3,
      "content": "OpenJFX is the open-source implementation of JavaFX. You do not need to install this package if you are using Oracle JDK. This package only concerns users of the open source implementation of Java (OpenJDK project), and its derivatives.\n\nTable content:\nVersion | Runtime Environment and Development Kit | Documentation | Sources\nOpenJFX 22 | java-openjfxAUR | java-openjfx-docAUR | java-openjfx-srcAUR\nOpenJFX 21 | java21-openjfxAUR | java21-openjfx-docAUR | java21-openjfx-srcAUR\nOpenJFX 17 | java17-openjfxAUR | java17-openjfx-docAUR | java17-openjfx-srcAUR\nOpenJFX 11 | java11-openjfxAUR | java11-openjfx-docAUR | java11-openjfx-srcAUR\nOpenJFX 8 | java8-openjfxAUR | java8-openjfx-docAUR | java8-openjfx-srcAUR\n\n"
    },
    {
      "title": "Other implementations",
      "level": 3,
      "content": "- AWS Corretto — Amazon Web Services' distribution of OpenJDK.\n\n- Azul JDK — Azul's JDK implementations. Note that the Azul Zulu Builds of OpenJDK are open source, while The Azul Zulu Prime Builds of OpenJDK are a commercial product free for development and evaluation.\n\n- Eclipse Adoptium/Temurin — Eclipse's implementation of JRE/JDK, based on the Hotspot JVM (formerly AdoptOpenJDK). Note that the JRE is known as Eclipse Temurin.\n\n- IBM Certified — IBM Semeru Runtime Certified Edition.\n\n- IBM J9 — IBM's implementation of JRE, using OpenJ9 contributions.\n\n- Liberica JDK — BellSoft's Liberica JDK implementation.\n\n- Microsoft OpenJDK — Microsoft's distribution of OpenJDK.\n\n- OpenJ9 — Eclipse's implementation of JRE/JDK, based on the J9 JVM, contributed by IBM.\n\n- Oracle JDK — Oracle's commercially licensed build of OpenJDK. Note that some versions are only available via manual download, which requires to sign the OTN agreement and create an Oracle account.\n\n"
    },
    {
      "title": "Development tools",
      "level": 3,
      "content": "For integrated development environments, see List of applications/Utilities#Integrated development environments and the Java IDEs subsection specifically.\n\nTo discourage reverse engineering an obfuscator like proguardAUR can be used.\n\n"
    },
    {
      "title": "Decompilers",
      "level": 4,
      "content": "- CFR — Java decompiler, supporting modern features of Java 9, 10 and beyond.\n\n- Fernflower — Analytical decompiler for Java, developed as part of IntelliJ IDEA.\n\n- Vineflower — Java decompiler forked from Fernflower, aiming to improve code quality. Also available as an IntelliJ IDEA plugin.\n\n- Krakatau — Java decompiler, assembler, and disassembler.\n\n- Procyon decompiler — Experimental Java decompiler, inspired by ILSpy and Mono.Cecil.\n\n- Java Decompiler (JD-Core) — Popular Java decompiler providing a GUI (see JD-GUI) and supporting Java 1-10.\n\n- Jadx — Android DEX to Java decompiler with an optional GUI (see Jadx-GUI).\n\n- JAD — Unmaintained Java decompiler (last release 2006).\n\n"
    },
    {
      "title": "GUI Frontends",
      "level": 4,
      "content": "- Bytecode Viewer — Java reverse engineering suite, including a decompiler, editor and debugger; Frontend for CFR/Fernflower/Procyon.\n\n- Recaf — An easy to use modern Java bytecode editor that abstracts away the complexities of Java programs; Frontend for CFR/Fernflower/Procyon.\n\n- Java Decompiler (JD-GUI) — Popular Java decompiler providing a GUI and supporting Java 1-10; Frontend for JD-Core.\n\n- Jadx-GUI — Android APK DEX to Java decompiler with an optional GUI; Frontend for Jadx.\n\n- Luyten — An Open Source Java Decompiler Gui; Frontend for Procyon.\n\n"
    },
    {
      "title": "Switching between JVM",
      "level": 2,
      "content": "The helper script archlinux-java (package : java-runtime-common) provides such functionalities:\n\n```\narchlinux-java <COMMAND>\n\nCOMMAND:\nstatus          List installed Java environments and enabled one\nget             Return the short name of the Java environment set as default\nset <JAVA_ENV>  Force <JAVA_ENV> as default\nunset           Unset current default Java environment\nfix             Fix an invalid/broken default Java environment configuration\n```\n\n"
    },
    {
      "title": "List compatible Java environments installed",
      "level": 3,
      "content": "```\n$ archlinux-java status\n```\n\nExample:\n\n```\n$ archlinux-java status\n```\n\n```\nAvailable Java environments:\n   java-11-openjdk (default)\n   java-8-openjdk/jre\n```\n\nNote the (default) denoting that java-11-openjdk is currently set as default. Invocation of java and other binaries will rely on this Java install. Also note on the previous output that only the JRE part of OpenJDK 8 is installed here.\n\n"
    },
    {
      "title": "Change default Java environment",
      "level": 3,
      "content": "```\n# archlinux-java set <JAVA_ENV_NAME>\n```\n\nExample:\n\n```\n# archlinux-java set java-8-openjdk/jre\n```\n\nNote that archlinux-java will not let you set an invalid Java environment. In the previous example, jre8-openjdk is installed but jdk8-openjdk is not so trying to set java-8-openjdk will fail:\n\n```\n# archlinux-java set java-8-openjdk\n```\n\n```\n'/usr/lib/jvm/java-8-openjdk' is not a valid Java environment path\n```\n\n"
    },
    {
      "title": "Unsetting the default Java environment",
      "level": 3,
      "content": "There should be no need to unset a Java environment as packages providing them should take care of this. Still should you want to do so, just use command unset:\n\n```\n# archlinux-java unset\n```\n\n"
    },
    {
      "title": "Fixing the default Java environment",
      "level": 3,
      "content": "If an invalid Java environment link is set, calling the archlinux-java fix command tries to fix it. Also note that if no default Java environment is set, this will look for valid ones and try to set it for you. Officially supported package \"OpenJDK 8\" will be considered first in this order, then other installed environments.\n\n```\n# archlinux-java fix\n```\n\n"
    },
    {
      "title": "Launching an application with the non-default Java version",
      "level": 3,
      "content": "If you want to launch an application with another version of Java than the default one (for example if you have both versions 18—the default—and 11 installed on your system, and you want to use Java 11), you can wrap your application in a small shell script to locally change the default path of Java:\n\n```\n#!/bin/sh\n\nexport PATH=\"/usr/lib/jvm/java-11-openjdk/bin/:$PATH\"\nexec /path/to/application \"$@\"\n```\n\nFor a systemd service you can append JAVA_HOME to environment variables in the drop-in file:\n\n```\n/etc/systemd/system/unit.d/override.conf\n```\n\n```\n[Service]\nEnvironment=JAVA_HOME=/usr/lib/jvm/java-11-openjdk\n```\n\n"
    },
    {
      "title": "Package pre-requisites to support archlinux-java",
      "level": 2,
      "content": "This section is targeted at packagers willing to provide packages in the AUR for an alternate JVM and be able to integrate with the Arch Linux JVM scheme (i.e. to be compatible with archlinux-java); to do so, packages should:\n\n- Place all files under /usr/lib/jvm/java-${JAVA_MAJOR_VERSION}-${VENDOR_NAME }\n- Ensure all executables for which java-runtime-common and java-environment-common provide links are available in the corresponding package\n- Ship links from /usr/bin to executables, only if these links do not already belong to java-runtime-common and java-environment-common\n- Suffix man pages with -${VENDOR_NAME}${JAVA_MAJOR_VERSION} to prevent conflicts (see jre8-openjdk file list where man pages are suffixed with -openjdk8)\n- Do not declare any conflicts nor replaces with other JDKs, java-runtime, java-runtime-headless nor java-environment\n- Use script archlinux-java in install functions to set the Java environment as default if no other valid Java environment is already set (ie: package should not force install as default). See officially supported Java environment package sources for examples\n\nAlso please note that:\n\n- Packages that need any Java environment should declare dependency on java-runtime, java-runtime-headless or java-environment as usual\n- Packages that need a specific Java vendor should declare dependency on the corresponding package\n- OpenJDK packages now declare provides=\"java-runtime-openjdk=${pkgver}\" etc. This enables a third-party package to declare dependency on an OpenJDK without specifying a version\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "Behavior of most Java applications can be controlled by supplying predefined variables to Java runtime. From this forum post, a way to do it consists of adding the following line in your ~/.bash_profile (or /etc/profile.d/jre.sh to affect programs that are not run by sourcing ~/.bash_profile):\n\n```\nexport JDK_JAVA_OPTIONS=\"-D<option 1> -D<option 2>...\"\n```\n\nFor example, to use system anti-aliased fonts and make swing use the GTK look and feel:\n\n```\nexport JDK_JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'\n```\n\nThree such variables exist, the options which are explained later in the table below take priority.\n\nTable content:\nJAVA_TOOL_OPTIONS | Affects applications as well as tools like javac or the jshell.\nJDK_JAVA_OPTIONS | Affects applications (everything started via the java command). Requires Java 9.\n(command line options) | Arguments specified before the \"class name\" argument are Java options.\n_JAVA_OPTIONS | The old way, affects applications and tools.\n\n"
    },
    {
      "title": "Better font rendering",
      "level": 3,
      "content": "Both closed source and open source implementations of Java are known to have improperly implemented anti-aliasing of fonts. This can be fixed with the following options: -Dawt.useSystemAAFontSettings=on, -Dswing.aatext=true\n\nSee Java Runtime Environment fonts for more detailed information.\n\n"
    },
    {
      "title": "Silence 'Picked up JDK_JAVA_OPTIONS' message on command line",
      "level": 3,
      "content": "Setting the JDK_JAVA_OPTIONS environment variables makes java (openjdk) write to stderr messages of the form: 'Picked up JDK_JAVA_OPTIONS=...'. To suppress those messages in your terminal you can unset the environment variable in your ~/.bashrc and alias java to pass those same options as command line arguments:\n\n```\nSILENT_JAVA_OPTIONS=\"$JDK_JAVA_OPTIONS\"\nunset JDK_JAVA_OPTIONS\nalias java='java \"$SILENT_JAVA_OPTIONS\"'\n```\n\nNon interactive shells, like the launcher scripts for Java programs, (usually) do not read the ~/.bashrc, but still inherited exported variables from their parent process (which in turn inherited it at some point from the login shell which read the ~/.bash_profile). As for the cases when they do, one put’s generally a statement at the top of the ~/.bashrc to avoid the file being read. That way, the variables are passed to programs launched via the desktop menu and in the case of an interactive shell where the message would disturb aliases are used instead (which in turn cannot be used in scripts).\n\n"
    },
    {
      "title": "GTK LookAndFeel",
      "level": 3,
      "content": "If your Java programs look ugly, you may want to set up the default look and feel for the swing components:\n\n```\nswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel\n```\n\nSome Java programs insist on using the cross platform Metal look and feel. In some of these cases you can force these applications to use the GTK look and feel by setting the following property:\n\n```\nswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel\n```\n\n"
    },
    {
      "title": "GTK3 Support",
      "level": 4,
      "content": "In Java releases prior to version 9, the GTK LookAndFeel is linked against GTK2, whilst many newer desktop applications use GTK3. This incompatibility between GTK versions may break applications utilizing Java plugins with GUI, as the mixing of GTK2 and GTK3 in the same process is not supported (for example, LibreOffice 5.0).\n\nThe GTK LookAndFeel can be run against GTK versions 2, 2.2 and 3, defaulting to GTK3. This can be overridden by setting the following property:\n\n```\njdk.gtk.version=2.2\n```\n\n"
    },
    {
      "title": "HiDPI",
      "level": 3,
      "content": "Depending on the GUI framework, HiDPI#Java applications can be enabled using different methods.\n\n"
    },
    {
      "title": "Better 2D performance",
      "level": 3,
      "content": "Switching to OpenGL-based hardware acceleration pipeline will improve 2D performance\n\n```\nexport JDK_JAVA_OPTIONS='-Dsun.java2d.opengl=true'\n```\n\n"
    },
    {
      "title": "MySQL",
      "level": 3,
      "content": "Due to the fact that the JDBC-drivers often use the port in the URL to establish a connection to the database, it is considered \"remote\" (i.e., MySQL does not listen to the port as per its default settings) despite the fact that they are possibly running on the same host, Thus, to use JDBC and MySQL you should enable remote access to MySQL, following the instructions in MariaDB#Grant remote access.\n\n"
    },
    {
      "title": "IntelliJ IDEA",
      "level": 3,
      "content": "If IntelliJ IDEA outputs The selected directory is not a valid home for JDK with the system Java SDK path, you may have to install a different JDK package and select it as IDEA's JDK.\n\n"
    },
    {
      "title": "Impersonate another window manager",
      "level": 3,
      "content": "You may use the wmname from suckless.org to make the JVM believe you are running a different window manager. This may solve a rendering issue of Java GUIs occurring in window managers like Awesome or Dwm or Ratpoison. This works because the JVM contains a hard-coded list of known, non-re-parenting window managers. For maximum irony, some users prefer to impersonate LG3D, the non-re-parenting window manager written by Sun, in Java. Try setting compiz, Metacity or LG3D.\n\n```\n$ wmname window_manager_name\n```\n\nYou must restart the application in question after issuing the wmname command.\n\nAlternatively, the javaagent JavaMatePatch, created to set the WM name in MATE and resolve the bug with java swing apps working incorrectly when launched in full screen, can be used. Add -javaagent:JavaMatePatch-1.0.0-SNAPSHOT.jar=window_manager_name to the java options to use it.\n\n"
    },
    {
      "title": "Illegible fonts",
      "level": 3,
      "content": "In addition to the suggestions mentioned below in #Better font rendering, some fonts may still not be legible afterwards. If this is the case, there is a good chance Microsoft fonts are being used. Install ttf-ms-fontsAUR.\n\n"
    },
    {
      "title": "Missing text in some applications",
      "level": 3,
      "content": "If some applications are completely missing texts it may help to use the options under #Tips and tricks as suggested in FS#40871.\n\n"
    },
    {
      "title": "Gray window, applications not resizing with WM, menus immediately closing",
      "level": 3,
      "content": "The standard Java GUI toolkit has a hard-coded list of \"non-reparenting\" window managers. If using one that is not on that list, there can be some problems with running some Java applications. One of the most common problems is \"gray blobs\", when the Java application renders as a plain gray box instead of rendering the GUI. Another one might be menus responding to your click, but closing immediately.\n\nThere are several things that may help:\n\n- See #Impersonate another window manager.\n- Set the _JAVA_AWT_WM_NONREPARENTING=1 environment variable.\n- For later versions, set the AWT_TOOLKIT=MToolkit environment variable.\n- For xmonad, use SetWMName. However, its effect may be canceled when also using XMonad.Hooks.EwmhDesktops. In this case, appending >> setWMName \"LG3D\" to the LogHook may help.\n\nFor more information, see Problems with Java applications, Applet java console.\n\n"
    },
    {
      "title": "System freezes when debugging JavaFX Applications",
      "level": 3,
      "content": "If your system freezes while debugging a JavaFX Application, you can try to supply the JVM option -Dsun.awt.disablegrab=true.\n\nSee https://bugs.java.com/bugdatabase/view_bug?bug_id=6714678\n\n"
    },
    {
      "title": "JavaFX's MediaPlayer constructor throws an exception",
      "level": 3,
      "content": "Creating instance of MediaPlayer class from JavaFX's sound modules might throw following exception (both Oracle JDK and OpenJDK)\n\n```\n... (i.e. FXMLLoader construction exceptions) ...\nCaused by: MediaException: UNKNOWN : com.sun.media.jfxmedia.MediaException: Could not create player! : com.sun.media.jfxmedia.MediaException: Could not create player!\n at javafx.scene.media.MediaException.exceptionToMediaException(MediaException.java:146)\n at javafx.scene.media.MediaPlayer.init(MediaPlayer.java:511)\n at javafx.scene.media.MediaPlayer.<init>(MediaPlayer.java:414)\n at <constructor call>\n...\n```\n\nwhich is a result of some incompatibilities of JavaFX with modern ffmpeg build delivered within Arch Linux repository.\n\nWorking solution is to install ffmpeg-compat-55AUR. Alternatively, installing ffmpeg3.4AUR may work if the previous version fails to build.\n\nSee https://www.reddit.com/r/archlinux/comments/70o8o6/using_a_javafx_mediaplayer_in_arch/\n\n"
    },
    {
      "title": "Java applications cannot open external links",
      "level": 3,
      "content": "If a Java application is not able to open a link to, for example, your web browser, install gvfs. This is required by the Desktop.Action.BROWSE method. See [1] An application printing the error message java.lang.UnsupportedOperationException: The BROWSE action is not supported on the current platform! is a solid indicator for this problem.\n\n"
    },
    {
      "title": "Error initializing QuantumRenderer: no suitable pipeline found",
      "level": 3,
      "content": "Possible issues / solutions:\n\n- GTK2 is missing. Install gtk2\n- OpenJFX is missing. Install java-openjfxAUR\n\n"
    }
  ]
}