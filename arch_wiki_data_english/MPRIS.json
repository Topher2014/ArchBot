{
  "title": "MPRIS",
  "url": "https://wiki.archlinux.org/title/MPRIS",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "MPRIS (Media Player Remote Interfacing Specification) is a standard D-Bus interface which aims to provide a common programmatic API for controlling media players.\n\nIt provides a mechanism for discovery, querying and basic playback control of compliant media players, as well as a track list interface which is used to add context to the active media item.\n\n"
    },
    {
      "title": "Supported clients",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n- Audacious\n- brave-nightly-binAUR\n- celluloid\n- Chromium\n- clementineAUR\n- cmus\n- deadbeefAUR (using deadbeef-mpris2-pluginAUR)\n- dragon\n- feishinAUR\n- Firefox\n- gmusicbrowserAUR\n- guayadequeAUR\n- KDE#KDE Connect\n- mpv#mpv-mpris\n- Music Player Daemon/Tips and tricks#MPRIS support\n- ncspot\n- N Music\n- plattenalbumAUR\n- Quod Libet\n- rage\n- resonanceAUR\n- smf-dsp-gitAUR\n- Spotify#MPRIS\n- spotify-player\n- spotube-binAUR\n- Telegram\n- tidal-hifi-binAUR\n- VLC\n\n"
    },
    {
      "title": "Playerctl",
      "level": 3,
      "content": "The playerctl utility provides a command line tool to send commands to MPRIS clients. The most common commands are play-pause, next and previous:\n\n```\n$ playerctl play-pause\n$ playerctl next\n$ playerctl previous\n```\n\nplayerctl will send the command to the first player it finds. To select a player manually, use the --player option, e.g. --player=vlc. For better automation playerctl comes with a daemon that keeps track of media player activity and directs commands to the one with most recent activity. You can spun it into the background with:\n\n```\n$ playerctld daemon\n```\n\nIn order to start playerctld when you log in, you may create the following systemd/User service:\n\n```\n~/.config/systemd/user/playerctld.service\n```\n\n```\n[Unit]\nDescription=Keep track of media player activity\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/playerctld daemon\n\n[Install]\nWantedBy=default.target\n```\n\nYou should then do a daemon-reload before enabling the service with the --user flag.\n\nAdditionally, playerctld has the ability to change an \"active\" player, which can be useful when you have multiple simultaneous media streams:\n\nTo switch to the next player, use:\n\n```\n$ playerctld shift\n```\n\nTo switch to the previous player, use:\n\n```\n$ playerctld unshift\n```\n\n"
    },
    {
      "title": "mpris-player-control",
      "level": 3,
      "content": "The mpris_player_control is a shell script which integrates dbus-send and pactl to control MPRIS clients. It supports the Play, Pause, PlayPause and Stop actions and sink volume control (mute/unmute/up/down) for Spotify.\n\nRun mpris_player_control -h to show basic script usage.\n\n"
    },
    {
      "title": "D-Bus",
      "level": 3,
      "content": "An alternative to the above is to manually use D-Bus, which should be available by default as it is a dependency of systemd.\n\nFor example, the following commands can be used to control Spotify with the supported Methods:\n\n```\n$ dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Method\n```\n\nSimilarly using busctl(1):\n\n```\n$ busctl --user call org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player Method\n```\n\n"
    },
    {
      "title": "Bluetooth",
      "level": 2,
      "content": "Media control from Bluetooth headsets and similar devices may be forwarded to MPRIS.\n\nInstall the bluez-utils package and run mpris-proxy. In order to start up mpris-proxy in the background and/or when your system starts, start/enable mpris-proxy.service with the --user flag.\n\n"
    }
  ]
}