{
  "title": "Gparted-Live",
  "url": "https://wiki.archlinux.org/title/Gparted-Live",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- fdisk\n- gdisk\n- Partitioning\n\nGNU Parted is a program for creating and manipulating partition tables. GParted is a GUI frontend.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install one of the following packages:\n\n- parted – command-line only.\n- gparted – a graphical front-end for parted.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Parted has two modes: command line and interactive. Parted should always be started with:\n\n```\n# parted device\n```\n\nwhere device is block device name like /dev/sda, /dev/nvme0n1, /dev/mmcblk0, etc. If you omit the device argument, parted will attempt to guess which device you want.\n\n"
    },
    {
      "title": "Command line mode",
      "level": 3,
      "content": "In command line mode, this is followed by one or more commands. For example:\n\n```\n# parted /dev/sda --script mklabel gpt mkpart P1 ext3 1MiB 8MiB\n```\n\n"
    },
    {
      "title": "Interactive mode",
      "level": 3,
      "content": "Interactive mode simplifies the partitioning process and reduces unnecessary repetition by automatically applying all partitioning commands to the specified device.\n\nIn order to start operating on a device, execute:\n\n```\n# parted /dev/sdx\n```\n\nYou will notice that the command-line prompt changes from a hash (#) to (parted): this also means that the new prompt is not a command to be manually entered when running the commands in the examples.\n\nTo see a list of the available commands, enter:\n\n```\n(parted) help\n```\n\nWhen finished, or if wishing to implement a partition table or scheme for another device, exit from parted with:\n\n```\n(parted) quit\n```\n\nAfter exiting, the command-line prompt will change back to #.\n\nIf you do not give a parameter to a command, Parted will prompt you for it. For example:\n\n```\n(parted) mklabel\nNew disk label type? gpt\n```\n\n"
    },
    {
      "title": "Rounding",
      "level": 2,
      "content": "Since many partitioning systems have complicated constraints, Parted will usually do something slightly different to what you asked. (For example, create a partition starting at 10.352Mb, not 10.4Mb) If the calculated values differ too much, Parted will ask you for confirmation. If you know exactly what you want, or to see exactly what Parted is doing, it helps to specify partition endpoints in sectors (with the \"s\" suffix) and give the \"unit s\" command so that the partition endpoints are displayed in sectors.\n\nAs of parted-2.4, when you specify start and/or end values using IEC binary units like “MiB”, “GiB”, “TiB”, etc., parted treats those values as exact, and equivalent to the same number specified in bytes (i.e., with the “B” suffix), in that it provides no “helpful” range of sloppiness. Contrast that with a partition start request of “4GB”, which may actually resolve to some sector up to 500MB before or after that point. Thus, when creating a partition, you should prefer to specify units of bytes (“B”), sectors (“s”), or IEC binary units like “MiB”, but not “MB”, “GB”, etc.\n\n"
    },
    {
      "title": "Create new partition table",
      "level": 3,
      "content": "- Check that your NVMe drives and Advanced Format hard disk drives are using the optimal logical sector size before partitioning.\n- Consider performing SSD memory cell clearing before partitioning an SSD.\n\nYou need to (re)create the partition table of a device when it has never been partitioned before, or when you want to change the type of its partition table. Recreating the partition table of a device is also useful when the partition scheme needs to be restructured from scratch.\n\nOpen each device whose partition table must be (re)created with:\n\n```\n# parted /dev/sdx\n```\n\nTo then create a new GUID Partition Table, use the following command:\n\n```\n(parted) mklabel gpt\n```\n\nTo create a new Master Boot Record/MS-DOS partition table instead, use:\n\n```\n(parted) mklabel msdos\n```\n\n"
    },
    {
      "title": "Partition schemes",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nYou can decide the number and size of the partitions the devices should be split into, and which directories will be used to mount the partitions in the installed system (also known as mount points). See Partitioning#Partition scheme for the required partitions.\n\nThe following command will be used to create partitions:\n\n```\n(parted) mkpart part-type-or-part-label fs-type start end\n```\n\n- part-type-or-part-label is interpreted differently based on the partition table: MBR: the parameter is interpreted as part-type, which can be one of primary, extended or logical. GPT: the parameter is interpreted as part-label, which sets the PARTLABEL attribute of the partition. To avoid setting a partition label, pass an empty quoted string (\"\"). Note: Many tutorials on the web use commands which start with mkpart primary even for GPT. They are wrong, this would set \"primary\" as the partition label.\n- fs-type is an identifier chosen among those listed by entering help mkpart as the closest match to the file system that you will use. The mkpart command does not actually create the file system: the fs-type parameter will simply be used by parted to set partition type GUID for GPT partitions or partition type ID for MBR partitions. Tip: parted maps types named after Linux native file systems to the same \"Linux filesystem\" partition type (GUID 0FC63DAF-8483-4772-8E79-3D69D8477DE4 or ID 0x83), so it is perfectly safe to e.g. use ext2 for an ext4-formatted partition. When using GPT, it is advised to follow the Discoverable Partitions Specification since systemd-gpt-auto-generator can automount them. The EFI system partition, XBOOTLDR partition, swap partition and home partition types can be changed using the set command, while for the root partition and others, you will need to specify the partition type UUID manually with the type command.\n- \n- start is the beginning of the partition from the start of the device. It consists of a number followed by a unit, for example 1MiB means start at 1 MiB.\n- end is the end of the partition from the start of the device (not from the start value). It has the same syntax as start, for example 100% means end at the end of the device (use all the remaining space).\n\n- MBR: the parameter is interpreted as part-type, which can be one of primary, extended or logical.\n- GPT: the parameter is interpreted as part-label, which sets the PARTLABEL attribute of the partition. To avoid setting a partition label, pass an empty quoted string (\"\"). Note: Many tutorials on the web use commands which start with mkpart primary even for GPT. They are wrong, this would set \"primary\" as the partition label.\n\n- parted maps types named after Linux native file systems to the same \"Linux filesystem\" partition type (GUID 0FC63DAF-8483-4772-8E79-3D69D8477DE4 or ID 0x83), so it is perfectly safe to e.g. use ext2 for an ext4-formatted partition.\n- When using GPT, it is advised to follow the Discoverable Partitions Specification since systemd-gpt-auto-generator can automount them. The EFI system partition, XBOOTLDR partition, swap partition and home partition types can be changed using the set command, while for the root partition and others, you will need to specify the partition type UUID manually with the type command.\n\n- On a disk with a MBR partition table leave at least 33 512-byte sectors (16.5 KiB) of free unpartitioned space at the end of the disk to allow converting between MBR and GPT.\n- If you do not want to leave unused space in the device, make sure that each partition starts where the previous one ends.\n\n- parted does not support specifying the start and end of a partition relative to the previous partition. See bug #59176 and bug #55841.\n- parted may issue a warning like:\n\n```\nWarning: The resulting partition is not properly aligned for best performance.\nIgnore/Cancel?\n```\n\nThe following command will be used to flag the partition that contains the /boot directory as bootable:\n\n```\n(parted) set partition boot on\n```\n\n- partition is the number of the partition to be flagged (see the output of the print command).\n- esp is an alias for boot on GPT. [2]\n- legacy_boot sets the Legacy BIOS Bootable attribute. This attribute is used by syslinux[3] and other software that has a traditional PC-AT BIOS firmware implementation.[4]\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "UEFI/GPT examples",
      "level": 4,
      "content": "In every instance, a special bootable EFI system partition is required.\n\nIf creating a new EFI system partition, use the following commands (the recommended size is at least 1 GiB):\n\n```\n(parted) mkpart \"EFI system partition\" fat32 1MiB 1025MiB\n(parted) set 1 esp on\n```\n\nThe remaining partition scheme is entirely up to you. For one root partition using 100% of remaining space:\n\n```\n(parted) mkpart \"root partition\" ext4 1025MiB 100%\n(parted) type 2 4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709\n```\n\nFor separate swap (4 GiB) and / (all remaining space) partitions:\n\n```\n(parted) mkpart \"swap partition\" linux-swap 1025MiB 5121MiB\n(parted) mkpart \"root partition\" ext4 5121MiB 100%\n(parted) type 3 4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709\n```\n\nAnd for separate swap (4 GiB), / (32 GiB) and /home (all remaining space) partitions:\n\n```\n(parted) mkpart \"swap partition\" linux-swap 1025MiB 5121MiB\n(parted) mkpart \"root partition\" ext4 5121MiB 37889MiB\n(parted) type 3 4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709\n(parted) mkpart \"home partition\" ext4 37889MiB 100%\n(parted) set 4 linux-home on\n```\n\n"
    },
    {
      "title": "BIOS/MBR examples",
      "level": 4,
      "content": "For a minimum single primary partition using all available disk space, the following command would be used:\n\n```\n(parted) mkpart primary ext4 1MiB 100%\n(parted) set 1 boot on\n```\n\nIn the following instance, a 4 GiB swap partition will be created, followed by a / partition using all the remaining space:\n\n```\n(parted) mkpart primary linux-swap 1MiB 4097MiB\n(parted) mkpart primary ext4 4097MiB 100%\n(parted) set 2 boot on\n```\n\nIn the final example below, separate /boot (1 GiB), swap (4 GiB), / (32 GiB), and /home (all remaining space) partitions will be created:\n\n```\n(parted) mkpart primary ext4 1MiB 1025MiB\n(parted) set 1 boot on\n(parted) set 1 bls_boot on\n(parted) mkpart primary linux-swap 1025MiB 5121MiB\n(parted) mkpart primary ext4 5121MiB 37889MiB\n(parted) mkpart primary ext4 37889MiB 100%\n```\n\n"
    },
    {
      "title": "Resizing partitions",
      "level": 3,
      "content": "- You can only move the end of the partition with parted.\n- As of parted v3.2 resizepart may need the use of #Interactive mode.[5]\n- These instructions apply to partitions that have ext2, ext3, ext4, or btrfs filesystems.\n\nIf you are growing a partition, you have to first resize the partition and then resize the filesystem on it, while for shrinking the filesystem must be resized before the partition to avoid data loss.\n\n"
    },
    {
      "title": "Growing partitions",
      "level": 4,
      "content": "To grow a partition (in parted interactive mode):\n\n```\n(parted) resizepart number end\n```\n\nWhere number is the number of the partition you are growing, and end is the new end of the partition (which needs to be larger than the old end).\n\nThen, to grow the (ext2/3/4) filesystem on the partition (if size is not specified, it will default to the size of the partition):\n\n```\n# resize2fs /dev/sdaX size\n```\n\nOr to grow a Btrfs filesystem:\n\n```\n# btrfs filesystem resize size /path/to/mount/point\n```\n\nWhere /path/to/mount/point stands for the mount point of the partition you are growing, and size in the form 16G or +1G is the new size or modification of the partition. Use max to fill the remaining space on the partition.\n\n"
    },
    {
      "title": "Shrinking partitions",
      "level": 4,
      "content": "To shrink an ext2/3/4 filesystem on the partition:\n\n```\n# resize2fs /dev/sdaX size\n```\n\nTo shrink a Btrfs filesystem:\n\n```\n# btrfs filesystem resize size /path/to/mount/point\n```\n\nWhere /path/to/mount/point stands for the mount point of the partition you are shrinking, and size is the new size of the partition.\n\nThen shrink the partition (in parted interactive mode):\n\n```\n(parted) resizepart number end\n```\n\nWhere number is the number of the partition you are shrinking, and end is the new end of the partition (which needs to be smaller than the old end).\n\nWhen done, use the resizepart command from util-linux to tell the kernel about the new size:\n\n```\n# resizepart device number size\n```\n\nWhere device is the device that holds the partition, number is the number of the partition and size is the new size of the partition, in 512-byte sectors.\n\n"
    },
    {
      "title": "Known issues",
      "level": 2,
      "content": "Parted will always warn you before doing something that is potentially dangerous, unless the command is one of those that is inherently dangerous (e.g. rm, mklabel and mkpart).\n\n"
    },
    {
      "title": "Alignment",
      "level": 3,
      "content": "When creating a partition, parted might warn about improper partition alignment but does not hint about proper alignment. For example:\n\n```\n(parted) mkpart primary fat16 0 32M\nWarning: The resulting partition is not properly aligned for best performance.\nIgnore/Cancel?\n```\n\nThe warning means the partition start is not aligned. Enter \"Ignore\" to go ahead anyway, print the partition table in sectors to see where it starts, and remove/recreate the partition with the start sector rounded up to increasing powers of 2 until the warning stops. As one example, on a flash drive with 512B sectors, Parted wanted partitions to start on sectors that were a multiple of 2048, which is 1 MiB alignment.\n\nIf you want parted to attempt to calculate the correct alignment for you, specify the start position as 0% instead of some concrete value. To make one large ext4 partition, your command would look like this:\n\n```\n(parted) mkpart primary ext4 0% 100%\n```\n\n"
    },
    {
      "title": "Check alignment",
      "level": 3,
      "content": "On an already partitioned disk, you can use parted to verify the alignment of a partition on a device. For instance, to verify alignment of partition 1 on /dev/sda:\n\n```\n# parted /dev/sda\n(parted) align-check optimal 1\n1 aligned\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- GNU parted - Parted User's Manual\n- How to align partitions for best performance using parted\n- Resize an ext3/ext4 partition\n\n"
    }
  ]
}