{
  "title": "Avahi",
  "url": "https://wiki.archlinux.org/title/Avahi",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "From Wikipedia:Avahi (software):\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the avahi package and enable the avahi-daemon.service or use socket activation.\n\n"
    },
    {
      "title": "Hostname resolution",
      "level": 3,
      "content": "Avahi provides local hostname resolution using a \"hostname.local\" naming scheme. To enable it, install the nss-mdns package and start/enable avahi-daemon.service.\n\nThen, edit the file /etc/nsswitch.conf and change the hosts line to include mdns_minimal [NOTFOUND=return] before resolve and dns:\n\n```\nhosts: mymachines mdns_minimal [NOTFOUND=return] resolve [!UNAVAIL=return] files myhostname dns\n```\n\n- If you experience slowdowns in resolving .local hosts (or you do not want to use IPv6) try to use mdns4_minimal and mdns4 instead of mdns_minimal and mdns respectively.\n- The line above makes nss-mdns authoritative for the .local domain, unless your unicast DNS server responds to SOA queries for the top level local name, or if the request has more than two labels. See nss-mdns activation notes. systemd-resolved responds to these queries even if its mDNS support is disabled. See #systemd-resolved prevents nss-mdns from working. More info about nss configuration can be found on nss-mymachines(8) and in Avahi docs.\n\n- systemd-resolved responds to these queries even if its mDNS support is disabled. See #systemd-resolved prevents nss-mdns from working.\n- More info about nss configuration can be found on nss-mymachines(8) and in Avahi docs.\n\n"
    },
    {
      "title": "Configuring mDNS for custom TLD",
      "level": 4,
      "content": "The mdns_minimal module handles queries for the .local TLD only. Note the [NOTFOUND=return], which specifies that if mdns_minimal cannot find *.local, it will not continue to search for it in dns, myhostname, etc.\n\nIn case you want Avahi to support other TLDs, you should:\n\n- replace mdns_minimal [NOTFOUND=return] with the full mdns module. There also are IPv4-only and IPv6-only modules mdns[46](_minimal)\n- customize /etc/avahi/avahi-daemon.conf with the domain-name of your choice\n- whitelist Avahi custom TLDs in /etc/mdns.allow\n\n"
    },
    {
      "title": "Tools",
      "level": 4,
      "content": "Avahi includes several utilities which help you discover the services running on a network. For example, run this to discover services in your network:\n\n```\n$ avahi-browse --all --ignore-local --resolve --terminate\n```\n\nIf this command yields nothing, it is likely due to a firewall blocking mDNS traffic.\n\nIf you just want to do an mDNS query to resolve a .local hostname to an IP address (similar to dig or nslookup), use:\n\n```\n$ avahi-resolve-host-name some-host-name.local\n```\n\nNote that the getent hosts command can do both DNS and mDNS lookups.\n\nThe Avahi Zeroconf Browser avahi-discover shows the various services on your network. Note that it needs Avahi's optional dependencies gtk3, python-dbus and python-gobject. You can also browse SSH and VNC Servers using bssh and bvnc respectively.\n\n"
    },
    {
      "title": "Firewall",
      "level": 3,
      "content": "Be sure to open UDP port 5353 if you are using a firewall.\n\n"
    },
    {
      "title": "Link-Local (Bonjour/Zeroconf) chat",
      "level": 3,
      "content": "Avahi can be used for Bonjour protocol support under Linux. Check Wikipedia:Comparison of instant messaging clients or List of applications/Internet#Instant messaging clients for a list of clients supporting the Bonjour protocol.\n\n"
    },
    {
      "title": "Obtaining IPv4LL IP address",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with dhcpcd.** This article or section is a candidate for merging with dhcpcd.\n\nThis article or section is a candidate for merging with dhcpcd.\n\nThe dhcpcd client can attempt to obtain an IPv4LL address if it failed to get one via DHCP. By default this option is disabled. To enable it, comment noipv4ll string:\n\n```\n/etc/dhcpcd.conf\n```\n\n```\n...\n#noipv4ll\n...\n```\n\nAlternatively, run avahi-autoipd:\n\n```\n# avahi-autoipd -D\n```\n\n"
    },
    {
      "title": "Adding services",
      "level": 2,
      "content": "Avahi advertises the services whose *.service files are found in /etc/avahi/services. Files in this directory must be readable by the avahi user/group.\n\nIf you want to advertise a service for which there is no *.service file, it is very easy to create your own. As an example, let us say you wanted to advertise a quote of the day (QOTD) service operating per RFC:865 on TCP port 17 which you are running on your machine\n\nThe first thing to do is to determine the <type>. avahi.service(5) indicates that the type should be \"the DNS-SD service type for this service. e.g. '_http._tcp'\". Since the DNS-SD register was merged into the IANA register in 2010, we look for the service name on the IANA register or in /etc/services file. The service name shown there is qotd. Since we are running QOTD on tcp, we now know the service is _qotd._tcp and the port (per IANA and RFC 865) is 17.\n\nOur service file is thus:\n\n```\nqotd.service\n```\n\n```\n<?xml version=\"1.0\" standalone='no'?><!--*-nxml-*-->\n<!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n\n<service-group>\n\n  <name replace-wildcards=\"yes\">%h</name>\n\n  <service>\n    <type>_qotd._tcp</type>\n    <port>17</port>\n  </service>\n\n</service-group>\n```\n\nFor more complicated scenarios, such as advertising services running on a different server, DNS sub-types and so on, consult avahi.service(5).\n\nKeep in mind that Avahi does not support arbitrary strings in the <type> field, you can only set values known in service database of Avahi. If you want to register something custom you will likely have to edit the database definition, build an updated version and distribute it to your hosts.\n\n"
    },
    {
      "title": "SSH",
      "level": 3,
      "content": "Avahi comes with an example service file to advertise an SSH server. To enable it:\n\n```\n# cp /usr/share/doc/avahi/ssh.service /etc/avahi/services/\n```\n\n"
    },
    {
      "title": "NFS",
      "level": 4,
      "content": "If you have an NFS share set up, you can use Avahi to be able to automount them in Zeroconf-enabled browsers (such as Konqueror on KDE and Finder on macOS) or file managers such as GNOME/Files.\n\nCreate a .service file in /etc/avahi/services with the following contents:\n\n```\n/etc/avahi/services/nfs_Zephyrus_Music.service\n```\n\n```\n<?xml version=\"1.0\" standalone='no'?>\n<!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n<service-group>\n  <name replace-wildcards=\"yes\">NFS Music Share on %h</name>\n  <service>\n    <type>_nfs._tcp</type>\n    <port>2049</port>\n    <txt-record>path=/data/shared/Music</txt-record>\n  </service>\n</service-group>\n```\n\nThe port is correct if you have insecure as an option in your /etc/exports; otherwise, it needs to be changed (note that insecure is needed for macOS clients). The path is the path to your export, or a subdirectory of it. For some reason the automount functionality has been removed from Leopard, however a script is available. This was based upon this post.\n\n"
    },
    {
      "title": "Samba",
      "level": 4,
      "content": "With the Avahi daemon running on both the server and client, the file manager on the client should automatically find the server.\n\n"
    },
    {
      "title": "Vsftpd",
      "level": 4,
      "content": "You can also auto-discover regular FTP servers, such as vsftpd. Install the vsftpd package and change the settings of vsftpd according to your own personal preferences (see this thread on ubuntuforums.org or vsftpd.conf(5)).\n\nCreate a .service file in /etc/avahi/services with the following contents:\n\n```\n/etc/avahi/services/ftp.service\n```\n\n```\n<?xml version=\"1.0\" standalone='no'?>\n<!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n<service-group>\n  <name>FTP file sharing</name>\n  <service>\n    <type>_ftp._tcp</type>\n    <port>21</port>\n  </service>\n</service-group>\n```\n\nThe FTP server should now be advertised by Avahi. You should now be able to find the FTP server from a file manager on another computer in your network. You might need to enable #Hostname resolution on the client.\n\n"
    },
    {
      "title": "Hostname changes with appending incrementing numbers",
      "level": 3,
      "content": "This is a known bug that is caused by a hostname race condition. One possible workaround is disabling IPv6 to attempt to prevent the race condition. If multiple interfaces are present use allow-interfaces to limit Avahi to a single interface. Another possible workaround is to disable the cache to prevent Avahi from checking for host name conflicts altogether, but this prevents Avahi from performing lookups.\n\n"
    },
    {
      "title": "systemd-resolved prevents nss-mdns from working",
      "level": 3,
      "content": "nss-mdns only works if the DNS server listed in /etc/resolv.conf returns NXDOMAIN to SOA queries for the \"local\" domain.[1]\n\nCheck if your configured DNS server answers the SOA query for the \"local\" domain with NXDOMAIN first. For example:\n\n```\n$ host -t SOA local\n```\n\nIf the DNS server responds with NXDOMAIN, you do not need to follow the steps below. Avahi should be able to find resources in the network normally, even if using systemd-resolved.\n\nIn older versions of systemd-resolved the global setting for MulticastDNS=no in resolved.conf(5) lead to Avahi-incompatible response codes for the \"local\" domain. This resulted in Avahi not finding resources (printers) correctly. See systemd issue 21659 for reference.\n\nHowever, if the DNS query above fails to return NXDOMAIN for the \"local\" domain, you can use the full mdns NSS module instead of mdns_minimal and create /etc/mdns.allow to allow only the \"local\" domain. For example:\n\n```\n/etc/nsswitch.conf\n```\n\n```\nhosts: mymachines mdns [NOTFOUND=return] resolve [!UNAVAIL=return] files myhostname dns\n```\n\n```\n/etc/mdns.allow\n```\n\n```\n.local.\n.local\n```\n\n"
    },
    {
      "title": "ECONNREFUSED (Connection refused) on avahi socket",
      "level": 3,
      "content": "If your Avahi instance starts and operates correctly, but nss does not seem to forward requests to mdns, this may be caused by stuck socket /run/avahi-daemon/socket. This can be verified e.g. with strace. In this case you may have to restart both avahi-daemon.service and avahi-daemon.socket to make it work correctly.\n\n"
    },
    {
      "title": "KDE Connect's built in mDNS conflicts",
      "level": 3,
      "content": "If you use kdeconnect, there are mDNS conflicts with avahi as kdeconnect also runs its mdns server. This can cause hostname conflicts, like renaming your host to myhostname-2 after network restarts.\n\nTo correct this, either remove kdeconnect, or build a version without mDNS support, like in kdeconnect-no-mdnsAUR.\n\nSee kde bug 487719.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Avahi - Official project website\n- Wikipedia:Avahi (software)\n- iTunes (includes Bonjour) - Enable Zeroconf on Windows\n- http://www.zeroconf.org/\n\n"
    }
  ]
}