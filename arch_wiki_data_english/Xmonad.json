{
  "title": "Xmonad",
  "url": "https://wiki.archlinux.org/title/Xmonad",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- xmobar\n- Window manager\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nxmonad is a tiling window manager for X. Windows are arranged automatically to tile the screen without gaps or overlap, maximizing screen use. Window manager features are accessible from the keyboard: a mouse is optional.\n\nxmonad is written, configured and extensible in Haskell. Custom layout algorithms, key bindings and other extensions may be written by the user in configuration files.\n\nLayouts are applied dynamically, and different layouts may be used on each workspace. Xinerama is fully supported, allowing windows to be tiled on several physical screens.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the xmonad package which provides a very basic configuration, ideally also install xmonad-contrib for most notably a more useful desktop configuration as well as additional tiling algorithms, configurations, scripts, etc.\n\nAlternatively, install xmonad-gitAUR, the development version, with some additional dependencies; and likewise xmonad-contrib-gitAUR.\n\n"
    },
    {
      "title": "Starting",
      "level": 2,
      "content": "Run xmonad with xinit.\n\nAlternatively, select Xmonad from the session menu in a display manager of choice.\n\nMake sure you have the Xterm package installed or have changed the terminal emulator in the configuration. Otherwise you will not be able to do anything in xmonad.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Create the ~/.xmonad directory and the ~/.xmonad/xmonad.hs file and edit it as described below.\n\nAfter changes to ~/.xmonad/xmonad.hs are made, use the Mod+q shortcut to recompile and have them take effect.\n\nBecause the xmonad configuration file is written in Haskell, non-programmers may have a difficult time adjusting settings. For detailed HOWTO's and example configurations, we refer you to the following resources:\n\n- xmonad wiki\n- xmonad configuration archive\n- xmonad FAQ\n- Arch Linux forum thread\n\nThe best approach is to only place your changes and customizations in ~/.xmonad/xmonad.hs and write it such that any unset parameters are picked up from the built-in def function.\n\nThis is achieved by writing an xmonad.hs like this:\n\n```\nimport XMonad\n\nmain = xmonad def\n    { terminal    = \"urxvt\"\n    , modMask     = mod4Mask\n    , borderWidth = 3\n    }\n```\n\nThis simply overrides the default terminal and borderWidth while leaving all other settings at their defaults (inherited from the XConfig value def).\n\nAs things get more complicated, it can be handy to call configuration options by function name inside the main function, and define these separately in their own sections of your ~/.xmonad/xmonad.hs. This makes large customizations like your layout and manage hooks easier to visualize and maintain.\n\nThe simple xmonad.hs from above could have been written like this:\n\n```\nimport XMonad\n\nmain = do\n  xmonad $ def\n    { terminal    = myTerminal\n    , modMask     = myModMask\n    , borderWidth = myBorderWidth\n    }\n\nmyTerminal    = \"urxvt\"\nmyModMask     = mod4Mask -- Win key or Super_L\nmyBorderWidth = 3\n```\n\nAlso, order at top level (main, myTerminal, myModMask etc.), or within the {} does not matter in Haskell, as long as imports come first.\n\nThe following is taken from the 0.9 configuration file template. It is an example of the most common functions one might want to define in their main do block.\n\n```\n{\n  terminal           = myTerminal,\n  focusFollowsMouse  = myFocusFollowsMouse,\n  borderWidth        = myBorderWidth,\n  modMask            = myModMask,\n  -- numlockMask deprecated in 0.9.1\n  -- numlockMask        = myNumlockMask,\n  workspaces         = myWorkspaces,\n  normalBorderColor  = myNormalBorderColor,\n  focusedBorderColor = myFocusedBorderColor,\n\n  -- key bindings\n  keys               = myKeys,\n  mouseBindings      = myMouseBindings,\n\n  -- hooks, layouts\n  layoutHook         = myLayout,\n  manageHook         = myManageHook,\n  handleEventHook    = myEventHook,\n  logHook            = myLogHook,\n  startupHook        = myStartupHook\n}\n```\n\nThe package itself also includes a xmonad.hs, which is the latest official example xmonad.hs that comes with the xmonad Haskell module as an example of how to override everything. This should not be used as a template configuration, but as examples of parts you can pick to use in your own configuration. It is located in an architecture and version dependant directory in /usr/share/ (e.g. find /usr/share -name xmonad.hs).\n\n"
    },
    {
      "title": "A base desktop configuration",
      "level": 3,
      "content": "In xmonad-contrib is a better default configuration for average desktop uses. It also helps with problems in some modern programs like Chromium.\n\nIt can be added like so:\n\n```\nimport XMonad\nimport XMonad.Config.Desktop\n\nmain = xmonad desktopConfig\n    { terminal    = \"urxvt\"\n    , modMask     = mod4Mask\n    }\n```\n\n"
    },
    {
      "title": "Exiting xmonad",
      "level": 2,
      "content": "To end the current xmonad session, press Mod+Shift+Q. By default, Mod is the Alt key. To confirm exit each time,\n\n```\nxmonad.hs\n```\n\n```\n...\nimport XMonad.Prompt.ConfirmPrompt\n...\n\nmyKeysÂ :: [(String, X ())]\nmyKeys = \n    ...\n    (\"M-S-q\", confirmPrompt defaultXPConfig \"exit\" $ io exitSuccess)\n    ...\n```\n\n"
    },
    {
      "title": "X-Selection-Paste",
      "level": 3,
      "content": "The keyboard-centered operation in xmonad can be further supported with a keyboard shortcut for X-Selection-Paste.\n\nAlso, there exists a function pasteSelection in XMonad.Util.Paste that can be bound to a key using a line like:\n\n```\nxmonad.hs\n```\n\n```\nimport XMonad.Util.Paste -- Remember to include this line\n  \n  -- X-selection-paste buffer\n  , ((0, xK_Insert), pasteSelection)\n```\n\nPressing the Insert key will now paste the mouse buffer in the active window.\n\n- Note that pasteSelection uses getSelection from XMonad.Util.XSelection and so is heir to its flaws.\n- getSelection \"is fundamentally implemented incorrectly and may, among other possible failure modes, deadlock or crash\". For details, see [1].\n- These errors are generally very rare in practice, but still exist.\n\n"
    },
    {
      "title": "Keyboard shortcuts",
      "level": 3,
      "content": "Default keyboard shortcuts are listed xmonad(1).\n\n"
    },
    {
      "title": "Targeting unbound keys",
      "level": 3,
      "content": "If you use xmonad as a stand alone window manager, you can edit the xmonad.hs to add unbound keyboard keys. You just need to find the Xf86 name of the key (such as XF86PowerDown) and look it up in /usr/include/X11/XF86keysym.h. It will give you a keycode (like 0x1008FF2A) which you can use to add a line like the following into list of keybindings in your xmonad.hs:\n\n```\n((0,               0x1008FF2A), spawn \"sudo systemctl suspend\")\n```\n\nYou can also search for the Xf86 key name in Graphics.X11.ExtraTypes.XF86 module, and use its KeySym constant (such as xF86XK_PowerDown) instead of a keycode as shown in the previous example. You will also need to import the module in your xmonad.hs for the key constant to be available. See more elaborate example with multiple keys in format used by additionalKeys function:\n\n```\nimport Graphics.X11.ExtraTypes.XF86\n\n...\n\nmyKeys = [\n   ((0, xF86XK_PowerDown),         spawn \"sudo systemctl suspend\")\n , ((0, xF86XK_AudioRaiseVolume),  spawn \"amixer -D pulse sset Master 10%+\")\n , ((0, xF86XK_AudioLowerVolume),  spawn \"amixer -D pulse sset Master 10%-\")\n , ((0, xF86XK_AudioMute),         spawn \"amixer -D pulse sset Master toggle\")\n , ((0, xF86XK_MonBrightnessUp),   spawn \"brightnessctl set +10%\")\n , ((0, xF86XK_MonBrightnessDown), spawn \"brightnessctl set 10%-\")\n ...\n ]\n```\n\n"
    },
    {
      "title": "Run X () actions by touching the edge of your screen with your mouse",
      "level": 3,
      "content": "With XMonad.Hooks.ScreenCorners, users can have KDE-like screen corners with XMonad.\n\n"
    },
    {
      "title": "Switch workspaces with ScreenCorners (KDE-like)",
      "level": 4,
      "content": "Define a series of operations in startupHook:\n\n```\nxmonad.hs\n```\n\n```\n...\nimport XMonad.Hooks.ScreenCorners\n...\n\nmystartupHook = do\n...\n... example ...\n     addScreenCorners [ (SCLowerLeft,  prevWS)\n                        , (SCLowerRight, nextWS)\n                        , (SCUpperLeft, spawnSelected' myAppGrid)\n                        , (SCUpperRight, goToSelected $ mygridConfig' myColorizer)\n                      ]\n...\n```\n\nThen add screenCornerEventHook to handleEventHook:\n\n```\nmyConfig = def {\n   ...\n       handleEventHook = ... <+> screenCornerEventHook <+> ...\n   ...\n   }\n```\n\nFinally add screenCornerLayoutHook:\n\n```\n...\n   myLayoutHook = screenCornerLayoutHook $ ......\n   ...\n   myConfig = def {\n   ...\n   layoutHook = myLayoutHook \n   ...\n   }\n```\n\n- This extension adds KDE-like screen corners to XMonad.\n- By moving your cursor into one of your screen corners you can trigger an X () action, for example XMonad.Actions.GridSelect.goToSelected or XMonad.Actions.CycleWS.nextWS etc.\n\n"
    },
    {
      "title": "Increase the number of workspaces",
      "level": 3,
      "content": "By default, xmonad uses a set of 9 workspaces. You can change this by changing the workspaces parameter:\n\n```\nxmonad.hs\n```\n\n```\nimport XMonad\nimport XMonad.Util.EZConfig (additionalKeys)\n\nmain=do\n  xmonad $ def\n    { ...\n    , workspaces = myWorkspaces\n    , ...\n    } `additionalKeys` myAdditionalKeys\n\nmyWorkspaces = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"] ++ (map snd myExtraWorkspaces) -- you can customize the names of the default workspaces by changing the list\n\nmyExtraWorkspaces = [(xK_0, \"0\")] -- list of (key, name)\n\nmyAdditionalKeys =\n    [ -- ... your other hotkeys ...\n    ] ++ [\n        ((myModMask, key), (windows $ W.greedyView ws))\n        | (key, ws) <- myExtraWorkspaces\n    ] ++ [\n        ((myModMask .|. shiftMask, key), (windows $ W.shift ws))\n        | (key, ws) <- myExtraWorkspaces\n    ]\n```\n\n"
    },
    {
      "title": "Checking for duplicate key bindings",
      "level": 3,
      "content": "XMonad.Util.EZConfig provides a function checkKeymap to check for duplicate key bindings, otherwise the duplicates will be silently ignored.\n\n```\nxmonad.hs\n```\n\n```\nmain = xmonad $ myConfig\n\nmyKeymap = [(\"S-M-c\", kill), ...]\nmyConfig = def {\n    ...\n    startupHook = do\n        return () >> checkKeymap myConfig myKeymap\n        ...other operation you defined here...\n    ...\n} `additionalKeysP` myKeymap\n```\n\n- return () in the example above is very important! Otherwise, you might run into problems with infinite mutual recursion.\n- return () introduces enough laziness to break the deadlock: the definition of myConfig depends on the definition of startupHook, which depends on the definition of myConfig, ..., and so on.\n\n"
    },
    {
      "title": "Making room for docks/panels/trays (Xmobar, Tint2, Conky, etc)",
      "level": 3,
      "content": "Wrap your layouts with avoidStruts from XMonad.Hooks.ManageDocks for automatic dock/panel/trayer spacing:\n\n```\nimport XMonad\nimport XMonad.Hooks.ManageDocks\n\nmain=do\n  xmonad $ docks def\n    { ...\n    , layoutHook=avoidStruts $ layoutHook def\n    , manageHook=manageHook def <+> manageDocks\n    , ...\n    }\n```\n\nIf you ever want to toggle the gaps, this action can be added to your key bindings:\n\n```\n,((modMask x, xK_b     ), sendMessage ToggleStruts)\n```\n\n"
    },
    {
      "title": "Adding tags to windows",
      "level": 3,
      "content": "with XMonad.Actions.TagWindows, users can operate on windows having the same tags.\n\n```\nxmonad.hs\n```\n\n```\n...\nimport XMonad.Actions.TagWindows\n...\n\nmyKeys = \n... other key bindings ...\n-- Tag\n         --  , (\"M-C-t\", withFocused (addTag \"abc\")) -- add a specific tag \"abc\"\n         --  , (\"M-C-d\", withFocused (delTag \"abc\")) -- delete the tag \"abc\" from the focused window\n         --  , (\"M-C-h\", withTaggedGlobalP \"abc\" shiftHere) -- shift windows with tag \"abc\" here\n             , (\"M-C-a\", tagPrompt defaultXPConfig $ withFocused . addTag ) -- prompt for inputs of tag names\n             , (\"M-C-h\", tagPrompt defaultXPConfig (`withTaggedGlobalP` shiftHere))  -- shift windows with user defined tags (input) here\n             , (\"M-C-d\", tagDelPrompt defaultXPConfig)  -- delete a user-defined tag (input)\n             , (\"M-C-t\", tagPrompt defaultXPConfig  focusUpTaggedGlobal)  -- switch between windows in all workspaces with user-defined tags (input)\n             , (\"M-C-f\", tagPrompt defaultXPConfig (`withTaggedGlobal` float)) -- float windows with user-defined tags (input)\n```\n\n"
    },
    {
      "title": "Equally sized gaps between windows",
      "level": 3,
      "content": "If your goal is to have equally sized gaps between individual windows and the screen, the following code will not work as expected:\n\n```\nlayoutHook = spacing 10 $ Tall 1 (3/100) (1/2) ||| Full\n```\n\nThis makes each window have its own spacing in each direction. If you have two windows side-by-side, the spacing in the middle will be combined, creating a gap that is twice as large as needed.\n\nA workaround is to specify both a screen and a window spacing, but only use the top and left margins for the screen and bottom and right margins for the windows. To do this, change the above code into:\n\n```\nlayoutHook = spacingRaw False (Border 10 0 10 0) True (Border 0 10 0 10) True $ Tall 1 (3/100) (1/2) ||| Full\n```\n\n"
    },
    {
      "title": "Using xmobar with xmonad",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with xmobar.** This article or section is a candidate for merging with xmobar.\n\nThis article or section is a candidate for merging with xmobar.\n\nxmobar is a light and minimalistic text-based bar, designed to work with xmonad. To use xmobar with xmonad, you will need two packages in addition to the xmonad package. These packages are xmonad-contrib and xmobar, or you can use xmobar-gitAUR.\n\nHere we will start xmobar from within xmonad, which reloads xmobar whenever you reload xmonad.\n\nOpen ~/.xmonad/xmonad.hs in your favorite editor, and choose one of the two following options:\n\n"
    },
    {
      "title": "Quick, less flexible",
      "level": 4,
      "content": "Common imports:\n\n```\nimport XMonad\nimport XMonad.Hooks.DynamicLog\n```\n\nThe xmobar action starts xmobar and returns a modified configuration that includes all of the options described in #More configurable.\n\n```\nmain = xmonad =<< xmobar def { modMask = mod4Mask {- or any other configurations here ... -}}\n```\n\n"
    },
    {
      "title": "More configurable",
      "level": 4,
      "content": "As of xmonad(-contrib) 0.9, there is a new statusBar function in XMonad.Hooks.DynamicLog. It allows you to use your own configuration for:\n\n- The command used to execute the bar\n- The PP that determines what is being written to the bar\n- The key binding to toggle the gap for the bar\n\nThe following is an example of how to use it:\n\n```\n~/.xmonad/xmonad.hs\n```\n\n```\n-- Imports.\nimport XMonad\nimport XMonad.Hooks.DynamicLog\n\n-- The main function.\nmain = xmonad =<< statusBar myBar myPP toggleStrutsKey myConfig\n\n-- Command to launch the bar.\nmyBar = \"xmobar\"\n\n-- Custom PP, configure it as you like. It determines what is being written to the bar.\nmyPP = xmobarPP { ppCurrent = xmobarColor \"#429942\" \"\" . wrap \"<\" \">\" }\n\n-- Key binding to toggle the gap for the bar.\ntoggleStrutsKey XConfig {XMonad.modMask = modMask} = (modMask, xK_b)\n\n-- Main configuration, override the defaults to your liking.\nmyConfig = def { modMask = mod4Mask }\n```\n\n"
    },
    {
      "title": "Verify XMobar config",
      "level": 4,
      "content": "The template and default xmobarrc contains this.\n\nAt last, open up ~/.xmobarrc and make sure you have StdinReader in the template and run the plugin. E.g.\n\n```\n~/.xmobarrc\n```\n\n```\nConfig { ...\n       , commands = [ Run StdinReader, .... ]\n         ...\n       , template = \" %StdinReader% ... \"\n       }\n```\n\nNow, all you should have to do is either to start, or restart, xmonad.\n\n"
    },
    {
      "title": "Controlling xmonad with external scripts",
      "level": 3,
      "content": "Here are a few ways to do it,\n\n- use the following xmonad extension, XMonad.Hooks.ServerMode.\n\n- simulate keypress events using xdotool or similar programs. See this Ubuntu forums thread. The following command would simulate the keypress Super+n:\n\n```\nxdotool key Super+n\n```\n\n- wmctrl -If you have desktopConfig or EwmhDesktops configured, this is a very easy to use and standard utility.\n\n"
    },
    {
      "title": "Launching another window manager within xmonad",
      "level": 3,
      "content": "If you are using xmonad-gitAUR, as of January of 2011, you can restart to another window manager from within xmonad. You just need to write a small script, and add stuff to your ~/.xmonad/xmonad.hs. Here is the script.\n\n```\n~/bin/obtoxmd\n```\n\n```\n#!/bin/sh\nopenbox\nxmonad\n```\n\nAnd here are the modifications you need to add to your ~/.xmonad/xmonad.hs:\n\n```\n~/.xmonad/xmonad.hs\n```\n\n```\nimport XMonad\n--You need to add this import\nimport XMonad.Util.Replace\n\nmain do\n    -- And this \"replace\"\n    replace\n    xmonad $ def\n    {\n    --Add the usual here\n    }\n```\n\nYou also need to add the following key binding:\n\n```\n~/xmonad/xmonad.hs\n```\n\n```\n--Add a keybinding as follows:\n((modm .|. shiftMask, xK_o     ), restart \"/home/abijr/bin/obtoxmd\" True)\n```\n\nJust remember to add a comma before or after and change the path to your actual script path. Now just Mod+q (restart xmonad to refresh the configuration), and then hit Mod+Shift+o and you should have Openbox running with the same windows open as in xmonad. To return to xmonad you should just exit Openbox. Here is a link to adamvo's ~/.xmonad/xmonad.hs which uses this setup Adamvo's xmonad.hs\n\n"
    },
    {
      "title": "KDE and xmonad",
      "level": 3,
      "content": "The xmonad wiki has instructions on how to run xmonad inside KDE\n\nIt also might be a good idea to set a global keyboard shortcut in KDE to start xmonad in case it is accidentally killed or closed.\n\n"
    },
    {
      "title": "Disable plasmashell",
      "level": 4,
      "content": "You might want to disable plasmashell (the KDE5 thing responsible for desktop background, taskbar, tray, etc.).\n\n```\ncp /etc/xdg/autostart/plasmashell.desktop ~/.config/autostart/\n```\n\nThen edit ~/.config/autostart/plasmashell.desktop and replace Exec=plasmashell with Exec=. The result will look like this:\n\n```\n~/.config/autostart/plasmashell.desktop\n```\n\n```\n[Desktop Entry]\nExec=\nName=Plasma Desktop Workspace\n... # more stuff\n```\n\n"
    },
    {
      "title": "IM Layout for Skype",
      "level": 3,
      "content": "In order to create an IM layout for the newer versions of skype, the following code can be used:\n\n```\nxmonad.hs\n```\n\n```\nmyIMLayout = withIM (1%7) skype Grid\n    where\n      skype = And (ClassName \"Skype\") (Role \"\")\n```\n\n"
    },
    {
      "title": "Example configurations",
      "level": 3,
      "content": "Below are some example configurations from fellow xmonad users. Feel free to add links to your own.\n\n- brisbin33 :: simple, useful, readable :: config screenshot\n- jelly :: Configuration with prompt, different layouts, twinview with xmobar :: xmonad.hs\n- MrElendig :: Simple configuration, with xmobar :: xmonad.hs, .xmobarrc, screenshot.\n- thayer :: A minimal mouse-friendly config ideal for netbooks :: configs screenshot\n- vicfryzel :: Beautiful and usable xmonad configuration, along with xmobar configuration, xinitrc, dmenu, and other scripts that make xmonad more usable. :: git repository, screenshot.\n- vogt :: Check out adamvo's config and many others in the official Xmonad/Config archive\n- wulax :: Example of using xmonad inside Xfce. :: xmonad.hs, screenshot.\n- alex-courtis :: Clean xmonad, xmobar, media keys, screenshot, j4/dmenu; fonts rendered at the DPI reported by the monitor :: xmonad.hs, screenshot.\n- TobbeBob123 :: Config for TobbeBob123 where you can see all the keybinding with a simple keybinding (Mod4+s). If you want a whole and complete Xmonad with theme and everything you see in the picture linked. You can run the script called TobbeOS. :: TobbeOS. Xmonad repository, Screenshot.\n- AzureOrange :: Split configuration for xmonad built with stack (gaps, layouts, scratchpads, window management and window swallowing etc.) with xmobar, trayer and dmenu. :: xmonad.hs screenshot\n\n"
    },
    {
      "title": "Xfce 4 and xmonad",
      "level": 3,
      "content": "Use xfceConfig instead of def after importing XMonad.Config.Xfce in ~/.xmonad/xmonad.hs, e.g. adapting the minimal configuration above:\n\n```\nimport XMonad\nimport XMonad.Config.Xfce\n\nmain = xmonad xfceConfig\n    { terminal    = \"urxvt\"\n    , modMask     = mod4Mask\n    }\n```\n\nAlso add an entry to Settings > Session and Startup > Application Autostart that runs xmonad --replace.\n\n"
    },
    {
      "title": "Missing xmonad-x86_64-linux",
      "level": 3,
      "content": "xmonad should automatically create the xmonad-X86_64-linux file (in ~/.xmonad/). If this it not the case, grab a configuration file from the xmonad wiki or create your own. Put the .hs and all others files in ~/.xmonad/ and run this command from the directory:\n\n```\n$ xmonad --recompile\n```\n\nNow you should see the file.\n\n"
    },
    {
      "title": "Problems with Java applications",
      "level": 3,
      "content": "If you have problems, like Java application Windows not resizing, or menus immediately closing after you click, see Java#Gray window, applications not resizing with WM, menus immediately closing.\n\n"
    },
    {
      "title": "Empty space at the bottom of gvim or terminals",
      "level": 3,
      "content": "See Vim#Empty space at the bottom of gVim windows for a solution which makes the area match the background color.\n\nYou can also configure xmonad to respect size hints, but this will leave a gap instead. See the documentation on Xmonad.Layout.LayoutHints.\n\n"
    },
    {
      "title": "Chromium/Chrome will not go fullscreen",
      "level": 3,
      "content": "If Chrome fails to go fullscreen when F11 is pressed, you can use the XMonad.Hooks.EwmhDesktops extension found in the xmonad-contrib package. Simply add the import statement to your ~/.xmonad/xmonad.hs:\n\n```\nimport XMonad.Hooks.EwmhDesktops\n```\n\nand then add ewmhFullscreen . ewmh to the appropriate place; for example:\n\n```\n...\n        main = xmonad $ ewmhFullscreen . ewmh $ def\n...\n```\n\nAfter a recompile/restart of xmonad, Chromium should now respond to F11 (fullscreen) as expected.\n\n"
    },
    {
      "title": "Multitouch / touchegg",
      "level": 3,
      "content": "TouchÃ©gg polls the window manager for the _NET_CLIENT_LIST (in order to fetch a list of windows it should listen for mouse events on.) By default, xmonad does not supply this property. To enable this, use the XMonad.Hooks.EwmhDesktops extension found in the xmonad-contrib package.\n\n"
    },
    {
      "title": "Keybinding issues with an azerty keyboard layout",
      "level": 3,
      "content": "Users with a keyboard with azerty layout can run into issues with certain keybindings. Using the XMonad.Config.Azerty module will solve this.\n\n"
    },
    {
      "title": "GNOME 3 mod4+p changes display configuration instead of launching dmenu",
      "level": 3,
      "content": "If you do not need the capability to switch the display-setup in the gnome-control-center, just execute\n\n```\ndconf write /org/gnome/settings-daemon/plugins/xrandr/active false\n```\n\nas your user, to disable the xrandr plugin which grabs Super+p.\n\n"
    },
    {
      "title": "Chrome/Chromium not displaying defined window border color",
      "level": 3,
      "content": "Chromium and Chrome browser windows will not have the defined border color per default but a blurred transparent one. This problem is known for a long time but easy to fix. Activating `Use system title bar and borders` in the browser options should fix it immediately.\n\n"
    },
    {
      "title": "Problems with focused border in VirtualBox",
      "level": 3,
      "content": "A known issue with Virtualbox (Ticket #6479) can cause problems with the focused window border. A solution can be found by installing a compositing manager like xcompmgr which overrides the incorrect behavior of vboxvideo.\n\n"
    },
    {
      "title": "Steam games (Half-Life, Left 4 Dead, â¦) and xmonad",
      "level": 3,
      "content": "There seems to be some trouble with xmonad and Source engine based games like Half-Life. If they do not start or get stuck with a black screen, a workaround is to start them in windowed mode. To do so, right click on the game in your Steam library and choose properties, click on launch options and enter [3]:\n\n```\n-windowed\n```\n\nAnother solution is to float the window of the game using the manage hook. For example, the following line can be used for Half-Life:\n\n```\nclassName =? \"hl_linux\" --> doFloat\n```\n\nThis can also be worked around by making xmonad pay attention to EWMH hints and including its fullscreen hook [4]:\n\n```\nmain = xmonad $ ewmh def{ handleEventHook =\n           handleEventHook def <+> fullscreenEventHook }\n```\n\nThis has a few other effects and makes it behave more akin to fullscreen applications in other WMs.\n\n"
    },
    {
      "title": "LibreOffice - focus flicking between main window and dialog",
      "level": 3,
      "content": "The LibreOffice UI defaults to the gtk engine outside a desktop environment. This may cause problems with some xmonad configurations resulting in focus rapidly flicking between the LibreOffice main window and any open LibreOffice dialog window. Effectively locking the application. In this case the environment variable SAL_USE_VCLPLUGIN can be set to explicitly force LibreOffice to use another UI theme as outlined in LibreOffice#Theme For instance\n\n```\n$ export SAL_USE_VCLPLUGIN=gen lowriter\n```\n\nto use the general (QT) UI.\n\n"
    },
    {
      "title": "Dialog windows",
      "level": 4,
      "content": "IntelliJ IDEA has received better support for tiling window managers. But there are still some annoying issues, some of them have simple solutions:\n\n- The Find In Files dialog window closes immediately if mouse pointer moves out of the dialog window boundaries. This only happens with the Find In Files dialog window, and is not reproducible with the Navigate toâ¦ dialog. The Find In Files behavior is expected, assuming the default \"focus follows mouse\" logic of xmonad. The Find In Files window closes when it loses focus on all systems.\n\n- When viewing changed files between Git commits (using the Changes Between aaaa and local version bbbb dialog), the window with file-level diffs opens behind the dialog window.\n\n"
    },
    {
      "title": "Problems with finding shared libraries after update",
      "level": 3,
      "content": "The xmonad executable is located in ~/.xmonad/. After upgrading xmonad, an old executable might persist and need in that case be removed for xmonad to compile a new executable. Alternatively use xmonad --recompile.\n\nThe recompilation can be automated by adding a pacman hook like the following to /etc/pacman.d/hooks/xmonad.hook (you may have to first create the hooks directory):\n\n```\n[Trigger]\nOperation = Upgrade\nType = Package\nTarget = xmonad\n\n[Action]\nDescription = Recompiling xmonad...\nWhen = PostTransaction\nExec = /usr/bin/sudo -u YOUR_USERNAME /usr/bin/xmonad --recompile\n```\n\nWhere YOUR_USERNAME is the username that you run xmonad from.\n\nIn the case that xmonad --recompile cannot find any modules at all (including XMonad itself), try regenerating the package database cache:\n\n```\n# ghc-pkg recache\n```\n\n"
    },
    {
      "title": "Broken/missing XMonad.Prompt and window decorations",
      "level": 3,
      "content": "XMonad by default uses the font -misc-fixed-*-*-*-*-10-*-*-*-*-*-*-* [6]. If this font is missing those windows simply fail to render at all. Easiest fix is to install xorg-fonts-misc.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- xmonad - The official xmonad website\n- xmonad.hs - Template xmonad.hs\n- xmonad: a guided tour\n- dzen - General purpose messaging and notification program\n- dmenu - Dynamic X menu for the quick launching of programs\n- Comparison of tiling window managers - Arch wiki article providing an overview of mainstream tiling window managers\n- Share your xmonad desktop!\n- xmonad hacking thread\n- xmonad-log-applet - An applet for the GNOME, MATE or Xfce panel.\n\n"
    }
  ]
}