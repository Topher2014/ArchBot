{
  "title": "Fcitx5",
  "url": "https://wiki.archlinux.org/title/Fcitx5",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Fcitx\n- IBus\n\nFcitx5 is an input method framework with a lightweight core, offering additional language support via addons. It is the successor to Fcitx.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the fcitx5 package.\n\nThe fcitx5-im group pulls the main fcitx5 package, some of #Input method modules, and #Configuration tool.\n\n"
    },
    {
      "title": "Input method modules",
      "level": 3,
      "content": "Some GUI toolkits provide input method modules support for input method integration in applications. However, they're not always needed, and #Wayland native protocols might show better performance. See #Integration for details.\n\n- Qt5/6: fcitx5-qt.\n- GTK: fcitx5-gtk.\n- Qt4: fcitx5-qt4-gitAUR.\n\n"
    },
    {
      "title": "Plugins",
      "level": 3,
      "content": "For date and time support with fcitx5-chinese-addons, install fcitx5-lua: ;sj will then input the current time, while ;rq will input the current date.\n\n"
    },
    {
      "title": "Integration",
      "level": 3,
      "content": "Applications need to redirect input events to the input method in order to actually make use of it. The protocol used for such a purpose could be provided by display servers (i.e. Wayland's text-input or Xorg's XIM), or by GUI toolkits' input method modules.\n\n"
    },
    {
      "title": "Wayland",
      "level": 4,
      "content": "Wayland's native text-input protocol usually yields better results than input method modules. The Wayland frontend of fcitx5 is enabled by default, and GTK/Qt utilize text-input if no other IM module is explicitly specified. Therefore, it's generally recommended to only use #IM modules in Xwayland applications. Additionally, enable #XIM for legacy X11 applications. [1]\n\nGNOME does not support Wayland's input-method protocol, which is required by fcitx5's Wayland frontend to communicate with the compositor and display the popup. gnome-shell-extension-kimpanel-gitAUR provides support for popups in GNOME Wayland through Kimpanel.\n\nPlasma on Wayland requires the input method process to be invoked by KWin.[2] To achieve that, quit any running Fcitx 5 process, head to System Settings > Input Devices > Virtual Keyboard, then select Fcitx 5.\n\nEnable the input-method-v1 plugin and add fcitx5 to the autostart commands.\n\nDue to Wayfire partially supporting text-input-v1, for software that supports text-input-v1 but not text-input-v3, see #Software using Wayland input protocol cannot obtain Wayland popup window.\n\nFor Qt6 software, which currently defaults to text-input-v1 but supports text-input-v3, an other workaround is using QT_WAYLAND_TEXT_INPUT_PROTOCOL=zwp_text_input_v3 but you may encounter other bugs.\n\n"
    },
    {
      "title": "IM modules",
      "level": 4,
      "content": "Set the following environment variables[3], globally if using X11 or for each Xwayland application if using a Wayland compositor with text-input support.\n\n```\nGTK_IM_MODULE=fcitx\nQT_IM_MODULE=fcitx\n```\n\n- Append SDL_IM_MODULE=fcitx to enable support of some games that use a specific version of the SDL2 library.\n\nAlternatively, write gtk-im-module=fcitx for GTK3 and gtk-im-module=\"fcitx\" for GTK2 into the configuration files in GTK#Configuration to make GTK applications running under X11/Xwayland use the IM module without affecting Wayland-native GTK applications.\n\nIf your locale is en_US.UTF-8, and your GTK2 application cannot activate fcitx5, you can set GTK_IM_MODULE=xim specifically for it.\n\n"
    },
    {
      "title": "XIM",
      "level": 4,
      "content": "For generic X11 applications, enable XIM support through the following environment variable:\n\n```\nXMODIFIERS=@im=fcitx\n```\n\n"
    },
    {
      "title": "Autostart",
      "level": 3,
      "content": "If your desktop environment implements XDG Autostart, see Autostarting#On desktop environment startup.\n\nSee Autostarting#On Xorg startup or Autostarting#On window manager startup depending on your needs.\n\n"
    },
    {
      "title": "Chinese",
      "level": 4,
      "content": "For the Chinese input method of Fcitx5, several dictionaries are currently available:\n\n- fcitx5-pinyin-zhwiki: A dictionary created by felixonmars based on Chinese Wikipedia. Applicable to Pinyin input method.\n- rime-pinyin-zhwiki: A dictionary for Rime input method.\n- fcitx5-pinyin-moegirlAUR : A dictionary created by outloudvi based on Moegirlpedia.\n- rime-pinyin-moegirlAUR: A dictionary for Rime input method.\n- cedict: A dictionary converted from cedict dictionary.\n\n- Manually downloaded dictionary files can be placed in ~/.local/share/fcitx5/pinyin/dictionaries.\n- The suffix of the dictionary file should be .dict.\n- .scel files from Sogou cannot be used directly but can be imported.\n\n"
    },
    {
      "title": "Custom dictionary",
      "level": 4,
      "content": "Generally speaking, since fcitx5 supports importing the Sogou dictionary, there is no need to customize dictionaries to a large extent, but fcitx5 still provides related tools (i.e. libime).\n\nThe original dictionary file is a text file, its format is: Character Pinyin Frequency. To convert it:\n\n```\n$ libime_pinyindict dictionary.txt dictionary.dict\n```\n\nThe custom dictionary file can be placed in ~/.local/share/fcitx5/pinyin/dictionaries\n\n- Chinese characters to Pinyin\n- Simplified and Traditional Chinese Conversion\n\n"
    },
    {
      "title": "Configuration tool",
      "level": 3,
      "content": "The configuration file of fcitx5 is located at ~/.config/fcitx5. Although you can use a text editor to edit the configuration file, you might find a GUI configuration tool much more convenient, so install the fcitx5-configtool package.\n\n"
    },
    {
      "title": "Disable overriding XKB settings",
      "level": 3,
      "content": "By default Fcitx5 overrides X keyboard settings. (The ones you can set with setxkbmap command or graphical tools provided by desktop environments.) If you do not want that, run fcitx5-configtool and uncheck Addons > XCB > Allow Overriding System XKB Settings.\n\n"
    },
    {
      "title": "Themes",
      "level": 4,
      "content": "The number of default themes is limited, you can find more themes on GitHub.\n\n- Breeze — Fcitx5 theme to match KDE's Breeze style.\n\n- Nord — Fcitx5 theme based on the Nord color theme.\n\n- Material — Material color theme for fcitx5.\n\n- Solarized — Solarized color theme for Fcitx5.\n\n- Fluent — A Fluent-Design dark theme with blur effect and shadow.\n\n"
    },
    {
      "title": "Enable single-line mode",
      "level": 4,
      "content": "In the settings of the Pinyin input method (or Rime input method), enable Show preedit within application to enable single-line mode.\n\n"
    },
    {
      "title": "Use fullwidth punctuation after latin letter or number",
      "level": 3,
      "content": "By default Fcitx5 uses halfwidth punctuation after latin letter or number. If you want to use fullwidth punctuation instead, run fcitx5-configtool and uncheck Configure addons > Punctuation > Half width punctuation after latin letter or number.\n\n"
    },
    {
      "title": "Diagnose problems",
      "level": 3,
      "content": "If you have problems using fcitx5, e.g. if Ctrl+Space fails to activate input method in some applications, try to diagnose the current environment using fcitx5-diagnose, whose output should contain clues for the most common problems.\n\n"
    },
    {
      "title": "Fcitx5 single-line mode not working in some applications",
      "level": 3,
      "content": "If the single-line mode does not work in GTK applications such as Firefox, install fcitx5-gtk\n\nThe single-line mode is unsupported by WPS Office[5] and Sublime Text[6].\n\n"
    },
    {
      "title": "Fcitx5 is not working in JetBrains IDEs",
      "level": 3,
      "content": "Please verify that your system locale is correct and well generated, as an incorrect locale will prevent Fcitx5 from working correctly in JetBrains IDEs.\n\n"
    },
    {
      "title": "Emoji show abnormally in the candidate box",
      "level": 3,
      "content": "Confirm you have a font with emoji support installed (such as noto-fonts-emoji). Disable anti-aliasing for the chosen emoji font (such as Noto Color Emoji) as explained in Font configuration#Anti-aliasing and Font configuration#Custom settings for certain fonts or font styles.\n\n"
    },
    {
      "title": "Fcitx5 not available in RStudio",
      "level": 3,
      "content": "Run the following command:\n\n```\n$ strings /usr/lib/rstudio/lib/libQt5Core.so.5 | grep \"Qt 5\"\n```\n\nFind out the version of the Qt library, use this version to recompile libfcitx5platforminputcontextplugin.so in fcitx5-qt, and put it into /usr/lib/rstudio/plugins/platforminputcontexts/ directory.\n\n"
    },
    {
      "title": "Fcitx5 not available on Steam and Dota 2",
      "level": 3,
      "content": "The IME can be activated on Steam Big Screen mode and Dota 2 by using Ctrl+Space instead of Ctrl+Shift. [7]\n\n"
    },
    {
      "title": "Fcitx5 not available in Chromium running on Wayland",
      "level": 3,
      "content": "See Chromium#Native Wayland support.\n\n"
    },
    {
      "title": "Candidate popup misaligned in HiDPI mode of GTK environments",
      "level": 3,
      "content": "If the position of your candidate popup is not anchored at your cursor position, install fcitx5-gtk.\n\n"
    },
    {
      "title": "Fcitx5 right alt key not working with Electron applications",
      "level": 3,
      "content": "If a non-system keyboard is used by an application (e.g. Discord, Element, etc.), the application may handle the ISO_Level3_Shift before the input method can. This results in some input methods failing in specific applications. One solution is to add another input method group, setting the system layout to correspond to this keyboard. For example, to type Polish letters like ąćęłńóśźż on a QWERTY keyboard with English as your primary system keyboard, you can use the Fcitx5 Configuration GUI to:\n\n1. Click the Add Group plus button.\n1. Select this group in the dropdown and now add your input method (the keyboard, e.g. Keyboard - Polish).\n1. Use Select system keyboard layout to pick the one that matches this input method, and apply changes.\n\nSee comments from the Fcitx5 developers if you need another solution. [8]\n\n"
    },
    {
      "title": "Software using Wayland input protocol cannot obtain Wayland popup window",
      "level": 3,
      "content": "Software using the Wayland input protocols (such as wezterm and GTK software if the environment variable is set to GTK_IM_MODULE=wayland) may have issues with text-input-v3 support.\n\nRegarding Qt and GTK software support for Wayland, according to the fcitx5 developer[9]:\n\nIn summary, for GTK3/GTK4 and Qt5/Qt6 you may still want to set the respective environment variables if you encounter issues without them.\n\n"
    },
    {
      "title": "Customizing traditional and simplified Chinese conversion",
      "level": 3,
      "content": "Some IMEs assume Simplified Chinese by default, resulting in incorrect characters being displayed when using Traditional input, e.g. 爲什麼 instead of 為什麼. To fix this, the usage of the Simplified and Traditional Chinese Translation can be customized.\n\nTo configure conversion, set OpenCC profile for Simplified to Traditional to one of the following values:\n\n- s2t - Simplified to Traditional (OpenCC) (this is the default and probably not what you are looking for)\n- s2tw - Simplified to Traditional (Taiwan)\n- s2twp - Simplified to Traditional (Taiwan) with Taiwanese idiom\n- s2hk - Simplified to Traditional (Hong Kong)\n\nTo configure the reverse, set OpenCC profile for Traditional to Simplified to one of the following values:\n\n- t2s - Traditional (OpenCC) to Simplified (OpenCC) (this is the default and probably not what you are looking for)\n- tw2s - Traditional (Taiwan) to Simplified (OpenCC)\n- tw2sp - Traditional (Taiwan) to Simplified (OpenCC) with Mainland Chinese idiom\n- t2hk - Traditional (OpenCC) to Hong Kong variant\n- t2tw - Traditional (OpenCC) to Taiwan Standard\n- tw2t - Traditional (Taiwan) to Traditional (OpenCC)\n- hk2s - Traditional (Hong Kong) to Simplified (OpenCC)\n- hk2t - Traditional (Hong Kong) to Traditional Chinese (OpenCC)\n- t2jp - Traditional (Kyūjitai) to New Japanese Kanji (Shinjitai)\n- jp2t - New Japanese Kanji (Shinjitai) to Traditional (Kyūjitai)\n\nUp to date list here: OpenCC\n\n"
    },
    {
      "title": "View the Unicode encoding of selected characters",
      "level": 3,
      "content": "- If you want to view the Unicode encoding of the selected text in a text editor, then directly select the text, and then use the shortcut keys Ctrl+Alt+Shift+u to view the encoding of the selected text.\n- If you want to view the Unicode encoding of some text in a non-editable area (such as this wiki), you need to first copy the text to the clipboard, then click on any editable area (such as the search box), and then use the shortcut keys Ctrl+Alt+Shift+u to view the encoding of the text in the clipboard.\n\n"
    },
    {
      "title": "Input special characters",
      "level": 3,
      "content": "In general, for some simple symbols, such as ≤, ā, á, ©, etc., you can enter them through Configuring compose key, but for more special symbols, such as ②, ③, ④, etc., you Either customize ~/.XCompose, or use Fcitx5's Unicode function to achieve.\n\nTake ① as an example:\n\nPosition the cursor in any input box, and then press Ctrl+Alt+Shift+u, and then enter circle one, you will see a variety of ①, other special characters are similar here.\n\n"
    },
    {
      "title": "Switching halfwidth and fullwidth punctuation",
      "level": 3,
      "content": "For fcitx5-chinese-addons, fullwidth punctuation is used by default, one may use Ctrl+. to switch between halfwidth and fullwidth punctuation.\n\n"
    },
    {
      "title": "Automatically switch input methods in vim",
      "level": 3,
      "content": "It is recommended to use the fcitx.vim plugin. This plugin will keep different buffer-specific input method states in their respective insert modes.\n\nFor a simple solution, you can append the code to ~/.vimrc: [10][dead link 2024-12-15 ⓘ][11]\n\n```\n~/.vimrc\n```\n\n```\nlet fcitx5state=system(\"fcitx5-remote\")\nautocmd InsertLeave * :silent let fcitx5state=system(\"fcitx5-remote\")[0] | silent !fcitx5-remote -c \" Disable the input method when exiting insert mode and save the state\nautocmd InsertEnter * :silent if fcitx5state == 2 | call system(\"fcitx5-remote -o\") | endif \" 2 means that the input method was opened in the previous state, and the input method is started when entering the insert mode\n```\n\nIf you are using neovim, then append the above code to ~/.config/nvim/init.vim.\n\nIf you are using Vim9, then the code should be\n\n```\n~/.vimrc\n```\n\n```\n# Only taking affect after using vim9script grammar or has `vim9script` keyword.\nvar fcitx5state = system(\"fcitx5-remote\")\nautocmd InsertLeave * :silent fcitx5state = system(\"fcitx5-remote\")[0] | silent !fcitx5-remote -c\nautocmd InsertEnter * :silent if fcitx5state == '2' | call system(\"fcitx5-remote -o\") | endif\n```\n\nIf you are using VSCodeVim, add the following snippet into your configuration file:\n\n```\n\"vim.autoSwitchInputMethod.enable\": true,\n\"vim.autoSwitchInputMethod.defaultIM\": \"1\",\n\"vim.autoSwitchInputMethod.obtainIMCmd\": \"/usr/bin/fcitx5-remote\",\n\"vim.autoSwitchInputMethod.switchIMCmd\": \"/usr/bin/fcitx5-remote -t {im}\",\n```\n\n"
    },
    {
      "title": "Import Sogou dictionary",
      "level": 4,
      "content": "- For KDE users, you can import Sogou dictionary through Settings > Regional Settings > Input Method > Pinyin > Dictionary > Import.\n- For users who use fcitx5-configtool, you need to manually open the software \"Fcitx5 Configuration\" and manually configure it in the Pinyin input method.\n- Alternatively, scel2org5 (from fcitx5-chinese-addons) allows the conversion.\n\nYou can import local dictionaries or browse and import online dictionaries.\n\n"
    },
    {
      "title": "Cloud Pinyin",
      "level": 4,
      "content": "On the settings page of the Pinyin input method, you can enable Cloud Pinyin. But if you need to change the default backend of Cloud Pinyin, you need to change it in the global settings of fcitx5. Provided backends are Google, Baidu, GoogleCN.\n\n"
    },
    {
      "title": "Stroke Filter",
      "level": 4,
      "content": "Set the shortcut key after the \"stroke filter\" of the pinyin input method you set (the default is `) Then after entering the text, press the shortcut key, the words stroke filter will appear in the candidate box of the input method, and the words can be filtered by strokes. The specific rules are: h horizontal stroke, s vertical stroke, p left-falling stroke, n right-falling stroke, z turning stroke.\n\nBy default, the stroke filter is to filter the first character of a sentence, but you can switch between different characters in a sentence by using determining characters by word.\n\nFor example, to perform stroke filtering on the third character in the word 中华人民共和国, you can press ] twice in a row after enabling stroke filtering to let fcitx5 perform stroke filtering on it.\n\nNote: **Determining characters with words** \n\n"
    },
    {
      "title": "Import dictionary",
      "level": 4,
      "content": "Take importing dictionary rime-pinyin-zhwiki and rime-pinyin-moegirlAUR as an example.\n\n1. Change the ~/.local/share/fcitx5/rime/luna_pinyin.custom.yaml file (take luna_pinyin as an example, and modify the name of the other input schemes)\n\n```\n~/.local/share/fcitx5/rime/luna_pinyin.custom.yaml\n```\n\n```\n# There should only be one \"patch:\" in the file, if it already exists, just paste the following code\n# This file is used to modify a specific input scheme, change the above luna_pinyin to other input scheme names to complete the modification of other input schemes\npatch:\n    \"translator/dictionary\": extended #The dictionary name can be customized, just keep the same as the file name below\n```\n\n2. Create a new ~/.local/share/fcitx5/rime/extended.dict.yaml file\n\n```\n~/.local/share/fcitx5/rime/extended.dict.yaml\n```\n\n```\n# The following disables the default dictionary and does not enable the default \"Baguwen\" dictionary and word frequency system, if you do not want traditional characters and box characters to appear in candidate words\n---\nname: extended\nversion: \"2021.02.19\"\nsort: by_weight\nuse_preset_vocabulary: false #Whether to enable the default \"Baguwen\" dictionary and word frequency system, if you want to enable it, please set it to true.\nimport_tables:\n  # - luna_pinyin #Default dictionary, please uncomment if you want to enable it\n  - zhwiki\n  - moegirl\n  # - custom dictionary name\n...\n```\n\n"
    },
    {
      "title": "Fuzzy sound settings",
      "level": 4,
      "content": "Please comment (#) or delete unnecessary fuzzy sounds as needed. If you need to add other fuzzy sounds, please refer to Mingyue Pinyin fuzzy sound custom template\n\nIf the luna_pinyin.custom.yaml file does not exist\n\n```\n~/.local/share/fcitx5/rime/luna_pinyin.custom.yaml\n```\n\n```\npatch:\n    \"speller/algebra\":\n        - derive/^([zcs])h/$1/ #zh,ch,sh->z,c,s\n        - derive/^([zcs])([^h])/$1h$2/ #z,c,s->zh,ch,sh\n        - derive/^n/l #n->l\n        - derive/^l/n #l->n\n        - derive/([ei])n$/$1ng/  # en -> eng, in -> ing\n        - derive/([ei])ng$/$1n/ # eng->en, ing -> in\n        - abbrev/^([a-z]).+$/$1/ #Jianpin support\n        - abbrev/^([zcs]h).+$/$1/ #fuzzy sounds support for Jianpin\n        delimiter: \" '\" #delimiter\n```\n\nIf the file exists, paste the part below patch: to the end of the file (there is only one patch: in luna_pinyin.custom.yaml)\n\n"
    },
    {
      "title": "Special symbols",
      "level": 4,
      "content": "Import the symbols.dict.yaml dictionary in the rime-dict project to input Greek letters, some mathematical symbols and Emoji expressions in Pinyin.\n\nExample:\n\n- Greek letters: input alpha to output α\n\n- Mathematical symbols: input jifen to output ∫\n\n- Special symbols: Input cha to output ✕,✖\n\n- Serial number: input qi to output Ⅶ,⑦\n\n- Emoji expression: Input haha to output 😃,😆\n\n"
    },
    {
      "title": "Load librime-lua plugin",
      "level": 4,
      "content": "If you want to load the librime-lua plugin, you must add the lua module in the Rime input method settings of the fcitx configuration tool.\n\n"
    }
  ]
}