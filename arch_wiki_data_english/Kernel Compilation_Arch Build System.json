{
  "title": "Kernel Compilation/Arch Build System",
  "url": "https://wiki.archlinux.org/title/Kernel_Compilation/Arch_Build_System",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "The Arch build system can be used to build a custom kernel based on the official linux package. This compilation method can automate the entire process, and is based on a very well tested package. You can edit the PKGBUILD to use a custom kernel configuration or add additional patches.\n\n"
    },
    {
      "title": "Getting the ingredients",
      "level": 2,
      "content": "Since you will be using makepkg, follow the best practices outlined there first. For example, you cannot run makepkg as the root user. Therefore, create a build directory in your user home first.\n\n```\n$ mkdir ~/build/\n$ cd ~/build/\n```\n\nInstall the devtools and base-devel package.\n\nYou need a clean kernel to start your customization from. Retrieve PKGBUILD source and few other files into your build directory by running:\n\n```\n$ pkgctl repo clone --protocol=https linux\n```\n\nAt this point, the directory tree looks like (there may be a few other files):\n\n```\n~/build/linux/-+\n               +--config\n               \\__PKGBUILD\n```\n\nThen, get any other file you need (e.g. custom configuration files, patches, etc.) from the respective sources.\n\n"
    },
    {
      "title": "Modifying the PKGBUILD",
      "level": 2,
      "content": "Edit PKGBUILD and look for the pkgbase parameter. Change this to your custom package name, e.g.:\n\n```\nPKGBUILD\n```\n\n```\npkgbase=linux-custom\n```\n\nNote: **Do not** \n\n"
    },
    {
      "title": "Avoid creating the doc",
      "level": 3,
      "content": "A large portion of the lengthy compiling effort is devoted to creating the documentation. To avoid creating the documents:\n\n1. Remove make htmldocs in build()\n1. Remove \"$pkgbase-docs\" in pkgname\n\n"
    },
    {
      "title": "Changing prepare()",
      "level": 3,
      "content": "In prepare() function, you can apply needed kernel patches or change kernel build configuration. Since 2018-08-01, the PKGBUILD automatically applies all *.patch files in source.\n\nIf you need to change a few configuration options you can edit config in the source.\n\nOr you can use a GUI tool to tweak the options. Comment make olddefconfig in the prepare() function of the PKGBUILD, and add your favorite tool (run make help to list all of the possible configuration targets):\n\n```\nPKGBUILD\n```\n\n```\n...\n  msg2 \"Setting config...\"\n  cp ../config .config\n  #make olddefconfig\n\n  make nconfig     # new CLI menu for configuration\n  #make menuconfig # CLI menu for configuration\n  #make xconfig    # X-based configuration\n  #make oldconfig  # using old config from previous kernel version\n  # ... or manually edit .config\n  make prepare\n...\n```\n\n"
    },
    {
      "title": "Generate new checksums",
      "level": 3,
      "content": "#Changing prepare() suggests a possible modification to $_srcname/.config. Since this path is not where downloading the package files ended, its checksum was not checked by makepkg (which actually checked $_srcname/../../config).\n\nIf you replaced the downloaded config with another one before running makepkg, install the pacman-contrib package and generate new checksums by running:\n\n```\n$ updpkgsums\n```\n\n"
    },
    {
      "title": "Compiling",
      "level": 2,
      "content": "You can now proceed to compile your kernel by the usual command makepkg.\n\nIf you have chosen an interactive program for configuring the kernel parameters (like menuconfig), you need to be there during the compilation.\n\n```\n$ makepkg -s\n```\n\nThe -s parameter will download any additional dependencies used by recent kernels such as xml and docs.\n\n- Kernel sources are PGP signed, and makepkg will attempt to verify them. See makepkg#Signature checking for details.\n- The compilation can take up to several hours to complete depending on the hardware performance. Running compilation jobs simultaneously can reduce compilation time significantly on multi-core systems.\n- It can be informative to run the above makepkg using the time command to know how long your system took to perform the compilation.\n\n"
    },
    {
      "title": "Installing",
      "level": 2,
      "content": "The compile step will leave two packages in the ~/build/linux folder, one for the kernel and one for the kernel headers. They might have names like:\n\n```\nlinux-custom-5.8.12-x86_64.pkg.tar.zst\nlinux-custom-headers-5.8.12-x86_64.pkg.tar.zst\n```\n\nBest practice is to install both packages together as they might be both needed (e.g. DKMS):\n\n```\n# pacman -U linux-custom-headers-5.8.12-x86_64.pkg.tar.zst linux-custom-5.8.12-x86_64.pkg.tar.zst\n```\n\n(substitute the actual names of the files you have in the folder)\n\n"
    },
    {
      "title": "Boot loader",
      "level": 2,
      "content": "If you have modified pkgbase in order to have your new kernel installed alongside the default kernel you will need to update your boot loader configuration file and add new entries ('default' and 'fallback') for your custom kernel and the associated initramfs images.\n\n"
    },
    {
      "title": "Updating",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nAssuming one has an arch kernel source that they want to update, one method to do that is with https://github.com/archlinux/linux. In what follows, the top kernel source directory is assumed at ~/build/linux/.\n\nIn general, arch sets an arch kernel source with two local git repositories. The one at archlinux-linux/ is a local bare git repository pointing to https://github.com/archlinux/linux.git. The other one is at src/archlinux-linux/, pulling from the bare repository. Possible local patches, and building, are expected at src/archlinux-linux/.\n\nFor this example, the HEAD of the locally installed bare git repository source at archlinux-linux/ was initially pointing to\n\n```\n$ cd ~/build/linux/archlinux-linux/\n$ git log --oneline --max-count 1 HEAD\n```\n\n```\n4010b622f1d2 Merge branch 'dax-fix-5.3-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm\n```\n\nwhich is somewhere between v5.2.5-arch1 and v5.2.6-arch1.\n\n```\n$ git fetch --verbose\n```\n\nOne can see it fetched v5.2.7-arch1, which was the newest archlinux tag, because it prints what new tags were obtained. If no new tags were obtained then there is no newer archlinux source available.\n\nNow the source can be updated where the actual build will take place.\n\n```\n$ cd ~/build/linux/src/archlinux-linux/\n$ git checkout master\n$ git pull\n$ git fetch --tags --verbose\n$ git branch --verbose 5.2.7-arch1 v5.2.7-arch1\n$ git checkout 5.2.7-arch1\n```\n\nYou can verify you are on track with something like\n\n```\n$ git log --oneline 5.2.7-arch1 --max-count=7\n```\n\n```\n13193bfc03d4 Arch Linux kernel v5.2.7-arch1\n9475c6772d05 netfilter: nf_tabf676926c7f60les: fix module autoload for redir\n498d650048f6 iwlwifi: Add support for SAR South Korea limitation\nbb7293abdbc7 iwlwifi: mvm: disable TX-AMSDU on older NICs\nf676926c7f60 ZEN: Add CONFIG for unprivileged_userns_clone\n5e4e503f4f28 add sysctl to disallow unprivileged CLONE_NEWUSER by default\n5697a9d3d55f Linux 5.2.7\n```\n\nThis shows few specific archlinux patches between Arch Linux kernel v5.2.7-arch1 and Linux 5.2.7.\n\nThe up to date PKGBUILD, as well archlinux kernel configuration file, can be pulled in using git in the package directory:\n\n```\n$ cd ~/build/linux/\n$ git pull\n```\n\nNow you should merge files located in ~/build/linux/linux/* into ~/build/linux/. Merging can also done manually, or with specific utilities. Review #Changing prepare(), and run manually most, if not all, the shell commands of PKGBUILD::prepare().\n\nAt this point, makepkg --verifysource should succeed. While #Compiling, make sure to also add --noextract option to the makepkg command, since it should be able to build the packages as if the source was extracted by makepkg --nobuild. And you are back to #Installing.\n\n"
    },
    {
      "title": "Cleanup",
      "level": 3,
      "content": "One will probably want to remove ~/build/linux/linux/ after merging. In addition, ~/build/linux/src/archlinux will accumulate branches in the form of 5.2.7-arch1 if more recent updates are done in this fashion. These can be deleted with\n\n```\n$ cd ~/build/linux/src/archlinux\n$ git branch --delete --force --verbose 5.2.7-arch1\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- https://docs.kernel.org/kbuild/kconfig.html and the parent directory\n\n"
    }
  ]
}