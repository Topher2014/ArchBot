{
  "title": "Mailx",
  "url": "https://wiki.archlinux.org/title/Mailx",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nArch Linux uses S-nail as its POSIX mailx incarnation. S-nail is MIME capable and has extensions for line editing, S/MIME, SMTP, IMAP, POP3, and more. Mailx is the user side of the Unix mail system, whereas the system side was traditionally taken by sendmail. S-nail can also send directly to external SMTP servers, so no local MTA is required.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the s-nail package.\n\n"
    },
    {
      "title": "Example usage",
      "level": 2,
      "content": "Because the systemwide configuration file (/etc/mail.rc) brings in some useful standards, sending mail over an installed local mail-transfer-agent (MTA), such as sendmail or postfix, can be as easy as follows:\n\n```\n# echo 'Message body' | mailx --debug --subject='A subject' --attach=an_attachment.txt foo1@bar.example 'Foo2 <foo2@bar.example>'\n```\n\nUsing the -d/--debug flag results in a sandbox dry-run. You can adjust the program which is used as a MTA by setting the variable mta (fine-tuning via mta-arguments, mta-no-default-arguments, mta-argv0).\n\nSee the manual mailx(1). In particular, see mailx(1) § On sending mail, and non-interactive mode:\n\n```\n# < /etc/passwd LC_ALL=C.UTF-8 mailx --debug -:/ --set=sendwait --set=ttycharset=utf8 --set=mta=/usr/bin/sendmail --subject='My password file!' -. 'Back <side@book>'\n# echo Message was passed successfully: $?\n```\n\nBy default message delivery is asynchronous, and mailx will exit as soon as the prepared message has been passed over to the delivery mechanism, stating only whether message preparation was successful (or not). If the sendwait option is set, however, the exit status of the started (builtin or not) MTA will be used as the message delivery \"success\" or \"failure\" status.\n\nThe -./--end-options command line option will forcefully terminate option processing and turn on message send mode.\n\nAs shown in the previous example, commands can (and should) detach from environmental settings and configuration files via LC_ALL=C.UTF-8, -://−−resource-files=/, and use explicit -S/--set and -X/--startup-cmd command line flags to create their own reproducible setup.\n\nSending messages to files and pipes, without an MTA intervention, is possible with the expandaddr option:\n\n```\n# echo bla | mailx --set=expandaddr --subject=test ./mbox.mbox\n# echo bla | mailx --set=expandaddr --subject=test '|cat >> ./mbox.mbox'\n# echo bla | mailx --set=expandaddr --subject=test -\n```\n\nexpandaddr can be given a value and be used for address verification. The following example assumes somefile.pdf exists. As mentioned above, one should remove -d/--debug to avoid a dry run. It sets the record option to the file used to record all outgoing mail, so that we then can look into the generated message:\n\n```\n# echo Body | \\\n>   LC_ALL=C.UTF-8 mailx --debug -:/ --set=v15-compat --set=sendwait --set=ttycharset=utf8 \\\n>     --set=from='Me <me@home>' \\\n>     --set=expandaddr=fail,-all,+addr \\\n>     --set=nosave --set=record=/tmp/out.mbox \\\n>     --set=mimetypes-load-control \\\n>     --startup-cmd='mimetype application/pdf pdf' \\\n>     --attach=somefile.pdf --subject=Subject \\\n>      -. '(foo2bar) <foo2@bar.example>' bob@hey.example\n# mailx --read-only --file /tmp/out.mbox\n```\n\nThe manual sections mailx(1) § A starter, and mailx(1) § On reading mail, and interactive mode worth a glance when looking for more \"quick shots\".\n\nIn cases when in the following USER and PASS are specified as part of an URL (and only then), they must become URL-percent-encoded: mailx offers the urlcodec command which does this for you:\n\n```\n# printf 'urlcodec encode USER PASS\\nx\\n' | mailx -#\n```\n\n-# is for -#/--batch-mode. printf as well as mailx are subject to your locale settings:\n\n```\n# # In UTF-8:\n# printf 'urlcodec encode SPAß\\nx\\n' | mailx -#\n  SPA%C3%9F\n# # In ISO-8859-1:\n# printf 'urlc enc SPAß\\nx\\n' | mailx -#\n  SPA%DF\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Configuration files are the user-specific $HOME/.mailrc and the systemwide /etc/mail.rc, the latter of which is in the PKGBUILD's backup array, and hence will survive upgrades to s-nail. All the remaining examples in this article are based upon this configuration template, which simply sets some security and send mode basics:\n\n```\n# All the examples require v15-compat!\nset v15-compat\n\n# Arch Linux-specific locations of certificates.\n# Since these are subject to the Arch Linux update mechanism,\n# use only those, do not try to load OpenSSL builtin ones.\n# And use the TLS specific set: see \"man 8 update-ca-trust\"\n#set ssl-ca-dir=/etc/ssl/certs\nset ssl-ca-file=/etc/ssl/certs/ca-certificates.crt\nset ssl-ca-no-defaults\n\n# Do not use protocols older than TLS v1.2.\n# Change this only when the remote server does not support it:\n# maybe use ssl-protocol-HOST (or -USER@HOST) syntax to define\n# such explicit exceptions, then, e.g.\n#     ssl-protocol-USER@archlinux.org=\"-ALL,+TLSv1.2\"\nset ssl-protocol=-ALL,+TLSv1.2\n\n# Explicitly define the list of ciphers, which may improve security,\n# especially with protocols older than TLS v1.2.  See ciphers(1).\n# This is an example: in reality it is possibly best to only use\n# ssl-cipher-list-HOST (or -USER@HOST), as necessary, again..\nset ssl-cipher-list=TLSv1.2:!aNULL:!eNULL:@STRENGTH\n#set ssl-cipher-list=\"ALL:!aNULL:!eNULL:!MEDIUM:!LOW:!MD5:!RC4:!EXPORT\"\n\n# Request strict transport security checks\nset ssl-verify=strict\n\n# Essential setting: select allowed character sets\n# (Have a look at the \"Character sets\" manual section)\nset sendcharsets=utf-8,iso-8859-1\n\n# A very kind option: when replying to a message, first try to\n# use the same encoding that the original poster used herself!\nset reply-in-same-charset\n# When replying to or forwarding a message the comment and name\n# parts of email addresses are removed unless this variable is set\nset fullnames\n\n# When sending messages, wait until the Mail-Transfer-Agent finishs.\nset sendwait\n\n# Only use builtin MIME types, no mime.types(5) files.\n# That set is often sufficient, but look at the output of the\n# `mimetype' command to ensure this is true for you, too\nset mimetypes-load-control\n\n# Default directory where we act in (relative to $HOME if not absolute)\nset folder=mail\n# A leading \"+\" (often) means: under folder\n# record is used to save copies of sent messages, $DEAD is error storage\n# inbox: system mailbox, by default /var/mail/$USER: file %\n# $MBOX: secondary mailbox: file &\nset MBOX=+mbox.mbox record=+sent.mbox DEAD=+dead.mbox\nset inbox=+system.mbox\n\n# Define some shortcuts; now one may say, e.g., file mymbo\nshortcut mymbo %:+mbox.mbox \\\n         myrec +sent.mbox\n\n# This is optional, but you should get the big picture\n# by reading the manual before you leave that off\nset from=\"Your Name <youremail@domain>\"\n\n# Mailing-list specifics (manual: \"Mailing lists\"):\nset followup-to followup-to-honour=ask-yes reply-to-honour=ask-yes\n# And teach some non-subscribed / some subscribed lists, too\nmlist @xyz-editor.xyz$ @xyzf.xyz$\nmlsubscribe ^xfans@xfans.xyz$\n```\n\n"
    },
    {
      "title": "Sending mail with an external SMTP server",
      "level": 2,
      "content": "To send messages via the built-in SMTP (Simple Mail Transfer Protocol) client to an external SMTP server, several options have to be set or adjusted. Add the following as appropriate to the configuration as above, changing bold strings. Reading the manual section mailx(1) § On URL syntax and credential lookup is worthwhile.\n\n```\n# It can be as easy as\n# (Remember USER and PASS must be URL percent encoded)\nset mta=smtp://USER:PASS@HOST \\\n    smtp-use-starttls\n\n# It may be necessary to set hostname and/or smtp-hostname\n# if the \"SERVER\" of smtp and \"domain\" of from do not match.\n# Reading the \"ON URL SYNTAX..\" and smtp manual entries may be worthwhile\nset mta=(smtp[s]/submission)://[USER[:PASS]@]SERVER[:PORT] \\\n    smtp-auth=login[/plain]... \\\n    smtp-use-starttls\n\n# E.g. here is a real life example of a very huge free mail provider\n# (Activate this account via mailx -AXooglX from the command line,\n# or use the ? acc[ount] XooglX command in interactive mode)\naccount XooglX {\n   # Localize options, forget them when changing the account\n   localopts yes\n   # (The plain smtp:// proto is optional)\n   set mta=smtp://USER:PASS@smtp.gmXil.com smtp-use-starttls\n   set from=\"Your Name <youremail@domain>\"\n}\n\n# And here is a pretty large one which does not allow sending mails\n# if there is a domain name mismatch on the SMTP protocol level,\n# which would bite us if the value of from does not match, e.g.,\n# for people who have a sXXXXeforge project and want to speak\n# with the mailing list under their project account (in from),\n# still sending the message through their normal mail provider\naccount XandeX {\n   localopts yes\n   set mta=smtps://USER:PASS@smtp.yaXXex.ru:465 \\\n       hostname=yaXXex.com smtp-hostname=\n   set from=\"Your Name <youremail@domain>\"\n}\n```\n\nNote that, when storing passwords in $HOME/.mailrc, you should set appropriate permissions with chmod 0600. You can also set the netrc-lookup option and store user credentials in $HOME/.netrc (or $NETRC) instead; e.g., here is a real life example that sets up SMTP, POP3 as well as IMAP, storing all user credentials in there:\n\n```\naccount XandeX {\n   localopts yes\n   set from=\"Your Name <youremail@domain>\"\n   wysh set netrc-lookup # netrc-pipe='gpg -qd ~/.netrc.gpg'\n   set mta=smtps://smtp.yXXXXx.ru:465 \\\n       smtp-hostname= hostname=yXXXXx.com\n   set pop3-keepalive=240\n   shortcut pop pop3s://pop.yXXXXx.ru\n   # Type xp to login to the POP3 account\n   commandalias xp 'fi pop'\n   set imap-keepalive=240\n   shortcut imap imaps://imap.yXXXXx.ru\n   # Type xi to login to the IMAP account\n   commandalias xi 'fi imap'\n }\n```\n\nand, in $HOME/.netrc:\n\n```\nmachine *.yXXXXx.ru login USER password PASS\n```\n\nIn this case USER and PASS are clear text, not URL encoded. You can further diversify things and use encrypted password storage. To adjust the example accordingly, simply encrypt your ~/.netrc file with OpenPGP and uncomment the netrc-pipe statement above. The encrypted storage ~/.netrc.gpg can be created like this:\n\n```\n# gpg -e .netrc\n# eval `gpg-agent --daemon --pinentry-program=/usr/bin/pinentry-curses --max-cache-ttl 99999 --default-cache-ttl 99999`\n```\n\nTest the configuration (use the -d/--debug command line option for a dry-run):\n\n```\n# echo test-body | mailx --verbose --verbose --account=XandeX --subject=test-subject some@where\n```\n\n"
    },
    {
      "title": "Interactive usage",
      "level": 2,
      "content": "Interactive usage is referred to throughout the manual as \"compose mode\". mailx(1) § Compose mode.\n\nMailx has a wide-glyph aware command line editor with history capabilities and coloured message display support. Because it strives for POSIX standard compliance some settings have to be adjusted before using it interactively does not baffle all descriptions, however. Reading mailx(1) is unavoidable, but add, at a minimum, the following on top of the example configuration:\n\n```\n# (The global configuration /etc/mail.rc provides some commented basics;\n# in particular it shows all options that POSIX mandates as defaults.)\n\n# Start into interactive mode even if the system mailbox is empty or\n# does not exist.  mailx will exit immediately without that one\nset emptystart\n\n# When composing a message, start directly into $EDITOR\nset editalong\n\n# Start $PAGER when a message is longer than VALUE lines;\n# without VALUE: screen $LINES\nset crt=\n\n# A nicer prompt for a modern terminal\nwysh set prompt='?\\${?}!\\${!}[\\${account}#\\${mailbox-display}]? '\n\n# Add more entries to the history, and make that persistent\nset history-gabby history-file=+.s-nailhist\n# When printing messages, show only these headers\n# (Easier to retain what you want than to ignore\n# what you do not; use Print to see all headers and Show\n# to see the raw message content)\nretain date from to cc subject\n\n# Try to get around weird MIME attachment specifications\n# (This option can take a value, see the manual for more)\nset mime-counter-evidence=0xE\n\n# Display HTML parts inline, nicer than what the builtin viewer can achieve\n#set pipe-text/html='@* lynx -stdin -dump -force_html'\n# Learn another mimetype\nmimetype model/vrml wrl vrml\n\n# Create some new commands so that, e.g., `ls /tmp' will..\ncommandalias ls !ls -latro\ncommandalias ps !ps axu\n```\n\nOnce you are in it use list to print all available builtin commands. Typing `?X' tries to expand \"X\" and print a help string; since mailx allows abbreviations of all commands this is sometimes handy, try, e.g., ?h, ?he and ?hel ... The command help will print a short summary of the most frequent used commands, more so if the variable verbose is set.\n\n"
    },
    {
      "title": "Usage",
      "level": 3,
      "content": "When starting into interactive mode a summary of the content of the initially opened mailbox is printed, as via the headers command. In the header display messages are given numbers (starting at 1) which uniquely identify messages. Messages can be printed with the print command, or short: p. Whereas p honours retained (or ignored) list of headers to be displayed, the Print command will not and display all headers; the Show command will print raw message content.\n\nBy default the current message (dot) is printed, but just like with many other commands it is possible to specify lists of messages, as is documented in the manual section mailx(1) § Specifying messages; e.g., p:u will display all unread messages, p. will print the current message (dot), p 1 5 will print the messages 1 and 5 and p- and p+ will print the previous and the next message, respectively. Note that simply typing RETURN in an empty line acts like next (n) and thus prints the next message.\n\nThe command from is nice for an overview, e.g., f '@<@arch linux will print the header summary of all messages that contain the string \"arch linux\" in some message header, whereas f '@arch linux will only match those with \"arch linux\" in their subject; finally, the regular expression f @^A[^[:space:]]+ finds all the messages whose subject start with an A character, and without white space characters immediately following that A. Be aware that quoting may be necessary when there is whitespace in search expressions etc.\n\n- file and File open a new mailbox, the latter in readonly mode\n- newmail (dependent on the mailbox, checks for new mail and) prints a listing of new messages\n- he (headers) reprints the message list\n- z- z+ z0 z$ scroll through the header display (dependent on the terminal you are using the Home/End/PageUp/PageDown keys will be working aliases)\n- folders shows a listing of mailboxes under the currently set folder\n- r replies to all addressees of the given message(s)\n- R replies to the sender of the given message(s)\n- Lreply \"mailing-list\" reply to the given message(s)\n- move or mv moves (a) message(s)\n- (un)flag marks (a) message(s) as (un)flagged\n- new marks (a) message(s) unread\n- seen marks (a) message(s) read\n- P prints (a) message(s) with all headers\n- p prints (a) message(s) and all non-ignored headers\n- show prints the raw message of content of (a) message(s)\n- write or w download messages and attachments in native format to local storage\n\n"
    },
    {
      "title": "Message composition",
      "level": 3,
      "content": "Composition is started by typing mail user@host or by replying to a message. When you enter $EDITOR (assuming editalong is set) you will find yourself in the native editor, where many operations can be performed using tilde escapes (short help available via ~?). Of particular interest is ~@, which either allows interactive editing of the attachment list, or, when given arguments, to add a(n) (comma-separated list of) additional attachment(s), as well as ~^, which is a multiplexer command which offers some control about the message, e.g., to create custom headers.\n\nTo send the mail, signal EOT with Ctrl+d or type ~. on its own line.\n\n"
    },
    {
      "title": "Using S/MIME",
      "level": 2,
      "content": "The manual contains a step-by-step example of how to create your certificates etc. (mailx(1) § Signed and encrypted messages with S/MIME as well as mailx(1) § S/MIME step by step). Assuming you have your private key and signed certificate already, just create the paired file we need\n\n```\n# cat private-key.pem signed-certificate.pem > ~/pair.pem\n```\n\nand setup S-nail via\n\n```\nset smime-sign-cert=~/pair.pem \\\n    smime-sign-message-digest=SHA256 \\\n    smime-sign\n```\n\nFrom now any message that is sent will be signed. The default message digest would be SHA1, as mandated by RFC:5751. Note that S/MIME always works relative to the setting of the variable from, so it seems best to instead place the above settings in an account. The verify command verifies S/MIME messages, but note that S/MIME decryption and verification is solely based upon OpenSSL for now, which only supports messages with a simplistic MIME structure.\n\n"
    },
    {
      "title": "Workaround missing OpenPGP support",
      "level": 2,
      "content": "S-nail does not yet support OpenPGP. However, using a macro it is possible to at least automatically verify inline --clearsigned messages, and using command ghosts their usage becomes handy: e.g., use the following in resource file and you will be able to verify a clearsigned message by just typing V:\n\n```\ndefine V {\n   \\localopts yes; \\wysh set pipe-text/plain=$'@*#++=@\\\n      < \"${MAILX_FILENAME_TEMPORARY}\" awk \\\n            -v TMPFILE=\"${MAILX_FILENAME_TEMPORARY}\" \\'\\\n         BEGIN{done=0}\\\n         /^-----BEGIN PGP SIGNED MESSAGE-----/,/^$/ {\\\n            if(done++ != 0)\\\n               next;\\\n            print \"--- GPG --verify ---\";\\\n            system(\"gpg --verify \" TMPFILE \" 2>&1\");\\\n            print \"--- GPG --verify ---\";\\\n            print \"\";\\\n            next;\\\n         }\\\n         /^-----BEGIN PGP SIGNATURE-----/,/^-----END PGP SIGNATURE-----/ {\\\n            next;\\\n         }\\\n         {print}\\\n         \\;\\\n      print\n}\ndefine RK {\n  !printf 'Key IDs to gpg --recv-keys: ';\\\n    read keyids;\\\n    gpg --recv-keys ${keyids};\n}\ncommandalias V '\\'call V\ncommandalias RK '\\call RK'\n```\n\n"
    },
    {
      "title": "Using an IMAP mailbox",
      "level": 2,
      "content": "The following are only quick hints. It is also possible to define folder and inbox to point to IMAP server folders, for example. Internationalized names are supported.\n\n```\nset v15-compat\n# or many servers will expire the session\nset imap-keepalive=240\nset imap-cache=~/.imap_cache\n```\n\n```\n# You may want to define shortcuts to folders, for example:\nshortcut myimap \"imaps://USER:PASS@server:port\"\nset inbox=myimap\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- S-nail website\n\n"
    }
  ]
}