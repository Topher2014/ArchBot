{
  "title": "Etckeeper",
  "url": "https://wiki.archlinux.org/title/Etckeeper",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Git\n- Cron\n\nEtckeeper is a collection of tools to keep track of /etc/ in a repository (Git, Mercurial, Bazaar or Darcs are supported). A pacman hook auto-commits changes before a system-upgrade and file permissions are tracked, which version control does not normally support, but is important for files like /etc/shadow.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the etckeeper package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The preferred version control system (default is git) and other options are to be configured in /etc/etckeeper/etckeeper.conf.\n\nEtckeeper supports using pacman as a LOWLEVEL_PACKAGE_MANAGER and HIGHLEVEL_PACKAGE_MANAGER in etckeeper.conf.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "After configuration the repository for the /etc path has to be initialized:\n\n```\n# etckeeper init\n```\n\nAnd perform a first commit to keep track of the changes, this is a necessary step for etckeeper to be able to work automatically:\n\n```\n# etckeeper commit \"first commit\"\n```\n\nAs of etckeeper version 1.18.3-1, pre-install and post-install pacman hooks are executed automatically on package installation, update and removal. A manual #Wrapper script is not required anymore.\n\nTo track other changes to the /etc path, you need to either commit changes manually (see the etckeeper(8) man page for commands) or use one of the stopgap solutions below.\n\ngit can not store file permissions directly so it is handled by etckeeper and you need to run the etckeeper init again to restore them after a checkout. Alternatively, you can use Systemd#systemd-tmpfiles - temporary files to preserve the permissions.\n\n"
    },
    {
      "title": "systemd",
      "level": 3,
      "content": "Service and timer units are included in the package. Simply enable etckeeper.timer.\n\nSee Systemd/Timers for more information and Systemd#Editing provided units if you wish to edit the provided units.\n\n"
    },
    {
      "title": "Cron",
      "level": 3,
      "content": "There is a cron script in the source distribution. You can use this script to automatically commit changes on a schedule.\n\nFor example, to make it run daily:\n\n1. Have cron installed and enabled.\n1. Put script as /etc/cron.daily/script_name.\n1. Permit execution of file for root (As the root user run chmod u+x /etc/cron.daily/script_name).\n\nSee cron#Cronie, cron for more information.\n\n"
    },
    {
      "title": "Incron",
      "level": 3,
      "content": "To automatically create commits on every file modification inside /etc/, use incron. It utilizes native filesystem signalling through inotify(7).\n\nAfter installing incron and initializing etckeeper, add root to the users allowed to run incron scripts:\n\n```\n# echo root | tee -a /etc/incron.allow\n```\n\nThen edit the incrontab with:\n\n```\n# incrontab -e\n```\n\nAdd in the text:\n\n```\n# /etc IN_MODIFY,IN_NO_LOOP /bin/etckeeper commit \"[message]\"\n```\n\nIN_NO_LOOP is a flag that waits for the commit to finish before running the next command, and prevents an infinite loop.\n\nWhere [message] could be something like \"modified $#\" where $# is a special incrontab wildcard expanded to the name of the file modified.\n\nDo note that Incron is not capable of watching subdirectories. Only files within the path will be monitored. If you need subdirectories monitored, you must give them their own entry. However, commits when top-level files are modified will still commit all changes.\n\nSee: [1], incrond(8)\n\n"
    },
    {
      "title": "Automatic push to remote repo",
      "level": 3,
      "content": "Whilst having a local backup in /etc/.git is a good first step, etckeeper can automatically push your changes on each commit to a remote repository such as Github.\n\nFirst, login as root, then from the /etc/.git directory, add your remote Github repository:\n\n```\n# git remote add origin https://github.com/user/repo.git\n```\n\nNext, one of two hooks must be used or configured to push:\n\n"
    },
    {
      "title": "Using etckeeper provided hook",
      "level": 4,
      "content": "Edit the PUSH_REMOTE option in /etc/etckeeper/etckeeper.conf, with the name of the remote repository you want etckeeper to push to. For example:\n\n```\nPUSH_REMOTE=\"origin\"\n```\n\nMultiple remote repositories can be added separated with spaces.\n\n"
    },
    {
      "title": "Through a custom hook",
      "level": 4,
      "content": "Create an executable file /etc/etckeeper/commit.d/40github-push:\n\n```\n#!/bin/sh\nset -e\n\nif [ \"$VCS\" = git ] && [ -d .git ]; then\n  cd /etc/\n  git push origin master\nfi\n```\n\n"
    },
    {
      "title": "Wrapper script",
      "level": 3,
      "content": "If you want to track changes of a frequently executed command (e.g. command), a simple wrapper script can help to automate it. For example, create:\n\n```\n/usr/local/bin/checketc.sh\n```\n\n```\n#!/bin/bash\n\netckeeper pre-install\ncommand\netckeeper post-install\n```\n\nand make it executable. Alternatively, you may call the Etckeeper commands via a bash alias or function, see Bash#Aliases for more information.\n\n"
    },
    {
      "title": "Reflector",
      "level": 3,
      "content": "To automatically commit the change after each Reflector invocation, make the reflector.service depend on etckeeper.service by creating a drop-in file on reflector.service with following content:\n\n```\n[Unit]\nBefore=etckeeper.service\nWants=etckeeper.service\n```\n\n"
    }
  ]
}