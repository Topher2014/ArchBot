{
  "title": "Screen Tips",
  "url": "https://wiki.archlinux.org/title/Screen_Tips",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- tmux\n- Ratpoison\n- Xpra\n\nGNU Screen is a full-screen window manager that multiplexes a physical terminal between several processes, typically interactive shells. Programs running in Screen continue to run when their window is currently not visible and even when the whole screen session is detached from the user's terminal.\n\nSee the official overview GNU Screen manual for the description of the features.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the screen package.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Commands are entered pressing the \"escape key\" Ctrl+a and then the key binding.\n\nSome users find the default escape key Ctrl+a inconvenient. The escape key can be changed to another key as described in #Change the escape key.\n\n"
    },
    {
      "title": "Common Commands",
      "level": 3,
      "content": "- Ctrl+a ? Displays commands and their defaults\n- Ctrl+a : Enter to the command prompt of screen\n- Ctrl+a \" Window list\n- Ctrl+a 0 opens window 0\n- Ctrl+a A Rename the current window\n- Ctrl+a a Sends Ctrl+a to the current window\n- Ctrl+a c Create a new window (with shell)\n- Ctrl+a S Split current region horizontally into two regions\n- Ctrl+a | Split current region vertically into two regions\n- Ctrl+a tab Switch the input focus to the next region\n- Ctrl+a Ctrl+a Toggle between current and previous region\n- Ctrl+a Esc Enter Copy Mode (use enter to select a range of text)\n- Ctrl+a ] Paste text\n- Ctrl+a Q Close all regions but the current one\n- Ctrl+a X Close the current region\n- Ctrl+a d Detach from the current screen session, and leave it running. Use screen -r to resume\n\n"
    },
    {
      "title": "Command Prompt Commands",
      "level": 3,
      "content": "- Ctrl+a :quit Closes all windows and closes screen session\n- Ctrl+a :source ~/.screenrc Reloads screenrc configuration file (can alternatively use /etc/screenrc)\n\n"
    },
    {
      "title": "Named sessions",
      "level": 3,
      "content": "To create a named session, run screen with the following command:\n\n```\n$ screen -S session_name\n```\n\nTo (re)name an existing a session, run the following command while screen is running:\n\nCtrl+a :sessionname session_name\n\nTo print a list of pid.tty.host strings identifying your screen sessions:\n\n```\n$ screen -list\n```\n\nTo attach to a named screen session, run this command:\n\n```\n$ screen -x session_name\n```\n\nor\n\n```\n$ screen -r session_name\n```\n\n"
    },
    {
      "title": "Customizing Screen",
      "level": 3,
      "content": "You can modify the default settings for Screen according to your preference either through a personal .screenrc file which contains commands to be executed at startup (e.g. ~/.screenrc) or on the fly in command mode (e.g. Ctrl+a :vbell off).\n\n"
    },
    {
      "title": "Autostart with systemd",
      "level": 3,
      "content": "This service autostarts screen for the specified user (e.g. systemctl enable screen@florian). Running this as a system unit is important, because systemd --user instance is not guaranteed to be running and will be killed when the last session for given the user is closed.\n\n```\n/etc/systemd/system/screen@.service\n```\n\n```\n[Unit]\nDescription=screen\nAfter=network.target\n\n[Service]\nType=simple\nUser=%i\nExecStart=/usr/bin/screen -DmS autoscreen\nExecStop=/usr/bin/screen -S autoscreen -X quit\n\n[Install]\nWantedBy=multi-user.target\n```\n\n"
    },
    {
      "title": "Change the escape key",
      "level": 3,
      "content": "It can be a good idea to change the default escape key, not only because \"a\" is usually typed with the left pinky, but also because Ctrl+a is mapped to the common command beginning-of-line in GNU Readline and Bash-like shells.\n\nThe escape key can be changed with the escape option in ~/.screenrc, or the -e option to screen.\n\nFor example, if you find that you rarely type Ctrl+j in your shell or editor, you could use escape ^Jj to set the escape key to Ctrl+j. The second \"j\" means that a literal Ctrl+j can be sent to the terminal via the sequence Ctrl+j j. For Dvorak keyboard users, Ctrl+t (escape ^Tt) might be more convenient.\n\nMore exotic options include escape `` which sets the escape key to `, or escape ^^^ which sets it to Ctrl+^.\n\nThe escape key is also called the \"command character\" in Screen documentation.\n\n"
    },
    {
      "title": "Start at window 1",
      "level": 3,
      "content": "By default, the first screen window is 0. If you would rather never have a window 0 and start instead with 1, add the following lines on your configuration:\n\n```\n~/.screenrc\n```\n\n```\nbind c screen 1\nbind ^c screen 1\nbind 0 select 10                                                            \nscreen 1\n```\n\n"
    },
    {
      "title": "Nested Screen Sessions",
      "level": 3,
      "content": "It is possible to get stuck in a nested screen session. A common scenario: you start an SSH session from within a screen session. Within the SSH session, you start screen. By default, the outer screen session that was launched first responds to Ctrl+a commands. To send a command to the inner screen session, use Ctrl+a a, followed by your command. For example:\n\n- Ctrl+a a d Detaches the inner screen session.\n- Ctrl+a a K Kills the inner screen session.\n\n"
    },
    {
      "title": "Start Screen on every shell",
      "level": 3,
      "content": "For Bash and Zsh, add the following snippet to your .bashrc or .zshrc before your aliases:\n\n```\n~/.bashrc or ~/.zshrc\n```\n\n```\nif [[ -z \"$STY\" ]]; then\n   screen -xRR session_name\nfi\n```\n\n"
    },
    {
      "title": "Use 256 colors",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nBy default, Screen uses an 8-color terminal emulator. To enable more colors, you need to be using a terminal that supports them and set the correct term value. This will use terminfo to describe how the ANSI escape codes will be interpreted. An entry in the terminfo database structure must exist, ncurses provides many common descriptions stored under /usr/share/terminfo/.\n\nFirst try the generic value:\n\n```\n~/.screenrc\n```\n\n```\nterm screen-256color\n```\n\nIf that does not work, try setting it based on your terminal. When using xterm-based terminal:\n\n```\n~/.screenrc\n```\n\n```\nterm xterm-256color\n```\n\nWhen using rxvt-unicode:\n\n```\n~/.screenrc\n```\n\n```\nterm rxvt-unicode-256color\n```\n\nAs a last resort, try setting termcapinfo instead:\n\n```\n~/.screenrc\n```\n\n```\nattrcolor b \".I\"    # allow bold colors - necessary for some reason\ntermcapinfo xterm 'Co#256:AB=\\E[48;5;%dm:AF=\\E[38;5;%dm'   # tell screen how to set colors. AB = background, AF=foreground\ndefbce on    # use current bg color for erased chars\n```\n\n"
    },
    {
      "title": "Informative statusbar",
      "level": 3,
      "content": "The default statusbar may be a little lacking. You may find this one more helpful:\n\n```\n~/.screenrc\n```\n\n```\ntruecolor on\nhardstatus off\nhardstatus alwayslastline '%{#00ff00}[ %H ][%{#ffffff}%= %{7}%?%-Lw%?%{1;0}%{1}(%{15}%n%f%t%?(%u)%?%{1;0}%{1})%{7}%?%+Lw%? %=%{#00ff00}][ %{#00a5ff}%{6}%Y-%m-%d %{#ffffff}%{7}%0c%{#00ff00} ]'\n```\n\nstatusbar at top:\n\n```\n~/.screenrc\n```\n\n```\nhardstatus firstline\n```\n\n"
    },
    {
      "title": "Turn welcome message off",
      "level": 3,
      "content": "```\n~/.screenrc\n```\n\n```\nstartup_message off\n```\n\n"
    },
    {
      "title": "Turn your hardstatus line into a dynamic urxvt|xterm|aterm window title",
      "level": 3,
      "content": "This one is pretty simple; just switch your current hardstatus line into a caption line with notification, and edit accordingly:\n\n```\n~/.screenrc\n```\n\n```\ntermcapinfo rxvt* 'hs:ts=\\E]2;:fs=\\007:ds=\\E]2;\\007'\nhardstatus string \"screen (%n: %t)\"\ncaption always '%{= 7;0}%Y-%m-%d %c %-Lw%{+b 2;0}[%n %t]%{-}%+Lw%=%{-}'\n```\n\nThis will give you something like screen (0 bash) in the title of your terminal emulator. The caption supplies the date, current time, and colorizes your screen window collection.\n\n"
    },
    {
      "title": "Use X scrolling mechanism",
      "level": 3,
      "content": "The scroll buffer of GNU Screen can be accessed with Ctrl+a [. However, this is very inconvenient. To use the scroll bar of e.g. xterm or Konsole, add the following line [1]:\n\n```\n~/.screenrc\n```\n\n```\ntermcapinfo xterm*|rxvt*|kterm*|Eterm* ti@:te@\n```\n\n"
    },
    {
      "title": "Attach an existing running program to screen",
      "level": 3,
      "content": "If you started a program outside Screen, but now you would like it to be inside, you can use reptyr to reparent the process from its current TTY to one inside screen.\n\nInstall the reptyr package.\n\nGet the PID of the process (you can use ps ax for that). Now just enter the PID as argument to reptyr inside a screen window.\n\n```\n$ reptyr pid\n```\n\n"
    },
    {
      "title": "Setting a different bash prompt while in screen",
      "level": 3,
      "content": "If you want a different bash prompt when in a screen session, add the following to your .bashrc[2]:\n\n```\nif [ -z $STY ]\nthen\n        PS1=\"YOUR REGULAR PROMPT\"\nelse  \n        PS1=\"YOUR SCREEN PROMPT\"\nfi\n```\n\n"
    },
    {
      "title": "Turn off visual bell",
      "level": 3,
      "content": "With this setting, Screen will not make an ugly screen flash instead of a bell sound.\n\n```\n~/.screenrc\n```\n\n```\nvbell off\n```\n\n"
    },
    {
      "title": "Getting rid of the vertical and horizontal bars",
      "level": 3,
      "content": "To get rid of the vertical bars:\n\n```\n$ ~/.screenrc\n```\n\n```\nrendition so =00\n```\n\nTo hide the horizontal bar, set the back and foreground color to default (d) and display a blank (\" \"):\n\n```\n~/.screenrc\n```\n\n```\ncaption string \"%{03} \"\n```\n\nIf this does not work, try caption string \"%{00} \" instead. For the default caption in black and white, use caption string \"%{00}%3n %t\".\n\n"
    },
    {
      "title": "Fix for residual editor text",
      "level": 3,
      "content": "When you open a text editor like nano in screen and then close it, the text may stay visible in your terminal. To fix this, put the following:\n\n```\n~/.screenrc\n```\n\n```\naltscreen on\n```\n\n"
    },
    {
      "title": "Fix for Name column in windowlist only show \"bash\"",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nAdd following to ~/.screenrc:\n\n```\n~/.screenrc\n```\n\n```\nwindowlist string \"%4n %h%=%f\"\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:GNU Screen\n- GNU Screen User's Manual\n- Gentoo:Screen\n- Arch Forums - .screenrc configs with screenshots\n- Arch Forums - Regarding 256 color issue with urxvt\n\n"
    }
  ]
}