{
  "title": "Tmux",
  "url": "https://wiki.archlinux.org/title/Tmux",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "tmux is a \"terminal multiplexer: it enables a number of terminals (or windows), each running a separate program, to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached.\"\n\ntmux is an ISC-licensed alternative to GNU Screen. Although similar, there are many differences between the programs, as noted on the tmux FAQ page.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the tmux package. Optionally, install tmux-bash-completion-gitAUR to provide bash completion functions for tmux.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "By default, tmux looks for user-specific configuration at $XDG_CONFIG_HOME/tmux/tmux.conf followed by ~/.config/tmux/tmux.conf, as of 3.2. A global configuration file may be provided at /etc/tmux.conf though by default Arch does not ship such a file.\n\n"
    },
    {
      "title": "Key bindings",
      "level": 3,
      "content": "By default, command key bindings are prefixed by Ctrl+b. For example, to vertically split a window type Ctrl+b %.\n\nAfter splitting a window into multiple panes, a pane can be resized by the hitting prefix key (e.g. Ctrl+b) and, while continuing to hold Ctrl, press Left/Right/Up/Down. Swapping panes is achieved in the same manner, but by hitting o instead of a directional key.\n\nKey bindings may be changed with the bind and unbind commands in tmux.conf. For example, the default prefix binding of Ctrl+b can be changed to Ctrl+a by adding the following commands in your configuration file:\n\n```\nunbind C-b\nset -g prefix C-a\nbind C-a send-prefix\n```\n\nTo create a new window you can use Ctrl+b c and move forward one window with Ctrl+b n and backwards one window with Ctrl+b p.\n\nAdditional ways to move between windows include the following:\n\n```\nCtrl+b l (Move to the previously selected window)\nCtrl+b w (List all windows / window numbers)\nCtrl+b <window number> (Move to the specified window number, the default bindings are from 0 – 9)\nCtrl+b q  (Show pane numbers, when the numbers show up type the key to goto that pane)\n```\n\ntmux has a find-window option & key binding to ease navigation of many windows:\n\n```\nCtrl+b f <window name> (Search for window name)\nCtrl+b w (Select from interactive list of windows)\n```\n\n"
    },
    {
      "title": "Copy Mode",
      "level": 4,
      "content": "A tmux window may be in one of several modes. The default permits direct access to the terminal attached to the window; the other is copy mode. Once in copy mode you can navigate the buffer including scrolling the history. Use vi or emacs-style key bindings in copy mode. The default is emacs, unless VISUAL or EDITOR contains ‘vi’\n\nTo enter copy mode do the following:\n\n```\nCtrl+b [\n```\n\nYou can navigate the buffer as you would in your default editor.\n\nTo quit copy mode, use one of the following keybindings:\n\nvi mode:\n\n```\nq\n```\n\nemacs mode:\n\n```\nEsc\n```\n\n"
    },
    {
      "title": "Browsing URLs",
      "level": 3,
      "content": "To browse URLs inside tmux you must have urlviewAUR installed and configured.\n\nInside a new terminal:\n\n```\nbind-key u capture-pane \\; save-buffer /tmp/tmux-buffer \\; run-shell \"$TERMINAL -e urlview /tmp/tmux-buffer\"\n```\n\nOr inside a new tmux window (no new terminal needed):\n\n```\nbind-key u capture-pane \\; save-buffer /tmp/tmux-buffer \\; new-window -n \"urlview\" '$SHELL -c \"urlview < /tmp/tmux-buffer\"'\n```\n\n"
    },
    {
      "title": "256 colors",
      "level": 4,
      "content": "If you are using a 256 color terminal, you will need to set the correct term in tmux: tmux, or tmux-256color. This can set in the configuration file:\n\n```\ntmux.conf\n```\n\n```\nset -g default-terminal \"tmux-256color\"\n```\n\nAlso, if tmux messes up, you can force tmux to assume that the terminal support 256 colors, by adding the following alias in .bashrc:\n\n```\nalias tmux=\"tmux -2\"\n```\n\n"
    },
    {
      "title": "24-bit color",
      "level": 4,
      "content": "tmux supports 24-bit color. If your terminal supports this mode (see [1]), add it to the terminal-features setting.\n\nFor example, if you use the Alacritty terminal, you would add:\n\n```\nset -as terminal-features \",alacritty*:RGB\"\n```\n\nFor other terminals, replace alacritty above with the relevant terminal type as stored in $TERM.\n\nSee tmux(1) for details about the RGB terminfo flag.\n\n"
    },
    {
      "title": "xterm-keys",
      "level": 4,
      "content": "To enable xterm-keys, add the following line in the configuration file:\n\n```\ntmux.conf\n```\n\n```\nset-option -g xterm-keys on\n```\n\nIf you enable xterm-keys in your tmux.conf, then you need to build a custom terminfo to declare the new escape codes or applications will not know about them. Compile the following with tic and you can use \"xterm-screen-256color\" as your TERM:\n\n```\n# A screen- based TERMINFO that declares the escape sequences\n# enabled by the tmux config \"set-window-option -g xterm-keys\".\n#\n# Prefix the name with xterm- since some applications inspect\n# the TERM *name* in addition to the terminal capabilities advertised.\nxterm-screen-256color|GNU Screen with 256 colors bce and tmux xterm-keys,\n\n# As of Nov'11, the below keys are picked up by\n# .../tmux/blob/master/trunk/xterm-keys.c:\n\tkDC=\\E[3;2~, kEND=\\E[1;2F, kHOM=\\E[1;2H,\n\tkIC=\\E[2;2~, kLFT=\\E[1;2D, kNXT=\\E[6;2~, kPRV=\\E[5;2~,\n\tkRIT=\\E[1;2C,\n\n# Change this to screen-256color if the terminal you run tmux in\n# doesn't support bce:\n\tuse=screen-256color-bce,\n```\n\nTo check if your terminal support bce, you can use tic -c:\n\n```\n$ tic -c xterm-screen-256color \n\"xterm-screen-256color\", line 16, terminal 'xterm-screen-256color': resolution of use=screen-256color-bce failed\n```\n\nTo compile with tic:\n\n```\n$ tic xterm-screen-256color\n```\n\nThe file will be compiled and saved in $HOME/.terminfo or in /usr/share/terminfo/ if run as root (and so available system-wide).\n\n"
    },
    {
      "title": "Theming",
      "level": 3,
      "content": "Tmux can be themed however in order to do so, first one needs to know the color codes. This can be achieved by executing the below command, which will print the color codes together with a sample of such color:\n\n```\n$ for i in {0..255}; do printf \"\\x1b[38;5;${i}mcolor${i} - ██████████\\n\"; done\n```\n\nThe color codes printed using the above command can then be used to change the tmux color scheme. The following is an example for how one can change the colors of the status bar:\n\n```\n# Status line colors\nset -g status-bg \"color4\"         # blue background\nset -g status-fg \"color7\"         # gray text color\nset -g status-right \"%l:%M %p\"    # time format\nset-window-option -g window-status-current-style \"bg=color75,fg=color231 bold\"    # current window background + foreground colors\n```\n\nThe panes borders can also be themed as per below example:\n\n```\n# border colors\nset -g pane-border-style        fg=\"colour255\"\nset -g pane-active-border-style fg=\"colour33\"\n```\n\n"
    },
    {
      "title": "Other Settings",
      "level": 3,
      "content": "To limit the scrollback buffer to 10000 lines:\n\n```\nset -g history-limit 10000\n```\n\nMouse can be toggled with\n\n```\nbind-key m set-option -g mouse \\; display \"Mouse: #{?mouse,ON,OFF}\"\n```\n\n"
    },
    {
      "title": "Autostart with systemd",
      "level": 3,
      "content": "There are some notable advantages to starting a tmux server at startup. Notably, when you start a new tmux session, having the service already running reduces any delays in the startup.\n\nFurthermore, any customization attached to your tmux session will be retained and your tmux session can be made to persist even if you have never logged in, if you have some reason to do that (like a heavily scripted tmux configuration or shared user tmux sessions).\n\nThe service below starts tmux for the specified user (i.e. start/enable with tmux@username.service):\n\n```\n/etc/systemd/system/tmux@.service\n```\n\n```\n[Unit]\nDescription=tmux session for user %I\n\n[Service]\nType=forking\nUser=%I\n# WARNING: use %I instead of %u here; %u=root in system services.\nExecStart=/usr/bin/tmux new-session -s %I -d\nExecStop=/usr/bin/tmux kill-session -t %I\n\n[Install]\nWantedBy=multi-user.target\n```\n\n- You may want to add WorkingDirectory=custom_path to customize working directory. If set to ~, the home directory of the user specified in User= is used.\n- Add -v tmux arg to generate tmux client and server logs in WorkingDirectory.\n- If you want to import environment variables related to graphical session, such as DISPLAY, WAYLAND_DISPLAY, or SESSION_MANAGER, change WantedBy option to graphical-session.target, and add After=graphical-session.target under [Unit] section.\n- Alternatively, you can create a script that runs automatically after the desktop environment, window manager, or Wayland compositor loads and imports related variables using the tmux setenv -g name [value].\n\nAlternatively, you can place this file within your systemd/User directory (without User=%I and by replacing multi-user.target with default.target in WantedBy), for example ~/.config/systemd/user/tmux.service. This way the tmux service will start when you log in, unless you also enable systemd/User#Automatic start-up of systemd user instances. The user service will stay active on logout due to the default explained in Systemd/User#Kill user processes on logout for this method.\n\n"
    },
    {
      "title": "Session initialization",
      "level": 2,
      "content": "You can have tmux open a session with preloaded windows by including those details in your ~/.tmux.conf:\n\n```\nnew  -n WindowName Command\nneww -n WindowName Command\nneww -n WindowName Command\n```\n\nTo start a session with split windows (multiple panes), include the splitw command below the neww you would like to split; thus:\n\n```\nnew  -s SessionName -n WindowName Command\nneww -n foo/bar foo\nsplitw -v -p 50 -t 0 bar\nselectw -t 1 \nselectp -t 0\n```\n\nwould open 2 windows, the second of which would be named foo/bar and would be split vertically in half (50%) with foo running above bar. Focus would be in window 2 (foo/bar), top pane (foo).\n\nTo manage multiple sessions, source separate session files from your configuration file:\n\n```\n# initialize sessions\nbind F source-file ~/.tmux/foo\nbind B source-file ~/.tmux/bar\n```\n\n"
    },
    {
      "title": "Clipboard integration",
      "level": 2,
      "content": "It is possible to copy a tmux selection to the display server clipboard (both primary/secondary selections), and paste from it into tmux. The following tmux configuration file snippets integrate X11 and Wayland clipboard/selection with the current tmux selection.\n\n"
    },
    {
      "title": "On Xorg",
      "level": 3,
      "content": "The first possibility is using xsel:\n\nEmacs style:\n\n```\nbind-key -T copy-mode y send-keys -X copy-pipe-and-cancel \"xsel -i -p && xsel -o -p | xsel -i -b\"\nbind-key C-y run \"xsel -o | tmux load-buffer - ; tmux paste-buffer\"\n```\n\nVim style:\n\n```\nbind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \"xsel -i -p && xsel -o -p | xsel -i -b\"\nbind-key p run \"xsel -o | tmux load-buffer - ; tmux paste-buffer\"\n```\n\nxclip could also be used for this purpose. Unlike xsel, it works better when printing a raw bitstream that does not fit the current locale. Nevertheless, it is neater to use xsel because xclip does not close STDOUT after it has read from the tmux buffer. As such, tmux does not know that the copy task has completed, and continues to wait for xclip to terminate, thereby rendering tmux unresponsive. A workaround is to redirect STDOUT to /dev/null:\n\nEmacs style:\n\n```\nbind-key -T copy-mode y send-keys -X copy-pipe-and-cancel \"xclip -i -sel clip > /dev/null\"\nbind-key C-y run \"xclip -o -sel clip | tmux load-buffer - ; tmux paste-buffer\"\n```\n\nVim style:\n\n```\nbind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \"xclip -i -sel clip > /dev/null\"\nbind-key p run \"xclip -o -sel clip | tmux load-buffer - ; tmux paste-buffer\"\n```\n\n"
    },
    {
      "title": "On Wayland",
      "level": 3,
      "content": "Make sure to have wl-clipboard installed.\n\nEmacs style:\n\n```\nbind-key -T copy-mode y send-keys -X copy-pipe-and-cancel \"wl-copy && wl-paste -n | wl-copy -p\"\nbind-key C-y run \"wl-paste -n | tmux load-buffer - ; tmux paste-buffer\"\n```\n\nVim style:\n\n```\nbind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \"wl-copy && wl-paste -n | wl-copy -p\"\nbind-key p run \"wl-paste -n | tmux load-buffer - ; tmux paste-buffer\"\n```\n\n"
    },
    {
      "title": "Urxvt middle click",
      "level": 3,
      "content": "There is an unofficial perl extension (mentioned in the official FAQ) to enable copying/pasting in and out of urxvt with tmux via Middle Mouse Clicking.\n\nFirst, you will need to download the perl script and place it into urxvts perl lib:\n\n```\nwget http://anti.teamidiot.de/static/nei/*/Code/urxvt/osc-xterm-clipboard\nmv osc-xterm-clipboard /usr/lib/urxvt/perl/\n```\n\nYou will also need to enable that perl script in your .Xdefaults:\n\n```\n~/.Xdefaults\n```\n\n```\n...\n*URxvt.perl-ext-common:\t\tosc-xterm-clipboard\n...\n```\n\nNext, you want to tell tmux about the new function and enable mouse support (if you have not already):\n\n```\n~/.tmux.conf\n```\n\n```\n...\nset-option -ga terminal-override ',rxvt-uni*:XT:Ms=\\E]52;%p1%s;%p2%s\\007'\nset -g mouse on\n...\n```\n\nThat's it. Be sure to end all instances of tmux before trying the new MiddleClick functionality.\n\nWhile in tmux, Shift+MiddleMouseClick will paste the clipboard selection while just MiddleMouseClick will paste your tmux buffer. Outside of tmux, just use MiddleMouseClick to paste your tmux buffer and your standard Ctrl+c to copy.\n\n"
    },
    {
      "title": "Start tmux with default session layout",
      "level": 3,
      "content": "Session managers like tmuxinator and tmuxp make it easy to manage common session configurations.\n\nFor tmuxinator, install tmuxinatorAUR. Test your installation with\n\n```\n$ tmuxinator doctor\n```\n\n"
    },
    {
      "title": "Get the default layout values",
      "level": 4,
      "content": "Start tmux as usual and configure your windows and panes layout as you like. When finished, get the current layout values by executing (while you are still within the current tmux session)\n\n```\ntmux list-windows\n```\n\nThe output may look like this (two windows with 3 panes and 2 panes layout)\n\n```\n0: default* (3 panes) [274x83] [layout 20a0,274x83,0,0{137x83,0,0,3,136x83,138,0[136x41,138,0,5,136x41,138,42,6]}] @2 (active)\n1: remote- (2 panes) [274x83] [layout e3d3,274x83,0,0[274x41,0,0,4,274x41,0,42,7]] @3\n```\n\nThe Interesting part you need to copy for later use begins after [layout... and excludes ... ] @2 (active). For the first window layout you need to copy e.g. 20a0,274x83,0,0{137x83,0,0,3,136x83,138,0[136x41,138,0,5,136x41,138,42,6]}\n\n"
    },
    {
      "title": "Define the default tmux layout",
      "level": 4,
      "content": "Knowing this, you can exit the current tmux session. Following this, you create your default tmux session layout by editing tmuxinator's configuration file (Do not copy the example, get your layout values as described above)\n\n```\n~/.tmuxinator/default.yml\n```\n\n```\nname: default\nroot: ~/\nwindows:\n  - default:\n      layout: 20a0,274x83,0,0{137x83,0,0,3,136x83,138,0[136x41,138,0,5,136x41,138,42,6]}\n      panes:\n        - clear\n        - vim\n        - clear && emacs -nw\n  - remote:\n      layout: 24ab,274x83,0,0{137x83,0,0,3,136x83,138,0,4}\n      panes:\n        - \n        -\n```\n\nThe example defines two windows named \"default\" and \"remote\". With your determined layout values. For each pane you have to use at least one - line. Within the first window panes you start the commandline \"clear\" in pane one, \"vim\" in pane two and \"clear && emacs -nw\" executes two commands in pane three on each tmux start. The second window layout has two panes without defining any start commmands.\n\nTest the new default layout with:\n\n```\ntmuxinator default\n```\n\n"
    },
    {
      "title": "Autostart tmux with default tmux layout",
      "level": 4,
      "content": "If you like to start your terminal session with your default tmux session layout edit\n\n```\n~/.bashrc\n```\n\n```\nif [ -z \"$TMUX\" ]; then\n   tmuxinator default          \n fi\n```\n\n"
    },
    {
      "title": "Alternate approach for default session",
      "level": 4,
      "content": "Instead of using the above method, one can just write a bash script that when run, will create the default session and attach to it. Then you can execute it from a terminal to get the pre-designed configuration in that terminal\n\n```\n#!/bin/bash\ntmux new-session -d -n WindowName Command\ntmux new-window -n NewWindowName\ntmux split-window -v\ntmux selectp -t 1\ntmux split-window -h\ntmux selectw -t 1\ntmux -2 attach-session -d\n```\n\n"
    },
    {
      "title": "Start tmux in urxvt",
      "level": 3,
      "content": "Use this command to start urxvt with a started tmux session. I use this with the exec command from my .ratpoisonrc file.\n\n```\nurxvt -e bash -c \"tmux -q has-session && exec tmux attach-session -d || exec tmux new-session -n$USER -s$USER@$HOSTNAME\"\n```\n\n"
    },
    {
      "title": "Start tmux on every shell login",
      "level": 3,
      "content": "```\nif [ -x \"$(command -v tmux)\" ] && [ -n \"${DISPLAY}\" ] && [ -z \"${TMUX}\" ]; then\n    exec tmux new-session -A -s ${USER} >/dev/null 2>&1\nfi\n```\n\nWhat the above snippet does is the following:\n\n1. test if tmux is executable,\n1. and if a graphical session is running (remove this condition if you want tmux to start in any login shell, but it might interfere with autostarting X at login),\n1. and if we are not already inside a tmux session,\n1. then try to attach, if the attachment fails, start a new session.\n\nIf you are using systemd as a user to keep a session alive, you can replace the command inside the if-block with the following commands to attach to that session and detach all the other connected clients:\n\n```\nif ! systemctl --user is-active --quiet tmux.service; then\n    systemctl --user start tmux.service\nfi\nexec tmux attach-session -d -t \"${USER}\" >/dev/null 2>&1\n```\n\n"
    },
    {
      "title": "Start a non-login shell",
      "level": 3,
      "content": "tmux starts a login shell by default, which may result in multiple negative side effects:\n\n- Users of fortune may notice that quotes are printed when creating a new panel.\n- The configuration files for login shells such as ~/.profile are interpreted each time a new panel is created, so commands intended to be run on session initialization (e.g. setting audio level) are executed.\n\nTo disable this behaviour, add to ~/.tmux.conf:\n\n```\nset -g default-command \"${SHELL}\"\n```\n\n"
    },
    {
      "title": "Use tmux windows like tabs",
      "level": 3,
      "content": "The following settings added to ~/.tmux.conf allow to use tmux windows like tabs, such as those provided by the reference of these hotkeys — urxvt's tabbing extensions. An advantage thereof is that these virtual “tabs” are independent of the terminal emulator.\n\n```\n#urxvt tab like window switching (-n: no prior escape seq)\nbind -n S-down new-window\nbind -n S-left prev\nbind -n S-right next\nbind -n C-left swap-window -t -1\nbind -n C-right swap-window -t +1\n```\n\nOf course, those should not overlap with other applications' hotkeys, such as the terminal's. Given that they substitute terminal tabbing that might as well be deactivated, though.\n\nIt can also come handy to supplement the EOT hotkey Ctrl+d with one for tmux's detach:\n\n```\nbind-key -n C-j detach\n```\n\n"
    },
    {
      "title": "Clients simultaneously interacting with various windows of a session",
      "level": 3,
      "content": "In Practical Tmux, Brandur Leach writes:\n\nThe tmx script below implements this — the version here is slightly modified to execute tmux new-window if 1 is its second parameter. Invoked as tmx base_session_name [1], it launches the base session if necessary. Otherwise a new \"client\" session linked to the base, optionally add a new window and attach, setting it to kill itself once it turns \"zombie\". Do not forget to make it executable.\n\n```\n~/bin/tmx\n```\n\n```\n#!/bin/bash\n# Modified TMUX start script from:\n#     http://forums.gentoo.org/viewtopic-t-836006-start-0.html\n\n# Works because bash automatically trims by assigning to variables and by passing arguments\ntrim() { echo $1; }\n\nif [[ -z \"$1\" ]]; then\n    echo \"Specify session name as the first argument\"\n    exit\nfi\n\n# Only because I often issue `ls` to this script by accident\nif [[ \"$1\" == \"ls\" ]]; then\n    tmux ls\n    exit\nfi\n\nbase_session=\"$1\"\n# This actually works without the trim() on all systems except OSX\ntmux_nb=$(trim `tmux ls | grep \"^$base_session\" | wc -l`)\nif [[ \"$tmux_nb\" == \"0\" ]]; then\n    echo \"Launching tmux base session $base_session ...\"\n    tmux new-session -s $base_session\nelse\n    # Make sure we are not already in a tmux session\n    if [[ -z \"$TMUX\" ]]; then\n        echo \"Launching copy of base session $base_session ...\"\n        # Session id is date and time to prevent conflict\n        session_id=`date +%Y%m%d%H%M%S`\n        # Create a new session (without attaching it) and link to base session \n        # to share windows\n        tmux new-session -d -t $base_session -s $session_id\n        if [[ \"$2\" == \"1\" ]]; then\n\t\t# Create a new window in that session\n\t\ttmux new-window\n\tfi\n        # Attach to the new session & kill it once orphaned\n\ttmux attach-session -t $session_id \\; set-option destroy-unattached\n    fi\nfi\n```\n\nA useful setting for this is\n\n```\nsetw -g aggressive-resize on\n```\n\nadded to ~/.tmux.conf. It causes tmux to resize a window based on the smallest client actually viewing it, not on the smallest one attached to the entire session.\n\nAn alternative is to put the following ~/.bashrc:\n\n```\n~/.bashrc\n```\n\n```\nfunction rsc() {\n  CLIENTID=$1.`date +%S`\n  tmux new-session -d -t $1 -s $CLIENTID \\; set-option destroy-unattached \\; attach-session -t $CLIENTID\n}\n\nfunction mksc() {\n  tmux new-session -d -s $1\n  rsc $1\n}\n```\n\nCiting the author:\n\n"
    },
    {
      "title": "Correct the TERM variable according to terminal type",
      "level": 3,
      "content": "Instead of setting a fixed TERM variable in tmux, it is possible to set the proper TERM (either screen or screen-256color) according to the type of your terminal emulator:\n\n```\n~/.tmux.conf\n```\n\n```\n## set the default TERM\nset -g default-terminal screen\n\n## update the TERM variable of terminal emulator when creating a new session or attaching a existing session\nset -g update-environment 'DISPLAY SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY TERM'\n## determine if we should enable 256-colour support\nif \"[[ ${TERM} =~ 256color || ${TERM} == fbterm ]]\" 'set -g default-terminal screen-256color'\n```\n\n```\n~/.zshrc\n```\n\n```\n## workaround for handling TERM variable in multiple tmux sessions properly (by Nicholas Marriott)\nif [[ -n ${TMUX} && -n ${commands[tmux]} ]];then\n        case $(tmux showenv TERM 2>/dev/null) in\n                *256color) ;&\n                TERM=fbterm)\n                        TERM=screen-256color ;;\n                *)\n                        TERM=screen\n        esac\nfi\n```\n\n"
    },
    {
      "title": "Reload an updated configuration without restarting tmux",
      "level": 3,
      "content": "By default tmux reads ~/.tmux.conf only if it was not already running. To have tmux load a configuration file afterwards, execute:\n\n```\ntmux source-file path\n```\n\nThis can be added to ~/.tmux.conf as e. g.:\n\n```\n~/.tmux.conf\n```\n\n```\nbind r source-file path\n```\n\nYou can also do ^: and type :\n\n```\nsource .tmux.conf\n```\n\n"
    },
    {
      "title": "Template script to run program in new session or attach to existing one",
      "level": 3,
      "content": "This script checks for a program presumed to have been started by a previous run of itself. Unless found it creates a new tmux session and attaches to a window named after and running the program. If however the program was found it merely attaches to the session and selects the window.\n\n```\n#!/bin/bash\n\nPID=$(pidof $1)\n\nif [ -z \"$PID\" ]; then\n    tmux new-session -d -s main ;\n    tmux new-window -t main -n $1 \"$*\" ;\nfi\n    tmux attach-session -d -t main ;\n    tmux select-window -t $1 ;\nexit 0\n```\n\nA derived version to run irssi with the nicklist plugin can be found on its ArchWiki page.\n\n"
    },
    {
      "title": "Terminal emulator window titles",
      "level": 3,
      "content": "If you SSH into a host in a tmux window, you will notice the window title of your terminal emulator remains to be user@localhost rather than user@server. To allow the title bar to adapt to whatever host you connect to, set the following in ~/.tmux.conf\n\n```\nset -g set-titles on\nset -g set-titles-string \"#T\"\n```\n\nFor set-titles-string, #T will display user@host:~ and change accordingly as you connect to different hosts.\n\n"
    },
    {
      "title": "Automatic layouting",
      "level": 3,
      "content": "When creating new splits or destroying older ones the currently selected layout is not applied. To fix that, add following binds which will apply the currently selected layout to new or remaining panes:\n\n```\nbind-key -n M-c kill-pane \\; select-layout\nbind-key -n M-n split-window \\; select-layout\n```\n\n"
    },
    {
      "title": "Vim colorscheme not loading",
      "level": 3,
      "content": "See the following if your vim colorscheme is not loading in tmux: [2] [3]\n\n"
    },
    {
      "title": "Vim friendly configuration",
      "level": 3,
      "content": "See [4] for a configuration friendly to vim users.\n\n"
    },
    {
      "title": "Friendly pane splitting",
      "level": 3,
      "content": "The default key-binding for splitting a pane vertically is Ctrl+b % and for splitting a pane horizontally is Ctrl+b \". That can be difficult to type depending of your keyboard layout and it is also hard to remember.\n\nA more friendly key-binding is to use Ctrl+b h for splitting horizontally and Ctrl+b v for splitting a pane vertically, it is also very convenient to remember.\n\nTo make this change, add these lines in ~/.tmux.conf:\n\n```\n# More friendly split pane\nbind-key h split-window -h\nbind-key v split-window -v\n```\n\n"
    },
    {
      "title": "Inhibit system suspension",
      "level": 3,
      "content": "If tmux hangs when connected from another device because the host goes to sleep, run session's shell command with an inhibition lock:\n\n```\ntmux new-session -A \"systemd-inhibit --what=idle $SHELL\"\n```\n\n"
    },
    {
      "title": "Scrolling issues",
      "level": 3,
      "content": "In case of trouble scrolling in the terminal with Shift-Page Up/Down, the following will disable the smcup and rmcup capabilities for any term that reports itself as anything beginning with xterm:\n\n```\nset -ga terminal-overrides ',xterm*:smcup@:rmcup@'\n```\n\nThis tricks the terminal emulator into thinking tmux is a full screen application like pico or mutt[5], which will make the scrollback be recorded properly. Beware however, it will get a bit messed up when switching between windows/panes. Consider using tmux's native scrollback instead.\n\n"
    },
    {
      "title": "Mouse scrolling",
      "level": 3,
      "content": "If you want to scroll with your mouse wheel, ensure mode-mouse is on in .tmux.conf\n\n```\nset -g mouse on\n```\n\nYou can set scroll History with:\n\n```\nset -g history-limit 30000\n```\n\nFor mouse wheel scrolling as from tmux 2.1 try adding one or both of these to ~/.tmux.conf\n\n```\nbind -T root WheelUpPane   if-shell -F -t = \"#{alternate_on}\" \"send-keys -M\" \"select-pane -t =; copy-mode -e; send-keys -M\"\n   bind -T root WheelDownPane if-shell -F -t = \"#{alternate_on}\" \"send-keys -M\" \"select-pane -t =; send-keys -M\"\n```\n\nThough the above will only scroll one line at a time, add this solution to scroll an entire page instead\n\n```\nbind -t vi-copy    WheelUpPane   page-up\n   bind -t vi-copy    WheelDownPane page-down\n   bind -t emacs-copy WheelUpPane   page-up\n   bind -t emacs-copy WheelDownPane page-down\n```\n\n"
    },
    {
      "title": "Terminal emulator does not support UTF-8 mouse events",
      "level": 3,
      "content": "When the terminal emulator does not support the UTF-8 mouse events and the mouse on tmux option is set, left-clicking inside the terminal window might paste strings like [M# or [Ma into the promt.\n\nTo solve this issue set:\n\n```\nset -g mouse-utf8 off\n```\n\n"
    },
    {
      "title": "Shift+F6 not working in Midnight Commander",
      "level": 3,
      "content": "See Midnight Commander#Broken shortcuts.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- BBS topic\n- Screen and tmux feature comparison\n- powerline, a dynamic statusbar for tmux\n- Plugins for tmux\n- Oh My Tmux!\n- tmux Wiki\n\nTutorials\n\n- Practical Tmux\n- manual page tmux(1)\n- Tmux tutorial Part 1 and Part 2\n- The Tao of tmux, an ebook by Tony Narlock, author of tmuxp and libtmux\n\n"
    }
  ]
}