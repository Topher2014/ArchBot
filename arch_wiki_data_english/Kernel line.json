{
  "title": "Kernel line",
  "url": "https://wiki.archlinux.org/title/Kernel_line",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Kernel\n\nThere are three ways to pass options to the kernel and thus control its behaviour:\n\n1. When building the kernel—in the kernel's config file. See Kernel#Compilation for details.\n1. When starting the kernel—using command line parameters (usually through a boot loader, or as well in unified kernel image).\n1. At runtime—through the files in /proc/sys/ (see sysctl) and /sys/.\n\nBetween the three methods, the configurable options differ in availability, their name and the method in which they are specified. This page only explains the second method (kernel command line parameters) and shows a list of the most used kernel parameters in Arch Linux.\n\nMost parameters are associated with subsystems and work only if the kernel is configured with those subsystems built in. They also depend on the presence of the hardware they are associated with.\n\nKernel command line parameters either have the format parameter, or parameter=value, or module.parameter=value.\n\n- You can check the parameters your system was booted up with by running cat /proc/cmdline and see if it includes your changes.\n- All kernel parameters are case-sensitive.\n\n"
    },
    {
      "title": "Boot loader configuration",
      "level": 2,
      "content": "Kernel parameters can be set either temporarily by editing the boot entry in the boot loader boot selection menu, or permanently by modifying the boot loader configuration file.\n\nThe following examples add the quiet and splash parameters to the GRUB, GRUB Legacy, LILO, Limine, rEFInd, Syslinux and systemd-boot boot loaders.\n\n"
    },
    {
      "title": "GRUB",
      "level": 3,
      "content": "- Press e when the menu shows up and add them on the linux line:\n\n```\nlinux /boot/vmlinuz-linux root=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw quiet splash\n```\n\n- To make the change persistent after reboot, you could manually edit /boot/grub/grub.cfg with the exact line from above, or if using grub-mkconfig:\n\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"\n```\n\n```\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n"
    },
    {
      "title": "GRUB Legacy",
      "level": 3,
      "content": "- Press e when the menu shows up and add them on the kernel line:\n\n```\nkernel /boot/vmlinuz-linux root=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw quiet splash\n```\n\n- To make the change persistent after reboot, edit /boot/grub/menu.lst and add them to the kernel line, exactly like above.\n\n"
    },
    {
      "title": "LILO",
      "level": 3,
      "content": "- Add them to /etc/lilo.conf using append or addappend:\n\n```\nimage=/boot/vmlinuz-linux\n        ...\n        append=\"quiet splash\"\n```\n\n"
    },
    {
      "title": "Limine",
      "level": 3,
      "content": "- To temporarily add kernel parameters, press e when the boot entry selection screen appears and modify the cmdline line:\n\n```\ncmdline: root=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw quiet splash\n```\n\n- To apply changes permanently, edit the kernel_cmdline line in the Limine configuration file located at esp/limine.conf:\n\n```\n/+Arch Linux\n    ...\n    kernel_cmdline: root=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw quiet splash\n```\n\n"
    },
    {
      "title": "rEFInd",
      "level": 3,
      "content": "- Press Insert, F2, Tab, or + on the desired menu entry and press it again on the submenu entry. Add kernel parameters at the end of the string:\n\n```\nroot=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw initrd=\\boot\\initramfs-linux.img quiet splash\n```\n\n- To make the change persistent after reboot, edit /boot/refind_linux.conf and append them between the quotes in all required lines, for example\n\n```\n\"Boot using default options\"   \"root=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw quiet splash\"\n```\n\n- If you have disabled auto-detection of OSes in rEFInd and are defining OS stanzas instead in esp/EFI/refind/refind.conf to load your OSes, you can edit it like:\n\n```\nmenuentry \"Arch Linux\" {\n    ...\n    options  \"root=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw quiet splash\"\n    ...\n}\n```\n\n"
    },
    {
      "title": "Syslinux",
      "level": 3,
      "content": "- Press Tab when the menu shows up and add them at the end of the string:\n\n```\nlinux /boot/vmlinuz-linux root=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw initrd=/boot/initramfs-linux.img quiet splash\n```\n\n- To make the change persistent after reboot, edit /boot/syslinux/syslinux.cfg and add them to the APPEND line:\n\n```\nAPPEND root=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw quiet splash\n```\n\n"
    },
    {
      "title": "systemd-boot",
      "level": 3,
      "content": "- Press e when the menu appears and add the parameters to the end of the string:\n\n```\ninitrd=\\initramfs-linux.img root=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw quiet splash\n```\n\n- If you have not set a value for menu timeout, you will need to hold Space while booting for the systemd-boot menu to appear.\n- If you cannot edit the parameters from the boot menu, you may need to edit /boot/loader/loader.conf and add editor 1 to enable editing.\n\n- To make the change persistent after reboot, edit /boot/loader/entries/arch.conf (assuming you set up your EFI system partition) and add them to the options line:\n\n```\noptions root=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw quiet splash\n```\n\n"
    },
    {
      "title": "dracut",
      "level": 2,
      "content": "dracut is capable of embedding the kernel parameters in the initramfs, thus allowing to omit them from the boot loader configuration. See dracut#Kernel command line options.\n\n"
    },
    {
      "title": "EFI boot stub",
      "level": 2,
      "content": "See EFI boot stub#Using UEFI directly.\n\n"
    },
    {
      "title": "Hijacking cmdline",
      "level": 2,
      "content": "Even without access to your boot loader it is possible to change your kernel parameters to enable debugging (if you have root access). This can be accomplished by overwriting /proc/cmdline which stores the kernel parameters. However /proc/cmdline is not writable even as root, so this hack is accomplished by using a bind mount to mask the path.\n\nFirst create a file containing the desired kernel parameters:\n\n```\n/root/cmdline\n```\n\n```\nroot=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 ro console=tty1 logo.nologo debug\n```\n\nThen use a bind mount to overwrite the parameters:\n\n```\n# mount -n --bind -o ro /root/cmdline /proc/cmdline\n```\n\nThe -n option skips adding the mount to /etc/mtab, so it will work even if root is mounted read-only. You can cat /proc/cmdline to confirm that your change was successful.\n\n"
    },
    {
      "title": "Parameter list",
      "level": 2,
      "content": "This list is not comprehensive. For a complete list of all options, please see The kernel's command-line parameters.\n\nTable content:\nparameter | Description\ninit | Run specified binary instead of /sbin/init as init process. The systemd-sysvcompat package symlinks /sbin/init to /usr/lib/systemd/systemd to use systemd. Set it to /bin/sh to boot to the shell.\ninitrd | Specify the location of the initial ramdisk. For UEFI boot managers and an EFI boot stub, the path must be specified using backslashes (\\) as path separators.\ncryptdevice | Specify the location of a dm-crypt-encrypted partition plus a device mapper name.\ndebug | Enable kernel debugging (events log level).\nlsm | Set the initialisation order of the Linux security modules, used to enable AppArmor, SELinux or TOMOYO.\nmaxcpus | Maximum number of processors that an SMP kernel will bring up during bootup.\nmem | Force usage of a specific amount of memory to be used.\nnetdev | Network devices parameters.\nnomodeset | Disable Kernel mode setting.\npanic | Time before automatic reboot on kernel panic.\nresume | Specify a swap device to use when waking from hibernation.\nro | Mount root device read-only on boot. This is mkinitcpio's default1.\nroot | Root file system. See init/do_mounts.c for kernel's supported device name formats. Note that an initramfs with udev supports more name formats. A setup compatible with systemd#GPT partition automounting allows to omit the parameter entirely or to alternatively use root=gpt-auto.\nrootflags | Root file system mount options. Useful for setting options that cannot be applied by remounting (i.e. by systemd-remount-fs.service(8)). For example, the discard option of an XFS root volume or subvol= option of Btrfs when using a subvolume as root.\nrw | Mount root device read-write on boot. This is the kernel's default1.\nsystemd.unit | Boot to a specified target.\nvideo | Override framebuffer video defaults.\n\n1. The kernel uses rw if neither ro or rw are explicitly set on kernel command line (see bootparam(7) § General non-device-specific boot arguments). However, mkinitcpio uses ro as the default value overriding the kernel's default (see mkinitcpio(8) § EARLY INIT ENVIRONMENT). Boot loaders may also have their own configured default, for example, grub-mkconfig uses rw (see FS#36275 as a reference). Note: rw is required when using mkinitcpio's fsck hook (see [1]) or when using F2FS as the root file system.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- kernel-command-line(7)\n- Power saving#Kernel parameters\n- Kernel Boot Command-Line Parameter Reference—the chapter 9 of the Linux Kernel in a Nutshell by Greg Kroah-Hartman\n\n"
    }
  ]
}