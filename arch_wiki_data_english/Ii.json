{
  "title": "Ii",
  "url": "https://wiki.archlinux.org/title/Ii",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "IRC it (ii) is:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the iiAUR package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "ii is configured via command line options. The default values are ~/irc for the main directory, and $USER for nickname. These can be changed by passing values to ii when run:\n\n```\n-s server\n-p port\n-u socket (-p option is ignored if this is set)\n-i main.directory\n-n nickname\n-f realname\n-k environmental.variable\n```\n\nii uses an environmental variable to contain your irc password (i.e., IIPASS=\"password\"; -k IIPASS).\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "For a detailed introduction see the official documentation.\n\nA session manager such as abduco or tmux is recommended. It allows the user to easily disconnect and reconnect to a session.\n\nTo start ii, run:\n\n```\n$ ii\n```\n\nSee also ii(1).\n\n"
    },
    {
      "title": "Additional functions",
      "level": 3,
      "content": "ii serves solely as a client for the server. Additional applications will be needed to both read output and write input to ii. In each subdirectory, there will be an output file, \"out\" and an input file, \"in\". At a minimum, the output file can be monitored with:\n\n```\n$ tail -f out\n```\n\nand the input with:\n\n```\n$ echo \"command/message\" > in\n```\n\nAnother option that allows for a single command to accept ongoing input is:\n\n```\n$ cp /dev/stdin in\n```\n\n"
    },
    {
      "title": "Commands",
      "level": 3,
      "content": "ii commands start with a slash and are case sensitive.\n\nTable content:\nCommand | Description\n/a message | mark as away with optional message\n/j #channel password /j nickname message | join a channel with optional password; open a private conversation with user and optional opening message\n/l message | leave channel with optional message\n/n nickname | change nickname\n/q message | quit ii with optional message\n/t topic | set topic of channel\n\n/j nickname message\n\nopen a private conversation with user and optional opening message\n\nEverything which is not a command will be posted into the channel or to the server. So if you need /who just write /WHO as described in RFC:1459 to the server in FIFO.\n\n"
    },
    {
      "title": "SSL/TLS encryption",
      "level": 3,
      "content": "ii does not support the Transport Layer Security (TLS), and needs a proxy to connect it to a TLS client. An example of this would be with stunnel:\n\n```\n/etc/stunnel/stunnel.conf\n```\n\n```\n[irc.libera.chat]\naccept = 127.0.0.1:<your-port>\nconnect = irc.libera.chat:6697\n```\n\nThen use -s localhost and -p your-port for stunnel to redirect ii to secure connection to the server.\n\nAnother option is the use of socat for a proxy with ii connecting via UNIX stream socket:\n\n```\n$ socat UNIX-LISTEN:/tmp/irc.libera.chat OPENSSL:irc.libera.chat:6697\n$ ii -s irc.libera.chat -u /tmp/irc.libera.chat\n```\n\n"
    },
    {
      "title": "Using sed to edit output",
      "level": 3,
      "content": "Sed can be used to edit tail -f output in ways that make it more readable. Example:\n\n```\n#!/bin/sh\ntail -n 55 -f out | sed -u '/-\\!-.*has/d;\n                          s/<MyNick>/\\x1b[32m&\\x1b[0m/g;\n                          s/\\(> >\\)\\( .*\\)/\\1\\x1b[33m\\2\\x1b[0m/;\n                          s/http[^ >)]*/\\x1b[31m&\\x1b[0m/g;\n                          s/[\\\"\\$\\`]/\\\\&/g;\n                          s/\\(^[0-9]\\{10\\}\\)\\( .*\\)/date -d@\\1 \"+%Y.%m.%d %H.%M.%S\"\"\\2\"/e'\n```\n\nIn this example, the first part of the sed command hides (deletes from the command output) the join, part and quit; the second one adds green color control codes around your nickname; the third one does the same for \"highlights\" in yellow; the fourth with red on URLs; the penultimate prepares the output of the command before the last one substitutes the UNIX epoch timestamps with a human readable date.\n\n"
    }
  ]
}