{
  "title": "Diretrizes de pacotes Ruby Gem",
  "url": "https://wiki.archlinux.org/title/Diretrizes_de_pacotes_Ruby_Gem",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "32-bit – CLR – CMake – Cross – DKMS – Eclipse – Electron – Fonte – Free Pascal – GNOME – Go – Haskell – Java – KDE – Kernel – Lisp – Meson – MinGW – Node.js – Nonfree – OCaml – Perl – PHP – Python – R – Ruby – Rust – Shell – VCS – Web – Wine\n\nEscrever PKGBUILDs para softwares escritos no Ruby.\n\n"
    },
    {
      "title": "Nomenclatura de pacote",
      "level": 2,
      "content": "Para bibliotecas, use ruby-$gemname. Para aplicativos, use o nome do programa. Em ambos casos, o nome deve estar totalmente em letras minúsculas.\n\nSempre use o prefixo ruby-, mesmo se $gemname já iniciar com a palavra ruby. É necessário evitar futuros confrontos de nomes no caso de aparecer uma gem com nome mais curto. Também torna os nomes mais fáceis de serem interpretados por ferramentas (pense nos geradores/versão ou nos verificadores de dependência do PKGBUILD, etc ...).\n\n"
    },
    {
      "title": "Pacotes versionados",
      "level": 3,
      "content": "Se você precisar adicionar um pacote versionado, então use ruby-$gemname-$versão, p. ex., ruby-builder-3.2.1. Então, a dependência rubygem builder=3.2.1 se tornará o pacote Arch ruby-builder-3.2.1.\n\nNo caso, se você precisar resolver uma dependência \"aproximadamente maior\" ~>, o pacote deverá usar a versão sem a última parte, por exemplo, dependência rubygem builder ~> 3.2.1 se transformará em ruby-builder-3.2. Uma exceção para esta regra é quando a dependência \"aproximadamente maior\" corresponde à versão mais recente da gem - neste caso, evite introduzir um novo pacote versionado e use apenas ruby-$gemname (a versão HEAD).\n\nOutro problema com pacotes com versão é que pode entrar em conflito com outras versões, p. ex. porque os pacotes instalam os mesmos arquivos em /usr/bin. Uma solução para este problema é que pacotes com versões não devem instalar tais arquivos - somente o pacote de versão HEAD pode fazer isso.\n\n"
    },
    {
      "title": "Exemplos",
      "level": 2,
      "content": "Por exemplos, por favor, veja ruby-json_pure ou ruby-hpricotAUR.\n\n"
    },
    {
      "title": "Notas",
      "level": 2,
      "content": "Adicione --verbose aos argumentos do gem para receber informações adicionais no caso de haver problemas.\n\nNote: **gem** \n\n"
    },
    {
      "title": "Quarry",
      "level": 3,
      "content": "Como uma alternativa ao gerenciamento manual de gemfiles, você também pode querer considerar quarry, um repositório não oficial de pacotes de pacotes binários pré-compilados. Veja Quarry para detalhes.\n\n"
    },
    {
      "title": "Pacote contém referência a $pkgdir",
      "level": 3,
      "content": "Às vezes, quando você compila o pacote, você pode ver o seguinte aviso AVISO: O pacote contém referência para $pkgdir. Alguns arquivos empacotados contêm o caminho absoluto do diretório no qual você compilou o pacote. Para encontrar esses arquivos, execute cd pkg && grep -R \"$(pwd)\". O mais provável é que o motivo seja o caminho codificado em .../ext/Makefile.\n\nDepois que gem install acabar, o Makefile não será mais necessário. Na verdade, nenhum dos arquivos em ext é necessário e podem ser completamente removidos adicionando rm -rf \"$pkgdir/$_gemdir/gems/$_gemname-$pkgver/ext\" ao package() function.\n\n"
    }
  ]
}