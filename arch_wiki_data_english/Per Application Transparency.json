{
  "title": "Per Application Transparency",
  "url": "https://wiki.archlinux.org/title/Per_Application_Transparency",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Following the xterm automatic transparency guide, it is possible to get per application window transparency with just xcompmgr, or any other compositor, and either transset-dfAUR or xorg-transsetAUR. Just replace xterm with your program name and transset-df with your transset selection:\n\n```\nxterm & sleep .8s && transset-df -a\n```\n\nFor Openbox key/mousebindings, use this inside your rc.xml:\n\n```\n<execute>sh -c 'xterm & sleep .8s && transset-df -a'</execute>\n```\n\nThis article details how to achieve transparency automatically on an application-by-application basis.\n\nWhile transparency assuredly makes your desktop look a little nicer, it has some practical usages as well. Specifically, with terminals and text editors. It can be useful to overlay them with some transparency when copying pieces of code, or reading from a manual. However, it can be distracting for use with things like a browser or an image viewer.\n\nUsually, the case is that you can either make all windows transparent with xcompmgr, or make some special windows transparent for applications that support it natively (i.e., urxvt). There have also been numerous tutorials on how to use transset-df to set transparency on individual windows, however, this requires that you manually set the transparency for each window that opens.\n\nAdding devilspie to the mix however, will allow you to achieve per application transparency automatically.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Firstly, you will need to make sure that xcompmgr, transset-dfAUR, and devilspie are installed. Once installed, run xcompmgr (if you do not already have it running):\n\n```\n$ xcompmgr &\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Now that what you need is installed, we need to configure devilspie. Essentially, devilspie acts as a window matching utility. It runs as a daemon, and allows you to specify rules to match certain windows, which then provides the functionality to execute some command (usually pertaining to that window), much like Openbox's rc.xml, however, Openbox alone does not give us the power that we need in this case.\n\nFirst, create an opacity.ds file in ~/.devilspie (create that directory if it does not already exist):\n\n```\n$ mkdir -p ~/.devilspie\n$ cd ~/.devilspie\n$ touch opacity.ds\n```\n\nNow put something like the following in your opacity.ds file:\n\n```\n( if\n( contains ( window_class ) \"Gvim\" )\n( begin\n( spawn_async (str \"transset-df -i \" (window_xid) \" 0.85\" ))\n)\n)\n```\n\nAs you can see, the rule checks to see if the window_class contains the string \"Gvim.\" If it does, it executes a command using the transset-df utility to lower the opacity to 0.85. (Any value from 0 to 1 is valid- with the former being completely transparent, and the latter being completely opaque.) The key here is the availability of the window_xid variable, and thus, the power of devilspie in this example.\n\n"
    },
    {
      "title": "Finding the window",
      "level": 3,
      "content": "The other trick here is knowing how to match the desired window. Sometimes you might want to use application_name instead of matching against window_class. It all depends on how devilspie reads the window information. To see how to identify your window, run this in a terminal:\n\n```\n$ devilspie -a\n```\n\nAnd then start your desired application. The terminal should output some identification details that you can use in your opacity.ds file. Alternatively, you could use xprop.\n\n"
    },
    {
      "title": "Matching different applications",
      "level": 3,
      "content": "While this will simply make GVim transparent, you might want to do this with more than one application. Here is an example configuration that makes all GVim, Mirage, and Chromium windows transparent. (Adding more windows should be apparent from this example.)\n\n```\n( if\n( or\n( contains ( window_class ) \"Gvim\" )\n( contains ( application_name ) \"mirage\" )\n( contains ( application_name ) \"chrome\" )\n)\n( begin\n( spawn_async (str \"transset-df -i \" (window_xid) \" 0.85\" ))\n)\n)\n```\n\n"
    },
    {
      "title": "In the background",
      "level": 3,
      "content": "In some instances, setting an application (in particular a terminal) as a transparent window in the background is desired.\n\nTo obtain this effect, add to your configuration:\n\n```\n~/.devilspie/opacity.ds\n```\n\n```\n...\n(begin\n(stick)\n(below)\n(undecorate)\n(skip_pager)\n(skip_tasklist)\n(wintype \"dock\")\n...\n```\n\nOptionally, specific per-application settings — like hiding menu bars or defining a specific geometry — will have to be specified either through the application configuration, or added with devilspie's geometry symbol.\n\n"
    },
    {
      "title": "Starting with X",
      "level": 2,
      "content": "Simply place the following in your X startup script (i.e., ~/.xinitrc) to have per application window transparency load:\n\n```\nxcompmgr &\ndevilspie -a &\n```\n\n"
    },
    {
      "title": "Advanced configuration",
      "level": 2,
      "content": "Comprehensive documentation of the devilspie configuration file.\n\nAlternatively, gdevilspieAUR is a GUI configuration editor for devilspie.\n\n"
    }
  ]
}