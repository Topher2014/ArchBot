{
  "title": "Sshguard",
  "url": "https://wiki.archlinux.org/title/Sshguard",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- fail2ban\n- ssh\n\nsshguard is a daemon that protects SSH and other services against brute-force attacks, similar to fail2ban.\n\nsshguard is different from the latter in that it is written in C, is lighter and simpler to use with fewer features while performing its core function equally well.\n\nsshguard is not vulnerable to most (or maybe any) of the log analysis vulnerabilities that have caused problems for similar tools.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the sshguard package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "sshguard works by monitoring /var/log/auth.log, syslog-ng or the systemd journal for failed login attempts. For each failed attempt, the offending host is banned from further communication for a limited amount of time. The default amount of time the offender is banned starts at 120 seconds, and is increases by a factor of 1.5 every time it fails another login. sshguard can be configured to permanently ban a host with too many failed attempts.\n\nBoth temporary and permanent bans are done by adding an entry into the \"sshguard\" chain in iptables that drops all packets from the offender. The ban is then logged to syslog and ends up in /var/log/auth.log, or the systemd journal if the latter is being used.\n\nYou must configure one of the following firewalls to be used with sshguard in order for blocking to work.\n\n"
    },
    {
      "title": "firewalld",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nsshguard can work with firewalld. Make sure you have firewalld enabled, configured and setup first. To make sshguard write to your zone of preference, issue the following commands:\n\n```\n# firewall-cmd --permanent --zone=public --add-rich-rule=\"rule source ipset=sshguard4 drop\"\n```\n\nIf you use ipv6, you can issue the same command but substitute sshguard4 with sshguard6. Finish with\n\n```\n# firewall-cmd --reload\n```\n\nYou can verify the above with\n\n```\n# firewall-cmd --info-ipset=sshguard4\n```\n\nFinally, in /etc/sshguard.conf, find the line for BACKEND and change it as follows\n\n```\n/etc/sshguard.conf\n```\n\n```\nBACKEND=\"/usr/lib/sshguard/sshg-fw-firewalld\"\n```\n\n"
    },
    {
      "title": "UFW",
      "level": 3,
      "content": "If UFW is installed and enabled, it must be given the ability to pass along DROP control to sshguard. This is accomplished by modifying /etc/ufw/before.rules and /etc/ufw/before6.rules to contain the following lines which should be inserted just after the section for loopback devices.\n\n```\n/etc/ufw/before.rules\n```\n\n```\n# allow all on loopback\n-A ufw-before-input -i lo -j ACCEPT\n-A ufw-before-output -o lo -j ACCEPT\n\n# hand off control for sshd to sshguard\n:sshguard - [0:0]\n-A ufw-before-input -p tcp --dport 22 -j sshguard\n```\n\n```\n/etc/ufw/before6.rules\n```\n\n```\n# allow all on loopback\n-A ufw6-before-input -i lo -j ACCEPT\n-A ufw6-before-output -o lo -j ACCEPT\n\n# hand off control for sshd to sshguard\n:sshguard - [0:0]\n-A ufw6-before-input -p tcp --dport 22 -j sshguard\n```\n\nRestart ufw after making this modification.\n\n"
    },
    {
      "title": "iptables",
      "level": 3,
      "content": "The main configuration required is creating a chain named sshguard, where sshguard automatically inserts rules to drop packets coming from bad hosts:\n\n```\n# iptables -N sshguard\n```\n\nThen add a rule to jump to the sshguard chain from the INPUT chain. This rule must be added before any other rules processing the ports that sshguard is protecting. Use the following line to protect FTP and SSH or see [1] for more examples.\n\n```\n# iptables -A INPUT -m multiport -p tcp --destination-ports 21,22 -j sshguard\n```\n\nTo save the rules:\n\n```\n# iptables-save > /etc/iptables/iptables.rules\n```\n\n"
    },
    {
      "title": "nftables",
      "level": 3,
      "content": "Change the value of BACKEND to the following:\n\n```\n/etc/sshguard.conf\n```\n\n```\nBACKEND=\"/usr/lib/sshguard/sshg-fw-nft-sets\"\n```\n\nWhen you start/enable the sshguard.service, two new tables named sshguard in the ip and ip6 address families are added which filter incoming traffic through sshguard's list of IP addresses. The chains in the sshguard table have a priority of -10 and will be processed before other rules of lower priority. See sshguard-setup(7) and nftables for more information.\n\n"
    },
    {
      "title": "systemd",
      "level": 3,
      "content": "Enable and start sshguard.service.\n\n"
    },
    {
      "title": "syslog-ng",
      "level": 3,
      "content": "If you have syslog-ng installed, you may start sshguard directly from the command line instead.\n\n```\n/usr/sbin/sshguard -l /var/log/auth.log -b /var/db/sshguard/blacklist.db\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Configuration is done in /etc/sshguard.conf which is required for sshguard to start. A commented example is located at /usr/share/doc/sshguard/sshguard.conf.sample or can also be found on Bitbucket sshguard.conf.sample.\n\n"
    },
    {
      "title": "Blacklisting threshold",
      "level": 3,
      "content": "By default in the Arch-provided configuration file, offenders become permanently banned once they reach a \"danger\" level of 120 (or 12 failed logins; see attack dangerousness for more details). This behavior can be modified by prepending a danger level to the blacklist file.\n\n```\n/etc/sshguard.conf\n```\n\n```\nBLACKLIST_FILE=200:/var/db/sshguard/blacklist.db\n```\n\nThe 200: in this example tells sshguard to permanently ban a host after achieving a danger level of 200.\n\nFinally, restart sshguard.service.\n\n"
    },
    {
      "title": "Moderate banning example",
      "level": 3,
      "content": "A slightly more aggressive banning rule than the default one is proposed here to illustrate various options:\n\n- It monitors sshd and vsftpd via logs from the systemd/Journal\n- It blocks attackers after 2 attempts (each having a cost of 10, explaining the 20 value of the THRESHOLD parameter) for 180 seconds with subsequent block time longer by a factor of 1.5. Note that this 1.5 multiplicative delay is internal and not controlled in the settings\n- Attackers are permanently blacklisted after 10 attempts (10 attempts having each a cost of 10, explaining the 100 value in the BLACKLIST_FILE parameter)\n- It blocks not only the attacker's IP but all the IPv4 subnet 24 (CIDR notation)\n\n```\n/etc/sshguard.conf\n```\n\n```\n# Full path to backend executable (required, no default)\nBACKEND=\"/usr/lib/sshguard/sshg-fw-iptables\"\n\n# Log reader command (optional, no default)\nLOGREADER=\"LANG=C.UTF-8 /usr/bin/journalctl -afb -p info -n1 -t sshd-session -t vsftpd -o cat\"\n\n# How many problematic attempts trigger a block\nTHRESHOLD=20\n# Blocks last at least 180 seconds\nBLOCK_TIME=180\n# The attackers are remembered for up to 3600 seconds\nDETECTION_TIME=3600\n\n# Blacklist threshold and file name\nBLACKLIST_FILE=100:/var/db/sshguard/blacklist.db\n\n# IPv6 subnet size to block. Defaults to a single address, CIDR notation. (optional, default to 128)\nIPV6_SUBNET=64\n# IPv4 subnet size to block. Defaults to a single address, CIDR notation. (optional, default to 32)\nIPV4_SUBNET=24\n```\n\n"
    },
    {
      "title": "Aggressive banning",
      "level": 3,
      "content": "For some users under constant attack, a more aggressive banning policy can be adopted. If you are confident that accidental failed logins are unlikely, you can instruct SSHGuard to permanently ban hosts after a single failed login. Modify the parameters in the configuration file in the following way:\n\n```\n/etc/sshguard.conf\n```\n\n```\nTHRESHOLD=10\nBLACKLIST_FILE=10:/var/db/sshguard/blacklist.db\n```\n\nFinally restart sshguard.service.\n\nAlso, to prevent multiple authentication attempts during a single connection, you may want to change /etc/ssh/sshd_config by defining:\n\n```\n/etc/ssh/sshd_config\n```\n\n```\nMaxAuthTries 1\n```\n\nRestart sshd.service for this change to take effect.\n\n"
    },
    {
      "title": "Unbanning",
      "level": 3,
      "content": "If you ban yourself, you can wait to get unbanned automatically or use iptables or nftables to unban yourself.\n\nYou will also need to remove the IP address from /var/db/sshguard/blacklist.db in order to make unbanning persistent.\n\n"
    },
    {
      "title": "iptables",
      "level": 4,
      "content": "First check if your IP is banned by sshguard:\n\n```\n# iptables --list sshguard --line-numbers --numeric\n```\n\nThen use the following command to unban, with the line-number as identified in the former command:\n\n```\n# iptables --delete sshguard line-number\n```\n\n"
    },
    {
      "title": "nftables",
      "level": 4,
      "content": "Remove your IP address from the attackers set:\n\n```\n# nft delete element family sshguard attackers { ip_address }\n```\n\nwhere family is either ip or ip6.\n\n"
    },
    {
      "title": "Logging",
      "level": 3,
      "content": "To see what is being passed to sshguard, examine the script in /usr/lib/systemd/scripts/sshguard-journalctl and the systemd service sshguard.service. An equivalent command to view the logs in the terminal:\n\n```\n# journalctl -afb -p info SYSLOG_FACILITY=4 SYSLOG_FACILITY=10\n```\n\n"
    }
  ]
}