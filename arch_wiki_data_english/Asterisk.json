{
  "title": "Asterisk",
  "url": "https://wiki.archlinux.org/title/Asterisk",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Asterisk is a complete PBX (private branch exchange) in software. It runs on Linux, BSD, Windows and macOS and provides all of the features you would expect from a PBX and more. Asterisk does voice over IP in four protocols, and can interoperate with almost all standards-based telephony equipment using relatively inexpensive hardware.\n\nAsterisk provides voice-mail services with directory, call conferencing, interactive voice response and call queuing. It has support for three-way calling, caller ID services, ADSI, IAX, SIP, H.323 (as both client and gateway), MGCP (call manager only) and SCCP/Skinny.\n\nThis article will show you how to configure a simple in house network enabling us to use a SIP softphone to talk to another SIP softphone on your LAN.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the asteriskAUR package.\n\nAlternatively, you can install the asterisk-lts-18AUR or asterisk-lts-20AUR package to have a long-term support release (current latest LTS major version is Asterisk 20). Asterisk LTS releases tend to have fewer features, but will be maintained for much longer. See the Asterisk Versions page for complete details about the release cycle for all Asterisk versions.\n\nEnable/start asterisk.service.\n\nYou will also need a SIP softphone and at least two machines. Recommendations for SIP phones are Blink (blinkAUR) or Linphone (liblinphone-gitAUR).\n\nTo enable ilbc codec support add the following to the very beginning of the build section of the PKGBUILD:\n\n```\ncd ${pkgname}-${pkgver}/contrib/scripts\necho | ./get_ilbc_source.sh\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "As of Asterisk 20, the legacy chan_sip module is no longer compiled by default. If you would rather use chan_sip than res_pjsip, please install asterisk-lts-18AUR, which was the last LTS release to build chan_sip.\n\nres_pjsip is the newer, more performant Asterisk channel module that supports the standard SIP (Session Initiation Protocol) protocol, the primary VoIP (Voice over Internet Protocol) protocol in use by many carriers, telcos, Internet telephony service providers (ITSPs), and enterprises. However, res_pjsip is considerably more complicated to set up than the older chan_sip.\n\nThe prevailing wisdom of the wider Asterisk community suggests to only use chan_sip if you already have an existing configuration for it, while also planning the upgrade to res_pjsip. For any new installations, res_pjsip is recommended. As mentioned above, chan_sip is no longer maintained, not even for security fixes (except in older LTS releases), so new Asterisk PBX administrators should go with a supported SIP channel driver (i.e., res_pjsip).\n\nIf you have an existing chan_sip configuration, to build it in Asterisk 20 LTS, you can do the following: Edit the asterisk-lts-20AUR PKGBUILD, in the build() function. Modify the following line:\n\n```\nPKGBUILD\n```\n\n```\nmake MENUSELECT_CFLAGS= OPTIMIZE= DEBUG= ASTVARRUNDIR=\"/run/$pkgname\" NOISY_BUILD=1\n```\n\nPrefix it with a call to build the menuselect tool, and enable chan_sip:\n\n```\nPKGBUILD\n```\n\n```\nmake menuselect.makeoptions && \\\nmenuselect/menuselect --enable chan_sip && \\\nmake MENUSELECT_CFLAGS= OPTIMIZE= DEBUG= ASTVARRUNDIR=\"/run/$pkgname\" NOISY_BUILD=1\n```\n\nNote that this will need to be done with every update of the asterisk-lts-20AUR package.\n\n"
    },
    {
      "title": "PJSIP",
      "level": 3,
      "content": "Once installed, Asterisk has the res_pjsip configuration in /etc/asterisk/pjsip.conf. The sample file included with Asterisk gives several basic examples, but is not exhaustive for all pjsip options. Readers are encouraged to read the Asterisk Wiki Security best practices article, and Configuring res_pjsip before continuing.\n\nThis article contains a basic single SIP phone, multiple SIP trunk example, using SIP Station SIP trunks, from Sangoma. Two SIP trunks with SIP Station are configured for redundancy, as recommended by SIP Station. The following example was tested using a Sangoma/Digium D60 hardware phone, but any SIP 2.0 compliant hard- or softphone should suffice.\n\nThis example assumes the Asterisk PBX server and SIP phone are on a private IPv4 LAN, with a NAT router between the server/phone and the WAN/Internet. If you would like to use IPv6, please read the Configuring res_pjsip for IPv6 article.\n\n"
    },
    {
      "title": "modules.conf",
      "level": 4,
      "content": "First, ensure res_pjsip.so is not prefixed with noload =. In this example, the require = prefix makes Asterisk fail to load if chan_pjsip.so fails to load. This is not absolutely necessary, but unless you are using other VoIP protocols it may not make sense for Asterisk to load if res_pjsip does not load.\n\n```\n/etc/asterisk/modules.conf\n```\n\n```\n;...\nrequire = chan_pjsip.so\n;...\n```\n\n"
    },
    {
      "title": "pjsip.conf",
      "level": 4,
      "content": "Before diving into configuring pjsip.conf, review the PJSIP Configuration Wizard. It is useful for the simple use case of only one SIP provider/ITSP, and handles many of the pjsip objects for this automatically.\n\nThe file pjsip.conf is an ini-style configuration file, with [section-headers-in-square-brackets], and either a hash (#) or a semicolon (;) as the comment character. Each line under a section header is a key=value pair, with section-specific keys set to the specified values. Note that section headers can have (!) appended after the closing square bracket, which indicates the section is a template, for later use within pjsip.conf. To instantiate a section using a previously defined template, suffix the section header with the (template-name).\n\nIn order to define a SIP trunk for use with Asterisk, PJSIP has the concept of a network transport. From the Asterisk Wiki, the transport section configures how res_pjsip will operate at the transport layer. For example, it supports configuration options for protocols such as TCP, UDP, or WebSockets and encryption methods like TLS/SSL.\n\nTransport sections can be named arbitrarily, but it is recommended to name the section that makes it easy to remember what it signifies. The following example names it [transport-udp-nat] for identifying that this transport is using UDP for SIP, and is expected to traverse a NAT device.\n\n```\n/etc/asterisk/pjsip.conf\n```\n\n```\n[transport-udp-nat]\ntype=transport  ; signifies this is a transport definition\nprotocol=udp  ; specifies this uses the UDP transport protocol\n; this transport binds to all configured network interfaces, \n; replace with the IP address of the desired interface. 0.0.0.0 means all interfaces\nbind=0.0.0.0\n; =====  NOTE, the following directives are OPTIONAL\nlocal_net=10.20.30.0/24  ; specify the networks that this Asterisk server should consider as local/LAN networks. Change this to the local LAN subnet (in CIDR notation)\nlocal_net=127.0.0.0/8  ; specify the networks that this Asterisk server should consider as local/LAN networks (this one sets it to the IPv4 loopback network)\nexternal_media_address=96.69.199.60  ; specify the external/WAN IP address for RDP media (audio)\nexternal_signaling_address=96.69.199.60  ; specify the external/WAN IP address for SIP (signaling)\n```\n\nNote that only one transport is allowed for each IP address/port or IP address/protocol mapping. If you would like to configure multiple transport protocols (e.g. both TCP and UDP), you will need to bind each protocol to a different IP address. Likewise if you want to define multiple transports using the same protocol, the ports used need to be different for each transport definition.\n\nNext, define the registrations the SIP trunks will use. Note that the SIP Station registrations are first defined via a template (with (!) appended to the section name). Each template defines the settings that are common for each section using the template; the sections themselves only contain the options that need to be set for that section.\n\n```\n/etc/asterisk/pjsip.conf\n```\n\n```\n[sipstation-reg](!)\ntype=registration\ntransport=transport-udp-nat\ncontact_user=15055551234\nretry_interval=60\n\n; ==== ... several other templates and sections will appear here\n; ====     including the authentication sections, etc., which are also used by the registration\n; ==== ....\n\n[siptsation-reg1](sipstation-reg)\noutbound_auth=sipstation-auth1 \nserver_uri=sip:trunk1.freepbx.com  ; trunk1 provided by SIP Station\nclient_uri=sip:my_username@trunk1.freepbx.com\n\n[siptsation-reg2](sipstation-reg)\noutbound_auth=sipstation-auth2 \nserver_uri=sip:trunk2.freepbx.com  ;  trunk2 provided by SIP Station\nclient_uri=sip:my_username@trunk2.freepbx.com\n```\n\nHere, define the authentication template, and the specific authentication sections for use with the SIP Station trunks.\n\n```\n/etc/asterisk/pjsip.conf\n```\n\n```\n[sipstation-auth](!)\ntype=auth\npassword=Super*Secret@Password!\nusername=my_username\n\n; ==== ... more templates may appear here\n\n[sipstation-auth1](sipstation-auth)\nrealm=trunk1.freepbx.com\n\n[sipstation-auth2](sipstation-auth)\nrealm=trunk2.freepbx.com\n```\n\nAn endpoint is essentially a profile for the configuration of a SIP device such as a phone or remote server. This defines the transport, the Asterisk Dialplan context where calls originating from the endpoint gets handled, and the audio codecs allowed for the endpoint. For the SIP station trunks, define the following:\n\n```\n/etc/asterisk/pjsip.conf\n```\n\n```\n[sipstation-endpoint](!)\ntype=endpoint\ntransport=transport-udp-nat\ncontext=from-external  ; Dialplan context, defined in extensions.conf or related file\ndisallow=all   ; disallows all codecs, including default ones, unless explicitly allowed below\nallow=ulaw     ; standard G.711, uncompressed PCM codec. Uses the most bandwidth\nallow=gsm      ; another standard, compressed codec. Uses less bandwidth than ulaw\n; other codecs are available, and have different attributes. Some require paid licenses to use.\naors=sipstation-aors  ; AOR - Address of Record, to be defined later\n;direct_media=no  ; setting this may not allow audio to pass through NAT\ndirect_media=yes\nrtp_symmetric=yes\n\n; ==== ... more template definitions\n\n[sipstation-endpoint1](sipstation-endpoint)\noutbound_auth=sipstation-auth1\nfrom_domain=trunk1.freepbx.com\n\n[sipstation-endpoint2](sipstation-endpoint)\noutbound_auth=sipstation-auth2\nfrom_domain=trunk2.freepbx.com\n```\n\nControls how the res_pjsip_endpoint_identifier_ip module determines what endpoint an incoming packet is from. For the SIP Station trunks, the following is defined:\n\n```\n/etc/asterisk/pjsip.conf\n```\n\n```\n[sipstation-identify](!)\ntype=identify\n; this is the LAN IP address of the NAT router, which calls from the SIP Station\n; trunks may appear to come from (because of NAT).\nmatch=10.20.30.254/32\n\n[sipstation-id1](sipstation-identify)\nendpoint=sipstation-endpoint1\nmatch=192.159.66.3   ;  IP address of trunk1.freepbx.com\n\n[sipstation-id2](sipstation-identify)\nendpoint=sipstation-endpoint2\nmatch=162.253.134.142    ;  IP address of trunk2.freepbx.com\n```\n\nA primary feature of AOR objects (Address of Record) is to tell Asterisk where an endpoint can be contacted. Without an associated AOR section, an endpoint cannot be contacted. For the SIP Station trunks, define this:\n\n```\n/etc/asterisk/pjsip.conf\n```\n\n```\n[sipstation-aors]\ntype=aor\ncontact=sip:trunk1.freepbx.com\ncontact=sip:trunk2.freepbx.com\n```\n\nFinally, define the necessary sections for the SIP phone that will register to Asterisk. It has several similar sections as with the SIP Station trunks. Expand these with templates if multiple local SIP phones are intended to register to your Asterisk PBX. Remote phones (from the WAN/Internet) can also be configured, but that iss outside the scope of this example.\n\n```\n/etc/asterisk/pjsip.conf\n```\n\n```\n[home-phone]\ntype=endpoint\ntransport=transport-udp-nat\ncontext=from-internal  ;  Dialplan context that gets executed when a user dials from this phone\ndisallow=all\nallow=ulaw\nallow=gsm\nauth=home-phone-auth\naors=home-phone\n\n[home-phone-auth]\ntype=auth\nauth_type=userpass\npassword=MyPhonePa$$word0\nusername=home-phone\n\n[home-phone]\ntype=aor\nmax_contacts=1\n```\n\n"
    },
    {
      "title": "Managing PJSIP",
      "level": 4,
      "content": "There are several commands regarding res_pjsip available in the Asterisk CLI, all prefixed with the pjsip command. To get to the Asterisk CLI, enter the following command, as the asterisk user:\n\n```\n$ asterisk -rvvv\n```\n\nThis assumes Asterisk is already running (e.g., via the systemd service unit). Once in the Asterisk CLI, you will see the prompt hostname*CLI> . To see a list of available PJSIP commands, type help pjsip.\n\nTo see a list of PJSIP registrations, type the following:\n\n```\nhostname*CLI> pjsip show registrations\n```\n\n```\n<Registration/ServerURI..............................>  <Auth....................>  <Status.......>\n---------------------------------------------------------------------------------------------\n\n siptsation-reg1/sip:trunk1.freepbx.com                  sipstation-auth1            Registered        (exp. 2062s)\n siptsation-reg2/sip:trunk2.freepbx.com                  sipstation-auth2            Registered        (exp. 2069s)\n\nObjects found: 2\n```\n\nTo see a list of PJSIP endpoints, type the following:\n\n```\nhostname*CLI> pjsip show endpoints\n```\n\n```\nEndpoint:  <Endpoint/CID.....................................>  <State.....>  <Channels.>\n    I/OAuth:  <AuthId/UserName...........................................................>\n        Aor:  <Aor............................................>  <MaxContact>\n      Contact:  <Aor/ContactUri..........................> <Hash....> <Status> <RTT(ms)..>\n  Transport:  <TransportId........>  <Type>  <cos>  <tos>  <BindAddress..................>\n   Identify:  <Identify/Endpoint.........................................................>\n        Match:  <criteria.........................>\n    Channel:  <ChannelId......................................>  <State.....>  <Time.....>\n        Exten: <DialedExten...........>  CLCID: <ConnectedLineCID.......>\n ----------------------------------------------------------------------------------------------\n\n Endpoint:  home-phone                                           Not in use    0 of inf\n     InAuth:  home-phone-auth/home-phone\n        Aor:  home-phone                                         1\n      Contact:  home-phone/sip:home-phone@10.20.30.229:506 f91928f561 NonQual         nan\n  Transport:  transport-udp-nat         udp      0      0  0.0.0.0:5060\n\n Endpoint:  sipstation-endpoint1                                 Not in use    0 of inf\n    OutAuth:  sipstation-auth1/mw3FSBsPPjQ7\n        Aor:  sipstation-aors                                    0\n      Contact:  sipstation-aors/sip:trunk1.freepbx.com     256c242e36 NonQual         nan\n      Contact:  sipstation-aors/sip:trunk2.freepbx.com     c07c6c7180 NonQual         nan\n  Transport:  transport-udp-nat         udp      0      0  0.0.0.0:5060\n   Identify:  sipstation-id1/sipstation-endpoint1\n        Match: 10.20.30.254/32\n        Match: 192.159.66.3/32\n\n Endpoint:  sipstation-endpoint2                                 Not in use    0 of inf\n    OutAuth:  sipstation-auth2/mw3FSBsPPjQ7\n        Aor:  sipstation-aors                                    0\n      Contact:  sipstation-aors/sip:trunk1.freepbx.com     256c242e36 NonQual         nan\n      Contact:  sipstation-aors/sip:trunk2.freepbx.com     c07c6c7180 NonQual         nan\n  Transport:  transport-udp-nat         udp      0      0  0.0.0.0:5060\n   Identify:  sipstation-id2/sipstation-endpoint2\n        Match: 10.20.30.254/32\n        Match: 162.253.134.142/32\n\nObjects found: 3\n```\n\n"
    },
    {
      "title": "chan_sip",
      "level": 3,
      "content": "Note that the following instructions assume that you want to use already obsoleted chan_sip module. The chan_sip module is no longer maintained, but is easier to configure then the newer res_pjsip module. There is a summary of configuration changes between two modules, as well as instructions on how to migrate to the newer module, on the Asterisk documentation.\n\nIn order to use chan_sip, you need to explicitly load the older module, and ensure that the newer chan_pjsip.so module is unloaded. In /etc/asterisk/modules.conf adjust the following:\n\n```\nnoload => chan_pjsip.so\nnoload => res_pjsip.so\n; noload => chan_sip.so\n```\n\nAdd this to the following file:\n\n```\n/etc/asterisk/sip.conf\n```\n\n```\n...\n[me1]\ntype=friend\nusername=me1\nsecret=PASSWORD\nhost=dynamic\ncontext=house\n\n[me2]\ntype=friend\nusername=me2\nsecret=PASSWORD\nhost=dynamic\ncontext=house\n```\n\nThis creates our two SIP users me1 and me2 with a password of PASSWORD in the house context. The context will be defined next.\n\nAdd this to the following file:\n\n```\n/etc/asterisk/extensions.conf\n```\n\n```\n[house]\nexten => 100,1,Dial(SIP/me1)\nexten => 101,1,Dial(SIP/me2)\n```\n\nThis creates the context house and assigns extension 100 to the SIP user me1, and extension 101 to the SIP user me2.\n\nNow all that is left is to see if it works.\n\n"
    },
    {
      "title": "Music on hold",
      "level": 3,
      "content": "Music on hold is a really sweet feature. And once again easy to install and configure. Edit /etc/asterisk/musiconhold.conf and add, or make sure it is uncommented:\n\n```\n[default]\nmode=files\ndirectory=mohmp3\n```\n\nAnd that is all there is to it. Just copy your favorite legally obtained MP3 to /var/lib/asterisk/mohmp3.\n\n"
    },
    {
      "title": "Voicemail",
      "level": 3,
      "content": "Voicemail is another feature of asterisk. There are many ways to configure it, however this article only covers a simple approach.\n\nCreate/edit your voicemail.conf:\n\n```\n[general]\nformat=gsm|wav49|wav\nserveremail=asterisk\nattach=no\nmailcmd=/usr/sbin/sendmail -t\nmaxmessage=180\nmaxgreet=60\n\n[default]\n100 => 1234,Me,me@mydomain.com\n```\n\nWhat does this mean? Most of the [general] is pretty self-explanatory. However, do note that if you have postfix set up right the PBX will send an email notifying the user of a new voice-mail and if attach=yes is defined it will attach the file.\n\nNow for the actual mailbox. The format is:\n\n```\nmailbox => password,user,email\n```\n\nIn this case, we gave 'Me' (email me@mydomain.com) mailbox 100, with a password of 1234.\n\nNow we have to have a way to leave messages to this voice-mail, and a way to access it. For this, we go back to the extensions.conf and modify your existing entry as follows:\n\n```\nexten => 100,1,Dial(SIP/me1,20)\nexten => 100,n,Voicemail(u100@default)\n```\n\nThe 20 on the end of the first 'exten' tells 'Dial()' to call for 20 seconds. If no one answers it heads to voice-mail box 100 in the default context.\n\nNext is actually accessing your voicemail. For this we add:\n\n```\nexten => 600,1,VoiceMailMain,s100@default\n```\n\nSo when we call 600, the application 'VoiceMailMain' goes to 100 in the default context. The s allows for automatic login.\n\n"
    },
    {
      "title": "Connecting to the PSTN",
      "level": 3,
      "content": "Now that you have the previous setup, it is time to actually connect to the outside world. To do this, you will need a provider such as OnSIP. Your provider should have instructions on connecting to asterisk, so this section is very general.\n\n"
    },
    {
      "title": "General set-up",
      "level": 4,
      "content": "```\n[general]\nregister => username:password@sip.specific.com\n\n[whatever]                   \nfromdomain=specific.com     \nhost=sip.specific.com\ninsecure=very    ; check with provider\nusername=usernameduh\nsecret=passwordduh\ntype=peer\n```\n\n```\n[outboundwithCID]  ; this can be whatever\nexten => _1NXXNXXXXXX,1,SetCIDNum(15555551234)\nexten => _1NXXNXXXXXX,2,Dial(SIP/${EXTEN}@whatever)\nexten => _1NXXNXXXXXX,3,Congestion()\nexten => _1NXXNXXXXXX,103,Busy()\n\n[default]  ; This should be set in your sip.conf for incoming calls\n\n;These should to be changed to your actual number\n; ie     15555555555\nexten => 1NXXNXXXXXX,1,Answer()\nexten => 1NXXNXXXXXX,2,Playback(ttt-weasels)\nexten => 1NXXNXXXXXX,3,HangUp()\n```\n\n- In the outbound context, any number dialed will be sent out to your service provider. The 'whatever' in the 2 priority should match what you have in your sip.conf.\n- Of course, the inbound dial-plan can be modified to do what you want. For instance, you can have Dial(SIP/me1) so when someone calls your number they are routed to your SIP phone on your computer. Then add in voice-mail and so on.\n\nThe first step is to log into FWD and enable their side of IAX. It is under extra features, and keep in mind that the authors claim it takes a little while to activate.\n\nNow edit your iax.conf with the following in the 'general' section:\n\n```\nregister => FWDNUMBER:PASSWORD@iax2.fwdnet.net \ndisallow = all\nallow = ulaw\n```\n\nAnd at the bottom add:\n\n```\n[iaxfwd]\ntype=user\ncontext=fromiaxfwd\nauth=rsa\ninkeys=freeworlddialup\n```\n\nThis allows calls from FWD.\n\nPlace this at the top under '[globals]':\n\n```\nFWDNUMBER=MYFWDNUMBER ; your calling number\nFWDCIDNAME=\"MyName\"; your caller id\nFWDPASSWORD=MYFWDPASSWORD ; your password\nFWDRINGS=sip/office ; the phone to ring\nFWDVMBOX=1000 ; the VM box for this user\n```\n\nNext, add this to a context for outgoing:\n\n```\nexten => _393.,1,SetCallerId,${FWDCIDNAME}\nexten => _393.,2,Dial(IAX2/${FWDNUMBER}:${FWDPASSWORD}@iax2.fwdnet.net/${EXTEN:3},60,r)\nexten => _393.,3,Congestion\n```\n\nYou can change the '393' to whatever you want. This is what you will dial before dialing a 'fwd' number. For instance, to dial '744561' you would dial '393744561'.\n\nAnd lastly, the incoming calls:\n\n```\n[fromiaxfwd]\nexten => ${FWDNUMBER},1,Dial(${FWDRINGS},20,r)\nexten => ${FWDNUMBER},2,Voicemail,u${FWDVMBOX}\nexten => ${FWDNUMBER},102,Voicemail,b${FWDVMBOX}\n```\n\nExtensions to try calling are 55555 (a volunteer maned test line) and 514 (conference).\n\n"
    },
    {
      "title": "Sounds",
      "level": 3,
      "content": "Sounds are stored in the folder /var/lib/asterisk/xx, xx stands for the code of the language for example \"en\" for English. To add new sounds copy them to the folder. Preserve the following folder structure:\n\n```\n/var/lib/asterisk/sounds/xx\n/var/lib/asterisk/sounds/xx/digits\n/var/lib/asterisk/sounds/xx/letters\n/var/lib/asterisk/sounds/xx/phonetic\n```\n\nEdit the language parameter in the sip.conf\n\n```\n[general]\n...\nlanguage=en\n...\n```\n\nPossible sources for sounds are:\n\n- https://downloads.asterisk.org/pub/telephony/sounds/\n- https://packages.debian.org/wheezy/all/asterisk-prompt-xx fr de ...\n- voip-info.org\n\n- fr\n- de\n- ...\n\n"
    },
    {
      "title": "MeetMe",
      "level": 3,
      "content": "MeetMe is the application that allows you to do conference calling. Same as everything, basic setup is easy.\n\nEdit meetme.conf:\n\n```\nconf => 1000\n```\n\nNext is extensions.conf:\n\n```\nexten => 999,1,MeetMe(1000|M)\n```\n\nNow dial 999 to get into conference 1000. The enables music on hold if no one is in there. It will automatically go away when someone joins the conference.\n\n"
    },
    {
      "title": "Asterisk console and softphones",
      "level": 2,
      "content": "Now lets get Asterisk going:\n\n```\n# asterisk -vvvvvvc\n```\n\nThis will give us the Asterisk CLI with verbose output. If Asterisk is already running you will need to use:\n\n```\n# asterisk -r\n```\n\nNow fire up your SIP clients and set them up with the information in the sip.conf. Switch back to your Asterisk CLI and you should see:\n\n```\nRegistered SIP 'me1' at 192.168.0.142 port 5061 expires 60\n```\n\nNow you should be able to dial 101 from me1 and talk to me2.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "If you receive a 404 Not Found error check your extensions.conf and the number you dialed.\n\n"
    }
  ]
}