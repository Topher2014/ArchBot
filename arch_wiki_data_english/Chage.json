{
  "title": "Chage",
  "url": "https://wiki.archlinux.org/title/Chage",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- DeveloperWiki:UID / GID Database\n- Sudo\n- Polkit\n- File permissions and attributes\n- systemd-homed\n- Reset lost root password\n- Identity management\n\nUsers and groups are used on GNU/Linux for access controlâ€”that is, to control access to the system's files, directories, and peripherals. Linux offers relatively simple/coarse access control mechanisms by default. For more advanced options, see ACL, Capabilities and PAM#Configuration How-Tos.\n\n"
    },
    {
      "title": "Overview",
      "level": 2,
      "content": "A user is anyone who uses a computer. In this case, we are describing the names which represent those users. It may be Mary or Bill, and they may use the names Dragonlady or Pirate in place of their real name. All that matters is that the computer has a name for each account it creates, and it is this name by which a person gains access to use the computer. Some system services also run using restricted or privileged user accounts.\n\nManaging users is done for the purpose of security by limiting access in certain specific ways. The superuser (root) has complete access to the operating system and its configuration; it is intended for administrative use only. Unprivileged users can use several programs for controlled privilege elevation.\n\nAny individual may have more than one account as long as they use a different name for each account they create. Further, there are some reserved names which may not be used such as \"root\".\n\nUsers may be grouped together into a \"group\", and users may be added to an existing group to utilize the privileged access it grants.\n\n"
    },
    {
      "title": "Permissions and ownership",
      "level": 2,
      "content": "From In UNIX Everything is a File:\n\nFrom Extending UNIX File Abstraction for General-Purpose Networking:\n\nEvery file on a GNU/Linux system is owned by a user and a group. In addition, there are three types of access permissions: read, write, and execute. Different access permissions can be applied to a file's owning user, owning group, and others (those without ownership). One can determine a file's owners and permissions by viewing the long listing format of the ls command:\n\n```\n$ ls -l /boot/\n```\n\n```\ntotal 13740\ndrwxr-xr-x 2 root root    4096 Jan 12 00:33 grub\n-rw-r--r-- 1 root root 8570335 Jan 12 00:33 initramfs-linux-fallback.img\n-rw-r--r-- 1 root root 1821573 Jan 12 00:31 initramfs-linux.img\n-rw-r--r-- 1 root root 1457315 Jan  8 08:19 System.map26\n-rw-r--r-- 1 root root 2209920 Jan  8 08:19 vmlinuz-linux\n```\n\nThe first column displays the file's permissions (for example, the file initramfs-linux.img has permissions -rw-r--r--). The third and fourth columns display the file's owning user and group, respectively. In this example, all files are owned by the root user and the root group.\n\n```\n$ ls -l /media/\n```\n\n```\ntotal 16\ndrwxrwx--- 1 root vboxsf 16384 Jan 29 11:02 sf_Shared\n```\n\nIn this example, the sf_Shared directory is owned by the root user and the vboxsf group. It is also possible to determine a file's owners and permissions using the stat command:\n\nOwning user:\n\n```\n$ stat -c %U /media/sf_Shared/\n```\n\n```\nroot\n```\n\nOwning group:\n\n```\n$ stat -c %G /media/sf_Shared/\n```\n\n```\nvboxsf\n```\n\nAccess rights:\n\n```\n$ stat -c %A /media/sf_Shared/\n```\n\n```\ndrwxrwx---\n```\n\nAccess permissions are displayed in three groups of characters, representing the permissions of the owning user, owning group, and others, respectively. For example, the characters -rw-r--r-- indicate that the file's owner has read and write permission, but not execute (rw-), whilst users belonging to the owning group and other users have only read permission (r-- and r--). Meanwhile, the characters drwxrwx--- indicate that the file's owner and users belonging to the owning group all have read, write, and execute permissions (rwx and rwx), whilst other users are denied access (---). The first character represents the file's type.\n\nList files owned by a user or group with the find utility:\n\n```\n# find / -group groupname\n```\n\n```\n# find / -group groupnumber\n```\n\n```\n# find / -user user\n```\n\nA file's owning user and group can be changed with the chown (change owner) command. A file's access permissions can be changed with the chmod (change mode) command.\n\nSee chown(1), chmod(1), and Linux file permissions for additional detail.\n\n"
    },
    {
      "title": "Shadow",
      "level": 2,
      "content": "The user, group and password management tools on Arch Linux come from the shadow package, which is a dependency of the base meta package.\n\n"
    },
    {
      "title": "File list",
      "level": 2,
      "content": "Table content:\nFile | Purpose\n/etc/shadow | Secure user account information\n/etc/passwd | User account information\n/etc/gshadow | Contains the shadowed information for group accounts\n/etc/group | Defines the groups to which users belong\n\n"
    },
    {
      "title": "User management",
      "level": 2,
      "content": "To list users currently logged on the system, the who command can be used. To list all existing user accounts including their properties stored in the user database, run passwd -Sa as root. See passwd(1) for the description of the output format.\n\nTo add a new user, use the useradd command:\n\n```\n# useradd -m -G additional_groups -s login_shell username\n```\n\nIf an initial login group is specified by name or number, it must refer to an already existing group. If not specified, the behaviour of useradd will depend on the USERGROUPS_ENAB variable contained in /etc/login.defs. The default behaviour (USERGROUPS_ENAB yes) is to create a group with the same name as the username.\n\nWhen the login shell is intended to be non-functional, for example when the user account is created for a specific service, /usr/bin/nologin may be specified in place of a regular shell to politely refuse a login (see nologin(8)).\n\nSee useradd(8) for other supported options.\n\n"
    },
    {
      "title": "Example adding a user",
      "level": 3,
      "content": "To add a new user named archie, creating its home directory and otherwise using all the defaults in terms of groups, directory names, shell used and various other parameters:\n\n```\n# useradd -m archie\n```\n\nAlthough it is not required to protect the newly created user archie with a password, it is highly recommended to do so:\n\n```\n# passwd archie\n```\n\nThe above useradd command will also automatically create a group called archie and makes this the default group for the user archie. Making each user have their own group (with the group name same as the user name) is the preferred way to add users.\n\nYou could also make the default group something else using the -g option, but note that, in multi-user systems, using a single default group (e.g. users) for every user is not recommended. The reason is that typically, the method for facilitating shared write access for specific groups of users is setting user umask value to 002, which means that the default group will by default always have write access to any file you create. See also User Private Groups. If a user must be a member of a specific group specify that group as a supplementary group when creating the user.\n\nIn the recommended scenario, where the default group has the same name as the user name, all files are by default writeable only for the user who created them. To allow write access to a specific group, shared files/directories can be made writeable by default for everyone in this group and the owning group can be automatically fixed to the group which owns the parent directory by setting the setgid bit on this directory:\n\n```\n# chmod g+s our_shared_directory\n```\n\nOtherwise the file creator's default group (usually the same as the user name) is used.\n\nIf a GID change is required temporarily you can also use the newgrp command to change the user's default GID to another GID at runtime. For example, after executing newgrp groupname files created by the user will be associated with the groupname GID, without requiring a re-login. To change back to the default GID, execute newgrp without a groupname.\n\n"
    },
    {
      "title": "Changing user defaults",
      "level": 4,
      "content": "The default values used for creating new accounts are set in /etc/default/useradd and can be displayed using useradd --defaults. For example, to change the default shell globally, set SHELL=/usr/bin/shell. A different shell can also be specified individually with the -s/--shell option. Use chsh -l to list valid login shells.\n\nFiles can also be specified to be added to newly created user home directories in /etc/skel. This is useful for minimalist window managers where config files need manual configuration to reach DE-familiar behavior. For example, to set up default shortcuts for all newly created users:\n\n```\n# mkdir /etc/skel/.config\n# cp ~archie/.config/sxhkd /etc/skel/.config\n```\n\nSee also: Display manager#Run ~/.xinitrc as a session to add xinitrc as an option to all users on the display manager.\n\n"
    },
    {
      "title": "Example adding a system user",
      "level": 3,
      "content": "System users can be used to run processes/daemons under a different user, protecting (e.g. with chown) files and/or directories and more examples of computer hardening.\n\nWith the following command a system user without shell access and without a home directory is created (optionally append the -U parameter to create a group with the same name as the user, and add the user to this group):\n\n```\n# useradd --system -s /usr/bin/nologin username\n```\n\nIf the system user requires a specific user and group ID, specify them with the -u/--uid and -g/--gid options when creating the user:\n\n```\n# useradd --system -u 850 -g 850 -s /usr/bin/nologin username\n```\n\n"
    },
    {
      "title": "Change a user's login name or home directory",
      "level": 3,
      "content": "To change a user's home directory:\n\n```\n# usermod -d /my/new/home -m username\n```\n\nThe -m option also automatically creates the new directory and moves the content there.\n\nNote: **no** Make sure there is no trailing / on /my/old/home.\n\n```\n# ln -s /my/new/home/ /my/old/home\n```\n\nMake sure there is no trailing / on /my/old/home.\n\nTo change a user's login name:\n\n```\n# usermod -l newname oldname\n```\n\nChanging a username is safe and easy when done properly, just use the usermod command. If the user is associated to a group with the same name, you can rename this with the groupmod command.\n\nAlternatively, the /etc/passwd file can be edited directly, see #User database for an introduction to its format.\n\nAlso keep in mind the following notes:\n\n- If you are using sudo make sure you update your /etc/sudoers to reflect the new username(s) (via the visudo command as root).\n- Personal crontabs need to be adjusted by renaming the user's file in /var/spool/cron from the old to the new name, and then opening crontab -e to change any relevant paths and have it adjust the file permissions accordingly.\n- Wine's personal directories/files' contents in ~/.wine/drive_c/users, ~/.local/share/applications/wine/Programs and possibly more need to be manually renamed/edited.\n- Certain Thunderbird addons, like Enigmail, may need to be reinstalled.\n- Anything on your system (desktop shortcuts, shell scripts, etc.) that uses an absolute path to your home dir (i.e. /home/oldname) will need to be changed to reflect your new name. To avoid these problems in shell scripts, simply use the ~ or $HOME variables for home directories.\n- Also do not forget to edit accordingly the configuration files in /etc/ that relies on your absolute path (e.g. Samba, CUPS, so on). A nice way to learn what files you need to update involves using the grep command this way: grep -r old_user *\n\n"
    },
    {
      "title": "Other examples of user management",
      "level": 3,
      "content": "To enter user information for the GECOS comment (e.g. the full user name), type:\n\n```\n# chfn username\n```\n\n(this way chfn runs in interactive mode).\n\nAlternatively the GECOS comment can be set more liberally with:\n\n```\n# usermod -c \"Comment\" username\n```\n\nTo mark a user's password as expired, requiring them to create a new password the first time they log in, type:\n\n```\n# chage -d 0 username\n```\n\nUser accounts may be deleted with the userdel command:\n\n```\n# userdel -r username\n```\n\nThe -r option specifies that the user's home directory and mail spool should also be deleted.\n\nTo change the user's login shell:\n\n```\n# usermod -s /usr/bin/bash username\n```\n\n"
    },
    {
      "title": "User database",
      "level": 2,
      "content": "Local user information is stored in the plain-text /etc/passwd file: each of its lines represents a user account, and has seven fields delimited by colons.\n\n```\naccount:password:UID:GID:GECOS:directory:shell\n```\n\nWhere:\n\n- account is the user name. This field cannot be blank. Standard *NIX naming rules apply.\n- password is the user password. Warning: The passwd file is world-readable, so storing passwords (hashed or otherwise) in this file is insecure. Instead, Arch Linux uses shadowed passwords: the password field will contain a placeholder character (x) indicating that the hashed password is saved in the access-restricted file /etc/shadow. For this reason it is recommended to always change passwords using the passwd command.\n- UID is the numerical user ID. In Arch, the first login name (after root) for a so called normal user, as opposed to services, is UID 1000 by default; subsequent UID entries for users should be greater than 1000.\n- GID is the numerical primary group ID for the user. Numeric values for GIDs are listed in /etc/group.\n- GECOS is an optional field used for informational purposes; usually it contains the full user name, but it can also be used by services such as finger and managed with the chfn command. This field is optional and may be left blank.\n- directory is used by the login command to set the $HOME environment variable. Several services with their own users use /, but normal users usually set a directory under /home.\n- shell is the path to the user's default command shell. This field is optional and defaults to /usr/bin/bash.\n\nNote: **passwd** \n\nExample:\n\n```\narchie:x:1001:1003:Archie,some comment here,,:/home/archie:/usr/bin/bash\n```\n\nBroken down, this means: user archie, whose password is in /etc/shadow, whose UID is 1001 and whose primary group is 1003. Archie is their full name and there is a comment associated to their account; their home directory is /home/archie and they are using Bash.\n\nThe pwck command can be used to verify the integrity of the user database. It can sort the user list by UID at the same time, which can be helpful for comparison:\n\n```\n# pwck -s\n```\n\n"
    },
    {
      "title": "Automatic integrity checks",
      "level": 2,
      "content": "Instead of running pwck/grpck manually, the systemd timer shadow.timer, which is part of, and is enabled by, installation of the shadow package, will start shadow.service daily. shadow.service will run pwck(8) and grpck(8) to verify the integrity of both password and group files.\n\nIf discrepancies are reported, group can be edited with the vigr(8) command and users with vipw(8). This provides an extra margin of protection in that these commands lock the databases for editing. Note that the default text editor is vi, but an alternative editor will be used if the EDITOR environment variable is set, then that editor will be used instead.\n\n"
    },
    {
      "title": "Group management",
      "level": 2,
      "content": "/etc/group is the file that defines the groups on the system (see group(5) for details). There is also its companion gshadow which is rarely used. Its details are at gshadow(5).\n\nDisplay group membership with the groups command:\n\n```\n$ groups user\n```\n\nIf user is omitted, the current user's group names are displayed.\n\nThe id command provides additional detail, such as the user's UID and associated GIDs:\n\n```\n$ id user\n```\n\nTo list all groups on the system:\n\n```\n$ cat /etc/group\n```\n\nCreate new groups with the groupadd command:\n\n```\n# groupadd group\n```\n\nAdd users to a group with the gpasswd command (see FS#58262 regarding errors):\n\n```\n# gpasswd -a user group\n```\n\nAlternatively, add a user to additional groups with usermod (replace additional_groups with a comma-separated list):\n\n```\n# usermod -aG additional_groups username\n```\n\nModify an existing group with the groupmod command, e.g. to rename the old_group group to new_group:\n\n```\n# groupmod -n new_group old_group\n```\n\nTo delete existing groups:\n\n```\n# groupdel group\n```\n\nTo remove users from a group:\n\n```\n# gpasswd -d user group\n```\n\nThe grpck command can be used to verify the integrity of the system's group files.\n\n"
    },
    {
      "title": "Group list",
      "level": 2,
      "content": "This section explains the purpose of the essential groups from the filesystem package. There are many other groups, which will be created with correct GID when the relevant package is installed. See the main page for the software for details.\n\n"
    },
    {
      "title": "User groups",
      "level": 3,
      "content": "Non-root workstation/desktop users often need to be added to some of following groups to allow access to hardware peripherals and facilitate system administration:\n\nTable content:\nGroup | Affected files | Purpose\nadm |  | Administration group, commonly used to give read access to protected logs. It has full read access to journal files.\nftp | /srv/ftp/ | Access to files served by FTP servers.\ngames | /var/games | Access to some game software.\nhttp | /srv/http/ | Access to files served by HTTP servers.\nlog |  | Access to log files in /var/log/ created by syslog-ng.\nrfkill | /dev/rfkill | Right to control wireless devices power state (used by rfkill).\nsys |  | Right to administer printers in CUPS.\nsystemd-journal | /var/log/journal/* | Can be used to provide read-only access to the systemd logs, as an alternative to adm and wheel [1]. Otherwise, only user generated messages are displayed.\nuucp | /dev/ttyS[0-9]+, /dev/tts/[0-9]+, /dev/ttyUSB[0-9]+, /dev/ttyACM[0-9]+, /dev/rfcomm[0-9]+ | RS-232 serial ports and devices connected to them.\nwheel |  | Administration group, commonly used to give privileges to perform administrative actions. It has full read access to journal files and the right to administer printers in CUPS. Can also be used to give access to the sudo and su utilities (neither uses it by default).\n\n"
    },
    {
      "title": "System groups",
      "level": 3,
      "content": "The following groups are used for system purposes, an assignment to users is only required for dedicated purposes:\n\nTable content:\nGroup | Affected files | Purpose\ndbus |  | used internally by dbus\nkmem | /dev/port, /dev/mem, /dev/kmem | \nlocate | /usr/bin/locate, /var/lib/locate, /var/lib/mlocate, /var/lib/slocate | See Locate.\nlp | /dev/lp[0-9]*, /dev/parport[0-9]* | Access to parallel port devices (printers and others).\nmail | /usr/bin/mail | \nnobody |  | Unprivileged group.\nproc | /proc/pid/ | A group authorized to learn processes information otherwise prohibited by hidepid= mount option of the proc file system. The group must be explicitly set with the gid= mount option.\nroot | /* | Complete system administration and control (root, admin).\nsmmsp |  | sendmail group.\ntty | /dev/tty, /dev/vcc, /dev/vc, /dev/ptmx | \nutmp | /run/utmp, /var/log/btmp, /var/log/wtmp | \n\n"
    },
    {
      "title": "Pre-systemd groups",
      "level": 3,
      "content": "Before arch migrated to systemd, users had to be manually added to these groups in order to be able to access the corresponding devices. This way has been deprecated in favour of udev marking the devices with a uaccess tag and logind assigning the permissions to users dynamically via ACLs according to which session is currently active. Note that the session must not be broken for this to work (see General troubleshooting#Session permissions to check it).\n\nThere are some notable exceptions which require adding a user to some of these groups: for example if you want to allow users to access the device even when they are not logged in. However, note that adding users to the groups can even cause some functionality to break (for example, the audio group will break fast user switching and allows applications to block software mixing).\n\nTable content:\nGroup | Affected files | Purpose\naudio | /dev/audio, /dev/snd/*, /dev/rtc0 | Direct access to sound hardware, for all sessions. It is still required to make ALSA and OSS work in remote sessions, see ALSA#User privileges, otherwise not recommended. Unlike on certain other distros, this group is not used for realtime privileges.\ndisk | /dev/sd[a-zA-Z]*[1-9]*, /dev/nvme[0-9]*p[1-9]*, /dev/mmcblk[0-9]*p[1-9]* | Access to block devices not affected by other groups such as optical, floppy, and storage.\nfloppy | /dev/fd[0-9]* | Access to floppy drives.\ninput | /dev/input/event[0-9]*, /dev/input/mouse[0-9]* | Access to input devices. Introduced in systemd 215 [2].\nkvm | /dev/kvm | Access to virtual machines using KVM.\noptical | /dev/sr[0-9], /dev/sg[0-9] | Access to optical devices such as CD and DVD drives.\nscanner | /var/lock/sane | Access to scanner hardware.\nstorage | /dev/st[0-9]*[lma]*, /dev/nst[0-9]*[lma]* | Used to gain access to removable drives such as USB hard drives, flash/jump drives, MP3 players; enables the user to mount storage devices.[3] Now solely for direct access to tapes if no custom udev rules is involved.[4][5][6]. Also required for manipulating some devices via udisks/udisksctl.\nvideo | /dev/fb/0, /dev/misc/agpgart | Access to video capture devices, 2D/3D hardware acceleration, framebuffer (X can be used without belonging to this group).\n\nNow solely for direct access to tapes if no custom udev rules is involved.[4][5][6].\n\nAlso required for manipulating some devices via udisks/udisksctl.\n\n"
    },
    {
      "title": "Unused groups",
      "level": 3,
      "content": "The following groups are currently not used for any purpose:\n\nTable content:\nGroup | Affected files | Purpose\nbin | none | Historical\ndaemon |  | \nlock |  | Used for lockfile access. Required by e.g. gnokiiAUR.\nmem |  | \nnetwork |  | Unused by default. Can be used e.g. for granting access to NetworkManager (see NetworkManager#Set up PolicyKit permissions).\npower |  | \nuuidd |  | \nusers |  | The primary group for users when user private groups are not used (generally not recommended), e.g. when creating users with USERGROUPS_ENAB no in /etc/login.defs or the -N/--no-user-group option of useradd.\n\n"
    },
    {
      "title": "Other tools related to these databases",
      "level": 2,
      "content": "Note: **This article or section is a candidate for merging with #Shadow.** This article or section is a candidate for merging with #Shadow.\n\nThis article or section is a candidate for merging with #Shadow.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\ngetent(1) can be used to read a particular record.\n\n```\n$ getent group tty\n```\n\nAs warned in #User database, using specific utilities such as passwd and chfn, is a better way to change the databases. Nevertheless, there are times when editing them directly is looked after. For those times, vipw, vigr are provided. It is strongly recommended to use these tailored editors over using a general text editor as they lock the databases against concurrent editing. They also help prevent invalid entries and/or syntax errors. Note that Arch Linux prefers usage of specific tools, such as chage, for modifying the shadow database over using vipw -s and vigr -s from util-linux. See also FS#31414.\n\n"
    }
  ]
}