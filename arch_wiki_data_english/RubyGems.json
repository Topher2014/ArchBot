{
  "title": "RubyGems",
  "url": "https://wiki.archlinux.org/title/RubyGems",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ruby is a dynamic, interpreted, open source programming language with a focus on simplicity and productivity.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "To use Ruby, install the ruby package.\n\nTo install IRB, install the ruby-irb package.\n\n"
    },
    {
      "title": "Multiple versions",
      "level": 3,
      "content": "If you want to run multiple versions on the same system (e.g. 2.0.0-p0 and 1.9.3-p392), the easiest way is to use one of RVM, chrubyAUR, rbenv, asdf-vmAUR.\n\n"
    },
    {
      "title": "Documentation",
      "level": 3,
      "content": "To make documentation available through the ri command-line tool, install ruby-rdoc and ruby-docs for the documentation itself. You can then query the docs with: ri Array, ri Array.pop etc. (much like man-pages)\n\n"
    },
    {
      "title": "JRuby",
      "level": 3,
      "content": "The Java implementation of Ruby, JRuby can be installed with the jruby package.\n\n"
    },
    {
      "title": "Standard Library",
      "level": 3,
      "content": "Part of Ruby's standard library consists of Ruby modules (see RubyGems for more information about modules.) The ruby package does not include all of the standard modules that a Ruby user can assume to be installed on any Ruby system, so some Ruby code may not work out-of-the-box. More information about the set of standard library modules can be found at https://stdgems.org/.\n\nThe RubyGems section discusses several methods for installing modules. To install the standard modules system-wide using pacman, one can install the ruby-stdlib package. Note that this is not needed for JRuby, as the jruby package includes the standard modules.\n\n"
    },
    {
      "title": "RubyGems",
      "level": 2,
      "content": "RubyGems is a package manager for Ruby modules (called gems), somewhat comparable to what pacman is to Arch Linux. It can be installed with the rubygems package, which is a dependency of ruby.\n\n"
    },
    {
      "title": "Configuration",
      "level": 3,
      "content": "By default in Arch Linux, when running gem, gems are installed per-user (into ~/.local/share/gem/ruby/), instead of system-wide (into /usr/lib/ruby/gems/). This is considered the best way to manage gems on Arch, because otherwise they might interfere with gems installed by Pacman.\n\nThe recommended way to setup that is by manually specifying your $GEM_HOME, which then can be appended to your $PATH environment variable in order to allow RubyGems binaries to be executed:\n\n```\n~/.profile\n```\n\n```\nexport GEM_HOME=\"$(gem env user_gemhome)\"\nexport PATH=\"$PATH:$GEM_HOME/bin\"\n```\n\nThis is required for executable gems to work without typing out the full location, although libraries will work without having to modify your path.\n\nUse gem env to view the current RubyGems environment:\n\n```\n$ gem env\n```\n\n"
    },
    {
      "title": "Usage",
      "level": 3,
      "content": "To see what gems are installed:\n\n```\n$ gem list\n```\n\nTo get information about a gem:\n\n```\n$ gem spec gem_name\n```\n\nBy default, gem list and gem spec use the --local option, which forces gem to search only the local system. This can be overridden with the --remote flag. Thus, to search for the mysql2 gem:\n\n```\n$ gem list --remote mysql2\n```\n\nTo install a gem:\n\n```\n$ gem install mysql2\n```\n\nThe process can be sped up somewhat if you do not need local documentation:\n\n```\n$ gem install mysql2 --no-document\n```\n\n```\n~/.gemrc\n```\n\n```\ngem: --no-document\n```\n\nTo update all installed gems:\n\n```\n$ gem update\n```\n\n"
    },
    {
      "title": "Installing gems system-wide",
      "level": 3,
      "content": "Gems can be installed system wide by running the gem command as root, appended with the --no-user-install flag. This flag can be set as default by replacing --user-install by --no-user-install in /etc/gemrc (system-wide) or ~/.gemrc (per-user, overrides system-wide).\n\nBundler solves these problems to some extent by packaging gems into your application. See the section below on using bundler.\n\n"
    },
    {
      "title": "Bundler",
      "level": 3,
      "content": "Bundler allows you to specify which gems your application depends upon, and optionally which version those gems should be. Once this specification is in place, Bundler installs all required gems (including the full gem dependency tree) and logs the results for later inspection. By default, Bundler installs gems into a shared location, but they can also be installed directly into your application. When your application is run, Bundler provides the correct version of each gem, even if multiple versions of each gem have been installed. This requires a little bit of work: applications should be called with bundle exec, and two lines of boilerplate code must be placed in your application's main executable.\n\nTo install Bundler:\n\n```\n$ gem install bundler\n```\n\nTo start a new bundle:\n\n```\n$ bundle init\n```\n\nThen edit Gemfile in the current directory (created by bundle init) and list your required gems:\n\n```\nGemfile\n```\n\n```\ngem \"rails\", \"3.2.9\"\ngem \"mysql2\"\n```\n\nRun the following to install gems into GEM_HOME:\n\n```\n$ bundle install\n```\n\nAlternatively, run the following to install gems to .bundle in the working directory:\n\n```\n$ bundle config set --local path '.bundle'\n```\n\nDo not forget to edit your main executable:\n\n```\n#!/usr/bin/env ruby\n\n# \"This will automatically discover your Gemfile, and make all of the gems in\n# your Gemfile available to Ruby.\" https://bundler.io/rationale.html\nrequire 'bundler/setup'\n\n...\n```\n\nFinally, run your program:\n\n```\n$ bundle exec main_executable_name.rb\n```\n\n"
    },
    {
      "title": "Managing RubyGems using pacman",
      "level": 3,
      "content": "Instead of managing gems with gem, you can use pacman, or an AUR helper. Ruby packages follow the naming convention ruby-gemname.\n\nThis option provides the following advantages:\n\n- Gems are updated along with the rest of your system.\n- Installed gems are available system-wide, instead of being available only to the user who installed them.\n\n"
    },
    {
      "title": "Quarry",
      "level": 4,
      "content": "Quarry is a tool that allows to maintain a rubygems binary repository for Arch Linux, as an easier alternative to building packages manually from the AUR. The source is hosted at Github.\n\nThe repository is maintained by the Arch developer anatolik at https://pkgbuild.com/~anatolik/quarry/. It contains many popular gems and new gems can be added upon request.\n\nSee Unofficial user repositories#quarry to enable it.\n\nThen install the required gem. The name of the package is ruby-gem name.\n\nGeneral questions can be asked at https://bbs.archlinux.org/viewtopic.php?id=182729.\n\n"
    },
    {
      "title": "Pry",
      "level": 3,
      "content": "Pry is a powerful alternative to the standard IRB shell for Ruby. It features syntax highlighting, a flexible plugin architecture, runtime invocation and source and documentation browsing.\n\n```\n$ gem install pry\n$ pry\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Ruby on Rails\n- Ruby - https://www.ruby-lang.org/\n- Bundler - https://bundler.io/\n- why's (poignant) Guide to Ruby\n- Learn Ruby The Hard Way\n\n"
    }
  ]
}