{
  "title": "Xmodmap",
  "url": "https://wiki.archlinux.org/title/Xmodmap",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Xorg\n- Xorg/Keyboard_configuration\n- Keyboard input\n- Extra keyboard keys in console\n- Xbindkeys\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nxmodmap is a utility for modifying keymaps and pointer button mappings in Xorg.\n\nxmodmap is not directly related to X keyboard extension (XKB), as it uses different (pre-XKB) ideas on how keycodes are processed within X. Generally, it is only recommended for the simplest tasks. See X keyboard extension for advanced layout configuration.\n\n- xmodmap settings are reset by setxkbmap, which not only alters the alphanumeric keys to the values given in the map, but also resets all other keys to the startup default (see LQWiki:Configuring keyboards).\n- Due to a limitation of Xorg, xmodmap settings are not applied to hotplugged devices automatically. If a keyboard is added to a system after a custom table has been applied, the custom table will have to be applied again. [1]\n\n"
    },
    {
      "title": "Introduction",
      "level": 2,
      "content": "There are two types of keyboard values in Xorg: keycodes and keysyms.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "xmodmap can be installed through the xorg-xmodmap package.\n\nOptionally, install xkeycaps, which is a graphical front-end to xmodmap.\n\n"
    },
    {
      "title": "Keymap table",
      "level": 2,
      "content": "Print the current keymap table formatted into expressions:\n\n```\n$ xmodmap -pke\n```\n\n```\n[...]\nkeycode  57 = n N\n[...]\n```\n\nEach keycode is followed by the keysym it is mapped to. The above example indicates that the keycode 57 is mapped to the lowercase n, while the uppercase N is mapped to keycode 57 plus Shift.\n\nEach keysym column in the table corresponds to a particular combination of modifier keys:\n\n1. Key\n1. Shift+Key\n1. Mode_switch+Key\n1. Mode_switch+Shift+Key\n1. ISO_Level3_Shift+Key\n1. ISO_Level3_Shift+Shift+Key\n\nNot all keysyms have to be set, but to assign only a latter keysym, use the NoSymbol value.\n\nTo see which keycode corresponds to a key, see Keyboard input#Identifying keycodes in Xorg for details on the xev utility which will output relevant keycode/keysym information about a key when you press it.\n\nNote that xmodmap is influenced by xkbd settings, so all eight keysym are available for the US(intl) xkbd layout but not for the default US (it is missing the ralt_switch symbol defined in level3). To have all 8 keysyms available you should configure the (intl) variant of the keyboard. Using US layout as an example, $ setxkbmap -layout 'us(intl)' before calling xmodmap to test your changes in the current X session. To permanently make this change, edit the xorg configuration or your .xprofile or .xinitrc file. See Xorg/Keyboard configuration#Setting keyboard layout for a full explanation.\n\n"
    },
    {
      "title": "Custom table",
      "level": 2,
      "content": "To create a key map (i.e. ~/.Xmodmap):\n\n```\n$ xmodmap -pke > ~/.Xmodmap\n```\n\nTo test the changes:\n\n```\n$ xmodmap ~/.Xmodmap\n```\n\n"
    },
    {
      "title": "Activating the custom table",
      "level": 3,
      "content": "With GDM, XDM or LightDM there is no need to source ~/.Xmodmap. For startx, use:\n\n```\n~/.xinitrc\n```\n\n```\n[[ -f ~/.Xmodmap ]] && xmodmap ~/.Xmodmap\n```\n\nAlternatively, edit the global startup script /etc/X11/xinit/xinitrc.\n\n"
    },
    {
      "title": "Test changes",
      "level": 3,
      "content": "To make temporary changes:\n\n```\n$ xmodmap -e \"keycode 46 = l L l L lstroke Lstroke lstroke\"\n$ xmodmap -e \"keysym a = e E\"\n```\n\n"
    },
    {
      "title": "Modifier keys",
      "level": 2,
      "content": "xmodmap can also be used to override modifier keys, e.g. to swap Control and Super (the Windows key).\n\nPrint the current modifier table verbosely (full sample):\n\n```\n$ xmodmap -pm\n```\n\n```\nxmodmap:  up to 4 keys per modifier, (keycodes in parentheses):\n\nshift       Shift_L (0x32),  Shift_R (0x3e)\nlock        Caps_Lock (0x42)\ncontrol     Control_L (0x25),  Control_R (0x69)\nmod1        Alt_L (0x40),  Meta_L (0xcd)\nmod2        Num_Lock (0x94)\nmod3      \nmod4        Super_R (0x86),  Super_L (0xce),  Hyper_L (0xcf)\nmod5        ISO_Level3_Shift (0x5c),  ISO_Level3_Shift (0x6c),  Mode_switch (0x85),  Mode_switch (0xcb)\n```\n\n"
    },
    {
      "title": "Finding the keysym column modifier keys",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with #Keymap table.** This article or section is a candidate for merging with #Keymap table.\n\nThis article or section is a candidate for merging with #Keymap table.\n\n"
    },
    {
      "title": "Reassigning modifiers to keys on your keyboard",
      "level": 3,
      "content": "Before assignment, the modifier keys need to be cleared. This applies to both modifiers you intend to assign and modifiers on keys that you intend to use. For example, if you intend to assign Caps_Lock to your A key and B to your NumLock key, you need to first clear the modifiers for both Caps_Lock and Num_Lock, then assign the keysyms, and finally add back the modifiers.\n\n```\n~/.Xmodmap\n```\n\n```\n[...]\nclear lock\nclear mod2\nkeycode  38 = Caps_Lock\nkeycode  77 = Num_Lock\nadd lock = Caps_Lock\nadd mod2 = Num_Lock\n```\n\n! is a comment, so only the modifiers Control and Mod4 get cleared in the following example. Then the keysyms Control_L, Control_R, Super_L and Super_R are assigned to the opposite modifier. Assigning both left and right to the same modifier means that both keys are treated the same way.\n\n```\n~/.Xmodmap\n```\n\n```\n[...]\n!clear Shift\n!clear Lock\nclear Control\n!clear Mod1\n!clear Mod2\n!clear Mod3\nclear Mod4\n!clear Mod5\n!add Shift   = Shift_L Shift_R\n!add Lock    = Caps_Lock\nadd Control = Super_L Super_R\n!add Mod1    = Alt_L Alt_R\n!add Mod2    = Mode_switch\n!add Mod3    =\nadd Mod4    = Control_L Control_R\n!add Mod5    =\n```\n\nThe following example modifies CapsLock to Control, and Shift+CapsLock to CapsLock:\n\n```\n~/.Xmodmap\n```\n\n```\nclear lock\nclear control\nadd control = Caps_Lock Control_L Control_R\nkeycode 66 = Control_L Caps_Lock NoSymbol NoSymbol\n```\n\n"
    },
    {
      "title": "Compose key",
      "level": 2,
      "content": "Note: **This article or section is a candidate for merging with Xorg/Keyboard configuration#Configuring compose key.** This article or section is a candidate for merging with Xorg/Keyboard configuration#Configuring compose key.\n\nThis article or section is a candidate for merging with Xorg/Keyboard configuration#Configuring compose key.\n\nA compose key serves to create special characters and symbols that may not be directly accessible on the keyboard. This is especially useful for typing accented letters from non-English languages. For example, pressing Compose e ' in succession will produce Ã©. Some characters require more than 2 keys to be pressed after Compose. Usually a modifier key of choice is mapped to Compose. The compose key can be set in the GUI settings of most desktop environments, but these options will not work if a custom key map table is used as described in this article. To set the compose key using Xmodmap, use the Multi_key identifier. For example, to map the right alt key (AltGr) to the compose key:\n\n```\n~/.Xmodmap\n```\n\n```\n[...]\nkeycode 108 = Multi_key Alt_R Meta_R Alt_R Meta_R\n```\n\nThe keycode number could vary based on keyboard models.\n\n"
    },
    {
      "title": "Reverse scrolling",
      "level": 2,
      "content": "Note: **This article or section is a candidate for merging with Mouse buttons.** This article or section is a candidate for merging with Mouse buttons.\n\nThis article or section is a candidate for merging with Mouse buttons.\n\nThe natural scrolling feature available in OS X Lion (mimicking smartphone or tablet scrolling) can be replicated with xmodmap. Since the synaptics driver uses the buttons 4/5/6/7 for up/down/left/right scrolling, you simply need to swap the order of how the buttons are declared in ~/.Xmodmap:\n\n```\n~/.Xmodmap\n```\n\n```\npointer = 1 2 3 5 4 7 6 8 9 10 11 12\n```\n\nThen update xmodmap:\n\n```\n$ xmodmap ~/.Xmodmap\n```\n\n"
    },
    {
      "title": "Swapping mouse buttons",
      "level": 2,
      "content": "Note: **This article or section is a candidate for merging with Mouse buttons.** This article or section is a candidate for merging with Mouse buttons.\n\nThis article or section is a candidate for merging with Mouse buttons.\n\nThe left, middle and right mouse buttons correspond to buttons 1,2 and 3 respectively in the synaptics driver. To swap left and right mouse buttons, again simply reverse the order in which they are listed in your ~/.Xmodmap:\n\n```\n~/.Xmodmap\n```\n\n```\npointer = 3 2 1\n```\n\nThis should suffice for a simple mouse setup. Again, update xmodmap:\n\n```\n$ xmodmap ~/.Xmodmap\n```\n\n"
    },
    {
      "title": "Spanish",
      "level": 3,
      "content": "```\n~/.Xmodmap\n```\n\n```\nkeycode  24 = a A aacute Aacute ae AE ae\nkeycode  26 = e E eacute Eacute EuroSign cent EuroSign\nkeycode  30 = u U uacute Uacute downarrow uparrow downarrow\nkeycode  31 = i I iacute Iacute rightarrow idotless rightarrow\nkeycode  32 = o O oacute Oacute oslash Oslash oslash\nkeycode  57 = n N ntilde Ntilde n N n\nkeycode  58 = comma question comma questiondown dead_acute dead_doubleacute dead_acute\nkeycode  61 = exclam section exclamdown section dead_belowdot dead_abovedot dead_belowdot\n!Maps the Mode key to the Alt key\nkeycode 64 = Mode_switch\n```\n\n"
    },
    {
      "title": "Esperanto",
      "level": 3,
      "content": "```\n~/.Xmodmap\n```\n\n```\nkeycode 54 = c C c C ccircumflex Ccircumflex\nkeycode 42 = g G g G gcircumflex Gcircumflex\nkeycode 43 = h H h H hcircumflex Hcircumflex\nkeycode 44 = j J j J jcircumflex Jcircumflex\nkeycode 39 = s S s S scircumflex Scircumflex\nkeycode 30 = u U u U ubreve Ubreve\n```\n\n"
    },
    {
      "title": "Turn CapsLock into Control",
      "level": 3,
      "content": "Simplest example of changing CapsLock into Control.\n\n```\n~/.Xmodmap\n```\n\n```\nclear lock\nclear control\nkeycode 66 = Control_L\nadd control = Control_L Control_R\n```\n\n"
    },
    {
      "title": "Turn CapsLock into Control, and LeftControl into Hyper",
      "level": 3,
      "content": "Laptop users may prefer having CapsLock as Control. The Left Control key can be used as a Hyper modifier (an additional modifier for emacs, openbox or i3).\n\n```\n~/.Xmodmap\n```\n\n```\nclear      lock \nclear   control\nclear      mod1\nclear      mod2\nclear      mod3\nclear      mod4\nclear      mod5\nkeycode      37 = Hyper_L\nkeycode      66 = Control_L\nadd     control = Control_L Control_R\nadd        mod1 = Alt_L Alt_R Meta_L\nadd        mod2 = Num_Lock\nadd        mod3 = Hyper_L\nadd        mod4 = Super_L Super_R\nadd        mod5 = Mode_switch ISO_Level3_Shift\n```\n\n"
    },
    {
      "title": "Turn Super_R into Hyper_R",
      "level": 3,
      "content": "Users who wish to have a Hyper key on full keyboard layout may wish to use the Right Super key as Hyper.\n\n```\n~/.Xmodmap\n```\n\n```\nremove  mod4 = Super_R\nkeycode  134 = Hyper_R\nadd     mod3 = Hyper_R\n```\n\n"
    },
    {
      "title": "Switch every number key N with Shift-N and vice-versa, for Croatian layout",
      "level": 3,
      "content": "Should work fine for layouts similar to Croatian as well.\n\n```\n~/.Xmodmap\n```\n\n```\nkeycode 10 = exclam 1 1 exclam asciitilde dead_tilde asciitilde\nkeycode 11 = quotedbl 2 2 quotedbl dead_caron caron dead_caron\nkeycode 12 = numbersign 3 3 numbersign asciicircum dead_circumflex asciicircum\nkeycode 13 = dollar 4 4 dollar dead_breve breve dead_breve\nkeycode 14 = percent 5 5 percent degree dead_abovering degree\nkeycode 15 = ampersand 6 6 ampersand dead_ogonek ogonek dead_ogonek\nkeycode 16 = slash 7 7 slash grave dead_grave grave\nkeycode 17 = parenleft 8 8 parenleft dead_abovedot abovedot dead_abovedot\nkeycode 18 = parenright 9 9 parenright dead_acute apostrophe dead_acute\nkeycode 19 = equal 0 0 equal dead_doubleacute doubleacute dead_doubleacute\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- xmodmap(1)\n- Multimediakeys with .Xmodmap HOWTO by Christian Weiske\n- Mapping unsupported keys with xmodmap by Pascal Bleser\n- LQWiki:List of Keysyms Recognised by Xmodmap\n\n"
    }
  ]
}