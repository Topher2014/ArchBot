{
  "title": "Hidpi",
  "url": "https://wiki.archlinux.org/title/Hidpi",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Font configuration\n\nHiDPI (High Dots Per Inch) displays, also known by Apple's \"Retina display\" marketing name, are screens with a high resolution in a relatively small format. They are mostly found in high-end laptops and monitors.\n\nNot all software behaves well in high-resolution mode yet. Here are listed most common tweaks which make work on a HiDPI screen more pleasant.\n\n"
    },
    {
      "title": "Background",
      "level": 2,
      "content": "The terminology in this space can be misleading. Prior to HiDPI, the terms were:\n\n- DPI (dots-per-inch): specifies the output density of ink droplets when printing a paper. [1] Higher dots-per-inch correspond to a more dense output.\n- PPI (pixels-per-inch): specifies the input density of a digital image. [2] Computed as (number of pixels in image) / (physical size of the photo).\n\nEvery display has an intrinsic PPI as the ratio of native screen resolution to physical screen size. [3] Although some technical sources use the term \"PPI\", [4] it is much more common to (inaccurately) refer to this ratio as DPI. 96 DPI screens are regarded as comfortable for most people to read ~12pt font on, and is about where most \"low-DPI\" monitors fall. HiDPI screens are around 192 DPI and greater, with some screens falling in the middle (\"medium PPI\").\n\nWhen using a HiDPI screen on a DPI-unaware system which assumes a DPI of ~96, small fonts will be uncomfortable to read. Since font rendering is relatively easy to adjust, even \"DPI-unaware\" systems (such as #Wine applications) often provide a knob for adjusting the font DPI. Whenever a DPI setting is exposed as a number (as opposed to a multiplier or a percentage), it is likely referring to the text rendering alone.\n\nMost modern GUI toolkits are capable of \"integer scaling\", rendering the UI at least 2x size. This is achieved by applying a different font DPI as well as providing HiDPI versions of assets. Some toolkits also support fractional scaling, with GTK #Fractional scaling using a combination of applying arbitrary font DPI and downscaling graphical resources.\n\nOn a desktop which is otherwise using UI scaling, applications that lack resolution independence (such as #Xwayland) may render at 1x scale and then be scaled up by the display server.\n\n"
    },
    {
      "title": "GNOME",
      "level": 3,
      "content": "To enable HiDPI, navigate to Settings > Devices > Displays > Scale and choose an appropriate value. Or, use gsettings:\n\n```\n$ gsettings set org.gnome.settings-daemon.plugins.xsettings overrides \"[{'Gdk/WindowScalingFactor', <2>}]\"\n$ gsettings set org.gnome.desktop.interface scaling-factor 2\n```\n\n"
    },
    {
      "title": "Fractional scaling",
      "level": 4,
      "content": "A setting of 2, 3, etc, which is all you can do with scaling-factor, may not be ideal for certain HiDPI displays and smaller screens (e.g. small tablets). Fractional scaling is possible on both Wayland and Xorg, though the process differs.\n\nImplementation was mainly discussed and decided in GNOME fractional scaling hackfest 2017, check [5] for more technical details.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nCurrently, GTK only supports fractional scaling for fonts. On the other hand, widgets, like buttons or labels, may only use integer (DPI) scaling. As such, fractional scaling for most native GNOME applications requires first rendering at a higher resolution, then downscaling to the requested resolution. GTK utilizes this technique in both Wayland and Xorg sessions.\n\nFor some setups running GTK 3 applications, this can increase CPU and GPU usage and power usage, resulting in a less responsive experience - particularly in Xorg. If these issues are considerable in your use case, please consider using another desktop environment or deactivating fractional scaling.\n\nEnable the experimental fractional scaling feature:\n\n```\n$ gsettings set org.gnome.mutter experimental-features \"['scale-monitor-framebuffer']\"\n```\n\nthen open Settings > Devices > Displays (the new options may only appear after a restart).\n\nTo enable the option for all users, create the following three files with the corresponding content\n\n```\n/etc/dconf/profile/user\n```\n\n```\nuser-db:user\nsystem-db:local\n```\n\n```\n/etc/dconf/db/local.d/00-hidpi\n```\n\n```\n[org/gnome/mutter]\nexperimental-features=['scale-monitor-framebuffer']\n```\n\n```\n/etc/dconf/db/locks/hidpi\n```\n\n```\n/org/gnome/mutter/experimental-features\n```\n\nThen run dconf update and restart the machine. This will permanently lock the option.\n\nAs of Mutter 47.0 it is possible to enable native fractional scaling as an experimental feature.\n\nEnable it by issuing:\n\n```\n$ gsettings set org.gnome.mutter experimental-features \"['scale-monitor-framebuffer', 'xwayland-native-scaling']\"\n```\n\nUbuntu has provided a patch[6] to scale with Randr in GNOME Settings. This patch is already provided by mutter-x11-scalingAUR. After installing it, you can set:\n\n```\n$ gsettings set org.gnome.mutter experimental-features \"['x11-randr-fractional-scaling']\"\n```\n\nThen open Settings > Devices > Displays to set the scale.\n\nYou can also manually achieve any non-integer scale factor by using a combination of GNOME's scaling-factor and xrandr. This combination keeps the TTF fonts properly scaled so that they do not become blurry if using xrandr alone. You specify zoom-in factor with gsettings and zoom-out factor with xrandr.\n\nFirst scale GNOME up to the minimum size which is too big. Usually \"2\" is already too big, otherwise try \"3\" etc. Then start scaling down by setting zoom-out factor with xrandr. First get the relevant output name, the examples below use eDP1. Start e.g. with zoom-out 1.25 times. If the UI is still too big, increase the scale factor; if it is too small decrease the scale factor.\n\n```\n$ xrandr --output eDP1 --scale 1.25x1.25\n```\n\nTo ensure that the settings persist across reboots, you may choose to use autorandr. Refer to this StackOverflow for more information.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nGNOME ignores X settings due to its xsettings Plugin in Gnome Settings Daemon, where DPI setting is hard coded. There is blog entry for recompiling Gnome Settings Daemon[dead link 2022-09-18 ⓘ]. In the source documentation there is another way mentioned to set X settings DPI:\n\nYou can use the gsettings, just make sure to read previous setting first and merge it. In just simply set it with this command:\n\n```\n$ gsettings set org.gnome.settings-daemon.plugins.xsettings overrides \"{'Xft/DPI': <153600>}\"\n```\n\nFrom README.xsettings\n\nNoting that variants must be specified in the usual way (wrapped in <>).\n\nNote also that DPI in the above example is expressed in 1024ths of an inch.\n\n"
    },
    {
      "title": "Text Scaling",
      "level": 4,
      "content": "Alternatively, or in addition to changing the display scaling, you can separately scale text. This can be done by navigating to Fonts > Scaling Factor in Gnome Tweaks, or using gsettings. Note that the text scaling factor need not be limited to whole integers, for example:\n\n```\n$ gsettings set org.gnome.desktop.interface text-scaling-factor 1.5\n```\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nAdjusting the text scaling as per the above only affects GTK+ elements of the GNOME desktop. This should cover everything on Wayland. However, those on an Xorg session may find that they need to make further adjustments on HiDPI environments, since the GNOME Shell UI (including the top bar, dock, application menus, etc.) relies separately on the St[dead link 2021-11-11 ⓘ] toolkit. Note that this is a long-standing issue to which a patch has been merged and available for Gnome Shell 3.35 onward. For older releases, Xorg users can resolve most of the Gnome shell scaling problems by manually editing the shell theme that they are currently using. The relevant CSS files are normally located at /usr/share/themes/YOUR-THEME/gnome-shell/gnome-shell.css. Users should increase all \"font-size\" elements in this file in proportion to their display scaling (doubling font sizes for 200% scaling, etc.) For example, the top of an edited CSS file for the Adapta shell theme might look like:\n\n```\nusr/share/themes/Adapta/gnome-shell/gnome-shell.css\n```\n\n```\nstage { font-size: 20pt; font-family: Roboto, Noto Sans, Sans-Serif; color: #263238; }\n```\n\nOnce these changes have been saved, activate them by switching to another theme (for example, using gnome-tweaks) and then reverting back again. The top bar, application menus, calendar, and other shell elements should now be correctly scaled.\n\nIn addition to editing the relevant shell theme's CSS file, users on Xorg may also wish to increase the title bar font at the top of open applications. This can be done through the dconf editor (org > gnome > desktop > wm > preferences :: titlebar-font). Note that the title-bar-uses-system-fonts option should also be turned off. Alternatively, use gsettings:\n\n```\n$ gsettings set org.gnome.desktop.wm.preferences titlebar-font 'Cantarell Bold 22' ## Change as needed\n$ gsettings set org.gnome.desktop.wm.preferences titlebar-uses-system-font false\n```\n\n"
    },
    {
      "title": "KDE Plasma",
      "level": 3,
      "content": "You can use Plasma's settings to fine tune font, icon, and widget scaling. This solution affects both Qt and GTK applications.\n\nTo adjust font, widget, and icon scaling together:\n\n1. System Settings > Display and Monitor > Display Configuration > Global Scale\n1. Drag the slider to the desired size\n1. Restart for the settings to take effect\n\nHowever, using X11 session, Plasma ignores the Qt scaling settings by default, which affects panels and other desktop elements. To make Plasma respect the Qt settings, set PLASMA_USE_QT_SCALING=1.\n\n"
    },
    {
      "title": "Cursor size",
      "level": 4,
      "content": "To adjust cursor size:\n\n1. System Settings > Appearance > Cursors > Size\n\n"
    },
    {
      "title": "Font scaling",
      "level": 4,
      "content": "To adjust only font scaling:\n\n1. System Settings > Appearance > Fonts\n1. Check \"Force fonts DPI\" and adjust the DPI level to the desired value. This setting should take effect immediately for newly started applications. You will have to logout and login for it to take effect on Plasma desktop.\n\n"
    },
    {
      "title": "Icon scaling",
      "level": 4,
      "content": "To adjust only icon scaling:\n\n1. System Settings > Appearance > Icons > Advanced\n1. Choose the desired icon size for each category listed. This should take effect immediately.\n\n"
    },
    {
      "title": "Panel scaling",
      "level": 4,
      "content": "To adjust only panel scaling:\n\n1. Right click the panel, select Enter Edit Mode, and manually adjust Panel height.\n\n"
    },
    {
      "title": "Xwayland",
      "level": 4,
      "content": "As of Plasma 5.26, the Xwayland scale method can be chosen at the bottom of the System Settings > Display and Monitor > Display Configuration page.\n\nIn \"Scaled by the system\" mode, the X application will be rendered at 1x and then magnified (scaled) by KDE. This works for all applications, but causes blurriness due to the magnification.\n\nIn \"Apply scaling themselves\" mode, the X application will have to render itself at the appropriate size. This will avoid blurriness, but applications which aren't HiDPI-aware will render themselves at 1x scale and therefore will appear small.\n\nSee this blog post for details.\n\n"
    },
    {
      "title": "Xfce",
      "level": 3,
      "content": "Xfce supports HiDPI scaling which can be enabled using the settings manager:\n\n1. Go to Settings Manager > Appearance > Settings > Window Scaling and select 2 as the scaling factor.\n1. Go to Settings Manager > Window Manager > Style and select Default-xhdpi theme.\n\nAlternatively, it is possible to do the same from command line using xfconf-query:\n\n```\n$ xfconf-query -c xsettings -p /Gdk/WindowScalingFactor -s 2\n$ xfconf-query -c xfwm4 -p /general/theme -s Default-xhdpi\n```\n\nAfter either of the above changes, fonts in some GTK applications may still not be scaled; you may additionally do the following (see #GDK 3 (GTK 3)):\n\n1. Go to Settings Manager > Appearance > Fonts > Custom DPI setting and change from 96 to 192\n1. Set the environment variable GDK_DPI_SCALE=0.5 to un-scale some fonts that would be scaled twice.\n\nThe steps above would set 2x scaled resolution for Xfce and other GTK 3 applications.\n\nScaling for Qt 5 applications should be set manually, see #Qt 5. Note that if you set a Custom DPI for fonts above, you likely need to set QT_FONT_DPI=96 to avoid double-scaling of fonts in Qt applications.\n\n"
    },
    {
      "title": "Cinnamon",
      "level": 3,
      "content": "Has good support out of the box.\n\n"
    },
    {
      "title": "Enlightenment",
      "level": 3,
      "content": "For E18, go to the E Setting panel. In Look > Scaling, you can control the UI scaling ratios. A ratio of 1.2 seems to work well for the native resolution of the MacBook Pro 15\" screen.\n\n"
    },
    {
      "title": "Sway",
      "level": 3,
      "content": "See Sway#HiDPI.\n\n"
    },
    {
      "title": "Hyprland",
      "level": 3,
      "content": "See Hyprland#Setting screen resolution.\n\n"
    },
    {
      "title": "X Resources",
      "level": 2,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nIf you are not using a desktop environment such as KDE, Xfce, or other that manipulates the X settings for you, you can set the desired DPI setting manually via the Xft.dpi variable in Xresources:\n\n```\n~/.Xresources\n```\n\n```\nXft.dpi: 192\n\n! These might also be useful depending on your monitor and personal preference:\nXft.autohint: 0\nXft.lcdfilter:  lcddefault\nXft.hintstyle:  hintfull\nXft.hinting: 1\nXft.antialias: 1\nXft.rgba: rgb\n```\n\nFor Xft.dpi, using integer multiples of 96 usually works best, e.g. 192 for 200% scaling.\n\nMake sure the settings are loaded properly when X starts, for instance in your ~/.xinitrc with xrdb -merge ~/.Xresources (see Xresources for more information).\n\nThis will make the font render properly in most toolkits and applications, it will however not affect things such as icon size! Setting Xft.dpi at the same time as toolkit scale (e.g. GDK_SCALE) may cause interface elements to be much larger than intended in some programs like firefox.\n\n"
    },
    {
      "title": "X Server",
      "level": 2,
      "content": "Some programs may still interpret the DPI given by the X server (most interpret X Resources, though, directly or indirectly). Older versions of i3 (before 2017) and Chromium (before 2017) used to do this.\n\nTo verify that the X Server has properly detected the physical dimensions of your monitor, use the xdpyinfo utility from the xorg-xdpyinfo package:\n\n```\n$ xdpyinfo | grep -B 2 resolution\n```\n\n```\nscreen #0:\n  dimensions:    3200x1800 pixels (423x238 millimeters)\n  resolution:    192x192 dots per inch\n```\n\nThis example uses inaccurate dimensions (423mm x 238mm, even though the Dell XPS 9530 has 346mm x 194mm) to have a clean multiple of 96 dpi, in this case 192 dpi. This tends to work better than using the correct DPI — Pango renders fonts crisper in i3 for example.\n\nIf the DPI displayed by xdpyinfo is not correct, see Xorg#Display size and DPI for how to fix it.\n\n"
    },
    {
      "title": "Qt 5",
      "level": 3,
      "content": "Since Qt 5.6, Qt 5 applications can be instructed to honor screen DPI by setting the QT_AUTO_SCREEN_SCALE_FACTOR environment variable. Qt 5.14 introduced a new environment variable QT_ENABLE_HIGHDPI_SCALING which replaces the QT_AUTO_SCREEN_SCALE_FACTOR variable. It is recommended to set both environment variables for maximum compatibility:\n\n```\n$ export QT_AUTO_SCREEN_SCALE_FACTOR=1\n$ export QT_ENABLE_HIGHDPI_SCALING=1\n```\n\nIf automatic detection of DPI does not produce the desired effect, scaling can be set manually per-screen (QT_SCREEN_SCALE_FACTORS/QT_ENABLE_HIGHDPI_SCALING) or globally (QT_SCALE_FACTOR). For more details see the Qt blog post or Qt developer documentation.\n\n- If you manually set the screen factor, it is important to set QT_AUTO_SCREEN_SCALE_FACTOR=0 and QT_ENABLE_HIGHDPI_SCALING=0 otherwise some applications which explicitly force high DPI enabling get scaled twice.\n- QT_SCALE_FACTOR scales fonts, but QT_SCREEN_SCALE_FACTORS may not scale fonts, depending on the application.\n- If you also set the font DPI manually in xrdb to support other toolkits, QT_SCALE_FACTORS will give you huge fonts.\n- If you have multiple screens of differing DPI ie: #Side display you may need to do QT_SCREEN_SCALE_FACTORS=\"2;2\"\n\nAn alternative is e.g.:\n\n```\n$ QT_FONT_DPI=96 clementine\n```\n\n"
    },
    {
      "title": "GDK 3 (GTK 3)",
      "level": 3,
      "content": "Setting the GDK scale (in X11, not Wayland) will scale the UI; however, it will not scale icons. If you are using a minimal window manager where you are setting the dpi via Xft.dpi, GDK should scale perfectly fine with it. In other cases, do the following:\n\nTo scale UI elements by an integer only factor:\n\n```\n$ export GDK_SCALE=2\n```\n\nGTK3 does not support fractional scaling currently, so fractional factors will be ignored. This environment variable is also ignored in mutter wayland sessions.\n\nGTK4 supports fractional scaling since 4.14 under Wayland.\n\nGDK_DPI_SCALE can be used to scale text only. To undo scaling of text, fractional scale can be used:\n\n```\n$ export GDK_DPI_SCALE=0.5\n```\n\nUnder GTK3/4 it not currently possible to scale icon sizes, unless the application explicitly implements a way to do so. See bug report #4528. If you need this feature, use Qt when possible.\n\n"
    },
    {
      "title": "GTK 2",
      "level": 3,
      "content": "Scaling of UI elements is not supported by the toolkit itself, however it is possible to generate a theme with elements pre-scaled for HiDPI display using themix-full-gitAUR.\n\n"
    },
    {
      "title": "Electron",
      "level": 3,
      "content": "Electron applications (e.g. slack-desktopAUR, signal-desktop, etc.) can be configured to use a custom scaling value by adding a --force-device-scale-factor flag to the .desktop file. This is normally located at /usr/share/applications/, and can normally be overridden on a per-user basis by copying it to ~/.local/share/applications/. The flag should be added to the line beginning with \"Exec=\". For example:\n\n```\n~/.local/share/applications/slack.desktop\n```\n\n```\nExec=env LD_PRELOAD=/usr/lib/libcurl.so.3 /usr/bin/slack --force-device-scale-factor=1.5 %U\n```\n\n"
    },
    {
      "title": "Elementary (EFL)",
      "level": 3,
      "content": "To scale UI elements by a factor of 1.5:\n\n```\nexport ELM_SCALE=1.5\n```\n\nFor more details see https://phab.enlightenment.org/w/elementary/[dead link 2024-10-12 ⓘ]\n\n"
    },
    {
      "title": "GNUstep",
      "level": 3,
      "content": "GNUstep applications that use its gui (AppKit) library accept a GSScaleFactor property in their defaults (STEP preferences). To define a scaling factor of 1.5 for all applications:\n\n```\ndefaults write NSGlobalDomain GSScaleFactor 1.5\n```\n\nNote that you must also disable font hinting by setting the value of GSFontHinting to 17, else text rendering will look broken when rendering long lines.\n\n```\ndefaults write NSGlobalDomain GSFontHinting 17\n```\n\nSome automatic detection was possible back in 2011, but the code responsible for the X11 backend was commented out thereafter.\n\n"
    },
    {
      "title": "FLTK",
      "level": 3,
      "content": "FLTK 1.3, the default FLTK version available in Arch Linux, does not support resolution scaling. Support will arrive when applications start using FLTK 1.4.\n\n"
    },
    {
      "title": "Lower the framebuffer resolution",
      "level": 4,
      "content": "Set a lower resolution for the framebuffer as explained in GRUB/Tips and tricks#Setting the framebuffer resolution.\n\n"
    },
    {
      "title": "Change GRUB font size",
      "level": 4,
      "content": "Find a ttf font that you like in /usr/share/fonts/.\n\nConvert the font to a format that GRUB can utilize:\n\n```\n# grub-mkfont -s 30 -o /boot/grubfont.pf2 /usr/share/fonts/FontFamily/FontName.ttf\n```\n\nEdit /etc/default/grub to set the new font as shown in GRUB/Tips and tricks#Background image and bitmap fonts:\n\n```\nGRUB_FONT=\"/boot/grubfont.pf2\"\n```\n\nFinally regenerate the main configuration file.\n\n"
    },
    {
      "title": "systemd-boot",
      "level": 3,
      "content": "Set a lower resolution for the console through console-mode as explained in systemd-boot#Loader configuration and loader.conf(5) § OPTIONS.\n\n"
    },
    {
      "title": "Applications",
      "level": 2,
      "content": "If you are running a Wayland session, but application is running via Xwayland (either because it does not support Wayland natively or because it uses X11 by default), you could still get blurry fonts and interface, even if the application supports HiDPI. See this bug report. See also Wayland#Detect Xwayland applications visually.\n\n"
    },
    {
      "title": "Firefox",
      "level": 4,
      "content": "Firefox should use the #GDK 3 (GTK 3) settings. However, the suggested GDK_SCALE suggestion does not consistently scale the entirety of Firefox, and does not work for fractional values (e.g., a factor of 158DPI/96DPI = 1.65 for a 1080p 14\" laptop). You may want to use GDK_DPI_SCALE instead. Another option, which will avoid Firefox-specific settings in many setups is to use the settings in #X Resources as Firefox should respect the Xft.dpi value defined there.\n\nTo override those, open Firefox advanced preferences page (about:config) and add and set parameter ui.textScaleFactor to 150 (or find the one that suits you better; 150 is a good choice for Retina screens). You will likely also need to edit the zoom level in general preferences to e.g. 120%. This does not consistently scale the entirety of Firefox: edit layout.css.devPixelsPerPx for that, but as of Firefox 103 it may not work as expected.\n\nIf Firefox is not scaling fonts, you may want to create userChrome.css and add appropriate styles to it. More information about userChrome.css at mozillaZine. Starting from Firefox 69 the userChrome.css and userContent.css files are not loaded by default unless preference is set by the user. Open Firefox advanced preferences page (about:config) and set parameter toolkit.legacyUserProfileCustomizations.stylesheets to True, then restart Firefox to apply the changes.\n\n```\n~/.mozilla/firefox/<profile>/chrome/userChrome.css\n```\n\n```\n@namespace url(\"https://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\");\n\n/* #tabbrowser-tabs, #navigator-toolbox, menuitem, menu, ... */\n* {\n    font-size: 15px !important;\n}\n\n/* exception for badge on adblocker */\n.toolbarbutton-badge {\n    font-size: 8px !important;\n}\n```\n\nIf you use a HiDPI monitor such as Retina display together with another monitor, you can use the ffreszoom add-on, which will adjust the page zoom if it detects you are using a large monitor (zoom level and threshold are configurable). Modifying the internal CSS DPI setting from an extension is currently unsupported [7].\n\n"
    },
    {
      "title": "Chromium / Google Chrome",
      "level": 4,
      "content": "Chromium should use the #GDK 3 (GTK 3) settings.\n\nTo override those, use the --force-device-scale-factor flag with a scaling value. This will scale all content and ui, including tab and font size. For example chromium --force-device-scale-factor=2.\n\nUsing this option, a scaling factor of 1 would be normal scaling. Floating point values can be used. To make the change permanent, for Chromium, you can add it to ~/.config/chromium-flags.conf:\n\n```\n~/.config/chromium-flags.conf\n```\n\n```\n--force-device-scale-factor=2\n```\n\nTo make this work for Chrome, add the same option to ~/.config/chrome-flags.conf instead.\n\nIf you use a HiDPI monitor such as Retina display together with another monitor, you can use the reszoom extension in order to automatically adjust the zoom level for the active screen.\n\nIf using Wayland session, you should enable native wayland support to avoid blurriness. See also Chromium#Incorrect HiDPI rendering.\n\n"
    },
    {
      "title": "Opera",
      "level": 4,
      "content": "Opera should use the #GDK 3 (GTK 3) settings.\n\nTo override those, use the --alt-high-dpi-setting=X command line option, where X is the desired DPI. For example, with --alt-high-dpi-setting=144 Opera will assume that DPI is 144. Newer versions of opera will auto detect the DPI using the font DPI setting (in KDE: the force font DPI setting.)\n\n"
    },
    {
      "title": "Gimp 2.10",
      "level": 3,
      "content": "To fix toolbar icon sizes, update Preferences > Interface > Icon Theme > Custom icon size to huge or other value.\n\nIf menu fonts are still too small you can update an existing theme by copying it from /usr/share/gimp/2.0/themes/ into ~/.config/GIMP/2.10/themes/ and changing gtk-font-name and font_name in gtkrc into something bigger like Sans 30. Then select the new theme from Preferences > Interface > Theme. When copying make sure to rename the new directory into something different from the original name (example Dark > DarkHighDPI).\n\nYou can also try using gimp-hidpi (installation instructions are outdated and refer to version 2.8, in Gimp 2.10 the theme should be installed into ~/.config/GIMP/2.10/themes/)\n\nOn the latest versions of gimp-develAUR, Wayland and HiDPI are both fully supported. Icons and text can be scaled from Preferences > Interface > Icon Theme/Display respectively.\n\n"
    },
    {
      "title": "Inkscape",
      "level": 3,
      "content": "To scale the icons to a \"usable\" size go to Preferences > Interface and set the icon size to Large or Larger[8][9].\n\n"
    },
    {
      "title": "AWT/Swing",
      "level": 4,
      "content": "Java applications using the AWT/Swing framework can be scaled by defining the sun.java2d.uiScale VM property when invoking java. The value can be an integer percentage value, or a float value. For example,\n\n```\njava -Dsun.java2d.uiScale=2 -jar some_swing_application.jar\njava -Dsun.java2d.uiScale=300% -jar some_swing_application.jar\n```\n\nSince Java 9 the GDK_SCALE environment variable is used to scale Swing applications accordingly.\n\nNote that at this point, Java AWT/Swing (up to including OpenJDK 13) only effectively supports integer values. A setting of -Dsun.java2d.uiScale=250% or GDK_SCALE=2.5 will be treated as if it were set to -Dsun.java2d.uiScale=2 resp. GDK_SCALE=2.\n\n"
    },
    {
      "title": "JavaFX",
      "level": 4,
      "content": "Java applications using JavaFX can be scaled by defining the glass.gtk.uiScale VM property when invoking java. The value can be an integer percentage value, an integer DPI value (where 96dpi represents a scale factor of 100%, and for example 192dpi represents a scale factor of 200%), or a float value. For example,\n\n```\njava -Dglass.gtk.uiScale=200% -jar some_jfx_application.jar\njava -Dglass.gtk.uiScale=192dpi -jar some_jfx_application.jar\njava -Dglass.gtk.uiScale=2.0 -jar some_jfx_application.jar\n```\n\nJavaFX perfectly well supports fractions. Using values like -Dglass.gtk.uiScale=250% or -Dglass.gtk.uiScale=2.5 will deliver the expected result.\n\n"
    },
    {
      "title": "Mixed AWT/Swing and JavaFX",
      "level": 4,
      "content": "Some Java applications mix JavaFX and AWT/Swing (via javafx.embed.swing.JFXPanel). In that case, the settings for AWT/Swing will also affect JavaFX, and setting -Dglass.gtk.uiScale will have no effect.\n\n"
    },
    {
      "title": "JetBrains IDEs",
      "level": 4,
      "content": "On Wayland, HiDPI with fractional scaling is experimentally supported since version 2024.2. The Wayland support preview can be enabled, by adding -Dawt.toolkit.name=WLToolkit to the VM options (Help > Edit custom VM options).\n\nJetBrains products (IntelliJ IDEA and other IDEs) support two HiDPI modes (JRE-managed and IDE-managed). The sequence for determining system scale factor is well documented at [10]:\n\n1. Java property – -Dsun.java2d.uiScale\n1. gsettings(1) – ubuntu.user-interface/scale-factor or org.gnome.desktop.interface/scaling-factor\n1. GDK_SCALE and GDK_DPI_SCALE\n1. Xresources – Xft.dpi\n1. 1.0\n\nFor troubleshooting, consult the \"Show HiDPI Info\" dialog via search everywhere \"Shift Shift\".\n\nWhen using per-monitor scaling, an issue might occur where IntelliJ fails to recognize the real, original monitor resolution. To remediate this problem some people have success by adding the -Dsun.java2d.uiScale.enabled=true option to the ide_name.vmoptions file (Help > Edit custom VM options).\n\nIf this does not work, the experimental GTK option scale-monitor-framebuffer might be enabled on Wayland (see above) and the Wayland support preview might be disabled (see above). Currently JetBrains products run on Xwayland and thus have no full native Wayland support yet. This makes the rendering in JetBrains products incompatible with the monitor scaling framebuffer. Disabling the framebuffer thus might solve blurry font/rendering issues for JB products, but alas results in disabled fractional scaling. Another options is to enable the Wayland support preview.\n\n"
    },
    {
      "title": "Maple",
      "level": 4,
      "content": "Maple can be scaled for HiDPI monitors using the AWT/Swing solution. But it has to be added inside your Maple installation directory to maple-directory/bin/maple to the JVM_OPTIONS:\n\n```\nmaple-directory/bin/maple\n```\n\n```\n...\nJVM_OPTIONS=\"-Dsun.java2d.uiScale=2 ...\"\n...\n```\n\nAlternatively, the GDK_SCALE environment variable can be used to start the application scaled:\n\n```\n$ GDK_SCALE=2 maple-directory/bin/xmaple %f\n```\n\n"
    },
    {
      "title": "MATLAB",
      "level": 3,
      "content": "Recent versions (R2017b) of MATLAB allow to set the scale factor[11]:\n\n```\n>> s = settings;s.matlab.desktop.DisplayScaleFactor\n>> s.matlab.desktop.DisplayScaleFactor.PersonalValue = 2\n```\n\nThe settings take effect after MATLAB is restarted.\n\nThis can become tedious if you need to change the scaling frequently. To simplify this, consider using the following script:\n\n```\n~/bin/matlab-scale\n```\n\n```\n#!/bin/sh\nexec matlab -r \"s = settings;s.matlab.desktop.DisplayScaleFactor.PersonalValue=$1;quit\" -nodesktop -nosplash\n```\n\nTo change the display scaling to 3:\n\n```\n$ matlab-scale 3\n```\n\n"
    },
    {
      "title": "Mono applications",
      "level": 3,
      "content": "According to [12][dead link 2023-04-23 ⓘ], Mono applications should be scalable like GTK 3 applications. The precise method depends on the GUI library: GtkSharp obviouslys points back to Gtk, while the usual Windows Forms (libgdiplus) simply detects Xft settings.\n\n"
    },
    {
      "title": "NetBeans",
      "level": 3,
      "content": "NetBeans allows the font size of its interface to be controlled using the --fontsize parameter during startup. To make this change permanent edit the /usr/share/netbeans/etc/netbeans.conf file and append the --fontsize parameter to the netbeans_default_options property.[13]\n\nThe editor fontsize can be controlled from Tools > Option > Fonts & Colors.\n\nThe output window fontsize can be controlled from Tools > Options > Miscellaneous > Output\n\n"
    },
    {
      "title": "OBS Studio",
      "level": 3,
      "content": "OBS 29 supports HiDPI setups without any extra configuration.\n\nFor older versions of OBS, the recommendation was to set the environment variable QT_AUTO_SCREEN_SCALE_FACTOR=0 to disable Qt’s hi-dpi migration mode and install the Yami theme. Do not use the Yami theme with OBS 29 or newer, as it is not necessary anymore and will cause buggy behavior.\n\n"
    },
    {
      "title": "Rofi",
      "level": 3,
      "content": "Rofi defaults to 96 DPI and relies on its own configuration only\n\n```\n~/.config/rofi/config.rasi\n```\n\n```\nconfiguration {\n    …\n    dpi: 150;\n    …\n}\n```\n\n"
    },
    {
      "title": "Skype",
      "level": 3,
      "content": "Skype for Linux (skypeforlinux-binAUR package) uses #GDK 3 (GTK 3).\n\n"
    },
    {
      "title": "Spotify",
      "level": 3,
      "content": "You can change scale factor by simple Ctrl++ for zoom in, Ctrl+- for zoom out and Ctrl+0 for default scale. Scaling setting will be saved in ~/.config/spotify/Users/YOUR-SPOTIFY-USER-NAME/prefs, you may have to create this file by yourself:\n\n```\n~/.config/spotify/Users/YOUR-SPOTIFY-USER-NAME/prefs\n```\n\n```\napp.browser.zoom-level=100\n```\n\nAlso Spotify can be launched with a custom scaling factor which will be multiplied with setting specified in ~/.config/spotify/Users/YOUR-SPOTIFY-USER-NAME/prefs, for example\n\n```\n$ spotify --force-device-scale-factor=1.5\n```\n\n"
    },
    {
      "title": "Official HiDPI support",
      "level": 4,
      "content": "- Starting on 25 of January 2018 in the beta program there is actual support for HiDPI and it should be automatically detected.\n- Steam > Settings > Interface, check Enlarge text and icons based on monitor size (restart required)\n- If it is not automatically detected, use GDK_SCALE=2 to set the desired scale factor.\n- If the above fails, use steam -forcedesktopscaling 2 or set STEAM_FORCE_DESKTOPUI_SCALING=2.0. [14] As of the June 2023 UI overhaul, this parameter also supports non-integer scale factors, such as 1.25.\n\n"
    },
    {
      "title": "Unofficial",
      "level": 4,
      "content": "The HiDPI-Steam-Skin can be installed to increase the font size of the interface. While not perfect, it does improve usability.\n\nMetroSkin Unofficial Patch also helps with HiDPI on Steam with Linux.\n\n"
    },
    {
      "title": "Sublime Text 3",
      "level": 3,
      "content": "Sublime Text 3 has full support for display scaling. Go to Preferences > Settings > User Settings and add \"ui_scale\": 2.0 to your settings.\n\n"
    },
    {
      "title": "Thunderbird",
      "level": 3,
      "content": "See #Firefox. To access about:config, go to Edit > Preferences > Advanced >Config editor.\n\n"
    },
    {
      "title": "VirtualBox",
      "level": 3,
      "content": "VirtualBox also applies the system-wide scaling to the virtual monitor, which reduces the maximum resolution inside VMs by your scaling factor (see [15]).\n\nThis can be worked around by calculating the inverse of your scaling factor and manually setting this new scaling factor for the VirtualBox execution, e.g.\n\n```\n$ QT_SCALE_FACTOR=0.5 VirtualBoxVM --startvm vm-name\n```\n\n"
    },
    {
      "title": "VMware",
      "level": 3,
      "content": "Text in the VMware application is rendered at an appropriate size following the system configuration, but icons are small and UI elements have little padding between them.\n\nAs described in #GDK 3 (GTK 3), you can use GDK_SCALE to further scale up the entire UI (including icons & padding) and then use GDK_DPI_SCALE to scale only the text back down to a reasonable size.\n\nFor example, to get a final 2x scale factor:\n\n```\n$ GDK_SCALE=2 GDK_DPI_SCALE=0.5 vmware\n```\n\n"
    },
    {
      "title": "Wine applications",
      "level": 3,
      "content": "Run\n\n```\n$ winecfg\n```\n\nand change the \"dpi\" setting found in the \"Graphics\" tab. This only affects the font size.\n\n"
    },
    {
      "title": "Zathura document viewer",
      "level": 3,
      "content": "No modifications required for document viewing.\n\nUI text scaling is specified via configuration file (note that \"font\" is a girara option):\n\n```\nset font \"monospace normal 20\"\n```\n\n"
    },
    {
      "title": "Zoom",
      "level": 3,
      "content": "Set the scaleFactor variable in ~/.config/zoomus.conf.\n\nFor the Flatpak version, set the environment variable QT_SCALE_FACTOR (e.g. to 0.5 [16]). This can be easily done with Flatseal, if using a GUI tool is preferred.\n\n"
    },
    {
      "title": "Gazebo",
      "level": 3,
      "content": "Gazebo only renders an upper left of a view instead of the whole view. To fix this a Qt environment variable must be set.\n\nTo run Gazebo:\n\n```\n$ QT_SCREEN_SCALE_FACTORS=[1.0] gazebo\n```\n\nTo run a ROS simulation:\n\n```\n$ TURTLEBOT3_MODEL=burger QT_SCREEN_SCALE_FACTORS=[1.0] roslaunch turtlebot3_gazebo turtlebot3_world.launch\n```\n\nMaking an alias such as gazebo=\"QT_SCREEN_SCALE_FACTORS=[1.0] gazebo\" works for the first case but not for the second.\n\n"
    },
    {
      "title": "Fcitx",
      "level": 3,
      "content": "Fcitx preedit FontSize can be changed in ~/.config/fcitx/conf/fcitx-classic-ui.config.\n\nFor Fcitx5, set Font with a size inside double quotes in ~/.config/fcitx5/conf/classicui.conf.\n\n"
    },
    {
      "title": "Synthesizer V Studio Pro",
      "level": 3,
      "content": "Synthesizer V Studio Pro has support for UI scaling. It can setup the scaling automatically, but if it fails the scale can be adjusted with option --with-scaling:\n\n```\n$ synthv-studio --with-scaling 2.0\n```\n\n"
    },
    {
      "title": "Unsupported applications, via a network layer",
      "level": 3,
      "content": "xpra includes a run_scaled script which can be used to scale applications.\n\nAnother approach is to run the application full screen and without decoration in its own VNC desktop. Then scale the viewer. With vncdesk-gitAUR you can set up a desktop per application, then start server and client with a simple command such as vncdesk 2.\n\nx11vnc has an experimental option -appshare, which opens one viewer per application window. Perhaps something could be hacked up with that.\n\n"
    },
    {
      "title": "Unsupported applications, via Weston",
      "level": 3,
      "content": "There is a no-network, potentially GPU-accelerated solution to scale old/unsupported applications via Weston. The basic example goes as:\n\n```\n$ weston --xwayland --socket=testscale --scale=2\n$ DISPLAY=:1 WAYLAND_DISPLAY=testscale your_app\n```\n\nNote 1: You can make it look nicer. Create a dedicated weston.ini and use it with weston --config:\n\n```\n[core]\nidle-time=0\n[shell]\npanel-position=none\nlocking=false\n```\n\nNote 2: Adjust your DISPLAY according to your system, :1 is simply the default that comes after the main :0. Check files created in /tmp/.X11-unix to do that.\n\nNote 3: If you want a separate window per each scaled app, adjust the --socket parameter to weston and WAYLAND_DISPLAY + DISPLAY for each started app. Scripting that is not easy because Xorg display has to be a small-ish integer, but you can create a semi-safe script to infer it.\n\nNote 4: It is not fully tested yet whether weston and xwayland truly off-board the heavy parts to the GPU. At least weston advertises to do so, but no tests on that were done yet. Please edit if you make the GPU usage tests.\n\n"
    },
    {
      "title": "Multiple displays",
      "level": 2,
      "content": "The HiDPI setting applies to the whole desktop, so non-HiDPI external displays show everything too large. However, note that setting different scaling factors for different monitors is already supported in Wayland.\n\n"
    },
    {
      "title": "Side display",
      "level": 3,
      "content": "One workaround is to use xrandr's scale option. To have a non-HiDPI monitor (on DP1) right of an internal HiDPI display (eDP1), one could run:\n\n```\n$ xrandr --output eDP-1 --auto --output DP-1 --auto --scale 2x2 --right-of eDP-1\n```\n\nWhen extending above the internal display, you may see part of the internal display on the external monitor. In that case, specify the position manually.\n\nYou may adjust the sharpness parameter on your monitor settings to adjust the blur level introduced with scaling.\n\n- Above solution with --scale 2x2 does not work on some NVIDIA cards. No solution is currently available. [17] A potential workaround exists with configuring ForceFullCompositionPipeline=On on the CurrentMetaMode via nvidia-settings. For more info see [18].\n- If you are using the modesetting driver you will get mouse flickering. This can be solved by scaling your non-scaled screen by 0.9999x0.9999.\n\n"
    },
    {
      "title": "Multiple external monitors",
      "level": 3,
      "content": "There might be some problems in scaling more than one external monitors which have lower dpi than the built-in HiDPI display. In that case, you may want to try downscaling the HiDPI display instead, with e.g.\n\n```\n$ xrandr --output eDP1 --scale 0.5x0.5 --output DP2 --right-of eDP1 --output HDMI1 --right-of DP2\n```\n\nIn addition, when you downscale the HiDPI display, the font on the HiDPI display will be slightly blurry, but it is a different kind of blurriness compared with the one introduced by upscaling the external displays. You may compare and see which kind of blurriness is less problematic for you.\n\n"
    },
    {
      "title": "Mirroring",
      "level": 3,
      "content": "If all you want is to mirror (\"unify\") displays, this is easy as well:\n\nWith AxB your native HiDPI resolution (for ex 3200x1800) and CxD your external screen resolution (e.g. 1920x1200)\n\n```\n$ xrandr --output HDMI --scale [A/C]x[B/D]\n```\n\nIn this example which is QHD (3200/1920 = 1.66 and 1800/1200 = 1.5)\n\n```\n$ xrandr --output HDMI --scale 1.66x1.5\n```\n\nFor UHD to 1080p (3840/1920=2 2160/1080=2)\n\n```\n$ xrandr --output HDMI --scale 2x2\n```\n\nYou may adjust the sharpness parameter on your monitor settings to adjust the blur level introduced with scaling.\n\n"
    },
    {
      "title": "Tools",
      "level": 3,
      "content": "There are several tools which automate the commands described above.\n\n- This script extend a non-HiDPI external display above a HiDPI internal display.\n- xrandr-extend.\n- xlayoutdisplayAUR is a CLI front end for xrandr which detects and sets correct DPI: README\n\n"
    },
    {
      "title": "In-kernel fonts",
      "level": 3,
      "content": "The Linux console changes the font to TER16x32 (based on ter-i32b from terminus-font[19]) based on the vertical and horizontal pixel count of the display[20] regardless of its physical size. If your monitor is not recognised as HiDPI, the default font can be changed. In that case, specify fbcon=font:TER16x32 in the kernel command line. In Linux 6.8 and before, the limit of console font is 32*32. From Linux 6.9, the maximum size of console font is increased to 64(width)*128(height) [21].\n\n"
    },
    {
      "title": "Fonts outside the kernel (tty)",
      "level": 3,
      "content": "The largest fonts present in the kbd package are latarcyrheb-sun32 and solar24x32. Other packages like terminus-font contain further alternatives, such as ter-132n (normal) and ter-132b (bold). See Linux console#Fonts for configuration details and Linux console#Persistent configuration in particular for applying the font setting during the early userspace boot sequence.\n\nAfter changing the font, it is often garbled and unreadable when changing to other virtual consoles (tty2–6). To fix this you can force specific mode for KMS, such as video=2560x1600@60 (substitute in the native resolution of your HiDPI display), and reboot. Using small resolutions will make the text look bigger, but also pixelated.\n\nUsers booting through UEFI may experience the console and boot loader being constrained to a low resolution despite correct KMS settings being set. This can be caused by legacy/BIOS boot being enabled in UEFI settings. Disabling legacy boot to bypass the compatibility layer should allow the system to boot at the correct resolution.\n\n"
    },
    {
      "title": "Modern HiDPI support (kmscon)",
      "level": 3,
      "content": "For real HiDPI support, see KMSCON instead of changing the font size in the tty.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Ultra HD 4K Linux Graphics Card Testing (Nov 2013)\n- Understanding pixel density\n- Mixed DPI and the X Window System\n\n"
    }
  ]
}