{
  "title": "Flathub",
  "url": "https://wiki.archlinux.org/title/Flathub",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Snapd\n- bubblewrap\n\nFrom the project README: \"Flatpak is a system for building, distributing and running sandboxed desktop applications on Linux.\"\n\nFrom flatpak(1):\n\n- Many Flatpak applications available on flathub are not effectively sandboxed by default [1]. Do not rely on the provided process isolation without first reviewing the related flatpak permission manifest for common sandbox escape issues.\n- Running untrusted code is never safe; sandboxing cannot change this.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the flatpak package. If you want to build flatpaks, install flatpak-builder too.\n\n"
    },
    {
      "title": "Desktop integration",
      "level": 3,
      "content": "For flatpak applications to interact with your desktop (i.e. allow applications to open URLs, share your screen and more), make sure to set up the xdg-desktop-portal. Depending on the implementation for your desktop, there is a confirmation dialog before the application is able to access some portals.\n\n"
    },
    {
      "title": "Application management",
      "level": 3,
      "content": "- Discover — KDE frontend to Flatpak which helps you find and install applications, games, and tools. Part of plasma.\n\n- GNOME Software — GNOME frontend to Flatpak which lets you install and update applications and system extensions. Part of gnome.\n\n"
    },
    {
      "title": "Permission management",
      "level": 3,
      "content": "- Flatpak Permissions Management KCM — KDE Configuration Module that allows changing what permissions have been granted to installed Flatpak applications. Part of plasma.\n\n- Flatseal — Graphical utility to review and modify permissions from your Flatpak applications.\n\n- malcontent (Parental Controls) — Implements support for restricting the type of content accessible to non-administrator accounts. Part of gnome.\n\n"
    },
    {
      "title": "Add a repository",
      "level": 3,
      "content": "To add a remote flatpak repository do:\n\n```\n$ flatpak remote-add name location\n```\n\nwhere name is the name for the new remote, and location is the path or URL for the repository.\n\nThe installation of flatpak will, by default, add the official Flathub repository as a system-wide installation. To add the official repository with a per-user configuration:\n\n```\n$ flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo\n```\n\n"
    },
    {
      "title": "Delete a repository",
      "level": 3,
      "content": "To delete a remote flatpak repository do:\n\n```\n$ flatpak remote-delete name\n```\n\nwhere name is the name of the remote repository to be deleted.\n\n"
    },
    {
      "title": "List repositories",
      "level": 3,
      "content": "To list all the added repositories do:\n\n```\n$ flatpak remotes\n```\n\n"
    },
    {
      "title": "Search for a remote runtime or application",
      "level": 3,
      "content": "Before being able to search for a runtime or application in a newly added remote repository, we need to retrieve the appstream data for it:\n\n```\n$ flatpak update\n```\n\n```\nLooking for updates...\nUpdating appstream data for remote name\n```\n\nThen we can proceed to search for a package with flatpak search packagename, e.g. to look for the package libreoffice with the flathub remote configured:\n\n```\n$ flatpak search libreoffice\n```\n\n```\nApplication ID              Version Branch Remotes Description                       \norg.libreoffice.LibreOffice         stable flathub The LibreOffice productivity suite\n```\n\n"
    },
    {
      "title": "List all available runtimes and applications",
      "level": 3,
      "content": "To list all available runtimes and applications in a remote repository named remote do:\n\n```\n$ flatpak remote-ls remote\n```\n\n"
    },
    {
      "title": "Install a runtime or application",
      "level": 3,
      "content": "To install a runtime or application do:\n\n```\n$ flatpak install remote name\n```\n\nwhere remote is the name of the remote repository, and name is the name of the application or runtime to install.\n\n"
    },
    {
      "title": "List installed runtimes and applications",
      "level": 3,
      "content": "To list installed runtimes and applications do:\n\n```\n$ flatpak list\n```\n\n"
    },
    {
      "title": "Run applications",
      "level": 3,
      "content": "Binaries are available in /var/lib/flatpak/exports/bin, which is automatically added to $PATH by /etc/profile.d/flatpak-bindir.sh. You may have to re-login to apply the change.\n\nFlatpak applications can also be run with the command line:\n\n```\n$ flatpak run name\n```\n\n"
    },
    {
      "title": "Update a runtime or application",
      "level": 3,
      "content": "List runtimes and applications that have updates available:\n\n```\n$ flatpak remote-ls --updates\n```\n\nTo update a runtime or application named name do:\n\n```\n$ flatpak update name\n```\n\nTo update all applications and runtimes:\n\n```\n$ flatpak update\n```\n\n"
    },
    {
      "title": "Automatic updates via systemd",
      "level": 4,
      "content": "To update your system runtimes and applications automatically, create the following files:\n\n```\n/etc/systemd/system/flatpak-update.service\n```\n\n```\n[Unit]\nDescription=Update Flatpak\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/flatpak update --noninteractive --assumeyes\n\n[Install]\nWantedBy=multi-user.target\n```\n\n```\n/etc/systemd/system/flatpak-update.timer\n```\n\n```\n[Unit]\nDescription=Update Flatpak\n\n[Timer]\nOnBootSec=2m\nOnActiveSec=2m\nOnUnitInactiveSec=24h\nOnUnitActiveSec=24h\nAccuracySec=1h\nRandomizedDelaySec=10m\n\n[Install]\nWantedBy=timers.target\n```\n\nAfterwards, do a daemon-reload and enable/start the flatpak-update.timer unit.\n\n- This guide is for system flatpak installations which are the default in flatpak. For user flatpak installations: Create the above files in the /etc/systemd/user/ directory. Add the --user flag in ExecStart line in flatpak-update.service. Run the systemctl commands with the --user flag.\n\n- Create the above files in the /etc/systemd/user/ directory.\n- Add the --user flag in ExecStart line in flatpak-update.service.\n- Run the systemctl commands with the --user flag.\n\n"
    },
    {
      "title": "Uninstall a runtime or application",
      "level": 3,
      "content": "To uninstall a runtime or application named name do:\n\n```\n$ flatpak uninstall name\n```\n\nTo delete app data from ~/.var/app and from the permission store while uninstalling, use:\n\n```\n$ flatpak uninstall --delete-data name\n```\n\n"
    },
    {
      "title": "Downgrade a runtime or application",
      "level": 3,
      "content": "To downgrade a runtime or application, first look for the associated commit ID:\n\n```\n$ flatpak remote-info --log remote name\n```\n\nWhere remote is the repository (such as flathub), and name is the name of the application or runtime. Then, deploy the commit:\n\n```\n$ flatpak update --commit=commit name\n```\n\nwhere commit is the commit for the desired version, and name is as before.\n\nThis procedure can also be used to selectively upgrade a package to a desired version that is not the latest version.\n\nTo exclude flatpak update from updating this package, see #Prevent updates to a runtime or application.\n\n"
    },
    {
      "title": "Prevent updates to a runtime or application",
      "level": 3,
      "content": "To prevent automatic and manual updates to a runtime or application, use the flatpak mask command:\n\n```\n$ flatpak mask name\n```\n\nThis also prevents selective upgrades and downgrades.\n\nTo reverse the mask and re-enable updates, use flatpak mask --remove:\n\n```\n$ flatpak mask --remove name\n```\n\n"
    },
    {
      "title": "Add Flatpak .desktop files to your menu",
      "level": 3,
      "content": "Flatpak expects window managers to respect the XDG_DATA_DIRS environment variable to discover applications. This variable is set by the script /etc/profile.d/flatpak.sh. Updating the environment may require restarting the session. If the launcher does not support XDG_DATA_DIRS, you can edit the list of directories scanned and add these to it:\n\n```\n~/.local/share/flatpak/exports/share/applications\n/var/lib/flatpak/exports/share/applications\n```\n\nThis is known to be necessary in Awesome.\n\n"
    },
    {
      "title": "View sandbox permissions of application",
      "level": 3,
      "content": "Flatpak applications come with predefined sandbox rules which define the resources and file system paths the application is allowed to access. To view the specific application permissions do:\n\n```\n$ flatpak info --show-permissions name\n```\n\nThe reference of the sandbox permission names can be found on official flatpak documentation.\n\n"
    },
    {
      "title": "Override sandbox permissions of applications",
      "level": 3,
      "content": "If you find the predefined permissions of the application too lax or too restrictive you can change to anything you want using flatpak override command. For example:\n\n```\n$ flatpak override --nofilesystem=home name\n```\n\nThis will prevent the application access to your home folder.\n\nEvery type of permission, such as device, filesystem or socket, has a command line option that allows that particular permission and a separate option that denies permission. For example, in case of device access --device=device_name allows access, --nodevice=device_name denies the permission to access device.\n\nFor all permission types commands consult the manual page: flatpak-override(1)\n\nPermission overrides can be reset to defaults with command:\n\n```\n$ flatpak override --reset name\n```\n\nFlatseal is a GUI permissions manager which offers simple point-and-click permissions operations. In KDE Plasma, Flatpak Permissions Management KCM provides a similar GUI for the system settings application: System Settings > Applications > Flatpak Permission Settings.\n\n"
    },
    {
      "title": "Creating a custom base runtime",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n- You may want to use an untrusted, unprivileged user account for bundling untrusted software because the software is not sandboxed during app and runtime creation.\n- When distributing bundles to others, you may be legally obliged to provide the source code of some of the bundled software upon request. You may want to use ABS to build these packages from source.\n\nYou can create a custom Arch-based base runtime and base SDK for Flatpak using pacman. You can then use it for building and packaging applications. This is an alternative for personal use to the default org.freedesktop.BasePlatform and org.freedesktop.BaseSdk runtimes.\n\nIn addition to flatpak, you need to have installed fakeroot and for pacman hooks support also fakechroot.\n\nFirst, start by creating a directory for building the runtime and possibly applications.\n\n```\n$ mkdir myflatpakbuilddir\n$ cd myflatpakbuilddir\n```\n\nYou can then prepare a directory for building the runtime base platform. The files subdirectory will contain what will later be the /usr directory in the sandbox. Therefore you will need to create symbolic links so the default /usr/share etc. from Arch can still be accessed at the usual path.\n\n```\n$ mkdir -p myruntime/files/var/lib/pacman\n$ touch myruntime/files/.ref\n$ ln -s /usr/usr/share myruntime/files/share\n$ ln -s /usr/usr/include myruntime/files/include\n$ ln -s /usr/usr/local myruntime/files/local\n```\n\nMake your host OS fonts available to the Arch runtime:\n\n```\n$ mkdir -p myruntime/files/usr/share/fonts\n$ ln -s /run/host/fonts myruntime/files/usr/share/fonts/flatpakhostfonts\n```\n\nYou need and may want to adapt your pacman.conf before installing packages to the runtime. Copy /etc/pacman.conf to your build directory and then make the following changes:\n\n- Remove the CheckSpace option so pacman will not complain about errors finding the root filesystem for checking disk space.\n- Remove any undesired custom repositories and IgnorePkg, IgnoreGroup, NoUpgrade and NoExtract settings that are needed only for the host system.\n\nNow install the packages for the runtime.\n\n```\n$ fakechroot fakeroot pacman -Syu --root myruntime/files --dbpath myruntime/files/var/lib/pacman --config pacman.conf base\n$ mv pacman.conf myruntime/files/etc/pacman.conf\n```\n\nSet up the locales to be used by editing myruntime/files/etc/locale.gen. Then regenerate the runtime’s locales.\n\n```\n$ fakechroot chroot myruntime/files locale-gen\n```\n\nThe base SDK can be created from the base runtime with added applications needed for building packages and running pacman.\n\n```\n$ cp -r myruntime mysdk\n$ fakechroot fakeroot pacman -S --root mysdk/files --dbpath mysdk/files/var/lib/pacman --config mysdk/files/etc/pacman.conf base-devel fakeroot fakechroot --needed\n```\n\nInsert metadata about runtime and SDK.\n\n```\nmyruntime/metadata\n```\n\n```\n[Runtime]\nname=org.mydomain.BasePlatform\nruntime=org.mydomain.BasePlatform/x86_64/2016-06-26\nsdk=org.mydomain.BaseSdk/x86_64/2016-06-26\n```\n\n```\nmysdk/metadata\n```\n\n```\n[Runtime]\nname=org.mydomain.BaseSdk\nruntime=org.mydomain.BasePlatform/x86_64/2016-06-26\nsdk=org.mydomain.BaseSdk/x86_64/2016-06-26\n```\n\nAdd base runtime and SDK to a local repository in the current directory. You may want to give them appropriate commit messages such as “My Arch base runtime” and “My Arch base SDK”.\n\n```\n$ ostree init --mode archive-z2 --repo=.\n$ EDITOR=\"nano -w\" ostree commit -b runtime/org.mydomain.BasePlatform/x86_64/2016-06-26 --tree=dir=myruntime\n$ EDITOR=\"nano -w\" ostree commit -b runtime/org.mydomain.BaseSdk/x86_64/2016-06-26 --tree=dir=mysdk\n$ ostree summary -u\n```\n\nInstall the runtime and SDK.\n\n```\n$ flatpak remote-add --user --no-gpg-verify myarchos file://$(pwd)\n$ flatpak install --user myarchos org.mydomain.BasePlatform 2016-06-26\n$ flatpak install --user myarchos org.mydomain.BaseSdk 2016-06-26\n```\n\n"
    },
    {
      "title": "Creating apps with pacman",
      "level": 3,
      "content": "As an alternative to building applications the usual way, we can use pacman to create a containerized version of the regular Arch packages. Note that /usr is read-only when creating apps, so we can not use Arch’s packages when building an app. To create a real app with pacman, we can either\n\n- use pacman to create a runtime containing all dependencies\n- and compile the app ourselves as usual or perhaps using pacman with a custom PKGBUILD tailored to Flatpak which uses --prefix=/app for the configure script,\n\nor we can\n\n- use pacman to create a runtime containing the app installed with pacman\n- and create a dummy app to launch it.\n\nFor doing the latter, first create a runtime using pacman such as this one for gedit. The runtime is first initialized and prepared for use with pacman.\n\n```\n$ flatpak build-init -w geditruntime org.mydomain.geditruntime org.mydomain.BaseSdk org.mydomain.BasePlatform 2016-06-26\n$ flatpak build geditruntime sed -i \"s/^#Server/Server/g\" /etc/pacman.d/mirrorlist\n$ flatpak build geditruntime ln -s /usr/var/lib /var/lib\n$ flatpak build geditruntime fakeroot pacman-key --init\n$ flatpak build geditruntime fakeroot pacman-key --populate\n```\n\nThen the package is installed. The host’s network connection must be made available to pacman.\n\n```\n$ flatpak build --share=network geditruntime fakechroot fakeroot pacman --root /usr -S gedit\n```\n\nYou can test the installation before finishing the runtime (without proper sandboxing).\n\n```\n$ flatpak build --socket=x11 geditruntime gedit\n```\n\nNow finish building the runtime and export it to a new local repository. pacman’s GnuPG keys have permissions that may interfere and need to be removed first.\n\n```\n$ flatpak build geditruntime rm -r /etc/pacman.d/gnupg\n$ flatpak build-finish geditruntime\n$ sed -i \"s/\\[Application\\]/\\[Runtime\\]/;s/runtime=org.mydomain.BasePlatform/runtime=org.mydomain.geditruntime/\" geditruntime/metadata\n$ flatpak build-export -r geditrepo geditruntime\n```\n\nThen create a dummy app.\n\n```\n$ flatpak build-init geditapp org.gnome.gedit org.mydomain.BaseSdk org.mydomain.geditruntime\n```\n\nNow finish the dummy app. You can fine-tune the app’s access permissions when sandboxed by giving additional options when finishing the build. For possible options see the Flatpak documentation and the GNOME manifest files. Alternatively, adapt geditapp/metadata to your needs after finishing the build but before exporting. When the metadata file is complete, export the app to the repository.\n\n```\n$ flatpak build-finish geditapp --socket=x11 [possibly other options] --command=gedit\n$ flatpak build-export geditrepo geditapp\n```\n\nInstall it along with the runtime.\n\n```\n$ flatpak --user remote-add --no-gpg-verify geditrepo geditrepo\n$ flatpak install --user geditrepo org.mydomain.geditruntime\n$ flatpak install --user geditrepo org.gnome.gedit\n$ flatpak run org.gnome.gedit\n```\n\n"
    },
    {
      "title": "Flatpak does not run on the linux-hardened kernel",
      "level": 3,
      "content": "The linux-hardened kernel sets kernel.unprivileged_userns_clone to 0, so only privileged users can create new user namespaces.\n\nOne method to fix this is to install bubblewrap-suid. This package provides a version of bwrap(1) with the setuid bit enabled, allowing bubblewrap elevate itself and create new namespaces.\n\nAlternatively, set kernel.unprivileged_userns_clone to 1 using sysctl(8), allowing unprivileged users to create new user namespaces:\n\n```\n# sysctl kernel.unprivileged_userns_clone=1\n```\n\nTo make this change persist across reboots, add a configuration file to sysctl.d(5):\n\n```\n/etc/sysctl.d/flatpak.conf\n```\n\n```\nkernel.unprivileged_userns_clone=1\n```\n\nFor more information, see the note in Bubblewrap#Installation.\n\n"
    },
    {
      "title": "Failed to connect to Wayland display",
      "level": 3,
      "content": "If the application doesn't properly open and you get messages such as Failed to connect to Wayland display: No such file or directory on flatpak run: This may be because some other setting such as ELECTRON_OZONE_PLATFORM_HINT=\"auto\" makes the Flatpak application choose Wayland while access to Wayland isn't whitelisted for this application.\n\nThis can be fixed by whitelisting access to socket=wayland with e.g. Flatseal.\n\n"
    },
    {
      "title": "xdg-desktop-portal is failing to start",
      "level": 3,
      "content": "If you are starting X with manually-configured run commands, ensure you are including all essential components of the reference `xinitrc`. One of which sources a script which runs an update of the environment used for D-Bus session services.\n\n```\nsystemctl --user import-environment DISPLAY XAUTHORITY\nif command -v dbus-update-activation-environment >/dev/null 2>&1; then\n   dbus-update-activation-environment DISPLAY XAUTHORITY\nfi\n```\n\n"
    },
    {
      "title": "Flatpak applications not picking up the default system theme",
      "level": 3,
      "content": "There is no ideal way to apply system themes in flatpak apps as mentioned in the flatpak documentation [2] [3]. The easiest solution is using themes that are available in Flathub. However there is a workaround which can be used to apply themes to your flatpak apps. stylepak-gitAUR automates this workaround.\n\n"
    },
    {
      "title": "\"File not found\" error when Open local HTML pages in Firefox",
      "level": 3,
      "content": "By default, the Flatpak version of Firefox will display a \"File not found\" error page when opening a local HTML. This is because permission must be granted to the app for accessing the folder containing the file.\n\nHowever, note that when granting permission to access the entire Home folder, Firefox will then check for an existing profile in ~/.mozilla and load it instead of those previously in use from the sandboxed folder ~/.var/app/org.mozilla.firefox/cache/mozilla/. If your previous session's tabs and browsing history is missing after changing a permission (e.g. with Flatseal), either modify the permission to exclude access to ~/.mozilla, or consider copying the profile from ~/.var/app/org.mozilla.firefox/cache/mozilla/ to ~/.mozilla.\n\n"
    },
    {
      "title": "Links fail to open on wlroots-based compositors",
      "level": 3,
      "content": "Flatpak applications that attempt to open URIs make use of the org.freedesktop.portal.OpenURI.OpenURI D-Bus interface exposed by xdg-desktop-portal. The xdg-desktop-portal-wlr backend does not support this call and therefore you will need an additional backend to fill the gap, for example xdg-desktop-portal-gtk.\n\n"
    },
    {
      "title": "Applications do not use the correct cursor theme",
      "level": 3,
      "content": "There is no single standard to set the cursor properly. Some programs only need read access to the cursors directory, others also rely on other mechanisms. For GTK applications, ensure that xdg-desktop-portal-gtk is installed.\n\nOtherwise, the following overrides should work for most common desktop applications.\n\n```\n$ flatpak -u override --filesystem=/usr/share/icons/:ro\n$ flatpak -u override --filesystem=/home/$USER/.icons/:ro \n$ flatpak -u override --filesystem=xdg-config/gtk-3.0:ro\n$ flatpak -u override --env=XCURSOR_PATH=~/.icons\n```\n\nIn some cases you may also need to override the environment variables XCURSOR_THEME and XCURSOR_SIZE:\n\n```\n$ flatpak -u override --env=XCURSOR_THEME=Adwaita\n$ flatpak -u override --env=XCURSOR_SIZE=24\n```\n\nSee this discussion for additional details.\n\nApparently it is not possible anymore to enable access to applications to directories under /usr/. The following hints at this when launching a program:\n\n```\n$ flatpak run com.spotify.Client\n```\n\n```\nF: Not sharing \"/usr/share/icons\" with sandbox: Path \"/usr\" is reserved by Flatpak\n```\n\nOne possible workaround would be to manually copy your icon theme from /usr/share/icons to /home/$USER/.icons/.\n\n"
    },
    {
      "title": "Flatpak Qt applications do not use Gnome Adwaita dark theme",
      "level": 3,
      "content": "If you switched your theme to Adwaita-dark and Flatpak Qt applications still use the light version, install the required KStyle:\n\n```\n# flatpak install flathub org.kde.KStyle.Adwaita\n```\n\n"
    },
    {
      "title": "Permission denied error when running Flatpak applications",
      "level": 3,
      "content": "Flatpak applications will not run if the mount point that contains the folder in which the application is stored, typically /var/lib/flatpak/ for system wide installations, and ~/.local/share/flatpak/ for user-specific installations, is mounted with the noexec option.\n\nWith noexec set you will get errors such as this:\n\n```\n$ bwrap: execvp ldconfig: Permission denied\n$ error: ldconfig failed, exit status 256\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official website\n- Documentation\n- Official Github wiki\n- Wikipedia page\n- Gnome SandboxedApps\n- KDE Testing Runtime and Applications\n\n"
    }
  ]
}