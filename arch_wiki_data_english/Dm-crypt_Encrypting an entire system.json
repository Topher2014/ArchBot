{
  "title": "Dm-crypt/Encrypting an entire system",
  "url": "https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "The following are examples of common scenarios of full system encryption with dm-crypt. They explain all the adaptations that need to be done to the normal installation procedure. All the necessary tools are on the installation image.\n\nIf you want to encrypt an existing unencrypted file system, see dm-crypt/Device encryption#Encrypt an existing unencrypted file system.\n\n"
    },
    {
      "title": "Overview",
      "level": 2,
      "content": "Securing a root file system is where dm-crypt excels, feature and performance-wise. Unlike selectively encrypting non-root file systems, an encrypted root file system can conceal information such as which programs are installed, the usernames of all user accounts, and common data-leakage vectors such as locate and /var/log/. Furthermore, an encrypted root file system makes tampering with the system far more difficult, as everything except the boot loader and (usually) the kernel is encrypted.\n\nAll scenarios illustrated in the following share these advantages, other pros and cons differentiating them are summarized below:\n\nTable content:\nScenarios | Advantages | Disadvantages\n#LUKS on a partition shows a basic and straightforward set-up for a fully LUKS encrypted root. | Simple partitioning and setup On a GPT partitioned disk, systemd can auto-mount the root partition. | Inflexible; disk-space to be encrypted has to be pre-allocated\n#LUKS on a partition with TPM2 and Secure Boot Similar to the example above, with Secure Boot and TPM2 providing additional layers of security. | Same advantages as above, and Secure Boot allows protection against Evil maid attacks TPM2 prevents the system from being unlocked if Secure Boot is disabled or modified | Same disadvantages as above.\n#LVM on LUKS achieves partitioning flexibility by using LVM inside a single LUKS encrypted partition. | Simple partitioning with knowledge of LVM Only one key required to unlock all volumes (e.g. easy resume-from-disk setup) Volume layout not visible when locked Easiest method to allow suspension to disk | LVM adds an additional mapping layer and hook Less useful, if a singular volume should receive a separate key\n#LUKS on LVM uses dm-crypt only after the LVM is setup. | LVM can be used to have encrypted volumes span multiple disks Easy mix of un-/encrypted volume groups | Complex; changing volumes requires changing encryption mappers too Volumes require individual keys LVM layout is visible when locked Slower boot time; each encrypted LV must be unlocked seperately\n#LUKS on software RAID uses dm-crypt only after RAID is setup. | Analogous to LUKS on LVM | Analogous to LUKS on LVM and Encrypted boot partition (GRUB)\n#Plain dm-crypt uses dm-crypt plain mode, i.e. without a LUKS header and its options for multiple keys. This scenario also employs USB devices for /boot and key storage, which may be applied to the other scenarios. | Data resilience for cases where a LUKS header may be damaged Allows deniable encryption Helps addressing problems with SSDs | High care to all encryption parameters is required Single encryption key and no option to change it Very complicated setup for a regular used system\n#Encrypted boot partition (GRUB) shows how to encrypt the boot partition using the GRUB boot loader. This scenario also employs an EFI system partition, which may be applied to the other scenarios. | Same advantages as the scenario the installation is based on (LVM on LUKS for this particular example) Less data is left unencrypted, i.e. the boot loader and the EFI system partition, if present | Same disadvantages as the scenario the installation is based on (LVM on LUKS for this particular example) More complicated configuration Not supported by other boot loaders GRUB takes a long time to unlock LUKS, thus slowing down boot\n#Root on ZFS |  | \n\nshows a basic and straightforward set-up for a fully LUKS encrypted root.\n\n- Simple partitioning and setup\n- On a GPT partitioned disk, systemd can auto-mount the root partition.\n\n- Inflexible; disk-space to be encrypted has to be pre-allocated\n\nSimilar to the example above, with Secure Boot and TPM2 providing additional layers of security.\n\nSame advantages as above, and\n\n- Secure Boot allows protection against Evil maid attacks\n- TPM2 prevents the system from being unlocked if Secure Boot is disabled or modified\n\n- Same disadvantages as above.\n\nachieves partitioning flexibility by using LVM inside a single LUKS encrypted partition.\n\n- Simple partitioning with knowledge of LVM\n- Only one key required to unlock all volumes (e.g. easy resume-from-disk setup)\n- Volume layout not visible when locked\n- Easiest method to allow suspension to disk\n\n- LVM adds an additional mapping layer and hook\n- Less useful, if a singular volume should receive a separate key\n\nuses dm-crypt only after the LVM is setup.\n\n- LVM can be used to have encrypted volumes span multiple disks\n- Easy mix of un-/encrypted volume groups\n\n- Complex; changing volumes requires changing encryption mappers too\n- Volumes require individual keys\n- LVM layout is visible when locked\n- Slower boot time; each encrypted LV must be unlocked seperately\n\nuses dm-crypt only after RAID is setup.\n\n- Analogous to LUKS on LVM\n\n- Analogous to LUKS on LVM and Encrypted boot partition (GRUB)\n\nuses dm-crypt plain mode, i.e. without a LUKS header and its options for multiple keys. This scenario also employs USB devices for /boot and key storage, which may be applied to the other scenarios.\n\n- Data resilience for cases where a LUKS header may be damaged\n- Allows deniable encryption\n- Helps addressing problems with SSDs\n\n- High care to all encryption parameters is required\n- Single encryption key and no option to change it\n- Very complicated setup for a regular used system\n\nshows how to encrypt the boot partition using the GRUB boot loader. This scenario also employs an EFI system partition, which may be applied to the other scenarios.\n\n- Same advantages as the scenario the installation is based on (LVM on LUKS for this particular example)\n- Less data is left unencrypted, i.e. the boot loader and the EFI system partition, if present\n\n- Same disadvantages as the scenario the installation is based on (LVM on LUKS for this particular example)\n- More complicated configuration\n- Not supported by other boot loaders\n- GRUB takes a long time to unlock LUKS, thus slowing down boot\n\nWhile all above scenarios provide much greater protection from outside threats than encrypted secondary file systems, they also share a common disadvantage: any user in possession of the encryption key is able to decrypt the entire drive, and therefore can access other users' data. If that is of concern, it is possible to use a combination of block device and stacked file system encryption and reap the advantages of both. See Data-at-rest encryption to plan ahead.\n\nSee dm-crypt/Drive preparation#Partitioning for a general overview of the partitioning strategies used in the scenarios.\n\nAnother area to consider is whether to set up an encrypted swap partition and what kind. See dm-crypt/Swap encryption for alternatives.\n\nIf you anticipate to protect the system's data not only against physical theft, but also have a requirement of precautions against logical tampering, see dm-crypt/Specialties#Securing the unencrypted boot partition for further possibilities after following one of the scenarios.\n\nFor solid state drives you might want to consider enabling TRIM support, but be warned, there are potential security implications. See dm-crypt/Specialties#Discard/TRIM support for solid state drives (SSD) for more information.\n\n- In any scenario, never use file system repair software such as fsck directly on an encrypted volume, or it will destroy any means to recover the key used to decrypt your files. Such tools must be used on the decrypted (opened) device instead.\n- The Argon2 key derivation function has a high RAM usage per design, defaulting to 1 GiB per encrypted mapper. Machines with low RAM and/or multiple LUKS2 partitions unlocked in parallel may error on boot. See the --pbkdf-memory option to control memory usage.[1]\n- GRUB's support for LUKS2 is limited; see GRUB#Encrypted /boot for details. Use LUKS2 with PBKDF2 (cryptsetup luksFormat --pbkdf pbkdf2) for partitions that GRUB will need to unlock.\n\n"
    },
    {
      "title": "LUKS on a partition",
      "level": 2,
      "content": "This example covers a full system encryption with dm-crypt + LUKS in a simple partition layout:\n\n```\n+-----------------------+------------------------+-----------------------+\n| Boot partition        | LUKS encrypted root    | Optional free space   |\n|                       | partition              | for additional        |\n|                       |                        | partitions to be set  |\n| /boot                 | /                      | up later              |\n|                       |                        |                       |\n|                       | /dev/mapper/root       |                       |\n|                       |------------------------|                       |\n| /dev/sda1             | /dev/sda2              |                       |\n+-----------------------+------------------------+-----------------------+\n```\n\nThe first steps can be performed directly after booting the Arch Linux install image.\n\n"
    },
    {
      "title": "Preparing the disk",
      "level": 3,
      "content": "Prior to creating any partitions, you should inform yourself about the importance and methods to securely erase the disk, described in dm-crypt/Drive preparation.\n\nThen create the needed partitions, at least one for / (e.g. /dev/sda2) and /boot (/dev/sda1). See Partitioning.\n\n"
    },
    {
      "title": "Preparing non-boot partitions",
      "level": 3,
      "content": "This and the next section replace the instructions of Installation guide#Format the partitions.\n\nThe following commands create and mount the encrypted root partition. They correspond to the procedure described in detail in dm-crypt/Device encryption#Encrypting devices with LUKS mode. If you want to use particular non-default encryption options (e.g. cipher, key length, sector size), see the encryption options before executing the first command.\n\n```\n# cryptsetup -v luksFormat /dev/sda2\n# cryptsetup open /dev/sda2 root\n```\n\nCreate a file system on unlocked LUKS device. For example, to create an Ext4 file system, run:\n\n```\n# mkfs.ext4 /dev/mapper/root\n```\n\nMount the root volume to /mnt:\n\n```\n# mount /dev/mapper/root /mnt\n```\n\nCheck the mapping works as intended:\n\n```\n# umount /mnt\n# cryptsetup close root\n# cryptsetup open /dev/sda2 root\n# mount /dev/mapper/root /mnt\n```\n\nIf you created separate partitions (e.g. /home), these steps have to be adapted and repeated for all of them, except for /boot. See dm-crypt/Encrypting a non-root file system#Automated unlocking and mounting on how to handle additional partitions at boot.\n\nNote that each block device requires its own passphrase. This may be inconvenient, because it results in a separate passphrase to be input during boot. An alternative is to use a keyfile stored in the root partition to unlock the separate partition via crypttab. See dm-crypt/Device encryption#Using LUKS to format partitions with a keyfile for instructions.\n\n"
    },
    {
      "title": "Preparing the boot partition",
      "level": 3,
      "content": "What you do have to setup is a non-encrypted /boot partition, which is needed for an encrypted root. For an EFI system partition on UEFI systems, execute:\n\n```\n# mkfs.fat -F32 /dev/sda1\n```\n\nor for an ordinary boot partition on BIOS systems:\n\n```\n# mkfs.ext4 /dev/sda1\n```\n\nAfterwards create the directory for the mountpoint and mount the partition:\n\n```\n# mount --mkdir /dev/sda1 /mnt/boot\n```\n\n"
    },
    {
      "title": "Mounting the devices",
      "level": 3,
      "content": "At Installation guide#Mount the file systems you will have to mount the mapped devices, not the actual partitions. Of course /boot, which is not encrypted, will still have to be mounted directly. It should be mounted at /mnt.\n\n"
    },
    {
      "title": "Configuring mkinitcpio",
      "level": 3,
      "content": "Before following Installation guide#Initramfs you must do the following to your new system:\n\nIf using the default busybox-based initramfs, add the keyboard and encrypt hooks to mkinitcpio.conf. If you use a non-US console keymap or a non-default console font, additionally add the keymap and consolefont hooks, respectively.\n\n```\nHOOKS=(base udev autodetect microcode modconf kms keyboard keymap consolefont block encrypt filesystems fsck)\n```\n\nIf using a systemd-based initramfs, instead add the keyboard and sd-encrypt hooks. If you use a non-US console keymap or a non-default console font, additionally add the sd-vconsole hook.\n\n```\nHOOKS=(base systemd autodetect microcode modconf kms keyboard sd-vconsole block sd-encrypt filesystems fsck)\n```\n\nRegenerate the initramfs after saving the changes. See dm-crypt/System configuration#mkinitcpio for details and other hooks that you may need.\n\n"
    },
    {
      "title": "Configuring the boot loader",
      "level": 3,
      "content": "In order to unlock the encrypted root partition at boot, the following kernel parameters need to be set by the boot loader:\n\n```\ncryptdevice=UUID=device-UUID:root root=/dev/mapper/root\n```\n\nIf using the sd-encrypt hook, the following need to be set instead:\n\n```\nrd.luks.name=device-UUID=root root=/dev/mapper/root\n```\n\nThe device-UUID refers to the UUID of the LUKS superblock, in this example it is the UUID of /dev/sda2. See Persistent block device naming for details.\n\nAlso see dm-crypt/System configuration#Kernel parameters for more details.\n\n"
    },
    {
      "title": "LUKS on a partition with TPM2 and Secure Boot",
      "level": 2,
      "content": "This example is similar to #LUKS on a partition, but integrates the use of Secure Boot and a Trusted Platform Module (TPM), enhancing the overall security of the boot process.\n\nIn this configuration, only the EFI system partition remains unencrypted, housing a unified kernel image and systemd-boot—both signed for use with Secure Boot. If Secure Boot is disabled or its key databases are tampered with, the TPM will not release the key to unlock the encrypted partition. This approach is akin to BitLocker on Windows or FileVault on macOS. A recovery-key will also be created to make sure the data remains accessible in case of a problem with the TPM unlocking mechanism (unsigned boot loader or kernel update, firmware update, etc.). Optionally, a TPM pin can be set to be required during boot time to prevent fully automatic unlocking.\n\nMake sure to thoroughly read the discussion and warnings in Trusted Platform Module#LUKS encryption.\n\nIn this example, partitions are created respecting systemd#GPT partition automounting, there is no need for an fstab or crypttab file.\n\n```\n+-----------------------+---------------------------------+\n| EFI system partition  | LUKS encrypted root partition   |\n|                       |                                 |\n|                       |                                 |\n| /boot                 | /                               |\n|                       |                                 |\n|                       | /dev/mapper/root                |\n|                       |---------------------------------|\n| /dev/sda1             | /dev/sda2                       |\n+-----------------------+---------------------------------+\n```\n\nFollow the Installation guide up to step Installation guide#Partition the disks.\n\n"
    },
    {
      "title": "Preparing the disk",
      "level": 3,
      "content": "Prior to creating any partitions, you should inform yourself about the importance and methods to securely erase the disk, described in dm-crypt/Drive preparation.\n\nPartition the drive with the GUID Partition Table (GPT). Then create the needed partitions.\n\nCreate an EFI system partition (/dev/sda1 in this example) with an appropriate size. It will later be mounted at /boot.\n\nIn the remaining space on the drive create a root partition (/dev/sda2 in this example) which will be encrypted and later mounted to /. Set its partition type GUID to 4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709 (\"Linux root (x86-64)\" in fdisk, 8304 in gdisk).\n\n"
    },
    {
      "title": "Preparing the root partition",
      "level": 3,
      "content": "The following commands create and mount the encrypted root partition. They correspond to the procedure described in detail in dm-crypt/Device encryption#Encrypting devices with LUKS mode.\n\nIf you want to use particular non-default encryption options (e.g. cipher, key length), or if you don't want to use TPM based decryption, see the encryption options before executing the first command.\n\nCreate the LUKS volume (you can simply use a blank password, as it will be wiped later) and mount it:\n\n```\n# cryptsetup luksFormat /dev/sda2\n# cryptsetup open /dev/sda2 root\n```\n\nCreate a file system on unlocked LUKS device. For example, to create an Ext4 file system, run:\n\n```\n# mkfs.ext4 /dev/mapper/root\n```\n\nMount the root volume to /mnt:\n\n```\n# mount /dev/mapper/root /mnt\n```\n\n"
    },
    {
      "title": "Preparing the EFI system partition",
      "level": 3,
      "content": "Format the newly created EFI system partition as instructed in EFI system partition#Format the partition and mount it afterwards.\n\n```\n# mount --mkdir /dev/sda1 /mnt/boot\n```\n\nContinue the installation process until Installation guide#Initramfs. You can skip Installation guide#Fstab.\n\n"
    },
    {
      "title": "Configuring mkinitcpio",
      "level": 3,
      "content": "To build a working systemd based initramfs, modify the HOOKS= line in mkinitcpio.conf as follows:\n\n```\nHOOKS=(base systemd autodetect microcode modconf kms keyboard sd-vconsole block sd-encrypt filesystems fsck)\n```\n\nNext, see Unified kernel image#mkinitcpio to configure mkinitcpio for Unified kernel images.\n\nDo not regenerate the initramfs yet, as the /boot/EFI/Linux directory needs to be created by the boot loader installer first.\n\n"
    },
    {
      "title": "Installing the boot loader",
      "level": 3,
      "content": "You can configure your system to directly boot the UEFI image without any boot loader, see Unified_kernel_image#Directly_from_UEFI.\n\nIf a boot loader is desired, continue installing systemd-boot with\n\n```\n# bootctl install\n```\n\nThe Unified kernel image generated by mkinitcpio will be automatically recognized and does not need an entry in /boot/loader/entries/.\n\nSee systemd-boot#Updating the UEFI boot manager and systemd-boot#Loader configuration for further configuration.\n\n"
    },
    {
      "title": "Finalizing the installation",
      "level": 3,
      "content": "First, Regenerate the initramfs, and make sure the image generation is successful.\n\nMake sure you did not forget to set a root password, reboot to finish the installation.\n\n"
    },
    {
      "title": "Secure Boot",
      "level": 3,
      "content": "You can now sign the boot loader executables and the EFI binary, in order to enable Secure Boot. For a quick and easy way, see Unified Extensible Firmware Interface/Secure Boot#Assisted process with sbctl.\n\n"
    },
    {
      "title": "Enrolling the TPM",
      "level": 3,
      "content": "After signing the boot loader executables and enabling Secure Boot, you can now enroll the TPM in order to use it to unlock the LUKS volume. The following commands will remove the empty passphrase created during the LUKS format process, create a key bound to the TPM PCR 7 (Secure Boot state and enrolled certificates) and create a recovery key to be used in case of any problems. The TPM will automatically release the key as long as the boot chain is not tampered with. See systemd-cryptenroll#Trusted Platform Module and systemd-cryptenroll(1).\n\n```\n# systemd-cryptenroll /dev/sda2 --recovery-key\n# systemd-cryptenroll /dev/sda2 --wipe-slot=empty --tpm2-device=auto --tpm2-pcrs=7\n```\n\n- Make sure Secure Boot is active and in user mode when binding to PCR 7, otherwise, unauthorized boot devices could unlock the encrypted volume.\n- The state of PCR 7 can change if firmware certificates change, which can risk locking the user out. This can be implicitly done by fwupd[2] or explicitly by rotating Secure Boot keys.\n\n"
    },
    {
      "title": "LVM on LUKS",
      "level": 2,
      "content": "The straightforward method is to set up LVM on top of the encrypted partition instead of the other way round. Technically the LVM is setup inside one big encrypted block device. Hence, the LVM is not visible until the block device is unlocked and the underlying volume structure is scanned and mounted during boot.\n\nThe disk layout in this example is:\n\n```\n+-----------------------------------------------------------------------+ +----------------+\n| Logical volume 1      | Logical volume 2      | Logical volume 3      | | Boot partition |\n|                       |                       |                       | |                |\n| [SWAP]                | /                     | /home                 | | /boot          |\n|                       |                       |                       | |                |\n| /dev/MyVolGroup/swap  | /dev/MyVolGroup/root  | /dev/MyVolGroup/home  | |                |\n|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | (may be on     |\n|                                                                       | | other device)  |\n|                         LUKS encrypted partition                      | |                |\n|                           /dev/sda1                                   | | /dev/sdb1      |\n+-----------------------------------------------------------------------+ +----------------+\n```\n\n- Instructions at dm-crypt/Specialties#Encrypted system using a detached LUKS header use this setup with a detached LUKS header on a USB device to achieve a two factor authentication with it.\n- Instructions at dm-crypt/Specialties#Encrypted /boot and a detached LUKS header on USB use this setup with a detached LUKS header, encrypted /boot partition, and encrypted keyfile all on a USB device.\n\n"
    },
    {
      "title": "Preparing the disk",
      "level": 3,
      "content": "Prior to creating any partitions, you should inform yourself about the importance and methods to securely erase the disk, described in dm-crypt/Drive preparation.\n\nCreate a partition to be mounted at /boot with a size of 1 GiB or more.\n\nCreate a partition which will later contain the encrypted container.\n\nCreate the LUKS encrypted container at the designated partition. Enter the chosen password twice.\n\n```\n# cryptsetup luksFormat /dev/sda1\n```\n\nFor more information about the available cryptsetup options see the LUKS encryption options prior to above command.\n\nOpen the container:\n\n```\n# cryptsetup open /dev/sda1 cryptlvm\n```\n\nThe decrypted container is now available at /dev/mapper/cryptlvm.\n\n"
    },
    {
      "title": "Preparing the logical volumes",
      "level": 3,
      "content": "Create a physical volume on top of the opened LUKS container:\n\n```\n# pvcreate /dev/mapper/cryptlvm\n```\n\nCreate a volume group (in this example named MyVolGroup, but it can be whatever you want) and add the previously created physical volume to it:\n\n```\n# vgcreate MyVolGroup /dev/mapper/cryptlvm\n```\n\nCreate all your logical volumes on the volume group:\n\n```\n# lvcreate -L 4G -n swap MyVolGroup\n# lvcreate -L 32G -n root MyVolGroup\n# lvcreate -l 100%FREE -n home MyVolGroup\n```\n\nFormat your file systems on each logical volume. For example, using Ext4 for the root and home volumes:\n\n```\n# mkfs.ext4 /dev/MyVolGroup/root\n# mkfs.ext4 /dev/MyVolGroup/home\n# mkswap /dev/MyVolGroup/swap\n```\n\nMount your file systems:\n\n```\n# mount /dev/MyVolGroup/root /mnt\n# mount --mkdir /dev/MyVolGroup/home /mnt/home\n# swapon /dev/MyVolGroup/swap\n```\n\n"
    },
    {
      "title": "Preparing the boot partition",
      "level": 3,
      "content": "The boot loader loads the kernel, initramfs, and its own configuration files from the /boot directory. Any file system on a disk that can be read by the boot loader is eligible.\n\nCreate a file system on the partition intended for /boot. For an EFI system partition on UEFI systems, execute:\n\n```\n# mkfs.fat -F32 /dev/sdb1\n```\n\nor for an ordinary boot partition on BIOS systems:\n\n```\n# mkfs.ext4 /dev/sdb1\n```\n\nMount the partition to /mnt/boot:\n\n```\n# mount --mkdir /dev/sdb1 /mnt/boot\n```\n\nAt this point resume the common Installation guide#Installation steps. Return to this page to customize the Initramfs and Boot loader steps.\n\n"
    },
    {
      "title": "Configuring mkinitcpio",
      "level": 3,
      "content": "Make sure the lvm2 package is installed.\n\nIf using the default busybox-based initramfs, add the keyboard, encrypt and lvm2 hooks to mkinitcpio.conf. If you use a non-US console keymap or a non-default console font, additionally add the keymap and consolefont hooks, respectively.\n\n```\nHOOKS=(base udev autodetect microcode modconf kms keyboard keymap consolefont block encrypt lvm2 filesystems fsck)\n```\n\nIf using a systemd-based initramfs, instead add the keyboard, sd-encrypt and lvm2 hooks. If you use a non-US console keymap or a non-default console font, additionally add the sd-vconsole hook.\n\n```\nHOOKS=(base systemd autodetect microcode modconf kms keyboard sd-vconsole block sd-encrypt lvm2 filesystems fsck)\n```\n\nRegenerate the initramfs after saving the changes. See dm-crypt/System configuration#mkinitcpio for details and other hooks that you may need.\n\nNote: When using dracut, no additional setup is required, as the required modules are already included.\n\n"
    },
    {
      "title": "Configuring the boot loader",
      "level": 3,
      "content": "In order to unlock the encrypted root partition at boot, the following kernel parameters need to be set by the boot loader:\n\n```\ncryptdevice=UUID=device-UUID:cryptlvm root=/dev/MyVolGroup/root\n```\n\nIf using the sd-encrypt hook, the following needs to be set instead:\n\n```\nrd.luks.name=device-UUID=cryptlvm root=/dev/MyVolGroup/root\n```\n\nThe device-UUID refers to the UUID of the LUKS superblock, in this example it is the UUID of /dev/sda1. See Persistent block device naming for details.\n\nIf using dracut, these parameters are known to work:\n\n```\nrd.luks.uuid=device-UUID root=/dev/MyVolGroup/root\n```\n\nyou may need a more extensive list of parameters, try:\n\n```\nrd.luks.uuid=luks-deviceUUID rd.lvm.lv=MyVolGroup/root  rd.lvm.lv=MyVolGroup/swap  root=/dev/mapper/MyVolGroup-root rootfstype=ext4 rootflags=rw,relatime\n```\n\nSee dm-crypt/System configuration#Kernel parameters for details.\n\n"
    },
    {
      "title": "LUKS on LVM",
      "level": 2,
      "content": "To use encryption on top of LVM, the LVM volumes are set up first and then used as the base for the encrypted partitions. This way, a mixture of encrypted and non-encrypted volumes/partitions is possible as well.\n\nThe following short example creates a LUKS on LVM setup and mixes in the use of a key-file for the /home partition and a temporary encrypted volume for swap. This is considered desirable from a security perspective, because no potentially sensitive temporary data survives the reboot, when the encryption is re-initialised. If you are experienced with LVM, you will be able to ignore/replace LVM and other specifics according to your plan.\n\nIf you want to span a logical volume over multiple disks that have already been set up, or expand the logical volume for /home (or any other volume), a procedure to do so is described in dm-crypt/Specialties#Expanding LVM on multiple disks. It is important to note that the LUKS encrypted container has to be resized as well.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Preparing the disk",
      "level": 3,
      "content": "Partitioning scheme:\n\n```\n+----------------+-------------------------------------------------------------------------------------------------+\n| Boot partition | dm-crypt plain encrypted volume | LUKS encrypted volume         | LUKS encrypted volume         |\n|                |                                 |                               |                               |\n| /boot          | [SWAP]                          | /                             | /home                         |\n|                |                                 |                               |                               |\n|                | /dev/mapper/swap                | /dev/mapper/root              | /dev/mapper/home              |\n|                |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|\n|                | Logical volume 1                | Logical volume 2              | Logical volume 3              |\n|                | /dev/MyVolGroup/cryptswap       | /dev/MyVolGroup/cryptroot     | /dev/MyVolGroup/crypthome     |\n|                |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|\n|                |                                                                                                 |\n|   /dev/sda1    |                                   /dev/sda2                                                     |\n+----------------+-------------------------------------------------------------------------------------------------+\n```\n\nRandomise /dev/sda2 according to dm-crypt/Drive preparation#dm-crypt wipe on an empty device or partition.\n\n"
    },
    {
      "title": "Preparing the logical volumes",
      "level": 3,
      "content": "```\n# pvcreate /dev/sda2\n# vgcreate MyVolGroup /dev/sda2\n# lvcreate -L 4G -n cryptswap MyVolGroup\n# lvcreate -L 32G -n cryptroot MyVolGroup\n# lvcreate -l 100%FREE -n crypthome MyVolGroup\n```\n\n```\n# cryptsetup luksFormat /dev/MyVolGroup/cryptroot\n# cryptsetup open /dev/MyVolGroup/cryptroot root\n```\n\nCreate a file system on unlocked LUKS device and mount it. For example, to create an Ext4 file system, run:\n\n```\n# mkfs.ext4 /dev/mapper/root\n# mount /dev/mapper/root /mnt\n```\n\nMore information about the encryption options can be found in dm-crypt/Device encryption#Encryption options for LUKS mode. Note that /home will be encrypted in #Encrypting logical volume /home.\n\n"
    },
    {
      "title": "Preparing the boot partition",
      "level": 3,
      "content": "Create a file system on the partition intended for /boot. For an EFI system partition on UEFI systems, execute:\n\n```\n# mkfs.fat -F32 /dev/sda1\n```\n\nor for an ordinary boot partition on BIOS systems:\n\n```\n# mkfs.ext4 /dev/sda1\n```\n\nAfterwards create the directory for the mountpoint and mount the partition:\n\n```\n# mount --mkdir /dev/sda1 /mnt/boot\n```\n\n"
    },
    {
      "title": "Configuring mkinitcpio",
      "level": 3,
      "content": "Make sure the lvm2 package is installed.\n\nIf using the default busybox-based initramfs, add the keyboard, encrypt and lvm2 hooks to mkinitcpio.conf. If you use a non-US console keymap or a non-default console font, additionally add the keymap and consolefont hooks, respectively.\n\n```\nHOOKS=(base udev autodetect microcode modconf kms keyboard keymap consolefont block lvm2 encrypt filesystems fsck)\n```\n\nIf using a systemd-based initramfs, instead add the keyboard, sd-encrypt and lvm2 hooks. if you use a non-US console keymap or a non-default console font, additionally add the sd-vconsole hook.\n\n```\nHOOKS=(base systemd autodetect microcode modconf kms keyboard sd-vconsole block sd-encrypt lvm2 filesystems fsck)\n```\n\nRegenerate the initramfs after saving the changes. See dm-crypt/System configuration#mkinitcpio for details and other hooks that you may need.\n\n"
    },
    {
      "title": "Configuring the boot loader",
      "level": 3,
      "content": "In order to unlock the encrypted root partition at boot, the following kernel parameters need to be set by the boot loader:\n\n```\ncryptdevice=UUID=device-UUID:root root=/dev/mapper/root\n```\n\nIf using the sd-encrypt hook, the following need to be set instead:\n\n```\nrd.luks.name=device-UUID=root root=/dev/mapper/root\n```\n\nThe device-UUID refers to the UUID of the LUKS superblock, in this example it is the UUID of /dev/MyVolGroup/cryptroot. See Persistent block device naming for details.\n\nSee dm-crypt/System configuration#Kernel parameters for details.\n\n"
    },
    {
      "title": "Configuring fstab and crypttab",
      "level": 3,
      "content": "Both crypttab and fstab entries are required to both unlock the device and mount the file systems, respectively. The following lines will re-encrypt the swap volume on each reboot:\n\n```\n/etc/crypttab\n```\n\n```\nswap\t/dev/MyVolGroup/cryptswap\t/dev/urandom\tswap,cipher=aes-xts-plain64,size=256,sector-size=4096\n```\n\n```\n/etc/fstab\n```\n\n```\n/dev/mapper/root                          /     ext4   defaults  0 1\nUUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx /boot ext4   defaults  0 2\n/dev/mapper/swap                          none  swap   defaults  0 0\n```\n\n"
    },
    {
      "title": "Encrypting logical volume /home",
      "level": 3,
      "content": "Since this scenario uses LVM as the primary and dm-crypt as secondary mapper, each encrypted logical volume requires its own encryption. Yet, unlike the temporary file systems configured with volatile encryption above, the logical volume for /home should of course be persistent. The following assumes you have rebooted into the installed system, otherwise you have to adjust paths. To save on entering a second passphrase at boot, a keyfile is created:\n\n```\n# dd bs=512 count=4 if=/dev/random iflag=fullblock | install -m 0600 /dev/stdin /etc/cryptsetup-keys.d/home.key\n```\n\nThe logical volume is encrypted with it:\n\n```\n# cryptsetup luksFormat -v /dev/MyVolGroup/crypthome /etc/cryptsetup-keys.d/home.key\n# cryptsetup -d /etc/cryptsetup-keys.d/home.key open /dev/MyVolGroup/crypthome home\n```\n\nCreate a file system on unlocked LUKS device and mount it. For example, to create an Ext4 file system, run:\n\n```\n# mkfs.ext4 /dev/mapper/home\n# mount /dev/mapper/home /home\n```\n\nThe encrypted mount is configured in both crypttab and fstab:\n\n```\n/etc/crypttab\n```\n\n```\nhome\t/dev/MyVolGroup/crypthome   none\n```\n\n```\n/etc/fstab\n```\n\n```\n/dev/mapper/home        /home   ext4        defaults        0       2\n```\n\n"
    },
    {
      "title": "LUKS on software RAID",
      "level": 2,
      "content": "This example is based on a real-world setup for a workstation class laptop equipped with two SSDs of equal size, and an additional HDD for bulk storage. The end result is LUKS based full disk encryption (including /boot) for all drives, with the SSDs in a RAID0 array, and keyfiles used to unlock all encryption after GRUB is given a correct passphrase at boot.\n\nThis setup utilizes a very simplistic partitioning scheme, with all the available RAID storage being mounted at / (no separate /boot partition), and the decrypted HDD being mounted at /data.\n\nPlease note that regular backups are very important in this setup. If either of the SSDs fail, the data contained in the RAID array will be practically impossible to recover. You may wish to select a different RAID level if fault tolerance is important to you.\n\nThe encryption is not deniable in this setup.\n\nFor the sake of the instructions below, the following block devices are used:\n\n```\n/dev/sda = first SSD\n/dev/sdb = second SSD\n/dev/sdc = HDD\n```\n\n```\n+---------------------+---------------------------+---------------------------+ +---------------------+---------------------------+---------------------------+ +---------------------------+\n| BIOS boot partition | EFI system partition      | LUKS encrypted volume     | | BIOS boot partition | EFI system partition      | LUKS encrypted volume     | | LUKS encrypted volume     |\n|                     |                           |                           | |                     |                           |                           | |                           |\n|                     | /efi                      | /                         | |                     | /efi                      | /                         | | /data                     |\n|                     |                           |                           | |                     |                           |                           | |                           |\n|                     |                           | /dev/mapper/root          | |                     |                           | /dev/mapper/root          | |                           |\n|                     +---------------------------+---------------------------+ |                     +---------------------------+---------------------------+ |                           |\n|                     | RAID1 array (part 1 of 2) | RAID0 array (part 1 of 2) | |                     | RAID1 array (part 2 of 2) | RAID0 array (part 2 of 2) | |                           |\n|                     |                           |                           | |                     |                           |                           | |                           |\n|                     | /dev/md/ESP               | /dev/md/root              | |                     | /dev/md/ESP               | /dev/md/root              | | /dev/mapper/data          |\n|                     +---------------------------+---------------------------+ |                     +---------------------------+---------------------------+ +---------------------------+\n| /dev/sda1           | /dev/sda2                 | /dev/sda3                 | | /dev/sdb1           | /dev/sdb2                 | /dev/sdb3                 | | /dev/sdc1                 |\n+---------------------+---------------------------+---------------------------+ +---------------------+---------------------------+---------------------------+ +---------------------------+\n```\n\nBe sure to substitute them with the appropriate device designations for your setup, as they may be different.\n\n"
    },
    {
      "title": "Preparing the disks",
      "level": 3,
      "content": "Prior to creating any partitions, you should inform yourself about the importance and methods to securely erase the disk, described in dm-crypt/Drive preparation.\n\nFor BIOS systems with GPT, create a BIOS boot partition with size of 1 MiB for GRUB to store the second stage of BIOS boot loader. Do not mount the partition.\n\nFor UEFI systems create an EFI system partition with an appropriate size, it will later be mounted at /efi.\n\nIn the remaining space on the drive create a partition (/dev/sda3 in this example) for \"Linux RAID\". Choose partition type ID fd for MBR or partition type GUID A19D880F-05FC-4D3B-A006-743F0F84911E for GPT.\n\nOnce partitions have been created on /dev/sda, the following commands can be used to clone them to /dev/sdb.\n\n```\n# sfdisk -d /dev/sda > sda.dump\n# sfdisk /dev/sdb < sda.dump\n```\n\nThe HDD is prepared with a single Linux partition covering the whole drive at /dev/sdc1.\n\n"
    },
    {
      "title": "Building the RAID array",
      "level": 3,
      "content": "Create the RAID array for the SSDs.\n\n- All parts of an EFI system partition RAID array must be individually usable, that means that ESP can only placed in a RAID1 array.\n- The RAID superblock must be placed at the end of the EFI system partition using --metadata=1.0, otherwise the firmware will not be able to access the partition.\n\n```\n# mdadm --create --verbose --level=1 --metadata=1.0 --raid-devices=2 /dev/md/ESP /dev/sda2 /dev/sdb2\n```\n\nThis example utilizes RAID0 for root, you may wish to substitute a different level based on your preferences or requirements.\n\n```\n# mdadm --create --verbose --level=0 --metadata=1.2 --raid-devices=2 /dev/md/root /dev/sda3 /dev/sdb3\n```\n\n"
    },
    {
      "title": "Preparing the block devices",
      "level": 3,
      "content": "As explained in dm-crypt/Drive preparation, the devices are wiped with random data utilizing /dev/zero and a crypt device with a random key. Alternatively, you could use dd with /dev/random or /dev/urandom, though it will be much slower.\n\n```\n# cryptsetup open --type plain --sector-size 4096 --key-file /dev/urandom /dev/md/root to_be_wiped\n# dd if=/dev/zero of=/dev/mapper/to_be_wiped bs=1M status=progress\n# cryptsetup close to_be_wiped\n```\n\nAnd repeat above for the HDD (/dev/sdc1 in this example).\n\nSet up encryption for /dev/md/root:\n\n```\n# cryptsetup -v luksFormat --pbkdf pbkdf2 /dev/md/root\n# cryptsetup open /dev/md/root root\n```\n\nCreate a file system on unlocked LUKS device. For example, to create an Ext4 file system, run:\n\n```\n# mkfs.ext4 /dev/mapper/root\n```\n\nMount the root volume to /mnt:\n\n```\n# mount /dev/mapper/root /mnt\n```\n\nAnd repeat for the HDD:\n\n```\n# cryptsetup -v luksFormat /dev/sdc1\n# cryptsetup open /dev/sdc1 data\n# mkfs.ext4 /dev/mapper/data\n# mount --mkdir /dev/mapper/data /mnt/data\n```\n\nFor UEFI systems, set up the EFI system partition:\n\n```\n# mkfs.fat -F32 /dev/md/ESP\n# mount --mkdir /dev/md/ESP /mnt/efi\n```\n\n"
    },
    {
      "title": "Configuring GRUB",
      "level": 3,
      "content": "Configure GRUB for the LUKS encrypted system by editing /etc/default/grub with the following:\n\n```\nGRUB_CMDLINE_LINUX=\"cryptdevice=/dev/md/root:root\"\nGRUB_ENABLE_CRYPTODISK=y\n```\n\nIf you have a USB keyboard on a newer system either enable legacy USB support in firmware or add the following to /etc/default/grub:\n\n```\nGRUB_TERMINAL_INPUT=\"usb_keyboard\"\nGRUB_PRELOAD_MODULES=\"usb usb_keyboard ohci uhci ehci\"\n```\n\nOtherwise you may not be able to use your keyboard at the LUKS prompt.\n\nSee dm-crypt/System configuration#Kernel parameters and GRUB#Encrypted /boot for details.\n\nComplete the GRUB install to both SSDs (in reality, installing only to /dev/sda will work).\n\n```\n# grub-install --target=i386-pc /dev/sda\n# grub-install --target=i386-pc /dev/sdb\n# grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n"
    },
    {
      "title": "Creating the keyfiles",
      "level": 3,
      "content": "The next steps save you from entering your passphrase twice when you boot the system (once so GRUB can unlock the LUKS device, and second time once the initramfs assumes control of the system). This is done by creating a keyfile for the encryption and adding it to the initramfs image to allow the encrypt hook to unlock the root device. See dm-crypt/Device encryption#With a keyfile embedded in the initramfs for details.\n\n- Create the keyfile and add the key to /dev/md/root.\n- Create another keyfile for the HDD (/dev/sdc1) so it can also be unlocked at boot. For convenience, leave the passphrase created above in place as this can make recovery easier if you ever need it. Edit /etc/crypttab to decrypt the HDD at boot. See dm-crypt/System configuration#Unlocking with a keyfile.\n\n"
    },
    {
      "title": "Configuring the system",
      "level": 3,
      "content": "Edit fstab to mount the root and data block devices and the ESP:\n\n```\n/dev/mapper/root  /\t  ext4\trw,noatime \t   0 1\n/dev/mapper/data  /data   ext4\tdefaults           0 2\n/dev/md/ESP       /efi     vfat\trw,relatime,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,tz=UTC,errors=remount-ro  \t0 2\n```\n\nSave the RAID configuration:\n\n```\n# mdadm --detail --scan >> /etc/mdadm.conf\n```\n\nEdit mkinitcpio.conf to include your keyfile and add the proper hooks:\n\n```\nFILES=(/crypto_keyfile.bin)\nHOOKS=(base udev autodetect microcode modconf kms keyboard keymap consolefont block mdadm_udev encrypt filesystems fsck)\n```\n\nSee dm-crypt/System configuration#mkinitcpio for details.\n\n"
    },
    {
      "title": "Plain dm-crypt",
      "level": 2,
      "content": "Contrary to LUKS, dm-crypt plain mode does not require a header on the encrypted device: this scenario exploits this feature to set up a system on an unpartitioned, encrypted disk that will be indistinguishable from a disk filled with random data, which could allow deniable encryption. See also wikipedia:Disk encryption#Full disk encryption.\n\nNote that if full disk encryption is not required, the methods using LUKS described in the sections above are better options for both system encryption and encrypted partitions. LUKS features like key management with multiple passphrases/key-files, master key backups or re-encrypting a device in-place are unavailable with plain mode.\n\nPlain dm-crypt encryption can be more resilient to damage than LUKS, because it does not rely on an encryption master-key which can be a single-point of failure if damaged or forcefully destroyed. However, using plain mode also requires more manual configuration of encryption options to achieve the same cryptographic strength. See also Data-at-rest encryption#Cryptographic metadata. Using plain mode could also be considered if concerned with the problems explained in dm-crypt/Specialties#Discard/TRIM support for solid state drives (SSD).\n\n- dm-crypt LUKS mode with a detached header by using the cryptsetup --header option. It cannot be used with the standard encrypt hook, but the hook may be modified.\n- tcplay which offers headerless encryption but with the PBKDF2 function.\n\nThe scenario uses two USB sticks:\n\n- one for the boot device, which also allows storing the options required to open/unlock the plain encrypted device in the boot loader configuration, since typing them on each boot would be error prone;\n- another for the encryption key file, assuming it stored as raw bits so that to the eyes of an unaware attacker who might get the usbkey the encryption key will appear as random data instead of being visible as a normal file. See also Wikipedia:Security through obscurity, follow dm-crypt/Device encryption#Keyfiles to prepare the keyfile.\n\nThe disk layout is:\n\n```\n+----------------------+----------------------+----------------------+ +----------------+ +----------------+\n| Logical volume 1     | Logical volume 2     | Logical volume 3     | | Boot device    | | Encryption key |\n|                      |                      |                      | |                | | file storage   |\n| /                    | [SWAP]               | /home                | | /boot          | | (unpartitioned |\n|                      |                      |                      | |                | | in example)    |\n| /dev/MyVolGroup/root | /dev/MyVolGroup/swap | /dev/MyVolGroup/home | | /dev/sdb1      | | /dev/sdc       |\n|----------------------+----------------------+----------------------| |----------------| |----------------|\n| disk drive /dev/sda encrypted using plain mode and LVM             | | USB stick 1    | | USB stick 2    |\n+--------------------------------------------------------------------+ +----------------+ +----------------+\n```\n\n- It is also possible to use a single USB key physical device: By putting the key on another partition (/dev/sdb2) of the USB storage device (/dev/sdb). By copying the keyfile to the initramfs directly. An example keyfile /etc/cryptsetup-keys.d/root.key gets copied to the initramfs image by setting FILES=(/etc/cryptsetup-keys.d/root.key) in /etc/mkinitcpio.conf. The way to instruct the encrypt hook to read the keyfile in the initramfs image is using rootfs: prefix before the filename, e.g. cryptkey=rootfs:/etc/cryptsetup-keys.d/root.key.\n- Another option is using a passphrase with good entropy.\n\n- By putting the key on another partition (/dev/sdb2) of the USB storage device (/dev/sdb).\n- By copying the keyfile to the initramfs directly. An example keyfile /etc/cryptsetup-keys.d/root.key gets copied to the initramfs image by setting FILES=(/etc/cryptsetup-keys.d/root.key) in /etc/mkinitcpio.conf. The way to instruct the encrypt hook to read the keyfile in the initramfs image is using rootfs: prefix before the filename, e.g. cryptkey=rootfs:/etc/cryptsetup-keys.d/root.key.\n\n"
    },
    {
      "title": "Preparing the disk",
      "level": 3,
      "content": "It is vital that the mapped device is filled with random data. In particular this applies to the scenario use case we apply here.\n\nSee dm-crypt/Drive preparation and dm-crypt/Drive preparation#dm-crypt specific methods\n\n"
    },
    {
      "title": "Preparing the non-boot partitions",
      "level": 3,
      "content": "See dm-crypt/Device encryption#Encryption options for plain mode for details.\n\nUsing the device /dev/sda, with the aes-xts cipher with a 512 bit key size and using a keyfile we have the following options for this scenario:\n\n```\n# cryptsetup open --type plain --cipher=aes-xts-plain64 --offset=0 --key-file=/dev/sdc --key-size=512 --sector-size 4096 /dev/sda cryptlvm\n```\n\nUnlike encrypting with LUKS, the above command must be executed in full whenever the mapping needs to be re-established, so it is important to remember the cipher, and key file details.\n\nWe can now check a mapping entry has been made for /dev/mapper/cryptlvm:\n\n```\n# fdisk -l\n```\n\n- A simpler alternative to using LVM, advocated in the cryptsetup FAQ for cases where LVM is not necessary, is to just create a file system on the entirety of the mapped dm-crypt device.\n- If a logical volume will be formatted with ext4, leave at least 256 MiB free space in the volume group to allow using e2scrub(8). After creating the last volume with -l 100%FREE, this can be accomplished by reducing its size with lvreduce -L -256M MyVolGroup/home.\n\nNext, we setup LVM logical volumes on the mapped device. See Install Arch Linux on LVM for further details:\n\n```\n# pvcreate /dev/mapper/cryptlvm\n# vgcreate MyVolGroup /dev/mapper/cryptlvm\n# lvcreate -L 32G MyVolGroup -n root\n# lvcreate -L 4G MyVolGroup -n swap\n# lvcreate -l 100%FREE MyVolGroup -n home\n```\n\nWe format and mount them and activate swap. See File systems#Create a file system for further details:\n\n```\n# mkfs.ext4 /dev/MyVolGroup/root\n# mkfs.ext4 /dev/MyVolGroup/home\n# mount /dev/MyVolGroup/root /mnt\n# mount --mkdir /dev/MyVolGroup/home /mnt/home\n# mkswap /dev/MyVolGroup/swap\n# swapon /dev/MyVolGroup/swap\n```\n\n"
    },
    {
      "title": "Preparing the boot partition",
      "level": 3,
      "content": "The /boot partition can be a typical FAT32 formatted partition on a USB stick, if required. But if manual partitioning is needed, then a small 1 GiB partition is all that is required. Create the partition using a partitioning tool of your choice.\n\nCreate a file system on the partition intended for /boot:\n\n```\n# mkfs.fat -F32 /dev/sdb1\n# mount --mkdir /dev/sdb1 /mnt/boot\n```\n\n"
    },
    {
      "title": "Configuring mkinitcpio",
      "level": 3,
      "content": "Make sure the lvm2 package is installed.\n\nIf using the default busybox-based initramfs, add the keyboard, encrypt and lvm2 hooks to mkinitcpio.conf. If you use a non-US console keymap or a non-default console font, additionally add the keymap and consolefont hooks, respectively.\n\n```\nHOOKS=(base udev autodetect microcode modconf kms keyboard keymap consolefont block encrypt lvm2 filesystems fsck)\n```\n\nRegenerate the initramfs after saving the changes. See dm-crypt/System configuration#mkinitcpio for details and other hooks that you may need.\n\n"
    },
    {
      "title": "Configuring the boot loader",
      "level": 3,
      "content": "In order to boot the encrypted root partition, the following kernel parameters need to be set by the boot loader (note that 64 is the number of bytes in 512 bits):\n\n```\ncryptdevice=/dev/disk/by-id/disk-ID-of-sda:cryptlvm:sector-size=4096 cryptkey=/dev/disk/by-id/disk-ID-of-sdc:0:64 crypto=:aes-xts-plain64:512:0:\n```\n\nThe disk-ID-of-disk refers to the id of the referenced disk. See Persistent block device naming for details.\n\nSee dm-crypt/System configuration#Kernel parameters for details and other parameters that you may need.\n\nNote: For BIOS:\n\nFor BIOS:\n\n```\n# grub-install --target=i386-pc --recheck /dev/sdb\n```\n\nFor UEFI:\n\n```\n# grub-install --target=x86_64-efi --efi-directory=/boot --removable\n```\n\n"
    },
    {
      "title": "Post-installation",
      "level": 3,
      "content": "You may wish to remove the USB sticks after booting. Since the /boot partition is not usually needed, the noauto option can be added to the relevant line in /etc/fstab:\n\n```\n/etc/fstab\n```\n\n```\n# /dev/sdb1\nUUID=XXXX-XXXX /boot vfat noauto,rw,noatime 0 2\n```\n\nHowever, when an update to anything used in the initramfs, or a kernel, or the boot loader is required; the /boot partition must be present and mounted. As the entry in fstab already exists, it can be mounted simply with:\n\n```\n# mount /boot\n```\n\n"
    },
    {
      "title": "Encrypted boot partition (GRUB)",
      "level": 2,
      "content": "This setup utilizes the same partition layout and configuration as the previous #LVM on LUKS section, with the difference that the GRUB boot loader is used since it is capable of booting from an LVM logical volume and a LUKS-encrypted /boot. See also GRUB#Encrypted /boot.\n\nThe disk layout in this example is:\n\n```\n+---------------------+----------------------+----------------------+----------------------+----------------------+\n| BIOS boot partition | EFI system partition | Logical volume 1     | Logical volume 2     | Logical volume 3     |\n|                     |                      |                      |                      |                      |\n|                     | /efi                 | /                    | [SWAP]               | /home                |\n|                     |                      |                      |                      |                      |\n|                     |                      | /dev/MyVolGroup/root | /dev/MyVolGroup/swap | /dev/MyVolGroup/home |\n| /dev/sda1           | /dev/sda2            |----------------------+----------------------+----------------------+\n| unencrypted         | unencrypted          | /dev/sda3 encrypted using LVM on LUKS                              |\n+---------------------+----------------------+--------------------------------------------------------------------+\n```\n\n- All scenarios are intended as examples. It is, of course, possible to apply both of the two above distinct installation steps with the other scenarios as well. See also the variants linked in #LVM on LUKS.\n- You can use cryptboot script from cryptbootAUR package for simplified encrypted boot management (mounting, unmounting, upgrading packages) and as a defense against Evil Maid attacks with UEFI Secure Boot. For more information and limitations see cryptboot project page.\n\n"
    },
    {
      "title": "Preparing the disk",
      "level": 3,
      "content": "Prior to creating any partitions, you should inform yourself about the importance and methods to securely erase the disk, described in dm-crypt/Drive preparation.\n\nFor UEFI systems create an EFI system partition with an appropriate size, it will later be mounted at /efi.\n\nFor BIOS/GPT setups create a BIOS boot partition with size of 1 MiB for GRUB to store the second stage of BIOS boot loader. Do not mount the partition. For BIOS/MBR setups this is not necessary.\n\nCreate a partition of type 8309, which will later contain the encrypted container for the LVM.\n\nCreate the LUKS encrypted container:\n\n```\n# cryptsetup luksFormat --pbkdf pbkdf2 /dev/sda3\n```\n\nFor more information about the available cryptsetup options see the LUKS encryption options prior to above command.\n\nYour partition layout should look similar to this:\n\n```\n# gdisk -l /dev/sda\n```\n\n```\n...\nNumber  Start (sector)    End (sector)  Size       Code  Name\n   1            2048            4095   1024.0 KiB  EF02  BIOS boot partition\n   2            4096         2101247   1024.0 MiB  EF00  EFI system partition\n   3         2101248        69210111   32.0 GiB    8309  Linux LUKS\n```\n\nOpen the container:\n\n```\n# cryptsetup open /dev/sda3 cryptlvm\n```\n\nThe decrypted container is now available at /dev/mapper/cryptlvm.\n\n"
    },
    {
      "title": "Preparing the logical volumes",
      "level": 3,
      "content": "The LVM logical volumes of this example follow the exact layout as the #LVM on LUKS scenario. Therefore, please follow #Preparing the logical volumes above and adjust as required.\n\nFor UEFI systems, create a mountpoint for the EFI system partition at /efi for compatibility with grub-install and mount it:\n\n```\n# mount --mkdir /dev/sda2 /mnt/efi\n```\n\nAt this point, you should have the following partitions and logical volumes inside of /mnt:\n\n```\n$ lsblk\n```\n\n```\nNAME                  MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nsda                   8:0      0   200G  0 disk\n├─sda1                8:1      0     1M  0 part\n├─sda2                8:2      0   550M  0 part  /mnt/efi\n└─sda3                8:3      0   100G  0 part\n  └─cryptlvm          254:0    0   100G  0 crypt\n    ├─MyVolGroup-swap 254:1    0     4G  0 lvm   [SWAP]\n    ├─MyVolGroup-root 254:2    0    32G  0 lvm   /mnt\n    └─MyVolGroup-home 254:3    0    60G  0 lvm   /mnt/home\n```\n\nNow at this point resume the common Installation guide#Installation steps. Return to this page to customize the Initramfs and Boot loader steps.\n\n"
    },
    {
      "title": "Configuring mkinitcpio",
      "level": 3,
      "content": "Make sure the lvm2 package is installed.\n\nIf using the default busybox-based initramfs, add the keyboard, encrypt and lvm2 hooks to mkinitcpio.conf. If you use a non-US console keymap or a non-default console font, additionally add the keymap and consolefont hooks, respectively.\n\n```\nHOOKS=(base udev autodetect microcode modconf kms keyboard keymap consolefont block encrypt lvm2 filesystems fsck)\n```\n\nIf using a systemd-based initramfs, instead add the keyboard, sd-encrypt and lvm2 hooks. if you use a non-US console keymap or a non-default console font, additionally add the sd-vconsole hook.\n\n```\nHOOKS=(base systemd autodetect microcode modconf kms keyboard sd-vconsole block sd-encrypt lvm2 filesystems fsck)\n```\n\nRegenerate the initramfs after saving the changes. See dm-crypt/System configuration#mkinitcpio for details and other hooks that you may need.\n\n"
    },
    {
      "title": "Configuring GRUB",
      "level": 3,
      "content": "Configure GRUB to allow booting from /boot on a LUKS encrypted partition:\n\n```\n/etc/default/grub\n```\n\n```\nGRUB_ENABLE_CRYPTODISK=y\n```\n\nSet the kernel parameters, so that the initramfs can unlock the encrypted root partition. Using the encrypt hook:\n\n```\n/etc/default/grub\n```\n\n```\nGRUB_CMDLINE_LINUX=\"... cryptdevice=UUID=device-UUID:cryptlvm ...\"\n```\n\nIf using the sd-encrypt hook, the following need to be set instead:\n\n```\n/etc/default/grub\n```\n\n```\nGRUB_CMDLINE_LINUX=\"... rd.luks.name=device-UUID=cryptlvm ...\"\n```\n\nSee dm-crypt/System configuration#Kernel parameters and GRUB#Encrypted /boot for details. The device-UUID refers to the UUID of the LUKS superblock, in this example it is the UUID of /dev/sda3 (the partition which holds the lvm containing the root file system). See Persistent block device naming.\n\ninstall GRUB to the mounted ESP for UEFI booting:\n\n```\n# grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB --recheck\n```\n\ninstall GRUB to the disk for BIOS booting:\n\n```\n# grub-install --target=i386-pc --recheck /dev/sda\n```\n\nGenerate GRUB's configuration file:\n\n```\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\nIf all commands finished without errors, GRUB should prompt for the passphrase to unlock the /dev/sda3 partition after the next reboot.\n\n"
    },
    {
      "title": "Avoiding having to enter the passphrase twice",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with Dm-crypt/Device encryption#With a keyfile embedded in the initramfs.** This article or section is a candidate for merging with Dm-crypt/Device encryption#With a keyfile embedded in the initramfs.\n\nThis article or section is a candidate for merging with Dm-crypt/Device encryption#With a keyfile embedded in the initramfs.\n\nWhile GRUB asks for a passphrase to unlock the LUKS encrypted partition after above instructions, the partition unlock is not passed on to the initramfs. Hence, you have to enter the passphrase twice at boot: once for GRUB and once for the initramfs.\n\nThis section deals with extra configuration to let the system boot by only entering the passphrase once, in GRUB. This is accomplished by with a keyfile embedded in the initramfs.\n\nFirst create a keyfile and add it as LUKS key:\n\n```\n# dd bs=512 count=4 if=/dev/random iflag=fullblock | install -m 0600 /dev/stdin /etc/cryptsetup-keys.d/cryptlvm.key\n# cryptsetup -v luksAddKey /dev/sda3 /etc/cryptsetup-keys.d/cryptlvm.key\n```\n\nAdd the keyfile to the initramfs image:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nFILES=(/etc/cryptsetup-keys.d/cryptlvm.key)\n```\n\nRegenerate the initramfs.\n\nSet the following kernel parameters to unlock the LUKS partition with the keyfile. Using the encrypt hook:\n\n```\nGRUB_CMDLINE_LINUX=\"... cryptkey=rootfs:/etc/cryptsetup-keys.d/cryptlvm.key\"\n```\n\nWhen using the sd-encrypt hook, /etc/cryptsetup-keys.d/name.key will be used by default, so no additional kernel parameters need to be set.\n\nIf for some reason the keyfile fails to unlock the boot partition, systemd will fallback to ask for a passphrase to unlock and, in case that is correct, continue booting.\n\n"
    },
    {
      "title": "Using a USB drive to unlock /boot",
      "level": 3,
      "content": "To avoid having to memorise a complicated password, or using a simple one which may be guessed, a keyfile stored on an external USB drive can be used to unlock the LUKS volume. For this to be secure, this USB drive must be stored securely away from the computer when not in use.\n\nFirst, generate a keyfile in the same way as in #Avoiding having to enter the passphrase twice. Do not use the same keyfile as if the USB drive is lost or compromised you will need to replace the keyfile embedded in initramfs.\n\nCopy this keyfile to your USB drive and create a new GRUB configuration file:\n\n```\n/boot/grub/grub-pre.cfg\n```\n\n```\nset crypto_uuid=UUID-of-the-luks-volume\nset key_disk=UUID-of-the-volume-with-the-key\ncryptomount -u $crypto_uuid -k ($key_disk)/the-location-of-the-key-on-your-usb\nset root=UUID-of-the-unlocked-volume-as-in-grub.cfg\nset prefix=($root)/boot/grub\ninsmod normal\nnormal\n```\n\nCreate a GRUB image and install it (not all of these modules will be needed depending on your file system):\n\n```\n# grub-mkimage -p /boot/grub -O x86_64-efi -c /boot/grub/grub-pre.cfg -o /tmp/grubx64.efi  part_gpt  part_msdos cryptodisk  luks  gcry_rijndael gcry_sha512 lvm ext2 ntfs fat exfat\n# install -v /tmp/grubx64.efi /efi/EFI/GRUB/grubx64.efi\n```\n\n"
    },
    {
      "title": "Root on ZFS",
      "level": 2,
      "content": "Note: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\nTo use dm-crypt with ZFS, see ZFS#Encryption in ZFS using dm-crypt.\n\nAdditionally, ZFS features native encryption, which may also be utilized to encrypt the system root, excluding the boot loader and file system metadata. See:\n\n- Arch Linux Root on ZFS guide on the OpenZFS page,\n- Install Arch Linux on ZFS.\n\nAfter the installation, a boot loader can be verified with Secure Boot on UEFI-based systems.\n\n"
    }
  ]
}