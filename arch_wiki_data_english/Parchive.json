{
  "title": "Parchive",
  "url": "https://wiki.archlinux.org/title/Parchive",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- List of applications/Security#Hash checkers\n\nParchive (Parity archive) is a file verification and repair tool using PAR2 files to detect damage in data files and repair them if necessary. It can be used with any kind of file.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the par2cmdline package. The commands par2, par2create, par2verify and par2repair are now available.\n\n"
    },
    {
      "title": "How it works",
      "level": 2,
      "content": "par2create takes the input file(s) and interprets the input as a certain number of data blocks. Based on the data blocks, par2create then creates recovery blocks with the help of the w:Reed–Solomon error correction code. Later, you can trade any recovery block for any corrupted data block in order to repair the source data. You need as much recovery blocks as data blocks have gone corrupted in order to repair the file(s) successfully.\n\nLet us say you want to calculate 30% of recovery information for a precious file:\n\n```\n$ par2create -r30 file\n```\n\nParchive now has created the file.par2 index file which is essentially not needed for recovery. Additionally, it has created the recovery blocks and has spread them into multiple files. If you created, say, 592 recovery blocks, you will find the files\n\n```\nfile.vol000+001.par2\nfile.vol001+002.par2\nfile.vol003+004.par2\nfile.vol007+008.par2\nfile.vol015+016.par2\nfile.vol031+032.par2\nfile.vol063+064.par2\nfile.vol127+128.par2\nfile.vol255+256.par2\nfile.vol511+081.par2\n```\n\nThe number left of the plus sign is the index of the first recovery block in the particular file and the number on the right the number of recovery blocks the file provides.\n\nIn the early days where no integrity check was done on link level these files proved useful since one could select recovery files based on the number of data blocks gone corrupted. If your download left you with 43 corrupted data blocks, you could convert the number to binary and instantly see what recovery files you had to fetch:\n\n```\n32 16  8  4  2  1\n43 = 1  0  1  0  1  1\n\n→ download *+032.par2, *+008.par2, *+002.par2 and *+001.par2.\n```\n\nThis is very efficient in terms of bandwidth usage. One would finally call\n\n```\n$ par2repair file*.par2\n```\n\nin order to repair the downloaded file(s). You can ignore the index file since Parchive can handle a missing index file. Sometimes it is useful to include the -N parameter in order to reach an intact data block which would otherwise go undetected.\n\n"
    },
    {
      "title": "Batch-protecting your files",
      "level": 3,
      "content": "It may be the case that you do not want to serve clients recovery files, but want to ensure additional integrity of your files. In times of helium filled hard disk drives, shingled-bit technology, dense capacity per square centimeter, transfer losses etc. the probability of bit rot is high. Remember that you should always have (automated) backups of your data, but a little additional protection does not hurt, especially since we have so much storage available today. By creating par2 files you have a much more convenient way to verify the integrity of your data and restore the data than running application programs over the files and sieving for error outputs. Bit rot now can happen in both the original file(s) AND the recovery file(s), and you still can repair the original file(s).\n\nAs a consequence, one recovery file containing all recovery packets is sufficient (parameter -n1). This also reduces the amount of recovery data. An important question to answer is the percentage of redundancy you want to have. Especially for smaller files (<1 MiB) the amount of recovery data does not really correlate with the original file size:\n\nTable content:\nOriginal data | percentage | Recovery data (without index)\n184.8 KiB | 5 | 287.8 KiB\n184.8 KiB | 100 | 743.1 KiB\n3.4 MiB | 5 | 458.8 KiB\n3.4 MiB | 30 | 1.5 MiB\n3.4 MiB | 100 | 4 MiB\n1.7 GiB | 5 | 87.6 MiB\n\n5% is a reasonable amount of recovery data but you can go up to 100% recovery data for really important files. 100% recovery files can restore your file if you accidentally deleted the original one and you are too lazy to search for the file in your backup (you have one, have you? :).\n\nHere is a simple script which runs over the current directory recursively and batch-protects the files:\n\n```\n$ export PATH=$PATH:$HOME/bin/\n```\n\n```\n~/bin/batchprotect.sh\n```\n\n```\n#!/bin/bash\nreadonly REDUNDENCY_PERCENTAGE=5\nreadonly PRINT_ON_SUCCESS=1\n\ncreate_par2() {\n\n  local current_file=\"${1}\"\n  if [ ! -e \"${current_file}-5p.par2\" ] && [ -s \"${current_file}\" ]; then\n    if par2create -n1 -q -q -r\"${REDUNDENCY_PERCENTAGE}\" \"${current_file}\"; then\n\n      if [ \"${PRINT_ON_SUCCESS}\" = 1 ]; then\n        printf '\\033[1;37m%s \\033[1;34m%s \\033[1;32m%s \\033[0m\\n' \\\n                'Creating par2 on' \"${current_file}\" 'successful'\n      fi\n\n      rm \"${current_file}.par2\"\n      mv \"${current_file}\".vol*par2 \"${current_file}-${REDUNDENCY_PERCENTAGE}p.par2\"\n      return 0\n\n    else\n      printf '\\033[1;37m%s \\033[1;34m%s \\033[1;31m%s \\033[0m\\n' \\\n              'Creating par2 on' \"${current_file}\" 'failed'\n      return 1\n    fi\n  fi\n}\n\nverify_par2() {\n\n  local current_file=\"${1}\"\n  if [ -f \"${current_file}-${REDUNDENCY_PERCENTAGE}p.par2\" ]; then\n    if par2verify -q -q \"${current_file}-${REDUNDENCY_PERCENTAGE}p.par2\"; then\n      if [ \"${PRINT_ON_SUCCESS}\" = 1 ]; then\n        printf '\\033[1;37m%s \\033[1;34m%s \\033[1;32m%s \\033[0m\\n' \\\n                'Verifying par2 on' \"${current_file}\" 'successful'\n      fi\n      return 0\n    else\n      printf '\\033[1;37m%s \\033[1;34m%s \\033[1;31m%s \\033[0m\\n' \\\n              'Verifying par2 on' \"${current_file}\" 'failed'\n      return 1\n    fi\n  fi\n}\n\nrepair_par2() {\n\n  local current_file=\"${1}\"\n  if [ -f \"${current_file}-${REDUNDENCY_PERCENTAGE}p.par2\" ]; then\n    if par2repair -p -q -q \"${current_file}-${REDUNDENCY_PERCENTAGE}p.par2\"; then\n      if [ \"${PRINT_ON_SUCCESS}\" = 1 ]; then\n        printf '\\033[1;37m%s \\033[1;34m%s \\033[1;32m%s \\033[0m\\n' \\\n                'Repairing' \"${current_file}\" 'successful'\n      fi\n      return 0\n    else\n      printf '\\033[1;37m%s \\033[1;34m%s \\033[1;31m%s \\033[0m\\n' \\\n              'Repairing' \"${current_file}\" 'failed'\n      return 1\n    fi\n  fi\n}\n\nmain() {\n\n  while read -r current_file; do\n    # Create or verify\n    if [ ! -e \"${current_file}-${REDUNDENCY_PERCENTAGE}p.par2\" ]; then\n      create_par2 \"$current_file\"\n    else\n      if ! verify_par2 \"$current_file\"; then\n        repair_par2 \"$current_file\"\n      fi\n    fi\n  # We ignore the file itself, any par2/sig extension and any .git directory and print without the leading ./\n  done < <(find . -type f ! -name '*par2loop.sh' ! -name '*par2' ! -name '*.sig' ! -path '*.git*' -prune -a -printf '%P\\n' | shuf)\n}\n\nmain\n```\n\nYou would then call batchprotect.sh in order to have all files in the current directory recursively protected by Parchive. Additionally, you do not have to maintain list of checksums since gpg can do that for you, too.\n\n"
    },
    {
      "title": "Verification",
      "level": 3,
      "content": "```\n$ par2verify file-5.par2\n$ cfv file-5.par2\n$ gpg --verify file.sig\n```\n\nAnd, if you changed the path of the original file:\n\n```\n$ par2verify -B / file-5.par2 /new/path/to/fileRenamed\n$ gpg --verify file.sig /new/path/to/fileRenamed\n```\n\nYou can also change the path of the par2/sig file.\n\n"
    }
  ]
}