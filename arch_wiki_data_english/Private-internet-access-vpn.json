{
  "title": "Private-internet-access-vpn",
  "url": "https://wiki.archlinux.org/title/Private-internet-access-vpn",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nPrivate Internet Access is a subscription-based VPN service.\n\n- All PIA applications got released as open source: https://github.com/pia-foss\n- WireGuard got added to the VPN servers and VPN Apps\n- VPN servers got migrated from Ubuntu 14.04 LTS to Arch Linux\n- All VPN servers now are encrypted via dm-crypt, following advice from the Arch Linux developers\n- All VPN services now run in memory via ramdisk\n\n"
    },
    {
      "title": "Manual",
      "level": 2,
      "content": "- Disable IPv6 since it is not supported by PIA.[1]\n- Ensure you are using PIA's DNS servers, listed on their website.\n\n"
    },
    {
      "title": "Installation",
      "level": 4,
      "content": "Download OpenVPN configuration files from PIA. Extract the ZIP file to a place in your user home directory or elsewhere that is memorable for future access. It is worth noting that even when WireGuard can be used on the Linux binary and on the app, PIA has yet to provide WireGuard files for configuration. In other words, only OpenVPN can be used when using the NetworkManager approach.\n\nInstall and configure NetworkManager along with the NetworkManager applet and OpenVPN plugin.\n\n"
    },
    {
      "title": "Configuration",
      "level": 4,
      "content": "1. Right click on the NetworkManager applet from your desktop environment and click Edit Connections. Click the Plus sign in the bottom left corner of the Network Connections window that appears.\n1. When you choose a connection type, click the drop-down menu and scroll all the way down until you reach \"Import a saved VPN configuration\". Select that option. Now, click Create.\n1. Navigate to the directory you extracted all of the OpenVPN files to earlier, then open one of the files from that folder. Generally speaking, you will want to open the file that is associated with the connection you specifically want.\n1. After you have opened one of the OpenVPN files, the window that appears should be \"Editing <connection type>\". Type in your Username and Password that you received from Private Internet Access. There is an icon in the password box indicating user permission of the credentials; change the settings as you wish.\n1. Now, click Advanced. Next to \"Use LZO data compression\", click the drop-down menu to select \"adaptive\" and next to \"Set virtual device type\", click the menu and make sure \"TUN\" is selected.\n1. Next, go to the security tab and select as cipher \"AES-128-CBC\" and as HMAC Authentication \"SHA-1\".\n1. Click the OK button at the bottom left of the window to save this change.\n1. Go to the \"IPv6 Settings\" tab and select for \"Method\" \"Ignore\" since PIA blocks IPv6 addresses [2].\n1. Click Save at the bottom right of the \"Editing <connection type>\" window.\n\n"
    },
    {
      "title": "Usage",
      "level": 4,
      "content": "Left click on the NetworkManager applet. There is a VPN Connections menu. Inside it should be the VPN connection you saved. Click on it to connect to Private Internet Access.\n\nWhen a gold lock has appeared over the NetworkManager applet, you are successfully connected to Private Internet Access. Visit Private Internet Access and confirm that you are connected by referring to the status message at the top of their homepage.\n\n"
    },
    {
      "title": "Installation",
      "level": 4,
      "content": "Download OpenVPN configurations from PIA. Unzip the file and move all files to /etc/openvpn/client. Ensure the files have root as the owner.\n\n"
    },
    {
      "title": "Usage",
      "level": 4,
      "content": "See OpenVPN#Starting OpenVPN.\n\nTo test to see if you have successfully connected to the VPN, see this article which recommends the following four tools:\n\n- DNS Leak\n- IPv6 Leak\n- Speed Test\n- WebRTC\n\n"
    },
    {
      "title": "Official installation script",
      "level": 3,
      "content": "Private Internet Access has an installation script that sets up NetworkManager for use with the VPN. Download the script here and then run to set up.\n\n"
    },
    {
      "title": "Official Linux client",
      "level": 3,
      "content": "Private Internet Access now has an official client for Linux with support for Arch. Download the client from this page, unzip the file (e.g. pia-v81-installer-linux.tar.gz) and run the installation script (.e.g. # ./pia-v81-installer-linux.sh).\n\n"
    },
    {
      "title": "Packages",
      "level": 3,
      "content": "- piavpn-bin — Automates the official installer\n\n- Private Internet Access/AUR — Installs profiles for NetworkManager, ConnMan, and OpenVPN\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install private-internet-access-vpnAUR.\n\nThe package provides a tool that downloads the OpenVPN configuration files and stores them in /etc/openvpn. However, it updates the file names to better support using them on the command line.\n\nConfiguration for the package is stored in /etc/private-internet-access.\n\n"
    },
    {
      "title": "After installation",
      "level": 2,
      "content": "If there are any issues with connectivity and you are running connman, please restart connman-vpn.service.\n\n"
    },
    {
      "title": "Enabling auto-login",
      "level": 3,
      "content": "Enabling auto-login allows a user to connect to the VPN service without having to type any passwords on the command line (needed when using networkmanager). To set this up, you must do the following:\n\n- Create /etc/private-internet-access/login.conf\n- Add your username and password in the file. Make sure LINE 1 is your username and LINE 2 is your password. Do not add any other text to the file or it will not work (this is a limitation of OpenVPN):\n\n```\n/etc/private-internet-access/login.conf\n```\n\n```\nUSERNAME\nPASSWORD\n```\n\n- Change permissions of the file to 0600 and owner to root:root:\n\n```\n# chmod 0600 /etc/private-internet-access/login.conf\n# chown root:root /etc/private-internet-access/login.conf\n```\n\nThis secures the access to the file from non-root users. Read more on File permissions and attributes. It is required when activating auto-login.\n\n- Run pia -a as root. If you have networkmanager installed, it will create the configuration files for networkmanager. Make sure to restart networkmanager to see them. If you have connman installed, it will create the configuration files for connman. Start connman-vpn.service if not running already. It will auto load the profiles. Regardless, it will create the OpenVPN .conf files in /etc/openvpn/client.\n\n- If you have networkmanager installed, it will create the configuration files for networkmanager. Make sure to restart networkmanager to see them.\n- If you have connman installed, it will create the configuration files for connman. Start connman-vpn.service if not running already. It will auto load the profiles.\n- Regardless, it will create the OpenVPN .conf files in /etc/openvpn/client.\n\n"
    },
    {
      "title": "Manually connecting to VPN",
      "level": 3,
      "content": "```\n# openvpn --config /etc/openvpn/client/{config_file_name}\n```\n\n{config_file_name} will be listed in the /etc/openvpn directory or run pia -l.\n\n"
    },
    {
      "title": "For connman",
      "level": 4,
      "content": "- enable the connman-vpn.service.\n- Run pia -a as root (if you have not already)\n\n```\n# pia -a\n```\n\n- Get a list of all connman services and find the name of the VPN config (for example, Finland) in the second column\n\n```\nconnmanctl services\n```\n\n```\n...\n\n*   Finland_VPN          vpn_fi_privateinternetaccess_com_privateinternetaccess_com\n...\n```\n\n- Connect to your VPN chosen VPN config to create a connman settings file for it:\n\n```\n# connmanctl connect vpn_fi_privateinternetaccess_com_privateinternetaccess_com\n```\n\n- Edit the relevant settings file, e.g /var/lib/connman/vpn_fi_privateinternetaccess_com_privateinternetaccess_com/settings\n- Change the AutoConnect=false line to AutoConnect=true, save, exit, reboot\n\n- You can also configure autoconnect in the Details tab of cmstAUR\n- The VPN will keep working even after waking from suspend, unlike vanilla openvpn (see below)\n\n"
    },
    {
      "title": "Advanced options",
      "level": 3,
      "content": "- Create /etc/private-internet-access/pia.conf\n- For the [pia] section:\n\nTable content:\noption | option values | description\nopenvpn_auto_login | True,False | Default: True; Configures if OpenVPN configuration files should have auto-login enabled. See #Enabling auto-login\n\n- For the [configure] section:\n\nTable content:\noption | option values | description\napps | cm, nm | Default: all; This configures which applications are configured. The application will configure all applications installed; however, if a user only needed configurations for Conman, then setting this to 'cm' would generate only those configurations even if they had NetworkManager installed. OpenVPN configurations are always generated. cm = Conman; nm = NetworkManager\nport | See for list: PIA's Support - Which encryption/auth settings should I use for ports on your gateways? | Default: 1198\n\n"
    },
    {
      "title": "Example configuration",
      "level": 3,
      "content": "The configuration enables auto-login, configures only Connman and OpenVPN, uses port 8080 over UDP, and configures only US East, US West, Japan, UK London, and UK Southampton VPN endpoints. OpenVPN is always configured.\n\n```\n/etc/private-internet-access/pia.conf\n```\n\n```\n[pia]\nopenvpn_auto_login = True\n\n[configure]\napps = cm\nport = 8080\nhosts = US East, US West, Japan, UK London, UK Southampton\n```\n\n"
    },
    {
      "title": "Using NetworkManager's applet",
      "level": 3,
      "content": "In order to use the network-manager-applet to connect:\n\n1. Right click the NetworkManager icon in the system tray\n1. and click Configure Network Connections...\n1. then click Add\n1. choose Import VPN...\n1. browse to /etc/openvpn/client/CA_Toronto.conf or whichever configuration you would like to use\n1. then click Open\n1. Remove only the :1198 from the Gateway: (if present) as only the domain name should be in this box\n1. for the Username: type in your p1234567 username\n1. for the Password: type in the password that goes with your p-xxxxx username\n1. then click Advanced...\n1. set Custom gateway port: and set it to 1198\n1. click on the Security tab\n1. set the Cipher: to AES-128-CBC\n1. set the HMAC Authentication: to SHA-1\n1. click OK\n1. click OK again\n\n"
    },
    {
      "title": "DNS Leaks",
      "level": 3,
      "content": "Concerning DNS Leaks (see python-pia/#13), NetworkManager leaks information due to how /etc/resolv.conf is setup. The script below was posted by @maximbaz to work around the problem. You may need to disable IPv6 if you continue to get leaks.\n\n```\n/etc/NetworkManager/dispatcher.d/pia-vpn\n```\n\n```\n#!/bin/bash\n#/etc/NetworkManager/dispatcher.d/pia-vpn\n\ninterface=\"$1\"\nstatus=$2\n\ncase $status in\n  vpn-up)\n    if [[ $interface == \"tun0\" ]]; then\n      chattr -i /etc/resolv.conf\n      echo -e \"nameserver 209.222.18.222\\nnameserver 209.222.18.218\" > /etc/resolv.conf\n      chattr +i /etc/resolv.conf\n    fi\n    ;;\n  vpn-down)\n    if [[ $interface == \"tun0\" ]]; then\n      chattr -i /etc/resolv.conf\n    fi\n    ;;\nesac\n```\n\n"
    },
    {
      "title": "vopono",
      "level": 3,
      "content": "vopono is a tool to run specific applications via a VPN connection with temporary network namespaces. Automatic configuration generation is supported for PrivateInternetAccess.\n\nIt includes kill switch support by default, and support for forwarding and proxying ports from the network namespace to the host so you can run daemons and servers via the VPN whilst the rest of the system is unaffected.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- python-pia GitHub\n- PIA Client Support\n\n"
    },
    {
      "title": "Internet \"kill switch\"",
      "level": 3,
      "content": "The following iptables rules only allow network traffic through the tun interface, with the exception that traffic is allowed to PIA's DNS servers and to port 1197, which is used in establishing the VPN connection:\n\n```\n/etc/iptables/iptables.rules\n```\n\n```\n# Set default policies for INPUT, FORWARD, and OUTPUT chains to DROP\n# This means all traffic is blocked by default unless explicitly allowed\n-P INPUT DROP\n-P FORWARD DROP\n-P OUTPUT DROP\n\n# Allow incoming traffic that is related to established connections\n-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n# Allow all traffic on the loopback interface\n-A INPUT -i lo -j ACCEPT\n-A OUTPUT -o lo -j ACCEPT\n# Allow all incoming traffic on tun interfaces\n-A INPUT -i tun+ -j ACCEPT\n-A OUTPUT -o tun+ -j ACCEPT\n# Allow connections to PIA servers\n-A OUTPUT -d 209.222.18.222/32 -j ACCEPT\n-A OUTPUT -d 209.222.18.218/32 -j ACCEPT\n# allow VPN establishing\n-A OUTPUT -p udp -m udp --dport 1197 -j ACCEPT\n# Reject all other outgoing traffic with an ICMP net unreachable message; catches any traffic not matched by previous rules\n-A OUTPUT -j REJECT --reject-with icmp-net-unreachable\n\n# Commit the changes to iptables\nCOMMIT\n```\n\nThis ensures that if you are disconnected from the VPN unknowingly, no network traffic is allowed in or out.\n\nIf you wish to additionally access devices on your LAN, you will need to explicitly allow them. For example, to allow access to devices on 192.0.0.0/24, add the following two rules (before any REJECT rule):\n\n```\n-A INPUT -s 192.168.0.0/24 -j ACCEPT\n-A OUTPUT -d 192.168.0.0/24 -j ACCEPT\n```\n\nAdditionally, the above rules block the ICMP protocol, which is probably not desired. See this thread for potential pitfalls of using these iptables rules as well as more details.\n\n"
    },
    {
      "title": "Setting PIA DNS",
      "level": 3,
      "content": "If you find that Network Manager is controlling your host's DNS settings, and therefore your host cannot resolve any address, you will have to manually set the DNS server and attributes. You should note a symbolic link when running the following command:\n\n```\n$ ls -l /etc/resolv.conf\n```\n\nRemove the symbolic link with rm /etc/resolv.conf Then create a new /etc/resolv.conf and add the following:\n\n```\n/etc/resolv.conf\n```\n\n```\nnameserver 209.222.18.222\nnameserver 209.222.18.218\n```\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nNext regenerate resolvconf by typing:\n\n```\n# resolvconf -u\n```\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nFinally make the file immutable so no other application can modify it:\n\n```\nchattr +i /etc/resolv.conf\n```\n\n"
    },
    {
      "title": "I cannot connect to OpenVPN using PIA manager, or OpenVPN does not work",
      "level": 3,
      "content": "PIA manager still uses OpenVPN under the hood, so even if you do not directly use one of the OpenVPN methods, you still need it. Firstly, check that it is installed. If you used one of the installation scripts, this should be done for you.\n\nIf you are getting errors like #<Errno::ECONNREFUSED: Connection refused - connect(2) for \"127.0.0.1\" port 31749>, that probably means TAP/TUN is not currently running. Either your kernel does not have it, in which case install a kernel which does (or compile a fresh one), or it is not currently running, in which case it needs to be started:\n\n```\n# modprobe tun\n```\n\n"
    }
  ]
}