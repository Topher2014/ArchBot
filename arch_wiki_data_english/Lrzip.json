{
  "title": "Lrzip",
  "url": "https://wiki.archlinux.org/title/Lrzip",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Long Range ZIP (or Lzma RZIP) is a compression program optimised for large files, consisting mainly of an extended rzip step for long-distance redundancy reduction and a normal compressor (LZMA, LZO, gzip, bzip2, or ZPAQ) step. The larger the file and the more memory you have, the better the compression advantage this will provide, especially once the files are larger than 100MB. The advantage can be chosen to be either size (much smaller than bzip2) or speed (much faster than bzip2).\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the lrzip package.\n\n"
    },
    {
      "title": "Compression",
      "level": 3,
      "content": "Compression of directories (recursive) requires lrztar, which first tars the directory, then compresses the single file just like tar does when users compress with gzip or xz (tar zcf ... and tar Jcz ..., respectively). Note that the compression algorithms are used after the rzip-like precompressing of the archive, instead of e.g. plain LZMA compression in normal \"LZMA compressed archives\".\n\nThis will produce an LZMA compressed archive foo.tar.lrz from a directory named foo:\n\n```\n$ lrztar foo\n```\n\nThis will produce an LZMA compressed archive bar.lrz from a file named bar:\n\n```\n$ lrzip bar\n```\n\nFor extreme compression, add the -z switch which enables ZPAQ but takes notably longer than LZMA:\n\n```\n$ lrztar -z foo\n```\n\nFor extremely fast compression and decompression, use the -l switch for LZO:\n\n```\n$ lrzip -l bar\n```\n\nBy default, lrzip can use up to your available ram size to remember the file block history. If the file you compress is bigger than that, add the -U switch to enable on disk mapping. Note that it will be considerably slower but will handle file of any size:\n\n```\n$ lrzip -U bar\n```\n\n"
    },
    {
      "title": "Decompression",
      "level": 3,
      "content": "To completely extract an archived directory:\n\n```\n$ lrzuntar foo.tar.lrz\n```\n\nTo decompress bar.lrz to bar:\n\n```\n$ lrunzip bar.lrz\n```\n\n"
    },
    {
      "title": "Details",
      "level": 2,
      "content": "Lrzip uses an extended version of rzip, which does a first pass long distance redundancy reduction. The lrzip modifications make it scale according to memory size. The data is then either:\n\n1. Compressed by LZMA (default), which gives excellent compression at approximately twice the speed of bzip2 compression\n1. Compressed by a number of other compressors chosen for different reasons, in order of likelihood of usefulness: ZPAQ: Extreme compression up to 20% smaller than LZMA, but ultra slow at compression AND decompression. LZO: Extremely fast compression and decompression, which on most machines compresses faster than disk writing making it as fast (or even faster) than simply copying a large file. GZIP: Almost as fast as LZO, but with better compression. BZIP2: A defacto linux standard of sorts, but is the middle ground between LZMA and gzip and neither here nor there.\n1. Leaving it uncompressed and rzip prepared. This form improves substantially any compression performed on the resulting file in both size and speed (due to the nature of rzip preparation merging similar compressible blocks of data and creating a smaller file). By \"improving\" it will either speed up the very slow compressors with minor detriment to compression, or greatly increase the compression of simple compression algorithms.\n\n1. ZPAQ: Extreme compression up to 20% smaller than LZMA, but ultra slow at compression AND decompression.\n1. LZO: Extremely fast compression and decompression, which on most machines compresses faster than disk writing making it as fast (or even faster) than simply copying a large file.\n1. GZIP: Almost as fast as LZO, but with better compression.\n1. BZIP2: A defacto linux standard of sorts, but is the middle ground between LZMA and gzip and neither here nor there.\n\nThe major disadvantages are:\n\n1. The main lrzip application only works on single files, so it requires the lrztar wrapper to fake a complete archiver.\n1. It requires a lot of memory to get the best performance out of (as much memory as the size of the data to compress; but see the sliding mmap below), and is not really usable (for compression) with less than 256MB. Decompression requires less ram and works on smaller ram machines. Sometimes swap may need to be enabled on these lower ram machines for the operating system to be happy.\n1. STDIN/STDOUT works fine on both compression and decompression, but larger files compressed in this manner will end up being less efficiently compressed.\n\nThe unique feature of lrzip is that it tries to make the most of the available ram in your system at all times for maximum benefit. It does this by default, choosing the largest sized window possible without running out of memory. It also has a unique \"sliding mmap\" feature which makes it possible to even use a compression window larger than your ramsize, if the file is that large. It does this (with the -U option) by implementing one large mmap buffer as per normal, and a smaller moving buffer to track which part of the file is currently being examined, emulating a much larger single mmapped buffer. Unfortunately, this mode can be many times slower.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- GitHub repository\n- Benchmarks (from the author)\n\n"
    }
  ]
}