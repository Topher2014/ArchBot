{
  "title": "Install Arch Linux on WSL",
  "url": "https://wiki.archlinux.org/title/Install_Arch_Linux_on_WSL",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Arch Linux provides an official WSL (Windows Subsystem for Linux) image as part of the archlinux-wsl project.\n\nImages are built and released monthly and aim to provide the simplest but complete system to offer an outright Arch Linux experience with WSL.\n\nNote: **WSL 2** \n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "From a Windows system with WSL 2 installed, use one of the following installation methods.\n\n"
    },
    {
      "title": "Automated install",
      "level": 3,
      "content": "Run the following command in a PowerShell prompt:\n\n```\n> wsl --install archlinux\n```\n\nYou can then run Arch Linux in WSL via the archlinux application from the Start menu, or by running wsl -d archlinux in a PowerShell prompt.\n\n"
    },
    {
      "title": "WSL 2.4.4 or greater",
      "level": 4,
      "content": "Download the latest Arch Linux .wsl image and double-click on it to start the installation or run the following command in a PowerShell prompt:\n\n```\n> wsl --install --from-file WSL_image\n```\n\nFor instance:\n\n```\n> wsl --install --from-file C:\\Users\\Username\\Downloads\\archlinux-2025.04.01.121271.wsl\n```\n\nYou can then run Arch Linux in WSL via the archlinux application from the Start menu, or by running wsl -d archlinux in a PowerShell prompt.\n\n"
    },
    {
      "title": "WSL prior to 2.4.4",
      "level": 4,
      "content": "Download the latest Arch Linux .wsl image and run the following command in a PowerShell prompt:\n\n```\n> wsl --import Distro_name Install_location WSL_image\n```\n\nFor instance:\n\n```\n> wsl --import archlinux C:\\Users\\Username\\AppData\\Local\\wsl\\archlinux C:\\Users\\Username\\Downloads\\archlinux-2025.04.01.121271.wsl\n```\n\nYou can then run Arch Linux in WSL via the archlinux application from the Start menu, or by running wsl -d archlinux in a PowerShell prompt. Make sure to execute the first setup script by running /usr/lib/wsl/first-setup.sh right after the first launch.\n\n"
    },
    {
      "title": "Set default user",
      "level": 3,
      "content": "To set a different default user than root, first ensure the user has been created, then append the following to the /etc/wsl.conf file:\n\n```\n[user]\ndefault=username\n```\n\nMake sure to give your root user a password before you close your session. If you find yourself 'locked out', invoke\n\n```\n> wsl -u root\n```\n\nfrom a CMD window in the windows host.\n\nThe change will apply at the next session. To terminate your current session, run the following command in a PowerShell prompt:\n\n```\n> wsl --terminate archlinux\n```\n\n"
    },
    {
      "title": "Run graphical applications with WSLg",
      "level": 3,
      "content": "WSLg (Windows Subsystem for Linux GUI) is a project that aims to enable running Linux applications with audio (PulseAudio) and graphical (X11 and Wayland) support within WSL.\n\nTo be able to run graphical applications with WSLg, enable GUI applications support in the %USERPROFILE%/.wslconfig file on your Windows system (create it if it does not exists) with the following content:\n\n```\n[wsl2]\nguiApplications = true\n```\n\nWith the above set, WSL creates symlinks upon opening a session to the X11 and Wayland server's sockets but these are overriden by systemd during init. See microsoft/wslg#1032 for more details.\n\nWhile waiting for upstream to resolve this problem, you can create the symlinks manually. First, create a systemd-tmpfiles configuration to link the directory containing the X11 server's socket:\n\n```\n/etc/tmpfiles.d/wslg.conf\n```\n\n```\n#      Path         Mode UID  GID  Age Argument\nL+     %T/.X11-unix -    -    -    -   /mnt/wslg/.X11-unix\n```\n\nThen, create the following file to link the directory containing the PulseAudio and Wayland server's socket as well as set the Gallium driver:\n\n```\n/etc/profile.d/wslg.sh\n```\n\n```\nexport GALLIUM_DRIVER=d3d12\n\nfor i in \"/mnt/wslg/runtime-dir/\"*; do\n  if [Â ! -L \"$XDG_RUNTIME_DIR$(basename \"$i\")\" ]; then\n    [ -d \"$XDG_RUNTIME_DIR$(basename \"$i\")\" ] && rm -r \"$XDG_RUNTIME_DIR$(basename \"$i\")\"\n    ln -s \"$i\" \"$XDG_RUNTIME_DIR$(basename \"$i\")\"\n  fi\ndone\n```\n\nChanges will apply at the next session. To terminate your current session, run the following command in a PowerShell prompt:\n\n```\n> wsl --terminate archlinux\n```\n\n"
    },
    {
      "title": "Hardware accelerated rendering",
      "level": 4,
      "content": "To utilise hardware accelerated rendering in WSL, install the following packages:\n\n- mesa - Contains the d3d12 Gallium driver for OpenGL\n- vulkan-dzn - Contains the experimental dzn (also known as microsoft-experimental) Vulkan driver\n\nYou will need to install the vulkan-icd-loader (and lib32-vulkan-icd-loader if you also want to run 32-bit applications) as well.\n\nif openGL falling back to llvmpipe software renderer on Intel GPUs, you need to link libedit (sudo ln -s /usr/lib64/libedit.so.0 /usr/lib64/libedit.so.2), see https://github.com/microsoft/wslg/issues/996 and https://wiki.gentoo.org/wiki/Gentoo_in_WSL and you also need to export GALLIUM_DRIVER=d3d12 according to https://github.com/microsoft/wslg/issues/996#issuecomment-2720501874\n\n"
    },
    {
      "title": "WSL interoperability",
      "level": 3,
      "content": "WSL features interoperability between the Windows and WSL. This allows you to run Windows binaries from within WSL.\n\nTo use interoperability, make sure it is enabled in the /etc/wsl.conf file with the following content:\n\n```\n[interop]\nenabled = true\n```\n\nVarious tools have been created to allow you to utilise Windows services and features from within WSL.\n\n"
    },
    {
      "title": "Bridge the ssh-agent service from Windows",
      "level": 4,
      "content": "wsl2-ssh-agent is a tool that allows you to use the Windows SSH agent from within WSL.\n\nThis is especially useful if you utilise *-sk SSH keys requiring the use of physical security keys or even Windows Hello.\n\nInstall wsl2-ssh-agentAUR and add the following to your ~/.bashrc:\n\n```\neval \"$(/usr/sbin/wsl2-ssh-agent)\"\n```\n\nRestart your shell and the SSH_AUTH_SOCK environment variable should be configured correctly.\n\n"
    },
    {
      "title": "PAM authentication with Windows Hello",
      "level": 4,
      "content": "WSL-Hello-Sudo is a PAM plugin that allows you to authenticate your user via Windows Hello.\n\nInstall wsl-hello-sudo-binAUR and run /opt/wsl-hello-sudo/install.sh. The installer will copy a Windows executable to a directory of your choosing and store a certificate used to authenticate beside it.\n\nAdd auth sufficient pam_wsl_hello.so to any /etc/pam.d configuration files you wish to authenticate with Windows Hello for. For example, with sudo:\n\n```\n/etc/pam.d/sudo\n```\n\n```\n#%PAM-1.0\nauth            sufficient      pam_wsl_hello.so\nauth            include         system-auth\naccount         include         system-auth\nsession         include         system-auth\n```\n\n"
    },
    {
      "title": "Passing devices to WSL",
      "level": 3,
      "content": "WSL 2 is a Hyper-V virtual machine. This allows for passthrough for physical devices from the host (Windows) to the guest (WSL 2).\n\n"
    },
    {
      "title": "Mount a disk",
      "level": 4,
      "content": "WSL 2 supports attaching and mounting disks available to Windows.\n\nTo do so, first idenitfy the DeviceID for the given disk with the following PowerShell command:\n\n```\n> GET-CimInstance -query \"SELECT * from Win32_DiskDrive\"\n```\n\nOnce you have found the disk you would like to pass, run the following on Windows (with Administrator privileges):\n\n```\n> wsl --mount DeviceID --bare\n```\n\nOnce attached, you should be able to see the device with lsblk.\n\nTo unmount a disk, run:\n\n```\n> wsl --unmount DeviceID\n```\n\nFor more information, see https://learn.microsoft.com/en-us/windows/wsl/wsl2-mount-disk.\n\n"
    },
    {
      "title": "Connect USB devices",
      "level": 4,
      "content": "usbipd-win is a project which allows for sharing locally connected USB devices to other machines, including WSL 2.\n\nYou first need to install the software on Windows. You can either run the installer (.msi) from the latest release or use use the Windows Package Manager:\n\n```\n> winget install usbipd\n```\n\nOnce installed, identify the USB devices available using and take note of the bus ID by running the following on Windows:\n\n```\n> usbipd list\n```\n\nPrepare the USB device you have selected by running (this requires Administrator privileges):\n\n```\n> usbipd bind --busid busid\n```\n\nThen, attach the USB device to WSL 2 using:\n\n```\n> usbipd attach --wsl --busid busid\n```\n\nOnce attached, you should be able to see the device with lsusb.\n\nTo detatch a USB device, run:\n\n```\n> usbipd detach --busid busid\n```\n\nFor more information, see https://learn.microsoft.com/en-us/windows/wsl/connect-usb.\n\n"
    },
    {
      "title": "systemd support",
      "level": 3,
      "content": "The Arch Linux WSL image provides systemd support.\n\nHowever, there are known pending issues that may require additional actions for systemd to work properly.\n\n"
    },
    {
      "title": "systemd-firstboot.service hanging",
      "level": 4,
      "content": "The systemd-firstboot.service job hangs at first boot, preventing any other systemd services to start.\n\nWhile waiting for the actual root cause of this issue (and a proper fix for it) to be identified, a workaround is automatically applied by the first-setup script when running the image for the first time, so you should not have to do anything on that front.\n\nSee archlinux/archlinux-wsl#3 for more details.\n\n"
    },
    {
      "title": "systemd requires plain cgroup v2 support",
      "level": 4,
      "content": "Currently, WSL starts systems with cgroup v1 support by default[1] but systemd >= 256 dropped support for it[2] and requires plain cgroup v2 support.\n\nWhile waiting for WSL to start systems with plain cgroup v2 support by default, you can force it by disabling cgroup v1 support in the %USERPROFILE%/.wslconfig file on your Windows system (create it if it does not exists) with the following content:\n\n```\n[wsl2]\nkernelCommandLine = cgroup_no_v1=all systemd.unified_cgroup_hierarchy=1\n```\n\nThe change will apply at the next session. To terminate your current session, run the following command in a PowerShell prompt:\n\n```\n> wsl --terminate archlinux\n```\n\n"
    },
    {
      "title": "Failure when running Docker containers",
      "level": 3,
      "content": "One might face the following error when running a Docker container from WSL:\n\n```\nError response from daemon: path / is mounted on / but it is not a shared or slave mount\nError: failed to start containers\n```\n\nThis is because Docker expects the root (/) directory to be mounted with rshared propagation.\n\nTo do so, run:\n\n```\n# mount --make-rshared /\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:Windows Subsystem for Linux\n- Gentoo:Gentoo in WSL\n- Official Documentation\n- WSLg GitHub Wiki\n\n"
    }
  ]
}