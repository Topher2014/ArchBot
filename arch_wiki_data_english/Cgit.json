{
  "title": "Cgit",
  "url": "https://wiki.archlinux.org/title/Cgit",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "cgit is an attempt to create a fast web interface for the git version control system, using a built in cache to decrease pressure on the git server.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the cgit package.\n\nTo use cgit a web server must be installed and configured on the system.\n\n"
    },
    {
      "title": "Apache",
      "level": 3,
      "content": "Add the following to the end of your /etc/httpd/conf/httpd.conf:\n\n```\nScriptAlias /cgit \"/usr/lib/cgit/cgit.cgi/\"\nAlias /cgit-css \"/usr/share/webapps/cgit/\"\n<Directory \"/usr/share/webapps/cgit/\">\n   AllowOverride None\n   Options None\n   Require all granted\n</Directory>\n<Directory \"/usr/lib/cgit/\">\n   AllowOverride None\n   Options ExecCGI FollowSymlinks\n   Require all granted\n</Directory>\n```\n\nor alternatively add it to a separate file like etc/httpd/conf/extra/cgit.conf and then add the following to the end of httpd.conf:\n\n```\n# cgit configuration\nInclude conf/extra/cgit.conf\n```\n\nThis allows you to access cgit via your.server.com/cgit. Make sure that Apache is configured to permit CGI execution by having the following uncommented in httpd.conf:\n\n```\n<IfModule !mpm_prefork_module>\n   LoadModule cgid_module modules/mod_cgid.so\n</IfModule>\n<IfModule mpm_prefork_module>\n   LoadModule cgi_module modules/mod_cgi.so\n</IfModule>\n```\n\nthen restart httpd.service to apply these changes. For further details about CGI execution with Apache, see https://httpd.apache.org/docs/2.4/howto/cgi.html.\n\n"
    },
    {
      "title": "Lighttpd",
      "level": 3,
      "content": "The following configuration will let you access cgit through http://your.server.com/git or http://your.server.com/cgit. The cgit url is not perfect (for example you will see \"cgit.cgi\" in all repos' url) but works.\n\nCreate the file /etc/lighttpd/conf.d/cgit.conf:\n\n```\nserver.modules += ( \"mod_cgi\", \"mod_alias\" )\n\n$HTTP[\"url\"] =~ \"^/cgit\" {\n    server.document-root = \"/usr/share/webapps/\"\n    server.indexfiles = (\"cgit.cgi\")\n    cgi.assign = (\"cgit.cgi\" => \"\")\n    mimetype.assign = ( \".css\" => \"text/css\" )\n}\n\nalias.url += (\n    \"/git\" => \"/usr/share/webapps/cgit/cgit.cgi\",\n)\n$HTTP[\"url\"] =~ \"^/git\" {\n    cgi.assign = ( \"\" => \"\" )\n}\n```\n\nAnd include this file in /etc/lighttpd/lighttpd.conf:\n\n```\ninclude \"conf.d/cgit.conf\"\n```\n\nand restart the lighttpd.service.\n\n"
    },
    {
      "title": "Lighttpd sub-domain",
      "level": 4,
      "content": "This alternative Lighttpd configuration will serve cgit on a sub-domain like git.example.com with optional SSL support, and rewrites creating nice permalinks:\n\n```\nserver.modules += ( \"mod_cgi\", \"mod_rewrite\" )\n\n#$SERVER[\"socket\"] == \":443\" {\n$SERVER[\"socket\"] == \":80\" {\n    #ssl.engine                    = \"enable\"\n    #ssl.pemfile                   = \"/etc/lighttpd/ssl/git.example.com.pem\"\n\n    server.name          = \"git.example.com\"\n    server.document-root = \"/usr/share/webapps/cgit/\"\n\n    index-file.names     = ( \"cgit.cgi\" )\n    cgi.assign           = ( \"cgit.cgi\" => \"\" )\n    mimetype.assign      = ( \".css\" => \"text/css\" )\n    url.rewrite-once     = (\n        \"^/cgit/cgit.css\"   => \"/cgit.css\",\n        \"^/cgit/cgit.png\"   => \"/cgit.png\",\n        \"^/([^?/]+/[^?]*)?(?:\\?(.*))?$\"   => \"/cgit.cgi?url=$1&$2\",\n    )\n}\n```\n\n"
    },
    {
      "title": "Using fcgiwrap",
      "level": 4,
      "content": "The following configuration uses fcgiwrap and will serve cgit on a subdomain like git.example.com.\n\nStart and enable fcgiwrap.socket. Then, configure Nginx:\n\n```\n/etc/nginx/nginx.conf\n```\n\n```\nworker_processes          1;\n \nevents {\n  worker_connections      1024;\n}\n \nhttp {\n  include                 mime.types;\n  default_type            application/octet-stream;\n  sendfile                on;\n  keepalive_timeout       65;\n  gzip                    on;\n \n  # Cgit\n  server {\n    listen                80;\n    server_name           git.example.com;\n    root                  /usr/share/webapps/cgit;\n    try_files             $uri @cgit;\n\n    # Configure HTTP transport\n    location ~ /.+/(info/refs|git-upload-pack) {\n        include             fastcgi_params;\n        fastcgi_param       SCRIPT_FILENAME     /usr/lib/git-core/git-http-backend;\n        fastcgi_param       PATH_INFO           $uri;\n        fastcgi_param       GIT_HTTP_EXPORT_ALL 1;\n        fastcgi_param       GIT_PROJECT_ROOT    /srv/git;\n        fastcgi_param       HOME                /srv/git;\n        fastcgi_pass        unix:/run/fcgiwrap.sock;\n    }\n\n    location @cgit {\n      include             fastcgi_params;\n      fastcgi_param       SCRIPT_FILENAME /usr/lib/cgit/cgit.cgi;\n      fastcgi_param       PATH_INFO       $uri;\n      fastcgi_param       QUERY_STRING    $args;\n      fastcgi_param       HTTP_HOST       $server_name;\n      fastcgi_pass        unix:/run/fcgiwrap.sock;\n    }\n  }\n}\n```\n\n"
    },
    {
      "title": "Using uwsgi",
      "level": 4,
      "content": "The following example will setup cgit using the native cgi plugin for uwsgi.\n\nFirst, install uwsgi and uwsgi-plugin-cgi.\n\nAdd below server block to your configuration:\n\n```\n/etc/nginx/nginx.conf\n```\n\n```\nserver {\n  listen 80;\n  server_name git.example.com;\n  root /usr/share/webapps/cgit;\n\n  # Serve static files with nginx\n  location ~* ^.+(cgit.(css|png)|favicon.ico|robots.txt) {\n    root /usr/share/webapps/cgit;\n    expires 30d;\n  }\n  location / {\n    try_files $uri @cgit;\n  }\n  location @cgit {\n    gzip off;\n    include uwsgi_params;\n    uwsgi_modifier1 9;\n    uwsgi_pass unix:/run/uwsgi/cgit.sock;\n  }\n}\n```\n\nAdd a uwsgi configuration for cgit.\n\n```\n/etc/uwsgi/cgit.ini\n```\n\n```\n[uwsgi]\nmaster = true\nplugins = cgi\nsocket = /run/uwsgi/%n.sock\nuid = http\ngid = http\nprocname-master = uwsgi cgit\nprocesses = 1\nthreads = 2\ncgi = /usr/lib/cgit/cgit.cgi\n```\n\nEnable and start the corresponding socket uwsgi@cgit.socket.\n\n"
    },
    {
      "title": "Caddy",
      "level": 3,
      "content": "The following configuration uses fcgiwrap and will serve cgit on a subdomain like git.example.com.\n\nMake sure to give Caddy ownership of the socket and set permissions correctly by editing the systemd socket as follows:\n\n```\n/etc/systemd/system/fcgiwrap.socket\n```\n\n```\n[Unit]\nDescription=fcgiwrap Socket\n\n[Socket]\nListenStream=/run/fcgiwrap.sock\nSocketMode=0700\nSocketUser=caddy\nSocketGroup=caddy\n\n[Install]\nWantedBy=sockets.target\n```\n\nStart and enable fcgiwrap.socket. Then, configure Caddy:\n\n```\n/etc/caddy/conf.d/cgit\n```\n\n```\ngit.example.com\n\n@assets path /cgit.css /cgit.js /cgit.png /favicon.ico /robots.txt\nhandle @assets {\n\troot * /usr/share/webapps/cgit\n\tfile_server\n}\n\nreverse_proxy unix//run/fcgiwrap.sock {\n\ttransport fastcgi {\n\t\tenv SCRIPT_FILENAME /usr/lib/cgit/cgit.cgi\n\t}\n}\n```\n\n"
    },
    {
      "title": "h2o",
      "level": 3,
      "content": "Package h2o-gitAUR has its own CGI wrapper fastcgi-cgi, which supports cgit with the following configuration.\n\n```\n/etc/h2o/h2o.conf\n```\n\n```\n\"git.domain.tld:443\":\n    listen:\n      port: 443\n      ssl:\n        ...\n    paths:\n      /cgit.css:\n        file.file: /usr/share/webapps/cgit/cgit.css\n        file.send-compressed: ON\n      /favicon.ico:\n        file.file: /usr/share/webapps/cgit/favicon.ico\n        file.send-compressed: ON\n      /robots.txt:\n        file.file: /usr/share/webapps/cgit/robots.txt\n      /cgit.png:\n        file.file: /usr/share/webapps/cgit/cgit.png\n      /:\n        fastcgi.spawn: /usr/share/h2o/fastcgi-cgi\n        setenv:\n          SCRIPT_FILENAME: /usr/lib/cgit/cgit.cgi\n        compress: ON\n```\n\n"
    },
    {
      "title": "Configuration of cgit",
      "level": 2,
      "content": "See cgitrc(5) for the list of all configuration options.\n\n"
    },
    {
      "title": "Basic configuration",
      "level": 3,
      "content": "Before you can start adding repositories you will first have to create the basic cgit configuration file at /etc/cgitrc.\n\n```\n#\n# cgit config\n#\n\n# The defaults\n#css=/cgit.css\n#logo=/cgit.png\n\n# Following lines work with the above Apache config\n#css=/cgit-css/cgit.css\n#logo=/cgit-css/cgit.png\n\n# Following lines work with the above Lighttpd config\n#css=/cgit/cgit.css\n#logo=/cgit/cgit.png\n\n# Allow http transport git clone\n#enable-http-clone=0\n\n\n# if you do not want that webcrawler (like google) index your site\nrobots=noindex, nofollow\n\n# if cgit messes up links, use a virtual-root. For example, cgit.example.org/ has this value:\nvirtual-root=/\n```\n\n"
    },
    {
      "title": "Adding repositories",
      "level": 3,
      "content": "Now you can add your repos:\n\n```\n#\n# List of repositories.\n# This list could be kept in a different file (e.g. '/etc/cgitrepos')\n# and included like this:\n#   include=/etc/cgitrepos\n#\n\nrepo.url=MyRepo\nrepo.path=/srv/git/MyRepo.git\nrepo.desc=This is my git repository\n\n# For a non-bare repository (repository with the working tree)\nrepo.url=MyOtherRepo\nrepo.path=/srv/git/MyOtherRepo/.git\nrepo.desc=That's my other git repository\n```\n\nOr else, it is also possible to configure cgit to automatically search for the repo:\n\n```\nscan-path=/srv/git/\n```\n\nIf you use the method above, add the descriptions to .git/description file and add the following lines to show the author:\n\n```\n.git/config\n```\n\n```\n[gitweb]\n        owner = John Cena <john@riseup.net>\n```\n\nIf you are coming from gitweb and want to keep the descriptions and owner information, then use:\n\n```\nenable-git-config=1\n```\n\n"
    },
    {
      "title": "Syntax highlighting",
      "level": 3,
      "content": "cgit supports syntax highlighting when viewing blobs. To enable syntax highlighting, you have several options.\n\n"
    },
    {
      "title": "Using python-pygments",
      "level": 4,
      "content": "Install python-pygments and add the filter in /etc/cgitrc\n\n```\nsource-filter=/usr/lib/cgit/filters/syntax-highlighting.py\n```\n\nTo change the coloring style, modify the style argument that is passed to HtmlFormatter in the syntax-highlighting.py file. For instance, to change the coloring style to 'tango':\n\n```\nformatter = HtmlFormatter(encoding='utf-8', style='tango')\n```\n\nTo get a list of all coloring styles that are available, do:\n\n```\n$ python\n >>> from pygments.styles import get_all_styles\n >>> list(get_all_styles())\n ['manni', 'igor', 'xcode', 'vim', 'autumn', 'vs', 'rrt', 'native', 'perldoc', 'borland', 'tango', 'emacs', 'friendly', 'monokai', 'paraiso-dark', 'colorful', 'murphy', 'bw', 'pastie', 'paraiso-light', 'trac', 'default', 'fruity']\n```\n\n"
    },
    {
      "title": "Using highlight",
      "level": 4,
      "content": "Install the highlight package.\n\nCopy /usr/lib/cgit/filters/syntax-highlighting.sh to /usr/lib/cgit/filters/syntax-highlighting-edited.sh. Then, in the copied file, comment out version 2 and comment in version 3. You may want to add --inline-css to the options of highlight for a more colorful output without editing cgit's css file.\n\n```\n# This is for version 2\n #exec highlight --force -f -I -X -S \"$EXTENSION\" 2>/dev/null\n \n # This is for version 3\n exec highlight --force --inline-css -f -I -O xhtml -S \"$EXTENSION\" 2>/dev/null\n```\n\nEnable the filter in /etc/cgitrc\n\n```\nsource-filter=/usr/lib/cgit/filters/syntax-highlighting-edited.sh\n```\n\n"
    },
    {
      "title": "Formatting the about page",
      "level": 3,
      "content": "cgit can display a formatted about page with Markdown, reStructuredText, man page syntax, text files, and html files.\n\n- For Markdown formatting, install python-markdown.\n- For reStructeredText formatting, install python-docutils.\n- To use the man page syntax install groff.\n\nThe script /usr/lib/cgit/filters/about-formatting.sh is used with the about-filter or repo.about-filter in /etc/cgitrc. For example:\n\n```\nabout-filter=/usr/lib/cgit/filters/about-formatting.sh\nreadme=:README.md\n```\n\nThe way about-formatting.sh works is by running particular scripts in the html-converters subdirectory based on the input file's extension. The above configuration allows Markdown formatting as long as README.md is located in the root of the repo's default branch and the script is given executable permission.\n\nFor a more lightweight Markdown converter, install md4c and create a new filter /usr/lib/cgit/filters/md2html.sh that runs md2html --github.\n\n"
    },
    {
      "title": "Gitosis",
      "level": 3,
      "content": "If you want to integrate with gitosis you will have to run two commands to give Apache permission to look through the folder.\n\n```\n# chgrp http /srv/gitosis\n# chmod a+rx /srv/gitosis\n```\n\n"
    },
    {
      "title": "Gitolite",
      "level": 3,
      "content": "If you added repositories managed by gitolite you have to change the permissions so the web server can access the files.\n\n- Add the http user to the gitolite group: usermod -aG gitolite http as the root user.\n- Change permission for future repositories: Edit /var/lib/gitolite/.gitolite.rc. Change the UMASK to 0027 See also: https://gitolite.com/gitolite/rc.html#specific-variables\n- Change permission for the gitolite home directory, and existing repositories. Run the following two commands: chmod g+rX /var/lib/gitolite as the root user. chmod -R g+rX /var/lib/gitolite/repositories as the root user.\n- If you use scan-path in conjunction with project-list, change permission for the project list. Run the following command: chmod g+r /var/lib/gitolite/projects.list as the root user.\n\n- usermod -aG gitolite http as the root user.\n\n- Edit /var/lib/gitolite/.gitolite.rc. Change the UMASK to 0027\n- See also: https://gitolite.com/gitolite/rc.html#specific-variables\n\n- chmod g+rX /var/lib/gitolite as the root user.\n- chmod -R g+rX /var/lib/gitolite/repositories as the root user.\n\n- chmod g+r /var/lib/gitolite/projects.list as the root user.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "The following troubleshooting subsections largely outline issues that are caused by the order of settings in the cgit configuration file. To be safe, try to ensure that all global settings are defined before scan-path.\n\n"
    },
    {
      "title": "snapshots does not show properly",
      "level": 3,
      "content": "If you have enabled scan-path as well as snapshots, the order in cgitrc matters. According to cgit mailing list, snapshots should be specified before scan-path\n\n```\nsnapshots=tar.gz tar.bz2 zip\nscan-path=/path/to/your/repositories\n```\n\n"
    },
    {
      "title": "readme files are not found, about tab not shown",
      "level": 3,
      "content": "If you have added one or more readme entries, which define the files that cgit will search for when populating the about tab, and you are sure that they match the README files in your repository but the about tab does not show, ensure that readme entries are specified before scan-path.\n\n"
    },
    {
      "title": "source-filter does not work properly",
      "level": 3,
      "content": "If you have enabled scan-path, again, the order in cgitrc matters. source-filter should be specified before scan-path, otherwise it will have no effect.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- https://git.zx2c4.com/cgit/\n- https://git.zx2c4.com/cgit/about/\n- https://git.zx2c4.com/cgit/tree/README\n- https://git.zx2c4.com/cgit/tree/cgitrc.5.txt\n- https://text.causal.agency/007-cgit-setup.txt - A cgit setup using the Nginx server.\n- https://git.codemadness.org/stagit/ - stagit, a static git page generator.\n- https://git.causal.agency/cgit-pink/about/ - cgit-pink, a fork with a lot of enhancements.\n\n"
    }
  ]
}