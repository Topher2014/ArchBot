{
  "title": "Wine",
  "url": "https://wiki.archlinux.org/title/Wine",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- CrossOver\n- Deepin-wine\n- Wine package guidelines\n\nWine is a compatibility layer capable of running Microsoft Windows applications on Unix-like operating systems. Programs running in Wine act as native programs would, without the performance/memory penalties of an emulator.\n\n- Wine is not isolated from your system.\n- If you can access a file or resource with your user account, programs running in Wine can too. See #Running Wine under a separate user account and Security#Sandboxing applications for possible precautions.\n- Wine can also run Malware (see Wine FAQ on Malware compatibility)\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Wine can be installed by enabling the multilib repository and installing the wine (development), wine-stableAUR (stable) or wine-staging (testing) package. Wine Staging is a patched version of Wine, which contains bug fixes and features that have not been integrated into the stable or development branch yet.\n\nSee also #Graphics drivers and #Sound for additional requirements.\n\nConsider installing wine-gecko and wine-mono for applications that depend on Internet Explorer and .NET, respectively. These packages are not strictly required as Wine will download the relevant files as needed. However, you should manage them with pacman.\n\n"
    },
    {
      "title": "Optional dependencies",
      "level": 3,
      "content": "Wine has numerous optional dependencies, which may not be required for basic applications, but should be installed to provide functionality such as sounds, 3D graphics, video playback, etc.\n\nNote that many Windows applications are 32-bit, and will require 32-bit versions of the respective libraries, some of which are only available on the AUR. Standard (64-bit) libraries can be used for 64-bit applications, or for any application if you are running a version of Wine with the new WoW64 mode (see note in #Installation). You can check whether a Windows executable is 64-bit by using the file(1) command.\n\n"
    },
    {
      "title": "Graphics drivers",
      "level": 4,
      "content": "You need to install the 32-bit version of your graphics driver. Please install the package that is listed in the OpenGL (multilib) column in the table in Xorg#Driver installation.\n\nA good sign that your drivers are inadequate or not properly configured is when Wine reports the following in your terminal window:\n\n```\nDirect rendering is disabled, most likely your OpenGL drivers have not been installed correctly\n```\n\n"
    },
    {
      "title": "Sound",
      "level": 4,
      "content": "By default sound issues may arise when running Wine applications. Ensure only one sound device is selected in winecfg.\n\nInstall the correct packages for the audio driver you want to use:\n\n- For ALSA install lib32-alsa-lib and lib32-alsa-plugins\n- For PulseAudio install lib32-libpulse\n- For PipeWire install lib32-pipewire and either: pipewire-pulse and lib32-libpulse to use PulseAudio as a frontend. pipewire-alsa, lib32-alsa-lib, and lib32-alsa-plugins to use ALSA as a frontend.\n- For OSS install lib32-alsa-oss\n\n- pipewire-pulse and lib32-libpulse to use PulseAudio as a frontend.\n- pipewire-alsa, lib32-alsa-lib, and lib32-alsa-plugins to use ALSA as a frontend.\n\nIf winecfg still fails to detect the audio driver (Selected driver: (none)), configure it via the registry. For example, in a case where the microphone was not working in a 32-bit Windows application on a 64-bit stock install of wine-1.9.7, this provided full access to the sound hardware (sound playback and mic): open regedit, look for the key HKEY_CURRENT_USER > Software > Wine > Drivers, and add a string called Audio and give it the value alsa. Also, it may help to recreate the prefix.\n\nMIDI was a quite popular system for video games music in the 90s. If you are trying out old games, it is not uncommon that the music will not play out of the box. Wine has excellent MIDI support. However you first need to make it work on your host system, as explained in MIDI. Last but not least you need to make sure Wine will use the correct MIDI output.\n\n"
    },
    {
      "title": "Other dependencies",
      "level": 4,
      "content": "Some applications may require additional packages [2].\n\n- For encryption support install lib32-gnutls\n- For joystick and gamepad support in a 32-bit prefix, install lib32-sdl2AUR\n- For media playback in 32-bit programs install lib32-gst-plugins-base, lib32-gst-plugins-good, lib32-gst-plugins-badAUR, lib32-gst-plugins-uglyAUR and lib32-gst-libavAUR\n- For NTLM authentication install samba\n\n"
    },
    {
      "title": "In-prefix dependencies",
      "level": 3,
      "content": "Aside from system dependencies, many programs require additional fonts and DLLs to be installed to the Wine prefix [3]. To satisfy these dependencies you can use Winetricks, a primitive \"package manager\" where each verb either installs something or applies a configuration tweak. There are two ways to use Winetricks:\n\n- Through the CLI: Run winetricks verb_name.\n- Through the GUI: Install zenity or kdialog then run winetricks.\n\nDue to conflicts between dependencies, you may not be able to create the \"perfect\" Windows installation that can run everything [4] [5]. Rather, you should treat prefixes as disposable (unless they contain important configurations or data) and use separate prefixes for programs with different dependencies. You can use the #WINEPREFIX environment variable to control which prefix the verbs act on.\n\nDetermining the verbs required by a program needs can require much trial and error. See the Bottles dependency page for some of the more common dependencies, as well as the following program-specific resources:\n\n- Wine Application Database. Official resource, but old and may be less maintained than others.\n- Lutris website. If you are trying to run a game which happens to be featured on this site, you can click the drop-down menu and then View install script to see what Winetricks verbs are used by Lutris.\n- Bottles program repository. Smaller, but not just games.\n- ProtonDB. Although Proton has different compatibility than Wine (and you should probably just use Proton if you are on this site), the verbs commented by users may be of use. You can also consult the source for the fast-moving protonfixes tool that ships with proton-ge-custom, but beware that it assumes the presence of additional Proton and GE patches that fix games.\n\n- You can also consult the source for the fast-moving protonfixes tool that ships with proton-ge-custom, but beware that it assumes the presence of additional Proton and GE patches that fix games.\n\nIf you find yourself spending a lot of time managing prefixes for games, it may be easier to use a third-party application that handles it for you.\n\n"
    },
    {
      "title": "Third-party applications",
      "level": 3,
      "content": "These have their own communities and websites, and are not supported by the main Wine community. See Wine Wiki for more details.\n\n- Bottles — Graphical prefix and runners manager for Wine based on GTK.\n\n- CrossOver — Official paid version of Wine which provides a graphical interface and more comprehensive end-user support.\n\n- Lutris — Gaming launcher for all types of games, including Wine games (with prefix management), native Linux games and emulators.\n\n- PlayOnLinux — Graphical prefix manager for Wine. Contains scripts to assist with program installation and configuration.\n\n- Proton — Compatibility tool made for Steam based on Wine and additional components. See ProtonDB for compatibility list.\n\n- PyWinery — Simple graphical prefix manager for Wine.\n\n- Q4Wine — Graphical prefix manager for Wine. Can export Qt themes into the Wine configuration for better integration.\n\n- WINEgui — A user-friendly WINE graphical interface.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Configuring Wine is typically accomplished using:\n\n- winecfg is a GUI configuration tool for Wine, which can be started by running winecfg.\n- regedit is Wine's registry editing tool, which can be started by running regedit. See WineHQ's article on Useful Registry Keys.\n- control is Wine's implementation of the Windows Control Panel, which can be started by running wine control.\n- See WineHQ's List of Commands for the full list.\n\n"
    },
    {
      "title": "WINEPREFIX",
      "level": 3,
      "content": "By default, Wine stores its configuration files and installed Windows programs in ~/.wine. This directory is commonly called a \"Wine prefix\" or \"Wine bottle\". It is created/updated automatically whenever you run a Windows program or one of Wine's bundled programs such as winecfg. The prefix directory also contains a tree which your Windows programs will see as C: (the C-drive).\n\nYou can override the location Wine uses for a prefix with the WINEPREFIX environment variable. This is useful if you want to use separate configurations for different Windows programs. The first time a program is run with a new Wine prefix, Wine will automatically create a directory with a bare C-drive and registry.\n\nFor example, if you run one program with env WINEPREFIX=~/.win-a wine program-a.exe, and another with env WINEPREFIX=~/.win-b wine program-b.exe, the two programs will each have a separate C-drive and separate registries.\n\nTo create a default prefix without running a Windows program or other GUI tool you can use:\n\n```\n$ env WINEPREFIX=~/.customprefix wineboot -u\n```\n\n"
    },
    {
      "title": "WINEARCH",
      "level": 3,
      "content": "Wine will start a 64-bit environment by default. You can change this behavior using the WINEARCH environment variable. Rename your ~/.wine directory and create a new Wine environment by running $ WINEARCH=win32 winecfg. This will get you a 32-bit Wine environment. Not setting WINEARCH will get you a 64-bit one.\n\nYou can combine this with WINEPREFIX to make a separate win32 and win64 environment:\n\n```\n$ WINEARCH=win32 WINEPREFIX=~/win32 winecfg\n$ WINEPREFIX=~/win64 winecfg\n```\n\nYou can also use WINEARCH in combination with other Wine programs, such as winetricks (using Steam as an example):\n\n```\nWINEARCH=win32 WINEPREFIX=~/.local/share/wineprefixes/steam winetricks steam\n```\n\nIn order to see the architecture of an existing prefix you can check its registry file. The command below reads the system registry of the ~/.wine prefix and returns #arch=win32 or #arch=win64 depending on the architecture type:\n\n```\n$ grep '#arch' ~/.wine/system.reg\n```\n\n"
    },
    {
      "title": "Fonts",
      "level": 3,
      "content": "If Wine applications have unreadable or missing fonts, you may not have any fonts installed. To easily link all of the system fonts so they are accessible from wine:\n\n```\n$ cd ${WINEPREFIX:-~/.wine}/drive_c/windows/Fonts && for i in /usr/share/fonts/**/*.{ttf,otf}; do ln -s \"$i\"; done\n```\n\nWine uses FreeType to render fonts, and FreeType's defaults changed a few releases ago. Try using the following environment variable when running programs in Wine:\n\n```\nFREETYPE_PROPERTIES=\"truetype:interpreter-version=35\"\n```\n\nAnother possibility is to install Microsoft's TrueType fonts into your wine prefix. If this does not help, try running winetricks corefonts first, then winetricks allfonts as a last resort.\n\nAfter running such programs, kill all Wine servers and run winecfg. Fonts should be legible now.\n\nIf the fonts look somehow smeared, run the following command to change a setting in the Wine registry:\n\n```\n$ wine reg add 'HKEY_CURRENT_USER\\Software\\Wine\\X11 Driver' /v ClientSideWithRender /t REG_SZ /d N\n```\n\nFor high resolution displays, you can adjust dpi values in winecfg.\n\nSee also Font configuration#Applications without Fontconfig support.\n\n"
    },
    {
      "title": "Enable font smoothing",
      "level": 4,
      "content": "A good way to improve wine font rendering is to enable cleartype font smoothing. To enable \"Subpixel smoothing (ClearType) RGB\":\n\n```\n/tmp/fontsmoothing.reg\n```\n\n```\nREGEDIT4\n\n[HKEY_CURRENT_USER\\Control Panel\\Desktop]\n\"FontSmoothing\"=\"2\"\n\"FontSmoothingOrientation\"=dword:00000001\n\"FontSmoothingType\"=dword:00000002\n\"FontSmoothingGamma\"=dword:00000578\nEOF\n```\n\n```\n$ WINE=${WINE:-wine} WINEPREFIX=${WINEPREFIX:-$HOME/.wine} $WINE regedit /tmp/fontsmoothing.reg 2> /dev/null\n```\n\nFor more information, check the original answer\n\n"
    },
    {
      "title": "Desktop launcher menus",
      "level": 3,
      "content": "When a Windows application installer creates a shortcut Wine creates a .desktop file instead. The default locations for those files in Arch Linux are:\n\n- Desktop shortcuts are put in ~/Desktop\n- Start menu shortcuts are put in ~/.local/share/applications/wine/Programs/\n\n"
    },
    {
      "title": "Creating menu entries for Wine utilities",
      "level": 4,
      "content": "By default, installation of Wine does not create desktop menus/icons for the software which comes with Wine (e.g. for winecfg, winebrowser, etc). This can be achieved by installing wine-installerAUR or wine-installer-gitAUR meta-package (the latter has no additional dependencies), otherwise these instructions will add entries for these applications.\n\nFirst, install a Windows program using Wine to create the base menu. After the base menu is created, you can create the following files in ~/.local/share/applications/wine/:\n\n```\nwine-browsedrive.desktop\n```\n\n```\n[Desktop Entry]\nName=Browse C: Drive\nComment=Browse your virtual C: drive\nExec=wine winebrowser c:\nTerminal=false\nType=Application\nIcon=folder-wine\nCategories=Wine;\n```\n\n```\nwine-uninstaller.desktop\n```\n\n```\n[Desktop Entry]\nName=Uninstall Wine Software\nComment=Uninstall Windows applications for Wine\nExec=wine uninstaller\nTerminal=false\nType=Application\nIcon=wine-uninstaller\nCategories=Wine;\n```\n\n```\nwine-winecfg.desktop\n```\n\n```\n[Desktop Entry]\nName=Configure Wine\nComment=Change application-specific and general Wine options\nExec=winecfg\nTerminal=false\nIcon=wine-winecfg\nType=Application\nCategories=Wine;\n```\n\nAnd create the following file in ~/.config/menus/applications-merged/:\n\n```\nwine.menu\n```\n\n```\n<!DOCTYPE Menu PUBLIC \"-//freedesktop//DTD Menu 1.0//EN\"\n\"http://www.freedesktop.org/standards/menu-spec/menu-1.0.dtd\">\n<Menu>\n  <Name>Applications</Name>\n  <Menu>\n    <Name>wine-wine</Name>\n    <Directory>wine-wine.directory</Directory>\n    <Include>\n      <Category>Wine</Category>\n    </Include>\n  </Menu>\n</Menu>\n```\n\nIf these settings produce a ugly/non-existent icon, it means that there are no icons for these launchers in the icon set that you have enabled. You should replace the icon settings with the explicit location of the icon that you want. Clicking the icon in the launcher's properties menu will have the same effect. A great icon set that supports these shortcuts is gnome-colors-icon-themeAUR.\n\n"
    },
    {
      "title": "Removing menu entries",
      "level": 4,
      "content": "Menu entries created by Wine are located in ~/.local/share/applications/wine/Programs/. Remove the program's .desktop entry to remove the application from the menu.\n\nIn addition to remove unwanted extensions binding by Wine, execute the following commands: [7]\n\n```\n$ rm ~/.local/share/mime/packages/x-wine*\n$ rm ~/.local/share/applications/wine-extension*\n$ rm ~/.local/share/icons/hicolor/*/*/application-x-wine-extension*\n$ rm ~/.local/share/mime/application/x-wine-extension*\n```\n\nSometimes you should also remove wine-*.menu files from /.config/menus/ to completely remove items from Wine submenu in KDE.\n\n"
    },
    {
      "title": "Appearance",
      "level": 3,
      "content": "A similar to XP-looking theme can be downloaded. To install it, see this upstream wiki article. Lastly, use winecfg to select it.\n\nWine staging users may instead want to try enabling the option Enable GTK3 Theming under the Staging section of winecfg for a theme that matches the current GTK theme.\n\n"
    },
    {
      "title": "Printing",
      "level": 3,
      "content": "In order to use your installed printers (both local and network) with wine applications in win32 prefixes (e.g. MS Word), install the lib32-libcups package, reboot wine (wineboot) and restart your wine application.\n\n"
    },
    {
      "title": "Networking",
      "level": 3,
      "content": "After installation, the lib32-gnutls package may need to be installed for applications making TLS or HTTPS connections to work.\n\nFor ICMP (ping), Wine may need the network access as described in the WineHQ FAQ:\n\n```\n# setcap cap_net_raw+epi /usr/bin/wine-preloader\n```\n\nIf issues arise after this (such as an unhandled exception or privileged instruction), remove via:\n\n```\n# setcap -r /usr/bin/wine-preloader\n```\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "See Wine User's Guide for general information on Wine usage.\n\nSee Wine Application Database (AppDB) for additional information on specific Windows applications in Wine.\n\n"
    },
    {
      "title": "Wayland",
      "level": 3,
      "content": "By default, Wine runs on Wayland through Xwayland, providing a satisfactory experience for most users. As of version 9.0rc1, Wine has made substantial progress on merging native Wayland support, now making it suitable for some use cases.\n\nTo experiment with the native Wayland driver added in recent Wine versions, you can follow these steps:\n\n- For Wine versions older than 9.22, run the following command to change a setting in the Wine registry: $ wine reg add 'HKEY_CURRENT_USER\\Software\\Wine\\Drivers' /v Graphics /t REG_SZ /d 'x11,wayland'\n- Bypass the use of Xwayland and force the native Wayland driver by unsetting the DISPLAY environment variable: $ env -u DISPLAY wine example.exe\n\n```\n$ wine reg add 'HKEY_CURRENT_USER\\Software\\Wine\\Drivers' /v Graphics /t REG_SZ /d 'x11,wayland'\n```\n\n```\n$ env -u DISPLAY wine example.exe\n```\n\nIf the second step makes Wine stop working, check to see if your Wine version is built with support for the new Wayland driver.\n\n"
    },
    {
      "title": "Stop running Wine",
      "level": 3,
      "content": "Stopping started executables, wine with Ctrl+Z or wineconsole with Ctrl+C, might leave processes running in the background. See for example:\n\n```\n$ ps -xo pid,cmd\n    PID CMD\n    297 -bash\n    933 /usr/bin/wineserver\n    939 C:\\windows\\system32\\services.exe\n    942 C:\\windows\\system32\\winedevice.exe\n    950 C:\\windows\\system32\\explorer.exe /desktop\n    954 C:\\windows\\system32\\winedevice.exe\n    965 C:\\windows\\system32\\plugplay.exe\n    977 C:\\windows\\system32\\svchost.exe -k LocalServiceNetworkRestricted\n    984 C:\\windows\\system32\\rpcss.exe\n    997 mbserver.exe\n   1017 start.exe /exec\n   1019 C:\\windows\\system32\\conhost.exe --unix --width 169 --height 40 --server 0x10\n   1021 Z:\\home\\wineuser\\mbserver.exe\n   1030 ps -xo pid,cmd\n```\n\nAll running wine and wineconsole processes are stopped at once using the wineserver -k command. For example:\n\n```\n$ wineserver -k 15\n```\n\nThis command is WINEPREFIX-dependent, so when using a custom Wine prefix, run:\n\n```\n$ WINEPREFIX=~/wine/my-prefix wineserver -k\n```\n\nAn equivalent command to gracefully finish both executables in the above example is:\n\n```\n$ kill 997 1021\n```\n\n"
    },
    {
      "title": "Wineconsole",
      "level": 3,
      "content": "Often you may need to run .exe's to patch game files, for example a widescreen mod for an old game, and running the .exe normally through Wine might yield nothing happening. In this case, you can open a terminal and run the following command:\n\n```\n$ wineconsole cmd\n```\n\nThen navigate to the directory and run the .exe file from there.\n\n"
    },
    {
      "title": "Winetricks",
      "level": 3,
      "content": "Winetricks is a script to allow one to install base requirements needed to run Windows programs. Installable components include DirectX 9.x, MSXML (required by Microsoft Office 2007 and Internet Explorer), Visual Runtime libraries and many more.\n\nInstall the winetricks package (or alternatively winetricks-gitAUR). Then run it with:\n\n```\n$ winetricks\n```\n\nFor using GUI you can install either zenity(GTK) or kdialog(Qt).\n\n"
    },
    {
      "title": "CSMT",
      "level": 4,
      "content": "CSMT is a technology used by Wine to use a separate thread for the OpenGL calls to improve performance noticeably. Since Wine 3.2, CSMT is enabled by default.\n\nNote that CSMT may actually hurt performance for some applications - if this is the case, disable it by running wine regedit and set the DWORD value for HKEY_CURRENT_USER -> Software > Wine > Direct3D > csmt to 0x00 (disabled).\n\nFurther information:\n\n"
    },
    {
      "title": "Force OpenGL mode in games",
      "level": 4,
      "content": "Some games might have an OpenGL mode which may perform better than their default DirectX mode. While the steps to enable OpenGL rendering is application specific, many games accept the -opengl parameter.\n\n```\n$ wine /path/to/3d_game.exe -opengl\n```\n\nYou should of course refer to your application's documentation and Wine's AppDB for such application specific information.\n\n"
    },
    {
      "title": "VKD3D-Proton",
      "level": 4,
      "content": "VKD3D-Proton is a fork of VKD3D which aims to implement the full Direct3D 12 API using Vulkan. The project serves as the development effort for Direct3D 12 support in Proton improving performance and compatibility for DirectX 12 games.\n\nTo use it, install vkd3d-proton-mingwAUR or vkd3d-proton-binAUR. Then run the following command to activate it in your Wineprefix (by default ~/.wine):\n\n```\n$ WINEPREFIX=your-prefix setup_vkd3d_proton install\n```\n\nNote: **banned** \n\n"
    },
    {
      "title": "DXVK",
      "level": 4,
      "content": "DXVK is an implementation of DirectX 9, 10, and 11 over Vulkan. It beats the WineD3D driver in performance and compatibility for most games. It does not support DirectX 12, see #VKD3D-Proton instead. DXVK and VKD3D-Proton can and should be installed alongside each other to be able to support all DirectX versions.\n\nTo use it, install dxvk-mingwAUR or dxvk-binAUR. Then run the following command to activate it in your Wineprefix (by default ~/.wine):\n\n```\n$ WINEPREFIX=your-prefix setup_dxvk install\n```\n\nWhile using DXVK with a dual graphics setup, Wine prefers the dedicated GPU. On laptops for power saving, this can be overridden:\n\n```\n$ VK_DRIVER_FILES=/usr/share/vulkan/icd.d/your_driver.json wine executable\n```\n\nWhen paired with Gamescope, DXVK (V2.1+) offers support for HDR10 displays (for AMDGPU users only). See HDR monitor support for details.\n\n"
    },
    {
      "title": "Gallium Nine",
      "level": 4,
      "content": "When using gallium-based mesa drivers (mostly AMD and Intel cards) there is a native Gallium Direct3D driver that provides good performance for DirectX 9. It's mostly fallen out of favor due to DXVK, but you may still find it useful if you do not have Vulkan support. Performance on both DXVK and Gallium Nine should be around the same.\n\nInstall wine-nine to use it. This is a standalone package that can be installed with any Wine version. Use wine ninewinecfg to check if it is enabled.\n\nFor older Intel graphics (gen4-7: GMA 3000, GMA 4500, HD 2000-5000; year 2006-2014) Crocus Gallium driver should be used instead of i965 since Mesa 21.2. Export the following environment variable before running Wine:\n\n```\nMESA_LOADER_DRIVER_OVERRIDE=crocus\n```\n\n"
    },
    {
      "title": "Unregister existing Wine file associations",
      "level": 3,
      "content": "By default, Wine takes over as the default application for a lot of formats. Some (e.g. vbs or chm) are Windows-specific, and opening them with Wine can be a convenience. However, having other formats (e.g. gif, jpeg, txt, js) open in Wine's bare-bones simulations of Internet Explorer and Notepad can be annoying.\n\nWine's file associations are set in ~/.local/share/applications/ as wine-extension-extension.desktop files. Delete the files corresponding to the extensions you want to unregister. Or, to remove all wine extensions:\n\n```\n$ rm -f ~/.local/share/applications/wine-extension*.desktop\n$ rm -f ~/.local/share/icons/hicolor/*/*/application-x-wine-extension*\n```\n\nNext, remove the old cache:\n\n```\n$ rm -f ~/.local/share/applications/mimeinfo.cache\n$ rm -f ~/.local/share/mime/packages/x-wine*\n$ rm -f ~/.local/share/mime/application/x-wine-extension*\n```\n\nAnd, update the cache:\n\n```\n$ update-desktop-database ~/.local/share/applications\n$ update-mime-database ~/.local/share/mime/\n```\n\nPlease note Wine will still create new file associations and even recreate the file associations if the application sets the file associations again.\n\n"
    },
    {
      "title": "Prevent Wine from creating filetype associations",
      "level": 3,
      "content": "This method prevents the creation of filetype associations but retains the creation of XDG .desktop files (that you might see e.g. in menus).\n\nIf you want to stop wine from creating filetype associations via winecfg you have to uncheck the \"Manage File Associations\" checkbox under the Desktop Integration tab. See Wine FAQ\n\nTo make the same change via registry add the string Enable with value N under:\n\n```\nHKEY_CURRENT_USER\\Software\\Wine\\FileOpenAssociations\n```\n\nYou might have to create the key FileOpenAssociations first!\n\nTo make this change via the command-line, run the following command:\n\n```\n$ wine reg add \"HKEY_CURRENT_USER\\Software\\Wine\\FileOpenAssociations\" /v Enable /d N\n```\n\nIf you want to apply this by default for new WINEPREFIXES, edit /usr/share/wine/wine.inf and add this line for example under the [Services] section:\n\n```\nHKCU,\"Software\\Wine\\FileOpenAssociations\",\"Enable\",2,\"N\"\n```\n\nTo prevent a package upgrade from overriding the modified file, create a pacman hook to make the change automatically:\n\n```\n/etc/pacman.d/hooks/stop-wine-associations.hook\n```\n\n```\n[Trigger]\nOperation = Install\nOperation = Upgrade\nType = Path\nTarget = usr/share/wine/wine.inf\n\n[Action]\nDescription = Stopping Wine from hijacking file associations...\nWhen = PostTransaction\nExec = /bin/sh -c '/usr/bin/grep -q \"HKCU,\\\"Software\\\\\\Wine\\\\\\FileOpenAssociations\\\",\\\"Enable\\\",2,\\\"N\\\"\" /usr/share/wine/wine.inf || /usr/bin/sed -i \"s/\\[Services\\]/\\[Services\\]\\nHKCU,\\\"Software\\\\\\Wine\\\\\\FileOpenAssociations\\\",\\\"Enable\\\",2,\\\"N\\\"/g\" /usr/share/wine/wine.inf'\n```\n\nSee Pacman#Hooks for more information.\n\n"
    },
    {
      "title": "Execute Windows binaries with Wine implicitly",
      "level": 3,
      "content": "The wine package installs a binfmt file which will allows you to run Windows programs directly, e.g. ./myprogram.exe will launch as if you had typed wine ./myprogram.exe. Service starts by default on boot, if you have not rebooted after installing Wine you can start systemd-binfmt.service to use it right away.\n\n"
    },
    {
      "title": "Dual Head with different resolutions",
      "level": 3,
      "content": "If you have issues with dual-head setups and different display resolutions you are probably missing lib32-libxrandr.\n\nAlso installing lib32-libxinerama might fix dual-head issues with wine (for example, unclickable buttons and menus of application in the right most or bottom most monitor, not redrawable interface of application in that zone, dragging mouse cursor state stucked after leaving application area).\n\n"
    },
    {
      "title": "Burning optical media",
      "level": 3,
      "content": "To burn CDs or DVDs, you will need to load the sg kernel module.\n\n"
    },
    {
      "title": "Proper mounting of optical media images",
      "level": 3,
      "content": "Some applications will check for the disc to be in drive. They may check for data only, in which case it might be enough to configure the corresponding path as being a CD-ROM drive in winecfg. However, other applications will look for a name and/or a serial number, in which case the image has to be mounted with these special properties.\n\nSome virtual drive tools do not handle these metadata, like fuse-based virtual drives (Acetoneiso for instance). CDemu will handle it correctly.\n\n"
    },
    {
      "title": "Show FPS overlay in games",
      "level": 3,
      "content": "Wine features an embedded FPS monitor which works for all graphical applications if the environment variable WINEDEBUG=fps is set. This will output the framerate to stdout. You can display the FPS on top of the window thanks to osd_cat from the xosd package. See winefps.sh for a helper script.\n\n"
    },
    {
      "title": "Running Wine under a separate user account",
      "level": 3,
      "content": "It may be desirable to run Wine under a specifically created user account in order to reduce concerns about Windows applications having access to your home directory.\n\nFirst, create a user account for Wine:\n\n```\n# useradd -m -s /bin/bash wineuser\n```\n\nNow switch to another TTY and start your X WM or DE as you normally would or keep reading...\n\nAfterwards, in order to open Wine applications using this new user account you need to add the new user to the X server permissions list:\n\n```\n$ xhost +SI:localuser:wineuser\n```\n\nFinally, you can run Wine via the following command, which uses env to launch Wine with the environment variables it expects:\n\n```\n$ sudo -u wineuser env HOME=/home/wineuser USER=wineuser USERNAME=wineuser LOGNAME=wineuser wine arguments\n```\n\nIt is possible to automate the process of running Windows applications with Wine via this method by using a shell script as follows:\n\n```\n/usr/local/bin/runaswine\n```\n\n```\n#!/bin/sh\nxhost +SI:localuser:wineuser\nsudo -u wineuser env HOME=/home/wineuser USER=wineuser USERNAME=wineuser LOGNAME=wineuser wine \"$@\"\n```\n\nWine applications can then be launched via:\n\n```\n$ runaswine \"C:\\path\\to\\application.exe\"\n```\n\nIn order to not be asked for a password each time Wine is run as another user the following entry can be added to the sudoers file: mainuser ALL=(wineuser) NOPASSWD: ALL. See Sudo#Configuration for more information.\n\nIt is recommended to run winecfg as the Wine user and remove all bindings for directories outside the home directory of the Wine user in the \"Desktop Integration\" section of the configuration window so no program run with Wine has read access to any file outside the special user's home directory.\n\nKeep in mind that audio will probably be non-functional in Wine programs which are run this way if PulseAudio is used. See PulseAudio/Examples#Allowing multiple users to share a PulseAudio daemon for information about allowing the Wine user to access the PulseAudio daemon of the principal user.\n\n"
    },
    {
      "title": "Temp directory on tmpfs",
      "level": 3,
      "content": "To prevent Wine from writing its temporary files to a physical disk, one can define an alternative location, like tmpfs. Remove Wine's default directory for temporary files and creating a symlink:\n\n```\n$ rm -r ~/.wine/drive_c/users/$USER/Temp ~/.wine/drive_c/windows/temp\n$ ln -s /tmp/ ~/.wine/drive_c/users/$USER/Temp\n$ ln -s /tmp/ ~/.wine/drive_c/windows/temp\n```\n\n"
    },
    {
      "title": "Prevent installing Mono/Gecko",
      "level": 3,
      "content": "If Gecko and/or Mono are not present on the system nor in the Wine prefix, Wine will prompt to download them from the internet. If you do not need Gecko and/or Mono, you might want to disable this dialog, by setting the WINEDLLOVERRIDES environment variable to mscoree=d;mshtml=d.\n\n"
    },
    {
      "title": "Vulkan",
      "level": 3,
      "content": "The default Wine Vulkan ICD loader works fine for most applications, but does not support advanced features, like Vulkan layers. To use these features, you have to install the official Vulkan SDK, see step 2-4 on the original Vulkan patches author's GitHub page.\n\n"
    },
    {
      "title": "Remove Wine file bindings",
      "level": 3,
      "content": "For security reasons it may be useful to remove the preinstalled Wine bindings so Windows applications cannot be launched directly from a file manager or from the browser (Firefox offers to open EXE files directly with Wine!). If you want to do this, you may add the following NoExtract lines in /etc/pacman.conf:\n\n```\nNoExtract = usr/lib/binfmt.d/wine.conf\nNoExtract = usr/share/applications/wine.desktop\n```\n\n"
    },
    {
      "title": "Wine is setting its own applications as defaults",
      "level": 3,
      "content": "Every time Wine creates (or updates) a prefix it will set its own bundled apps like Notepad and Winebrowser as the default text editor and web browser accordingly.\n\nA way to work around this undesirable behavior is by using this environment variable:\n\n```\n$ WINEDLLOVERRIDES=winemenubuilder.exe=d ...\n```\n\n"
    },
    {
      "title": "WineASIO",
      "level": 3,
      "content": "If you need professional audio support under wine you can use wineasioAUR which provides an ASIO interface for wine that you can then use with JACK.\n\nIn order to use wineasio you must add yourself to the realtime user group.\n\nNext you need to register wineasio in your desired wine prefix. Register the 32-bit and/or 64-bit version as needed:\n\n```\n$ regsvr32 /usr/lib32/wine/i386-windows/wineasio32.dll\n$ wine64 regsvr32 /usr/lib/wine/x86_64-windows/wineasio64.dll\n```\n\n"
    },
    {
      "title": "Disable starting explorer.exe",
      "level": 3,
      "content": "If you run a text mode (Command User Interface) executable without X installed, these errors might appear while starting the executable:\n\n```\n0060:err:winediag:nodrv_CreateWindow Application tried to create a window, but no driver could be loaded.\n0060:err:winediag:nodrv_CreateWindow L\"The explorer process failed to start.\"\n0060:err:systray:initialize_systray Could not create tray window\n```\n\nThis is because wine by default starts explorer.exe. Even wineconsole starts explorer.exe /desktop according to ps output.\n\nStarting explorer including systray can be disabled with this environment setting:\n\n```\n$ WINEDLLOVERRIDES=\"explorer.exe=d\" wine program.exe\n```\n\nDepending on your CUI program, you might be able to use it with lowest memory footprint by disabling services.exe too:\n\n```\n$ WINEDLLOVERRIDES=\"explorer.exe,services.exe=d\" wine program.exe\n```\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "See Wine User's Guide and Wine FAQ (especially its Troubleshooting section) for general tips.\n\nAlso refer to the Wine AppDB for an advice on specific applications.\n\n"
    },
    {
      "title": "General installation issues",
      "level": 3,
      "content": "Each Wine prefix has a lot of persistent state, between the installed programs and the registry. The first step to troubleshooting issues with program installation should be to either create an isolated prefix, or clear the default prefix via rm -rf ~/.wine. The latter will delete any of the programs and settings you have added to the default prefix.\n\n"
    },
    {
      "title": "Error loading libc.so.6",
      "level": 3,
      "content": "You might get the following error when running wine:\n\n```\n$ wine cmd\n```\n\n```\n/usr/bin/wine: error while loading shared libraries: libc.so.6: cannot create shared object descriptor: Operation not permitted\n```\n\nThis is caused by the syscall to mmap2 failing:\n\n```\nmmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = -1 EPERM (Operation not permitted)\n```\n\nThis is a known bug in the kernel.\n\nChanging the vm.mmap_min_addr sysctl value from the default of 65536 seems to fix the problem:\n\n```\n# sysctl -w vm.mmap_min_addr=32768\n```\n\n"
    },
    {
      "title": "Xwayland problems",
      "level": 3,
      "content": "If you use Wine under Xwayland, you can activate the option for \"Emulating a virtual desktop\" in the Graphics Tab in winecfg, to avoid problems with:\n\n- flickering;\n- wrong window location;\n- wrong mouse cursor location and clicks;\n- keyboard detection.\n\nIf disabling the Virtual Desktop left you unable to interact with the winecfg window with mouse & keyboard anymore, you can explicitly start winecfg on a Virtual Desktop anyway and reenable it with:\n\n```\n$ wine explorer /desktop=name,800x600 winecfg\n```\n\nWhen starting GUI windows (eg. winecfg) with Wayland and none are displayed with these errors in console:\n\n```\n$ wine winecfg\n```\n\n```\nAuthorization required, but no authorization protocol specified\n\n008c:err:winediag:nodrv_CreateWindow Application tried to create a window, but no driver could be loaded.\n008c:err:winediag:nodrv_CreateWindow L\"The explorer process failed to start.\"\n008c:err:systray:initialize_systray Could not create tray window\n```\n\nYou may try setting the DISPLAY variable to :1:\n\n```\n$ DISPLAY=:1 wine winecfg\n```\n\n"
    },
    {
      "title": "Keyboard input not working",
      "level": 3,
      "content": "This could be caused by the window manager not switching focus. In the Graphics tab of winecfg, disable the 'Allow the window manager...' options, or set windowed mode with 'Emulate a virtual desktop'.\n\n- Some suggest to toggle all the Window settings, click Apply, then change them back. If that does not work, try the above.\n\nIf the keyboard does not work after unfocusing the application, try editing the registry:\n\n- Under HKEY_CURRENT_USER\\Software\\Wine\\X11 Driver, add a string value UseTakeFocus and set it to N.\n- Alternatively, you can use winetricks to set the value: $ winetricks usetakefocus=n or use wine reg $ wine reg add 'HKEY_CURRENT_USER\\Software\\Wine\\X11 Driver' /t REG_SZ /v UseTakeFocus /d N /f\n\n```\n$ winetricks usetakefocus=n\n```\n\n```\n$ wine reg add 'HKEY_CURRENT_USER\\Software\\Wine\\X11 Driver' /t REG_SZ /v UseTakeFocus /d N /f\n```\n\n"
    },
    {
      "title": "Application fails to start",
      "level": 3,
      "content": "Some older games and applications assume that the current working directory is the same as that which the executable is in. Launching these executables from other locations will prevent them from starting correctly. Use cd path_containing_exe before invoking Wine to rule this possibility out.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wine Homepage\n- Wine Wiki\n- Wine Application Database (AppDB) - Information about running specific Windows applications (Known issues, ratings, guides, etc tailored to specific applications)\n- Wine Forums - A great place to ask questions after you have looked through the FAQ and AppDB\n- Gentoo:Wine\n- Darling - a similar project for MacOS software\n- WineASIO - GitHub page of the WineASIO project with further information\n\n"
    }
  ]
}