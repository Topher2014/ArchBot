{
  "title": "Perl Policy",
  "url": "https://wiki.archlinux.org/title/Perl_Policy",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "This page covers the policy for how perl itself is configured and packaged. For Perl module packaging guidelines, see Perl package guidelines.\n\n"
    },
    {
      "title": "Introduction",
      "level": 2,
      "content": "This policy document was proposed, accepted, and implemented in version 5.10.0 of the perl package. It is the standard regarding to the perl package, related Perl packages, and creating Perl module packages (both in binary form and in the form of PKGBUILDs). Portions are derived from the Debian Perl Policy document and from various portions of the Perl man pages.\n\n"
    },
    {
      "title": "5.10 caveats",
      "level": 3,
      "content": "NOT TRUE: The directories for scripts do not conform to the Filesystem Hierarchy Standard (FHS).\n\n"
    },
    {
      "title": "Reasoning",
      "level": 3,
      "content": "Apparent problems with pre-5.10.0 perl packaging conventions included:\n\n1. The current Arch Linux default perl installation installs site and vendor packages into the same directory tree, which frequently causes conflicts if the end user installs and upgrades Arch Linux perl (vendor) packages on top of site packages.\n1. The current Arch Linux default perl installation installs updates to core modules into the perl core directories, creating file conflicts. Examples include modules such as Data::Dumper and version.\n1. A symlink-farm is created in /usr/lib/perl5/ and /usr/lib/perl5/site_perl which is un-necessary and confusing.\n1. A number of standard modules seem to be missing, or were neglected to be added as provides in the perl package itself, causing confusion and redundant entries in AUR and repositories as users try and fix the apparent problem of missing modules, which are provided by perl. This is probably a matter of education.\n1. Current perl-module PKGBUILD's could be simplified and standardized quite a bit.\n\nThis policy would eliminate all these problems.\n\n"
    },
    {
      "title": "Pitfalls",
      "level": 3,
      "content": "Current (apparent) downsides to adopting a policy such as this one:\n\n1. An update of every perl module PKGBUILD so that it installs into the correct (vendor) directory tree. It remains somewhat backwards-compatible with the old structure, in that old PKGBUILD's would technically work.\n1. Introduces changes into the perl package, which lives in the core repository, and proposes a new perl-modules package, which would live in the extra repository.\n1. Non-perl packages which compile static copies of the perl interpreter will not operate correctly until recompiled on an Arch Linux PC which adheres to this document. Examples of such packages include vim, subversion, and irssi. Many such examples exist.\n\n"
    },
    {
      "title": "Perl versions",
      "level": 2,
      "content": "At any given time, the package perl should represent the current stable upstream version of Perl revision 5. (see Perl 6).\n\nOnly one package may contain the /usr/bin/perl binary and that package must either be perl or a dependency of that package. In order to provide a minimal installation of Perl for use by applications without requiring the whole of Perl to be installed, the perl package contains the binary and a basic set of modules. The perl package should declare provide statements for every module provided by the base perl package.\n\n"
    },
    {
      "title": "Module paths",
      "level": 2,
      "content": "Perl searches three different locations for modules, referred to in this document as core in which modules distributed with Perl are installed, vendor for packaged modules, and site for modules installed by the local administrator.\n\nThe module search path (@INC) in the Arch Linux packages has been ordered to include these locations in the following order:\n\n- site\n\nModules installed by the local administrator for the current version of Perl. Typically, these modules are installed using the cpan or cpanp tool, or are downloaded in source form and installed via make.\n\n- vendor\n\nPackaged modules, installed via the pacman tool from the core or extra repositories, or built into proper Arch Linux packages from ABS/AUR PKGBUILDs.\n\n- core\n\nModules included in the core Perl distribution.\n\n- obsolete\n\nObsolete is the path name to modules installed prior to the establishment of this document. These paths have been removed from @INC in perl 5.12.2.\n\nIn each of the directory pairs above, the lib component is for binary, architecture dependent (XS) modules, and share for architecture-independent (pure-perl) modules. Under no circumstances should current be used as a replacement for version. Core and Vendor modules should be matched to the current installation of perl.\n\n"
    },
    {
      "title": "Documents",
      "level": 2,
      "content": "The POD files and manual pages and HTML documentation which do not refer to programs may be stripped from the package, which is normal for most Arch Linux packages in general. This is optional.\n\nManual pages distributed with Perl packages must be installed into the standard directories:\n\n"
    },
    {
      "title": "Binaries and scripts",
      "level": 2,
      "content": "In order to prevent file collisions, it is important to keep binaries generated by core, vendor, and site installs separate. It is also important that the default PATH environment variable set in each users profile to search for binaries in the same order as perl's @INC path. In order to accomplish this, binaries should be installed into the following directories:\n\nThe perl package should include a mechanism to adjust end-users PATH entries accordingly so that perl binaries are searched for in the following order: site, vendor, core.\n\n"
    },
    {
      "title": "Core",
      "level": 2,
      "content": "Core modules are Perl modules \"typically\" included in the core Perl distribution.\n\n"
    },
    {
      "title": "Core directories",
      "level": 3,
      "content": "- Modules included in the core Perl distribution should be installed into /usr/lib/perl5 and /usr/share/perl5.\n- Only modules contained in the perl package should be installed into this directory tree.\n- No version subdirectory exists in these paths as the dependencies for packaged modules should ensure that all work with the current perl package.\n\n"
    },
    {
      "title": "Core perl packages",
      "level": 3,
      "content": "The perl package should contain the /usr/bin/perl binary, and a minimal set of modules needed in order for simple perl scripts to run and for a base system to operate. It should be maintained in the core repository.\n\nThe following is a list of a few modules (for example), which are provided in the perl package. (See the PKGBUILD for the official list).\n\n'perl-checktree' 'perl-collate' 'perl-config' 'perl-cwd' 'perl-dynaloader' 'perl-english' 'perl-env' 'perl-exporter' 'perl-fnctl' 'perl-filehandle' 'perl-find' 'perl-finddepth' 'perl-getopt' 'perl-makemaker' 'perl-socket' 'perl-sys-syslog' 'perl-db-file' 'perl-storable' 'perl-data-dumper' 'perl-digest-md5'.\n\nEvery module supplied in the perl package shall be added into the provides array in the PKGBUILD. Modules in this array should NOT appear in the perl packages conflicts or replaces arrays. End users should be able to install newer versions of core modules, either in vendor or site directories without file collisions.\n\n"
    },
    {
      "title": "Site",
      "level": 2,
      "content": "Site modules are perl modules installed by the local administrator for the current version of Perl. Typically, these modules are installed using the cpan tool, or are downloaded in source form and installed via make (or MakeMaker).\n\n"
    },
    {
      "title": "Site directories",
      "level": 3,
      "content": "The Perl packages must provide a mechanism for the local administrator to install modules under /usr/lib/perl5/site_perl but must not create or remove those directories.\n\nModules should be installed to the directories described above in Module Path site, programs to /usr/bin/site_perl and manual pages under /usr/man.\n\n"
    },
    {
      "title": "Site installation",
      "level": 3,
      "content": "The following commands should be sufficient in the majority of cases for the local administrator to install modules and must create directories as required:\n\n```\nperl Makefile.PL\nmake install\n```\n\nor\n\n```\ncpan Foo::Bar\n```\n\n"
    },
    {
      "title": "Vendor",
      "level": 2,
      "content": "Vendor modules are packaged modules, installed via the pacman tool, or modules which have been built into proper Arch Linux packages from a PKGBUILD and makepkg.\n\n"
    },
    {
      "title": "Package naming",
      "level": 3,
      "content": "Perl module packages should be named for the primary module provided. The naming convention for module Foo::Bar is perl-foo-bar. Packages which include multiple modules may additionally include provides for those modules using the same convention.\n\n"
    },
    {
      "title": "Vendor directories",
      "level": 3,
      "content": "The installation directory for Arch Linux modules must be different from that for site modules. Some guidelines include:\n\n- The current Perl packaging uses the vendor directories for this purpose, which are at present as described in above as vendor.\n- No version subdirectory exists on these directories as the dependencies for packaged modules should ensure that all work with the current perl package.\n- The Perl distribution includes many modules available separately from CPAN, which may have a newer version. The intent of the @INC ordering (described above) is to allow such modules to be packaged to vendor which take precedence over the version in core. A packaged module which shadows a core module in this way must be a newer version.\n- Module packages must install manual pages into the standard directories using the extensions .1p and .3pm to ensure that no conflict arises where a packaged module duplicates a core module.\n- .packlist (used for module uninstalls) and perllocal.pod (used to record local/site installations) files should not be installed, and should be removed from the package if found.\n- Empty directories should be pruned.\n\n"
    },
    {
      "title": "Vendor installation",
      "level": 3,
      "content": "A module should use the following lines in the PKGBUILD build target.\n\n```\nperl Makefile.PL INSTALLDIRS=vendor\n```\n\nand this one to install the results into the temporary tree...\n\n```\nmake install DESTDIR=\"${pkgdir}\" install\n```\n\nA depends on perl (>= 5.10.0) is required in order ensure that the module is correctly installed into the new @INC path.\n\n"
    },
    {
      "title": "Sample vendor PKGBUILD",
      "level": 3,
      "content": "```\n# $Id$\n# Contributor: Barry User <barry@user.com>\n# Maintainer: Harry Hacker <harry@hacker.com>\n\npkgname=perl-html-template\n_realname=HTML-Template\npkgver=2.9\npkgrel=2\npkgdesc=\"Perl/CPAN Module HTML::Template : a simple HTML templating system\"\narch=('any')\nurl=\"https://search.cpan.org/dist/${_realname}/\"\nlicense=('GPL' 'Artistic')\ndepends=('perl>=5.10.0')\nsource=(\"https://www.cpan.org/authors/id/S/SA/SAMTREGAR/${_realname}-${pkgver}.tar.gz\")\nmd5sums=(\"cbf88a486b36284be55765ac7357c187\")\noptions=('!emptydirs')\n\nbuild() {\n  cd \"${_realname}-${pkgver}\"\n \n # Setting these env variables overwrites any command-line options we don't want...\n export PERL_MM_USE_DEFAULT=1 PERL_AUTOINSTALL=--skipdeps \\\n   PERL_MM_OPT=\"INSTALLDIRS=vendor DESTDIR='$pkgdir'\" \\\n   PERL_MB_OPT=\"--installdirs vendor --destdir '$pkgdir'\" \\\n   PERL5LIB=\"\" PERL_LOCAL_LIB_ROOT=\"\" \\\n   MODULEBUILDRC=/dev/null\n\n # If using Makefile.PL\n { /usr/bin/perl Makefile.PL &&\n   make &&\n   make test &&\n   make install; } || return 1\n\n # If using Build.PL\n { /usr/bin/perl Build.PL &&\n   ./Build &&\n   ./Build test &&\n   ./Build install; } || return 1\n\n # remove perllocal.pod and .packlist\n find \"$pkgdir\" \\( -name .packlist -o -name perllocal.pod \\) -delete \n}\n```\n\n"
    },
    {
      "title": "Binary modules",
      "level": 4,
      "content": "Binary modules must specify a dependency on either perl with a minimum version of the perl package used to build the module, and must additionally depend on the expansion of perlapi-$Config{version} using the Config module.\n\n"
    },
    {
      "title": "Architecture-independent modules",
      "level": 4,
      "content": "Architecture-independent modules which require core modules from the perl package must specify a dependency on that package.\n\nModules which contain explicit require version or use version statements must specify a dependency on perl with the minimum required version, or more simply the current version.\n\nIn the absence of an explicit requirement, architecture-independent modules must depend on a minimum perl version of 5.10.0 due to the changes in @INC introduced by that version.\n\n"
    },
    {
      "title": "Perl6",
      "level": 2,
      "content": "There is currently work in progress on the next major revision, although the specifications have yet to be finalised.\n\nIt is anticipated that when Perl 6 is released it will initially be packaged as perl6, install the binary as /usr/bin/perl6, and use different directories for packaged modules to perl:\n\nThis will allow Perl 5 and 6 packages and modules (which should be packaged as perl6-foo-bar), to coexist for as long as required.\n\nAt some stage in the future when Perl 6 is sufficiently mature, the package naming may be reversed such that the perl package contains Perl 6 and the current package becomes perl5.\n\n"
    }
  ]
}