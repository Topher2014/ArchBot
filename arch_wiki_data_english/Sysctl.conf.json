{
  "title": "Sysctl.conf",
  "url": "https://wiki.archlinux.org/title/Sysctl.conf",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "sysctl is a tool for examining and changing kernel parameters at runtime. sysctl is implemented in procfs, the virtual process file system at /proc/.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "The procps-ng package should already be installed, as it is a dependency of the base meta package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The sysctl preload/configuration file can be created at /etc/sysctl.d/99-sysctl.conf. For systemd, /etc/sysctl.d/ and /usr/lib/sysctl.d/ are drop-in directories for kernel sysctl parameters. The naming and source directory decide the order of processing, which is important since the last parameter processed may override earlier ones. For example, parameters in a /usr/lib/sysctl.d/50-default.conf will be overriden by equal parameters in /etc/sysctl.d/50-default.conf and any configuration file processed later from both directories.\n\nTo load all configuration files manually, execute:\n\n```\n# sysctl --system\n```\n\nwhich will also output the applied hierarchy. A single parameter file can also be loaded explicitly with:\n\n```\n# sysctl --load=filename.conf\n```\n\nSee the new configuration files and more specifically sysctl.d(5) for more information.\n\nThe parameters available are those listed under /proc/sys/. For example, the kernel.sysrq parameter refers to the file /proc/sys/kernel/sysrq on the file system. The sysctl --all command can be used to display all currently available values.\n\nSettings can be changed through file manipulation or using the sysctl(8) utility. For example, to temporarily enable the magic SysRq key:\n\n```\n# sysctl kernel.sysrq=1\n```\n\nor:\n\n```\n# echo \"1\" > /proc/sys/kernel/sysrq\n```\n\nSee Linux kernel documentation for details about kernel.sysrq.\n\nTo preserve changes between reboots, add or modify the appropriate lines in /etc/sysctl.d/99-sysctl.conf or another applicable parameter file in /etc/sysctl.d/.\n\n"
    },
    {
      "title": "Security",
      "level": 2,
      "content": "See also Security#Kernel hardening, as well as the rest of this article.\n\n"
    },
    {
      "title": "Increasing the size of the receive queue.",
      "level": 4,
      "content": "The received frames will be stored in this queue after taking them from the ring buffer on the network card.\n\nIncreasing this value for high speed cards may help prevent losing packets:\n\n```\nnet.core.netdev_max_backlog = 16384\n```\n\n"
    },
    {
      "title": "Increase the maximum connections",
      "level": 4,
      "content": "The upper limit on how many connections the kernel will accept (default 4096):\n\n```\nnet.core.somaxconn = 8192\n```\n\n"
    },
    {
      "title": "Increase the memory dedicated to the network interfaces",
      "level": 4,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nThe default the Linux network stack is not configured for high speed large file transfer across WAN links (i.e. handle more network packets) and setting the correct values may save memory resources:\n\n```\nnet.core.rmem_default = 1048576\nnet.core.rmem_max = 16777216\nnet.core.wmem_default = 1048576\nnet.core.wmem_max = 16777216\nnet.core.optmem_max = 65536\nnet.ipv4.tcp_rmem = 4096 1048576 2097152\nnet.ipv4.tcp_wmem = 4096 65536 16777216\n```\n\nIt is also possible increase the default 4096 UDP limits:\n\n```\nnet.ipv4.udp_rmem_min = 8192\nnet.ipv4.udp_wmem_min = 8192\n```\n\nSee the following sources for more information and recommend values:\n\n- http://www.nateware.com/linux-network-tuning-for-2013.html\n- https://blog.cloudflare.com/the-story-of-one-latency-spike/\n\n"
    },
    {
      "title": "Enable TCP Fast Open",
      "level": 4,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nTCP Fast Open is an extension to the transmission control protocol (TCP) that helps reduce network latency by enabling data to be exchanged during the sender’s initial TCP SYN [2]. Using the value 3 instead of the default 1 allows TCP Fast Open for both incoming and outgoing connections:\n\n```\nnet.ipv4.tcp_fastopen = 3\n```\n\n"
    },
    {
      "title": "Tweak the pending connection handling",
      "level": 4,
      "content": "tcp_max_syn_backlog is the maximum queue length of pending connections 'Waiting Acknowledgment'.\n\nIn the event of a synflood DOS attack, this queue can fill up pretty quickly, at which point TCP SYN cookies will kick in allowing your system to continue to respond to legitimate traffic, and allowing you to gain access to block malicious IPs.\n\nIf the server suffers from overloads at peak times, you may want to increase this value a little bit:\n\n```\nnet.ipv4.tcp_max_syn_backlog = 8192\n```\n\ntcp_max_tw_buckets is the maximum number of sockets in TIME_WAIT state.\n\nAfter reaching this number the system will start destroying the socket that are in this state.\n\nIncrease this to prevent simple DOS attacks:\n\n```\nnet.ipv4.tcp_max_tw_buckets = 2000000\n```\n\ntcp_tw_reuse sets whether TCP should reuse an existing connection in the TIME-WAIT state for a new outgoing connection if the new timestamp is strictly bigger than the most recent timestamp recorded for the previous connection.\n\nThe default value is 2, means it's enabled for loopback connections only. You can set it to 1 to enable for all connections, this helps avoid from running out of available network sockets:\n\n```\nnet.ipv4.tcp_tw_reuse = 1\n```\n\nSpecify how many seconds to wait for a final FIN packet before the socket is forcibly closed. This is strictly a violation of the TCP specification, but required to prevent denial-of-service attacks. In Linux 2.2, the default value was 180 [3]:\n\n```\nnet.ipv4.tcp_fin_timeout = 10\n```\n\ntcp_slow_start_after_idle sets whether TCP should start at the default window size only for new connections or also for existing connections that have been idle for too long.\n\nThis setting kills persistent single connection performance and could be turned off:\n\n```\nnet.ipv4.tcp_slow_start_after_idle = 0\n```\n\n"
    },
    {
      "title": "Change TCP keepalive parameters",
      "level": 4,
      "content": "TCP keepalive is a mechanism for TCP connections that help to determine whether the other end has stopped responding or not. TCP will send the keepalive probe that contains null data to the network peer several times after a period of idle time. If the peer does not respond, the socket will be closed automatically. By default, TCP keepalive process waits for two hours (7200 secs) for socket activity before sending the first keepalive probe, and then resend it every 75 seconds. As long as there is TCP/IP socket communications going on and active, no keepalive packets are needed.\n\n```\nnet.ipv4.tcp_keepalive_time = 60\nnet.ipv4.tcp_keepalive_intvl = 10\nnet.ipv4.tcp_keepalive_probes = 6\n```\n\n"
    },
    {
      "title": "Enable MTU probing",
      "level": 4,
      "content": "The longer the maximum transmission unit (MTU) the better for performance, but the worse for reliability.\n\nThis is because a lost packet means more data to be retransmitted and because many routers on the Internet cannot deliver very long packets:\n\n```\nnet.ipv4.tcp_mtu_probing = 1\n```\n\nSee https://blog.cloudflare.com/path-mtu-discovery-in-practice/ for more information.\n\n"
    },
    {
      "title": "TCP timestamps",
      "level": 4,
      "content": "Disabling timestamp generation will reduce spikes and may give a performance boost on gigabit networks:\n\n```\nnet.ipv4.tcp_timestamps = 0\n```\n\n"
    },
    {
      "title": "TCP Selective Acknowledgement",
      "level": 4,
      "content": "TCP Selective Acknowledgement (TCP SACK), controlled by the boolean tcp_sack, allows the receiving side to give the sender more detail about lost segments, reducing volume of retransmissions. This is useful on high latency networks, but disable this to improve throughput on high-speed LANs. Also disable tcp_dsack, if you aren't sending SACK you certainly don't want to send duplicates! Forward Acknowledgement works on top of SACK and will be disabled if SACK is. [5]\n\n```\nnet.ipv4.tcp_sack = 1\n```\n\n"
    },
    {
      "title": "Enable BBR",
      "level": 4,
      "content": "The BBR congestion control algorithm can help achieve higher bandwidths and lower latencies for internet traffic. First, load the tcp_bbr module.\n\n```\nnet.core.default_qdisc = cake\nnet.ipv4.tcp_congestion_control = bbr\n```\n\n"
    },
    {
      "title": "Increase the Ephemeral port range",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nThe Wikipedia:Ephemeral port is typically used by the Transmission Control Protocol (TCP), User Datagram Protocol (UDP), or the Stream Control Transmission Protocol (SCTP) as the port assignment for the client end of a client–server communication.\n\n```\nnet.ipv4.ip_local_port_range = 30000 65535\n```\n\n"
    },
    {
      "title": "TCP/IP stack hardening",
      "level": 3,
      "content": "The following specifies a parameter set to tighten network security options of the kernel for the IPv4 protocol and related IPv6 parameters where an equivalent exists.\n\nFor some use-cases, for example using the system as a router, other parameters may be useful or required as well.\n\n"
    },
    {
      "title": "TCP SYN cookie protection",
      "level": 4,
      "content": "Helps protect against SYN flood attacks. Only kicks in when net.ipv4.tcp_max_syn_backlog is reached. More details at, for example, [6]. As of linux 5.10, it is set by default.\n\n```\nnet.ipv4.tcp_syncookies = 1\n```\n\n"
    },
    {
      "title": "TCP rfc1337",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nProtect against tcp time-wait assassination hazards, drop RST packets for sockets in the time-wait state. Not widely supported outside of Linux, but conforms to RFC:\n\n```\nnet.ipv4.tcp_rfc1337 = 1\n```\n\n"
    },
    {
      "title": "Reverse path filtering",
      "level": 4,
      "content": "By enabling reverse path filtering, the kernel will do source validation of the packets received from all the interfaces on the machine. This can protect from attackers that are using IP spoofing methods to do harm.\n\nThe kernel's default value is 0 (no source validation), but systemd ships /usr/lib/sysctl.d/50-default.conf that sets net.ipv4.conf.all.rp_filter to 2 (loose mode)[8].\n\nThe following will set the reverse path filtering mechanism to value 1 (strict mode):\n\n```\nnet.ipv4.conf.default.rp_filter = 1\nnet.ipv4.conf.all.rp_filter = 1\n```\n\nThe relationship and behavior of net.ipv4.conf.default.*, net.ipv4.conf.interface.* and net.ipv4.conf.all.* is explained in ip-sysctl.html.\n\n"
    },
    {
      "title": "Log martian packets",
      "level": 4,
      "content": "A martian packet is an IP packet which specifies a source or destination address that is reserved for special-use by Internet Assigned Numbers Authority (IANA). See Reserved IP addresses for more details.\n\nOften martian and unroutable packet may be used for a dangerous purpose. Logging these packets for further inspection may be useful [9]:\n\n```\nnet.ipv4.conf.default.log_martians = 1\nnet.ipv4.conf.all.log_martians = 1\n```\n\n"
    },
    {
      "title": "Disable ICMP redirects",
      "level": 4,
      "content": "Background is at What are ICMP redirects? Should they be blocked?\n\nTo disable ICMP redirect acceptance:\n\n```\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv4.conf.all.secure_redirects = 0\nnet.ipv4.conf.default.secure_redirects = 0\nnet.ipv6.conf.all.accept_redirects = 0\nnet.ipv6.conf.default.accept_redirects = 0\n```\n\nTo disable ICMP redirect sending when on a non router:\n\n```\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\n```\n\n"
    },
    {
      "title": "Ignore ICMP echo requests",
      "level": 4,
      "content": "To disable ICMP echo (aka ping) requests:\n\n```\nnet.ipv4.icmp_echo_ignore_all = 1\nnet.ipv6.icmp.echo_ignore_all = 1\n```\n\n"
    },
    {
      "title": "Allow unprivileged users to create IPPROTO_ICMP sockets",
      "level": 4,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nThe IPPROTO_ICMP (icmp(7)) socket type adds the possibility to send ICMP_ECHO messages and receive corresponding ICMP_ECHOREPLY messages without the need to open a raw(7) socket, an operation which requires the CAP_NET_RAW capability or the SUID bit with a proper privileged owner. These ICMP_ECHO messages are sent by the ping application thus making the IPPROTO_ICMP socket also known as ping socket in addition to ICMP Echo socket.\n\nping_group_range determines the GID range of groups which their users are allowed to create IPPROTO_ICMP sockets. Additionally, the owner of the CAP_NET_RAW capability is also allowed to create IPPROTO_ICMP sockets. By default this range is 1 0 which means no one is allowed to create IPPROTO_ICMP sockets except root. To take advantage of this setting programs which currently uses raw sockets need to ported to use IPPROTO_ICMP sockets instead. For example, QEMU uses IPPROTO_ICMP for SLIRP aka User-mode networking, so allowing the user running QEMU to create IPPROTO_ICMP sockets means it is possible to ping from the guest.\n\nTo allow only users which are members of the group with GID 100 to create IPPROTO_ICMP sockets:\n\n```\nnet.ipv4.ping_group_range = 100 100\n```\n\nTo allow all the users in the system to create IPPROTO_ICMP sockets:\n\n```\nnet.ipv4.ping_group_range = 0 65535\n```\n\n"
    },
    {
      "title": "Virtual memory",
      "level": 2,
      "content": "There are several key parameters to tune the operation of the virtual memory subsystem of the Linux kernel and the write out of dirty data to disk. See the official Linux kernel documentation for more information. For example:\n\n- vm.dirty_ratio = 10\n\n- vm.dirty_background_ratio = 5\n\nAs noted in the comments for the parameters, one needs to consider the total amount of RAM when setting these values. For example, simplifying by taking the installed system RAM instead of available memory:\n\nNote: See https://lonesysadmin.net/2013/12/22/better-linux-disk-caching-performance-vm-dirty_ratio/ for more information.\n\n- Higher ratio values may increase performance, it also increases the risk of data loss.\n- Setting this value to 0 may cause higher latency on disks and spikes.\n\nSee https://lonesysadmin.net/2013/12/22/better-linux-disk-caching-performance-vm-dirty_ratio/ for more information.\n\n- Consensus is that setting vm.dirty_ratio to 10% of RAM is a sane value if RAM is say 1 GB (so 10% is 100 MB). But if the machine has much more RAM, say 16 GB (10% is 1.6 GB), the percentage may be out of proportion as it becomes several seconds of writeback on spinning disks. A more sane value in this case may be 3 (3% of 16 GB is approximately 491 MB).\n- Similarly, setting vm.dirty_background_ratio to 5 may be just fine for small memory values, but again, consider and adjust accordingly for the amount of RAM on a particular system.\n\n"
    },
    {
      "title": "VFS cache",
      "level": 3,
      "content": "Decreasing the virtual file system (VFS) cache parameter value may improve system responsiveness:\n\n- vm.vfs_cache_pressure = 50\n\n"
    },
    {
      "title": "MDADM",
      "level": 2,
      "content": "See RAID#Change sync speed limits.\n\n"
    },
    {
      "title": "Small periodic system freezes",
      "level": 3,
      "content": "Set dirty bytes to small enough value (for example 4M):\n\n```\nvm.dirty_background_bytes = 4194304\nvm.dirty_bytes = 4194304\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- sysctl(8) and sysctl.conf(5)\n- Linux kernel documentation for /proc/sys/\n- Kernel Documentation: IP Sysctl\n- Kernel network parameters for sysctl\n- sysctl-explorer.net – an initiative to facilitate the access of Linux' sysctl reference documentation\n- Disable Source Routing - Red Hat Customer Portal\n- SUSE handbook about Security Features in the Kernel\n- Linux sysctl Tuning\n\n"
    }
  ]
}