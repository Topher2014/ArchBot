{
  "title": "Conky/Tips and tricks",
  "url": "https://wiki.archlinux.org/title/Conky/Tips_and_tricks",
  "sections": [
    {
      "title": "Transparency",
      "level": 2,
      "content": "Conky supports two different types of transparency. Pseudo-transparency and real transparency that requires a composite manager to be installed and running. If you enable real transparency and do not have a composite manager running your conky will not be alpha transparent with transparency enabled for fonts and images as well as the background.\n\n"
    },
    {
      "title": "Pseudo-transparency",
      "level": 3,
      "content": "Pseudo-transparency is enabled by default in conky. Pseudo-transparency works by copying the background image from the root window and using the relevant section as the background for conky. Some window managers set the background wallpaper to a level above the root window which can cause conky to have a grey background. To fix this issue you need to set it manually. An example with feh is:\n\nIn ~/.xinitrc:\n\n```\nsleep 1 && feh --bg-center ~/background.png &\n```\n\n"
    },
    {
      "title": "Enable real transparency",
      "level": 3,
      "content": "To enable real transparency, you must have a composite manager running and the following lines added to .conkyrc inside the conky.config array:\n\n```\nconky.config = {\n    own_window = true,\n    own_window_transparent = true,\n    own_window_argb_visual = true,\n    own_window_type = 'desktop',\n }\n```\n\nIf window type \"desktop\" does not work try changing it to normal. If that does not work try the other options: dock, panel, or override instead.\n\n"
    },
    {
      "title": "Semi-transparency",
      "level": 3,
      "content": "To achieve semi-transparency in real transparency mode, the following setup must be used in the conky configuration file:\n\n```\nconky.config = {\n    own_window = true,\n    own_window_transparent = false,\n    own_window_argb_visual = true,\n    own_window_argb_value = 90,\n    own_window_type = 'desktop',\n }\n```\n\nTo reduce the transparency of the conky window, one can increase the value of own_window_argb_value towards 255.\n\n"
    },
    {
      "title": "Display package update information",
      "level": 2,
      "content": "pacman-contrib provides a script called checkupdates which displays package updates from the official repos. Use ${execi 3600 checkupdates | wc -l} to display the total number of packages.\n\n"
    },
    {
      "title": "tail text files",
      "level": 2,
      "content": "conky is able to conky(1) § tail files to your desktop, which is mostly useful for text files. Such as reading /var/log/ files to display all kinds of log messages. Most of these files can only be read by root, but running conky as root is not recommended, so you will need to add yourself to the log user group. In addition, since systemd log files are binary files, this feature is less useful then it used to be. However, it could be accomplished using lua scripts.\n\n"
    },
    {
      "title": "Display weather forecast",
      "level": 2,
      "content": "It is achieved by reading external web pages, usually pages dedicated to weather forecast. See this thread. Another weather script in lua: here\n\n"
    },
    {
      "title": "Display a countdown timer",
      "level": 2,
      "content": "ConkyTimer is a simple countdown timer that displays the remaining time of a defined task.\n\nStart the timer using conkytimer \"<task description>\" <min>.\n\n"
    },
    {
      "title": "Display RSS feeds",
      "level": 2,
      "content": "Conky has the ability to display RSS feeds natively without the need for an outside script to run and output into Conky. For example, to display the titles of the ten most recent Planet Arch updates and refresh the feed every minute, you would put this into your conky.conf in the TEXT section:\n\n```\n${rss https://planet.archlinux.org/rss20.xml 300 item_titles 10 }\n```\n\nIf you want to display Arch Forum rss feed, add this line:\n\n```\n${rss https://bbs.archlinux.org/extern.php?action=feed&type=rss 300 item_titles 4}\n```\n\nwhere 300 is in seconds the refresh interval (15 minutes is default), 4 the number of items you wish to show.\n\n"
    },
    {
      "title": "Display a calendar for the current month",
      "level": 2,
      "content": "You can use the following lua script to display a calendar. It uses color1 and the default color from your configuration. It looks best with a monospace font.\n\n```\n#!/usr/bin/env lua\n \n conky_color = \"${color1}%2d${color}\"\n \n t = os.date('*t', os.time())\n year, month, currentday = t.year, t.month, t.day\n \n daystart = os.date(\"*t\",os.time{year=year,month=month,day=01}).wday\n \n month_name = os.date(\"%B\")\n \n days_in_month = {\n     31, 28, 31, 30, 31, 30, \n     31, 31, 30, 31, 30, 31\n }\n \n -- check for leap year\n -- Any year that is evenly divisible by 4 is a leap year\n -- Any year that is evenly divisible by 100 is a leap year if\n -- it is also evenly divisible by 400.\n LeapYear = function (year)\n     return year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0)\n end\n \n if LeapYear(year) then\n     days_in_month[2] = 29\n end\n \n title_start = (20 - (string.len(month_name) + 5)) / 2\n \n title = string.rep(\" \", math.floor(title_start+0.5)) .. -- add padding to center the title\n         (\" %s %s\\n Su Mo Tu We Th Fr Sa\\n\"):format(month_name, year)\n \n io.write(title)\n \n function seq(a,b)\n     if a > b then\n         return\n     else\n         return a, seq(a+1,b)\n     end \n end\n \n days = days_in_month[month]\n \n io.write(\n     string.format(\n         string.rep(\"   \", daystart-1) ..\n         string.rep(\" %2d\", days), seq(1,days)\n     ):gsub(string.rep(\".\",21),\"%0\\n\")\n      :gsub((\"%2d\"):format(currentday),\n            (conky_color):format(currentday)\n      ) .. \"\\n\"\n )\n```\n\nInside your conky.conf you can then place the following, making sure the path matches where you saved the script.\n\n```\nconky.text = [[\n ${execpi 3600 ~/.config/conky/cal.lua}\n ]]\n```\n\n"
    },
    {
      "title": "Display rTorrent stats",
      "level": 2,
      "content": "See this thread.\n\n"
    },
    {
      "title": "Display your WordPress blog stats",
      "level": 2,
      "content": "This can be achieved by using the in python written extension named ConkyPress.\n\n"
    },
    {
      "title": "Display number of new emails",
      "level": 2,
      "content": "Conky has built in support for IMAP and POP3, but does not have support for access over ssl. Conky's FAQ recommends using stunnel for this and has an example configuration here.\n\nModify /etc/stunnel/stunnel.conf as follows, and then start stunnel.service:\n\n1. Service-level configuration for TLS server\n\n```\n[imap]\nclient = yes\naccept  = 143\nconnect = imap.gmail.com:143\nprotocol = imap\nsslVersion = TLSv1\n# Service-level configuration for SSL server\n[imaps]\nclient = yes\naccept  = 993\nconnect = imap.gmail.com:993\n```\n\nThen add the following to conky.conf:\n\n```\nconky.config = {\n    imap = \"localhost username password [-i 120] [-f 'inbox'] [-p 993]\",\n}\n```\n\n```\nconky.text {\n    Inbox: ${imap_unseen}/${imap_messages}\n}\n```\n\n"
    },
    {
      "title": "Gmail",
      "level": 3,
      "content": "If you use 2-factor authentication, you need to use an App Password.\n\nFor method 1, 2 and 3:\n\nCreate one of the following files in a convenient location (for example in ~/.scripts/).\n\nThen add the following string to your conky.conf in order the check your Gmail account for new email every five minutes (300 seconds) and display:\n\n```\n${execi 300 python ~/.scripts/gmail.py}\n```\n\n"
    },
    {
      "title": "method 1",
      "level": 4,
      "content": "This script uses retrieves the number of new email via Gmail's Atom API.\n\n```\ngmail.py\n```\n\n```\n#!/usr/bin/env python3\n\nimport urllib.request\n\nemail = 'your email'\npassword = 'your password'\n\n# Set up authentication for gmail\nauth_handler = urllib.request.HTTPBasicAuthHandler()\nauth_handler.add_password(realm='mail.google.com',\n                          uri='https://mail.google.com/',\n                          user=email,\n                          passwd=password)\nopener = urllib.request.build_opener(auth_handler)\n# ...and install it globally so it can be used with urlopen.\nurllib.request.install_opener(opener)\n\ngmailurl = 'https://mail.google.com/gmail/feed/atom'\nwith urllib.request.urlopen(gmailurl) as page:\n    contents = page.read().decode('utf-8')\n\nifrom = contents.index('<fullcount>') + 11\nito   = contents.index('</fullcount>')\n\nfullcount = contents[ifrom:ito]\n\nprint('{} new emails'.format(fullcount))\n```\n\n"
    },
    {
      "title": "method 2",
      "level": 4,
      "content": "Same as method 1, but does proper XML parsing.\n\n```\ngmail.py\n```\n\n```\n#!/usr/bin/env python3\n\nimport urllib.request\nfrom xml.etree import ElementTree as etree\n\nemail = 'your email'\npassword = 'your password'\n\n# Set up authentication for gmail\nauth_handler = urllib.request.HTTPBasicAuthHandler()\nauth_handler.add_password(realm='mail.google.com',\n                          uri='https://mail.google.com/',\n                          user=email,\n                          passwd=password)\nopener = urllib.request.build_opener(auth_handler)\n# ...and install it globally so it can be used with urlopen.\nurllib.request.install_opener(opener)\n\ngmailurl = 'https://mail.google.com/gmail/feed/atom'\nNS = '{http://purl.org/atom/ns#}'\nwith urllib.request.urlopen(gmailurl) as source:\n    tree = etree.parse(source)\nfullcount = tree.find(NS + 'fullcount').text\n\nprint('{} new emails'.format(fullcount))\n```\n\n"
    },
    {
      "title": "method 3",
      "level": 4,
      "content": "The same way, but with using curl, grep and sed:\n\n```\ngmail.sh\n```\n\n```\n#!/usr/bin/sh\n\ncurl -s -u email:password https://mail.google.com/mail/feed/atom | grep fullcount | sed 's/<[^0-9]*>//g'\n```\n\nreplace email and password with your data.\n\n"
    },
    {
      "title": "IMAP + SSL using Perl",
      "level": 4,
      "content": "Conky has built in support for IMAP accounts but does not support SSL. This can be provided using this script from this forum post. This requires the Perl/CPAN Modules Mail::IMAPClient and IO::Socket::SSL which are in the perl-mail-imapclient and perl-io-socket-ssl packages\n\nCreate a file named imap.pl in a location to be read by conky (for example in ~/.scripts/). In this file, add (with the appropriate changes):\n\n```\nimap.pl\n```\n\n```\n#!/usr/bin/perl\n \n# by gxmsgx\n# description: get the count of unread messages on imap\n\nuse strict;\nuse Mail::IMAPClient;\nuse IO::Socket::SSL;\n\nmy $username = 'example.username'; \nmy $password = 'password123'; \n\nmy $socket = IO::Socket::SSL->new(\n  PeerAddr => 'imap.server',\n  PeerPort => 993\n )\n or die \"socket(): $@\";\n \nmy $client = Mail::IMAPClient->new(\n  Socket   => $socket,\n  User     => $username,\n  Password => $password,\n )\n or die \"new(): $@\";\n \nif ($client->IsAuthenticated()) {\n  my $msgct;\n\n  $client->select(\"INBOX\");\n  $msgct = $client->unseen_count||'0';\n  print \"$msgct\\n\";\n}\n\n$client->logout();\n```\n\nAdd to conky.conf:\n\n```\n${execi 300 ~/.scripts/imap.pl}\n```\n\nor wherever you saved the file.\n\nIf you use Gmail you might need to generate an application specific password.\n\nAlternatively, you can use stunnel as shown above: #Gmail\n\n"
    },
    {
      "title": "IMAP using PHP",
      "level": 4,
      "content": "Another alternative using PHP. PHP needs to be installed and extension=imap must be uncommented in /etc/php/php.ini.\n\nThen create a file named imap.php in a location to be read by conky (for example in ~/.scripts/). Make the file executable.\n\nIn this file, add (with the appropriate changes):\n\n```\nimap.php\n```\n\n```\n#!/usr/bin/php\n<?php\n// See http://php.net/manual/function.imap-open.php for more information about\n// the mailbox string in the first parameter of imap_open.\n// This example is ready to use with Office 365 Exchange Mails,\n// just replace your username (=email address) and the password.\n$mbox = imap_open(\"{outlook.office365.com:993/imap/ssl/novalidate-cert}\", \"username\", \"password\");\n\n// Total number of emails\n$nrTotal = imap_num_msg($mbox);\n \n// Number of unseen emails. There are other ways using imap_status to count\n// unseen messages, but they don't work with Office 365 Exchange. This one does.\n$unseen = imap_search($mbox, 'UNSEEN');\n$nrUnseen = $unseen ? count($unseen) : 0;\n \n// Display the result, format as you like.\necho $nrUnseen.'/'.$nrTotal;\n \n// Not needed, because the connection is closed after the script end.\n// For the sake of clean public available scripts, we are nice to\n// the imap server and close the connection manually.\nimap_close($mbox);\n```\n\nAdd to conky.conf:\n\n```\n${execi 300 ~/.scripts/imap.php}\n```\n\nor wherever you saved the file.\n\nThis script displays A/B where A is the number of unseen emails and B is the total number of mails in the mailbox. There are a lot of other information available through a lot of PHP functions like with imap_Status (https://php.net/manual/function.imap-status.php). Just see the PHP docs about IMAP: https://php.net/manual/ref.imap.php.\n\n"
    },
    {
      "title": "Show graphic of active network interface",
      "level": 2,
      "content": "To test if a network inferface is currently active, you can use the test conky variable if_existing on the operstate of the interface. Here is an example for wlo1 :\n\n```\ndraw_graph_borders yes \n${if_existing /sys/class/net/wlo1/operstate up}\n${color #0077ff}Net Down:$color ${downspeed wlo1}      ${color #0077ff}Net Up:$color ${upspeed wlo1}\n${color #0077ff}${downspeedgraph wlo1 32,155 104E8B 0077ff} $alignr${color #0077ff}${upspeedgraph wlo1 32,155 104E8B 0077ff}\n${endif}\n```\n\nThis is the expected result :\n\nhttps://i.imgur.com/pQQbsP6.png\n\n"
    },
    {
      "title": "User-contributed configuration examples",
      "level": 2,
      "content": "- A sample rings script with nvidia support - gist\n\n"
    }
  ]
}