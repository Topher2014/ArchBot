{
  "title": "Bwrap",
  "url": "https://wiki.archlinux.org/title/Bwrap",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Bubblewrap/Examples\n- Security\n- Firejail\n\nBubblewrap is a lightweight sandbox application used by Flatpak and other container tools. It has a small installation footprint and minimal resource requirements. While the package is named bubblewrap, the actual command-line interface is bwrap(1). Notable features include support for cgroup/IPC/mount/network/PID/user/UTS namespaces and seccomp filtering. Note that bubblewrap drops all capabilities within a sandbox and that child tasks cannot gain greater privileges than its parent. Notable feature exclusions include the lack of explicit support for blacklisting/whitelisting file paths.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install bubblewrap or bubblewrap-gitAUR.\n\n- For information about user_namespaces(7) support in Arch Linux kernels see Security#Sandboxing applications.\n- linux-hardened users may need to install bubblewrap-suid instead of the packages mentioned above. See FS#63316 for more information.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Bubblewrap can be called directly from the command-line and/or within shell scripts as part of a complex wrapper. Unlike applications such as Firejail which automatically set /var and /etc to read-only within the sandbox, Bubblewrap makes no such operating assumptions. It is up to the user to determine which configuration options to pass in accordance to the application being sandboxed. Bubblewrap does not automatically create user namespaces when running with setuid privileges and can accommodate typical environment variables including $HOME and $USER.\n\nIt is highly recommended that you download strace to see what files the program you are trying to sandbox needs access to.\n\n"
    },
    {
      "title": "Configuration managers for bubblewrap",
      "level": 2,
      "content": "Instead of manually setting up the arguments a configuration manager can be used that configure bubblewrap automatically from a simpler configuration.\n\n- Bubblejail — Bubblewrap-based sandbox with resource-based permission model (provides GUI to tweak permissions).\n\n- portableAUR: Easy to use sandboxing framework that includes D-Bus proxy filtering, data isolation, access control and more.\n\n"
    },
    {
      "title": "Usage examples",
      "level": 2,
      "content": "Please see /Examples for examples on how bubblewrap can be used. Alternatively, there are various projects that demonstrate how bubblewrap can be used for common applications:\n\n- bwscripts\n- StandingPad's Bubblewrap scripts\n\n"
    },
    {
      "title": "No-op",
      "level": 3,
      "content": "A no-op bubblewrap invocation is as follows:\n\n```\n$ bwrap --dev-bind / / bash\n```\n\nThis will spawn a Bash process which should behave exactly as outside a sandbox in most cases. If a sandboxed program misbehaves, you may want to start from the above no-op invocation, and work your way towards a more secure configuration step-by-step.\n\n"
    },
    {
      "title": "Bash",
      "level": 3,
      "content": "Create a simple Bash sandbox:\n\n- Determine available kernel namespaces\n\n```\n$ ls /proc/self/ns\n```\n\n```\ncgroup  ipc  mnt  net  pid  user uts\n```\n\n- Bind as read-only the entire host / directory to / in the sandbox\n- Create a new user namespace and set the user ID to 256 and the group ID to 512\n\n```\n$ bwrap --ro-bind / / --unshare-user --uid 256 --gid 512 bash\n```\n\n```\nbash-4.4$ id\nuid=256 gid=512 groups=512,65534(nobody)\nbash-4.4$ ls -l /usr/bin/bash\n-rwxr-xr-x 1 nobody nobody 811752 2017-01-01 04:20 /usr/bin/bash\n```\n\n"
    },
    {
      "title": "Desktop entries",
      "level": 3,
      "content": "Leverage Bubblewrap within desktop entries:\n\n- Bind as read-write the entire host / directory to / in the sandbox\n- Re-bind as read-only the /var and /etc directories in the sandbox\n- Mount a new devtmpfs filesystem to /dev in the sandbox\n- Create a tmpfs filesystem over the sandboxed /run directory\n- Disable network access by creating new network namespace\n\n```\n[Desktop Entry]\nName=nano Editor\nExec=bwrap --bind / / --ro-bind /var /var --ro-bind /etc /etc --dev /dev --tmpfs /run --unshare-net st -e nano -o . %f\nType=Application\nMimeType=text/plain;\n```\n\n- Example MuPDF desktop entry incorporating a mupdf.sh shell wrapper:\n\n```\n[Desktop Entry]\nName=MuPDF\nExec=mupdf.sh %f\nIcon=application-pdf.svg\nType=Application\nMimeType=application/pdf;application/x-pdf;\n```\n\n"
    },
    {
      "title": "Filesystem isolation",
      "level": 3,
      "content": "To further hide the contents of the file system (such as those in /var, /usr/bin and /usr/lib) and to sandbox even the installation of software, pacman can be made to install Arch packages into isolated filesystem trees.\n\nIn order to use pacman for installing software into the filesystem trees, you will need to install fakeroot and fakechroot.\n\nSuppose you want to install the xterm package with pacman into an isolated filesystem tree. You should prepare your tree like this:\n\n```\n$ MYPACKAGE=xterm\n$ mkdir -p ~/sandboxes/${MYPACKAGE}/files/var/lib/pacman\n$ mkdir -p ~/sandboxes/${MYPACKAGE}/files/etc\n$ cp /etc/pacman.conf ~/sandboxes/${MYPACKAGE}/files/etc/pacman.conf\n```\n\nYou may want to edit ~/sandboxes/${MYPACKAGE}/files/etc/pacman.conf and adjust the pacman configuration used:\n\n- Remove any undesired custom repositories and IgnorePkg, IgnoreGroup, NoUpgrade and NoExtract settings that are needed only for the host system.\n- You may need to remove the CheckSpace option so pacman will not complain about errors finding the root filesystem for checking disk space.\n\nThen install the base group along with the needed fakeroot into the isolated filesystem tree:\n\n```\n$ fakechroot fakeroot pacman -Syu \\\n    --root ~/sandboxes/${MYPACKAGE}/files \\\n    --dbpath ~/sandboxes/${MYPACKAGE}/files/var/lib/pacman \\\n    --config ~/sandboxes/${MYPACKAGE}/files/etc/pacman.conf \\\n    base fakeroot\n```\n\nSince you will be repeatedly calling bubblewrap with the same options, make an alias:\n\n```\n$ alias bw-install='bwrap                        \\\n     --bind ~/sandboxes/${MYPACKAGE}/files/ /    \\\n     --ro-bind /etc/resolv.conf /etc/resolv.conf \\\n     --tmpfs /tmp                                \\\n     --proc /proc                                \\\n     --dev /dev                                  \\\n     --chdir /                                   '\n```\n\nYou will need to set up the locales by editing ~/sandboxes/${MYPACKAGE}/files/etc/locale.gen and running:\n\n```\n$ bw-install locale-gen\n```\n\nThen set up pacman’s keyring:\n\n```\n$ bw-install fakeroot pacman-key --init\n$ bw-install fakeroot pacman-key --populate\n```\n\nNow you can install the desired xterm package.\n\n```\n$ bw-install fakeroot pacman -S ${MYPACKAGE}\n```\n\nIf the pacman command fails here, try running the command for populating the keyring again.\n\nCongratulations. You now have an isolated filesystem tree containing xterm. You can use bw-install again to upgrade your filesystem tree.\n\nYou can now run your software with bubblewrap. command should be xterm in this case.\n\n```\n$ bwrap                                          \\\n     --ro-bind ~/sandboxes/${MYPACKAGE}/files/ / \\\n     --ro-bind /etc/resolv.conf /etc/resolv.conf \\\n     --tmpfs /tmp                                \\\n     --proc /proc                                \\\n     --dev /dev                                  \\\n     --chdir /                                   \\\n     command\n```\n\nNote that some files can be shared between packages. You can hardlink to all files of an existing parent filesystem tree to reuse them in a new tree:\n\n```\n$ cp -al ~/sandboxes/${MYPARENTPACKAGE} ~/sandboxes/${MYPACKAGE}\n```\n\nThen proceed with the installation as usual by calling pacman from bw-install fakechroot fakeroot pacman ....\n\n"
    },
    {
      "title": "Using X11",
      "level": 3,
      "content": "Bind mounting the host X11 socket to an alternative X11 socket may not work:\n\n```\n--bind /tmp/.X11-unix/X0 /tmp/.X11-unix/X8 --setenv DISPLAY :8\n```\n\nA workaround is to bind mount the host X11 socket to the same socket within the sandbox:\n\n```\n--bind /tmp/.X11-unix/X0 /tmp/.X11-unix/X0 --setenv DISPLAY :0\n```\n\n"
    },
    {
      "title": "Sandboxing X11",
      "level": 3,
      "content": "While bwrap provides some very nice isolation for sandboxed applications, there are ways for an application to escape as long as access to the X11 socket is available. X11 does not include isolation between applications, and this might allow for a malicious application to, for example, listen to inputs, inject keystrokes or record images of other applications.\n\nOne solution to this is to switch to a Wayland compositor with no access to the Xserver from the sandbox. Wayland implemented features to not allow applications to interact.\n\nTo keep using X11, you can use either xpra or xephyr. These tools allow to spawn secondary X11 instances only running your sandboxed application, that get displayed within a window in your current environment. This way the window cannot interact outside of it's own X11 instance. These methods work with bwrap as well.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nTo test X11 isolation, run xinput test id (the keyboard id can be found with xinput list). When run without additional X11 isolation, this will show that any application with X11 access can capture keyboard input of any other application, which could allow for a malicious application to do keylogging.\n\n"
    },
    {
      "title": "Using portals",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with XDG Desktop Portal.** This article or section is a candidate for merging with XDG Desktop Portal.\n\nThis article or section is a candidate for merging with XDG Desktop Portal.\n\nWith workarounds, it is possible to sandbox programs with XDG Desktop Portals. The main advantage is with filesystem portals, as it makes it possible to not give a program access to the home directory, but still be able to access files. For security reasons, however, using portals requires tricking xdg-desktop-portal into thinking a sandboxed program is part of a Flatpak. This can be done by adding a .flatpak-info file to the sandbox's root filesystem.\n\nIn addition, one also needs to run xdg-dbus-proxy for more fine control over what portals can be accessed. This should be ran in a sandboxed environment, and as such also needs a .flatpak-info file. At the minimum, the proxy needs to have talk access to org.freedesktop.portal.Flatpak. Additional portals can be found in the Flatpak documentation.\n\nA common use case is to allow restricting a program from having 100% access to the home directory, and instead only giving access to files and folders the user selects in a file chooser. To achieve this, xdg-dbus-proxy can be started with the following arguments:\n\n```\n--talk=org.freedesktop.portal.Documents\n--talk=org.freedesktop.portal.Flatpak\n--talk=org.freedesktop.portal.Desktop\n--talk=org.freedesktop.portal.FileChooser\n```\n\nFull example:\n\n```\nAPP_NAME=app.application.Name\nAPP_FOLDER=\"$XDG_RUNTIME_DIR/app/$APP_NAME\"\nmkdir -p \"$APP_FOLDER\"\nset_up_dbus_proxy() {\n bwrap \\\n   --new-session \\\n   --symlink /usr/lib64 /lib64 \\\n   --ro-bind /usr/lib /usr/lib \\\n   --ro-bind /usr/lib64 /usr/lib64 \\\n   --ro-bind /usr/bin /usr/bin \\\n   --bind \"$XDG_RUNTIME_DIR\" \"$XDG_RUNTIME_DIR\" \\\n   --ro-bind-data 3 \"/.flatpak-info\" \\\n   --die-with-parent \\\n   -- \\\n   env -i xdg-dbus-proxy \\\n   \"$DBUS_SESSION_BUS_ADDRESS\" \\\n   \"$APP_FOLDER/bus\" \\\n   --filter \\\n   --log \\\n   --talk=org.freedesktop.portal.Flatpak \\\n   --call=\"org.freedesktop.portal.Desktop=org.freedesktop.portal.Settings.Read@/org/freedesktop/portal/desktop\" \\\n   --broadcast=\"org.freedesktop.portal.Desktop=org.freedesktop.portal.Settings.SettingChanged@/org/freedesktop/portal/desktop\" 3<<EOF\n[Application]\nname=$APP_NAME\nEOF\n}\n\nset_up_dbus_proxy &\nsleep 0.1\n\nbwrap \\\n  ...\n  --ro-bind-data 3 /.flatpak-info \\\n  ...\n  3<<EOF\n[Application]\nname=$APP_NAME\nEOF\n```\n\n"
    },
    {
      "title": "Opening URLs from wrapped applications",
      "level": 3,
      "content": "When a wrapped IRC or email client attempts to open a URL, it will usually attempt to launch a browser process, which will run within the same sandbox as the wrapped application. With a well-wrapped application, this will likely not work. The approach used by Firejail is to give wrapped applications all the privileges of the browser as well, however this implies a good amount of permission creep.\n\nA better solution to this problem is to communicate opened URLs to outside the sandbox. This can be done using snapd-xdg-open as follows:\n\n1. Install snapd-xdg-open-gitAUR\n1. On your bwrap command line, add:\n\n```\n$ bwrap ... \\\n  --ro-bind /run/user/$UID/bus /run/user/$UID/bus \\\n  --ro-bind /usr/lib/snapd-xdg-open/xdg-open /usr/bin/xdg-open \\\n  --ro-bind /usr/lib/snapd-xdg-open/xdg-open /usr/bin/chromium \\\n  ...\n```\n\nThe /usr/bin/chromium bind is only necessary for programs not using XDG conventions, such as Mozilla Thunderbird.\n\n"
    },
    {
      "title": "New session",
      "level": 3,
      "content": "There is a security issue with TIOCSTI, (CVE-2017-5226) which allows sandbox escape. To prevent this, bubblewrap has introduced the new option '--new-session' which calls setsid(). However, this causes some behavioural issues that are hard to work with in some cases. For instance, it makes shell job control not work for the bwrap command.\n\nIt is recommended to use this if possible, but if not the developers recommend that the issue is neutralized in some other way, for instance using SECCOMP, which is what flatpak does: https://github.com/flatpak/flatpak/commit/902fb713990a8f968ea4350c7c2a27ff46f1a6c4\n\n"
    },
    {
      "title": "Nested namespaces",
      "level": 3,
      "content": "Certain applications such as Chromium already implement their own sandbox environment using suid helper files. This mechanism will be blocked when they are executed inside a bubblewrap container.\n\nOne solution is to have the application use the namespace created by bubblewrap. This can be achieved through zypakAUR which is also used by flatpak to run electron based apps inside an additional namespace. Example code that demonstrates how to use zypak with Chromium/Electron can be found at [1].\n\n"
    },
    {
      "title": "No sound output",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nFor certain programs using ALSA Sound System, add\n\n```\n--dev-bind /dev/snd /dev/snd\n```\n\nto play sound.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- GitHub repository\n- Seccomp BPF (SECure COMPuting with filters)\n- Additional bubblewrap examples\n\n"
    }
  ]
}