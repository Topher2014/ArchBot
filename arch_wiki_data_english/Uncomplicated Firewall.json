{
  "title": "Uncomplicated Firewall",
  "url": "https://wiki.archlinux.org/title/Uncomplicated_Firewall",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- iptables\n- sshguard\n\nFrom the project home page:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the ufw package.\n\nStart and enable ufw.service to make it available at boot. Note that this will not work if iptables.service is also enabled (and same for its ipv6 counterpart).\n\n"
    },
    {
      "title": "Basic configuration",
      "level": 2,
      "content": "A very simplistic configuration which will deny all by default, allow any protocol from inside a 192.168.0.1-192.168.0.255 LAN, and allow incoming Deluge and rate limited SSH traffic from anywhere:\n\n```\n# ufw default deny\n# ufw allow from 192.168.0.0/24\n# ufw allow Deluge\n# ufw limit ssh\n```\n\nTo allow a port instead from anywhere use the following example to allow port 51312 UDP and TCP, port 51312 only UDP or a port range from 51312 to 51314:\n\n```\n# ufw allow 51312\n# ufw allow 51312/udp\n# ufw allow 51312:51314\n```\n\nThe next line is only needed once the first time you install the package:\n\n```\n# ufw enable\n```\n\nFinally, query the rules being applied via the status command:\n\n```\n# ufw status\n```\n\n```\nStatus: active\nTo                         Action      From\n--                         ------      ----\nAnywhere                   ALLOW       192.168.0.0/24\nDeluge                     ALLOW       Anywhere\nSSH                        LIMIT       Anywhere\n```\n\nExtra information, including the default policies, can be seen with\n\n```\n# ufw status verbose\n```\n\nbut this is still limited to user-specified rules. In order to see all rules setup\n\n```\n# ufw show raw\n```\n\nmay be used, as well as further reports listed in the manpage. Since these reports also summarize traffic, they may be somewhat difficult to read. Another way to check for accepted traffic:\n\n```\n# iptables -S | grep ACCEPT\n# ip6tables -S | grep ACCEPT\n```\n\nWhile this works just fine for reporting, keep in mind not to enable the iptables service as long as you use ufw for managing it.\n\n"
    },
    {
      "title": "Forward policy",
      "level": 2,
      "content": "Users needing to run a VPN such as OpenVPN or WireGuard can adjust the DEFAULT_FORWARD_POLICY variable in /etc/default/ufw from a value of \"DROP\" to \"ACCEPT\" to forward all packets regardless of the settings of the user interface. To forward for a specific interface like wg0, user can add the following line in the *filter block\n\n```\n/etc/ufw/before.rules\n```\n\n```\n# End required lines \n\n-A ufw-before-forward -i wg0 -j ACCEPT\n-A ufw-before-forward -o wg0 -j ACCEPT\n```\n\nYou may also need to uncomment\n\n```\n/etc/ufw/sysctl.conf\n```\n\n```\nnet/ipv4/ip_forward=1\nnet/ipv6/conf/default/forwarding=1\nnet/ipv6/conf/all/forwarding=1\n```\n\n"
    },
    {
      "title": "Adding other applications",
      "level": 2,
      "content": "The PKG comes with some defaults based on the default ports of many common daemons and programs. Inspect the options by looking in the /etc/ufw/applications.d directory or by listing them in the program itself:\n\n```\n# ufw app list\n```\n\nIf users are running any of the applications on a non-standard port, it is recommended to simply make /etc/ufw/applications.d/custom containing the needed data using the defaults as a guide.\n\nExample, deluge with custom tcp ports that range from 20202-20205:\n\n```\n[Deluge-my]\ntitle=Deluge\ndescription=Deluge BitTorrent client\nports=20202:20205/tcp\n```\n\nShould you require to define both tcp and udp ports for the same application, simply separate them with a pipe as shown: this app opens tcp ports 10000-10002 and udp port 10003:\n\n```\nports=10000:10002/tcp|10003/udp\n```\n\nOne can also use a comma to define ports if a range is not desired. This example opens tcp ports 10000-10002 (inclusive) and udp ports 10003 and 10009\n\n```\nports=10000:10002/tcp|10003,10009/udp\n```\n\n"
    },
    {
      "title": "Deleting applications",
      "level": 2,
      "content": "Drawing on the Deluge/Deluge-my example above, the following will remove the standard Deluge rules and replace them with the Deluge-my rules from the above example:\n\n```\n# ufw delete allow Deluge\n# ufw allow Deluge-my\n```\n\nQuery the result via the status command:\n\n```\n# ufw status\n```\n\n```\nStatus: active\nTo                         Action      From\n--                         ------      ----\nAnywhere                   ALLOW       192.168.0.0/24\nSSH                        ALLOW       Anywhere\nDeluge-my                  ALLOW       Anywhere\n```\n\n"
    },
    {
      "title": "Black listing IP addresses",
      "level": 2,
      "content": "It might be desirable to add ip addresses to a blacklist which is easily achieved simply by editing /etc/ufw/before.rules and inserting an iptables DROP line at the bottom of the file right above the \"COMMIT\" word.\n\n```\n/etc/ufw/before.rules\n```\n\n```\n...\n## blacklist section\n# block just 199.115.117.99\n-A ufw-before-input -s 199.115.117.99 -j DROP\n# block 184.105.*.*\n-A ufw-before-input -s 184.105.0.0/16 -j DROP\n\n# don't delete the 'COMMIT' line or these rules won't be processed\nCOMMIT\n```\n\n"
    },
    {
      "title": "Rate limiting with ufw",
      "level": 2,
      "content": "ufw has the ability to deny connections from an IP address that has attempted to initiate 6 or more connections in the last 30 seconds. Users should consider using this option for services such as SSH.\n\nUsing the above basic configuration, to enable rate limiting we would simply replace the allow parameter with the limit parameter. The new rule will then replace the previous.\n\n```\n# ufw limit SSH\n```\n\n```\nRule updated\n```\n\n```\n# ufw status\n```\n\n```\nStatus: active\nTo                         Action      From\n--                         ------      ----\nAnywhere                   ALLOW       192.168.0.0/24\nSSH                        LIMIT       Anywhere\nDeluge-my                  ALLOW       Anywhere\n```\n\n"
    },
    {
      "title": "User rules",
      "level": 2,
      "content": "All user rules are stored in etc/ufw/user.rules and etc/ufw/user6.rules for IPv4 and IPv6 respectively.\n\n"
    },
    {
      "title": "Disable remote ping",
      "level": 3,
      "content": "Change ACCEPT to DROP in the following lines:\n\n```\n/etc/ufw/before.rules\n```\n\n```\n# ok icmp codes\n...\n-A ufw-before-input -p icmp --icmp-type echo-request -j ACCEPT\n```\n\nIf you use IPv6, related rules are in /etc/ufw/before6.rules.\n\n"
    },
    {
      "title": "Disable UFW logging",
      "level": 3,
      "content": "Disabling logging may be useful to stop UFW filling up the kernel (dmesg) and message logs:\n\n```\n# ufw logging off\n```\n\n"
    },
    {
      "title": "UFW and Docker",
      "level": 3,
      "content": "Docker in standard mode writes its own iptables rules and ignores ufw ones, which could lead to security issues. A solution can be found at https://github.com/chaifeng/ufw-docker.\n\n"
    },
    {
      "title": "GUI frontends",
      "level": 2,
      "content": "If you are using KDE Plasma, you can just go to Wi-Fi & Networking > Firewall to access and adjust firewall configurations given plasma-firewall is installed.\n\n"
    },
    {
      "title": "Gufw",
      "level": 3,
      "content": "gufw is a GTK front-end for Ufw that aims to make managing a Linux firewall as accessible and easy as possible. It features presets for common ports and p2p applications. It requires python, ufw, and GTK support.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Ubuntu UFW documentation\n- ufw(8)\n- Add blocklists to ufw using ipsets: https://github.com/poddmo/ufw-blocklist\n\n"
    }
  ]
}