{
  "title": "Convert ext2/ext3 partitions to ext4",
  "url": "https://wiki.archlinux.org/title/Convert_ext2/ext3_partitions_to_ext4",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- File systems\n- Ext3\n\nFrom Ext4 - Linux Kernel Newbies:\n\n"
    },
    {
      "title": "Create a new ext4 filesystem",
      "level": 2,
      "content": "Install e2fsprogs.\n\nTo format a partition do:\n\n```\n# mkfs.ext4 /dev/partition\n```\n\nSee mke2fs(8) for more options.\n\n"
    },
    {
      "title": "Bytes-per-inode ratio",
      "level": 3,
      "content": "From mke2fs(8):\n\nCreating a new file, directory, symlink etc. requires at least one free inode. If the inode count is too low, no file can be created on the filesystem even though there is still space left on it.\n\nBecause it is not possible to change either the bytes-per-inode ratio or the inode count after the filesystem is created, mkfs.ext4 uses by default a rather low ratio of one inode every 16384 bytes (16 KiB) to avoid this situation.\n\nHowever, for partitions with size in the hundreds or thousands of GB and average file size in the megabyte range, this usually results in a much too large inode number because the number of files created never reaches the number of inodes.\n\nThis results in a waste of disk space, because all those unused inodes each take up 256 bytes on the filesystem (this is also set in /etc/mke2fs.conf but should not be changed). 256 * several millions = quite a few gigabytes wasted in unused inodes.\n\nThis situation can be evaluated by comparing the Use% and IUse% figures provided by df and df -i:\n\n```\n$ df -h /home\n```\n\n```\nFilesystem              Size    Used   Avail  Use%   Mounted on\n/dev/mapper/lvm-home    115G    56G    59G    49%    /home\n```\n\n```\n$ df -hi /home\n```\n\n```\nFilesystem              Inodes  IUsed  IFree  IUse%  Mounted on\n/dev/mapper/lvm-home    1.8M    1.1K   1.8M   1%     /home\n```\n\nTo specify a different bytes-per-inode ratio, use the -T usage-type option which hints at the expected usage of the filesystem using types defined in /etc/mke2fs.conf. Among those types are the bigger largefile and largefile4 which offer more relevant ratios of one inode every 1 MiB and 4 MiB respectively. It can be used as such:\n\n```\n# mkfs.ext4 -T largefile /dev/device\n```\n\nThe bytes-per-inode ratio can also be set directly via the -i option: e.g. use -i 2097152 for a 2 MiB ratio and -i 6291456 for a 6 MiB ratio.\n\n"
    },
    {
      "title": "Reserved blocks",
      "level": 3,
      "content": "By default, 5% of the filesystem blocks will be reserved for the super-user, to avoid fragmentation and \"allow root-owned daemons to continue to function correctly after non-privileged processes are prevented from writing to the filesystem\" (from mke2fs(8)).\n\nFor modern high-capacity disks, this is higher than necessary if the partition is used as a long-term archive or not crucial to system operations (like /home). See this email for the opinion of ext4 developer Ted Ts'o on reserved blocks and this superuser answer for general background on this topic.\n\nIt is generally safe to reduce the percentage of reserved blocks to free up disk space when the partition is either:\n\n- Very large (for example > 50G)\n- Used as long-term archive, i.e., where files will not be deleted and created very often\n\nThe -m option of ext4-related utilities allows to specify the percentage of reserved blocks.\n\nTo totally prevent reserving blocks upon filesystem creation, use:\n\n```\n# mkfs.ext4 -m 0 /dev/device\n```\n\nTo change it to 1% afterwards, use:\n\n```\n# tune2fs -m 1 /dev/device\n```\n\nTo set the number of reserved block space to an absolute size in gigabytes, use -r:\n\n```\n# tune2fs -r $((ngigs * 1024**3 / blocksize)) /dev/device\n```\n\nblocksize is the block size of the filesystem in bytes. This is almost always 4096; check to be sure:\n\n```\n# tune2fs -l /dev/device | grep 'Block size:'\n```\n\n```\nBlock size:               4096\n```\n\nThe $(()) syntax is for math expansion. This syntax works in bash and zsh, but it will not work in fish. For fish, this is the syntax:\n\n```\n# tune2fs -r (math 'ngigs * 1024^3 / blocksize') /dev/device\n```\n\nThese commands can be applied to currently-mounted filesystems and changes will take effect immediately. Use findmnt(8) to find the device name:\n\n```\n# tune2fs -m 1 \"$(findmnt -no SOURCE /the/mount/point)\"\n```\n\nTo query the current number of reserved blocks:\n\n```\n# tune2fs -l /dev/mapper/proxima-root | grep 'Reserved block count:'\n```\n\n```\nReserved block count:     2975334\n```\n\nThis is the number of blocks, so this has to be multiplied by the filesystem's block size to get the number of bytes or gigabytes: 2975334 * 4096 / 1024**3 = 11.34 GiB.\n\n"
    },
    {
      "title": "Rationale",
      "level": 4,
      "content": "A compromise between fully converting to ext4 and simply remaining with ext2/ext3 is to mount the partitions as ext4.\n\nPros:\n\n- Compatibility (the filesystem can continue to be mounted as ext3) â€“ This allows users to still read the filesystem from other operating systems without ext4 support (e.g. Windows with ext2/ext3 drivers)\n- Improved performance (though not as much as a fully-converted ext4 partition).[1] [2]\n\nCons:\n\n- Fewer features of ext4 are used (only those that do not change the disk format such as multiblock allocation and delayed allocation)\n\nNote: **there is no major drawback to this technique** \n\n"
    },
    {
      "title": "Procedure",
      "level": 4,
      "content": "1. Edit /etc/fstab and change the 'type' from ext2/ext3 to ext4 for any partitions to mount as ext4.\n1. Re-mount the affected partitions.\n\n"
    },
    {
      "title": "Rationale",
      "level": 4,
      "content": "To experience the benefits of ext4, an irreversible conversion process must be completed.\n\nPros:\n\n- Improved performance and new features.[3] [4]\n\nCons:\n\n- Partitions that contain mostly static files, such as a /boot partition, may not benefit from the new features. Also, adding a journal (which is implied by moving a ext2 partition to ext3/4) always incurs performance overhead.\n- Irreversible (ext4 partitions cannot be 'downgraded' to ext2/ext3. It is, however, backwards compatible until extent and other unique options are enabled)\n\n"
    },
    {
      "title": "Procedure",
      "level": 4,
      "content": "These instructions were adapted from Kernel documentation and an BBS thread.\n\n- If converting the system's root filesystem, ensure that the 'fallback' initramfs is available at reboot. Alternatively, add ext4 according to Mkinitcpio#MODULES and regenerate the initramfs before starting.\n- If converting a separate /boot partition, ensure the boot loader supports booting from ext4.\n\nIn the following steps /dev/sdxX denotes the path to the partition to be converted, such as /dev/sda1.\n\n1. Back up all data on any ext3 partitions that are to be converted to ext4. A useful package, especially for root partitions, is clonezilla.\n1. Edit /etc/fstab and change the 'type' from ext3 to ext4 for any partitions that are to be converted to ext4.\n1. Boot the live medium (if necessary). The conversion process with e2fsprogs must be done when the drive is not mounted. If converting a root partition, the simplest way to achieve this is to boot from some other live medium.\n1. Ensure the partition is not mounted\n1. If converting an ext2 partition, the first conversion step is to add a journal by running tune2fs -j /dev/sdxX as root; making it a ext3 partition.\n1. Run tune2fs -O extent,uninit_bg,dir_index /dev/sdxX as root. This command converts the ext3 filesystem to ext4 (irreversibly).\n1. Run fsck -f /dev/sdxX as root. This step is necessary, otherwise the filesystem will be unreadable. This fsck run is needed to return the filesystem to a consistent state. It will find checksum errors in the group descriptors - this is expected. The -f option asks fsck to force checking even if the file system seems clean. The -p option may be used on top to \"automatically repair\" (otherwise, the user will be asked for input for each error).\n1. Recommended: mount the partition and run e4defrag -c -v /dev/sdxX as root. Even though the filesystem is now converted to ext4, all files that have been written before the conversion do not yet take advantage of the extent option of ext4, which will improve large file performance and reduce fragmentation and filesystem check time. In order to fully take advantage of ext4, all files would have to be rewritten on disk. Use e4defrag to take care of this problem.\n1. Reboot\n\n- This step is necessary, otherwise the filesystem will be unreadable. This fsck run is needed to return the filesystem to a consistent state. It will find checksum errors in the group descriptors - this is expected. The -f option asks fsck to force checking even if the file system seems clean. The -p option may be used on top to \"automatically repair\" (otherwise, the user will be asked for input for each error).\n\n- Even though the filesystem is now converted to ext4, all files that have been written before the conversion do not yet take advantage of the extent option of ext4, which will improve large file performance and reduce fragmentation and filesystem check time. In order to fully take advantage of ext4, all files would have to be rewritten on disk. Use e4defrag to take care of this problem.\n\n"
    },
    {
      "title": "Disabling access time update",
      "level": 3,
      "content": "The ext4 file system records information about when a file was last accessed and there is a cost associated with recording it. See fstab#atime options for the noatime and related options.\n\n"
    },
    {
      "title": "Increasing commit interval",
      "level": 3,
      "content": "The sync interval for data and metadata can be increased by providing a higher time delay to the commit option.\n\nThe default 5 sec means that if the power is lost, one will lose as much as the latest 5 seconds of work. It forces a full sync of all data/journal to physical media every 5 seconds. The filesystem will not be damaged though, thanks to the journaling. The following fstab illustrates the use of commit:\n\n```\n/etc/fstab\n```\n\n```\n/dev/sda5    /    ext4    defaults,commit=60    0    1\n```\n\n"
    },
    {
      "title": "Turning barriers off",
      "level": 3,
      "content": "Ext4 enables write barriers by default. It ensures that file system metadata is correctly written and ordered on disk, even when write caches lose power. This goes with a performance cost especially for applications that use fsync heavily or create and delete many small files. For disks that have a write cache that is battery-backed in one way or another, disabling barriers may safely improve performance.\n\nTo turn barriers off, add the option barrier=0 to the desired filesystem. For example:\n\n```\n/etc/fstab\n```\n\n```\n/dev/sda5    /    ext4    defaults,barrier=0    0    1\n```\n\n"
    },
    {
      "title": "Disabling journaling",
      "level": 3,
      "content": "Disabling the journal with ext4 can be done with the following command on an unmounted disk:\n\n```\n# tune2fs -O \"^has_journal\" /dev/sdXn\n```\n\n"
    },
    {
      "title": "Use the journal to optimize performance",
      "level": 3,
      "content": "The Fast commits for ext4 article introduction summarizes succinctly why and how the mount options data=journal or data=writeback speed up overall ext4 performance, compared to the default data=ordered operation mode. In addition, the journaling itself can be sped up by adding the journal_async_commit mount option.\n\nA further option is to to use a newer journal format, see #Enabling fast_commit.\n\n"
    },
    {
      "title": "External journal device",
      "level": 4,
      "content": "If using the non-default data= options, a dedicated device for the journal may also speed up file operations in some cases. For example, when a relatively slow device is used for the data itself and another (faster but smaller) device for the journal. To set up a separate journal device:\n\n```\n# mke2fs -O journal_dev /dev/journal_device\n```\n\nTo assign journal_device as the journal of ext4_device, use:\n\n```\n# tune2fs -J device=/dev/journal_device /dev/ext4_device\n```\n\nReplace tune2fs with mkfs.ext4 if wanting to make a new filesystem on ext4_device.\n\nAdd the journal_device as a dependency of the ext4_device using the x-systemd.requires mount option in /etc/fstab:\n\n```\n/etc/fstab\n```\n\n```\n/dev/ext4_device    /    ext4    defaults,x-systemd.requires=/dev/journal_device    0    1\n```\n\nThis prevents issues if journal_device needs any setup (e.g. it is encrypted).\n\nNote: **journal_path=/dev/journal_device** Ignore the saved devnum and force loading of the journal by path using the journal_path mount option:\n\nIgnore the saved devnum and force loading of the journal by path using the journal_path mount option:\n\n```\n/etc/fstab\n```\n\n```\n/dev/ext4_device    /    ext4    defaults,x-systemd.requires=/dev/journal_device,journal_path=/dev/journal_device    0    1\n```\n\ne2fsck will look up the journal device using the UUID and fix the saved devnum if it goes out of sync. However, it will consider this as corruption and trigger an unnecessary full filesystem scan [5]. This can be disabled in e2fsck's config file:\n\n```\n/etc/e2fsck.conf\n```\n\n```\n[problems]\n# PR_0_EXTERNAL_JOURNAL_HINT: Superblock hint for external superblock should be xxxx\n0x000033 = {\n    # Tell e2fsck that if this problem is encountered, it can be fixed but should\n    # not be considered corruption, the filesystem should still be marked clean.\n    not_a_fix = true\n}\n```\n\n"
    },
    {
      "title": "Using file-based encryption",
      "level": 3,
      "content": "Since Linux 4.1, ext4 natively supports file encryption, see the fscrypt article. Encryption is applied at the directory level, and different directories can use different encryption keys. This is different from both dm-crypt, which is block-device level encryption, and from eCryptfs, which is a stacked cryptographic filesystem.\n\n"
    },
    {
      "title": "Enabling metadata checksums in existing filesystems",
      "level": 3,
      "content": "When a filesystem has been created with e2fsprogs 1.43 (2016) or later, metadata checksums are enabled by default. Existing filesystems may be converted to enable metadata checksum support.\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nIf the CPU supports SSE 4.2, make sure the crc32c_intel kernel module is loaded in order to enable the hardware accelerated CRC32C algorithm [6]. If not, load the crc32c_generic module instead.\n\nTo read more about metadata checksums, see the ext4 wiki.\n\n```\n# dumpe2fs -h /dev/path/to/disk\n```\n\nFirst the partition needs to be checked and optimized using e2fsck:\n\n```\n# e2fsck -Df /dev/path/to/disk\n```\n\nConvert the filesystem to 64-bit:\n\n```\n# resize2fs -b /dev/path/to/disk\n```\n\nFinally enable checksums support:\n\n```\n# tune2fs -O metadata_csum /dev/path/to/disk\n```\n\nTo verify:\n\n```\n# dumpe2fs -h /dev/path/to/disk | grep features:\n```\n\n```\nFilesystem features:      has_journal ext_attr resize_inode dir_index filetype extent 64bit flex_bg sparse_super large_file huge_file dir_nlink extra_isize metadata_csum\n```\n\n"
    },
    {
      "title": "Maintenance when using LVM",
      "level": 3,
      "content": "The e2scrub tool checks metadata of the ext4 filesystem, if it is used in LVM logical volumes. The volume group must have 256MiB unallocated space for this check, because the tool creates a snapshot to check. As noted by the e2scrub(8) manual the tool does not repair errors, but report them and marks the filesystem to require an e2fsck (see e2fsck(8)) run prior to the next mount.\n\nThe check can be automated, for example by enabling the packaged e2scrub_all.timer unit.\n\nIf the minimum 256MiB unallocated space is missing, see LVM#Resizing the logical volume and file system in one go.\n\n"
    },
    {
      "title": "Enabling fast_commit",
      "level": 3,
      "content": "The ext4 \"fast commits\" feature introduces a new, lighter-weight journaling method. It is expected to significantly increase the performance of the ext4 filesystem,[7]\n\nTo enable on the feature on a new filesystem, include fast_commit in the -O file system options argument.\n\nTo enable the feature on an existing file system, run:\n\n```\n# tune2fs -O fast_commit /dev/drivepartition\n```\n\nTo query the current configuration:\n\n```\n# tune2fs -l /dev/drivepartition | grep features\n```\n\nTo disable the feature on an existing file system, run:\n\n```\n# tune2fs -O '^fast_commit' /dev/drivepartition\n```\n\n"
    },
    {
      "title": "Enabling case-insensitive mode",
      "level": 3,
      "content": "- If the casefold feature has been turned on, it can not be reliably turned off again (due to a potential bug in tune2fs). Be aware of the limitations below before enabling it!\n- GRUB does not currently support ext4's casefold feature; see GRUB bug #56897. Enabling it for file systems GRUB needs to read will render the system unbootable with an unhelpful unknown filesystem error, even if no directory is actually using the feature.\n- The casefold feature is incompatible with overlayfs, which can prevent container software like Docker or Podman from working on that filesystem. Advanced systemd features like systemd-sysext(8) extension images might also become unavailable.\n\next4 can be used in case-insensitive mode, which can increase the performance of applications and games running in Wine. This feature does not affect the entire file system, only directories that have the case-insensitive attribute enabled.\n\nFirst, enable the feature in the file system:\n\n```\n# tune2fs -O casefold /dev/path/to/disk\n```\n\nEnable the case-insensitive attribute in any directory:\n\n```\n$ chattr +F /mnt/partition/case-insensitive-directory\n```\n\nNote that the directory must be empty, and moving subdirectories from elsewhere will not cause them to inherit the attribute, so plan ahead accordingly.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Ext4 kernel documentation\n- Official ext4 wiki (archived)\n- Ext4 Encryption LWN article\n- Kernel commits for ext4 encryption [8] [9]\n- e2fsprogs Changelog\n- Ext4 Metadata Checksums\n- Ext4 fast commits\n\n"
    }
  ]
}