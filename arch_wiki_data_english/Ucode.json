{
  "title": "Ucode",
  "url": "https://wiki.archlinux.org/title/Ucode",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Processor manufacturers release stability and security updates to the processor microcode. These updates provide bug fixes that can be critical to the stability of your system. Without them, you may experience spurious crashes or unexpected system halts that can be difficult to track down.\n\nAll users with an AMD or Intel CPU should install the microcode updates to ensure system stability. In virtual machines and containers, the microcode updates belongs on the host, not in the guest system.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "To acquire updated microcode, depending on the processor, install one of the following packages:\n\n- amd-ucode for AMD processors,\n- intel-ucode for Intel processors.\n\nmkinitcpio and dracut generate combined initramfs files by default. The microcode will be loaded automatically at boot time. Booster does not support generating combined initramfs, see the needed boot loader configuration at #Microcode in a separate initramfs file.\n\n"
    },
    {
      "title": "Loading microcode",
      "level": 2,
      "content": "Microcode updates are usually shipped with the motherboard's firmware and applied during firmware initialization. Since OEMs might not release firmware updates in a timely fashion and old systems do not get new firmware updates at all, the ability to apply CPU microcode updates during boot was added to the Linux kernel. The Linux microcode loader supports three loading methods:\n\n1. Built-in microcode can be compiled into the kernel and then applied by the early loader.\n1. Early loading updates the microcode very early during boot, before the initramfs stage, and is preferred over late loading. This is mandatory for CPUs with severe hardware bugs, like the Intel Haswell and Broadwell processor families.\n1. Late loading (Which may be dangerous) updates the microcode after booting which could be too late since the CPU might have already tried to use a faulty instruction. Even if already using early loading, late loading can still be used to apply a newer microcode update without needing to reboot.\n\n"
    },
    {
      "title": "Early loading",
      "level": 3,
      "content": "The kernel's early loader expects microcode update files in /kernel/x86/microcode/GenuineIntel.bin or /kernel/x86/microcode/AuthenticAMD.bin inside an uncompressed CPIO archive (initramfs image).\n\nThe early initramfs image can be combined with the main initramfs image into one file and passed as a single initramfs to the kernel (via the initrd= kernel command line option by your boot loader or when packed in a unified kernel image) or it can exist as a separate file in which case multiple initrd= kernel command line options need to be used. In both cases, the uncompressed CPIO archive with the microcode must be placed before the main initramfs.\n\nNote that because of the wide variability in users' early-boot configuration, microcode updates may not be triggered automatically by Arch's default configuration.\n\n"
    },
    {
      "title": "Custom built kernels",
      "level": 4,
      "content": "In order for early loading to work in custom kernels, \"CPU microcode loading support\" needs to be compiled into the kernel, not compiled as a module. This will enable the \"Early load microcode\" prompt which should be set to Y.\n\n```\nCONFIG_BLK_DEV_INITRD=Y\nCONFIG_MICROCODE=y\nCONFIG_MICROCODE_INTEL=Y\nCONFIG_MICROCODE_AMD=y\n```\n\n"
    },
    {
      "title": "Microcode initramfs packed together with the main initramfs in one file",
      "level": 4,
      "content": "The uncompressed microcode CPIO can be prepended into the initramfs and used as a single initramfs file. This method is preferred over #Microcode in a separate initramfs file since no additional boot parameter configuration is necessary.\n\nFor mkinitcpio to generate an initramfs file that includes microcode, make sure microcode is in the HOOKS array in /etc/mkinitcpio.conf.\n\nIf the autodetect hook precedes microcode, then only the microcode for the current CPU will be included. To include all CPU microcode files that can be found on the system, move the microcode hook before autodetect or remove the autodetect hook entirely.\n\nWhen generating the initramfs, mkinitcpio will show:\n\n```\n-> Early uncompressed CPIO image generation successful\n```\n\nYou can verify the initramfs includes the microcode update files with lsinitcpio(1). E.g.:\n\n```\n# lsinitcpio --early /boot/initramfs-linux.img | grep microcode\n```\n\n```\nkernel/x86/microcode/\nkernel/x86/microcode/AuthenticAMD.bin\n```\n\nFor dracut, see dracut.conf(5) ยง DESCRIPTION.\n\n"
    },
    {
      "title": "Microcode in a separate initramfs file",
      "level": 4,
      "content": "Early microcode updates must otherwise be enabled by adding /boot/amd-ucode.img or /boot/intel-ucode.img as the first initrd in the bootloader configuration file. This is before the normal initrd file. See below for instructions for common bootloaders.\n\nIn the following sections replace cpu_manufacturer with your CPU manufacturer, i.e. amd or intel.\n\ngrub-mkconfig will automatically detect the microcode update and configure GRUB appropriately. After installing the microcode package, regenerate the GRUB configuration to activate loading the microcode update by running:\n\n```\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\nAlternatively, users that manage their GRUB configuration file manually can add /boot/cpu_manufacturer-ucode.img (or /cpu_manufacturer-ucode.img if /boot is a separate partition) as follows:\n\n```\n/boot/grub/grub.cfg\n```\n\n```\n...\necho 'Loading initial ramdisk'\ninitrd\t/boot/cpu_manufacturer-ucode.img /boot/initramfs-linux.img\n...\n```\n\nRepeat it for each menu entry.\n\nUse the initrd option to load the microcode, before the initial ramdisk, as follows:\n\n```\n/boot/loader/entries/entry.conf\n```\n\n```\ntitle   Arch Linux\nlinux   /vmlinuz-linux\ninitrd  /cpu_manufacturer-ucode.img\ninitrd  /initramfs-linux.img\n...\n```\n\nThe latest microcode cpu_manufacturer-ucode.img must be available at boot time in your EFI system partition (ESP). The ESP must be mounted as /boot in order to have the microcode updated every time amd-ucode or intel-ucode is updated. Otherwise, copy /boot/cpu_manufacturer-ucode.img to your ESP at every update of the microcode package.\n\nAppend two initrd= options:\n\n```\ninitrd=\\cpu_manufacturer-ucode.img initrd=\\initramfs-linux.img\n```\n\nEdit boot options in /boot/refind_linux.conf and add an initrd= option for the microcode image as the first initrd argument passed. Use either initrd=boot\\cpu_manufacturer-ucode.img or initrd=cpu_manufacturer-ucode.img depending if the files in /boot are in the root of a separate partition.\n\nThe microcode is required to be the first initramfs declared for the boot options list. For example:\n\n```\n\"Boot using default options\"  \"root=PARTUUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw add_efi_memmap initrd=boot\\cpu_manufacturer-ucode.img initrd=boot\\initramfs-%v.img\"\n```\n\nUsers employing manual stanzas in esp/EFI/refind/refind.conf to define kernels should add the initrd= parameter with the proper path within the boot partition. This parameter is required as part of the options line, and not in the main part of the stanza. E.g.:\n\n```\noptions  \"root=PARTUUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw add_efi_memmap initrd=boot\\cpu_manufacturer-ucode.img\"\n```\n\nMultiple initrd's can be separated by commas in /boot/syslinux/syslinux.cfg:\n\n```\nLABEL arch\n    MENU LABEL Arch Linux\n    LINUX ../vmlinuz-linux\n    INITRD ../cpu_manufacturer-ucode.img,../initramfs-linux.img\n...\n```\n\nLILO and potentially other old boot loaders do not support multiple initrd images. Follow the #Microcode initramfs packed together with the main initramfs in one file method instead.\n\nFor Limine you will just need to add the path to the microcode through the MODULE_PATH option in your limine.conf file. Here is an example:\n\n```\nlimine.conf\n```\n\n```\ndefault_entry: 1\ntimeout: 3\n\n/Arch\n    comment: Arch Linux\n\n    protocol: linux\n    kernel_path: boot():/vmlinuz-linux\n    kernel_cmdline: root=UUID=c0748521-eca9-4f38-989c-43811b6e39a1 rw loglevel=3\n    module_path: boot():/cpu_manufacturer-ucode.img\n    module_path: boot():/initramfs-linux.img\n```\n\n"
    },
    {
      "title": "Late loading",
      "level": 3,
      "content": "Late loading of microcode updates happens after the system has booted. It uses files in /usr/lib/firmware/amd-ucode/ and /usr/lib/firmware/intel-ucode/. The microcode update files are provided by amd-ucode and intel-ucode, respectively.\n\nLate loading requires the kernel to be built with CONFIG_MICROCODE_LATE_LOADING=y, which is not the case for Arch officially supported kernels at the moment. [2]\n\n"
    },
    {
      "title": "Late loading microcode updates",
      "level": 4,
      "content": "To manually reload the microcode, e.g. after updating the microcode files in /usr/lib/firmware/amd-ucode/ or /usr/lib/firmware/intel-ucode/, run:\n\n```\n# echo 1 > /sys/devices/system/cpu/microcode/reload\n```\n\nThis allows to apply newer microcode updates without rebooting the system.\n\n"
    },
    {
      "title": "Verifying that microcode got updated on boot",
      "level": 2,
      "content": "Check the kernel messages with journalctl to see if the microcode has been updated:\n\n```\n# journalctl -k --grep='microcode:'\n```\n\nOne should see something similar to the following on every boot, indicating that microcode is updated very early on:\n\n```\nkernel: microcode: Current revision: 0x00000012\nkernel: microcode: Updated early from: 0x0000000e\n```\n\nIt is entirely possible, particularly with newer hardware, that there is no microcode update for the CPU.\n\nOn AMD systems using late loading the output will show the version of the old microcode before reloading the microcode and the new one once it is reloaded.\n\n"
    },
    {
      "title": "Which CPUs accept microcode updates",
      "level": 2,
      "content": "Users may consult either Intel's repository or Gentoo's wiki on AMD at the following links to see if a particular model is supported:\n\n- Gentoo:AMD microcode#Microcode firmware files.\n- Intel's Github repository.\n\n"
    },
    {
      "title": "Detecting available microcode update",
      "level": 3,
      "content": "For Intel, it is possible to find out if the /usr/lib/firmware/intel-ucode/ contains microcode for the running CPU with iucode_tool(8).\n\n1. Install intel-ucode and iucode-tool\n1. Load the cpuid kernel module: # modprobe cpuid\n1. Search it for your cpuid: $ iucode_tool -lS /usr/lib/firmware/intel-ucode/\n1. If an update is available, it should show up below selected microcodes\n1. The microcode might already be in your vendor bios and not show up loading in dmesg. Compare to the current microcode running grep microcode /proc/cpuinfo\n\n```\n# modprobe cpuid\n```\n\n```\n$ iucode_tool -lS /usr/lib/firmware/intel-ucode/\n```\n\nFor AMD, it can be done manually.\n\n1. Find out family, model and stepping of the CPU. For example, by running the following command: # journalctl -k --grep='CPU0:' Look at the output part like (family: 0x15, model: 0x10, stepping: 0x1).\n1. Match the values accordingly with the list from amd-ucode README.\n1. If matched, compare the current revision of running microcode with the listed Patch value.\n\n```\n# journalctl -k --grep='CPU0:'\n```\n\n"
    },
    {
      "title": "Disable microcode loader",
      "level": 2,
      "content": "In case an updated CPU microcode causes issues, you may want to temporary disable the microcode loader to allow successfully booting and downgrading the package. To disable the kernel's microcode loader, specify the dis_ucode_ldr kernel parameter.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Updating microcodes โ Experiences in the community\n- Notes on Intel Microcode updates โ Ben Hawkes\n- Kernel microcode loader โ kernel documentation\n- Erratum found in Haswell/Broadwell โ AnandTech\n- iucode-tool GitLab project\n- Intel, AMD, VIA & Freescale CPU Microcode Repositories\n- CPUID dumps\n\n"
    }
  ]
}