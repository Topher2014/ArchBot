{
  "title": "Uwsgi",
  "url": "https://wiki.archlinux.org/title/Uwsgi",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "uWSGI is a fast, self-healing and developer/sysadmin-friendly application container server coded in pure C.\n\nThere are alternatives written in Python such as gunicorn.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the uwsgi package. Plugins need to be installed separately (their package names start with uwsgi-plugin-).\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Web applications served by uWSGI are configured in /etc/uwsgi/, where each of them requires its own configuration file (ini-style). Details can be found in the uWSGI documentation.\n\nAlternatively, you can run uWSGI in Emperor mode (configured in /etc/uwsgi/emperor.ini). It enables a single uWSGI instance to run a set of different apps (called vassals) using a single main supervisor (called emperor).\n\n"
    },
    {
      "title": "Web applications",
      "level": 3,
      "content": "uWSGI supports many different languages and thus also many web applications. As an example the configuration file /etc/uwsgi/example.ini and the prior installation of the plugin needed for your web application is assumed.\n\n"
    },
    {
      "title": "Python",
      "level": 4,
      "content": "The following is a simple example for a Python application.\n\n```\n/etc/uwsgi/example.ini\n```\n\n```\n[uwsgi]\nchdir = /srv/http/example\nmodule = example\nplugins = python\n```\n\nIt is also possible to run uWSGI separately with the following syntax for instance:\n\n```\n$ uwsgi --socket 127.0.0.1:3031 --plugin python2 --wsgi-file ~/foo.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191 --uid --gid\n```\n\nYou should avoid running this command as root.\n\n"
    },
    {
      "title": "PHP",
      "level": 4,
      "content": "The following is a simple example for a PHP based website.\n\n```\n/etc/uwsgi/example.ini\n```\n\n```\n[uwsgi]\n; maximum number of worker processes\nprocesses = 4\n; the user and group id of the process once itâ€™s started\nuid = http\ngid = http\nsocket = /run/uwsgi/%n.sock\nmaster = true\nchdir = /srv/http/%n\n; php\nplugins = php\n; jail our php environment\nphp-docroot = /srv/http/%n\nphp-index = index.php\n; clear environment on exit\nvacuum = true\n```\n\n"
    },
    {
      "title": "Web server",
      "level": 3,
      "content": "uWSGI can be the backend to many web servers, that support the forwarding of access. The following are examples for configurations.\n\n"
    },
    {
      "title": "Nginx",
      "level": 4,
      "content": "nginx can redirect access towards unix sockets or ports (on localhost or remote machine), depending on your web application.\n\n```\n/etc/nginx/example.conf\n```\n\n```\n# ...\n# forward all access to / towards \nlocation / {\n  root /usr/share/nginx/html;\n  index index.html index.htm;\n  include uwsgi_params;\n  # this is the correct uwsgi_modifier1 parameter for a php based application\n  uwsgi_modifier1 14;\n  # uncomment the following if you want to use the unix socket instead\n  # uwsgi_pass unix:/var/run/uwsgi/example.sock;\n  # access is redirected to localhost:3031\n  uwsgi_pass 127.0.0.1:3031;\n}\n# ...\n```\n\n"
    },
    {
      "title": "Nginx (in chroot)",
      "level": 4,
      "content": "First create ini file that will point to your application:\n\n```\n/etc/uwsgi/application1.ini\n```\n\n```\n[uwsgi]\nchroot = /srv/http\nchdir = /www/application1\nwsgi-file = application1.py\nplugins = python\nsocket = /run/application1.sock\nuid = http\ngid = http\nthreads = 2\nstats = 127.0.0.1:9191\nvacuum = true\n```\n\nSince we are chrooting to /srv/http above configuration will result in following unix socket being created /srv/http/run/application1.sock\n\nNote: You can try to run following:\n\n- Your application must be placed within /srv/http/www/application1 before service is started. Depending on configuration your application may be cached so you may need to restart the service when you modify it.\n- If you are deploying python application you may need to copy standard python libraries - if you develop under python 3 then you can copy them from /usr/lib/python3.6 to /srv/http/lib/python3.6.\n\nYou can try to run following:\n\n```\n# cp -r -p /usr/lib/python3.6 /srv/http/lib\n# cp -r -p /usr/lib/*python*so /srv/http/lib\n```\n\nYou will need to disable notifications within your service file:\n\n```\n/etc/systemd/system/multi-user.target.wants/uwsgi\\@application1.service\n```\n\n```\n[Unit]\nDescription=uWSGI service unit\n\n[Service]\nPIDFile=/run/%I.pid\nRemainAfterExit=yes\nExecStart=/usr/bin/uwsgi --ini /etc/uwsgi/%I.ini\nExecReload=/bin/kill -HUP $MAINPID\nExecStop=/bin/kill -INT $MAINPID\nRestart=always\nStandardError=syslog\nKillSignal=SIGQUIT\n\n[Install]\nWantedBy=multi-user.target\n```\n\nAfter modification make sure to reload to incorporate the new or changed units.\n\nYou are then free to enable and start uwsgi@application1.service.\n\nEdit /srv/http/etc/nginx/nginx.conf and add new server section within it that would contain at least following:\n\n```\n/srv/http/etc/nginx/nginx.conf\n```\n\n```\n...\n    server\n    {\n        listen       80;\n        server_name  127.0.0.1;\n        location /\n        {\n            root   /www/application1;\n            include uwsgi_params;\n            uwsgi_pass unix:/run/application1.sock;\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html\n        {\n            root   /usr/share/nginx/html;\n        }\n    }\n...\n```\n\nMake sure to now restart nginx.service to have your application1 be served at 127.0.0.1.\n\n"
    },
    {
      "title": "Running uWSGI",
      "level": 2,
      "content": "If you plan on using a web application all the time (without it being activated on demand), you can simply start and enable uwsgi@example.\n\nIf you plan on having your web application be started on demand you can start and enable uwsgi@example.socket.\n\nTo use the Emperor mode, start and enable emperor.uwsgi.service.\n\nTo use socket activation of this mode start and enable emperor.uwsgi.socket.\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "Some functionality, that uWSGI offers is not accessible by using the systemd service files provided in the official repositories. Changes to them are explained in the following sections. For further information see [2].\n\n"
    },
    {
      "title": "Socket activation",
      "level": 3,
      "content": "Using socket activation, you want to\n\n- direct your web server to a unix socket and thereby start your uWSGI instance running the application\n- you most likely want to have the application be closed by uWSGI after a certain idle time\n- you want your web server be able to start the application again, once it is accessed\n\nuWSGI offers settings, with which you can have the instance close the application:\n\n```\n/etc/uwsgi/example.ini\n```\n\n```\n[uwsgi]\n# ...\n\n# set idle time in seconds\nidle = 600\n# kill the application after idle time was reached\ndie-on-idle = true\n\n# ...\n```\n\nThe current uwsgi@.service file however does not allow this, because systemd treats non-zero exit codes as failure and thereby marking the unit as failed and additionally the Restart=always directive makes a closing after idle time useless. A fix for this is to add the exit codes, that uWSGI may provide after closing an application by itself to a list, that systemd will treat as success by using the SuccessExitStatus directive (for further information see [3]).\n\n```\n/etc/systemd/system/uwsgi-socket@.service\n```\n\n```\n[Unit]\nDescription=uWSGI service unit\n\n[Service]\nExecStart=/usr/bin/uwsgi --ini /etc/uwsgi/%I.ini\nExecReload=/bin/kill -HUP $MAINPID\nExecStop=/bin/kill -INT $MAINPID\nType=notify\nSuccessExitStatus=15 17 29 30\nStandardError=syslog\nNotifyAccess=all\nKillSignal=SIGQUIT\n\n[Install]\nWantedBy=multi-user.target\n```\n\nThis will allow for proper socket activation with kill-after-idle functionality.\n\n"
    },
    {
      "title": "Hardening uWSGI service",
      "level": 3,
      "content": "Web applications are exposed to the wild and depending on their quality and the security of their underlying languages, some are more dangerous to run, than others. A good way to start dealing with possible unsafe web applications is to jail them. systemd has some functionality, that can be put to use. Have a look at the following example (and for further information see systemd.exec(5) and [4]):\n\n```\n/etc/systemd/system/uwsgi-secure@.service\n```\n\n```\n[Unit]\nDescription=uWSGI service unit\n\n[Service]\nExecStart=/usr/bin/uwsgi --ini /etc/uwsgi/%I.ini\nExecReload=/bin/kill -HUP $MAINPID\nExecStop=/bin/kill -INT $MAINPID\nType=notify\nSuccessExitStatus=15 17 29 30\nStandardError=syslog\nNotifyAccess=all\nKillSignal=SIGQUIT\nPrivateDevices=yes\nPrivateTmp=yes\nProtectSystem=full\nReadWritePaths=/etc/webapps /var/lib/\nProtectHome=yes\nNoNewPrivileges=yes\n\n[Install]\nWantedBy=multi-user.target\n```\n\n- Using NoNewPrivileges=yes does not work with Mailman's cgi frontend! Remove this setting, if you want to use it in conjunction with it.\n- If you want further hardening, the use of namespaces is advisable. You can get a first glance on that topic in the uWSGI namespaces documentation.\n\n"
    },
    {
      "title": "Accessibility of uWSGI socket",
      "level": 3,
      "content": "The default (per application) socket unit (uwsgi@.socket) in uwsgi allows read and write access to any user on the system. However, systemd allows for a more finely granulated access management (see systemd.socket(5)), with which the access to a unix socket can be made more restrictive.\n\nBy creating it below a webapp specific directory below /run (needs to be created using tmpfiles beforehand - for reference see Web application package guidelines) and modifying its group and file permissions, the socket is only accessible to root and the web server and allows the web application to run as its own user:\n\n```\n/etc/systemd/system/uwsgi-secure@.socket\n```\n\n```\n[Unit]\nDescription=Socket for uWSGI %I\n\n[Socket]\nListenStream=/run/%I/%I.sock\nSocketGroup=http\nSocketMode=0660\n\n[Install]\nWantedBy=sockets.target\n```\n\n"
    },
    {
      "title": "AH00957: uwsgi: attempt to connect to 127.0.0.1:0 (*) failed",
      "level": 4,
      "content": "The default uWSGI port (3031) does not work (currently?) with Apache httpd server. See [5] for details.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official Documentation\n- uWSGI Github\n- Securely serving webapps using uWSGI\n- Fluffy White Stuff Benchmark\n- Flask uWSGI deploying\n- Django and uWSGI\n- Apache and uWSGI\n\n"
    }
  ]
}