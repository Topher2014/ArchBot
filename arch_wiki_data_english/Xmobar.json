{
  "title": "Xmobar",
  "url": "https://wiki.archlinux.org/title/Xmobar",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "xmobar is a lightweight, text-based, status bar written in Haskell. It was originally designed to be used together with xmonad, but it is also usable with any other window manager. While xmobar is written in Haskell, no knowledge of the language is required to install and use it.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the xmobar package. Available variants are:\n\n- xmobar-gitAUR — development version.\n\n"
    },
    {
      "title": "Running",
      "level": 2,
      "content": "If the configuration file is saved as ~/.xmobarrc:\n\n```\n$ xmobar &\n```\n\nAlternatively, the path to a configuration file can be specified:\n\n```\n$ xmobar /path/to/config &\n```\n\nThe following is an example of how to configure xmobar using command line options:\n\n```\n$ xmobar -B white -a right -F blue -t '%LIPB%' -c '[Run Weather \"LIPB\" [] 36000]' &\n```\n\nThis will run xmobar right-aligned, with white background and blue text, using the Weather plugin. Note that the output template must contain at least one command. Read the following section for further explanation of options.\n\nThe flag -x number can specify the x display to run xmobar on and it will effectively override the configuration options pickBroadest and allDesktops.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The configuration for xmobar is normally defined in ~/.xmobarrc or by specifying a set of command line options when launching xmobar. Any given command line option will override the corresponding option in the configuration file. This can be useful to test new configurations without having to edit a configuration file.\n\nFollowing is an example ~/.xmobarrc file, followed by a description of each option. Note that each option has a corresponding command line option.\n\nNote: The configuration file is (a subset of) Haskell source code, so '--' starts a single-line comment.\n\n```\nConfig { \n\n   -- appearance\n     font =         \"Bitstream Vera Sans Mono Bold 9\"\n   , bgColor =      \"black\"\n   , fgColor =      \"#646464\"\n   , position =     Top\n   , border =       BottomB\n   , borderColor =  \"#646464\"\n\n   -- layout\n   , sepChar =  \"%\"   -- delineator between plugin names and straight text\n   , alignSep = \"}{\"  -- separator between left-right alignment\n   , template = \"%battery% | %multicpu% | %coretemp% | %memory% | %dynnetwork% }{ %RJTT% | %date% || %kbd% \"\n\n   -- general behavior\n   , lowerOnStart =     True    -- send to bottom of window stack on start\n   , hideOnStart =      False   -- start with window unmapped (hidden)\n   , allDesktops =      True    -- show on all desktops\n   , overrideRedirect = True    -- set the Override Redirect flag (Xlib)\n   , pickBroadest =     False   -- choose widest display (multi-monitor)\n   , persistent =       True    -- enable/disable hiding (True = disabled)\n\n   -- plugins\n   --   Numbers can be automatically colored according to their value. xmobar\n   --   decides color based on a three-tier/two-cutoff system, controlled by\n   --   command options:\n   --     --Low sets the low cutoff\n   --     --High sets the high cutoff\n   --\n   --     --low sets the color below --Low cutoff\n   --     --normal sets the color between --Low and --High cutoffs\n   --     --High sets the color above --High cutoff\n   --\n   --   The --template option controls how the plugin is displayed. Text\n   --   color can be set by enclosing in <fc></fc> tags. For more details\n   --   see http://projects.haskell.org/xmobar/#system-monitor-plugins.\n   , commands = \n\n        -- weather monitor\n        [ Run Weather \"RJTT\" [ \"--template\", \"<skyCondition> | <fc=#4682B4><tempC></fc>°C | <fc=#4682B4><rh></fc>% | <fc=#4682B4><pressure></fc>hPa\"\n                             ] 36000\n\n        -- network activity monitor (dynamic interface resolution)\n        , Run DynNetwork     [ \"--template\" , \"<dev>: <tx>kB/s|<rx>kB/s\"\n                             , \"--Low\"      , \"1000\"       -- units: B/s\n                             , \"--High\"     , \"5000\"       -- units: B/s\n                             , \"--low\"      , \"darkgreen\"\n                             , \"--normal\"   , \"darkorange\"\n                             , \"--high\"     , \"darkred\"\n                             ] 10\n\n        -- cpu activity monitor\n        , Run MultiCpu       [ \"--template\" , \"Cpu: <total0>%|<total1>%\"\n                             , \"--Low\"      , \"50\"         -- units: %\n                             , \"--High\"     , \"85\"         -- units: %\n                             , \"--low\"      , \"darkgreen\"\n                             , \"--normal\"   , \"darkorange\"\n                             , \"--high\"     , \"darkred\"\n                             ] 10\n\n        -- cpu core temperature monitor\n        , Run CoreTemp       [ \"--template\" , \"Temp: <core0>°C|<core1>°C\"\n                             , \"--Low\"      , \"70\"        -- units: °C\n                             , \"--High\"     , \"80\"        -- units: °C\n                             , \"--low\"      , \"darkgreen\"\n                             , \"--normal\"   , \"darkorange\"\n                             , \"--high\"     , \"darkred\"\n                             ] 50\n                          \n        -- memory usage monitor\n        , Run Memory         [ \"--template\" ,\"Mem: <usedratio>%\"\n                             , \"--Low\"      , \"20\"        -- units: %\n                             , \"--High\"     , \"90\"        -- units: %\n                             , \"--low\"      , \"darkgreen\"\n                             , \"--normal\"   , \"darkorange\"\n                             , \"--high\"     , \"darkred\"\n                             ] 10\n\n        -- battery monitor\n        , Run Battery        [ \"--template\" , \"Batt: <acstatus>\"\n                             , \"--Low\"      , \"10\"        -- units: %\n                             , \"--High\"     , \"80\"        -- units: %\n                             , \"--low\"      , \"darkred\"\n                             , \"--normal\"   , \"darkorange\"\n                             , \"--high\"     , \"darkgreen\"\n\n                             , \"--\" -- battery specific options\n                                       -- discharging status\n                                       , \"-o\"\t, \"<left>% (<timeleft>)\"\n                                       -- AC \"on\" status\n                                       , \"-O\"\t, \"<fc=#dAA520>Charging</fc>\"\n                                       -- charged status\n                                       , \"-i\"\t, \"<fc=#006000>Charged</fc>\"\n                             ] 50\n\n        -- time and date indicator \n        --   (%F = y-m-d date, %a = day of week, %T = h:m:s time)\n        , Run Date           \"<fc=#ABABAB>%F (%a) %T</fc>\" \"date\" 10\n\n        -- keyboard layout indicator\n        , Run Kbd            [ (\"us(dvorak)\" , \"<fc=#00008B>DV</fc>\")\n                             , (\"us\"         , \"<fc=#8B0000>US</fc>\")\n                             ]\n        ]\n   }\n```\n\n- font - The name of the font to use.\".\n\nExample:\n\n```\nfont = \"Bitstream Vera Sans Mono 8\"\n```\n\n- additionalFonts - List of fonts to be used with the <fn=n> tag.\n\nExample:\n\n```\nadditionalFonts = [ \"Bitstream Vera Sans Mono 8\", \"Source Code Pro 10\"]\n```\n\n- fgColor - The colour of the font, takes both colour names like black and hex colours like #000000.\n- bgColor - The colour of the bar, takes both colour names like red and hex colours like #ff0000.\n- position - The position of the bar. Keywords are: Top/Bottom, TopW/BottomW, Static and OnScreen. Top/Bottom - The top/bottom of the screen. TopW/BottomW - The top/bottom of the screen with a fixed width. TopW/BottomW takes 2 arguments: Alignment: Left, Center or Right aligned. Width: An integer for the width of the bar in percentage. Static - A fixed position on the screen, with a fixed width. Static takes 4 arguments: xpos: Horisontal position in pixels, starting at the upper left corner. ypos: Vertical position in pixels, starting at the upper left corner. width: The width of the bar in pixels. height: The height of the bar in pixels. OnScreen - Specify on which screen the bar is positioned. Takes 2 arguments: screenNr: Index of the screen to position the bar on. position: The positioning of the bar, this is one of the above keywords followed by their arguments.\n\n- Top/Bottom - The top/bottom of the screen.\n- TopW/BottomW - The top/bottom of the screen with a fixed width. TopW/BottomW takes 2 arguments: Alignment: Left, Center or Right aligned. Width: An integer for the width of the bar in percentage.\n- Static - A fixed position on the screen, with a fixed width. Static takes 4 arguments: xpos: Horisontal position in pixels, starting at the upper left corner. ypos: Vertical position in pixels, starting at the upper left corner. width: The width of the bar in pixels. height: The height of the bar in pixels.\n- OnScreen - Specify on which screen the bar is positioned. Takes 2 arguments: screenNr: Index of the screen to position the bar on. position: The positioning of the bar, this is one of the above keywords followed by their arguments.\n\n- Alignment: Left, Center or Right aligned.\n- Width: An integer for the width of the bar in percentage.\n\n- xpos: Horisontal position in pixels, starting at the upper left corner.\n- ypos: Vertical position in pixels, starting at the upper left corner.\n- width: The width of the bar in pixels.\n- height: The height of the bar in pixels.\n\n- screenNr: Index of the screen to position the bar on.\n- position: The positioning of the bar, this is one of the above keywords followed by their arguments.\n\nExample - centered at the bottom of the screen, with a width of 75% of the screen:\n\n```\nposition = BottomW C 75\n```\n\nExample - top left of the screen, with a width of 1024 pixels and height of 15 pixels:\n\n```\nposition = Static { xpos = 0 , ypos = 0, width = 1024, height = 15 }\n```\n\n- border - The position and appearance of a border. Keywords are: TopB, TopBM, BottomB, BottomBM, FullB, FullBM and NoBorder (default) TopB/BottomB - The top/bottom of the bar FullB - The entire perimeter of the bar TopBM/BottomBM/FullBM - Same as other options, except you can specify how many pixels off the bar's edge the border should be drawn. Each option takes a single integer argument.\n\n- TopB/BottomB - The top/bottom of the bar\n- FullB - The entire perimeter of the bar\n- TopBM/BottomBM/FullBM - Same as other options, except you can specify how many pixels off the bar's edge the border should be drawn. Each option takes a single integer argument.\n\nExample - border placed 3 pixels off bottom edge of the bar:\n\n```\nborder: BottomBM 3\n```\n\n- sepChar - The character to be used for indicating commands in the output template. Default character is \"%\".\n- alignSep - A string of characters for aligning text in the output template. The text before the first character will be left aligned, the text between them will be centered, and the text to the right of the last character will be right aligned. Default string is \"}{\".\n- iconRoot - The root folder where icons are stored.\n- template - The output template is a string containing the text and commands that will be displayed. It contains the alias for a %command%, written text and color tags that sets the colour of text. The tags used in this template string can also be used in the Run command custom templates. The template tags include: %command% prints the output of the command <fc=#f0f0f0,#101010>string</fc> will print string with #f0f0f0 as foreground and #101010 as background ( either can be omitted ) <fn=1>string</fn> will print string with the nth, in this case the first, font in the listx of additionalFonts, with 0 being the default font. <icon=/path/to/icon.xbm/> will print the XBM or XPM icon in the path ( it will use iconRoot ++ path/to/icon if it does not start with /, ./ or ../). Transparent XPM icons will ignore the fc tags and use the default bgcolor, while XBM icons will use the local ( or default ) background and foreground. xmobar will use icons regardless of size but to align them with text bgcolor and fgcolor the optimal height is 20px, there is no width restriction. <action=`command` button=1>string</action> will execute a command when string is clicked with button 1 ( left mouse button ). <raw=len:string/> outputs an arbitrary string of length len.\n\n- %command% prints the output of the command\n- <fc=#f0f0f0,#101010>string</fc> will print string with #f0f0f0 as foreground and #101010 as background ( either can be omitted )\n- <fn=1>string</fn> will print string with the nth, in this case the first, font in the listx of additionalFonts, with 0 being the default font.\n- <icon=/path/to/icon.xbm/> will print the XBM or XPM icon in the path ( it will use iconRoot ++ path/to/icon if it does not start with /, ./ or ../). Transparent XPM icons will ignore the fc tags and use the default bgcolor, while XBM icons will use the local ( or default ) background and foreground. xmobar will use icons regardless of size but to align them with text bgcolor and fgcolor the optimal height is 20px, there is no width restriction.\n- <action=`command` button=1>string</action> will execute a command when string is clicked with button 1 ( left mouse button ).\n- <raw=len:string/> outputs an arbitrary string of length len.\n\nExample:\n\n```\ntemplate = \"%StdinReader%}{%cpu% %memory% <fc=#ffaaff>battery:</fc> %battery% %date%\"\n```\n\n- commands For setting the options of the programs to run. Commands is a comma seperated list of commands, optionally specified with options.\n\nExample - runs the Memory plugin, with the specified template and the Swap plugin, with default args. Both update every second:\n\n```\ncommands = [Run Memory [\"-t\",\"Mem: <usedratio>%\"] 10, Run Swap [] 10]\n```\n\nAnd finally some options which control the bar's general behavior---each is set to a single True or False value:\n\n- lowerOnStart - Controls whether to keep the bar behind all other windows.\n- hideOnStart - Controls whether to hide the bar on start.\n- allDesktops - Controls whether to show the bar on all desktops.\n- overrideRedirect - An option necessary for some window managers to prevent the bar from being treated like a normal window.\n- pickBroadest - On multi-monitor setups place the bar on the widest monitor instead of the first.\n- persistent - Controls whether to always be visible or not, regardless of the bar's 'hidden' state.\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "There are various plugins that can be used with xmobar - to name a few, there are plugins for disk usage, ram, cpu, battery status, weather report and network activity. A detailed description of each plugin, its dependencies and how to configure it is on the project website.\n\n"
    },
    {
      "title": "GMail integration",
      "level": 3,
      "content": "Assuming you have either xmobar-gmail-darcs or xmobar-gmail installed, you can configure .xmobarrc as follows. Add the GMail plugin to the commands list:\n\n```\n, Run GMail \"gmail.username\" \"GmailPassword\" [\"-t\", \"Mail: <count>\"] 3000\n```\n\nThen add the command to the template\n\n```\n, template = \"... %gmail.username% ...\"\n```\n\n"
    },
    {
      "title": "MPD integration",
      "level": 3,
      "content": "There is a plugin to pull information to display on the status bar about MPD's currently playing song. To add a simple plugin displaying the artist and song of the current track, add this line to your commands list in your ~/.xmobarrc:\n\n```\n, Run MPD [\"-t\", \"<state>: <artist> - <track>\"] 10\n```\n\nFinally, you will need to place the plugin some place in your template, as follows:\n\n```\n, template = \"%StdinReader% }{ ... %mpd% ...\"\n```\n\n"
    },
    {
      "title": "Conky-Cli integration",
      "level": 3,
      "content": "It is possible to utilize the features of conky-cliAUR such as disk space, top and system messages, by piping the information from conky into a text file and read the contents from it. Following is a bash script to use with xmobar for this purpose.\n\n```\n~/.xmonad/conkyscript\n```\n\n```\n#!/bin/bash\nconky -c ~/.conkyclirc -i1 -q > conkystat &\nsleep 4\nkillall -q conky\ncat conkystat\nrm conkystat\n```\n\nAdd the following line to the commands section in ~/.xmobarrc.\n\n```\n, Run Com \".xmonad/conkyscript\" [\"&\"] \"conky\" 300\n```\n\nThis makes the script run every 30 seconds.\n\nThen add the following to your .xinitrc before the exec xmonad entry.\n\n```\n.xmonad/conkyscript &\nsleep 6 && xmobar &\n```\n\nThen add %conky% to your template section.\n\n"
    },
    {
      "title": "Simple conky-cli integration",
      "level": 3,
      "content": "Just place this code:\n\n```\nRun Com \"conky\" [\"-q\", \"-i\", \"1\"] \"conky\" 600\n```\n\nin your .xmobarrc.\n\n"
    },
    {
      "title": "xmonad unresponsive except for focused window",
      "level": 3,
      "content": "If xmonad does not respond to clicks and hotkeys but you can still type in the focused window it is likely being caused by the logHook piping to a handle that is not being read.\n\nTo solve this add an %StdinReader% or %UnsafeStdinReader% in the template of your xmobar as well as run the respective command (i.e. Run StdinReader) in the command section. In case of multiple instances of xmobar check that all the bars you are piping to have the StdinReader, if not either add it or remove the bar from ppOutput in your logHook.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- xmobar hackage\n- xmobar project\n- dzen and xmobar hacking thread\n\n"
    }
  ]
}