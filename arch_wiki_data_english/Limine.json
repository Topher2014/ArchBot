{
  "title": "Limine",
  "url": "https://wiki.archlinux.org/title/Limine",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Arch boot process\n- Master Boot Record\n- GUID Partition Table\n- Unified Extensible Firmware Interface\n\nLimine is an advanced, portable, multiprotocol boot loader originally developed as the reference implementation for the Limine boot protocol, but also supporting the ability to boot Linux as well as to chainload other boot loaders.\n\n"
    },
    {
      "title": "Supported file systems",
      "level": 2,
      "content": "Limine supports FAT12, FAT16, FAT32 and ISO9660. The list of supported file systems is intentionally limited per Limine's design philosophy.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the limine package. This will install the limine command line tool, and it will also install all the Limine files, needed for setting up a bootable system for various architectures, in /usr/share/limine. Note that that directory is just going to serve as a repository of Limine files, but the bootloader has not been deployed for use just yet.\n\n"
    },
    {
      "title": "UEFI systems",
      "level": 3,
      "content": "Deploying Limine on UEFI systems involves copying the /usr/share/limine/BOOTX64.EFI file to the EFI system partition, and to make the UEFI BIOS aware of it.\n\n```\n# mkdir -p esp/EFI/limine\n# cp /usr/share/limine/BOOTX64.EFI esp/EFI/limine/\n```\n\nUnlike GRUB, Limine does not add an entry for the bootloader in the NVRAM automatically. Use efibootmgr to setup an entry for Limine.\n\nTo do so, one can do the following:\n\n```\n# efibootmgr \\\n      --create \\\n      --disk /dev/sdX \\\n      --part Y \\\n      --label \"Arch Linux Limine Bootloader\" \\\n      --loader '\\EFI\\limine\\BOOTX64.EFI' \\\n      --unicode \\\n      --verbose\n```\n\n- /dev/sdX is the disk (not a partition) where the ESP is located on. For example /dev/sda or /dev/nvme0n1. See Device file#Block device names for a description of the block device naming scheme.\n- Y is the partition index of the ESP, so if the ESP is /dev/sda1, then Y should be 1.\n\nOnce all this is done, one can move on to #Configuration directly.\n\n"
    },
    {
      "title": "BIOS systems",
      "level": 3,
      "content": "Deploying Limine on BIOS systems involves copying the /usr/share/limine/limine-bios.sys file, which contains stage 3 code that Limine needs to boot, to either the root, a /boot, a /limine, or a /boot/limine directory of any partition on the disk onto which Limine will be deployed, as long as the filesystem is supported. This usually means having to use a FAT partition for /boot, and copying the limine-bios.sys file to /boot/limine.\n\nFor example:\n\n```\n# mkdir -p /boot/limine\n# cp /usr/share/limine/limine-bios.sys /boot/limine/\n```\n\nThen stage 1 and 2 need to be deployed to the disk:\n\n```\n# limine bios-install /dev/sdX\n```\n\n- /dev/sdX is the disk (not a partition) where Limine is to be installed. For example /dev/sda or /dev/nvme0n1. This has to be the disk hosting the /boot partition. See Device file#Block device names for a description of the block device naming scheme.\n\n"
    },
    {
      "title": "UEFI + BIOS bootable drives",
      "level": 3,
      "content": "As long as a drive is MBR formatted, and it contains an EFI system partition (which can be the same as the /boot partition used for BIOS systems), it is possible to follow both the BIOS and UEFI deployment procedures in order to create a drive capable of booting on both legacy BIOS as well as UEFI systems. This is useful, for example, for installing an operating system on a USB flash drive which is to be used on multiple systems which may or may not support UEFI, or to ease moving hard drives across systems.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "limine does not ship a default configuration file, it is therefore necessary to create one. This file is necessary to teach Limine which operating systems are available for boot. The configuration file has a lot of options as Limine allows for a fair degree of customisation. A detailed documentation of the configuration file, its format, and its options can be found here.\n\nThe configuration file needs to reside on either the root, a /boot, a /limine, or a /boot/limine directory of a partition on the drive on which Limine is deployed, as long as the file system of said partition is supported. For UEFI systems, it may also reside on esp/EFI/BOOT or on esp/EFI/limine (the recommended location). The configuration file has to be named limine.conf.\n\nHere follows a simple example configuration that contains 1 boot menu entry that describes a typical Arch Linux kernel and initramfs:\n\n```\nlimine.conf\n```\n\n```\ntimeout: 5\n\n/Arch Linux\n    protocol: linux\n    path: boot():/vmlinuz-linux\n    cmdline: root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw\n    module_path: boot():/initramfs-linux.img\n```\n\n- xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx is the root file system's UUID.\n\nIn case the /boot partition, where the kernel and initramfs are, and the partition of the limine.conf file do not match (such as, for example, on UEFI systems with an extra /boot partition which is not the same as the ESP, and limine.conf is placed on the ESP), it may be necessary to replace boot():/ in the configuration file with uuid(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx):/, where xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx represents the PARTUUID of the /boot FAT partition.\n\nNote: **128 characters** To prevent this you should first embed the b2sum checksum of every resource file in the configuration. Limine file paths have an optional field containing the b2sum checksum of the file. This field can be specified by appending the # character and then the 128 characters checksum:\n\nTo prevent this you should first embed the b2sum checksum of every resource file in the configuration. Limine file paths have an optional field containing the b2sum checksum of the file. This field can be specified by appending the # character and then the 128 characters checksum:\n\n```\nboot():/path#checksum\n```\n\n"
    },
    {
      "title": "Windows entry (UEFI)",
      "level": 3,
      "content": "In order to be able to boot windows we need to know the path of bootmgfw.efi in the ESP. This can be done by going inside the ESP and using the following command:\n\n```\n$ find -name \"bootmgfw.efi\"\n```\n\n```\n./EFI/Microsoft/Boot/bootmgfw.efi\n```\n\nAll we need to do now is adding the following to the configuration:\n\n```\nlimine.conf\n```\n\n```\n/Windows\n    protocol: efi\n    path: boot():/EFI/Microsoft/Boot/bootmgfw.efi\n```\n\nAlternatively replacing boot():/ with uuid(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx):/, where xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx is the PARTUUID of the ESP, if limine.conf is not on the ESP.\n\n"
    },
    {
      "title": "pacman hook",
      "level": 2,
      "content": "While not mandatory, it may be useful to set up a pacman hook to deploy Limine whenever it is upgraded.\n\n"
    },
    {
      "title": "UEFI",
      "level": 3,
      "content": "```\n/etc/pacman.d/hooks/99-limine.hook\n```\n\n```\n[Trigger]\nOperation = Install\nOperation = Upgrade\nType = Package\nTarget = limine              \n\n[Action]\nDescription = Deploying Limine after upgrade...\nWhen = PostTransaction\nExec = /usr/bin/cp /usr/share/limine/BOOTX64.EFI esp/EFI/limine/\n```\n\n"
    },
    {
      "title": "BIOS",
      "level": 3,
      "content": "```\n/etc/pacman.d/hooks/99-limine.hook\n```\n\n```\n[Trigger]\nOperation = Install\nOperation = Upgrade\nType = Package\nTarget = limine              \n\n[Action]\nDescription = Deploying Limine after upgrade...\nWhen = PostTransaction\nExec = /bin/sh -c \"/usr/bin/limine bios-install /dev/sdX && /usr/bin/cp /usr/share/limine/limine-bios.sys /boot/limine/\"\n```\n\n- /dev/sdX is the disk (not a partition) where Limine was installed to in the previous steps.\n\n"
    },
    {
      "title": "Dracut or mkinitcpio support",
      "level": 4,
      "content": "To automate kernel integration (initramfs or UKI) with Limine, install:\n\n- limine-dracut-supportAUR for Dracut\n\nor\n\n- limine-mkinitcpio-hookAUR for mkinitcpio\n\nBoth tools include pacman hooks for automatically handling kernel entries.\n\nNote: **or newer** When updating or reinstalling Limine, its EFI's image is automatically deployed to the ESP on UEFI system with x86_64 architecture.\n\nWhen updating or reinstalling Limine, its EFI's image is automatically deployed to the ESP on UEFI system with x86_64 architecture.\n\nThis tool requires jdk17-openjdk or newer. Check your Java version with $ archlinux-java status\n\nIf your system is using an older version, install a newer one and set it as the default by running: # archlinux-java set <java-17-openjdk or newer>\n\nConfigurations:\n\nCopy /etc/limine-entry-tool.conf to /etc/default/limine if not present.\n\n1. Edit /etc/default/limine\n\n- Set ESP_PATH to your ESP path. (or, if bootctl --print-esp-path automatically detects the ESP, you do not need to configure ESP_PATH).\n- Set KERNEL_CMDLINE[default]= with your preferred kernel parameters.\n\n- If KERNEL_CMDLINE[default]= or KERNEL_CMDLINE= is not set, the tool will first try to read from the file /etc/kernel/cmdline. If unavailable, it will fall back to reading from /proc/cmdline.\n- Optionally, KERNEL_CMDLINE[fallback]= applies to kernel entries containing the name fallback.\n- Additionally, KERNEL_CMDLINE[\"kernel name\"]= corresponds to kernel entry name in the boot menu, allowing unique kernel cmdline/parameters per kernel entry. For example, KERNEL_CMDLINE[\"linux-lts\"]= for linux-lts kernel entry.\n\n- To save ESP space, set DRACUT_FALLBACK to no to disable automatic fallback generation for initramfs or UKI.\n- If you prefer to boot with UKI, set ENABLE_UKI to yes.\n\nNote: **Advantages of UKI:** \n\n- systemd-boot or rEFInd can automatically load UKIs generated by the tool.\n- If sbctl is installed and enabled, the tool can automatically sign the UKI with your Secure Boot key when updating or installing kernel.\n\n2. Run the following command to generate an initramfs or UKI and update esp/limine.conf.\n\n```\n# limine-update\n```\n\nDepending on your initramfs generator:\n\n- For mkinitcpio: run limine-mkinitcpio instead of mkinitcpio\n\n- For dracut: run dracut-rebuild instead of dracut\n\n3. Optionally, automatically add a selected active EFI entry to Limine\n\n```\n# limine-entry-tool --scan\n```\n\nFor more configuration options, refer to limine-entry-tool README\n\n"
    },
    {
      "title": "Another initramfs tool",
      "level": 4,
      "content": "limine-entry-toolAUR has no built-in pacman hooks for kernel management.\n\n1. Edit /etc/default/limine to override any settings in /etc/limine-entry-tool.conf\n\n- Set ESP_PATH to your ESP path. (or, if bootctl --print-esp-path automatically detects the ESP, configuring ESP_PATH is not required).\n- Set KERNEL_CMDLINE[default]= with your preferred kernel parameters.\n\n- If KERNEL_CMDLINE[default]= or KERNEL_CMDLINE= is not set, the tool will first attempt to read from the file /etc/kernel/cmdline. If unavailable, it will fall back to reading from /proc/cmdline.\n- Optionally, KERNEL_CMDLINE[\"kernel name\"]= corresponds to kernel entry name in the boot menu, allowing unique kernel cmdline/parameters per kernel entry.\n\n2. Install an initramfs tool of your choice (e.g., mkinitcpio, dracut, booster, or another preferred tool).\n\n3. Write a script, such as pacman hooks to automate kernel addition and removal using the limine-entry-tool command with desired options for managing boot entries in Limine boot menu.\n\n4. Optionally, automatically add a selected active EFI entry to Limine\n\n```\n# limine-entry-tool --scan\n```\n\nFor further details, refer to limine-entry-tool README.\n\n"
    },
    {
      "title": "Snapper snapshot integration for Btrfs",
      "level": 3,
      "content": "limine-snapper-syncAUR tool provides integration between Snapper and the Limine bootloader. It is useful for:\n\n- Supports booting into selected Snapper snapshot.\n- Offers two different methods for restoring a system snapshot: rsync or btrfs.\n- After restoring a snapshot, a \"backup\" entry is added to the Limine bootloader, providing an easy way to revert to the \"backup\" if needed.\n- Automatically repairs corrupted bootable files from old snapshots on the ESP when a new snapshot with the same bootable files is created.\n- Automatically logs error messages about potential hardware issues if two hashes of the same bootable file do not match on the ESP.\n- Testing read-only snapshots: Use overlayfs to test any installed packages on an immutable-like system without modifying the original data. Note that this does not mean testing the boot partition or a separate home subvolume/partition.\n\nNote: **Enable OverlayFS** For dracut, OverlayFS works out of the box in limine-dracut-supportAUR.\n\nFor dracut, OverlayFS works out of the box in limine-dracut-supportAUR.\n\nFor mkinitcpio, manually add the btrfs-overlayfs hook, which is provided by limine-mkinitcpio-hookAUR. Do not enable the systemd hook - it is incompatible with btrfs-overlayfs .\n\n"
    },
    {
      "title": "Configurations",
      "level": 4,
      "content": "Note: **2 GiB** It is recommended to have an ESP size of more than 2 GiB, depending on how many bootable snapshots and different kernel versions you wish to install.\n\nIt is recommended to have an ESP size of more than 2 GiB, depending on how many bootable snapshots and different kernel versions you wish to install.\n\nThis tool requires jdk17-openjdk or newer. Check your Java version with $ archlinux-java status\n\nIf your system is using an older version, install a newer one and set it as the default by running: # archlinux-java set <java-17-openjdk or newer>\n\nNote: **Automatic boot configuration** Use limine-dracut-support or limine-mkinitcpio-hook (see #Dracut or mkinitcpio support) to automatically udate kernel boot entries in esp/limine.conf whenever kernels are installed, updated, or removed. This allows you to skip the first step below.\n\nUse limine-dracut-support or limine-mkinitcpio-hook (see #Dracut or mkinitcpio support) to automatically udate kernel boot entries in esp/limine.conf whenever kernels are installed, updated, or removed. This allows you to skip the first step below.\n\n1. Configure esp/limine.conf to include either the //Snapshots or /Snapshots keyword for auto-generated snapshot entries.\n\nAn example:\n\n```\nlimine.conf\n```\n\n```\n/+Arch Linux\ncomment: Any comment\ncomment: machine-id=yyyyyyyyyyyyyyyyyy\n\n    //Linux\n    protocol: linux\n    path: boot():/vmlinuz-linux\n    cmdline: root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw rootflags=subvol=/@\n    module_path: boot():/initramfs-linux.img\n    \n    //Snapshots\n```\n\nNote: Including the machine-ID from /etc/machine-id is optional but very helpful for automatic identification. Renaming the boot entry or OS name doesn't matter.\n\nIncluding the machine-ID from /etc/machine-id is optional but very helpful for automatic identification. Renaming the boot entry or OS name doesn't matter.\n\nBootable files must be placed in the same ESP as limine.conf, as only the boot(): function is supported.\n\n2. Copy any configurations from /etc/limine-snapper-sync.conf to /etc/default/limine if they are not already present.\n\nEdit /etc/default/limine, which will override /etc/limine-snapper-sync.conf:\n\n- Set ESP_PATH to your ESP path (or, if bootctl --print-esp-path automatically detects the ESP, configuring ESP_PATH is not required).\n- Set MAX_SNAPSHOT_ENTRIES to limit the number of snapshot entries. The default is 8.\n- Set LIMIT_USAGE_PERCENT to stop creating new snapshot entries when the limit of ESP usage is exceeded. The default is 80.\n\n- If using custom Snapper layout, make sure to configure the following: Specify ROOT_SUBVOLUME_PATH for the path to your root subvolume. The default is /@ in most cases. Specify ROOT_SNAPSHOTS_PATH for the path to your root snapshots. The default is /@/.snapshots, which is the standard Snapper layout for the root subvolume /@.\n\n- Specify ROOT_SUBVOLUME_PATH for the path to your root subvolume. The default is /@ in most cases.\n- Specify ROOT_SNAPSHOTS_PATH for the path to your root snapshots. The default is /@/.snapshots, which is the standard Snapper layout for the root subvolume /@.\n\n3. Run the command to check if it succeeds or shows an error message:\n\n```\n# limine-snapper-sync\n```\n\nNote: This error can be safely ignored if you do not use them. Alternatively, to prevent this error, edit /etc/limine-snapper-sync.conf to remove COMMANDS_BEFORE_SAVE=\"limine-reset-enroll\" and COMMANDS_AFTER_SAVE=\"limine-enroll-config\"\n\nThis error can be safely ignored if you do not use them. Alternatively, to prevent this error, edit /etc/limine-snapper-sync.conf to remove COMMANDS_BEFORE_SAVE=\"limine-reset-enroll\" and COMMANDS_AFTER_SAVE=\"limine-enroll-config\"\n\n4. If everything works, then enable limine-snapper-sync.service to automatically synchronize boot entries with the Snapper snapshot list.\n\n```\n# systemctl enable --now limine-snapper-sync.service\n```\n\n5. Optionally, install snap-pac. It triggers Snapper to create snapshots during system updates, which limine-snapper-sync then synchronizes to generate related snapshot entries in Limine.\n\nFor further details and additional configuration options, refer to limine-snapper-sync README.\n\n"
    },
    {
      "title": "Commands",
      "level": 4,
      "content": "- limine-snapper-sync synchronizes Limine snapshot entries with the Snapper list.\n- limine-snapper-list displays the current Limine snapshot entries.\n- limine-snapper-info provides detailed information about versions, the total number of bootable snapshots, and verifies bootable files.\n- limine-snapper-restore restores your system, including matching kernel versions, from a selected bootable snapshot.\n\n"
    },
    {
      "title": "Known limitations",
      "level": 4,
      "content": "- Supports only any Snapper layouts, not arbitrary Btrfs layouts without Snapper.\n- Cannot generate bootable snapshot entries for old snapshots created before the tool was installed, as these snapshots typically no longer have their corresponding kernel versions.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Limine's website\n- Limine's GitHub repository\n\n"
    }
  ]
}