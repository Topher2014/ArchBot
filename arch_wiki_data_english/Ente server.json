{
  "title": "Ente server",
  "url": "https://wiki.archlinux.org/title/Ente_server",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- AppArmor\n- Certbot\n- MinIO\n- Nginx\n- PostgreSQL\n\nEnte server is the server part that stores and serves encrypted blobs of data to ente (mobile) clients. The clients send/receive encrypted data, which then arrives at the Ente server and is stored/read via the local MinIO object storage service.\n\nFor example when the Ente photos client is used, the client encrypts the photos, which are then stored on this server. Later on the client can then lookup the encrypted photos, and decrypt them locally (end-to-end encryption). Since only the client, or anyone the client shares the photos with, have the encryption key, only they can decrypt the data and actually see the photos, the server will never be able to do this due to the lack of that key material.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "The ente-server-gitAUR package is meant for self hosting in contrary to the by default provided dockerized Ente server. If a dockerized or hosted solution is required, see ente.io.\n\nStart by installing the ente-server-gitAUR package.\n\nNote that since self hosted server space is often available in limited quantity, the ente-server-gitAUR package added the ability to change the cleanup delay cleanup before old unlinked ente-server MinIO objects will be actually deleted. This can be configured via the internal:delete-object-delay ente-server configuration parameter. The default upstream Ente server cleans these objects every 45 days by default, but when replication is not required, this setting can be set to cleanup every 5 minutes for example.\n\nNote: **NOT** \n\nTo get the Ente server running a working PostgreSQL database (to store Ente object meta data and user data) and MinIO bucket (to store encrypted object data) is required. Furthermore, a HTTPS proxy like Nginx is recommended to be used to access the Ente server. Lastly, the ente-cli tool can be used to easily upgrade ente-server account size limit and account expiry.\n\nThese required components are listed as optional dependencies and should preferably be installed as dependencies: Pacman#Installation reason\n\n"
    },
    {
      "title": "MinIO setup",
      "level": 3,
      "content": "Edit the configuration file as follows:\n\n```\n/etc/minio/minio.conf\n```\n\n```\nMINIO_VOLUMES=\"/srv/minio/data\"\nMINIO_ROOT_USER=minio\nMINIO_ROOT_PASSWORD='YOUR-STRONG-MINIO-ROOT-PASSWORD'\nMINIO_OPTS=\"--address 127.0.0.1:43200 --console-address 127.0.0.1:43201\"\n```\n\nEnable/start minio.service.\n\nCreate MinIO ente-server bucket with the mcli command (as the minio user):\n\n```\n# cd /srv/minio/data\n[minio]$ mcli mb -p ente-server\n```\n\n"
    },
    {
      "title": "PostgreSQL setup",
      "level": 3,
      "content": "Initialize the database as the postgres user:\n\n```\n[postgres]$ initdb --locale en_US.UTF-8 -D '/var/lib/postgres/data' --data-checksums --auth=scram-sha-256 --pwprompt -c listen_addresses=''\n```\n\nPostgreSQL#Configure PostgreSQL to be accessible exclusively through UNIX Sockets, in case of an existing PostgreSQL setup:\n\n```\n/var/lib/postgres/data/postgresql.conf\n```\n\n```\nlisten_addresses = '' # AF_UNIX Socket only\n```\n\nRestrict socket access to PostgreSQL user or group by editing postgresql.service:\n\n```\n[Service]\nRuntimeDirectoryMode=750\n```\n\nAdd ente to the postgres user group, then start/enablepostgresql.service.\n\nCreate PostgreSQL database user and a database owned by this user (specify new password twice, then specify postgres password to store new account):\n\n```\n[postgres]$ createuser -P ente\n```\n\nThen specify postgres password to create new database:\n\n```\n[postgres]$ createdb -T template0 -O ente -E unicode ente-server\n```\n\n"
    },
    {
      "title": "Running ente-server",
      "level": 3,
      "content": "Add MinIO bucket details:\n\n```\n/etc/ente-server/local.yaml\n```\n\n```\nb2-eu-cen:\n    key: minio\n    secret: \"YOUR-STRONG-MINIO-ROOT-PASSWORD\"\n    endpoint: https://your_public_domain.tld:3200\n    region: eu-central-2\n    bucket: ente-server\n```\n\nAdd PostgreSQL details:\n\n```\n/etc/ente-server/local.yaml\n```\n\n```\ndb:\n    host: /run/postgresql\n    port: 5432\n    name: ente-server\n    user: ente\n    password: \"YOUR-STRONG-ENTE-DATABASE-USER-PASSWORD\"\n```\n\nGenerate new secret key values using the ente-server-gen-random-keys command and use these values as a replacement of the default values in the /etc/ente-server/local.yaml configuration file.\n\nEdit ente-server.service to allow it to access to the IP address of your_public_domain.tld (by default the service only allows access from and to localhost):\n\n```\n[Service]\nIPAddressAllow=IP_address_of_your_public_domain.tld\n```\n\nEnable/start ente-server.service.\n\n"
    },
    {
      "title": "Configuring Nginx proxy",
      "level": 3,
      "content": "Copy the example MinIO and Ente server Nginx config and the accompanying HTTP(S) security header config files to the Nginx configuration directory:\n\n```\n# cp -v /usr/lib/ente-server/ente-server-nginx.conf /etc/nginx/\n# cp -v /usr/lib/ente-server/http*security_headers.conf /etc/nginx/\n# cp -v /usr/lib/ente-server/minio-server-nginx.conf /etc/nginx/\n```\n\nEdit this example config, and replace your_public_domain.tld with your actual public domain name\n\nRequest a letsencrypt ceritifacte (or a SSL certificate from another provider) if not already done so:\n\n```\n# certbot certonly --email your_email --agree-tos --preferred-challenge http --webroot -w /var/lib/letsencrypt -d your_public_domain.tld\n```\n\nAppend an include statement to the Nginx http config to include the ente-server config:\n\n```\n/etc/nginx/nginx.conf\n```\n\n```\nhttp {\n    include /etc/nginx/ente-server-nginx.conf\n}\n```\n\nFix permissions:\n\n```\n# chmod 644 /etc/nginx/ente-server-nginx.conf\n# chmod 644 /etc/nginx/http*security_headers.conf\n```\n\nRestart nginx.service to apply the changes.\n\n"
    },
    {
      "title": "Configuring ente-server and ente-cli",
      "level": 3,
      "content": "Install ente-cli on the client with the ente-cli-binAUR package.\n\nAdd the ente-cli configuration on the client:\n\n```\n$ mkdir -p ~/.ente/export\n```\n\n```\n~/.ente/config.yaml\n```\n\n```\nendpoint:\n  api: \"https://your_public_domain.tld\" >\n```\n\nAdd a user account via the Ente photos mobile, desktop or web app on the client, using a custom endpoint.\n\nIn the photos mobile app, click 7 times on the main screen to enable developers mode, then define your custom Ente server API endpoint:\n\n```\nURL: https://your_public_domain.tld\n```\n\nIn the web app on the client:\n\n```\n$ git clone https://github.com/ente-io/ente.git\n$ cd ente/web\n$ git submodule update --init --recursive\n$ yarn install\n$ NEXT_PUBLIC_ENTE_ENDPOINT=https://your_public_domain.tld yarn dev:photos\n```\n\nWhen using the desktop app using the ente-desktop-gitAUR package, make sure you export the NEXT_PUBLIC_ENTE_ENDPOINT environment variable before building.\n\nFollow the photos mobile, desktop or web app (http://localhost:3000) instructions to create a new user.\n\nObtain the OTP code:\n\n- Via email: Configure the smtp section in /etc/ente-server/local.yaml Make sure the configured smtp(1) server is working Wait for the mail to arrive and copy the OTP code\n- Via the ente-server log:\n\n- Configure the smtp section in /etc/ente-server/local.yaml\n- Make sure the configured smtp(1) server is working\n- Wait for the mail to arrive and copy the OTP code\n\n```\n# journalctl -au ente-server | grep SendEmailOTT | tail -n 1\n```\n\nObtain the new users account ID:\n\n```\n# psql -U ente ente-server -c 'select user_id from users order by user_id desc limit 1;'\n```\n\nConfigure this user as the admin:\n\n```\n/etc/ente-server/local.yaml\n```\n\n```\ninternal:\n     admin: [ADD_USER_ID_HERE]\n```\n\nRestart ente-server.service to activate the new admin privileges.\n\nConfigure this admin within ente-cli on the client:\n\n```\n$ ente account add\nphotos\n~/.ente/export\nemail_address_of_admin_account\npassword_of_admin_account\n```\n\n"
    },
    {
      "title": "Increasing user storage and account expiry limit",
      "level": 3,
      "content": "Use ente-cli to increase storage limit with 100 TB and expiry with 100 years:\n\n```\n$ ente admin update-subscription -u \"user@domain.tld\"\n```\n\n"
    },
    {
      "title": "(Optional) Copy and apply AppArmor profile",
      "level": 3,
      "content": "An AppArmor profile has been provided for those that wish to limit the access the ente-server binary has using AppArmor. Copy and apply this profile as follows (assuming that AppArmor has already been installed and enabled):\n\n```\n# install -Dvm600 -o root -g root /usr/lib/ente-server/usr.bin.ente-server -t /etc/apparmor.d/\n # aa-enforce /usr/bin/ente-server\n```\n\n"
    },
    {
      "title": "(Optional) Configure Firewall",
      "level": 3,
      "content": "If a host firewall like iptables or nftables has been enabled and configured, make sure the following is allowed:\n\n- Traffic on localhost\n- Traffic from your Ente (mobile) client to TCP port 443 to reach the Ente server via Nginx\n- Traffic from your Ente (mobile) client to TCP port 3200 to reach the MinIO server via Nginx\n\n"
    },
    {
      "title": "Files",
      "level": 2,
      "content": "The ente-server-gitAUR package contains the ente-server(1) man page that lists and explains all files that are installed by this package.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Upstream Repository: ente.io Ente Server Repository\n\n"
    }
  ]
}