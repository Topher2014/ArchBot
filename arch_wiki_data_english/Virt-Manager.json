{
  "title": "Virt-Manager",
  "url": "https://wiki.archlinux.org/title/Virt-Manager",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nVirt-Manager is a graphical user front end for the Libvirt library which provides virtual machine management services. Virt-manager interface makes it easy for the user to create, delete and manipulate virtual machines without going through the terminal.\n\nVirt-manager mainly supports KVM but it can work with other hypervisors, such as Xen and LXC.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "First follow the page for either Libvirt or Linux Containers and ensure you can create virtual machines then Install the virt-manager package. Install QEMU if needed.\n\nTo use an LXC connection enable/start the libvirtd.service unit.\n\nTo use a QEMU connection enable/start the libvirtd.socket unit.\n\nYou can check the unit status to make sure the service is running.\n\n"
    },
    {
      "title": "Basic configuration",
      "level": 3,
      "content": "Add yourself to the libvirt user group.\n\nIt is also a good idea to ensure that any files/folders outside of Virt-managers default pool are owned by the libvirt-qemu group, otherwise you might encounter permission errors when accessing files outside of the default pool.\n\n```\n# chown \"$USER\":libvirt-qemu /path/to/vm/folder\n```\n\n"
    },
    {
      "title": "Non root KVM without Socket",
      "level": 3,
      "content": "To use as a normal user without root we need to configure KVM, this will also enable the libvirt networking components.\n\nSet the UNIX domain socket ownership to libvirt and the UNIX socket permission to read and write by changing the following:\n\n```\n/etc/libvirt/libvirtd.conf\n```\n\n```\n...\nunix_sock_group = 'libvirt'\n...\nunix_sock_rw_perms = '0770'\n...\n```\n\nAdd your user to the libvirt user group.\n\nAdd your user to /etc/libvirt/qemu.conf. Otherwise, QEMU will give a permission denied error when trying to access local drives.\n\nSearch for user = \"libvirt-qemu\" or group = \"libvirt-qemu\", uncomment both entries and change libvirt-qemu to your user name or ID. Once edited it should look something like below.\n\n```\n/etc/libvirt/qemu.conf\n```\n\n```\n# Some examples of valid values are:\n#\n#       user = \"qemu\"   # A user named \"qemu\"\n#       user = \"+0\"     # Super user (uid=0)\n#       user = \"100\"    # A user named \"100\" or a user with uid=100\n#\nuser = \"username\"\n\n# The group for QEMU processes run by the system instance. It can be\n# specified in a similar way to user.\ngroup = \"username\"\n```\n\nUpon opening Virt-Manager, it will default to the system variant (root) of the QEMU connection.\n\nThis can be changed to the user connection by going to: File > Add Connection.\n\nNow select QEMU/KVM User session as the Hypervisor and click OK. This will now auto-connect to the user session. You can now disconnect and remove the system connection if desired.\n\n"
    },
    {
      "title": "Networking",
      "level": 2,
      "content": "Note: **user session** \n\n- The virt-manager article focuses on using virt-manager and libvirt in user session, which has limited networking capabilities (see libvirt FAQ for details). There are more networking possibilities when using the system variant (root).\n- Also look at libvirt in case of networking issues.\n\nTo use a network bridge in user session it has to be setup in libvirt system administration first.\n\nFor this the libvirt daemon must be running.\n\nWhen it is started successfully, the system variant (root) of the QEMU connection can be opened in virt-manager. Setup the bridge with the desired settings in the networking tab there.\n\nTo be able to use the bridge in a user session virtual machine, setup the qemu-bridge-helper according to your bridge setup .\n\nAfter that the bridge can be used at a virtual network that runs in virt-manager user session.\n\n"
    },
    {
      "title": "3D acceleration",
      "level": 2,
      "content": "virtio is a paravirtual 3D graphics driver. To enable basic 3D acceleration:\n\n1. Go to a virtual machine's setting page.\n1. Click on the \"Add Hardware\" button > Video > select the \"Model\" as \"Virtio\". Then remove any other \"Video\" virtual hardware (within the sidebar).\n1. Go to \"Display Spice\" and set \"Listen Type\" to \"None\". Also tick the \"OpenGL\" checkbox and select the appropriate renderer.\n1. Click on \"Video Virtio\" and tick \"3D Acceleration\".\n\nYou can use glxgears from the mesa-utils package to test the 3D graphics. glxgears -info displays OpenGL renderer info in the console.\n\n"
    },
    {
      "title": "Guest utils",
      "level": 2,
      "content": "- Spice drivers (graphics)\n- VirtIO windows drivers\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Project homepage\n- Project github repo\n\n"
    }
  ]
}