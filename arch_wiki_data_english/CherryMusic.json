{
  "title": "CherryMusic",
  "url": "https://wiki.archlinux.org/title/CherryMusic",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "CherryMusic is a web application that lets you remotely stream, browse and manage your music collection. It is intended to be an alternative to streaming services like Last.fm, Spotify and Grooveshark.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the cherrymusicAUR package, or cherrymusic-devel-gitAUR for the development version.\n\n"
    },
    {
      "title": "Optional dependencies",
      "level": 3,
      "content": "- Live transcoding: lame, vorbis-tools, flac, faad2, mpg123, opus-tools or ffmpeg (which replaces the aforementioned codecs plus adds WMA decoding)\n- Automatic image resizing on displayed cover art: imagemagick\n- Special character search terms: python-unidecode\n- GTK system tray icon: python-gobject\n\n"
    },
    {
      "title": "Quick start",
      "level": 3,
      "content": "To just get it up and running with a basic setup, issue:\n\n```\n$ cherrymusic --setup --port 8080\n```\n\nand open the address \"localhost:8080\" in your browser:\n\n```\n$ browser localhost:8080\n```\n\nThis will let you configure the most important options from within the browser and you can set up the admin account.\n\nIf you want CherryMusic to run as a system service and to automatically start on boot, see #Systemd service file.\n\n"
    },
    {
      "title": "Manual setup",
      "level": 3,
      "content": "Start CherryMusic for the initial setup:\n\n```\n$ cherrymusic\n```\n\nOn first startup CherryMusic will create its data and configuration files in ~/.local/share/cherrymusic/ and ~/.config/cherrymusic/, print a note to stdout and exit. Now, edit the configuration file in ~/.config/cherrymusic/cherrymusic.confand change the following lines to match your setup:\n\n```\n~/.config/cherrymusic/cherrymusic.conf\n```\n\n```\n[...]\nbasedir = /path/to/your/music\n[...]\nport = 8080\n[...]\n```\n\nOpen the address http://localhost:8080 in your browser to create an admin account.\n\nAfter logging in, populate the search database by clicking Update Music Library in the Admin panel.\n\nIf you want CherryMusic to run as a system service and to automatically start on boot, see #Systemd service file.\n\nThere are many more options to configure, please see this section.\n\n"
    },
    {
      "title": "Fine tuning",
      "level": 3,
      "content": "See the man pages cherrymusic and cherrymusic.conf.\n\n"
    },
    {
      "title": "Symlinks in \"basedir\"",
      "level": 3,
      "content": "Note: **and** \n\nProbably, the most modular and flexible way of populating CherryMusic's music directory (called \"basedir\") is to create a dedicated directory and only symlink all paths to your music collections into that directory, e.g.:\n\n```\n$ mkdir ~/.local/share/cherrymusic/basedir\n$ ln -s /path/to/musicdir1 ~/.local/share/cherrymusic/basedir/musicdir1\n$ ln -s /path/to/musicdir2 ~/.local/share/cherrymusic/basedir/musicdir2\n```\n\n"
    },
    {
      "title": "Systemd service file",
      "level": 3,
      "content": "CherryMusic does not come with a daemon yet, but both CherryMusic AUR packages provide a systemd service file. It can be started as cherrymusic@user.service, where user is the user that should run CherryMusic (do not use root!).\n\n"
    },
    {
      "title": "Running in a GNU Screen session",
      "level": 3,
      "content": "To keep CherryMusic running after logout, it can be run in a GNU Screen session.\n\n```\n$ screen -d -m -S cherrymusic cherrymusic\n```\n\nSince CherryMusic only writes the output to the GNU Screen session, there is nothing to control from within the session. It may be more convenient to use a systemd service file. However, this may still be useful for debugging.\n\nTo run it in a GNU Screen session after boot, the following systemd service file can also be created and used:\n\n```\n/etc/systemd/system/cherrymusic@.service\n```\n\n```\n[Unit]\nDescription = CherryMusic server\nRequires = network.target\nAfter = network.target\n\n[Service]\nUser = %I\nType = simple\nExecStart = /usr/bin/screen -d -m -S cherrymusic /usr/bin/cherrymusic\nExecStop = /usr/bin/screen -X -S cherrymusic quit\nStandardOutput = null\nPrivateTmp = true\nRestart = always\n\n[Install]\nWantedBy = multi-user.target\n```\n\nTo finally enable and start the service, see #Systemd service file.\n\n"
    },
    {
      "title": "Manually adjust the search parameters of the search algorithm",
      "level": 3,
      "content": "The search parameters of the search algorithm can be adjusted manually via the file cherrymusicserver/tweak.py within your CherryMusic installation.\n\n"
    },
    {
      "title": "Bind CherryMusic to ports less than 1024 (without root access)",
      "level": 3,
      "content": "To bind CherryMusic (or any other application) to a port less than 1024 you normally need root access. However, you should never run CherryMusic as root! There are several ways around this:\n\n- Use a firewall (iptables or similar) for a port redirect\n- Use authbind\n- Use Capabilities (more exactly setcap)\n\nFor more information, see these references:\n\nhttps://serverfault.com/questions/268099/bind-to-ports-less-than-1024-without-root-access https://www.debian-administration.org/article/386/Running_network_services_as_a_non-root_user https://stackoverflow.com/questions/413807/is-there-a-way-for-non-root-processes-to-bind-to-privileged-ports-1024-on-l\n\n"
    },
    {
      "title": "Missing module wsgiserver2 when using pip for installation",
      "level": 3,
      "content": "If the error\n\n```\nImportError: No module named wsgiserver2\n```\n\noccurs when starting CherryMusic, probably a broken CherryPy package from pip (versions `3.2.6` and `3.4.0` seem to be affected) is used. Here is a description of the problem. To fix this, uninstall CherryPy and reinstall:\n\n```\n$ pip uninstall cherrypy\n$ pip install --no-use-wheel cherrypy\n```\n\n"
    },
    {
      "title": "Deactivate flash blocker",
      "level": 3,
      "content": "An active flash blocker can interfere with the web frontend. If you have trouble with things like track selection or playback, try whitelisting the server in your browser's flash blocker/plugin manager.\n\n"
    },
    {
      "title": "CherryMusic does not load on Android Chrome",
      "level": 3,
      "content": "This might be due to AdBlock Plus being installed in the browser. CM does not feature any ads, so the problem is caused by this plug-in.\n\n"
    },
    {
      "title": "Track scrolling not working behind Nginx",
      "level": 3,
      "content": "If track scrolling is not working in major desktop browsers behind Nginx and playback stops in the middle of the track and start over from the beginning, the Nginx module ngx_http_proxy_module has to be configured.\n\nChange the line proxy_http_version 1.0; to:\n\n```\nngx_http_proxy_module\n```\n\n```\n[...]\nproxy_http_version 1.1;\n[...]\n```\n\n"
    },
    {
      "title": "No startup after unclean shutdown",
      "level": 3,
      "content": "When the CherryMusic service does not get stopped in a clean way, a cherrymusic.pid file is left around. This causes the CherryMusic service to abort when it tries to create a new PID file on start. To address this problem, a systemd drop-in file like the following can be created:\n\n```\n/etc/systemd/system/cherrymusic@cherrymusic.service.d/override.conf\n```\n\n```\n[Service]\nExecStartPre=/usr/bin/rm -f /path/to/cherrymusic.pid\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- GitHub repository\n- https://github.com/devsnd/cherrymusic/wiki/Setup-guide\n\n"
    }
  ]
}