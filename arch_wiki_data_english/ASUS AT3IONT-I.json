{
  "title": "ASUS AT3IONT-I",
  "url": "https://wiki.archlinux.org/title/ASUS_AT3IONT-I",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nThis page describes the steps necessary to get all of the features of the ASUS AT3IONT-I working correctly. It assumes you already successfully installed Arch Linux and installed the basic software (ALSA for audio, wireless_tools and wpa_supplicant packages for wireless in the Deluxe edition, etc.)\n\n"
    },
    {
      "title": "ALSA",
      "level": 3,
      "content": "Many ION boards exhibit problems when trying to play sound through HDMI. They usually require a custom ALSA configuration via /etc/asound.conf (or, alternatively, on a per-user basis via ~/.asound.conf).\n\n```\n/etc/asound.conf\n```\n\n```\n# Needed in order to get sound over HDMI to function\n\n#$ aplay -l\n# **** List of PLAYBACK Hardware Devices ****\n# card 0: NVidia [HDA NVidia], device 0: ALC887 Analog [ALC887 Analog]\n#   Subdevices: 1/1\n#   Subdevice #0: subdevice #0\n# card 0: NVidia [HDA NVidia], device 1: ALC887 Digital [ALC887 Digital]\n#   Subdevices: 1/1\n#   Subdevice #0: subdevice #0\n# card 0: NVidia [HDA NVidia], device 3: NVIDIA HDMI [NVIDIA HDMI]\n#   Subdevices: 1/1\n#   Subdevice #0: subdevice #0\n\npcm.!default {\n  type plug\n  slave.pcm \"dmix:0,3\"\n}\n```\n\nAlso, please note that audio over HDMI currently only works in an X session (graphical environment). If you are trying to get the sound to work when running on a virtual terminal, it will not work. Please see this post on the Arch Forums.\n\n"
    },
    {
      "title": "PulseAudio",
      "level": 3,
      "content": "If you are loathe to mess with your PulseAudio settings in asound.conf, it might be enough to just unmute the S/PDIF 1 channel in alsamixer. It is hidden, as you need to press F6, then select HDA NVidia and scroll to the far right before you can find it. Highlight it, and then press M to unmute.\n\n"
    },
    {
      "title": "Deluxe Edition",
      "level": 2,
      "content": "The deluxe edition comes with a few extra goodies, such as DC power on-board, mini-PCI WiFi, RCA stereo output, on-board Bluetooth, and an included IR Remote.\n\n"
    },
    {
      "title": "Bluetooth",
      "level": 3,
      "content": "The Bluetooth chip is an Atheros with a device ID of 0cf3:3002. It uses the ath3k driver which has been included in the kernel since ~2.6.33 and works out of the box with the default Arch kernel.\n\n"
    },
    {
      "title": "Wireless",
      "level": 3,
      "content": "The wireless chipset is an Atheros AR9285.\n\n```\n$ lspci | grep Net\n```\n\n```\n05:00.0 Network controller: Atheros Communications Inc. AR9285 Wireless Network Adapter (PCI-Express) (rev 01)\n```\n\nIt uses the ath9k driver, which has been included in the default kernel since 2.6.27. In other words, udev should load the driver without problems -- there should be no extra configuration to get wireless working on the ASUS AT3IONT-I.\n\n"
    },
    {
      "title": "RCA Stereo Output",
      "level": 3,
      "content": "Untested.\n\n"
    },
    {
      "title": "Remote",
      "level": 3,
      "content": "The Asus remote has limited functionality out of the box. Everything except the eight 'special' media buttons at the bottom. Also, you may have to blacklist the kernals mceusb module since is fails out. LIRC's mceusb module handles the remote better, but still does not support all the buttons on the Asus remote.\n\nSource of the following approach and module developer: user pj7 on a Ubuntu forum thread.\n\nThe included IR receiver requires a kernel module to be built to accommodate it. Apparently, it is a rather tricky little device. It seems to work best with the included remote -- it coverts the included remotes' button presses directly to keyboard keystrokes, but when using another MCE remote it reports to the system the raw code. It seems to understand other signals, but you will need a remote that sends the right signal. This results in limited functionality of the device where it can only use the included ASUS remote, a JP1 Programmable remote (to program the known signals), or a universal remote that has the ability to learn the IR signals of the ASUS remote.\n\nAs a result, this section will focus on getting the included remote working with the included receiver, based on pj7's driver.\n\nDownload the source and then extract with tar -xvf hid-philips-asus.tar. The resulting directory will include the source files, along with a Linux-to-X11 input key map. Before you build the source, you must edit mappings.h. This file maps the button presses to Linux input keys. Be aware that Linux input does not equal X11 input. Graphical programs, such as media players, Kodi, and the like, are only aware of X11 inputs, and so you must match a X11 input with a Linux input to. That's what the map_linux_to_x11.txt file is for.\n\nFor example, if you wish to define the \"Next Track\" button as \"XF86AudioNext\" (which most programs will look for to play the next item in the playlist), you will need to define BUTTON_NEXT in mappings.h as KEY_NEXTSONG rather than KEY_NEXT. This is because KEY_NEXTSONG maps to \"XF86AudioNext\" (KEY_NEXT does not register as anything).\n\nOnce you have finished mapping the buttons, run make:\n\n```\n$ make\n```\n\n```\nmake -C /lib/modules/2.6.36-ARCH/build M=/home/user/hid-philips-asus modules\nmake[1]: Entering directory `/usr/src/linux-2.6.36-ARCH'\n  CC [M]  /home/user/hid-philips-asus/hid-philips-asus.o\n  Building modules, stage 2.\n  MODPOST 1 modules\n  CC      /home/user/hid-philips-asus/hid-philips-asus.mod.o\n  LD [M]  /home/user/hid-philips-asus/hid-philips-asus.ko\nmake[1]: Leaving directory `/usr/src/linux-2.6.36-ARCH'\n```\n\nInstall the driver with make install (as root).\n\nNow we must make sure the driver loads correctly. One thing that you must do is blacklist the mceusb driver that tries to load whenever the IR Reciever is detected. Then you must make sure that the new hid-philips-asus driver loads before usbhid as usbhid will try to take over the receiver. This can all be easilly accomplished by the MODULES line in /etc/rc.conf:\n\n```\n/etc/rc.conf\n```\n\n```\nMODULES=(... hid-philips-asus usbhid ...)\n```\n\nYou have to blacklist mceusb in /etc/modprobe.d:\n\n```\n/etc/modprobe.d/modprobe.conf\n```\n\n```\nblacklist mceusb\n```\n\n(rebooting the computer might be necessary)\n\nAfter that, all the buttons on the Asus remote should work. If you find that you would rather assign different actions to button presses, it is easy to edit the mappings.h file and make && make install again. Alternatively, you may be interested in Xmodmap.\n\n"
    },
    {
      "title": "Resources",
      "level": 2,
      "content": "- ASUS AT3IONT-I deluxe on Ubuntu forums\n\n"
    }
  ]
}