{
  "title": "Prometheus",
  "url": "https://wiki.archlinux.org/title/Prometheus",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Zabbix\n- Munin\n- Grafana\n- TICK stack\n\nPrometheus is an open-source metrics collection and processing tool. It consists primarily of a timeseries database and a query language to access and process the metrics it stores. Separate services perform metric exposure, from which the Prometheus server can pull. It provides a very minimal web UI out of the box. To get a functional dashboard system, third-party tools like Grafana can be used.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the prometheus package. After that you can enable and start prometheus.service and access the application via HTTP on port 9090 by default.\n\nThe default configuration monitors the prometheus process itself, but not much beyond that. To perform system monitoring, you can install prometheus-node-exporter which performs metric scraping from the local system. You can start and enable the prometheus-node-exporter service. It will open port 9100 by default. Once the service is running, you will need to configure prometheus to scrape the exporter service periodically in order actually to collect the data. Do this by following the steps to add metrics as shown below.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The Prometheus configuration is done through YAML files, the main one being located at /etc/prometheus/prometheus.yml.\n\n"
    },
    {
      "title": "Adding metrics",
      "level": 3,
      "content": "You can add new places to scrape metrics from by adding them to the scrape_configs array. To add the local node exporter as a source, next to the prometheus process itself, the configuration would look like this:\n\n```\nscrape_configs:\n   - job_name: 'prometheus'\n     static_configs:\n       - targets: ['localhost:9090']\n   - job_name: 'node'\n     static_configs:\n       - targets: ['localhost:9100']\n```\n\n"
    },
    {
      "title": "Exporters",
      "level": 2,
      "content": "The Arch Linux repository contains a subset of the available exporters:\n\n- prometheus-node-exporter - system metrics\n- prometheus-blackbox-exporter - blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP and ICMP\n- prometheus-memcached-exporter - memcached metrics\n- prometheus-mysqld-exporter – MySQL server metrics\n\nThe exporters are implemented as services. For example to run the node exporter, enable and start prometheus-node-exporter.service.\n\n"
    },
    {
      "title": "Using the UI",
      "level": 2,
      "content": "Prometheus comes with a very limited web UI to verify configuration, query and graph metrics. You can reach it at http://localhost:9090 by default. You can find an in-depth explanation of Prometheus' query language in the Prometheus documentation.\n\n"
    },
    {
      "title": "Alerting",
      "level": 2,
      "content": "alertmanager can send out custom alerts when certain conditions are met configured in /etc/prometheus/alert.rules.yml and what alert to send out is configured in /etc/alertmanager/alertmanager.yml. Alertmanager supports various ways to notify users such as email, slack, and more. To configure email alerts add the following snippet:\n\n```\nglobal:\n  resolve_timeout: 5m\n  smtp_smarthost: 'smtp.example.com:25'\n  smtp_from: 'alertmanager@example.com'\nroute:\n  group_by: ['instance', 'severity']\n  group_wait: 30s\n  group_interval: 5m\n  repeat_interval: 3h\n  receiver: team-1\nreceivers:\n  - name: 'team-1'\n    email_configs:\n      - to: 'admin@example.com'\n```\n\nFor prometheus to send alerts to alertmanager include the following snippet in /etc/prometheus/prometheus.yml:\n\n```\nalerting:\n  alertmanagers:\n  - static_configs:\n    - targets:\n      - localhost:9093\n```\n\nTo configure an alert for when a systemd unit fails add the following snippet to /etc/prometheus/alert.rules.yml. For more rules read the alerting rules documentation.\n\n```\n- name: systemd_unit\n  interval: 15s\n  rules:\n  - alert: systemd_unit_failed\n    expr: |\n      node_systemd_unit_state{state=\"failed\"} > 0\n    for: 3m\n    labels:\n      severity: critical\n    annotations:\n      description: 'Instance : Service failed'\n      summary: 'Systemd unit failed'\n```\n\n"
    },
    {
      "title": "Telegraf instead of exporters",
      "level": 3,
      "content": "Telegraf can be used instead of multiple exporters when used with Prometheus Output Plugin. This reduces metrics collection into a single binary and offers more flexible configuration when compared to standard Prometheus exporters.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official homepage\n\n"
    }
  ]
}