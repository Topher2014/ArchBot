{
  "title": "Wake-on-LAN",
  "url": "https://wiki.archlinux.org/title/Wake-on-LAN",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Wakeup triggers\n\nWake-on-LAN (WoL) is a feature to switch on a computer via the network.\n\n"
    },
    {
      "title": "Hardware settings",
      "level": 2,
      "content": "Wake-On-LAN only works if you fulfill the following preconditions:\n\n1. The target computer's motherboard and Network Interface Controller has to support Wake-on-LAN.\n1. The target computer has to be physically connected (with a cable) to a router or to the source computer for WoL to work properly unless your wireless card has support for Wake on Wireless (WoWLAN or WoW).\n\nYou have to prepare the following in your BIOS/UEFI:\n\n1. Enable the Wake-on-LAN feature. Different motherboard manufacturers use slightly different language for this feature. Look for terminology such as \"PCI Power up\", \"Allow PCI wake up event\" or \"Boot from PCI/PCI-E\".\n1. (If available in BIOS/UEFI) Make sure that ErP is disabled, otherwise your Ethernet card will not be powered and will not be able to receive any wake-up packets sent from another device.\n\n- Some motherboards support Wake-on-LAN from a powered-off state, but some only support Wake-on-LAN from a sleep / suspended state.\n- Some motherboards are affected by a bug that can cause immediate or random #Wake-up after shutdown whenever the BIOS WoL feature is enabled.\n\n"
    },
    {
      "title": "Enable WoL on the network adapter",
      "level": 3,
      "content": "Depending on the hardware, the network driver may have WoL switched off by default.\n\nTo query this status or to change the settings, install ethtool, determine the name of the network interface, and query it using the command:\n\n```\n# ethtool interface | grep Wake-on\n```\n\n```\nSupports Wake-on: pumbag\nWake-on: d\n```\n\nThe Wake-on values define what activity triggers wake up: d (disabled), p (PHY activity), u (unicast activity), m (multicast activity), b (broadcast activity), a (ARP activity), and g (magic packet activity). The value g is required for WoL to work, if not, the following command enables the WoL feature in the driver:\n\n```\n# ethtool -s interface wol g\n```\n\nThis command might not last beyond the next reboot and in this case must be repeated via some mechanism. Common solutions are listed in the following subsections.\n\n"
    },
    {
      "title": "systemd.link",
      "level": 4,
      "content": "Link-level configuration is possible through systemd.link files. The actual setup is performed by the net_setup_link udev builtin. Add the WakeOnLan option to the network link file:\n\n```\n/etc/systemd/network/50-wired.link\n```\n\n```\n[Match]\nMACAddress=aa:bb:cc:dd:ee:ff\n\n[Link]\nNamePolicy=kernel database onboard slot path\nMACAddressPolicy=persistent\nWakeOnLan=magic\n```\n\nAlso see systemd.link(5) for more information.\n\n- Only the first matching file is applied. The content of the default link file /usr/lib/systemd/network/99-default.link shipped with systemd has to be included, otherwise the interface might be misconfigured.\n- To be considered, the file name should alphabetically come before the default 99-default.link. For example 50-wired.link works.\n- This configuration applies only to the link-level, and is independent of network-level daemons such as NetworkManager or systemd-networkd.\n- In the Match section, OriginalName= can also be used to identify the interface.\n\n"
    },
    {
      "title": "systemd service",
      "level": 4,
      "content": "This is an equivalent of previous systemd.link option, but uses a standalone systemd service.\n\n```\n/etc/systemd/system/wol@.service\n```\n\n```\n[Unit]\nDescription=Wake-on-LAN for %i\nRequires=network.target\nAfter=network.target\n\n[Service]\nExecStart=/usr/bin/ethtool -s %i wol g\nType=oneshot\n\n[Install]\nWantedBy=multi-user.target\n```\n\nAlternatively install the wol-systemdAUR package, then activate this new service by starting wol@interface.service.\n\n"
    },
    {
      "title": "udev",
      "level": 4,
      "content": "udev is capable of running any command as soon as a device is visible. The following rule will turn on WOL on all network interfaces whose name matches en*. The file name is important and must start with a number between 81 and 99 so that it runs after 80-net-setup-link.rules, which renames interfaces with predictable names. Otherwise, NAME would be undefined and the rule would not run.\n\n```\n/etc/udev/rules.d/81-wol.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"net\", NAME==\"en*\", RUN+=\"/usr/bin/ethtool -s $name wol g\"\n```\n\nThe $name placeholder will be replaced by the value of the NAME variable for the matched device.\n\n"
    },
    {
      "title": "cron",
      "level": 4,
      "content": "A command can be run each time the computer is (re)booted using \"@reboot\" in a crontab. First, make sure cron is enabled, and then edit a crontab for the root user that contains the following line:\n\n```\n@reboot /usr/bin/ethtool -s interface wol g\n```\n\n"
    },
    {
      "title": "netctl",
      "level": 4,
      "content": "If using netctl, one can make this setting persistent by adding the following the netctl profile:\n\n```\n/etc/netctl/profile\n```\n\n```\nExecUpPost='/usr/bin/ethtool -s interface wol g'\n```\n\n"
    },
    {
      "title": "NetworkManager",
      "level": 4,
      "content": "NetworkManager provides Wake-on-LAN ethernet support. One way to enable Wake-on-LAN by magic packet is through nmcli.\n\nFirst, search for the name of the wired connection:\n\n```\n# nmcli con show\n```\n\n```\nNAME    UUID                                  TYPE            DEVICE\nwired1  612e300a-c047-4adb-91e2-12ea7bfe214e  802-3-ethernet  enp0s25\n```\n\nBy following, one can view current status of Wake-on-LAN settings:\n\n```\n# nmcli c show \"wired1\" | grep 802-3-ethernet.wake-on-lan\n```\n\n```\n802-3-ethernet.wake-on-lan:             default\n802-3-ethernet.wake-on-lan-password:    --\n```\n\nEnable Wake-on-LAN by magic packet on that connection:\n\n```\n# nmcli c modify \"wired1\" 802-3-ethernet.wake-on-lan magic\n```\n\nThen reboot, possibly two times. To disable Wake-on-LAN, substitute magic with ignore.\n\nThe Wake-on-LAN settings can also be changed from the GUI using nm-connection-editor.\n\nYou can disable Wake-on-LAN for all connections permanently by adding a dedicated configuration file :\n\n```\n/etc/NetworkManager/conf.d/wake-on-lan.conf\n```\n\n```\n[connection]\nethernet.wake-on-lan = ignore\nwifi.wake-on-wlan = ignore\n```\n\n"
    },
    {
      "title": "Enable WoL in TLP",
      "level": 3,
      "content": "When using TLP for suspend/hibernate, the WOL_DISABLE setting should be set to N in /etc/tlp.conf to allow resuming the computer with WoL.\n\n"
    },
    {
      "title": "Trigger a wake up",
      "level": 2,
      "content": "To trigger WoL on a target machine, its MAC address must be known. To obtain it, execute the following command from the machine:\n\n```\n$ ip link\n```\n\n```\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default\n   link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: enp1s0: <BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP> mtu 1500 qdisc fq_codel master br0 state UP group default qlen 1000\n    link/ether 48:05:ca:09:0e:6a brd ff:ff:ff:ff:ff:ff\n```\n\nHere the MAC address is 48:05:ca:09:0e:6a.\n\nIn its simplest form, Wake-on-LAN broadcasts the magic packet as an ethernet frame, containing the MAC address within the current network subnet, below the IP protocol layer. The knowledge of an IP address for the target computer is not necessary, as it operates on layer 2 (Data Link).\n\nIf used to wake up a computer over the internet or in a different subnet, it typically relies on the router to relay the packet and broadcast it. In this scenario, the external IP address of the router must be known. Keep in mind that most routers by default will not relay subnet directed broadcasts as a safety precaution and need to be explicitly told to do so.\n\nApplications that are able to send magic packets for Wake-on-LAN:\n\n- gWakeOnLAN — GTK utility to awake turned off computers through the Wake-on-LAN feature.\n\n- wol — Implements Wake-on-LAN functionality in a small program. It wakes up hardware that is Magic Packet compliant. Note: This application will need the port changed to 9 from the default(40000) using the -p argument/flag.\n\n- wol_qt — Qt utility with integrated ARP scan to find MAC addresses and batch sending of Wake-on-LAN packets.\n\n"
    },
    {
      "title": "On the same LAN",
      "level": 3,
      "content": "If you are connected directly to another computer through a network cable, or the traffic within a LAN is not firewalled, then using Wake-on-LAN should be straightforward since there is no need to worry about port redirects.\n\nIn the simplest case the default broadcast address 255.255.255.255 is used:\n\n```\n$ wol target_MAC_address\n```\n\nTo broadcast the magic packet only to a specific subnet or host, use the -i switch:\n\n```\n$ wol -i target_IP target_MAC_address\n```\n\n"
    },
    {
      "title": "Across the internet",
      "level": 3,
      "content": "When the source and target computers are separated by a NAT router, different solution can be envisaged:\n\n- If the router supports WoL, one can rely on it to properly broadcast the packet into the local network.\n\nOtherwise Wake-on-LAN can be achieved via port forwarding. The router needs to be configured using one of these two options:\n\n- Forward a different port to each target machine. This requires any target machine to have a static IP address on its LAN.\n- Forward a single port to the broadcast address. Most routers do not allow to forward to broadcast, however if you can get shell access to your router, through telnet, ssh, serial cable or other mean, run the command: $ ip neighbor add 192.168.1.254 lladdr FF:FF:FF:FF:FF:FF dev net0 This example assumes the network is 192.168.1.0/24 and uses net0 as network interface. Now, forward UDP port 9 to 192.168.1.254. This solution was successfully tested on a Linksys WRT54G running Tomato, and on the Verizon FIOS ActionTec router. For notes on how to do it on a router with DD-WRT firmware, see this tutorial and for a router with OpenWrt firmware, see this tutorial.\n\n```\n$ ip neighbor add 192.168.1.254 lladdr FF:FF:FF:FF:FF:FF dev net0\n```\n\nIn any case, run the following command from the source computer to trigger wake-up:\n\n```\n$ wol -p forwarded_port -i router_IP target_MAC_address\n```\n\n"
    },
    {
      "title": "Check reception of the magic packets",
      "level": 3,
      "content": "In order to make sure the WoL packets reach the target computer, one can listen to the UDP port, usually port 9, for magic packets. The magic packet frame expected contains 6 bytes of FF followed by 16 repetitions of the target computer's MAC (6 bytes each) for a total of 102 bytes.\n\n"
    },
    {
      "title": "Using netcat",
      "level": 4,
      "content": "This can be performed by installing gnu-netcat on the target computer and using the following command:\n\n```\n# nc --udp --listen --local-port=9 --hexdump\n```\n\nOr, if you are using the openbsd-netcat variant:\n\n```\n# nc -u -l 9 | xxd\n```\n\nThen wait for the incoming traffic to appear in the nc terminal.\n\n"
    },
    {
      "title": "Using ngrep",
      "level": 4,
      "content": "Install ngrep on the target computer and type the following command:\n\n```\n# ngrep '\\xff{6}(.{6})\\1{15}' -x port 9\n```\n\n"
    },
    {
      "title": "Example of WoL script",
      "level": 3,
      "content": "Here is a script that illustrates the use of wol with different machines:\n\n```\n#!/bin/bash\n\n# definition of MAC addresses\nmonster=01:12:46:82:ab:4f\nghost=01:1a:d2:56:6b:e6\n\necho \"Which PC to wake?\"\necho \"m) monster\"\necho \"g) ghost\"\necho \"q) quit\"\nread input1\ncase $input1 in\n  m)\n    /usr/bin/wol $monster\n    ;;\n  g)\n    # uses wol over the internet provided that port 9 is forwarded to ghost on ghost's router\n    /usr/bin/wol --port=9 --host=ghost.mydomain.org $ghost\n    ;;\n  Q|q)\n    break\n    ;;\nesac\n```\n\n"
    },
    {
      "title": "Network adapter is still powered off on shutdown",
      "level": 4,
      "content": "Setting auto negotiation to yes may help if WOL is configured through nmcli and network adapter is still powered off on shutdown.\n\nSet it using:\n\n```\n# nmcli c modify \"wired1\" 802-3-ethernet.auto-negotiate yes\n```\n\n"
    },
    {
      "title": "Wake-up after shutdown",
      "level": 3,
      "content": "It is known that some motherboards are affected by a bug that can cause immediate or random wake-up after a shutdown whenever the BIOS WoL feature is enabled (as discussed in this thread for example).\n\n"
    },
    {
      "title": "Fix using BIOS Settings",
      "level": 4,
      "content": "The following actions in the BIOS preferences can solve this issue with some motherboards:\n\n1. Disable all references to xHCI in the USB settings (note this will also disable USB 3.0 at boot time)\n1. Disable EuP 2013 if it is explicitly an option\n1. Optionally enable wake-up on keyboard actions\n\n"
    },
    {
      "title": "Fix by kernel quirks",
      "level": 4,
      "content": "The issue can also be solved by adding the following kernel boot parameter: xhci_hcd.quirks=270336 This activates the following quirks:\n\n- XHCI_SPURIOUS_REBOOT\n- XHCI_SPURIOUS_WAKEUP\n\n"
    },
    {
      "title": "Battery draining problem",
      "level": 3,
      "content": "Some laptops have a battery draining problem after shutdown [1]. This might be caused by enabled WOL. To solve this problem, disable it by using ethtool as mentioned above.\n\n```\n# ethtool -s net0 wol d\n```\n\n"
    },
    {
      "title": "r8168",
      "level": 4,
      "content": "Users with a Realtek 8168 8169 8101 8111(C) based NICs (cards / and on-board) may notice a problem where the NIC seems to be disabled on boot and has no link light. See Network configuration/Ethernet#Realtek no link / WOL problem.\n\nIf the link light on the network switch is enabled when the computer is turned off but Wake on LAN is still not working, booting the system using the r8168AUR kernel module at least once and then switching back to the r8169 kernel module included with the kernel has been reported to fix it.\n\nFor the r8168 module you might need to set the s5wol=1 kernel module parameter to enable the wake on LAN functionality.\n\n"
    },
    {
      "title": "r8125",
      "level": 4,
      "content": "Users with a Realtek 8125 NIC have reported being unable to use the Wake on LAN feature with the r8169 kernel module. Installing r8125-dkmsAUR enables the functionality.\n\nMake sure the correct kernel driver is in use with lspci -k. If not, blacklist the r8169 module.\n\nAdditionally, it might be necessary to enable WOL support and disable power saving features of the card.\n\n```\n/etc/modprobe.d/net.conf\n```\n\n```\noptions r8125 disable_wol_support=0 s5wol=1 aspm=0\n```\n\n"
    },
    {
      "title": "alx driver support",
      "level": 3,
      "content": "For some newer Atheros-based NICs (such as Atheros AR8161 and Killer E2500), WOL support has been disabled in the mainline alx module due to a bug causing unintentional wake-up (see this patch discussion). A patch can be applied (or installed as a dkms module using the alx-wol-dkmsAUR package) which both restores WOL support and fixes the underlying bug, as outlined in this thread.\n\nSee also the pre-patched sources in [2].\n\n"
    }
  ]
}