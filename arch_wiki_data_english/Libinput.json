{
  "title": "Libinput",
  "url": "https://wiki.archlinux.org/title/Libinput",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Xorg\n- Touchpad Synaptics\n- Wayland\n\nFrom the libinput wiki page:\n\nThe X.Org input driver supports most regular input devices. Particularly notable is the project's goal to provide advanced support for touch (multitouch and gesture) features of touchpads and touchscreens. See the libinput documentation for more information.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "If you installed either Xorg or Wayland, then Libinput should already be installed as a dependency; there are no necessary extra packages.\n\n- For Wayland, the libinput package should be installed as a dependency of any graphical environment you use that has Wayland, and no additional driver is needed.\n- For Xorg, xf86-input-libinput is also a dependency. It is \"a thin wrapper around libinput and allows for libinput to be used for input devices in X. This driver can be used as as drop-in replacement for evdev and synaptics.\" [1]. It replaces other packages used for input with X (i.e., those prefixed with xf86-input-). You may want to install xorg-xinput to be able to change settings at runtime.\n\n- You may want to install xorg-xinput to be able to change settings at runtime.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "For Wayland, there is no libinput configuration file. The configurable options depend on the progress of your desktop environment's support for them (see #Graphical tools) or by applying desktop-agnostic udev rules (see Calibrating Touchscreen#Do it automatically via a udev rule and #Via Udev Rule). To configure options that your desktop environment does not yet support (e.g. touchpad scroll speed on GNOME), libinput-config-gitAUR may be used as a work-around. Available options for that tool are documented in the libinput-config README.\n\nFor Xorg, a default configuration file for the wrapper is installed to /usr/share/X11/xorg.conf.d/40-libinput.conf. No extra configuration is necessary for it to autodetect keyboards, touchpads, trackpointers and supported touchscreens.\n\n"
    },
    {
      "title": "Via xinput on Xorg",
      "level": 3,
      "content": "First, execute:\n\n```\n# libinput list-devices\n```\n\nIt will output the devices on the system and their respective features supported by libinput.\n\nAfter a restart of the graphical environment, the devices should be managed by libinput with default configuration, if no other drivers are configured to take precedence.\n\nSee libinput(4) for general options to set and information about allowable values. The xinput tool is used to view or change options available for a particular device at runtime. For example:\n\n```\n$ xinput list\n```\n\nto view all devices and determine their names and numbers. In the following, device is either the name or number identifying the device to operate with.\n\n```\n$ xinput list-props device\n```\n\nto view and\n\n```\n$ xinput set-prop device option setting\n```\n\nto change a setting. option can be either the number or the name of the option. For example, to set both options of libinput Click Method Enabled (303), either of the following can be issued:\n\n```\n$ xinput set-prop 14 303 1 1\n```\n\nor\n\n```\n$ xinput set-prop 14 \"libinput Click Method Enabled\" 1 1\n```\n\n"
    },
    {
      "title": "Via Xorg configuration file",
      "level": 3,
      "content": "See Xorg#Using .conf files for permanent option settings. Logitech Marble Mouse#libinput and #Tapping button re-mapping illustrate examples.\n\nAlternative drivers for Xorg#Input devices can generally be installed in parallel. If you intend to switch driver for a device to use libinput, ensure no legacy configuration files /etc/X11/xorg.conf.d/ for other drivers take precedence.\n\n- If you have libinput and synaptics installed in parallel with default configuration (i.e. no files in /etc/X11/xorg.conf.d for either), synaptics will take precedence due to its higher numeric order 70- in the default installation directory. To avoid this, you can symlink the default libinput configuration (40-libinput.conf) to /etc/X11/xorg.conf.d/ where directory search order precedence over 70-synaptics.conf will take place instead:\n\n```\n# ln -s /usr/share/X11/xorg.conf.d/40-libinput.conf /etc/X11/xorg.conf.d/40-libinput.conf\n```\n\n- If a configuration file seems to have no effect at all, check that it is readable by unprivileged users.\n\nOne way to check which devices are managed by libinput is the xorg logfile. For example, the following:\n\n```\n$ grep -e \"Using input driver 'libinput'\" /path/to/Xorg.0.log\n```\n\n```\n[    28.799] (II) Using input driver 'libinput' for 'Power Button'\n[    28.847] (II) Using input driver 'libinput' for 'Video Bus'\n[    28.853] (II) Using input driver 'libinput' for 'Power Button'\n[    28.860] (II) Using input driver 'libinput' for 'Sleep Button'\n[    28.872] (II) Using input driver 'libinput' for 'AT Translated Set 2 keyboard'\n[    28.878] (II) Using input driver 'libinput' for 'SynPS/2 Synaptics TouchPad'\n[    28.886] (II) Using input driver 'libinput' for 'TPPS/2 IBM TrackPoint'\n[    28.895] (II) Using input driver 'libinput' for 'ThinkPad Extra Buttons'\n```\n\nis a notebook without any configuration files in /etc/X11/xorg.conf.d/, i.e. devices are auto-detected.\n\nOf course you can elect to use an alternative driver for one device and libinput for others. A number of factors may influence which driver to use. For example, in comparison to Touchpad Synaptics the libinput driver has fewer options to customize touchpad behaviour to one's own taste, but far more programmatic logic to process multitouch events (e.g. palm detection as well). Hence, it makes sense to try the alternative, if you are experiencing problems on your hardware with one driver or the other.\n\nCustom configuration files should be placed in /etc/X11/xorg.conf.d/ and following a widely used naming schema 30-touchpad.conf is often chosen as filename.\n\nA basic configuration should have the following structure:\n\n```\n/etc/X11/xorg.conf.d/30-touchpad.conf\n```\n\n```\nSection \"InputClass\"\n    Identifier \"devname\"\n    Driver \"libinput\"\n    ...\nEndSection\n```\n\nYou may define as many sections as you like in a single configuration file (usually one per input device). To configure the device of your choice specify a filter by using one of the available filters from xorg.conf(5) ยง INPUTCLASS_SECTION, e.g.\n\n- MatchIsPointer \"on\" (trackpoint)\n- MatchIsKeyboard \"on\"\n- MatchIsTouchpad \"on\"\n- MatchIsTouchscreen \"on\"\n\nThe input device can then be configured with any of the lines of libinput(4) ยง CONFIGURATION_DETAILS. Common options include:\n\n- Option \"Tapping\" \"on\": tapping a.k.a. tap-to-click\n- Option \"ClickMethod\" \"clickfinger\": trackpad no longer has middle and right button areas and instead two-finger click is a context click and three-finger click is a middle click, see the docs.\n- Option \"NaturalScrolling\" \"true\": natural (reverse) scrolling\n- Option \"ScrollMethod\" \"edge\": edge (vertical) scrolling\n\nBear in mind that some of them may only apply to certain devices and you will need to restart X for changes to take effect.\n\n"
    },
    {
      "title": "Via Udev Rule",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThe main udev and Calibrating Touchscreen articles have more details, but to summarize:\n\n```\n# libinput list-devices\n```\n\nTake note of the Device: name and Kernel path for the relevant input device. For example this might be HID 02eb:114e at path /dev/input/event0.\n\nCreate a rule for that device. E.g. to rotate all touchscreen input by 270 degrees:\n\n```\n/etc/udev/rules.d/99-mytouchscreen-calibration.rules\n```\n\n```\n# Do a 270 degree rotation on the input\nENV{ID_USB_SERIAL}==\"02eb_114e\", ENV{LIBINPUT_CALIBRATION_MATRIX}=\"0 1 0 -1 0 1\"\n```\n\nThen, reload the rules and test to see if your device has registered the rule:\n\n```\n# udevadm info /dev/input/event0\n```\n\nYou should see your LIBINPUT_CALIBRATION_MATRIX listed there for the device.\n\nFinally, either restart your machine or restart your Wayland desktop.\n\n"
    },
    {
      "title": "Graphical tools",
      "level": 3,
      "content": "There are different GUI tools:\n\n- GNOME: Control center has a basic UI. See GNOME#Mouse and touchpad. gnome-tweaks offers some additional settings.\n- Cinnamon: Similar to the GNOME UI, with more options.\n- MATE: Mouse option available in the settings panel. Also accessible using mate-mouse-properties\n- KDE Plasma: Keyboard, mouse and controller devices can be configured from System Settings.\n- Xfce: Configured from the Mouse and Touchpad submenu in xfce4-settings.\n\n- Control center has a basic UI. See GNOME#Mouse and touchpad.\n- gnome-tweaks offers some additional settings.\n\n- Similar to the GNOME UI, with more options.\n\n- Mouse option available in the settings panel. Also accessible using mate-mouse-properties\n\n- Keyboard, mouse and controller devices can be configured from System Settings.\n\n- Configured from the Mouse and Touchpad submenu in xfce4-settings.\n\n"
    },
    {
      "title": "Tapping button re-mapping",
      "level": 3,
      "content": "Swapping two- and three-finger tap for a touchpad is a straight forward example. Instead of the default three-finger tap for pasting, you can configure two-finger tap pasting by setting the TappingButtonMap option in your Xorg configuration file. To set 1/2/3-finger taps to left/right/middle, set TappingButtonMap to lrm, for left/middle/right set it to lmr.\n\n```\n/etc/X11/xorg.conf.d/30-touchpad.conf\n```\n\n```\nSection \"InputClass\"\n    Identifier \"touchpad\"\n    Driver \"libinput\"\n    MatchIsTouchpad \"on\"\n    Option \"Tapping\" \"on\"\n    Option \"TappingButtonMap\" \"lmr\"\nEndSection\n```\n\nRemember to remove MatchIsTouchpad \"on\" if your device is not a touchpad and adjust the Identifier accordingly.\n\n"
    },
    {
      "title": "Manual button re-mapping",
      "level": 3,
      "content": "For some devices, it is desirable to change the button mapping. A common example is the use of a thumb button instead of the middle button (used in X11 for pasting) on mice where the middle button is part of the mouse wheel. You can query the current button mapping via:\n\n```\n$ xinput get-button-map device\n```\n\nwhere device is either the device name or the device ID, as returned by xinput list. You can freely permutate the button numbers and write them back. Example:\n\n```\n$ xinput set-button-map device 1 6 3 4 5 0 7\n```\n\nIn this example, we mapped button 6 to be the middle button and disabled the original middle button by assigning it to button 0. For more information, please read about \"ButtonMapping\" section in libinput(4). This may also be used for Wayland, but be aware both the device number and its button-map will be different. Hence, settings are not directly interchangeable.\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nSome devices occur several times under the same device name, with a different amount of buttons exposed. The following is an example for reliably changing the button mapping for a Logitech Revolution MX mouse via xinitrc:\n\n```\n~/.xinitrc\n```\n\n```\n...\nfor i in $(xinput list | grep \"Logitech USB Receiver\" | perl -n -e'/id=(\\d+)/ && print \"$1\\n\"')\n\tdo if xinput get-button-map \"$i\" 2>/dev/null| grep -q 20; then\n\t\txinput set-button-map \"$i\" 1 17 3 4 5 8 7 6 9 10 11 12 13 14 15 16 2 18 19 20\n\tfi\ndone\n...\n```\n\nYou could also use the Xorg configuration file to do that. The trackball used in this example has a physical scroll wheel, devices without one may need to refer the configuration for Logitech Marble Mouse. The physical buttons in Kensington Slimblade Trackball layout are:\n\n```\n-----------\n|2(M)|8(S)|\n-----------\n|1(L)|3(R)|\n-----------\n```\n\nSo, for the left hand user, you may use the configuration below. Although the device has no scroll up and scroll down buttons, you cannot disable them in the configuration or some application will not response to the action of the wheel.\n\n```\n-----------\n|2(N)|8(M)|\n-----------\n|1(R)|3(L)|\n-----------\n```\n\n```\n/etc/X11/xorg.conf\n```\n\n```\nSection \"InputClass\"\n     Identifier   \"Trackball\"\n     MatchProduct \"Kensington Kensington Slimblade Trackball\"\n     MatchProduct \"Trackball\"\n     Driver       \"libinput\"\n     Option       \"ButtonMapping\"      \"3 0 1 4 5 6 7 8 2\"\n EndSection\n```\n\n"
    },
    {
      "title": "Change touchpad sensitivity",
      "level": 3,
      "content": "The method of finding the correct thresholds for when libinput registers a touch as DOWN and back UP again can be found [2] in the upstream documentation.\n\nCustom touchpad pressure values can be set via temporary local device quirks. See [3].\n\n"
    },
    {
      "title": "Using environment variable",
      "level": 4,
      "content": "The LIBINPUT_IGNORE_DEVICE environment variable can be used to prevent initialization of a specific device. [6] This is best set using a udev rule:\n\n```\n/etc/udev/rules.d/99-libinput-ignore.rules\n```\n\n```\nACTION==\"add|change\", device_delineation, ENV{LIBINPUT_IGNORE_DEVICE}=\"1\"\n```\n\nwhere device_delineation delineates a specific device using udev syntax. For example, for a whole USB device you would like libinput to ignore, you could use SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"vendor_id\", ATTRS{idProduct}==\"product_id\" using the IDs from lsusb.\n\nOnce the file is created, udev will automatically pick up on the change (see Udev#Loading new rules); you just need to reconnect the device for the change to take place.\n\n"
    },
    {
      "title": "Using xinput",
      "level": 4,
      "content": "To disable a device such as a touchpad, first get its name with xinput list and then disable it with xinput disable name.\n\n- It is more robust to disable it by name than by ID number. The devices may be renumbered.\n- It will be necessary to quote the name if it contains spaces.\n\nTo make it permanent, see Autostarting.\n\nTo toggle, write a script such as [7].\n\n"
    },
    {
      "title": "Gestures",
      "level": 3,
      "content": "While the libinput driver already contains logic to process advanced multitouch events like swipe and pinch gestures, the Desktop environment or Window manager might not have implemented actions for all of them yet.\n\n"
    },
    {
      "title": "libinput-gestures",
      "level": 4,
      "content": "For EWMH (see also wm-spec) compliant window managers, the libinput-gestures utility can be used meanwhile. The program reads libinput gestures (through libinput debug-events) from the touchpad and maps them to gestures according to a configuration file. Hence, it offers some flexibility within the boundaries of libinput's built-in recognition.\n\nTo use it, install the libinput-gesturesAUR package.\n\nlibinput-gestures needs access to the touchpad device. Traditionally, you can set this by adding yourself to the input group, but the more modern and safer approach is to manage access dynamically using udev, logind and acls. For this to work, create a file:\n\n```\n/etc/udev/rules.d/71-touchpad.rules\n```\n\n```\nENV{ID_INPUT_TOUCHPAD}==\"1\", TAG+=\"uaccess\"\n```\n\nThe number at the beginning of the file is important: at index 70, the device property ENV{ID_INPUT_TOUCHPAD might be unset, and the uaccess tag needs to be added before index 73 for systemd-logind(8).\n\nYou can use the default system-wide configured swipe and pinch gestures or define your own in a personal configuration file, see the README for details.\n\nIf using touchegg, uninstall the libinput-gesturesAUR package to prevent conflicts (see [8]).\n\n"
    },
    {
      "title": "fusuma",
      "level": 4,
      "content": "Fusuma is a multitouch gesture recognizer, written in Ruby, which can be used as an alternative to libinput-gestures.\n\nInstall the fusuma Ruby gem:\n\n```\n$ gem install fusuma\n```\n\nAlternatively, there is also ruby-fusumaAUR.\n\nOther than the fusuma Ruby gem you have to install the fusuma-plugin-sendkey Ruby gem or one between the xdotool (for X) and ydotool (generic: Wayland, X11, etc). Other alternatives are listed here.\n\nThen in ~/.config/fusuma/config.yml you have to set something like:\n\n```\n~/.config/fusuma/config.yml\n```\n\n```\nswipe:\n  3: \n    left: \n      sendkey: 'LEFTALT+RIGHT'\n    right: \n      sendkey: 'LEFTALT+LEFT'\n    up: \n      sendkey: 'LEFTALT+LEFTSHIFT+TAB'\n    down: \n      sendkey: 'LEFTALT+TAB'\npinch:\n  in:\n    sendkey: 'LEFTALT+LEFTSHIFT+TAB'\n  out:\n    sendkey: 'LEFTALT+TAB'\n\nthreshold:\n  swipe: 0.5\n  pinch: 0.2\n\ninterval:\n  swipe: 0.2\n  pinch: 0.2\n```\n\nOr for xdotool:\n\n```\n~/.config/fusuma/config.yml\n```\n\n```\nswipe:\n  3: \n    left: \n      command: 'xdotool key alt+Right'\n    right: \n      command: 'xdotool key alt+Left'\n    up: \n      command: 'xdotool key ctrl+shift+plus'\n    down: \n      command: 'xdotool key ctrl+minus'\npinch:\n  in:\n    command: 'xdotool key ctrl+shift+plus'\n  out:\n    command: 'xdotool key ctrl+minus'\n\nthreshold:\n  swipe: 0.5\n  pinch: 0.2\n\ninterval:\n  swipe: 0.2\n  pinch: 0.2\n```\n\nSame thing for ydotool.\n\nThe swipe threshold is important for not swiping back too many pages.\n\nNotice that the configure is for three fingers swipe. Two fingers swipe is not supported [9].\n\n"
    },
    {
      "title": "Gebaar",
      "level": 4,
      "content": "Gebaar is another gesture recognizer. Unlike Fusuma, it does not support pinching (support is planned in the future though) and thresholds, but in addition to swiping left, right, up and down with 3/4 fingers, it also supports diagonal swipes, which Fusuma does not.\n\nThere is a fork of gebaar at Gebaar which could be installed through gebaar-libinput-gitAUR which supports pinch gestures and adds additional features to original gebaar. Take in mind that this version is currently under active development and introduces configuration changes which makes it incompatable to original Gebaar\n\n"
    },
    {
      "title": "GnomeExtendedGestures",
      "level": 4,
      "content": "For deeper integration with GNOME, there is GnomeExtendedGestures (gnome-shell-extension-extended-gestures-gitAUR). Three finger horizontal and vertical gestures can be configured to perform gnome-shell actions (such as toggling the application overview or cycling between them).\n\n"
    },
    {
      "title": "Scroll with mouse by holding a button",
      "level": 3,
      "content": "There is a nice trick to optimize scrolling with a mouse or trackball by holding a mouse button (like right or middle button, or some other if the mouse has more buttons) and moving the mouse. Very useful in case your mouse does not have the mouse wheel (often the case with the trackballs). To do that one has to set ScrollMethod to button and specify the mouse button in the ScrollButton option for the action. Here is an example for configuration to achieve that:\n\n```\n/etc/X11/xorg.conf.d/00-mouse.conf\n```\n\n```\nSection \"InputClass\"\n    Identifier \"system-mouse\"\n    MatchIsPointer \"on\"\n    Option \"ScrollMethod\" \"button\"\n    Option \"ScrollButton\" \"3\"\nEndSection\n```\n\n"
    },
    {
      "title": "Mouse wheel scrolling speed scaling",
      "level": 3,
      "content": "For some mice, especially when using on a HiDPI desktop, the wheel scrolls too slow. A patch is submitted to libinput but it has not been accepted. There is a third-party xf86-input-libinput that incorporates this patch.\n\nThis patch introduces a new property libinput Scroll Distance Scale to mice, and you can set a scaling factor like\n\n```\n$ xinput --set-prop 'device_name' 'libinput Scroll Distance Scale' 2.5 2.5\n```\n\nwhere the device_name is the name of your mouse device, listed in xinput --list. 2.5 2.5 are the scaling factors, for x- and y-axis, respectively.\n\nAlternatively, install libinput-multiplierAUR and restart Xorg, then enlarge y-axis scroll distance to 6 times by\n\n```\n$ echo 6 > /tmp/libinput_discrete_deltay_multiplier\n```\n\nHere is an example to modify the scaling factor upon focusing change\n\n"
    },
    {
      "title": "Enable the touchpad while typing",
      "level": 3,
      "content": "By default, libinput disables the mousepad when typing. This is conflicting for some software such as Inkscape which has keybindings that require mouse movement while a key is pressed. You can disable this by adding the following line to the InputClass section of /etc/X11/xorg.conf.d/30-touchpad.conf:\n\n```\nSection \"InputClass\"\n    ...\n    Option \"DisableWhileTyping\" \"0\"\nEndSection\n```\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "First, see whether executing libinput debug-events can support you in debugging the problem, see libinput-debug-events(1) for options.\n\nSome inputs require kernel support. The tool evemu-describe from the evemu package can be used to check:\n\nCompare its output (for example) with a supported trackpad. i.e. a couple of ABS_ axes, a couple of ABS_MT axes and no REL_X/Y axis. For a clickpad the INPUT_PROP_BUTTONPAD property should also be set, if it is supported.\n\n"
    },
    {
      "title": "Touchpad not working in GNOME",
      "level": 3,
      "content": "Ensure the touchpad events are being sent to the GNOME desktop by running the following command:\n\n```\n$ gsettings set org.gnome.desktop.peripherals.touchpad send-events enabled\n```\n\nAdditionally, GNOME may override certain behaviors, like turning off Tapping and forcing Natural Scrolling. In this case the settings must be adapted using GNOMEs gsettings command line tool or a graphical frontend of your choice. For example if you wish to enable Tapping and disable Natural Scrolling for your user, adjust the touchpad key-values like the following:\n\n```\n$ gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click true\n$ gsettings set org.gnome.desktop.peripherals.touchpad natural-scroll false\n```\n\n"
    },
    {
      "title": "Inertial scrolling does not work in KDE",
      "level": 3,
      "content": "The feature is currently not implemented, see KDE bug 456383. As a workaround for Chromium-based browsers, install the SmoothScroll extension.\n\n"
    },
    {
      "title": "Keys stuck after entering tablet mode",
      "level": 3,
      "content": "On some Tablet PCs (notably Lenovo Yogas), holding a keyboard key while entering the tablet mode can cause the key be stuck until the tablet mode is disabled. It is sometimes possible to fix this behavior by modifying libinput quirks files. See Issue 914.\n\nFor example, find the name of the keyboard device:\n\n```\n# libinput list-devices\n```\n\n```\n...\nDevice:           AT Translated Set 2 keyboard\nKernel:           /dev/input/event3\nCapabilities:     keyboard \n...\n```\n\nThen, create an override file:\n\n```\n/etc/libinput/local-overrides.quirks\n```\n\n```\n[Lenovo Thinkpad Yoga]\nMatchName=AT Translated Set 2 keyboard\nModelTabletModeNoSuspend=0\n```\n\nModelTabletModeNoSuspend=0 disables behavior that causes the bug. Consult Device quirks for information about configuration format and Match directives that select the device to configure. It is often possible to create an override file based on an existing quirks entry for your particular device. Default quirks files can be found in /usr/share/libinput/.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- libinput Wayland documentation\n- FOSDEM 2015 - libinput - Hans de Goede on goals and plans of the project\n- Peter Hutterer's Blog - numerous posts on libinput from one of the project's hackers\n- Talk by the primary libinput maintainer outlining the history and state (as of 2020) of Linux input device handling\n- Blog post by the libinput maintainer outlining the rationale for libinput\n\n"
    }
  ]
}