{
  "title": "SMBus",
  "url": "https://wiki.archlinux.org/title/SMBus",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Fan speed control\n- hddtemp\n- I2C\n- monitorix\n\nlm_sensors (Linux monitoring sensors) is a free and open-source application that provides tools and drivers for monitoring temperatures, voltage, and fans. This document explains how to install, configure, and use lm_sensors.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the lm_sensors package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Use sensors-detect as root to detect and generate a list of kernel modules:\n\n```\n# sensors-detect\n```\n\nIt will ask to probe for various hardware. The \"safe\" answers are the defaults, so just hitting Enter to all the questions will generally not cause any problems. This will create the /etc/conf.d/lm_sensors configuration file which is used by lm_sensors.service to automatically load kernel modules on boot.\n\nWhen the detection is finished, a summary of the probes is presented.\n\nExample:\n\n```\n# sensors-detect\n```\n\n```\nThis program will help you determine which kernel modules you need\nto load to use lm_sensors most effectively. It is generally safe\nand recommended to accept the default answers to all questions,\nunless you know what you're doing.\n\nSome south bridges, CPUs or memory controllers contain embedded sensors.\nDo you want to scan for them? This is totally safe. (YES/no): \nModule cpuid loaded successfully.\nSilicon Integrated Systems SIS5595...                       No\nVIA VT82C686 Integrated Sensors...                          No\nVIA VT8231 Integrated Sensors...                            No\nAMD K8 thermal sensors...                                   No\nAMD Family 10h thermal sensors...                           No\n\n...\n\nNow follows a summary of the probes I have just done.\nJust press ENTER to continue: \n\nDriver `coretemp':\n  * Chip `Intel digital thermal sensor' (confidence: 9)\n\nDriver `lm90':\n  * Bus `SMBus nForce2 adapter at 4d00'\n    Busdriver `i2c_nforce2', I2C address 0x4c\n    Chip `Winbond W83L771AWG/ASG' (confidence: 6)\n\nDo you want to overwrite /etc/conf.d/lm_sensors? (YES/no): \nln -s '/usr/lib/systemd/system/lm_sensors.service' '/etc/systemd/system/multi-user.target.wants/lm_sensors.service'\nUnloading i2c-dev... OK\nUnloading cpuid... OK\n```\n\nNote: **YES** \n\n"
    },
    {
      "title": "Running sensors",
      "level": 2,
      "content": "Example running sensors:\n\n```\n$ sensors\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:       +35.0°C  (crit = +105.0°C)\nCore 1:       +32.0°C  (crit = +105.0°C)\n\nw83l771-i2c-0-4c\nAdapter: SMBus nForce2 adapter at 4d00\ntemp1:        +28.0°C  (low  = -40.0°C, high = +70.0°C)\n                       (crit = +85.0°C, hyst = +75.0°C)\ntemp2:        +37.4°C  (low  = -40.0°C, high = +70.0°C)\n                       (crit = +110.0°C, hyst = +100.0°C)\n```\n\n"
    },
    {
      "title": "Adding DIMM temperature sensors",
      "level": 3,
      "content": "To find the temperature sensors of DIMMs, install the i2c-tools package. Once installed, load the i2c-dev kernel module.\n\n```\n# modprobe i2c_dev\n```\n\nTo show all the columns, use i2cdetect as root:\n\n```\n# i2cdetect -l\n```\n\n```\ni2c-2\tsmbus     \tSMBus PIIX4 adapter port 2 at 0b00\tSMBus adapter\ni2c-2\tsmbus     \tSMBus PIIX4 adapter port 1 at 0b20\tSMBus adapter\ni2c-0\tsmbus     \tSMBus PIIX4 adapter port 0 at 0b00\tSMBus adapter\n```\n\nOtherwise, its output will appear as follows:\n\n```\ni2c-2\tunknown    \tSMBus PIIX4 adapter port 2 at 0b00\tN/A\ni2c-2\tunknown    \tSMBus PIIX4 adapter port 1 at 0b20\tN/A\ni2c-0\tunknown    \tSMBus PIIX4 adapter port 0 at 0b00\tN/A\n```\n\nIn the following example, RAM sticks are connected to the bus SMBus 0. The i2cdetect command will show the devices that are connected to the bus. The -y 0 argument uses the i2c-0 smbus. Check other buses if needed.\n\n```\n# i2cdetect -y 0\n```\n\n```\n___  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:                         -- -- -- -- 0c -- -- -- \n10: 10 -- -- -- -- -- -- -- 18 19 -- -- -- -- -- -- \n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n30: -- -- -- -- -- -- 36 -- -- -- -- -- -- -- -- -- \n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 4f \n50: 50 51 -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n70: -- -- -- -- -- -- -- 77\n```\n\nRAM SPD's (serial presence detect) start from address 0x50 and RAM temperature sensors start from 0x18 at same bus. In this example, there are 2 DIMMs available. The address 0x18 and 0x19 are the DIMMs temperature sensors.\n\nTo read the temperatures of RAM sticks, we need the jc42 kernel module loaded. You need to tell the module which addresses to use. This process consists of writing the module_name and address to smbus_path. For example:\n\n```\n# modprobe jc42\n# echo jc42 0x18 > /sys/bus/i2c/devices/i2c-0/new_device\n# echo jc42 0x19 > /sys/bus/i2c/devices/i2c-0/new_device\n```\n\nAfter that your ram sticks temperature will be visible:\n\n```\n$ sensors\n```\n\n```\njc42-i2c-0-19\nAdapter: SMBus PIIX4 adapter port 0 at 0b00\ntemp1:        +50.7°C  (low  =  +0.0°C)                  ALARM (HIGH, CRIT)\n                       (high =  +0.0°C, hyst =  +0.0°C)\n                       (crit =  +0.0°C, hyst =  +0.0°C)\n\njc42-i2c-0-18\nAdapter: SMBus PIIX4 adapter port 0 at 0b00\ntemp1:        +51.8°C  (low  =  +0.0°C)                  ALARM (HIGH, CRIT)\n                       (high =  +0.0°C, hyst =  +0.0°C)\n                       (crit =  +0.0°C, hyst =  +0.0°C)\n```\n\n"
    },
    {
      "title": "Reading SPD values from memory modules (optional)",
      "level": 3,
      "content": "To read the SPD timing values from memory modules, install the i2c-tools package. Once installed, load the at24 or eeprom (deprecated) kernel module.\n\n```\n# modprobe at24\n```\n\nFinally, view memory information with decode-dimms.\n\nHere is partial output from one machine:\n\n```\n# decode-dimms\n```\n\n```\nMemory Serial Presence Detect Decoder\nBy Philip Edelbrock, Christian Zuckschwerdt, Burkart Lingner,\nJean Delvare, Trent Piepho and others\n\n\nDecoding EEPROM: /sys/bus/i2c/drivers/eeprom/0-0050\nGuessing DIMM is in                             bank 1\n\n---=== SPD EEPROM Information ===---\nEEPROM CRC of bytes 0-116                       OK (0x583F)\n# of bytes written to SDRAM EEPROM              176\nTotal number of bytes in EEPROM                 512\nFundamental Memory type                         DDR3 SDRAM\nModule Type                                     UDIMM\n\n---=== Memory Characteristics ===---\nFine time base                                  2.500 ps\nMedium time base                                0.125 ns\nMaximum module speed                            1066MHz (PC3-8533)\nSize                                            2048 MB\nBanks x Rows x Columns x Bits                   8 x 14 x 10 x 64\nRanks                                           2\nSDRAM Device Width                              8 bits\ntCL-tRCD-tRP-tRAS                               7-7-7-33\nSupported CAS Latencies (tCL)                   8T, 7T, 6T, 5T\n\n---=== Timing Parameters ===---\nMinimum Write Recovery time (tWR)               15.000 ns\nMinimum Row Active to Row Active Delay (tRRD)   7.500 ns\nMinimum Active to Auto-Refresh Delay (tRC)      49.500 ns\nMinimum Recovery Delay (tRFC)                   110.000 ns\nMinimum Write to Read CMD Delay (tWTR)          7.500 ns\nMinimum Read to Pre-charge CMD Delay (tRTP)     7.500 ns\nMinimum Four Activate Window Delay (tFAW)       30.000 ns\n\n---=== Optional Features ===---\nOperable voltages                               1.5V\nRZQ/6 supported?                                Yes\nRZQ/7 supported?                                Yes\nDLL-Off Mode supported?                         No\nOperating temperature range                     0-85C\nRefresh Rate in extended temp range             1X\nAuto Self-Refresh?                              Yes\nOn-Die Thermal Sensor readout?                  No\nPartial Array Self-Refresh?                     No\nThermal Sensor Accuracy                         Not implemented\nSDRAM Device Type                               Standard Monolithic\n\n---=== Physical Characteristics ===---\nModule Height (mm)                              15\nModule Thickness (mm)                           1 front, 1 back\nModule Width (mm)                               133.5\nModule Reference Card                           B\n\n---=== Manufacturer Data ===---\nModule Manufacturer                             Invalid\nManufacturing Location Code                     0x02\nPart Number                                     OCZ3G1600LV2G     \n\n...\n```\n\n"
    },
    {
      "title": "Graphical front-ends",
      "level": 3,
      "content": "There are a variety of front-ends for sensors data.\n\n- psensor — GTK application for monitoring hardware sensors, including temperatures and fan speeds. Monitors motherboard and CPU (using lm-sensors), Nvidia GPUs (using XNVCtrl), and harddisks (using hddtemp or libatasmart).\n\n- xsensors — X11 interface to lm_sensors.\n\n- Netdata — Web based system monitor (netdata).\n\n- CoolerControl — A program to monitor and control your cooling devices.\n\nFor specific Desktop environments:\n\n- Freon (GNOME Shell extension) — Extension for displaying CPU temperature, disk temperature, video card temperature , voltage and fan RPM in GNOME Shell.\n\n- GNOME Sensors Applet — Applet for the GNOME Panel to display readings from hardware sensors, including CPU temperature, fan speeds and voltage readings.\n\n- lm-sensors (LXPanel plugin) — Monitor temperature/voltages/fan speeds in LXDE through lm-sensors.\n\n- MATE Sensors Applet — Display readings from hardware sensors in your MATE panel.\n\n- Sensors (Xfce4 panel plugin) — Hardware sensors plugin for the Xfce panel.\n\n- Thermal Monitor (Plasma applet) — A KDE Plasmoid for displaying system temperatures.\n\n"
    },
    {
      "title": "sensord",
      "level": 3,
      "content": "There is an optional daemon called sensord (included with the lm_sensors package) which can log data to a round robin database (rrd) and later visualize graphically. See the sensord(8) man page for details.\n\n"
    },
    {
      "title": "Adjusting values",
      "level": 3,
      "content": "In some cases, the data displayed might be incorrect or users may wish to rename the output. Use cases include:\n\n- Incorrect temperature values due to a wrong offset (i.e. temps are reported 20 °C higher than actual).\n- Users wish to rename the output of some sensors.\n- The cores might be displayed in an incorrect order.\n\nAll of the above (and more) can be adjusted by overriding the package provided settings in /etc/sensors3.conf by creating /etc/sensors.d/foo wherein any number of tweaks will override the default values. It is recommended to rename 'foo' to the motherboard brand and model but this naming nomenclature is optional.\n\nCustom configuration files for a number of motherboards can be found in the configs directory of the lm-sensors package and be used as templates.\n\n"
    },
    {
      "title": "Example 1. Adjusting temperature offsets",
      "level": 4,
      "content": "This is a real example on a Zotac ION-ITX-A-U motherboard. The coretemp values are off by 20 °C (too high) and are adjusted down to Intel specs.\n\n```\n$ sensors\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:       +57.0°C  (crit = +125.0°C)\nCore 1:       +55.0°C  (crit = +125.0°C)\n...\n```\n\nRun sensors with the -u switch to see what options are available for each physical chip (raw mode). If some of the raw labels you are presented seem not to be configurable, look at the /sys/class/hwmon directory tree. Each device mentioned there has a name file, which can be used to match the device it is referring to. And then try the labels referred to by that directory.\n\n```\n$ sensors -u\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:\n  temp2_input: 57.000\n  temp2_crit: 125.000\n  temp2_crit_alarm: 0.000\nCore 1:\n  temp3_input: 55.000\n  temp3_crit: 125.000\n  temp3_crit_alarm: 0.000\n...\n```\n\nCreate the following file overriding the default values:\n\n```\n/etc/sensors.d/Zotac-IONITX-A-U\n```\n\n```\nchip \"coretemp-isa-0000\"\n  label temp2 \"Core 0\"\n  compute temp2 @-20,@-20\n\n  label temp3 \"Core 1\"\n  compute temp3 @-20,@-20\n```\n\nNow invoking sensors shows the adjust values:\n\n```\n$ sensors\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:       +37.0°C  (crit = +105.0°C)\nCore 1:       +35.0°C  (crit = +105.0°C)\n...\n```\n\n"
    },
    {
      "title": "Example 2. Renaming labels",
      "level": 4,
      "content": "This is a real example on an Asus A7M266. The user wishes more verbose names for the temperature labels temp1 and temp2:\n\n```\n$ sensors\n```\n\n```\nas99127f-i2c-0-2d\nAdapter: SMBus Via Pro adapter at e800\n...\ntemp1:        +35.0°C  (high =  +0.0°C, hyst = -128.0°C)\ntemp2:        +47.5°C  (high = +100.0°C, hyst = +75.0°C)\n...\n```\n\nCreate the following file to override the default values:\n\n```\n/etc/sensors.d/Asus_A7M266\n```\n\n```\nchip \"as99127f-*\"\n  label temp1 \"Mobo Temp\"\n  label temp2 \"CPU0 Temp\"\n```\n\nNow invoking sensors shows the adjust values:\n\n```\n$ sensors\n```\n\n```\nas99127f-i2c-0-2d\nAdapter: SMBus Via Pro adapter at e800\n...\nMobo Temp:        +35.0°C  (high =  +0.0°C, hyst = -128.0°C)\nCPU0 Temp:        +47.5°C  (high = +100.0°C, hyst = +75.0°C)\n...\n```\n\n"
    },
    {
      "title": "Example 3. Renumbering cores for multi-CPU systems",
      "level": 4,
      "content": "This is a real example on an HP Z600 workstation with dual Xeons. The actual numbering of physical cores is incorrect: numbered 0, 1, 9, 10 which is repeated into the second CPU. Most users expect the core temperatures to report out in sequential order, i.e. 0,1,2,3,4,5,6,7.\n\n```\n$ sensors\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:       +65.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 1:       +65.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 9:       +66.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 10:      +66.0°C  (high = +85.0°C, crit = +95.0°C)\n\ncoretemp-isa-0004\nAdapter: ISA adapter\nCore 0:       +54.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 1:       +56.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 9:       +60.0°C  (high = +85.0°C, crit = +95.0°C)\nCore 10:      +61.0°C  (high = +85.0°C, crit = +95.0°C)\n...\n```\n\nAgain, run sensors with the -u switch to see what options are available for each physical chip:\n\n```\n$ sensors -u coretemp-isa-0000\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:\n  temp2_input: 61.000\n  temp2_max: 85.000\n  temp2_crit: 95.000\n  temp2_crit_alarm: 0.000\nCore 1:\n  temp3_input: 61.000\n  temp3_max: 85.000\n  temp3_crit: 95.000\n  temp3_crit_alarm: 0.000\nCore 9:\n  temp11_input: 62.000\n  temp11_max: 85.000\n  temp11_crit: 95.000\nCore 10:\n  temp12_input: 63.000\n  temp12_max: 85.000\n  temp12_crit: 95.000\n```\n\n```\n$ sensors -u coretemp-isa-0004\n```\n\n```\ncoretemp-isa-0004\nAdapter: ISA adapter\nCore 0:\n  temp2_input: 53.000\n  temp2_max: 85.000\n  temp2_crit: 95.000\n  temp2_crit_alarm: 0.000\nCore 1:\n  temp3_input: 54.000\n  temp3_max: 85.000\n  temp3_crit: 95.000\n  temp3_crit_alarm: 0.000\nCore 9:\n  temp11_input: 59.000\n  temp11_max: 85.000\n  temp11_crit: 95.000\nCore 10:\n  temp12_input: 59.000\n  temp12_max: 85.000\n  temp12_crit: 95.000\n...\n```\n\nCreate the following file overriding the default values:\n\n```\n/etc/sensors.d/HP_Z600\n```\n\n```\nchip \"coretemp-isa-0000\"\n  label temp2 \"Core 0\"\n  label temp3 \"Core 1\"\n  label temp11 \"Core 2\"\n  label temp12 \"Core 3\"\n\nchip \"coretemp-isa-0004\"\n  label temp2 \"Core 4\"\n  label temp3 \"Core 5\"\n  label temp11 \"Core 6\"\n  label temp12 \"Core 7\"\n```\n\nNow invoking sensors shows the adjust values:\n\n```\n$ sensors\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore0:        +64.0°C  (high = +85.0°C, crit = +95.0°C)\nCore1:        +63.0°C  (high = +85.0°C, crit = +95.0°C)\nCore2:        +65.0°C  (high = +85.0°C, crit = +95.0°C)\nCore3:        +66.0°C  (high = +85.0°C, crit = +95.0°C)\n\ncoretemp-isa-0004\nAdapter: ISA adapter\nCore4:        +53.0°C  (high = +85.0°C, crit = +95.0°C)\nCore5:        +54.0°C  (high = +85.0°C, crit = +95.0°C)\nCore6:        +59.0°C  (high = +85.0°C, crit = +95.0°C)\nCore7:        +60.0°C  (high = +85.0°C, crit = +95.0°C)\n...\n```\n\n"
    },
    {
      "title": "Automatic lm_sensors deployment",
      "level": 3,
      "content": "Users wishing to deploy lm_sensors on multiple machines can use the following to accept the defaults to all questions:\n\n```\n# sensors-detect --auto\n```\n\n"
    },
    {
      "title": "S.M.A.R.T. drive temperature",
      "level": 3,
      "content": "Since kernel 5.6[1] the drivetemp module will report SATA/SAS temperature through hwmon, but sensors-detect does not automatically detect this so the module must be manually loaded.\n\n```\n# modprobe drivetemp\n```\n\nYou should now see entries similar to this in your sensors output:\n\n```\nsensors\n```\n\n```\ndrivetemp-scsi-1-0\nAdapter: SCSI adapter\ntemp1:        +33.0°C \n\ndrivetemp-scsi-2-0\nAdapter: SCSI adapter\ntemp1:        +32.0°C  (low  =  +0.0°C, high = +70.0°C)\n                       (crit low =  +0.0°C, crit = +70.0°C)\n                       (lowest = +29.0°C, highest = +41.0°C)\n```\n\nYou can now load the module at boot. Alternatively, manually add it to the HWMON_MODULES line of /etc/conf.d/lm-sensors. Do note it will not be added automatically when sensors-detect will be allowed to write this file again.\n\n"
    },
    {
      "title": "Persistent device names",
      "level": 3,
      "content": "Many pieces of software expect sensor devices to stay put in /sys/class/hwmon/hwmonX, but more often than not, they don't on systems with more than 1-2 devices providing a hwmon interface. Software should probably parse the hwmon?/name or use lmsensors libraries, but more often than not, they sadly don't. Some software (example: Monitorix or certain modules of it, namely amdgpu) expect persistent names somewhere else.\n\nHence, the following kind of udev rules might be useful. Not all software can use them (for example, KDE system monitor - which sadly, makes these software almost useless on many systems). For many cases, simply matching the hwmon subsystem and a suitable name in the udev rule should be enough - but not always! See Udev page for more information on writing rules.\n\nOne can not rename or symlink under /sys hieraerchy. A SYMLINK+= -statement will also not work. Hence, we need to use the RUN+= statement (note, the symlink does not need to be under /dev as in this example - there is no standard nor a good place for them).\n\n```\n/etc/udev/rules.d/99-persistent-hwmon-names.rules\n```\n\n```\n# my motherboard sensor chip:\nACTION==\"add\", SUBSYSTEM==\"hwmon\", ATTRS{name}==\"nct6687\", RUN+=\"/bin/sh -c 'ln -s /sys$devpath /dev/nct6678'\"\n# a USB device providing sensors:\nACTION==\"add\", SUBSYSTEM==\"hwmon\", ATTRS{name}==\"corsaircpro\", RUN+=\"/bin/sh -c 'ln -s /sys$devpath /dev/corsaircpro'\"\n# my GPU:\nACTION==\"add\", SUBSYSTEM==\"hwmon\", ATTRS{vendor}==\"0x1002\", ATTRS{device}==\"0x73bf\", RUN+=\"/bin/sh -c 'ln -s /sys$devpath /dev/rx6900xt'\"\n```\n\n"
    },
    {
      "title": "K10Temp module",
      "level": 3,
      "content": "Some K10 processors have issues with their temperature sensor. See the k10temp documentation for more information.\n\nOn affected machines the module will report \"unreliable CPU thermal sensor; monitoring disabled\". To force monitoring anyway, you can run the following:\n\n```\n# rmmod k10temp\n# modprobe k10temp force=1\n```\n\nConfirm that the sensor is in fact valid and reliable. If it is, can edit /etc/modprobe.d/k10temp.conf and add:\n\n```\noptions k10temp force=1\n```\n\nThis will allow the module to load at boot.\n\n"
    },
    {
      "title": "Asus B450M-A/A320M-K/A320M-K-BR motherboards",
      "level": 3,
      "content": "These motherboards use a IT8655E chip, which is not supported by the it87 kernel driver, as of Nov 2020 [2]. However, it is supported by the upstream version of the kernel driver [3]. The DKMS variant is contained in it87-dkms-gitAUR.\n\n"
    },
    {
      "title": "Asus B450/X399/X470 motherboards with AM4 Socket",
      "level": 3,
      "content": "Some recent Asus motherboards use a ITE IT8665E chip, accessing the temperature, fan and voltage sensors may require the asus-wmi-sensors module. It is part of the mainline kernel since 5.17: load the asus-wmi-sensors kernel module which uses the UEFI interface and may require a BIOS update on some boards [4].\n\nAlternatively, the it87 module reads the values from the chip directly, install it87-dkms-gitAUR and load the it87 kernel module.\n\n"
    },
    {
      "title": "ASUS H97/Z97/Z170/Z370i/X570/B550/B650-PLUS/X670 motherboards",
      "level": 3,
      "content": "With some recent ASUS motherboards, fan and voltage sensor access may require the nct6775 kernel module to be loaded.\n\nYou may also need to add the following kernel parameter:\n\n```\nacpi_enforce_resources=lax\n```\n\nSee https://bugzilla.kernel.org/show_bug.cgi?id=204807 for more information.\n\n"
    },
    {
      "title": "Asrock Deskmini H470",
      "level": 3,
      "content": "The STX board of the Deskmini H470 uses a NCT6683 chip, for accessing the temperature, fan and voltage sensors the loading of nct6683 module is required.\n\nFor proper values of the nct6683 module have a module config file created:\n\n```\n/etc/modprobe.d/nct6683.conf\n```\n\n```\noptions nct6683 force=1\n```\n\n"
    },
    {
      "title": "Gigabyte B250/Z370/B450M/B560M/B660M/Z690/B550 motherboards",
      "level": 3,
      "content": "Some Gigabyte motherboards use the ITE IT8686E, ITE8689 (for B560 and B660M) or ITE8689E (for Z690 and B550) chip, which is not supported by the it87 kernel driver, as of May 2019 [5]. However, it is supported by the upstream version of the kernel driver [6]. The DKMS variant is contained in it87-dkms-gitAUR. As with #ASUS H97/Z97/Z170/Z370i/X570/B550/B650-PLUS/X670 motherboards, a kernel parameter is required before attempting to install the module:\n\n```\nacpi_enforce_resources=lax\n```\n\nFurthermore, supply the id of the chip when loading the module as follows:\n\n```\n# modprobe it87 force_id=0x8686\nor\n# modprobe it87 force_id=0x8689  # for B560\n# modprobe it87 force_id=0x8628  # for Z690 and B550\n```\n\nOr you can load the module during boot process by creating the following two files:\n\n```\n/etc/modules-load.d/it87.conf\n```\n\n```\nit87\n```\n\nFor Z690 and B550\n\n```\n/etc/modprobe.d/it87.conf\n```\n\n```\noptions it87 force_id=0x8628\n```\n\nFor others\n\n```\n/etc/modprobe.d/it87.conf\n```\n\n```\noptions it87 ignore_resource_conflict=1\n```\n\nOnce the module is loaded you can use the sensors tool to probe the chip. Now you can also use fancontrol to control the speed step of your case fan.\n\nOptionally installation of zenpower3-dkmsAUR may allow greater fine tuning of the motherboard's cooling system. However, it does disable the default k10temp module.\n\n"
    },
    {
      "title": "Gigabyte GA-J1900N-D3V",
      "level": 3,
      "content": "This motherboard uses the ITE IT8620E chip (useful also to read voltages, mainboard temp, fan speed) and it is supported by the it87 kernel module.[7]\n\nYou can load the module at runtime with modprobe:\n\n```\n$ modprobe it87 force_id=0x8728\n```\n\nOr you can load the modules during boot process by creating the following two files:\n\n```\n/etc/modules-load.d/it87.conf\n```\n\n```\nit87\n```\n\n```\n/etc/modprobe.d/it87.conf\n```\n\n```\noptions it87 force_id=0x8603\n```\n\nOnce the module is loaded you can use the sensors tool to probe the chip.\n\nNow you can also use fancontrol to control the speedsteps of your case fan.\n\n"
    },
    {
      "title": "MAG B650 TOMAHAWK WIFI (MS-7D75)/MAG B550 MORTAR WIFI (MS-7C94)",
      "level": 3,
      "content": "These motherboards use a Nuvoton NCT6687-R chip for fan, voltage and temperature readings. You need kernel module nct6687d-dkms-gitAUR to access those values.\n\nOnce installed you can load the module\n\n```\n$ modprobe nct6687\n```\n\nAnd then check the output of sensors\n\n```\n$ sensors\n```\n\n"
    },
    {
      "title": "Asrock B650M Pro RS / B850M Pro RS / X870 Pro RS",
      "level": 3,
      "content": "These motherboards use the Nuvoton NCT6796D-S for fan, voltage and temperature readings. This exact variant of the chip has a different ID and therefore is not detected without a module config file:\n\n```\n/etc/modprobe.d/nct6775.conf\n```\n\n```\noptions nct6775 force_id=0xd801\n```\n\n"
    },
    {
      "title": "Laptop screen issues after running sensors-detect",
      "level": 3,
      "content": "This is caused by lm-sensors messing with the Vcom values of the screen while probing for sensors. It has been discussed and solved at the forums already: https://bbs.archlinux.org/viewtopic.php?id=193048. However, make sure to read through the thread carefully before running any of the suggested commands.\n\n"
    },
    {
      "title": "Asrock X870 Steel Legend WiFi",
      "level": 3,
      "content": "This motherboard uses a newer Nuvoton NCT6686D for fan, voltage and temperature readings. The nct6683 driver documentation states that the driver will only instantiate with Intel CPUs. AMD CPUs require setting force to 1.\n\n```\n/etc/modprobe.d/nct6683.conf\n```\n\n```\noptions nct6683 force=1\n```\n\n"
    }
  ]
}