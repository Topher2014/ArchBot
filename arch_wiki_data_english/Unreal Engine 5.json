{
  "title": "Unreal Engine 5",
  "url": "https://wiki.archlinux.org/title/Unreal_Engine_5",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section is a candidate for merging with Unreal Engine 4.** This article or section is a candidate for merging with Unreal Engine 4.\n\nThis article or section is a candidate for merging with Unreal Engine 4.\n\nUnreal Engine 5 is the latest version of the videogame engine created by Epic Games.\n\nThe content of this article was originally written on Unreal Engine wiki and adapted specifically for Arch Linux.\n\n"
    },
    {
      "title": "Prerequisites",
      "level": 2,
      "content": "See Recommended Hardware.\n\n"
    },
    {
      "title": "Gain access to the source code",
      "level": 3,
      "content": "The Unreal Engine source code is in a private GitHub repository requiring free registration with the developer (Epic Games) for access.\n\nTo gain access, login or register at Epic Games Accounts and provide an accessible GitHub username at the bottom of the Epic Games 'Connected Accounts Dashboard'[dead link 2025-04-06 â“˜] page. You will then receive an invitation to access the private GitHub repository.\n\n"
    },
    {
      "title": "Clone",
      "level": 2,
      "content": "Since the repository is private, you should set up an SSH key so your GitHub account is used to clone the source.\n\nIt is faster to clone only the desired branch:\n\n```\n$ git clone git@github.com:EpicGames/UnrealEngine.git --branch release --single-branch\n```\n\n"
    },
    {
      "title": "Compilation",
      "level": 2,
      "content": "You can compile manually from a downloaded GitHub release or install from AUR. By default the engine will be compiled on all physical cores.\n\n"
    },
    {
      "title": "Manually",
      "level": 3,
      "content": "You can get the most recent releases on GitHub as ZIPs.\n\nSetup:\n\n```\n$ ./Setup.sh\n```\n\nGenerate project files:\n\n```\n$ ./GenerateProjectFiles.sh\n```\n\nThen compile:\n\n```\n$ make -j1\n```\n\nThis will compile the Unreal Engine and the Unreal Editor.\n\n"
    },
    {
      "title": "From the AUR",
      "level": 3,
      "content": "Unreal Engine 5 is available in the AUR as the unreal-engineAUR package. You might have to fix permissions for UE5 to precompile shaders on first launch:\n\n```\n# chmod -R a+rwX /opt/unreal-engine/Engine\n```\n\nIn the case of version 5.4, the installed size is ~190 GiB, it needs 340+ GiB to build with the final package being ~45 GiB when compressed. This PKGBUILD downloads ~20 GiB of source files plus ~5 GiB of dependencies.\n\nFor a smaller download you can use .zip releases as a source for PKGBUILD. Note that this link will not work unless you first follow the steps outlined above.\n\n"
    },
    {
      "title": "From the Epic Games Store",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nPre-compiled binaries are also available via Epic's Game Store. These .zip files contain precompiled binaries without any need for the setup steps as mentioned above.\n\nThat being said, you will still need the pre-requisite dependencies to run the extracted binary(see the aur for reference). After downloading, you should be able to simply extract the files wherever you please and launch the editor using the binary located in the extracted path:\n\n```\n$ Linux_Unreal_Engine_5.x.x/Engine/Binaries/Linux/UnrealEditor\n```\n\nThe zip for Linux_Unreal_Engine_5.5.4 is 25.2GB in size and after extraction is around ~43GB in size.\n\n"
    },
    {
      "title": "Compilation time",
      "level": 3,
      "content": "The compilation will take 4-5 hours for the average high end consumer cpu (i9/Ryzen9). This could be somewhat accelerated by forcing to use all cores instead of just the physical ones which is how it compiles by default. This number does not include the time to compile shaders after first launch.\n\n(Ryzen 9 6900HX compilation time for UE5.4.2 was about 5 hours using all (8) physical cores after downloading the depenedencies. Packaging, unpackaging and compiling shaders afterwards took another hour thus making the total install time after downloading the dependencies ~6 hours.)\n\n"
    },
    {
      "title": "Compilation problems",
      "level": 3,
      "content": "If the compilation fails you should try building the Editor using the Debug profile[1]:\n\n```\n$ make UE5Editor-Linux-Debug\n```\n\nHowever, this might have some performance impact.\n\nAnother approach would be to use different clang version (e.g. 3.8 or 4.0)\n\n"
    },
    {
      "title": "Runtime problems",
      "level": 3,
      "content": "If the editor does not start from the menu, or something does not work right, start it in a console and check the output for errors.\n\n```\n$ /opt/unreal-engine/Engine/Binaries/Linux/UnrealEditor\n```\n\n"
    },
    {
      "title": "C++ code project problems",
      "level": 3,
      "content": "After creating a code project, the new project opens in a text editor instead of in Unreal Editor as it should. After re-launching the editor, the new project shows up and can be opened, but on the first run, it takes a half-hour or so to compile, and since this happens in the background (no GUI) it might not seem to be doing anything. The CPU usage should show that it is still compiling, and you may want to launch the editor from a console to see progress.\n\nIf while trying to open the project in UE for the first time, you get a message about editor modules being out of date, you need to build the UE5Editor target in your IDE. Do not abort this build, or you will brick the Unreal Editor and will need to reinstall unreal-engine. Afterward, it will open and ask you to rebuild the project class, after which you can actually start working on your new project.\n\nNote that completing both of these rebuilds can very well take over an hour, depending on your system specs.\n\n"
    },
    {
      "title": "Engine modules are out of date, and cannot be compiled while the engine is running. Please build through your IDE",
      "level": 3,
      "content": "First, in your source folder in your project, check that {nameofproject}.Target.cs and {nameofproject}Editor.Target.cs has \"DefaultBuildSettings = BuildSettingsVersion.V2;\" in the section base(Target) { ... } If it does not work, check the file Engine/Source/Developer/DesktopPlatform/Private/DesktopPlatformBase.cpp in your Unreal Engine source code, look for the line `Arguments += \" -Progress -NoEngineChanges -NoHotReloadFromIDE\";` and remove the two last options : `Arguments += \" -Progress\";`\n\n- Re-compile Unreal Engine\n- Launch your project and accept the rebuild\n\n"
    },
    {
      "title": "Disable Tooltips",
      "level": 3,
      "content": "UE4's mouse-over tooltips might be rendered very slow. They can be disabled by adding to:\n\n```\nEngine/Config/ConsoleVariables.ini\n```\n\n```\nSlate.AllowToolTips=0\n```\n\n"
    },
    {
      "title": "Random freeze under KDE",
      "level": 3,
      "content": "Disable index file content in the KDE file search options.\n\n"
    },
    {
      "title": "Slow rendered tooltips in KDE",
      "level": 3,
      "content": "Epic suggests allowing compositing for the Unreal Editor, which is stopped by default. Source: https://michaeljcole.github.io/wiki.unrealengine.com/Linux_Known_Issues/#KDE\n\n"
    },
    {
      "title": "Blank window in Blueprint with multi-monitor configuration",
      "level": 3,
      "content": "To fix the big blank window go to Edit Preferences > User interface > Enable Window Animation and activate the checkbox\n\n"
    },
    {
      "title": "Error message about blocklisted drivers while using AMDVLK",
      "level": 3,
      "content": "AMDVLK isn't officially supported by Unreal Engine, but this limitation can be circumvented (not recommended) by editing/removing the section for driver blocklisting:\n\n```\nEngine/Config/BaseHardware.ini\n```\n\n```\n[GPU_AMD Linux]\n```\n\n"
    },
    {
      "title": "SDL: wayland not available",
      "level": 3,
      "content": "When trying to force the editor to run on Wayland using the SDL_VIDEODRIVER=wayland environment variable, the editor will give this error to some users. The cause of this problem is unknown, as such no reliable solution exists for this problem. Setting SDL_DYNAMIC_API=/usr/lib/libSDL2.so will actually allow you to run the editor on wayland but it will crash the moment you hover your mouse over certain UI elements.\n\n"
    },
    {
      "title": "Starter Content",
      "level": 3,
      "content": "The StarterContent project is installed to /opt/unreal-engine/Samples/StarterContent/StarterContent.uproject, you can browse to it from the launcher.\n\n"
    },
    {
      "title": "Marketplace Apps",
      "level": 3,
      "content": "The launcher with the Unreal Marketplace is not available for Linux yet[2], so apps like the ContentExamples project cannot be installed from Linux[3].\n\nThe marketplace apps can be downloaded using the launcher on Windows (or Mac), they are stored in /ProgramData/Epic/EpicGamesLauncher/VaultCache. ProgramData is hidden by default.\n\nThere are several options to download Marketplace content natively:\n\n- use lutris and the Epic Games Store installer, with disabled sandbox you can add content directly into your projects\n- use Epic Asset Manager from flathub or eam-gitAUR which lets you download the assets to the vault\n- there is an implementation of UE4 Marketplace Downloader written in JS.\n\n"
    }
  ]
}