{
  "title": "Improve pacman performance",
  "url": "https://wiki.archlinux.org/title/Improve_pacman_performance",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Mirrors\n- Creating packages\n\nFor general methods to improve the flexibility of the provided tips or pacman itself, see Core utilities and Bash.\n\n"
    },
    {
      "title": "Maintenance",
      "level": 2,
      "content": "See also System maintenance.\n\n"
    },
    {
      "title": "In unused repositories",
      "level": 4,
      "content": "By default, repositories listed in pacman.conf are used for syncing, searching, installing and upgrading from them. This can be changed for more versatility, for example by using some repositories only for searching in them[1]:\n\n```\n/etc/pacman.conf\n```\n\n```\n...\n[multilib]\nUsage = Sync Search\n...\n```\n\nSee pacman.conf(5) § REPOSITORY SECTIONS.\n\n"
    },
    {
      "title": "With version",
      "level": 4,
      "content": "You may want to get the list of installed packages with their version, which is useful when reporting bugs or discussing installed packages.\n\n- List all explicitly installed packages: pacman -Qe.\n- List all packages in the package group named group: pacman -Sg group\n- List all foreign packages (typically manually downloaded and installed or packages removed from the repositories): pacman -Qm.\n- List all native packages (installed from the sync database): pacman -Qn.\n- List all explicitly installed native packages (i.e. present in the sync database) that are not direct or optional dependencies: pacman -Qent.\n- List packages by regex: pacman -Qs regex.\n- List packages by regex with custom output format (needs expac): expac -s \"%-30n %v\" regex.\n\n"
    },
    {
      "title": "With size",
      "level": 4,
      "content": "Figuring out which packages are largest can be useful when trying to free space on your hard drive. There are two options here: get the size of individual packages, or get the size of packages and their dependencies.\n\nThe following command will list all installed packages and their individual sizes:\n\n```\n$ LC_ALL=C.UTF-8 pacman -Qi | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | LC_ALL=C.UTF-8 sort -h\n```\n\nTo list package sizes with their dependencies,\n\n- Install expac and run expac -H M '%m\\t%n' | sort -h.\n- Run pacgraphAUR with the -c option.\n\nTo list the download size of several packages (leave packages blank to list all packages):\n\n```\n$ expac -S -H M '%k\\t%n' packages\n```\n\nTo list explicitly installed packages not in the meta package base nor package group xorg with size and description:\n\n```\n$ expac -H M \"%011m\\t%-20n\\t%10d\" $(comm -23 <(pacman -Qqen | sort) <({ pacman -Qqg xorg; expac -l '\\n' '%E' base; } | sort -u)) | sort -n\n```\n\nTo list the packages marked for upgrade with their download size:\n\n```\n$ expac -S -H M '%k\\t%n' $(pacman -Qqu) | sort -sh\n```\n\nTo list optional dependencies only:\n\n```\n$ expac -S \"%o\" package\n```\n\n"
    },
    {
      "title": "By date",
      "level": 4,
      "content": "To list the 20 last installed packages with expac, run:\n\n```\n$ expac --timefmt='%Y-%m-%d %T' '%l\\t%n' | sort | tail -n 20\n```\n\nor, with seconds since the epoch (1970-01-01 UTC):\n\n```\n$ expac --timefmt=%s '%l\\t%n' | sort -n | tail -n 20\n```\n\n"
    },
    {
      "title": "Not in a specified group, repository or meta package",
      "level": 4,
      "content": "List explicitly installed packages not in the base meta package:\n\n```\n$ comm -23 <(pacman -Qqe | sort) <(expac -l '\\n' '%E' base | sort)\n```\n\nList explicitly installed packages not in the base meta package or xorg package group:\n\n```\n$ comm -23 <(pacman -Qqe | sort) <({ pacman -Qqg xorg; expac -l '\\n' '%E' base; } | sort -u)\n```\n\nList all installed packages unrequired by other packages, and which are not in the base meta package or xorg package group:\n\n```\n$ comm -23 <(pacman -Qqt | sort) <({ pacman -Qqg xorg; echo base; } | sort -u)\n```\n\nAs above, but with descriptions:\n\n```\n$ expac -H M '%-20n\\t%10d' $(comm -23 <(pacman -Qqt | sort) <({ pacman -Qqg xorg; echo base; } | sort -u))\n```\n\nList all installed packages that are not in the specified repository repo_name (multiple repositories can be checked at once):\n\n```\n$ comm -23 <(pacman -Qq | sort) <(pacman -Sql repo_name | sort)\n```\n\nList all installed packages that are in the repo_name repository (multiple repositories can be checked at once):\n\n```\n$ comm -12 <(pacman -Qq | sort) <(pacman -Sql repo_name | sort)\n```\n\nList all packages on the Arch Linux ISO that are not in the base meta package:\n\n```\n$ comm -23 <(curl https://gitlab.archlinux.org/archlinux/archiso/-/raw/master/configs/releng/packages.x86_64) <(expac -l '\\n' '%E' base | sort)\n```\n\n"
    },
    {
      "title": "Development packages",
      "level": 4,
      "content": "To list all development/unstable packages, run:\n\n```\n$ pacman -Qq | grep -Ee '-(bzr|cvs|darcs|git|hg|svn)$'\n```\n\n"
    },
    {
      "title": "Dependencies of a package",
      "level": 4,
      "content": "To obtain the list of the dependencies of a package, the simplest solution is reading the output of:\n\n```\n$ pacman -Qi package\n```\n\nFor automation, instead of the error-prone method of parsing pacman output, use expac:\n\n```\n$ expac -S '%D' package\n```\n\n"
    },
    {
      "title": "With optional dependencies",
      "level": 4,
      "content": "To list explicitly-installed packages with their optional dependencies, run:\n\n```\n$ LC_ALL=C.UTF-8 pacman -Qei | sed '/^[^NO ]/d;/None$/d' | awk 'BEGIN{RS=ORS=\"\\n\\n\";FS=OFS=\"\\n\\\\S\"} /Optional Deps/ {print $1\"\\nO\"$2}'\n```\n\nAlternatively, with expac:\n\n```\n$ expac -d '\\n\\n' -l '\\n\\t' -Q '%n\\n\\t%O' $(pacman -Qeq)\n```\n\nTo list them while omitting optional dependencies you have already installed, run:\n\n```\n$ LC_ALL=C.UTF-8 pacman -Qei | sed '/^[^NO ]/d;/None$/d' | awk 'BEGIN{RS=ORS=\"\\n\\n\";FS=OFS=\"\\n\\\\S\"} /Optional Deps/ {print $1\"\\nO\"$2}' | sed 's/^Optional Deps   ://;/\\[installed\\]$/d;s/\\s\\+/ /'\n```\n\n"
    },
    {
      "title": "Browsing packages",
      "level": 3,
      "content": "To browse all installed packages with an instant preview of each package:\n\n```\n$ pacman -Qq | fzf --preview 'pacman -Qil {}' --layout=reverse --bind 'enter:execute(pacman -Qil {} | less)'\n```\n\nThis uses fzf to present a two-pane view listing all packages with package info shown on the right.\n\nEnter letters to filter the list of packages; use arrow keys (or Ctrl-j/Ctrl-k) to navigate; press Enter to see package info under less.\n\nTo browse all packages currently known to pacman (both installed and not yet installed) in a similar way, using fzf, use:\n\n```\n$ pacman -Slq | fzf --preview 'pacman -Si {}' --layout=reverse\n```\n\nThe navigational keybindings are the same, although Enter will not work in the same way.\n\n"
    },
    {
      "title": "Listing files owned by a package with size",
      "level": 3,
      "content": "This one might come in handy if you have found that a specific package uses a huge amount of space and you want to find out which files make up the most of that.\n\n```\n$ pacman -Qlq package | grep -v '/$' | xargs -r du -h | sort -h\n```\n\n"
    },
    {
      "title": "Identify files not owned by any package",
      "level": 3,
      "content": "If your system has stray files not owned by any package (a common case if you do not use the package manager to install software), you may want to find such files in order to clean them up.\n\nOne method is to list all files of interest and check them against pacman:\n\n```\n# (export LC_ALL=C.UTF-8; comm -13 <(pacman -Qlq | sed 's,/$,,' | sort) <(find /etc /usr /opt -path /usr/lib/modules -prune -o -print | sort))\n```\n\n"
    },
    {
      "title": "Tracking unowned files created by packages",
      "level": 3,
      "content": "Most systems will slowly collect several ghost files such as state files, logs, indexes, etc. through the course of usual operation.\n\npacreport from pacutils can be used to track these files and their associations via /etc/pacreport.conf (see pacreport(1) § FILES).\n\nAn example may look something like this (abridged):\n\n```\n/etc/pacreport.conf\n```\n\n```\n[Options]\nIgnoreUnowned = usr/share/applications/mimeinfo.cache\n\n[PkgIgnoreUnowned]\nalsa-utils = var/lib/alsa/asound.state\nbluez = var/lib/bluetooth\nca-certificates = etc/ca-certificates/trust-source/*\ndbus = var/lib/dbus/machine-id\nglibc = etc/ld.so.cache\ngrub = boot/grub/*\nlinux = boot/initramfs-linux.img\npacman = var/lib/pacman/local\nupdate-mime-database = usr/share/mime/magic\n```\n\nThen, when using pacreport --unowned-files as the root user, any unowned files will be listed if the associated package is no longer installed (or if any new files have been created).\n\nAdditionally, aconfmgr (aconfmgr-gitAUR) allows tracking modified and orphaned files using a configuration script.\n\n"
    },
    {
      "title": "Removing unused packages (orphans)",
      "level": 3,
      "content": "Orphans are packages that were installed as a dependency and are no longer required by any package.\n\nThey can accumulate on your system over time either due to uninstalling packages using pacman -R package instead of pacman -Rs package, installing packages as makedepends, or packages removing dependencies in newer versions.\n\nFor recursively removing orphans and their configuration files:\n\n```\n# pacman -Qdtq | pacman -Rns -\n```\n\nIf no orphans were found, the output is error: argument '-' specified with empty stdin. This is expected as no arguments were passed to pacman -Rns. The error can be avoided by prefixing the second command with ifne(1) from the moreutils package.\n\nIf there is a package listed that you do not want to remove, it can be excluded from the list of orphans by marking it as explicitly installed:\n\n```\n# pacman -D --asexplicit package\n```\n\n"
    },
    {
      "title": "Detecting more unneeded packages",
      "level": 3,
      "content": "In some cases the method above will not detect all possible unneeded packages. E.g. dependency cycles (also known as \"circular dependencies\"), excessive dependencies (fulfilled more than once), some non-explicit optionals etc.\n\nTo detect such packages:\n\n```\n$ pacman -Qqd | pacman -Rsu --print -\n```\n\nIf you want to remove all packages in the list at once, run the command without --print argument.\n\n"
    },
    {
      "title": "Removing everything but essential packages",
      "level": 3,
      "content": "If it is ever necessary to remove all packages except the essentials packages, one method is to set the installation reason of the non-essential ones as dependency and then remove all unnecessary dependencies.\n\nFirst, for all the packages \"explicitly installed\", change their installation reason to \"installed as a dependency\":\n\n```\n# pacman -D --asdeps $(pacman -Qqe)\n```\n\nThen, change the installation reason to \"explicitly installed\" of only the essential packages, those you do not want to remove, in order to avoid targeting them:\n\n```\n# pacman -D --asexplicit base linux linux-firmware\n```\n\n- Additional packages can be added to the above command in order to avoid being removed. See Installation guide#Install essential packages for more info on other packages that may be necessary for a fully functional base system.\n- This will also select the bootloader's package for removal. The system should still be bootable, but the boot parameters might not be changeable without it.\n\nFinally, follow the instructions in #Removing unused packages (orphans) to remove all packages that are \"installed as a dependency\".\n\n"
    },
    {
      "title": "Getting the dependencies list of several packages",
      "level": 3,
      "content": "Dependencies are alphabetically sorted and doubles are removed.\n\n```\n$ LC_ALL=C.UTF-8 pacman -Si packages | awk -F'[:<=>]' '/^Depends/ {print $2}' | xargs -n1 | sort -u\n```\n\nAlternatively, with expac:\n\n```\n$ expac -l '\\n' %E -S packages | sort -u\n```\n\n"
    },
    {
      "title": "Listing changed backup files",
      "level": 3,
      "content": "To list configuration files tracked by pacman as susceptible of containing user changes (i.e. files listed in the PKGBUILD backup array) and having received user modifications, use the following command:\n\n```\n# pacman -Qii | awk '/\\[modified\\]/ {print $(NF - 1)}'\n```\n\nRunning this command with root permissions will ensure that files readable only by root (such as /etc/sudoers) are included in the output.\n\nThis can be used when doing a selective system backup or when trying to replicate a system configuration from one machine to another.\n\n- See #Listing all changed files from packages to list all changed files pacman knows about, not only backup files.\n- See #Identify files not owned by any package to list all files in the system that are not tracked by pacman.\n\n"
    },
    {
      "title": "Back up the pacman database",
      "level": 3,
      "content": "The following command can be used to back up the local pacman database:\n\n```\n$ tar -cjf pacman_database.tar.bz2 /var/lib/pacman/local\n```\n\nStore the backup pacman database file on one or more offline media, such as a USB stick, external hard drive, or CD-R.\n\nThe database can be restored by moving the pacman_database.tar.bz2 file into the / directory and executing the following command:\n\n```\n# tar -xjvf pacman_database.tar.bz2\n```\n\n"
    },
    {
      "title": "Check changelogs easily",
      "level": 3,
      "content": "When maintainers update packages, commits are often commented in a useful fashion. Users can quickly check these from the command line by installing pacologAUR. This utility lists recent commit messages for packages from the official repositories or the AUR, by using pacolog package.\n\n"
    },
    {
      "title": "Installation and recovery",
      "level": 2,
      "content": "Alternative ways of getting and restoring packages.\n\n"
    },
    {
      "title": "Installing packages from a CD/DVD or USB stick",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with #Custom local repository.** This article or section is a candidate for merging with #Custom local repository.\n\nThis article or section is a candidate for merging with #Custom local repository.\n\nTo download packages, or groups of packages:\n\n```\n# cd ~/Packages\n# pacman -Syw --cachedir . base base-devel grub-bios xorg gimp\n# repo-add ./custom.db.tar.zst ./*.pkg.tar.zst\n```\n\nPacman, which will reference the host installation by default, will not properly resolve and download existing dependencies. In cases where all packages and dependencies are wanted, it is recommended to create a temporary blank DB and reference it with --dbpath:\n\n```\n# mkdir /tmp/blankdb\n# pacman -Syw --cachedir . --dbpath /tmp/blankdb base base-devel grub-bios xorg gimp\n# repo-add ./custom.db.tar.zst ./*.pkg.tar.zst\n```\n\nThen you can burn the \"Packages\" directory to an optical disc (e.g. CD, DVD) or transfer it to a USB flash drive, external HDD, etc.\n\nTo install:\n\n1. Mount the media:\n\nFor an optical disc drive:\n\n```\n# mount --mkdir /dev/sr0 /mnt/repo\n```\n\nFor a USB flash drive, hard disk drive, etc.:\n\n```\n# mount --mkdir /dev/sdxY /mnt/repo\n```\n\n2. Edit pacman.conf and add this repository before the other ones (e.g. extra, core, etc.). This is important. Do not just uncomment the one on the bottom. This way it ensures that the files from the CD/DVD/USB take precedence over those in the standard repositories:\n\n```\n/etc/pacman.conf\n```\n\n```\n[custom]\nSigLevel = PackageRequired\nServer = file:///mnt/repo/Packages\n```\n\n3. Finally, synchronize the pacman database to be able to use the new repository:\n\n```\n# pacman -Syu\n```\n\n"
    },
    {
      "title": "Custom local repository",
      "level": 3,
      "content": "Use the repo-add script included with pacman to generate a database for a personal repository. Use repo-add --help for more details on its usage. A package database is a tar file, optionally compressed. Valid extensions are .db or .files followed by an archive extension of .tar, .tar.gz, .tar.bz2, .tar.xz, .tar.zst, or .tar.Z. The file does not need to exist, but all parent directories must exist.\n\nTo add a new package to the database, or to replace the old version of an existing package in the database, run:\n\n```\n$ repo-add /path/to/repo.db.tar.zst /path/to/package-1.0-1-x86_64.pkg.tar.zst\n```\n\nThe database and the packages do not need to be in the same directory when using repo-add, but keep in mind that when using pacman with that database, they should be together. Storing all the built packages to be included in the repository in one directory also allows to use shell glob expansion to add or update multiple packages at once:\n\n```\n$ repo-add /path/to/repo.db.tar.zst /path/to/*.pkg.tar.zst\n```\n\nIf you are looking to support multiple architectures then precautions should be taken to prevent errors from occurring. Each architecture should have its own directory tree:\n\n```\n$ tree ~/customrepo/ | sed \"s/$(uname -m)/arch/g\"\n```\n\n```\n/home/archie/customrepo/\n└── arch\n    ├── customrepo.db -> customrepo.db.tar.zst\n    ├── customrepo.db.tar.zst\n    ├── customrepo.files -> customrepo.files.tar.zst\n    ├── customrepo.files.tar.zst\n    └── personal-website-git-b99cce0-1-arch.pkg.tar.zst\n\n1 directory, 5 files\n```\n\nThe repo-add executable checks if the package is appropriate. If this is not the case you will be running into error messages similar to this:\n\n```\n==> ERROR: '/home/archie/customrepo/arch/foo-arch.pkg.tar.zst' does not have a valid database archive extension.\n```\n\nrepo-remove is used to remove packages from the package database, except that only package names are specified on the command line.\n\n```\n$ repo-remove /path/to/repo.db.tar.zst pkgname\n```\n\nOnce the local repository database has been created, add the repository to pacman.conf for each system that is to use the repository. An example of a custom repository is in pacman.conf. The repository's name is the database filename with the file extension omitted. In the case of the example above the repository's name would simply be repo. Reference the repository's location using a file:// URL, or via HTTP using http://localhost/path/to/directory.\n\nIf willing, add the custom repository to the list of unofficial user repositories, so that the community can benefit from it.\n\n"
    },
    {
      "title": "Network shared pacman cache",
      "level": 3,
      "content": "See Package Proxy Cache.\n\n"
    },
    {
      "title": "Recreate a package from the file system",
      "level": 3,
      "content": "To recreate a package from the file system, use fakepkgAUR. Files from the system are taken as they are, hence any modifications will be present in the assembled package. Distributing the recreated package is therefore discouraged; see ABS and Arch Linux Archive for alternatives.\n\n"
    },
    {
      "title": "List of installed packages",
      "level": 3,
      "content": "Keeping a list of all explicitly installed packages can be useful to backup a system or quicken the installation of a new one:\n\n```\n$ pacman -Qqe > pkglist.txt\n```\n\n- With option -t, the packages already required by other explicitly installed packages are not mentioned. If reinstalling from this list they will be installed but as dependencies only.\n- With option -n, foreign packages (e.g. from AUR) would be omitted from the list.\n- Use comm -13 <(pacman -Qqdt | sort) <(pacman -Qqdtt | sort) > optdeplist.txt to also create a list of the installed optional dependencies which can be reinstalled with --asdeps.\n- Use pacman -Qqem > foreignpkglist.txt to create the list of AUR and other foreign packages that have been explicitly installed.\n\nTo keep an up-to-date list of explicitly installed packages (e.g. in combination with a versioned /etc/), you can set up a hook. Example:\n\n```\n[Trigger]\nOperation = Install\nOperation = Remove\nType = Package\nTarget = *\n\n[Action]\nWhen = PostTransaction\nExec = /bin/sh -c '/usr/bin/pacman -Qqe > /etc/pkglist.txt'\n```\n\n"
    },
    {
      "title": "Install packages from a list",
      "level": 3,
      "content": "To install packages from a previously saved list of packages, while not reinstalling previously installed packages that are already up-to-date, run:\n\n```\n# pacman -S --needed - < pkglist.txt\n```\n\nHowever, it is likely foreign packages such as from the AUR or installed locally are present in the list. To filter out from the list the foreign packages, the previous command line can be enriched as follows:\n\n```\n# pacman -S --needed $(comm -12 <(pacman -Slq | sort) <(sort pkglist.txt))\n```\n\nEventually, to make sure the installed packages of your system match the list and remove all the packages that are not mentioned in it:\n\n```\n# pacman -Rsu $(comm -23 <(pacman -Qq | sort) <(sort pkglist.txt))\n```\n\n"
    },
    {
      "title": "Listing all changed files from packages",
      "level": 3,
      "content": "If you are suspecting file corruption (e.g. by software/hardware failure), but are unsure if files were corrupted, you might want to compare with the hash sums in the packages. This can be done with pacutils:\n\n```\n# paccheck --sha256sum --quiet\n```\n\nFor recovery of the database see #Restore pacman's local database. The mtree files can also be extracted as .MTREE from the respective package files.\n\nNote: **not** \n\n"
    },
    {
      "title": "Reinstalling all packages",
      "level": 3,
      "content": "To reinstall all native packages, use:\n\n```\n# pacman -Qqn | pacman -S -\n```\n\nForeign (AUR) packages must be reinstalled separately; you can list them with pacman -Qqm.\n\nPacman preserves the installation reason by default.\n\n"
    },
    {
      "title": "Restore pacman's local database",
      "level": 3,
      "content": "See pacman/Restore local database.\n\n"
    },
    {
      "title": "Recovering a USB key from existing install",
      "level": 3,
      "content": "If you have Arch installed on a USB key and manage to mess it up (e.g. removing it while it is still being written to), then it is possible to re-install all the packages and hopefully get it back up and working again (assuming USB key is mounted in /newarch)\n\n```\n# pacman -S $(pacman -Qq --dbpath /newarch/var/lib/pacman) --root /newarch --dbpath /newarch/var/lib/pacman\n```\n\n"
    },
    {
      "title": "Viewing a single file inside a .pkg file",
      "level": 3,
      "content": "For example, if you want to see the contents of /etc/systemd/logind.conf supplied within the systemd package:\n\n```\n$ bsdtar -xOf /var/cache/pacman/pkg/systemd-250.4-2-x86_64.pkg.tar.zst etc/systemd/logind.conf\n```\n\nOr you can use vim to browse the archive:\n\n```\n$ vim /var/cache/pacman/pkg/systemd-250.4-2-x86_64.pkg.tar.zst\n```\n\n"
    },
    {
      "title": "Find applications that use libraries from older packages",
      "level": 3,
      "content": "Already running processes do not automatically notice changes caused by updates. Instead, they continue using old library versions. That may be undesirable, due to potential issues related to security vulnerabilities or other bugs, and version incompatibility.\n\nProcesses depending on updated libraries may be found using either htop, which highlights the names of the affected programs, or with a snippet based on lsof, which also prints the names of the libraries:\n\n```\n# lsof +c 0 | grep -w DEL | awk '1 { print $1 \": \" $NF }' | sort -u\n```\n\nThis solution will only detect files, that are normally kept opened by running processes, which basically limits it to shared libraries (.so files). It may miss some dependencies, like those of Java or Python applications.\n\n"
    },
    {
      "title": "Installing only content in required languages",
      "level": 3,
      "content": "Many packages install documentation and translations in several languages. Some programs are designed to remove such unnecessary files, such as localepurgeAUR, which runs after a package is installed to delete the unneeded locale files. A more preemptive approach is provided through the NoExtract directive in /etc/pacman.conf, which prevent these files from ever being installed.\n\nTo prevent the installation of all translations for help files, except for the C locale, add:\n\n```\nNoExtract = usr/share/help/* !usr/share/help/C/*\n```\n\nTo prevent the installation of all the HTML documentation, add:\n\n```\nNoExtract = usr/share/gtk-doc/html/*\nNoExtract = usr/share/doc/HTML/*\n```\n\nNote: **all** \n\nTo prevent the installation of the various locales, except the required ones, add:\n\n```\nNoExtract = usr/share/locale/* usr/share/X11/locale/*/* usr/share/i18n/locales/* opt/google/chrome/locales/* !usr/share/X11/locale/C/* !usr/share/X11/locale/en_US.UTF-8/*\nNoExtract = !usr/share/X11/locale/compose.dir !usr/share/X11/locale/iso8859-1/*\nNoExtract = !*locale*/en*/* !usr/share/*locale*/locale.*\nNoExtract = !usr/share/*locales/en_?? !usr/share/*locales/i18n* !usr/share/*locales/iso*\nNoExtract = usr/share/i18n/charmaps/* !usr/share/i18n/charmaps/UTF-8.gz !usr/share/i18n/charmaps/ANSI_X3.4-1968.gz\nNoExtract = !usr/share/*locales/trans*\nNoExtract = !usr/share/*locales/C !usr/share/*locales/POSIX\n```\n\nTo prevent the installation of the translated man pages, add:\n\n```\nNoExtract = usr/share/man/* !usr/share/man/man*\n```\n\nTo prevent the installation of the language files in vim-runtime, add:\n\n```\nNoExtract = usr/share/vim/vim*/lang/*\n```\n\nTo prevent the installation of all but English content in Qt applications, add:\n\n```\nNoExtract = usr/share/*/translations/*.qm !usr/share/*/translations/*en.qm usr/share/*/nls/*.qm usr/share/qt/phrasebooks/*.qph usr/share/qt/translations/*.pak !*/en-US.pak\n```\n\nTo prevent the installation of all but English content in Chromium and Electron applications, add:\n\n```\nNoExtract = usr/share/*/locales/*.pak opt/*/locales/*.pak usr/lib/*/locales/*.pak !*/en-US.pak\n```\n\nTo prevent the installation of English help files in LibreOffice, add:\n\n```\nNoExtract = usr/lib/libreoffice/help/en-US/*\n```\n\nTo prevent the installation of all but English content from OnlyOffice, add:\n\n```\nNoExtract = opt/onlyoffice/desktopeditors/dictionaries/* !opt/onlyoffice/desktopeditors/dictionaries/en_US/*\nNoExtract = opt/onlyoffice/desktopeditors/editors/web-apps/apps/*/main/locale/* !*/en.json\nNoExtract = opt/onlyoffice/desktopeditors/editors/web-apps/apps/*/main/resources/help/*/* !*/help/en/*\nNoExtract = opt/onlyoffice/desktopeditors/editors/web-apps/apps/*/main/resources/symboltable/* !*/en.json\nNoExtract = opt/onlyoffice/desktopeditors/editors/web-apps/apps/documenteditor/forms/locale/* !*/en.json\nNoExtract = opt/onlyoffice/desktopeditors/editors/web-apps/apps/spreadsheeteditor/main/resources/formula-lang/* !*/en.json !*/en_desc.json\nNoExtract = opt/onlyoffice/desktopeditors/converter/empty/*/* !opt/onlyoffice/desktopeditors/converter/empty/en-US/*\nNoExtract = opt/onlyoffice/desktopeditors/converter/templates/*/* !opt/onlyoffice/desktopeditors/converter/templates/EN/*\n```\n\nTo prevent the installation of all but the English iBus dictionary for emojis, add:\n\n```\nNoExtract = usr/share/ibus/dicts/emoji-*.dict !usr/share/ibus/dicts/emoji-en.dict\n```\n\n"
    },
    {
      "title": "Installing packages on bad connection",
      "level": 3,
      "content": "When trying to install a package from a bad connection (e.g. a train using a cell phone), use the --disable-download-timeout option to lessen the chance of receiving errors such as:\n\n```\nerror: failed retrieving file […] Operation too slow. Less than 1 bytes/sec transferred the last 10 seconds\n```\n\nor\n\n```\nerror: failed retrieving file […] Operation timed out after 10014 milliseconds with 0 out of 0 bytes received\n```\n\n"
    },
    {
      "title": "Download speeds",
      "level": 3,
      "content": "When downloading packages pacman uses the mirrors in the order they are in /etc/pacman.d/mirrorlist. The mirror which is at the top of the list by default however may not be the fastest for you. To select a faster mirror, see Mirrors.\n\nPacman's speed in downloading packages can also be improved by enabling parallel downloads, a major feature request (FS#20056) added with pacman 6.0.0.\n\nInstead of pacman's built-in file downloader, a separate application can also be used to download packages.\n\nIn all cases, make sure you have the latest pacman before doing any modifications.\n\n```\n# pacman -Syu\n```\n\n"
    },
    {
      "title": "Powerpill",
      "level": 4,
      "content": "Powerpill is a pacman wrapper that uses parallel and segmented downloading to try to speed up downloads for pacman.\n\n"
    },
    {
      "title": "wget",
      "level": 4,
      "content": "This is also very handy if you need more powerful proxy settings than pacman's built-in capabilities.\n\nTo use wget, first install the wget package then modify /etc/pacman.conf by uncommenting the following line in the [options] section:\n\n```\nXferCommand = /usr/bin/wget --passive-ftp --show-progress -c -q -N %u\n```\n\nInstead of uncommenting the wget parameters in /etc/pacman.conf, you can also modify the wget configuration file directly (the system-wide file is /etc/wgetrc, per user files are $HOME/.wgetrc).\n\n"
    },
    {
      "title": "aria2",
      "level": 4,
      "content": "aria2 is a lightweight download utility with support for resumable and segmented HTTP/HTTPS and FTP downloads. aria2 allows for multiple and simultaneous HTTP/HTTPS and FTP connections to an Arch mirror, which should result in an increase in download speeds for both file and package retrieval.\n\nNote: **not** \n\nInstall aria2, then edit /etc/pacman.conf by adding the following line to the [options] section:\n\n```\nXferCommand = /usr/bin/aria2c --allow-overwrite=true --continue=true --file-allocation=none --log-level=error --max-tries=2 --max-connection-per-server=2 --max-file-not-found=5 --min-split-size=5M --no-conf --remote-time=true --summary-interval=60 --timeout=5 --dir=/ --out %o %u\n```\n\nSee aria2c(1) § OPTIONS for used aria2c options.\n\n- -d, --dir: The directory to store the downloaded file(s) as specified by pacman.\n- -o, --out: The output file name(s) of the downloaded file(s).\n- %o: Variable which represents the local filename(s) as specified by pacman.\n- %u: Variable which represents the download URL as specified by pacman.\n\n"
    },
    {
      "title": "Other applications",
      "level": 4,
      "content": "There are other downloading applications that you can use with pacman. Here they are, and their associated XferCommand settings:\n\n- snarf: XferCommand = /usr/bin/snarf -N %u\n- lftp: XferCommand = /usr/bin/lftp -c pget %u\n- axel: XferCommand = /usr/bin/axel -n 2 -v -a -o %o %u\n- hget: XferCommand = /usr/bin/hget %u -n 2 -skip-tls false (please read the documentation on the Github project page for more info)\n- saldl: XferCommand = /usr/bin/saldl -c6 -l4 -s2m -o %o %u (please read the documentation on the project page for more info)\n\n"
    },
    {
      "title": "Utilities",
      "level": 2,
      "content": "- isfree — A Bash script to list non-free packages. Based on Parabola's blacklist.\n\n- Lostfiles — Script that identifies files not owned by any package.\n\n- pacutils — Helper library for libalpm based programs.\n\n- pkgfile — Tool that finds what package owns a file.\n\n- pkgtop — Interactive package manager and resource monitor designed for the GNU/Linux.\n\n- Powerpill — Uses parallel and segmented downloading through aria2 and Reflector to try to speed up downloads for pacman.\n\n- repoctl — Tool to help manage local repositories.\n\n- repose — An Arch Linux repository building tool.\n\n- snap-pac — Make pacman automatically use snapper to create pre/post snapshots like openSUSE's YaST.\n\n- vrms-arch — A virtual Richard M. Stallman to tell you which non-free packages are installed.\n\n"
    },
    {
      "title": "Graphical",
      "level": 3,
      "content": "- Deepin App Store — Third party app store for DDE built with DTK, using PackageKit. Supports AppStream metadata.\n\n- Discover — Qt 5 application manager using PackageKit written in C++/QML. Supports AppStream metadata, Flatpak and firmware updates. Part of plasma.\n\n- GNOME PackageKit — GTK 3 package manager using PackageKit written in C.\n\n- pcurses — Curses TUI pacman wrapper written in C++.\n\n- tkPacman — Tk pacman wrapper written in Tcl.\n\n"
    }
  ]
}