{
  "title": "Kata Containers",
  "url": "https://wiki.archlinux.org/title/Kata_Containers",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Docker\n- Podman\n\nKata Containers (previously Clear Containers) is an OCI-compatible application container runtime meant to provide isolation of potentially untrusted processes from the host system and other processes by leveraging virtualization. Currently upstream-supported hypervisors are qemu-desktop, firecracker and cloud-hypervisorAUR.\n\n"
    },
    {
      "title": "Architecture",
      "level": 2,
      "content": "- kata-agent - supervisor process running on the hypervised guest sandbox, tasked with managing its lifetime\n- kata-runtime - container runtime component responsible for handling commands specified by the OCI runtime specification and tasked with launching shims\n- kata-proxy (before 2.0) - routes I/O streams and signals between on-guest agent and host-side processes associated with running a given sandbox using gRPC\n- kata-shim (before 2.0) - container process monitor and reaper\n- kata-ksm-throttler (optional, before 2.0) -\n- kata-linux-container - patched kernel used to launch VMs serving as container/pod sandboxes\n- kata-containers-image - initramfs and rootfs images used for spawning VM sandboxes\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Kata, by default, picks up its configuration from /etc/kata-containers/configuration.toml, but that can be overridden by providing a path to configuration through the KATA_CONF_FILE environment variable. Be sure to initialize configuration from /usr/share/defaults/kata-containers/configuration-qemu.toml.\n\n"
    },
    {
      "title": "v1",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n"
    },
    {
      "title": "Docker",
      "level": 4,
      "content": "In order to use Kata Containers with Docker, the user needs to add it to supported runtimes in /etc/docker/daemon.json:\n\n```\n{\n   \"runtimes\": {\n     \"kata\": {\n       \"path\": \"/usr/bin/kata-runtime\"\n     }\n   }\n }\n```\n\nTo use it as the default runtime for Docker: {\"default-runtime\": \"kata\"} .\n\nTo use it with the Firecracker hypervisor, due to its limitations, the devicemapper storage driver [1] has to be used: {\"storage-driver\": \"devicemapper\"} .\n\nAfterward you can use the runtime key: docker run --runtime kata --rm -ti archlinux/base /bin/bash.\n\n"
    },
    {
      "title": "Podman",
      "level": 4,
      "content": "Running a container: podman --runtime /usr/bin/kata-runtime run --rm -ti archlinux/base /bin/bash.\n\nKeep in mind that a Kata VM sandbox conceptually maps to Kubernetes pods or a shared netns, not just individual containers.\n\n"
    },
    {
      "title": "v2",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nInstall the runtime kata-runtime-binAUR, kernel linux-kata-binAUR and set of initrd and rootfs kata-containers-image-binAUR.\n\nDocker has added support for OCI-compatible runtimes in Docker Engine 23.0 [2]. To run a Docker container using Kata: docker run --runtime io.containerd.kata.v2\n\n"
    },
    {
      "title": "Containerd CLI",
      "level": 4,
      "content": "```\n# ctr image pull docker.io/library/archlinux:latest\n# ctr run --rm -t --runtime io.containerd.kata.v2 docker.io/archlinux/base:latest example-container-name date\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Project's official site\n- Architecture reference documentation\n- Developer Guide (useful for debugging)\n\n"
    }
  ]
}