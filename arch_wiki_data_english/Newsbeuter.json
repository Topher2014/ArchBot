{
  "title": "Newsbeuter",
  "url": "https://wiki.archlinux.org/title/Newsbeuter",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Web feed\n\nNewsboat is an open source news aggregator licensed under the MIT License.\n\nFrom newsboat(1) § DESCRIPTION:\n\nNewsboat is a fork of abandoned Newsbeuter.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the newsboat package. For the development version, install the newsboat-gitAUR package.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Newsboat cannot start without any configured feeds. Feeds can be configured in ~/.newsboat/urls. Newsboat can be started from the command line with\n\n```\n$ newsboat\n```\n\nPress the ? key to see a list of all keybindings. Keybindings can be rebound, see #Configuration.\n\n"
    },
    {
      "title": "Managing feeds",
      "level": 2,
      "content": "Adding, removing, and tagging feeds is done by editing the urls file. By default that is either ~/.newsboat/urls or ~/.config/newsboat/urls. We will use ~/.config/newsboat/urls for the rest of the section.\n\n"
    },
    {
      "title": "RSS or ATOM sources",
      "level": 3,
      "content": "To add URLs, open ~/.config/newsboat/urls with your favorite text editor and add the URLs, one per line:\n\n```\n~/.config/newsboat/urls\n```\n\n```\nhttps://archlinux.org/feeds/news/\nhttps://lwn.net/headlines/newrss\n```\n\nTo add URLs that have restricted access via username/password, simply provide the username/password in the following way:\n\n```\n~/.config/newsboat/urls\n```\n\n```\nhttp://username:password@hostname.domain.tld/feed.rss\n```\n\nIn order to protect username and password, make sure that ~/.config/newsboat/urls has the appropriate permissions. Newsboat also makes sure that usernames and passwords within URLs aren’t displayed in its user interface. In case there is a @ in the username, type it as %40 instead so that it can be distinguished from the @ that separates the username/password part from the hostname part.\n\nTo configure local files as feeds, simply prefix the local path with file://:\n\n```\n~/.config/newsboat/urls\n```\n\n```\nfile:///var/log/rss_eventlog.xml\n```\n\n"
    },
    {
      "title": "HTML as a source",
      "level": 3,
      "content": "If HTML sources can be converted to RSS via a user supplied script, newsboat can both execute this script and consume the output.\n\nThis is accomplished by using the filter: prefix in the configuration file. For example, write a script that can read HTML from stdin and print out an RSS or Atom feed to stdout. Save that script to ~/.config/newsboat/html2rss.sh and add the following feed:\n\n```\n~/.config/newsboat/urls\n```\n\n```\nfilter:~/.config/newsboat/html2rss.sh:https://myurl.com\n```\n\n- For several examples using this strategy, see graysky's newsboat repo.\n- For more discussion, see Possible to config newsboat to look at a web exposed directory and report changes #1157.\n\n"
    },
    {
      "title": "Tagging feeds",
      "level": 3,
      "content": "Every feed can be assigned 0 or more tags. This makes it easy to categorize your feeds as well as the ability to easily apply commands to multiple feeds at once.\n\nUsually, the ~/.config/newsboat/urls file contains one RSS feed URL per line. To assign a tag to an RSS feed, simply attach it as a single word, separated by blanks such as space or tab. If the tag needs to contain spaces, use quotes (\") around the tag (see example below). An example may look like this:\n\n```\n~/.config/newsboat/urls\n```\n\n```\nhttp://blog.fefe.de/rss.xml?html interesting conspiracy news \"cool stuff\"\nhttp://rss.orf.at/news.xml news orf\nhttp://www.heise.de/newsticker/heise.rdf news interesting\n```\n\nStarting Newsboat with this configuration, one can press t to select a tag. Upon selecting the tag \"news\", one will see all three RSS feeds. Pressing t again and e.g. selecting the \"conspiracy\" tag, will only show the http://blog.fefe.de/rss.xml?html RSS feed. Pressing Ctrl-T clears the current tag, and again shows all RSS feeds, regardless of their assigned tags.\n\n"
    },
    {
      "title": "Special tags",
      "level": 4,
      "content": "The name of a feed can be defined with a special tag in your urls file. Simply prefix the tag name with the ~ character and the tag name will become the feed name.\n\nFor example:\n\n```\n~/.config/newsboat/urls\n```\n\n```\nhttp://rss.cnn.com/rss/cnn_topstories.rss \"~CNN Top stories\"\n```\n\nwill define the feed with feed-name \"CNN Top stories\"\n\nA feed can be hidden from the regular list of feeds by prefixing the tag name with an !.\n\nFor example:\n\n```\n~/.config/newsboat/urls\n```\n\n```\nhttp://rss.orf.at/news.xml \"!ORF News (hidden)\"\n```\n\nThe content of a hidden feed can only be found through a query feed.\n\n"
    },
    {
      "title": "Query feeds",
      "level": 3,
      "content": "Custom feeds can be created from existing feeds by creating what is called a query feed: A feed generated by matching articles against a query. Query feeds are defined in your ~/.config/newsboat/urls file like a normal feed. They have the following syntax:\n\n```\nquery:FEEDNAME:FILTER_EXPRESSION [TAG ...]\n```\n\nLike a normal feed, a query feed has a name, FEEDNAME, which is displayed in the feedlist. The filter expression language for FILTER_EXPRESSION is defined in the newsboat manual. Query feeds can be optionally tagged, just like a normal feed. See #Tagging feeds.\n\n"
    },
    {
      "title": "Basic examples",
      "level": 4,
      "content": "```\n~/.config/newsboat/urls\n```\n\n```\n\"query:Example1:age > 1\"\n\"query:Example2:(tags # \\\"example2\\\") and (title =~ \\\"example2\\\")\"\n\"query:Example3:(rssurl =~ \\\"example3\\\") or (total_count > 3)\"\n```\n\nThe first example defines a feed named Example1 that will contain all articles that are older than a day\n\nThe second example defines a feed named Example2 that will contain all articles whose feed was tagged example2 and whose article title matches example2. Here the # is the \"contains\" operator.\n\nThe third example defines a feed named Example3 that will contain all articles whose feed url matches the regular expression example3 or all articles that are apart of a feed that contain more than 3 articles.\n\n"
    },
    {
      "title": "Unread articles",
      "level": 4,
      "content": "To create a feed named Unread Articles that contains all unread articles, define the following:\n\n```\n~/.config/newsboat/urls\n```\n\n```\n\"query:Unread Articles:unread = \\\"yes\\\"\"\n```\n\n"
    },
    {
      "title": "Amalgamating multiple feeds into one",
      "level": 4,
      "content": "A good use of query feeds is when you are following a creator whose content is spread across multiple feeds. You can use a query feed to amalgamate all their content into one place.\n\n```\n~/.config/newsboat/urls\n```\n\n```\n\"query:Metafeed:tags # \\\"metafeed\\\"\"\nhttps://feed.url/1 metafeed !\nhttps://feed.url/2 metafeed !\nhttps://feed.url/3 metafeed !\n```\n\nThe trick is to assign each individual feed a unique tag - here we used metafeed - so that we can match against it in the filter expression. We also make use of #Hidden feeds - the ! at the end of each feed - so that the individual feeds do not show up in the feedlist.\n\n"
    },
    {
      "title": "Filtering a specific feed",
      "level": 4,
      "content": "If a feed contains content you do not want to see, you can filter it by using a query feed. For example, to monitor package updates you are interested in, you can use:\n\n```\n~/.config/newsboat/urls\n```\n\n```\n\"query:Package Updates:(tags # \\\"packageupdates\\\") and (title =~ \\\"linux [0-9]|newsboat\\\")\"\nhttps://archlinux.org/feeds/packages/ packageupdates !\n```\n\nThis feed will only display updates to linux and newsboat.\n\n"
    },
    {
      "title": "Ignoring articles",
      "level": 3,
      "content": "As with query feeds, another way to filter feeds is by using the ignore-article command in your ~/.config/newsboat/config. It has the following syntax\n\n```\nignore-article FEEDURL FILTER_EXPRESSION\n```\n\n"
    },
    {
      "title": "Examples",
      "level": 4,
      "content": "```\n~/.config/newsboat/config\n```\n\n```\nignore-article \"https://feed/url1\" \"content =~ \\\"tele(phone|communications)\\\"\"                     \nignore-article \"https://feed/url2\" \"title =~ \\\"text_1|text_2\\\"\"\n```\n\nThe first example will ignore all articles in https://feed/url1 whose content matches tele(phone|communications)\n\nThe second example will ignore all articles in https://feed/url2 whose title matches text_1|text_2\n\n"
    },
    {
      "title": "Ignore modes",
      "level": 4,
      "content": "In contrast to filtering with query feeds, Newsboat allows you to decide what to do with articles that match an ignore-article command: you can delete them or not show them.\n\n```\n~/.config/newsboat/config\n```\n\n```\n# ignore-mode \"download\" # Default: Delete them.\n# ignore-mode \"display\"  # Do not show them.\n```\n\n"
    },
    {
      "title": "Comparison with query feeds",
      "level": 4,
      "content": "In terms of pure filtering, whatever you can do with ignore-article you can also do with a query feed.\n\nQuery feeds are defined in your ~/.config/newsboat/urls file while ignore-article commands are placed in your ~/.config/newsboat/config. So if you prefer having all feed related things in one place, you might want to stick to using query feeds.\n\nHowever if you want to save space and prevent newsboat from downloading certain articles, then using ignore-article is your only choice.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Several aspects of Newsboat’s behaviour can be configured via a configuration file which is located, by default, in ~/.newsboat/config or ~/.config/newsboat/config. This configuration file contains lines of the form:\n\n```\n<config-command> <arg1> ...\n```\n\n"
    },
    {
      "title": "Color schemes",
      "level": 3,
      "content": "The package ships with a number of schemes in /usr/share/doc/newsboat/contrib/colorschemes/ which can be loaded with the include command like so:\n\n```\ninclude /usr/share/doc/newsboat/contrib/colorschemes/inkpot\n```\n\n"
    },
    {
      "title": "Additional options",
      "level": 3,
      "content": "The configuration file can also contain comments, which start with the # character and go as far as the end of line. To enter a configuration argument that contains spaces, use quotes \" around the whole argument. It is even possible to integrate the output of external commands into the configuration. The text between two backticks ` is evaluated as shell command, and its output is put on its place instead. This works like backtick evaluation in Bourne-compatible shells and allows users to use external information from the system within the configuration.\n\nSee [1] and [2] for example configurations.\n\n"
    },
    {
      "title": "Automatic feed reloads",
      "level": 3,
      "content": "Newsboat can automatically reload all feeds on startup with the following configuration:\n\n```\nauto-reload yes\n```\n\nWith this setting, Newsboat also runs periodic auto-reloads – by default, every 60 minutes. The number of minutes between automatic reloads can be configured like so:\n\n```\nreload-time <desired number of minutes>\n```\n\nAlternatively, use cron or systemd to automatically reload feeds. Just add a line in your crontab, or create a systemd service/timer unit combo that issues the following command:\n\n```\n/usr/bin/newsboat -x reload\n```\n\n"
    },
    {
      "title": "Loading of feeds in parallel for faster updates",
      "level": 3,
      "content": "By default, Newsboat will attempt to update entries in ~/.newsboat/urls in sequence; however, the following setting will update them n at a time, in parallel. Adjust n to your liking.\n\n```\nreload-threads 100\n```\n\n"
    },
    {
      "title": "Pass article URL to external command",
      "level": 3,
      "content": "A clever little hack allows one to pass the URL of an article to an external command. The idea is to use a macro to set the browser that Newsboat opens the article with to the path of some other command and then change it back afterwards.\n\nFor example, subscribers of a particular youtube channel can open the video with mpv, by doing the following:\n\n```\nmacro y set browser \"mpv %u\" ; open-in-browser ; set browser \"elinks %u\"\n```\n\n"
    },
    {
      "title": "Subheadings",
      "level": 3,
      "content": "There is another little hack that allows the user to add subheadings to sort feeds more effectively. This hack involves adding fake feeds to the urls file like so:\n\n```\n---Heading---\n```\n\nThen in ~/.config/newsboat/config, add the following two lines:\n\n```\nhighlight feedlist \"---.*---\" COLOR_OF_YOUR_CHOOSING default bold\nhighlight feedlist \".*0/0..\" default default invis\n```\n\nOf course, replace COLOR_OF_YOUR_CHOOSING with a newsboat supported color.\n\nThis trick can also interact with Tags by replacing ---Heading--- with:\n\n```\n\"query:---Heading---:tags # \\\"Tag\\\"\"\n```\n\nThen tagging all the feeds below the heading with Tag.\n\n"
    },
    {
      "title": "Newsboat will not start",
      "level": 3,
      "content": "Newsboat cannot start without any configured feeds! To add URLs, see #Managing feeds. If that is not the problem, check to see if another instance of Newsboat is running. Newsboat issues a lock on its database so that only one instance can access it at a time; thus, attempting to open a second instance will fail.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official web site\n- Full documentation\n- Arabesque: RSS with Newsboat\n\n"
    }
  ]
}