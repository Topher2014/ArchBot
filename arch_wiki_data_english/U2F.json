{
  "title": "U2F",
  "url": "https://wiki.archlinux.org/title/U2F",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Universal 2nd Factor (U2F) is an open standard that strengthens and simplifies two-factor authentication (2FA) using specialized USB or NFC devices based on similar security technology found in smart cards.\n\nWhile initially developed by Google and Yubico, with contribution from NXP Semiconductors, the standard is now hosted by the FIDO Alliance.\n\nFor all articles on U2F and U2F-devices see: Category:Universal 2nd Factor.\n\nWebAuthn is a more recent standard.\n\n"
    },
    {
      "title": "Authentication for websites",
      "level": 2,
      "content": "U2F is supported by major sites like Google, Facebook, Twitter, or GitHub. Check out 2fa.directory or dongleauth.com to find other websites and links to setup documentation. For all browsers which support it, likely the only action required is to install libfido2. Yubico offers a demo page for testing.\n\n"
    },
    {
      "title": "Firefox",
      "level": 3,
      "content": "Firefox/Tweaks#Fido U2F authentication\n\n"
    },
    {
      "title": "Chromium/Chrome",
      "level": 3,
      "content": "Chromium/Tips and tricks#U2F authentication\n\n"
    },
    {
      "title": "Authentication for user sessions",
      "level": 2,
      "content": "Yubico, the company creating the YubiKey, develops an U2F PAM module. It can be used to act as a second factor during login or replace the need for a password entirely.\n\n"
    },
    {
      "title": "Installing the PAM module",
      "level": 3,
      "content": "The module is part of the package pam-u2f.\n\n"
    },
    {
      "title": "Adding a key",
      "level": 3,
      "content": "Note: **single user** \n\nKeys need to be added with the tool pamu2fcfg:\n\n```\n$ mkdir ~/.config/Yubico\n$ pamu2fcfg -o pam://hostname -i pam://hostname > ~/.config/Yubico/u2f_keys\n```\n\nAfter entering your PIN, click the button of your U2F key to confirm the key.\n\nIf you own more than one key, append the next ones with\n\n```\n$ pamu2fcfg -o pam://hostname -i pam://hostname -n >> ~/.config/Yubico/u2f_keys\n```\n\n"
    },
    {
      "title": "Passwordless sudo",
      "level": 3,
      "content": "Add\n\n```\n/etc/pam.d/sudo\n```\n\n```\nauth            sufficient      pam_u2f.so cue origin=pam://hostname appid=pam://hostname\n```\n\nas the first line. Be sure to replace the hostname as mentioned above. Then create a new terminal and type sudo ls. Your key's LED should flash and after clicking it the command is executed. The option cue is set to provide indication of what to do, i.e. Please touch the device.\n\nIn order to make the token the only method of sudo (ie. no password fallback) you will need to comment out the other auth methods present. This is usually just the default system-auth include.\n\n```\n/etc/pam.d/sudo\n```\n\n```\n#auth           include         system-auth\n```\n\nYou should also change sufficient to required in the above pam_u2f.so line.\n\n"
    },
    {
      "title": "GDM login",
      "level": 3,
      "content": "Add:\n\n```\n/etc/pam.d/gdm-password\n```\n\n```\nauth            required      pam_u2f.so nouserok origin=pam://hostname appid=pam://hostname\n```\n\nafter the existing auth lines. Please note the use of the nouserok option which allows the rule to fail if the user did not configure a key. This way setups with multiple users where only some of them use a U2F key are supported.\n\nSome multi-function security keys (ex. Trezor Model T) which can do U2F / PAM may not advertise the feature on system boot which is intentionally out of the CTAP 2.0 specification[2]. With multiple U2F keys present, this can result in two-minute long delays when used with GDM as pam-u2f does sequential lookups and will wait for the (Trezor) device to timeout before offering presence / touch with the secondary U2F key [3]. You could try adding the nodetect option alongside debug and finish any device specific login (ex. screen PIN) before GDM loads.\n\n"
    },
    {
      "title": "SDDM/KDE",
      "level": 3,
      "content": "SDDM does not appear to support pam_u2f with initial user login. Autologin can be used instead, and then edit /etc/pam.d/kde to just control screen locking.\n\nIf you are using a U2F key with biometric authentication (e.g. Yubikey Bio) and want 1FA, use /etc/pam.d/kde-fingerprint, commenting out the pam_fprintd.so line and placing your changes in its place. This avoids an unnecessary \"unlock\" button that gets displayed after authentication, rather than simply unlocking immediately[4].\n\nFor example:\n\n```\n/etc/pam.d/kde-fingerprint\n```\n\n```\n#%PAM-1.0\n\nauth       required                    pam_shells.so\nauth       requisite                   pam_nologin.so\nauth       requisite                   pam_faillock.so      preauth\n\n# take over fprintd for u2f since yubikey bio is a fingerprint reader and bypasses kscreenlocker's \"unlock\" button\n#-auth      required                    pam_fprintd.so\nauth required pam_u2f.so cue pinverification=0 userverification=1\n\nauth       optional                    pam_permit.so\nauth       required                    pam_env.so\n\naccount    include                     system-local-login\n\npassword   required                    pam_deny.so\n\nsession    include                     system-local-login\n```\n\n"
    },
    {
      "title": "Other authentication methods",
      "level": 3,
      "content": "Enable the PAM module for other services like explained above. For example, to secure the screensaver of Cinnamon, edit /etc/pam.d/cinnamon-screensaver.\n\nFor Polkit, copy the default configuration at /usr/lib/pam.d/polkit-1 to /etc/pam.d/polkit-1 and make your changes there.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 3,
      "content": "If you managed to lock yourself out of the system, boot into recovery mode or from a USB pen drive. Then revert the changes in the PAM configuration and reboot.\n\nIn case the pam-u2f module silently fails, add debug keyword to the auth line in a file in /etc/pam.d/.\n\n"
    },
    {
      "title": "OpenSSH",
      "level": 2,
      "content": "OpenSSH â‰¥8.2 supports FIDO/U2F hardware tokens natively, see SSH keys#FIDO/U2F.\n\n"
    },
    {
      "title": "Data-at-rest encryption with LUKS",
      "level": 2,
      "content": "Note: **This article or section is a candidate for moving to systemd-cryptenroll.** This article or section is a candidate for moving to systemd-cryptenroll.\n\nThis article or section is a candidate for moving to systemd-cryptenroll.\n\nSince version 248, systemd can be use to unlock a LUKS partition using a FIDO2 key.\n\nFirst, you will need to setup your /etc/crypttab file (see below), or customize your initramfs if you wish to unlock your root partition. The full procedure is similar to the use of a TPM chip for unlocking. See systemd-cryptenroll#Trusted Platform Module.\n\nTo register the key, you will need to use the systemd-cryptenroll utility. First, run the following command to list your detected keys:\n\n```\n$ systemd-cryptenroll --fido2-device=list\n```\n\nThen you can register the key in a LUKS slot, specifying auto value (or path to the FIDO2 device such as /dev/hidrawX if you have multiple):\n\n```\n$ systemd-cryptenroll --fido2-device=auto /dev/sdX\n```\n\n"
    },
    {
      "title": "Non-root partitions",
      "level": 3,
      "content": "For a non-root data partition the crypttab would look like this:\n\n```\n/etc/crypttab\n```\n\n```\ndata /dev/sdX none fido2-device=auto\n```\n\nThis should also work if your encrypted partition is a logical volume managed under LVM:\n\n```\n/etc/crypttab\n```\n\n```\ndata /dev/vg1/data none fido2-device=auto\n```\n\n"
    }
  ]
}