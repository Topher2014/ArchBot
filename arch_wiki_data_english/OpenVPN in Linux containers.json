{
  "title": "OpenVPN in Linux containers",
  "url": "https://wiki.archlinux.org/title/OpenVPN_in_Linux_containers",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- OpenVPN\n- PeerGuardian Linux\n- ufw\n- WireGuard\n\nThis article describes how to setup a Linux Container to run several VPN protocols with a \"kill switch\" for secure/private internet use. Doing so offers a distinct advantage over using full-blown virtualization like VirtualBox or QEMU in that the resource overhead is minimal by comparison and able to run on low powered devices.\n\n"
    },
    {
      "title": "Container setup",
      "level": 2,
      "content": "Basic setup and understanding of Linux Containers is required. This article assumes that readers have a base LXC setup and operational.\n\n"
    },
    {
      "title": "OpenVPN in server mode",
      "level": 2,
      "content": "This subsection details some extra setup required for serving OpenVPN in a container. Users wanting to use a provided OpenVPN profile do not need to read this subsection.\n\n"
    },
    {
      "title": "Host setup",
      "level": 3,
      "content": "1. The host OS needs a bridge ethernet setup to allow the container to run. Refer to Linux Containers#Host network configuration for this.\n1. One needs to enable packet forwarding. Refer to Internet sharing#Enable packet forwarding for this.\n1. Although not strictly required, a firewall is highly recommended.\n\n"
    },
    {
      "title": "OpenVPN in client mode",
      "level": 2,
      "content": "The container's configuration needs to be modified to use OpenVPN as follows:\n\n```\n/var/lib/lxc/playtime/config\n```\n\n```\n...\n\n## for OpenVPN\nlxc.mount.entry = /dev/net dev/net none bind,create=dir\nlxc.cgroup2.devices.allow = c 10:200 rwm\n```\n\nInstall openvpn. If using the container to connect to a 3rd party VPN provider, simply place the config file, foo.conf, in /etc/openvpn/client/foo.conf for use. To verify OpenVPN functionality within the container, start OpenVPN via openvpn-client@foo.service and once satisfied enable it to run at boot.\n\nFor other use cases and setup, refer to OpenVPN.\n\n"
    },
    {
      "title": "WireGuard",
      "level": 2,
      "content": "Install wireguard-tools. Users will either have a WireGuard config supplied by a 3rd party VPN service or will be setting up WireGuard to serve in this role. If using the container to connect to the VPN provider, simply place the config file, foo.conf, in /etc/wireguard/ for use.\n\nTo verify WireGuard functionality within the container, start WireGuard via wg-quick@foo.service and once satisfied enable it to run at boot.\n\nFor other use cases, refer to WireGuard.\n\n"
    },
    {
      "title": "Firewall configuration within the container",
      "level": 2,
      "content": "A properly configured firewall running within the container is highly recommended. The role of the firewall within the container is two fold:\n\n1. Provide a functional \"kill switch\" to maintain privacy should the connection to the VPN fail.\n1. Keep nasty stuff out.\n\nThis guide uses ufw which is easy to configure, but other examples can certainly be used.\n\nThe strategy of a functional \"kill switch\" is simply to setup a deny policy and then allow specific services and traffic on the VPN device only. This way if that device's connection is interrupted, there is not a local fallback.\n\nEdit /etc/default/ufw and change the DEFAULT_OUTPUT_POLICY from \"ACCEPT\" to \"DROP\":\n\n```\n/etc/default/ufw\n```\n\n```\nDEFAULT_OUTPUT_POLICY=\"DROP\"\n```\n\nSetup the deny policy:\n\n```\nufw default deny outgoing\nufw default deny incoming\n```\n\nOptionally add any predefined or custom rules defined in a file such as /etc/ufw/applications.d/custom:\n\n```\nufw allow ssh\nufw allow from my-custom-app1\nufw allow from my-custom-app2\n```\n\nOptionally further restrict access from the internal LAN IP range or even a single IP address:\n\n```\nufw allow from 192.168.1.0/24\n```\n\nUsers of WireGuard will have an interface created that bears the same name as the respective configuration file, for example, /etc/wireguard/foo.conf whereas OpenVPN users are likely using tun0. In the line below, substitute 'foo' with the name of the WireGuard config (omitting the .conf suffix) or if using OpenVPN, substitute 'foo' with tun0 or with whatever device is being used:\n\n```\nufw allow out on foo from any to any\n```\n\nFinally, allow access to the IP address of the VPN provider on the expected port and define the expected protocol. In the line below there are three variables to consider defined as such:\n\n- 'xxx' represents the IP address of the WireGuard peer/OpenVPN server. It will be defined in the respective config file provided by the VPN provider.\n- 'yyy' represents the port on which the communication is to take place. Again, this will be in the config file.\n- 'zzz' represents the protocol to be used and is selected from either udp or tcp. Note that WireGuard only supports udp whereas OpenVPN supports either.\n\n```\nufw allow out to xxx port yyy proto zzz\n```\n\nStart ufw and enable ufw.service to start at boot.\n\n"
    },
    {
      "title": "A hacky work-around for using a VPN's domain name in the profile",
      "level": 3,
      "content": "If it is desired to use a domain name in the VPN profile, a shell script on the host can pre-resolve it to a numerical IP, and then pass that IP address to the container via storing it in a variable written to a file therein. That file can in turn be read by a modified VPN systemd service. It works, but is a bit hacky.\n\nEdit the two variables to match the container name and the server name corresponding to your use case:\n\n"
    },
    {
      "title": "On the host",
      "level": 4,
      "content": "Install bind (needed for dig) and create the following script:\n\n```\n/path/to/container-start.sh\n```\n\n```\n#!/bin/bash\n# this script should be called as root\ncontainer=foo\nserver=www.myvpnserver.org\n \nifÂ ! systemctl is-active lxc@\"$container\" &>/dev/null; then\n  ToUse=$(dig +short \"$server\")\n  [[ -d /var/lib/lxc/$container/rootfs/etc/conf.d ]] || mkdir -p /var/lib/lxc/$container/rootfs/etc/conf.d\n  echo \"SERVER=$ToUse\" > /var/lib/lxc/$container/rootfs/etc/conf.d/server.hack.txt\n  systemctl start lxc@\"$container\"\nfi\n```\n\nFrom now on, call that script to start the container. It will use dig to get the IP address from the domain name and then it will start the container.\n\n"
    },
    {
      "title": "From inside the container",
      "level": 4,
      "content": "Modify the systemd service starting the VPN as well as create a skeleton profile that can be modified with the IP address defined in /var/lib/lxc/$container/rootfs/etc/conf.d/server.hack.txt by the script we just created.\n\nTo make a skeleton config file, simply rename the live one to another name.\n\nFor example using WireGuard:\n\n```\nmv /etc/wireguard/foo.conf /etc/wireguard/foo.skel\n```\n\nNow edit /etc/wireguard/foo.skel to substitute the Endpoint = www.myvpnserver.org to @@@, for example:\n\n```\nEndpoint = @@@:51820\n```\n\nOr if using OpenVPN:\n\n```\nmv /etc/openvpn/client/foo.conf /etc/openvpn/client/foo.skel\n```\n\nEdit /etc/openvpn/client/foo.skel to substitute the remote www.myvpnserver.org to @@@, for example:\n\n```\nremote @@@\n```\n\nFinally, create a drop-in file, to read in the IP and to substitute it for the actual profile.\n\nExample using WireGuard:\n\n```\n/etc/systemd/system/wg-quick@foo.service.d/override.conf\n```\n\n```\n[Service]\nEnvironmentFile=-/etc/conf.d/server.hack.txt\nExecStartPre=/bin/bash -ac \"sed s/@@@/$SERVER/ </etc/wireguard/foo.skel >/etc/wireguard/foo.conf\"\n```\n\nExample using OpenVPN:\n\n```\n/etc/systemd/system/openvpn-client@foo.service.d/override.conf\n```\n\n```\n[Service]\nEnvironmentFile=-/etc/conf.d/server.hack.txt\nExecStartPre=/bin/bash -ac \"sed s/@@@/$SERVER/ </etc/openvpn/client/foo.skel >/etc/openvpn/client/foo.conf\"\n```\n\n"
    },
    {
      "title": "Test the service",
      "level": 2,
      "content": "From within the running container, (connected via ssh or via lxc-attach -n playtime) test the setup by exporting a browser to the host's machine X server:\n\n```\n$ DISPLAY=:0 firefox\n```\n\nThe result should be a firefox window in the host's X server with the title, \"Mozilla Firefox (playtime).\" A number of websites can be used to verify IP address and status of DNS entries. Once such site is ipleak dot net.\n\nAt this point, only a the DNS entry/entries corresponding to those defined in the profile should be displayed.\n\n"
    }
  ]
}