{
  "title": "Kbuilder",
  "url": "https://wiki.archlinux.org/title/Kbuilder",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "kbuilder is a bash script that allows you to build one of the four officially supported kernels locally with your own optional patches and configuration, under a different package name.\n\nFor example, you could fetch the sources of the linux-lts kernel, apply a patch that optimizes the kernel for intel processors, and install that kernel as linux-lts-intel-optimized.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "The following methods can be used to get kbuilder:\n\n- Install the kbuilderAUR package.\n- Install the latest development version from the github repository.\n\n"
    },
    {
      "title": "Building a kernel",
      "level": 2,
      "content": "To fetch the default vanilla linux kernel sources and build the package with the default name linux-kbuilder-custom:\n\n```\n$ kbuilder build\n```\n\nDuring the build process, kbuilder will inject a bash shell into the PKGBUILD. The shell will be run right before build() is called, allowing you to add any patches or change the kernel config interactively. The build will continue once you exit from the shell.\n\nTo install the built packages:\n\n```\n$ kbuilder install\n```\n\n"
    },
    {
      "title": "Build variables",
      "level": 2,
      "content": "Although kbuilder does not have a configuration file, you can control the build process with environment variables.\n\n- KBUILDER_SOURCE_PKG should be set as 'linux', 'linux-lts', 'linux-zen' or 'linux-hardened'. kbuilder will fetch and build the kernel specified with this variable. Defaults to 'linux'. For more information about the official kernels, see kernel.\n\n- KBUILDER_PKG_NAME_APPEND can be set as any string. It will be appended to the end of the kernel version and the kernel package. Defaults to 'kbuilder-custom'.\n\n- KBUILDER_BUILD_JOBS should be set as an integer. kbuilder will replace the make all line in the PKGBUILD with make -jX all, where X is the integer specified.\n\nExample usage:\n\n```\n$ KBUILDER_BUILD_JOBS=4 KBUILDER_PKG_NAME_APPEND=\"my-custom-patch\" KBUILDER_SOURCE_PKG=\"linux-zen\" kbuilder build\n```\n\n"
    },
    {
      "title": "Hooks",
      "level": 2,
      "content": "kbuilder looks for hooks in /etc/kbuilder/hooks/, and uses run-parts to execute them right before build() is called. The run-parts command is executed with the flag --regex \"kbuilder-hook-*\".\n\nAn example hook:\n\n```\n/etc/kbuilder/hooks/05-kbuilder-hook-cpu-optimize.sh\n```\n\n```\n#!/bin/bash\n#\n# kbuilder hook for applying graysky2's kernel compiler patch:\n# https://github.com/graysky2/kernel_compiler_patch\n#\n\nSOURCE=\"https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master\"\nPATCH=\"more-uarches-for-kernel-5.17+.patch\"\nHOOK_NAME=\"cpu-optimize-hook\"\n\ncurl -o $PATCH $SOURCE/$PATCH || { echo \"$HOOK_NAME failed when fetching $PATCH from $SOURCE\" ; exit 1 ; }\npatch -Np1 -i \"$PATCH\" || { echo \"$HOOK_NAME failed when applying $PATCH\" ; exit 1 ; }\n```\n\nTo create a hook, create and make executable a file, with a name following the xx-kbuilder-hook-hookname form: they will be run in order according to the xx value.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Kernel\n- The Linux Kernel Documentation\n- Applying Patches To The Linux Kernel\n\n"
    }
  ]
}