{
  "title": ".Xresources",
  "url": "https://wiki.archlinux.org/title/.Xresources",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- X Logical Font Description\n\nX resources file is a user-level configuration dotfile, typically located at ~/.Xresources. It can be used to set configuration parameters for X client applications.\n\nAmong other things they can be used to:\n\n- configure terminal preferences (e.g. terminal colors),\n- set DPI, anti-aliasing, hinting and other X font settings,\n- change the Xcursor theme,\n- theme XScreenSaver,\n- configure low-level X applications like rxvt-unicode, xorg-xclock and xpdf.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the xorg-xrdb package for X server resource database utility and xorg-docs for X.org documentations.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "X(7) § RESOURCES and XrmGetDatabase(3) § FILE SYNTAX provide detailed information on X resources mechanism and file syntax.\n\n~/.Xresources is a conventional file name, xrdb does not claim it. You can use any other file names, like ~/.config/X11/Xresources and ~/.config/X11/Xresources.d/application-name (also see #Samples and #Include files).\n\n"
    },
    {
      "title": "Basic syntax",
      "level": 3,
      "content": "The syntax of an X resources file is a sequence of resource lines as follows:\n\n```\napplication_name.Class.resourceName: value\n      application_name.resourceName: value\n                 Class.resourceName: value\n      application_name*resourceName: value\n                      *resourceName: value\n```\n\napplication_name and Class substrings will never contain a dot (.), the resourceName substring may contain a dot. For example, Dialog.bodyFont is a XScreenSaver internal resource that is specified to set the body font and fallback font:\n\n```\nxscreensaver-auth.default.Dialog.bodyFont: times new roman 12, dejavu serif 12\n```\n\n- Integer (whole numbers)\n- Boolean (true/false, yes/no, on/off)\n- String (a string of characters) — for example a word (white), a color (#ffffff), or a path (/usr/bin/firefox)\n\n- A dot (.) is a tight binding and is used to separate immediately adjacent components (in other words, to signify each step down into the hierarchy) — in the above example we start at application name, then descend into Class, and finally into the resource itself.\n- An asterisk (*) is a loose binding and is used to represent any number of components, including none.\n- A colon (:) is used to separate the resource name from the value.\n\n- From resource file syntax point of view, everything before a colon (:) is a resource name. From the user perspective, we often call resource only the rightmost component. In other words, resource name is a string consisted of application name, Class and resource name substrings. That might be the source of confusion.\n- Resource naming schema is totally application-dependent. While one application might use application_name.Class.resourceName, another might understand application_name.resourceName and Class.resourceName only.\n\n"
    },
    {
      "title": "Wildcard matching",
      "level": 3,
      "content": "Question mark (?) and asterisk (*) can be used as wildcards, making it easy to write a single rule that can be applied to many different applications or elements. ? is used to match any single component name, while * is used to represent any number of intervening components including none.\n\nUsing the previous example, if you want to apply the same font to all programs (not just XScreenSaver) that contain the class name Dialog which contains the resource name headingFont, you could write:\n\n```\n?.Dialog.headingFont:     -*-fixed-bold-r-*-*-*-100-*-*-*-*-iso8859-1\n```\n\nIf you want to apply this same rule to all programs that contain the resource headingFont, regardless of its class, you could write:\n\n```\n*headingFont:    -*-fixed-bold-r-*-*-*-100-*-*-*-*-iso8859-1\n```\n\n- Question mark (?) is like component name, so binding character — dot (.) or asterisk (*) — next to it is required.\n- Asterisk (*) is a binding character itself, there is no need in placing dot next to it, and a sequence of dot(s) and asterisk(s) is replaced with a single asterisk during file processing.\n\nSee XrmGetResource(3) § MATCHING RULES for more information.\n\n"
    },
    {
      "title": "Comments",
      "level": 3,
      "content": "Lines starting with an exclamation mark (!) are ignored, for example:\n\n```\n! The following rule will be ignored because it has been commented out\n!Xft.antialias: true\n```\n\n- The exclamation mark must be the first character on the line.\n- If you have a C preprocessor, such as GNU CPP (gcc), installed you can use C-style (// and /* … */) comments (also see #Samples).\n\nThe two-character sequence \\newline (backslash followed by newline), which allows a value to be broken across multiple lines, is also recognized inside the comments. In the following sample all four lines are commented out, despite only one exclamation mark is used:\n\n```\n! URxvt.font: xft:Input Mono:size=13:style=Regular, \\\n              xft:Font Awesome 6 Free:style=Solid,  \\\n              xft:Segoe UI Symbol:style=Regular,    \\\n              xft:Noto Emoji:style=Regular\n```\n\n"
    },
    {
      "title": "Include files",
      "level": 3,
      "content": "To spread resource configuration across multiple files (e.g. to use its own file for each application), use C preprocessor #include directive:\n\n```\n~/.config/X11/Xresources\n```\n\n```\n#include \"Xresources.d/fonts\"\n#include \"Xresources.d/rxvt-unicode\"\n#include \"Xresources.d/xscreensaver\"\n#include \"Xresources.d/xterm\"\n```\n\nIf files that are referenced with #include are not reachable from the applied configuration file directory, you need to pass a directory to search for:\n\n```\n$ xrdb -load -I${HOME}/.config/X11 ~/.Xresources\n```\n\n"
    },
    {
      "title": "Default settings",
      "level": 3,
      "content": "To see the default settings for your installed X11 applications, look in /usr/share/X11/app-defaults/.\n\nDetailed information on program-specific resources is usually provided in the man page for the program. xterm(1) § RESOURCES is a good example, as it contains a list of X resources and their default values.\n\nTo see the currently loaded resources:\n\n```\n$ xrdb -query -all\n```\n\n"
    },
    {
      "title": "Samples",
      "level": 3,
      "content": "- Color output in console#Terminal emulators\n- Cursor themes#X resources\n- Font configuration#Applications without Fontconfig support\n- rxvt-unicode#Configuration\n- xpdf(1) § OPTIONS\n- Xterm#Configuration\n- klassiker (mrdotx) — Rxvt-unicode patch developer dotfiles\n\n"
    },
    {
      "title": "Load resource file",
      "level": 3,
      "content": "Resources are stored in the X server, so have to only be read once. They are also accessible to remote X11 clients (such as those forwarded over SSH).\n\nLoad a resource file (such as the conventional .Xresources), replacing any current settings:\n\n```\n$ xrdb ~/.Xresources\n```\n\nLoad a resource file, and merge with the current settings:\n\n```\n$ xrdb -merge ~/.Xresources\n```\n\n- Most Display managers load the ~/.Xresources file on login.\n- The older ~/.Xdefaults file is read when an X11 program starts, but only if xrdb has not been used in the current session. [1]\n\n"
    },
    {
      "title": "xinitrc",
      "level": 3,
      "content": "If you are using a copy of the default xinitrc as your .xinitrc it already merges ~/.Xresources.\n\nIf you are using a custom one, add:\n\n```\n.xinitrc\n```\n\n```\n[[ -f ~/.Xresources ]] && xrdb -merge -I$HOME ~/.Xresources\n```\n\n"
    },
    {
      "title": "Getting resource values",
      "level": 3,
      "content": "If you want to get the value of a resource (for example if you want to use it in a bash script) you can use xgetresAUR:\n\n```\n$ xgetres xscreensaver.Dialog.headingFont\n-*-fixed-bold-r-*-*-*-100-*-*-*-*-iso8859-1\n```\n\n"
    },
    {
      "title": "Parsing errors",
      "level": 3,
      "content": "Display managers such as GDM may use the --nocpp argument for xrdb.\n\n"
    },
    {
      "title": "No output from xrdb -query",
      "level": 3,
      "content": "It is not rare for xrdb -query to output nothing. Try following #Load resource file and #xinitrc from above. And note some of the files mentioned there could be empty.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Overlooked Points of X Resources by Thomas Dickey\n- Using the .Xdefaults File by Purdue Engineering Computer Network\n\n"
    }
  ]
}