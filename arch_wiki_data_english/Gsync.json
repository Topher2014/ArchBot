{
  "title": "Gsync",
  "url": "https://wiki.archlinux.org/title/Gsync",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Xrandr\n- Xorg\n- AMDGPU\n- NVIDIA\n- Sway\n\nVariable refresh rate (VRR), also referred to as adaptive sync, allows the monitor to adjust its refresh rate to the output signal. This allows for games to eliminate screen tearing with less of the usual downsides of Vsync (such as stuttering). For a comprehensive look at VRR see PC Gaming Wiki.\n\n"
    },
    {
      "title": "Overview",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nThere are multiple implementations of VRR:\n\n- FreeSync is AMD's implementation of VESA's VRR standard, and the phrases are often used interchangeably. FreeSync branded monitors should be compatible with all VESA compatible drivers.\n- G-SYNC is NVIDIA's proprietary hardware and software implementation of VRR.\n- Intel implements VESA's standard starting with 11th Gen integrated graphics and dedicated GPUs.\n\nFor setup purposes, it is necessary to differentiate between \"native\" G-SYNC monitors that licenses Nvidia's own chip, and G-SYNC Compatible monitors, FreeSync monitors which support a subset of G-SYNC's functionality. [1] Within the category of G-SYNC Compatible monitors, the monitor may or may not be validated by NVIDIA. [2] [3] Even if a VRR monitor has not passed NVIDIA's validation (and thus would not be called G-SYNC Compatible in marketing material), you may still be capable of using it with G-SYNC.\n\nTable content:\nDriver | VESA | G-SYNC\nAMDGPU | FreeSync | No\nIntel | Yes | No\nNouveau | No | No\nNVIDIA | G-SYNC Compatible | G-SYNC\n\n"
    },
    {
      "title": "Hardware configuration",
      "level": 2,
      "content": "The monitor must be plugged in via DisplayPort. Some displays which implement (part of) the HDMI 2.1 specification also support VRR over HDMI. This is supported by the Nvidia driver and is supported by the AMD driver (pre HDMI 2.1) in Kernel 5.13 and later [4].\n\nSome monitors may not support VRR at their maximum refresh rate. For example, a monitor that supports 165Hz may only support VRR when set to use 144Hz or less.\n\n"
    },
    {
      "title": "Enable on AMDGPU",
      "level": 3,
      "content": "FreeSync is only available if your monitor is compatible with FreeSync, as well as if your GPU is compatible with FreeSync:\n\n"
    },
    {
      "title": "Using an Xorg conf file",
      "level": 4,
      "content": "Add the line to your AMDGPU .conf file in the Section \"Device\" block:\n\n```\nOption \"VariableRefresh\" \"true\"\n```\n\nVerify vrr_capable is set to 1 using xrandr:\n\n```\n$ xrandr --props\n```\n\n```\nvrr_capable: 1\n        range: (0, 1)\n```\n\nxrandr will show the properties for all video output ports; make sure to look at the one that's actually connected to your monitor - the other outputs will report vrr_capable: 0.\n\n"
    },
    {
      "title": "Multi-monitor configuration",
      "level": 4,
      "content": "Suppose you have a new 144Hz FreeSync capable monitor and want to use it as your primary monitor and connect your old 60Hz monitor as secondary monitor. In that case you may want to enable the AsyncFlipSecondaries option in your AMDGPU .conf file in the Section \"Device\" block:\n\n```\nOption \"AsyncFlipSecondaries\" \"true\"\n```\n\nThis option is available since xorg-server release 21.1.0 and will allow synchronized page flips up to the highest refresh rate your primary monitor supports. Your secondary monitor(s) may exhibit tearing however.\n\n"
    },
    {
      "title": "Using a Xorg conf file",
      "level": 4,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Via nvidia-settings",
      "level": 4,
      "content": "\"Native\" G-SYNC and validated G-SYNC Compatible monitors should automatically have VRR enabled. To check the state of your monitors, open nvidia-settings and navigate to your GPU (e.g. GPU 0), under which there will be an node for each active monitor (e.g. DP-0, HDMI-0). In each of those monitor frames, the G-SYNC Mode Available indicates the status of G-SYNC support, either: [5] [6]\n\n- G-SYNC, indicating that this is a \"native\" G-SYNC monitor. Full G-SYNC support is enabled by default.\n- G-SYNC Compatible, indicating that this is a validated G-SYNC Compatible monitor. G-SYNC support is enabled by default.\n- G-SYNC Unvalidated, indicating that this is an unvalidated G-SYNC Compatible monitor. G-SYNC support is not enabled by default. [7]\n- None, indicating that this monitor does not seem to support G-SYNC. Note that there are some FreeSync VRR monitors which are not G-SYNC compatible at all. [8]\n\nIf you have an unvalidated G-SYNC Compatible monitor, you can override NVIDIA's default and enable VRR with it:\n\n- In nvidia-settings go to the X Server Display Configuration page, then under the Advanced button is the option to Allow G-SYNC on monitor not validated as G-SYNC Compatible. Click apply.\n- Now, under OpenGL settings, check Allow G-SYNC/G-SYNC Compatible. In the same menu, you can check the show G-SYNC indicator option to display an indicator that G-SYNC is working in the top right corner.\n\n"
    },
    {
      "title": "NVIDIA",
      "level": 3,
      "content": "VRR Wayland using the proprietary driver requires a Volta GPU architecture or newer.\n\nNVIDIA has shipped VRR Wayland support starting with driver version 525. Until 545, there are forced VSync issues. Past that, there are still remaining issues which are covered by the VRR Wayland thread on NVIDIA forums.\n\n"
    },
    {
      "title": "GNOME",
      "level": 3,
      "content": "GNOME supports VRR as an experimental feature starting with version 46. Run gsettings set org.gnome.mutter experimental-features \"['variable-refresh-rate']\" to enable the experimental feature, then restart the session by logging out and back in. VRR can then be enabled for each supported monitor in the Display Settings under Refresh Rate. When running on a supported and enabled monitor, GNOME automatically enables VRR for all full screen applications.\n\n"
    },
    {
      "title": "KDE Plasma",
      "level": 3,
      "content": "Plasma's Wayland session uses the kwin compositor, which should automatically enable VRR for full screen applications [10].\n\n"
    },
    {
      "title": "Sway",
      "level": 3,
      "content": "Sway supports variable refresh rate. To enable it for all of your outputs you can add the following to the sway configuration, or apply the setting to on a per output basis:\n\n```\noutput * adaptive_sync on\n```\n\nYou can verify that your display supports adaptive sync with swaymsg:\n\n```\n$ swaymsg -t get_outputs\n```\n\n```\nOutput DP-1 'Display Name'\n  Adaptive sync: enabled\n```\n\n"
    },
    {
      "title": "Hyprland",
      "level": 3,
      "content": "Hyprland supports variable refresh rate. To enable it, you need to add either vrr = 1 or vrr = 2[11] in your misc section of your hyprland.conf :\n\n```\nmisc {\n   vrr = 1\n}\n```\n\nvrr = 1 always enables variable refresh rate, while vrr = 2 only enables it for fullscreen applications.\n\nYou can verify that your display supports adaptive sync with hyprctl:\n\n```\n$ hyprctl monitors\n```\n\n```\nMonitor DP-2 (ID 0):\n         ...\n\t vrr: 1\n```\n\n"
    },
    {
      "title": "Testing",
      "level": 2,
      "content": "VRRTest is a simple testing tool which should work for FreeSync and G-Sync. Install vrrtest-gitAUR or, manually install love package, clone repository, then run\n\n```\n$ love /path/to/cloned/repository\n```\n\nWith VRR off, if the application's FPS is less than the monitor's native refresh rate then the bars will stutter a lot since frames are being skipped. With VRR active, the bars will always move smoothly across the screen since the screen's refresh rate will match the application's refresh rate. Even with VRR functional you may experience tearing in which case you can also enable the TearFree option for AMDGPU; with both enabled there should be neither stuttering nor tearing (what is the nvidia equivalent?).\n\nIf you are using a Nvidia GPU, you can test G-SYNC compatibility with gl-gsync-demoAUR. This program will allow you to test VRR and Vsync so you can observe resulting effects. See project's Readme for more information.\n\nAccording to this page: \"gl-gsync-demo is made with G-SYNC but that does not matter, it will test AMD adaptive sync just fine\". However, it may still not work as expected for FreeSync testing.\n\n"
    },
    {
      "title": "Change VRR range of a FreeSync monitor",
      "level": 2,
      "content": "Freesync monitors usually have a limited range for VRR that are much lower than their maximum refresh rate, or that does not extend to the minimum refresh it is capable of. It should be possible to underclock or overclock the monitor to change the Freesync range.\n\nNote: **Underclocking** \n\n"
    },
    {
      "title": "Obtaining the EDID file",
      "level": 3,
      "content": "External Display Identification Data (EDID) stores driver information about your monitor. By default, this file is sent by your monitor and read on connect.\n\n"
    },
    {
      "title": "NVIDIA",
      "level": 4,
      "content": "For NVIDIA users, you will need to extract this file using something like read-edid or nvidia-settings.\n\n"
    },
    {
      "title": "AMD",
      "level": 4,
      "content": "For modern AMD GPUs, the kernel should expose a read-only copy of the EDID via the sysfs (i.e. /sys/class/drm/card0-DP-2/edid).\n\n"
    },
    {
      "title": "Editing the EDID File",
      "level": 3,
      "content": "You can edit this file with wxedidAUR.\n\n"
    },
    {
      "title": "Alternative method (AW EDID Editor)",
      "level": 4,
      "content": "Sometimes, wxedid will refuse to save the file with an error such as:\n\n```\nCEA_Set_DTD_Offset(): num_dbc=6, num_dtd=4, dtd_offs=42\n[E!] Assemble EDID FAILED.\nwxedid[2]: src/EDID_main.cpp.864 [-1] [E!] Invalid number of extension blocks\n```\n\nIn that case, AW EDID Editor (Windows, runs under Wine) can be used.\n\nThe relevant section will be under EDID Base > Detailed Descriptor > Block Descriptor > Block 2, then under Block Descriptor Type > Display > Range Limits.\n\n"
    },
    {
      "title": "Applying the modified EDID",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "X11",
      "level": 4,
      "content": "Make a Xorg .conf file for your monitor and add a path to the custom EDID file you have edited. See xrandr to find out the other information about your monitor.\n\n```\n/etc/X11/xorg.conf.d/10-monitor.conf\n```\n\n```\nSection \"Screen\"\n    Identifier \"Screen0\"\n    Device \"nvidia\" # e.g. Radeon, nvidia\n    Monitor \"DP1\"\n    Option “CustomEDID” “MONITOR:/home/USER/Desktop/modified-edid.bin”\nEndSection\n```\n\n"
    },
    {
      "title": "Wayland",
      "level": 4,
      "content": "The most reliable way to apply the EDID on wayland is to add your modified EDID to your initramfs (if using one) and then specifying it as a boot parameter.\n\nNote: **physically** \n\nFirstly, create the required folder:\n\n```\n# mkdir /usr/lib/firmware/edid\n```\n\nNow, add your modified EDID inside it. Here we will use vrr.bin as the filename but it can be anything:\n\n```\n# cp modified_edid.bin /usr/lib/firmware/edid/vrr.bin\n```\n\nThen, add the file to the initrd\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\n...\nFILES=(/usr/lib/firmware/edid/vrr.bin)\n...\n```\n\nFinally, add the command line parameter using your bootloader's configuration. The required parameter is drm.edid_firmware=<connector>:<path>. As example, to override the EDID for port DP-2, using the file located at /usr/lib/firmware/edid/vrr.bin the following needs to be added:\n\n```\ndrm.edid_firmware=DP-2:edid/vrr.bin\n```\n\nRe-generate your initramfs (i.e. mkinitcpio -P) and reboot. You should be able to use the extended VRR range now.\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "You may follow one of the guides of people changing the freesync range on Windows: [12][13]\n\nProcess of overclocking on Linux (works only on NVidia GPUs): [14]\n\n"
    },
    {
      "title": "Remove applications from Blacklist",
      "level": 3,
      "content": "Mesa has a list of blacklisted applications to avoid unexpected behavior, you can edit this blacklist here:\n\n```\n/usr/share/drirc.d/00-mesa-defaults.conf\n```\n\n"
    },
    {
      "title": "Monitor occasionally drops signal with FreeSync enabled",
      "level": 3,
      "content": "This is most likely due to firmware issues or driver issues causing the refresh rate to fall below the minimum safety margin[15]. You can mitigate it by raising the minimum vertical refresh range.\n\n"
    },
    {
      "title": "Using wxedid",
      "level": 4,
      "content": "See #Editing the EDID File or refer to this tutorial.\n\n"
    },
    {
      "title": "NVIDIA",
      "level": 4,
      "content": "Alternatively, you can edit the VertRefresh property in your Xorg configuration file (the following example was generated by nvidia-settings):\n\n```\n/etc/xorg.conf.d/20-nvidia.conf\n```\n\n```\nSection \"Monitor\"\n   # HorizSync source: edid, VertRefresh source: edid\n   Identifier     \"Monitor0\"\n   VendorName     \"Monitor Vendor\"\n   ModelName      \"Monitor Model\"\n   HorizSync       223.0 - 223.0\n   VertRefresh     48.0 - 144.0\n   Option         \"DPMS\"\nEndSection\n```\n\n"
    },
    {
      "title": "Monitor does not show up as VRR capable in Wayland, despite supporting it",
      "level": 3,
      "content": "For some devices (such as laptop displays), GNOME/Plasma may not recognize VRR capability under Wayland, despite the display supporting it (and advertising support via EDID.\n\nThis may be caused by your greeter (such as GDM/SDDM) running on X11, while your desktop session is running on Wayland. To fix this, configure your greeter to use Wayland instead (see: SDDM#Wayland).\n\n"
    },
    {
      "title": "Known issues",
      "level": 2,
      "content": "- Wayland is supported as of KDE Plasma 5.22 (any compatible GPU) and Sway (no Nvidia) [16] [17]. GNOME Wayland is supported starting with version 46 as an experimental feature.\n- If you want to use G-SYNC and possibly Freesync on X11, only the G-SYNC/Freesync monitor must be connected. On X11, multiple monitors in a single X display will break G-SYNC/Freesync, however, this problem does not exist on Wayland. A secondary monitor set as copy/duplicate of the primary monitor does not break G-SYNC/Freesync on the primary monitor. If on X11, if you want to use multiple monitors and still use G-SYNC/Freesync, you can create a new X display which only covers the G-SYNC/Freesync monitor and run games there.\n- Compositors will most likely need to be disabled before the OpenGl/Vulkan program is started (disabling compositors is not relevant or necessary on Wayland [18]).\n- On X11, Mesa blacklists many applications including video players.\n- Although tearing is much less noticeable at higher refresh rates, FreeSync monitors often have a limited range for their VRR of 90Hz, which can be much lower than their max refresh rate. See Change VRR Range of a FreeSync Monitor.\n\n- On X11, multiple monitors in a single X display will break G-SYNC/Freesync, however, this problem does not exist on Wayland.\n- A secondary monitor set as copy/duplicate of the primary monitor does not break G-SYNC/Freesync on the primary monitor.\n- If on X11, if you want to use multiple monitors and still use G-SYNC/Freesync, you can create a new X display which only covers the G-SYNC/Freesync monitor and run games there.\n\n"
    }
  ]
}