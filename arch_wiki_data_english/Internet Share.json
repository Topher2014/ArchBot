{
  "title": "Internet Share",
  "url": "https://wiki.archlinux.org/title/Internet_Share",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Android tethering\n- Software access point\n- Bridge with netctl\n- Ad-hoc networking\n- Sharing PPP Connection\n- Simple stateful firewall\n- Router\n- USB 3G Modem\n\nThis article explains how to share the internet connection from one machine to other(s).\n\n"
    },
    {
      "title": "Requirements",
      "level": 2,
      "content": "The machine acting as server should have an additional network device. That network device requires a functional data link layer to the machine(s) that are going to receive internet access:\n\n- To be able to share internet to several machines a switch can provide the data link layer connection.\n- A wireless device can share access to several machines as well, see Software access point first for this case.\n- If you are sharing to only one machine, a crossover cable is sufficient. In case one of the two computers' ethernet cards has MDI-X capability, a crossover cable is not necessary and a regular ethernet cable can be used. Executing ethtool interface | grep MDI as root helps to figure it.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "All configuration is done on the server computer, except for the final step of #Assigning IP addresses to the client PC(s).\n\n"
    },
    {
      "title": "Static IP address",
      "level": 3,
      "content": "On the server computer, assign a static IPv4 address to the interface connected to the other machines. The first 3 bytes of this address cannot be exactly the same as those of another interface, unless both interfaces have netmasks strictly greater than /24.\n\n```\n# ip link set up dev net0\n# ip addr add 192.168.123.100/24 dev net0 # arbitrary address\n```\n\nTo have your static IP assigned at boot, you can use a network manager.\n\n"
    },
    {
      "title": "Enable packet forwarding",
      "level": 3,
      "content": "To check the current packet forwarding settings, run:\n\n```\n# sysctl -a | grep forward\n```\n\nYou will note options for controlling forwarding per default, per interface, as well as separate options for IPv4/IPv6 per interface. For detailed description of all available options, see the kernel documentation.\n\nTo enable IPv4 and IPv6 packet forwarding, configure sysctl to set these settings:\n\n```\nnet.ipv4.ip_forward = 1\nnet.ipv4.conf.all.forwarding = 1\nnet.ipv6.conf.all.forwarding = 1\n```\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nIf the system uses systemd-networkd to control the network interfaces, a per-interface setting for IPv4 is not possible, i.e. systemd logic propagates any configured forwarding into a global (for all interfaces) setting for IPv4. The advised work-around is to use a firewall to forbid forwarding again on selective interfaces. See the systemd.network(5) manual page for more information. The IPForward=kernel semantics introduced in a previous systemd release 220/221 to honor kernel settings does not apply anymore.[1] [2]\n\nTo make changes persistent across reboots, see Sysctl#Configuration. You might consider writing settings to a file with a descriptive filename, such as /etc/sysctl.d/30-ipforward.conf.\n\nAfterwards it is advisable to double-check forwarding is enabled as required after a reboot.\n\n"
    },
    {
      "title": "Packet forwarding with systemd-networkd",
      "level": 4,
      "content": "Note: **This article or section is a candidate for merging with systemd-networkd#[Network].** This article or section is a candidate for merging with systemd-networkd#[Network].\n\nThis article or section is a candidate for merging with systemd-networkd#[Network].\n\nIf you are using systemd-networkd to manage your network configuration, you can also persist those settings across reboots:\n\n```\n/etc/systemd/network/20-lan.network\n```\n\n```\n[Network]\nIPv4Forwarding=yes\n...\n```\n\nThis essentially sets the same net.ipv[46].conf.interface_name.forwarding=1 as mentioned in previous section. For IPv6 the configuration is IPv6Forwarding=yes.\n\nThis sets up packet forwarding for the specific interface only. For internet sharing to properly work, you need to enable packet forwarding on both (all) interfaces where traffic should be routed between. Typically your lan and wan interfaces.\n\nSee also systemd-networkd#[Network].\n\n"
    },
    {
      "title": "With iptables",
      "level": 4,
      "content": "Install the iptables package. Use iptables to enable NAT:\n\n```\n# iptables -t nat -A POSTROUTING -o internet0 -j MASQUERADE\n# iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n# iptables -A FORWARD -i net0 -o internet0 -j ACCEPT\n```\n\nUse -I DOCKER-USER instead of -A FORWARD if you installed docker. [4]\n\n```\n# iptables -t nat -A POSTROUTING -o internet0 -j MASQUERADE\n# iptables -I DOCKER-USER 1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n# iptables -I DOCKER-USER 2 -i net0 -o internet0 -j ACCEPT\n```\n\nIf connected via PPPoE, clamp mss to pmtu in order to prevent fragmentation:\n\n```\n# iptables -t mangle -A FORWARD -o ppp0 -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu\n```\n\nRead the iptables article for more information (especially saving the rule and applying it automatically on boot). There is also an excellent guide on iptables Simple stateful firewall.\n\n"
    },
    {
      "title": "With nftables",
      "level": 4,
      "content": "Install the nftables package. To enable NAT with nftables, you will have to create the postrouting chain in a new/existing table:\n\n```\n# nft add table inet nat\n# nft add chain inet nat postrouting '{ type nat hook postrouting priority srcnatÂ ; }'\n```\n\nAfter that, you have to masquerade the net0 addresses for internet0:\n\n```\n# nft add rule inet nat postrouting oifname internet0 masquerade\n```\n\nMany firewall configurations, like the default /etc/nftables.conf, set the default policy of the 'filter' table's 'forward' chain to 'drop'. In such cases, you will need rules to allow forwarding NAT traffic:\n\n```\n# nft add rule inet filter forward ct state related,established accept\n# nft add rule inet filter forward iifname net0 oifname internet0 accept\n```\n\nYou can find more information on NAT in nftables in the nftables Wiki. If you want to make these changes permanent, follow the instructions on nftables.\n\n"
    },
    {
      "title": "With firewalld",
      "level": 4,
      "content": "Install the firewalld package. firewalld is a firewall daemon which relies on nftables or iptables. First change the firewalld zones of network interfaces:\n\n```\n# firewall-cmd --zone=external --change-interface=internet0 --permanent\n# firewall-cmd --zone=internal --change-interface=net0 --permanent\n```\n\nThen add a new policy to let traffic flow between the internal and external zone:\n\n```\n# firewall-cmd --permanent --new-policy int2ext\n# firewall-cmd --permanent --policy int2ext --add-ingress-zone internal\n# firewall-cmd --permanent --policy int2ext --add-egress-zone external\n# firewall-cmd --permanent --policy int2ext --set-target ACCEPT\n# firewall-cmd --reload\n```\n\nNote: For example, to allow only nodes in 192.168.2.0/24 to access the internet, do:\n\nFor example, to allow only nodes in 192.168.2.0/24 to access the internet, do:\n\nfirewall-cmd --permanent --policy int2ext --add-rich-rule='rule family=ipv4 source address=192.168.2.0/24 accept' Do not forget to reload rules afterwards:\n\n"
    },
    {
      "title": "Assigning IP addresses to the client PC(s)",
      "level": 3,
      "content": "If you are planning to regularly have several machines using the internet shared by this machine, then is a good idea to install a DHCP server. See Router#DNS and DHCP for the available options. Then configure a DHCP client on every client PC, see Network configuration#Network managers.\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nIncoming connections to UDP port 67 has to be allowed for DHCP server. It also necessary to allow incoming connections to UDP/TCP port 53 for DNS requests.\n\n```\n# iptables -I INPUT -p udp --dport 67 -i net0 -j ACCEPT\n# iptables -I INPUT -p udp --dport 53 -s 192.168.123.0/24 -j ACCEPT\n# iptables -I INPUT -p tcp --dport 53 -s 192.168.123.0/24 -j ACCEPT\n```\n\nAlternatively using firewalld\n\n```\n# firewall-cmd --zone=internal --permanent --add-service dns\n# firewall-cmd --zone=internal --permanent --add-service dhcp\n# firewall-cmd --zone=internal --permanent --add-service dhcpv6\n```\n\nIf you are not planning to use this setup regularly, you can manually add an IP to each client instead.\n\n"
    },
    {
      "title": "Manually adding an IP",
      "level": 4,
      "content": "Instead of using DHCP, a static IP address and a default route via 192.168.123.100 can also be configured manually. There are many tools available to configure the network accordingly. One prominent example of such a tool is ip(8), see Network configuration#Network management. Alternatively, one can use a .network file, see Systemd-networkd#Wired adapter using a static IP to setup a static IP.\n\nConfigure a DNS server for each client, see Domain name resolution for details.\n\nThat is it. The client PC should now have Internet.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "If you are able to connect the two PCs but cannot send data (for example, if the client PC makes a DHCP request to the server PC, the server PC receives the request and offers an IP to the client, but the client does not accept it, timing out instead), check that you do not have other iptables rules interfering.\n\n"
    },
    {
      "title": "Clients cannot access the internet or cannot connect",
      "level": 3,
      "content": "Symptoms might also include: Clients get host is down when pinging host, gets no route to host when pinging devices outside the LAN (that should be forwarded by NAT), DHCP offers not crossing a bridge, ...\n\nIt is known that docker may cause these problems. Simply disabling docker.service and docker.socket solves this problem.\n\ndocker github issue.\n\n"
    },
    {
      "title": "Connected second PC unable to use bridged LAN",
      "level": 3,
      "content": "First PC have two LANs. Second PC have one LAN and connected to first PC. Lets go second PC to give all access to LAN after bridged interface:\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n```\n# sysctl net.bridge.bridge-nf-filter-pppoe-tagged=0\n# sysctl net.bridge.bridge-nf-filter-vlan-tagged=0\n# sysctl net.bridge.bridge-nf-call-ip6tables=0\n# sysctl net.bridge.bridge-nf-call-iptables=0\n# sysctl net.bridge.bridge-nf-call-arptables=0\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Xyne's guide and scripts for launching a subnet with DHCP and DNS\n- NetworkManager can be configured for internet sharing if used.\n\n"
    }
  ]
}