{
  "title": "Android Studio",
  "url": "https://wiki.archlinux.org/title/Android_Studio",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Android tethering\n- Android Debug Bridge\n\nPlug your phone to your computer using a USB cable adapted for your device. Make sure this USB cable has a data line (not all cables do).\n\nOn your smartphone, you should see the charging icon. If this is the case, go to your notifications, scroll to the bottom until you see the notification saying that your phone is connected in Charging mode.\n\nClick on the notification, and then set it to File transfer mode, MTP or something similar.\n\nYou should now see your phone being detected by most desktop environments.\n\n"
    },
    {
      "title": "Synchronization",
      "level": 2,
      "content": "There are various applications to transfer files, synchronize notifications and more.\n\n"
    },
    {
      "title": "All-in-one",
      "level": 3,
      "content": "- KDE Connect (kdeconnect) – integrates your Android device with the KDE or Gnome desktop (featuring synced notifications & clipboard, multimedia control, and file/URL sharing).\n\n"
    },
    {
      "title": "Synchronized notifications",
      "level": 3,
      "content": "- a2lnAUR – provides notification synchronization over LAN featuring authentication, encryption and more\n\n"
    },
    {
      "title": "Transferring files",
      "level": 3,
      "content": "- USB cable Media Transfer Protocol for modern Android devices USB mass storage for older devices Android Debug Bridge\n- special USB sticks / regular USB stick with adapter\n- Bluetooth\n- Arch Linux software with Android counterparts client or server for protocols that can be used to transfer files (eg. SSH, FTP, Samba or HTTP) cloud synchronization clients Syncthing sendanywhereAUR – cross-platform file sharing qrcpAUR – transfer files over Wi-Fi from your computer to your mobile device by scanning a QR code localsendAUR - An open source cross-platform alternative to AirDrop\n\n- Media Transfer Protocol for modern Android devices\n- USB mass storage for older devices\n- Android Debug Bridge\n\n- client or server for protocols that can be used to transfer files (eg. SSH, FTP, Samba or HTTP)\n- cloud synchronization clients\n- Syncthing\n- sendanywhereAUR – cross-platform file sharing\n- qrcpAUR – transfer files over Wi-Fi from your computer to your mobile device by scanning a QR code\n- localsendAUR - An open source cross-platform alternative to AirDrop\n\n"
    },
    {
      "title": "App development",
      "level": 2,
      "content": "The officially supported way to build Android apps is to use #Android Studio.[1]\n\n"
    },
    {
      "title": "Android Studio",
      "level": 3,
      "content": "Android Studio is the official Android development environment based on IntelliJ IDEA. It provides integrated Android developer tools for development and debugging.\n\nYou can install it with the android-studioAUR package. For the Beta branch, install the android-studio-betaAUR package. For the Canary branch, install the android-studio-canaryAUR package.\n\nAndroid Studio creates a .android directory in home directory. To reset Android Studio, this directory can be removed.\n\n- Make sure you properly set the Java environment otherwise android-studio will not start. However, in newer versions Java is included by default, so it is not necessary do so; see #Java Development Kit.\n- If Android Studio shows up as a blank window try exporting _JAVA_AWT_WM_NONREPARENTING=1, see issue #57675.\n\nThe Android Studio Setup Wizard installs the required #SDK packages and places the SDK by default in ~/Android/Sdk.\n\nTo build apps from the command-line (using e.g. ./gradlew assembleDebug) set the ANDROID_HOME environment variable to your SDK location.\n\nAndroid Studio has experimental Wayland support since 2024.2, you can enable it by going to Menu -> Help -> Edit Custom VM Options and adding -Dawt.toolkit.name=WLToolkit as a parameter.\n\n"
    },
    {
      "title": "SDK packages",
      "level": 3,
      "content": "Android SDK packages can be installed directly from upstream using #Android Studio's SDK Manager or the sdkmanager command line tool (part of the Android SDK Tools). Some Android SDK packages are also available as AUR packages, they generally install to /opt/android-sdk/.\n\nThe required SDK packages are:\n\nTable content:\nAndroid SDK Package | SDK-style path | AUR package | AUR dummy | CLI tools\nCommand-Line Tools | tools | android-sdk-cmdline-tools-latestAUR | android-sdk-cmdline-tools-latest-dummyAUR | apkanalyzer, avdmanager, lint, retrace, screenshot2, sdkmanager\nSDK Build-Tools | build-tools;version | android-sdk-build-toolsAUR | android-sdk-build-tools-dummyAUR | aapt, aapt2, aidl, apksigner, bcc_compat, d8, dexdump, dx, lld, llvm-rs-cc, mainDexClases, split-select, zipalign\nSDK Platform-Tools | platform-tools | android-sdk-platform-toolsAUR | android-sdk-platform-tools-dummyAUR | adb, dmtracedump, e2fsdroid, etc1tool, #fastboot, hprof-conv, make_f2fs, make_f2fs_casefold, mke2fs, sload_f2fs, sqlite3, systrace\nSDK Platform | platforms;android-level | android-platformAUR, older versions | android-platform-dummyAUR (unnecessary)\n\nThe android-tools package provides adb, #fastboot, e2fsdroid and mke2fs.android from the SDK Platform-Tools along with mkbootimg and ext2simg.\n\n- Since the Android SDK contains 32-bit binaries, you must enable the multilib repository. Otherwise you will get error: target not found: lib32-* error messages.\n- If you choose to directly install SDK packages from upstream, install the AUR packages of the AUR dummy column to pull in the required dependencies.\n- If you get a java.lang.NoClassDefFoundError exception when attempting to run sdkmanager, use OpenJDK 8's JRE temporarily, by installing the package jre8-openjdk and switching the Java environment. See Failed to run sdkmanager --list with Java 9\n\n"
    },
    {
      "title": "Android Emulator",
      "level": 4,
      "content": "The Android Emulator is available as the emulator SDK package, the android-emulatorAUR package, and there is also a dummy package for it: android-emulator-dummyAUR.\n\nTo run the Android Emulator you need an Intel or ARM System Image. You can install them through the AUR, with the sdkmanager or using Android Studio's AVD Manager.\n\nIf Wayland is used, make sure to read Wayland#Qt, as it might be the case that the emulator complains about Wayland.\n\n"
    },
    {
      "title": "Other SDK packages in the AUR",
      "level": 4,
      "content": "The Android Support Library is now available online from Google's Maven repository. You can also install it offline through the extras;android;m2repository SDK package (also available as android-support-repositoryAUR).\n\n"
    },
    {
      "title": "Making /opt/android-sdk group-writeable",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nThe AUR packages install the SDK in /opt/android-sdk/. This directory has root permissions, so keep in mind to run sdk manager as root. If you intend to use it as a regular user, create the android-sdk users group, add your user.\n\n```\n# groupadd android-sdk\n# gpasswd -a <user> android-sdk\n```\n\nSet an access control list to let members of the newly created group write into the android-sdk folder. As running sdkmanager can also create new files, set the ACL as default ACL. the X in the default group entry means \"allow execution if executable by the owner (or anyone else)\"\n\n```\n# setfacl -R -m g:android-sdk:rwx /opt/android-sdk\n# setfacl -d -m g:android-sdk:rwX /opt/android-sdk\n```\n\nRe-login or as <user> log your terminal in to the newly created group:\n\n```\n$ newgrp android-sdk\n```\n\n"
    },
    {
      "title": "Other IDEs",
      "level": 3,
      "content": "Android Studio is the official Android development environment based on IntelliJ IDEA. Alternatively, you can use Netbeans with the NBAndroid-V2. All are described below.\n\n"
    },
    {
      "title": "Netbeans",
      "level": 4,
      "content": "If you prefer using Netbeans as your IDE and want to develop Android applications, use NBAndroid-V2 .\n\nInstall android-sdkAUR package and follow the instructions from the NBANDROID README.\n\n"
    },
    {
      "title": "Vim / Neovim",
      "level": 4,
      "content": "It is possible to write flutter applications for Android and iOS using (Neo)vim like an IDE. Install coc using a Vim plugin manager. Also install the coc-flutter extension for autocompletion (like in Android Studio) and to load the code into an Android emulator.\n\n"
    },
    {
      "title": "Emacs",
      "level": 4,
      "content": "To develop a mobile flutter application using Emacs, as the official instruction at flutter.dev suggests, install lsp-dart.\n\n"
    },
    {
      "title": "Marvin",
      "level": 4,
      "content": "Marvin is a tool which helps beginners set up an Android development environment. Installing marvin_dscAUR helps you set up the following things: JDK, Android SDK, IDE(s), and AVD.\n\n"
    },
    {
      "title": "Building",
      "level": 2,
      "content": "Please note that these instructions are based on the official AOSP build instructions. Other Android-derived systems such as LineageOS will often require extra steps.\n\n"
    },
    {
      "title": "Required packages",
      "level": 3,
      "content": "To build AOSP 13 you need a TTF font installed (e.g. ttf-dejavu) and the dependencies of the aosp-develAUR metapackage.\n\nAdditionally, LineageOS (as well as other many Android distributions like ArrowOS,PixelExperience etc) requires the following dependencies of the lineageos-develAUR metapackage.\n\n"
    },
    {
      "title": "Java Development Kit",
      "level": 3,
      "content": "The required JDK version depends on the Android version you are building:\n\n- For Android 9 (Pie) and up, Java is included with the Android source and no separate installation is needed.\n- For Android 7 and 8 (Nougat and Oreo), OpenJDK 8 is required, which is available with the jdk8-openjdk package.\n\nNote: Set JAVA_HOME to avoid this requirement and match the Arch Linux installation path. Example:\n\nSet JAVA_HOME to avoid this requirement and match the Arch Linux installation path. Example:\n\n```\n$ export JAVA_HOME=/usr/lib/jvm/java-version-openjdk\n```\n\n"
    },
    {
      "title": "Setting up the build environment",
      "level": 3,
      "content": "Install the repo package.\n\nCreate a directory to build.\n\n```\n$ mkdir ~/android\n$ cd ~/android\n```\n\n"
    },
    {
      "title": "Downloading the source code",
      "level": 3,
      "content": "This will clone the repositories. You only need to do this the first time you build Android, or if you want to switch branches.\n\n- The repo has a -j switch that operates similarly to the one used with make. Since it controls the number of simultaneous downloads, you should adjust the value depending on downstream network bandwidth.\n\n- You will need to specify a branch (list of branches) to check out with the -b switch. If you leave the switch out, you will get the so-called master branch.\n\n```\n$ repo init --partial-clone -b main -u https://android.googlesource.com/platform/manifest\n$ repo sync -j4\n```\n\nNote: The -c switch will only sync the branch which is specified in the manifest, which in turn is determined by the branch specified with the -b switch, or the default branch set by the repository maintainer.\n\n```\n$ repo sync -j8 -c\n```\n\nThe -c switch will only sync the branch which is specified in the manifest, which in turn is determined by the branch specified with the -b switch, or the default branch set by the repository maintainer.\n\nWait a long time. Just the uncompiled source code, along with the .repo and .git directories that are used to keep track of it, are very large. As of Android 10, at least 250 GB of free disk space is required.\n\n```\n$ repo sync\n```\n\n"
    },
    {
      "title": "Building the code",
      "level": 3,
      "content": "This should do what you need for AOSP:\n\n```\n$ source build/envsetup.sh\n$ lunch full-eng\n$ make -j4\n```\n\nIf you run lunch without arguments, it will ask what build you want to create. Use -j with a number between one and two times number of cores/threads.\n\nThe build takes a very long time.\n\n- Make sure you have enough RAM. Android will use the /tmp directory heavily. By default the size of /tmp is half the size of your RAM. If it fills up, the build will fail. 4 GiB of RAM or more is recommended. If /tmp is not large enough, you can increase it. Make sure you have the combined RAM and swap space to back it. Alternatively, you can get rid of the tmpfs from fstab all together.\n- From the Android Building and Running guide:\n\n"
    },
    {
      "title": "Testing the build",
      "level": 3,
      "content": "When finished, run/test the final image(s).\n\n```\n$ emulator\n```\n\n"
    },
    {
      "title": "Creating a flashable Image",
      "level": 3,
      "content": "To create an image that can be flashed it is necessary to:\n\n```\nmake -j8 updatepackage\n```\n\nThis will create a zip image under out/target/product/hammerhead (hammerhead being the device name) that can be flashed.\n\n"
    },
    {
      "title": "Flashing",
      "level": 2,
      "content": "In some cases, you want to return to the stock Android after flashing custom ROMs to your Android mobile device. For flashing instructions of your device, please use XDA forums.\n\n"
    },
    {
      "title": "Fastboot",
      "level": 3,
      "content": "Fastboot (as well as ADB) is included in the android-tools package.\n\n- Restoring firmwares using fastboot can be quite tricky, but you might want to browse XDA developers forums for a stock firmware, which is mostly a *.zip file, but inside of it, comes with the firmware files and flash-all.sh script. For example, Google Nexus firmwares include flash-all.sh script or another example could be for OnePlus One - XDA thread, where you can find firmwares with included flash-all.sh script.\n- If you get a no permissions error or execution just hangs with < waiting for any device > then you need to run fastboot as the root user. Alternatively you can install android-udev or the AUR package android-udev-gitAUR and reconnect your device.\n\n"
    },
    {
      "title": "Samsung devices",
      "level": 3,
      "content": "Samsung devices cannot be flashed using Fastboot tool. Alternatives are Heimdall and Odin (by using Windows and VirtualBox).\n\n"
    },
    {
      "title": "samloader",
      "level": 4,
      "content": "To download original Samsung firmware, a platform independent script, samloader can be used.\n\n"
    },
    {
      "title": "Heimdall",
      "level": 4,
      "content": "Heimdall is a cross-platform open-source tool suite used to flash firmware (also known as ROMs) onto Samsung mobile devices and is also known as an alternative to Odin. It can be installed as heimdall, however, it is no longer maintained: an actively maintained fork can be installed as heimdall-grimler-gitAUR.\n\nThe flashing instructions can be found on Heimdall's GitHub repository or on XDA forums.\n\n"
    },
    {
      "title": "Odin (Virtualbox)",
      "level": 4,
      "content": "Note: **not** \n\nIt is also possible to restore firmware (Android) on the Samsung devices using Odin, but inside the VirtualBox.\n\nArch Linux (host) preparation:\n\n1. Install VirtualBox together with its extension pack and guest additions.\n1. Install your preferred, but compatible with Odin, Windows operating system (with VirtualBox guest additions) into a virtual hard drive using VirtualBox.\n1. Open VirtualBox settings of your Windows operating system, navigate to USB, then tick (or make sure it is ticked) Enable USB 2.0 (EHCI) Controller.\n1. At VirtualBox running Windows operating system, click in the menu bar Devices > USB Devices, then click on your Samsung mobile device from the list, which is connected to your computer via USB.\n\nWindows (guest) preparation:\n\n1. Install Samsung drivers.\n1. Install Odin.\n1. Download required Samsung firmware (Android) for your smartphone model.\n\nCheck if configuration is working:\n\n1. Turn your device into Download mode and connect to your Linux machine.\n1. In virtual machine toolbar, select Devices > USB > ...Samsung... device.\n1. Open Odin. The white box (a big one at the bottom-left side) named Message, should print a line similar to this:\n\n```\n<ID:0/003> Added!!\n```\n\nwhich means that your device is visible to Odin & Windows operating system and is ready to be flashed.\n\n"
    },
    {
      "title": "Run Android apps on Arch Linux",
      "level": 2,
      "content": "There are several projects and methods which support running Android on Arch Linux (or other distributions). As listed below:\n\n- Container-based solutions tend to be the most popular. They are the closest you can get to run Android app natively on a non-Android Linux kernel. They tend to be the best integrated with your system and have good performance. Notable ones are: Waydroid is a fork of Anbox, and it is gaining popularity. It is more performant, because it runs closer to the hardware. It is based on a newer LineageOS 17.1 (Android 10) based image with the option to install the Google Play Store and other Open Gapps. Beside running apps in standalone windows, it can also run a full Android UI.\n\n- Waydroid is a fork of Anbox, and it is gaining popularity. It is more performant, because it runs closer to the hardware. It is based on a newer LineageOS 17.1 (Android 10) based image with the option to install the Google Play Store and other Open Gapps. Beside running apps in standalone windows, it can also run a full Android UI.\n\n- There are also a few Chromium extensions that can run android apps: Arc Welder was an extension by google to test how apps would run on Chrome OS, but is now discontinued. ARChon is an unmaintained open source extension to run android apps on Chromium-based browsers. As of July 2023, the sample app does not work because \"Old versions of Chrome apps won't open on Linux devices after 2022\".\n\n- Arc Welder was an extension by google to test how apps would run on Chrome OS, but is now discontinued.\n- ARChon is an unmaintained open source extension to run android apps on Chromium-based browsers. As of July 2023, the sample app does not work because \"Old versions of Chrome apps won't open on Linux devices after 2022\".\n\n- Of course it is also possible to run a full android emulator. One upside to this is that you can run arm apps on x86. A downside is worse performance. Examples are: Android studio's built-in emulator, as earlier mentioned in this article. Genymotion is a pay for Android emulation/testing suite.\n\n- Android studio's built-in emulator, as earlier mentioned in this article.\n- Genymotion is a pay for Android emulation/testing suite.\n\n- There are also x86_64 compatible OS images based on Android, which can run inside common virtual machines (including KVM with VirtIO GPU) or on bare metal. Bliss OS is an Android-based open source OS that incorporates many optimizations and features, pre-rooted with KernelSU. ARM emulation is also included. For older Android versions, see Android-x86.\n\n- Bliss OS is an Android-based open source OS that incorporates many optimizations and features, pre-rooted with KernelSU. ARM emulation is also included.\n- For older Android versions, see Android-x86.\n\n"
    },
    {
      "title": "Android Studio: Android Virtual Devices show 'failed to load'.",
      "level": 3,
      "content": "Make sure you have exported the variable ANDROID_HOME as explained in #Android Studio.\n\n"
    },
    {
      "title": "Android Studio: 'failed to create the SD card'",
      "level": 3,
      "content": "If you try to run an AVD (Android Virtual Device) under x86_64 Arch and get the error above, install the lib32-gcc-libs package from the multilib repository.\n\n"
    },
    {
      "title": "Eclipse: During Debugging \"Source not found\"",
      "level": 3,
      "content": "Most probably the debugger wants to step into the Java code. As the source code of Android does not come with the Android SDK, this leads to an error. The best solution is to use step filters to not jump into the Java source code. Step filters are not activated by default. To activate them: Window > Preferences > Java > Debug > Step Filtering. Consider to select them all. If appropriate you can add the android.* package. See Use Step Filters.\n\n"
    },
    {
      "title": "ValueError: unsupported pickle protocol",
      "level": 3,
      "content": "One fix is to issue:\n\n```\n$ rm ~/.repopickle_.gitconfig\n```\n\nIf that does not work, then try this:\n\n```\n$ find /path/to/android-root -name .repopickle_config -delete\n```\n\n"
    },
    {
      "title": "libGL error: failed to load driver: swrast OR AVD does not load and no error message displayed",
      "level": 3,
      "content": "Sometimes, beginning to load an AVD will cause an error message similar to this to be displayed, or the loading process will appear to finish but no AVD will load and no error message will be displayed.\n\nThe AVD loads an incorrect version of libstdc++, you can remove the folder libstdc++ from ~/.android-sdk/emulator/lib64 (for 64-bit) or ~/.android-sdk/emulator/lib (for 32-bit) , e.g.:\n\n```\n$ rm -r ~/.android-sdk/emulator/lib64/libstdc++\n```\n\nNote that in versions before Android Studio 3.0, this directory was in a different location:\n\n```\n$ rm -r ~/Android/Sdk/emulator/lib64/libstdc++\n```\n\nAlternatively you can set and export ANDROID_EMULATOR_USE_SYSTEM_LIBS in ~/.profile as:\n\n```\nexport ANDROID_EMULATOR_USE_SYSTEM_LIBS=1\n```\n\nReference: Android Studio user guide\n\nFix for the .desktop file might be achieved by using env command, prefixing the Exec line Desktop entries#Modify environment variables\n\n```\nenv ANDROID_EMULATOR_USE_SYSTEM_LIBS=1\n```\n\n"
    },
    {
      "title": "sh: glxinfo: command not found",
      "level": 3,
      "content": "Here is the full error:\n\n```\nCannot launch AVD in emulator.\nOutput:\nsh: glxinfo: command not found\nsh: glxinfo: command not found\nlibGL error: unable to load driver: swrast_dri.so\nlibGL error: failed to load driver: swrast\nX Error of failed request:  BadValue (integer parameter out of range for operation)\n  Major opcode of failed request:  154 (GLX)\n  Minor opcode of failed request:  24 (X_GLXCreateNewContext)\n  Value in failed request:  0x0\n  Serial number of failed request:  32\n  Current serial number in output stream:  33\nQObject::~QObject: Timers cannot be stopped from another thread\n```\n\nYou can try to install glxinfo (mesa-utils) but if your computer has enough power you could simply use software to render graphics. To do so, go to Tools > Android > AVD Manager, edit the AVD (click the pencil icon), then select Software - GLES 2.0 for Emulated Performance > Graphics.\n\n"
    },
    {
      "title": "Android Emulator: no keyboard input in xfwm4",
      "level": 3,
      "content": "In xfwm4, the vertical toolbar buttons window that is on the right of the emulator takes focus from the emulator and consumes keyboard events. (bug report)\n\nYou can use the workaround described in [2]:\n\n1. Open the xfwm4 settings.\n1. Switch to the Focus tab.\n1. Change the Focus Model to \"Focus follow mouse\".\n1. Disable Automatically raise windows when they receive focus option below.\n\n"
    },
    {
      "title": "Android Emulator: Window is shaking and blinking when used in WM tiled mode",
      "level": 3,
      "content": "When using Tiled Window Manager like dwm, Android Emulator will shake and blink. You can use the workaround described in krohnkite issue 72 (window floating is induced by Alt+f in dwm).\n\n"
    },
    {
      "title": "Android Emulator: Segmentation fault (core dumped)",
      "level": 3,
      "content": "When using Nouveau drivers try to disable gpu hardware acceleration.\n\nIn some devices it can only be done by editing $HOME/.avd/device_name.avd/config.ini.[3]\n\n1. Set hw.gpu.enabled=no\n1. Set hw.gpu.mode=off\n\n"
    },
    {
      "title": "Android Emulator: Not launching / qemu-system: address resolution failed",
      "level": 3,
      "content": "There is an issue where no emulator-window shows up after starting a virtual device in android-studio. If this applies to you, launch the emulator from the console and inspect its output:\n\n```\n$ emulator -avd $(emulator -list-avds)\n```\n\nIf on any line, it says anything similar to:\n\n```\nqemu-system-x86_64 : address resolution failed for ::1:46189: Name or service not known\n```\n\nyou may try disabling IPv6:\n\n```\n$ sysctl net.ipv6.conf.all.disable_ipv6=1\n```\n\nIf this solves the issue and the virtual device shows up in android-studio, you may consider a permanent change:\n\n```\n/etc/sysctl.d/99-sysctl.conf\n```\n\n```\nnet.ipv6.conf.all.disable_ipv6=1\n```\n\n"
    },
    {
      "title": "Android Emulator: Emulator terminated with exit code 134",
      "level": 3,
      "content": "If running Wayland, a graphical error like The emulator process for AVD Pixel_4_API_33 has terminated may be worked around by forcing X11 with QT_QPA_PLATFORM=xcb.\n\n"
    },
    {
      "title": "adb: sideload connection failed: insufficient permissions for device",
      "level": 3,
      "content": "If you get the errors:\n\n```\nadb: sideload connection failed: insufficient permissions for device\nSee [https://developer.android.com/tools/device.html] for more information\n```\n\nor\n\n```\nadb: trying pre-KitKat sideload method...\nadb: pre-KitKat sideload connection failed: insufficient permissions for device\nSee [https://developer.android.com/tools/device.html] for more information\n```\n\nYou might be able to solve it by restarting the adb server:\n\n```\n$ adb kill-server\n # adb start-server\n```\n\nAlternatively, make sure you have installed the Android udev rules. See #Fastboot.\n\n"
    },
    {
      "title": "License not accepted",
      "level": 3,
      "content": "Since SDK packages from the AUR are installed to /opt/android-sdk which is owned by root, the sdkmanager --licenses command for accepting the licenses must also be ran as root. If this script is not ran as root, accepting the licenses will silently fail.\n\nYou can confirm the licenses were successfully accepted by checking if the license appears in the /opt/android-sdk/licenses directory.\n\n"
    }
  ]
}