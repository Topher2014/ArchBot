{
  "title": "Aurjson",
  "url": "https://wiki.archlinux.org/title/Aurjson",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Official repositories web interface\n\nThe Aurweb RPC interface is a lightweight RPC interface for the AUR. Queries are sent as HTTP GET requests and the server responds with JSON.\n\n"
    },
    {
      "title": "Query types",
      "level": 3,
      "content": "There are two query types:\n\n- search\n- info\n\n"
    },
    {
      "title": "search",
      "level": 4,
      "content": "Package searches can be performed by issuing requests of the form:\n\n```\n/rpc/v5/search/keyword?by=field\n```\n\nwhere keyword is the search argument and field is one of the following values:\n\n- name (search by package name only)\n- name-desc (search by package name and description)\n- maintainer (search by package maintainer)\n- depends (search for packages that depend on keywords)\n- makedepends (search for packages that makedepend on keywords)\n- optdepends (search for packages that optdepend on keywords)\n- checkdepends (search for packages that checkdepend on keywords)\n\nThe by parameter can be skipped and defaults to name-desc. Possible return types are search and error.\n\nIf a maintainer search is performed and the search argument is left empty, a list of orphan packages is returned.\n\nExamples:\n\nSearch for package:\n\n```\nhttps://aur.archlinux.org/rpc/v5/search/package\n```\n\nSearch for packages maintained by user:\n\n```\nhttps://aur.archlinux.org/rpc/v5/search/user?by=maintainer\n```\n\nSearch for packages that have package as `makedepends`:\n\n```\nhttps://aur.archlinux.org/rpc/v5/search/package?by=makedepends\n```\n\nSearch with callback:\n\n```\nhttps://aur.archlinux.org/rpc/v5/search/package?callback=jsonp1192244621103\n```\n\n"
    },
    {
      "title": "info",
      "level": 4,
      "content": "Package information can be retrieved by issuing requests of the form:\n\n```\n/rpc/v5/info?arg%5B%5D=pkg1&arg%5B%5D=pkg2&…\n```\n\nwhere pkg1, pkg2, … are the exact matches of names of packages to retrieve package details for.\n\nPossible return types are multiinfo and error.\n\nExamples:\n\nInfo for a single package:\n\n```\nhttps://aur.archlinux.org/rpc/v5/info?arg[]=package\n```\n\nInfo for multiple packages:\n\n```\nhttps://aur.archlinux.org/rpc/v5/info?arg[]=pkg1&arg[]=pkg2\n```\n\n"
    },
    {
      "title": "Return types",
      "level": 3,
      "content": "The return payload is of one format and currently has three main types. The response will always return a type so that the user can determine if the result of an operation was an error or not.\n\nThe format of the return payload is:\n\n```\n{\"version\":5,\"type\":ReturnType,\"resultcount\":0,\"results\":ReturnData}\n```\n\nReturnType is a string, and the value is one of:\n\n- search\n- multiinfo\n- error\n\n"
    },
    {
      "title": "return data",
      "level": 4,
      "content": "The type of ReturnData is an array of dictionary objects for the search and multiinfo ReturnType, and an empty array for error ReturnType.\n\nFor the ReturnType search, ReturnData may contain the following fields:\n\n- ID\n- Name\n- PackageBaseID\n- PackageBase\n- Version\n- Description\n- URL\n- NumVotes\n- Popularity\n- OutOfDate\n- Maintainer\n- FirstSubmitted\n- LastModified\n- URLPath\n\nFor the ReturnType info and multiinfo, ReturnData may additionally contain the following fields:\n\n- Depends\n- MakeDepends\n- OptDepends\n- CheckDepends\n- Conflicts\n- Provides\n- Replaces\n- Groups\n- License\n- Keywords\n\nFields that a package does not contain will be omitted from the output.\n\n"
    },
    {
      "title": "error",
      "level": 4,
      "content": "The error type has an error response string as the return value. An error response can be returned from either a search or an info query type.\n\nExample of ReturnType error:\n\n```\n{\"version\":5,\"type\":\"error\",\"resultcount\":0,\"results\":[],\"error\":\"Incorrect by field specified.\"}\n```\n\n"
    },
    {
      "title": "search",
      "level": 4,
      "content": "The search type is the result returned from a search request operation.\n\nExample of ReturnType search:\n\n```\n{\"version\":5,\"type\":\"search\",\"resultcount\":2,\"results\":[{\"ID\":206807,\"Name\":\"cower-git\", ...}]}\n```\n\n"
    },
    {
      "title": "info",
      "level": 4,
      "content": "The info type is the result returned from an info request operation.\n\nExample of ReturnType multiinfo:\n\n```\n{\n    \"version\":5,\n    \"type\":\"multiinfo\",\n    \"resultcount\":1,\n    \"results\":[{\n        \"ID\":229417,\n        \"Name\":\"cower\",\n        \"PackageBaseID\":44921,\n        \"PackageBase\":\"cower\",\n        \"Version\":\"14-2\",\n        \"Description\":\"A simple AUR agent with a pretentious name\",\n        \"URL\":\"http:\\/\\/github.com\\/falconindy\\/cower\",\n        \"NumVotes\":590,\n        \"Popularity\":24.595536,\n        \"OutOfDate\":null,\n        \"Maintainer\":\"falconindy\",\n        \"FirstSubmitted\":1293676237,\n        \"LastModified\":1441804093,\n        \"URLPath\":\"\\/cgit\\/aur.git\\/snapshot\\/cower.tar.gz\",\n        \"Depends\":[\n            \"curl\",\n            \"openssl\",\n            \"pacman\",\n            \"yajl\"\n        ],\n        \"MakeDepends\":[\n            \"perl\"\n        ],\n        \"License\":[\n            \"MIT\"\n        ],\n        \"Keywords\":[]\n    }]\n }\n```\n\n"
    },
    {
      "title": "jsonp",
      "level": 3,
      "content": "If you are working with a javascript page, and need a JSON callback mechanism, you can do it. You just need to provide an additional callback variable. This callback is usually handled via the javascript library, but here is an example.\n\nExample Query:\n\n```\nhttps://aur.archlinux.org/rpc/v5/search/foobar?callback=jsonp1192244621103\n```\n\nExample Result:\n\n```\n/**/jsonp1192244621103({\"version\":5,\"type\":\"search\",\"resultcount\":1,\"results\":[{\"ID\":250608,\"Name\":\"foobar2000\",\"PackageBaseID\":37068,\"PackageBase\":\"foobar2000\",\"Version\":\"1.3.9-1\",\"Description\":\"An advanced freeware audio player (uses Wine).\",\"URL\":\"http:\\/\\/www.foobar2000.org\\/\",\"NumVotes\":39,\"Popularity\":0.425966,\"OutOfDate\":null,\"Maintainer\":\"supermario\",\"FirstSubmitted\":1273255356,\"LastModified\":1448326415,\"URLPath\":\"\\/cgit\\/aur.git\\/snapshot\\/foobar2000.tar.gz\"}]})\n```\n\nThis would automatically call the JavaScript function jsonp1192244621103 with the parameter set to the results of the RPC call.\n\n"
    },
    {
      "title": "Limitations",
      "level": 2,
      "content": "- HTTP GET requests are limited to URI of 8190 bytes maximum length. However, the official AUR instance running on a nginx server with HTTP/2 uses the default URI maximum length limit of 4443 bytes. Info requests with more than about 200 packages as an argument will need to be split.\n- Search queries must be at least two characters long.\n- Searches will fail if they contain 5000 or more results.\n- The API rate is limited to a maximum of 4000 requests per day per IP.\n\n"
    },
    {
      "title": "Reference clients",
      "level": 2,
      "content": "Sometimes things are easier to understand with examples. A few reference implementations (jQuery, python2, ruby) for old specification and without specifying \"v\" parameter are available here.\n\nThe new path-based version of the /rpc v5 API implementation on python 3.12 is available here.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "API documentation: https://aur.archlinux.org/rpc/swagger\n\n"
    }
  ]
}