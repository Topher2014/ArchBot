{
  "title": "Create packages for other distributions",
  "url": "https://wiki.archlinux.org/title/Create_packages_for_other_distributions",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Creating packages\n\nArch is the best. But you may still want to package for other distributions.\n\n"
    },
    {
      "title": "General",
      "level": 2,
      "content": "- Virtualization is an obvious way, but requires maintaining additional system(s).\n- Use distribution-specific packaging tools. Examples: abuild (Alpine), dh-makeAUR, dpkg (Debian), rpm-tools (Fedora). Shortcuts such as dpkg-deb may be suited for less complex tasks.\n- Chroot or systemd-nspawn to create a base system inside (yet separate from) Arch. Examples: debootstrap (Debian), dnf (Fedora). This has the added benefit of building in a minimal, clean environment.\n- Use chroot with packaging tools in an an automated fashion. Examples: pbuilder-ubuntuAUR (Debian).\n- A different way to handle (possibly incompatible) dependencies is static linking. Please note that most distributions frown on this practice.\n- Common practice applies regardless of distribution used. For example, do not build packages as root.\n\n"
    },
    {
      "title": "Alpine",
      "level": 2,
      "content": "See abuild.\n\n"
    },
    {
      "title": "Debian",
      "level": 2,
      "content": "The Debian Packaging Tutorial explains the groundwork. It describes use of the following tools:\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n- cowdancer — Copy-on-write wrapper for pbuilder\n\n- debootstrap — A tool used to create a Debian base system from scratch, without requiring the availability of dpkg or apt.\n\n- devscripts — Scripts to make the life of a Debian Package maintainer easier\n\n- dh-autoreconf — Debhelper add-on to call autoreconf and clean up after the build\n\n- dh-make — Tool that converts source archives into Debian package source\n\n- dpkg — The Debian Package Manager\n\n- dput — Debian package upload tool\n\n- git-buildpackage — Tools from Debian to integrate the package build system with Git\n\n- pbuilder-ubuntu — Chroot environment for building Debian packages\n\n- quilt — Manage a series of patches by keeping track of the changes each patch makes\n\n- strip-nondeterminism — Tool for stripping bits of non-deterministic information from files\n\n"
    },
    {
      "title": "Override dependency handling",
      "level": 4,
      "content": "dpkg does not recognize dependencies installed by pacman. This means dpkg-buildpackage will generally fail with errors such as:\n\n```\ndpkg-checkbuilddeps: Unmet build dependencies: build-essential:native debhelper (>= 8.0.0)\ndpkg-buildpackage: warning: build dependencies/conflicts unsatisfied; aborting\n```\n\nTo override this, use the -d flag:\n\n```\n$ dpkg-buildpackage -d -us -uc\n```\n\nYou may also need to override dh_shlibdeps by adding the following lines to debian/rules:\n\n```\noverride_dh_shlibdeps:\n   dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info\n```\n\nNote: **strongly recommended** \n\n"
    },
    {
      "title": "Set up a chroot",
      "level": 4,
      "content": "See the Pbuilder How-To for an introduction to pbuilder-ubuntu. Using cowdancer in addition is recommended as copy-on-write offers a significant performance benefit.\n\n- debian-archive-keyring, ubuntu-keyring and gnupg1AUR are required.\n- eatmydata is available as libeatmydata. To prevent LD_PRELOAD errors, it must be installed both inside and outside the chroot. As the paths are different in Arch and Debian, create the following symbolic links:\n\n```\n# ln -s /usr/lib/libeatmydata.so.1.1.1 /usr/lib/libeatmydata/libeatmydata.so\n# ln -s /usr/lib/libeatmydata.so.1.1.1 /usr/lib/libeatmydata/libeatmydata.so.1\n```\n\n- Sample pbuilderrc\n- To create a source package for pbuilder to handle:\n\n```\n$ dpkg-buildpackage -d -us -uc -S\n```\n\n"
    },
    {
      "title": "See also about Debian",
      "level": 3,
      "content": "- Debian Policy\n- New Maintainers' Guide\n- Quilt in Debian packaging\n\n"
    },
    {
      "title": "Fedora",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nFedora:How to create an RPM package\n\n- rpm-tools — RPM.org fork, used in major RPM distributions\n\n- mock — Takes Source RPMs and builds RPMs from them in a chroot\n\n"
    },
    {
      "title": "See also about Fedora",
      "level": 3,
      "content": "- Copr\n\n"
    },
    {
      "title": "openSUSE",
      "level": 2,
      "content": "The Open Build Service (OBS) is a generic system to build and distribute packages from sources in an automatic, consistent and reproducible way. It supports at least .deb, .rpm and Arch packages.\n\n"
    },
    {
      "title": "Creating a package",
      "level": 4,
      "content": "1. Create an account in [1]\n1. Install the oscAUR package. Upstream documentation is available here.\n1. Create an example home:foo project.\n1. Create an example home:foo:bar subproject (optional, but recommended).\n1. Create a new ham example package with osc meta pkg -e home:foo:bar ham. Save the created XML then exit.\n1. Switch to a clean working directory then checkout the project you have just created: osc co home:foo:bar/ham.\n1. Now cd into it: cd home:foo:bar/ham.\n\n"
    },
    {
      "title": "Managing a package",
      "level": 4,
      "content": "Now it is time to decide how we will manage our project. There are two practical ways to do this:\n\n1. Maintain a PKGBUILD plus its helper files (such as *.install scripts) in a version control system (such as git, hg) then just make OBS track it;\n1. Maintain a package entirely in OBS itself.\n\nThe first version is more flexible and dynamic. To proceed:\n\n- From your project directory, create a _service file with the following contents:\n\n```\n<services>\n  <service name=\"tar_scm\">\n    <param name=\"scm\">git</param>\n    <param name=\"url\">git://<your_repo_here></param>\n    <param name=\"versionformat\">git%cd~%h</param>\n    <param name=\"versionprefix\"><your_version_here></param>\n    <param name=\"filename\"><name_of_your_package></param>\n  </service>\n  <service name=\"recompress\">\n    <param name=\"file\">*.tar</param>\n    <param name=\"compression\">xz</param>\n  </service>\n  <service name=\"set_version\"/>\n</services>\n```\n\nHere is an example for gimp-gitAUR:\n\n```\n<services>\n  <service name=\"tar_scm\">\n    <param name=\"scm\">git</param>\n    <param name=\"url\">git://git.gnome.org/gimp.git</param>\n    <param name=\"versionformat\">git%cd~%h</param>\n    <param name=\"versionprefix\">2.9.1</param>\n    <param name=\"filename\">gimp-git</param>\n  </service>\n  <service name=\"recompress\">\n    <param name=\"file\">*.tar</param>\n    <param name=\"compression\">xz</param>\n  </service>\n  <service name=\"set_version\"/>\n</services>\n```\n\n- Make OBS track it: osc add _service\n- If you have any other files to include into the repo, just proceed as before: add the files in the project directory, then make OBS track them (OBS uses subversion as its underlying SCM, so this process might already be familiar for you)\n- Check-in (=upload) your files into the repo osc ci -m \"commit message (e.g. bumped package xxx to version yyy\".\n\nNow, after a while, OBS will begin building your package.\n\n"
    },
    {
      "title": "Tips and tricks about openSUSE",
      "level": 4,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n- To see the build progress of your package, cd into its working directory, then: osc results.\n- There are three repositories, Arch:Core, Arch:Extra and Arch:Community. [community] can be appended as a \"repository path\" after adding the main Arch repository to the project.\n\n"
    },
    {
      "title": "ca-certificates-utils package problem",
      "level": 4,
      "content": "If OBS build fails because of the ca-certificates-utils package, you can add this line to your project config (from your project page, go to Advanced -> Project Config).\n\n```\nPrefer: ca-certificates-utils ca-certificates\n```\n\n"
    },
    {
      "title": "See also about openSUSE",
      "level": 4,
      "content": "- Example repo: arch-cpu-x-git\n- openSUSE packaging guidelines\n- Portal:Packaging from openSUSE wiki\n\n"
    },
    {
      "title": "Pacur",
      "level": 3,
      "content": "Some tools such as Pacur allow building packages for multiple Linux distributions with a consistent package specification format. The package format is very similar to PKGBUILD so it is easy to re-use an existing PKGBUILD and add a few distribution-specific variables to be able to build debian and rpm packages effortlessly. By quickly adapting a PKGBUILD one is able to build package for Amazon Linux, Centos, Debian, Oracle Linux, Fedora and Ubuntu.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- BBS - PKGBUILD equivalents for other distros\n- BBS - Original discussion\n\n"
    }
  ]
}