{
  "title": "Diretrizes de empacotamento do Arch",
  "url": "https://wiki.archlinux.org/title/Diretrizes_de_empacotamento_do_Arch",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Artigos relacionados\n\n- Criando pacotes\n- PKGBUILD\n- makepkg\n- Sistema de compilação do Arch\n- Arch User Repository\n- Diretrizes de segurança para pacotes\n- Diretrizes de envio ao AUR\n- /Segurança\n\nAo compilar pacotes para o Arch Linux, siga as diretrizes de empacotamento abaixo, especialmente se a intenção é contribuir com um novo pacote para o Arch Linux. Você também deve ler as páginas de manual do PKGBUILD(5) e do makepkg(8).\n\n"
    },
    {
      "title": "Protótipo de PKGBUILD",
      "level": 2,
      "content": "```\n# Maintainer: Seu nome <seu-email@domínio.com>\npkgname=NOME\npkgver=VERSÃO\npkgrel=1\npkgdesc=\"\"\narch=()\nurl=\"\"\nlicense=('GPL')\ngroups=()\ndepends=()\nmakedepends=()\noptdepends=()\nprovides=()\nconflicts=()\nreplaces=()\nbackup=()\noptions=()\ninstall=\nchangelog=\nsource=($pkgname-$pkgver.tar.gz)\nnoextract=()\nmd5sums=() #gerado com updpkgsums\n\nbuild() {\n  cd \"$pkgname-$pkgver\"\n\n  ./configure --prefix=/usr\n  make\n}\n\npackage() {\n  cd \"$pkgname-$pkgver\"\n\n  make DESTDIR=\"$pkgdir/\" install\n}\n```\n\nOutros protótipos podem ser encontrados em /usr/share/pacman/ do pacote pacman.\n\n"
    },
    {
      "title": "Etiqueta de pacotes",
      "level": 2,
      "content": "- Os pacotes jamais devem ser instalados em /usr/local/\n- Não introduza novas variáveis ou funções em scripts de compilação PKGBUILD, a menos que o pacote não possa ser compilado sem elas, pois elas podem conflitar com variáveis ou funções usadas pelo próprio makepkg.\n- Se uma nova variável ou uma nova função for absolutamente necessária, prefixe seu nome com um caractere de sublinhado (_), ex: _variavelpersonalizada=\n- O campo packager do meta-arquivo do pacote pode ser personalizado pelo compilador do pacote, modificando a opção apropriada no arquivo /etc/makepkg.conf ou, alternativamente, sobrescrevendo-o com a criação de um ~/.makepkg.conf\n- Não use sub-rotinas do makepkg (e.g. error, msg, msg2, plain, warning), pois elas podem mudar a qualquer momento. Para imprimir dados, use printf ou echo.\n- Todas as mensagens importantes devem ser exibidas durante a instalação usando um arquivo .install. Por exemplo, se um pacote precisa de configurações extras para funcionar, as direções devem ser incluídas neste arquivo.\n- Dependências são os erros mais comuns de empacotamento. Por favor, invista um tempo em verificá-las cuidadosamente, por exemplo executando ldd em executáveis dinâmicos, verificando ferramentas necessárias por scripts ou olhando documentação do software. O utilitário namcap pode lhe ajudar neste assunto. Essa ferramenta pode analisar ambos PKGBUILD e o tarball de pacote resultante e vai avisar você sobre permissões erradas, dependências em falta, dependências redundantes e outros erros comuns.\n- Quaisquer dependências opcionais que não são necessárias para executar o pacote ou que faça-o funcionar, não devem ser incluídas no vetor depends; em vez disso, a informação deve ser adicionada ao vetor optdepends:\n\n```\n_variavelpersonalizada=\n```\n\n```\noptdepends=('cups: printing support'\n            'sane: scanners support'\n            'libgphoto2: digital cameras support'\n            'alsa-lib: sound support'\n            'giflib: GIF images support'\n            'libjpeg: JPEG images support'\n            'libpng: PNG images support')\n```\n\n- Ao criar a descrição de pacote para um pacote, não inclua o nome do pacote, em uma forma autorreferenciativa. Por exemplo, \"Nedit is a text editor for X11\" poderia ser simplificado em \"A text editor for X11\". Também tente manter as descrições abaixo de 80 caracteres.\n- Tente manter o tamanho da linha do PKGBUILD abaixo de 100 caracteres.\n- Onde for possível, remova linhas vazias do PKGBUILD (provides, replaces, etc.)\n- É uma prática comum preservar a ordem dos campos do PKGBUILD informada acima. Porém, isso não é obrigatório, sendo o único requisito neste contexto a correção da sintaxe bash.\n- Envolva com aspas as variáveis que podem conter espaços, tal como \"$pkgdir\" e \"$srcdir\".\n- Para garantir a integridade de pacotes, certifique-se que as variáveis de integridade contêm os valores corretos. Essas podem ser atualizadas usando a ferramenta updpkgsums(8).\n\n"
    },
    {
      "title": "Nomenclatura de pacotes",
      "level": 2,
      "content": "- Nomes de pacotes pode conter apenas caracteres alfanuméricos e algum entre @, ., _, +, -. Nomes não podem iniciar com hífenes ou pontos. Todas as letras devem ser minúsculas.\n- Nomes de pacotes não devem ser sufixados com o número de versão principal de lançamento do upstream (ex.: não queremos libfoo2 se upstream chama-o de libfoo v2.3.4) no caso da biblioteca e suas dependências esperadas para serem capazes de manter o uso da maioria das versões recentes de biblioteca com cada lançamento do upstream. Porém, para alguns softwares ou dependências, isso não pode ser presumido. No passado, isso foi especialmente verdadeiro para kits de ferramentas de widget, tal como GTK ou Qt. Softwares que depende em tais kits de ferramentas geralmente podem não ser trivialmente portadas para uma nova versão maior. Como tal, em casos em que softwares podem, trivialmente, se manter funcionando junto com suas dependências, nomes de pacotes devem carregar o sufixo da versão maior (ex.: gtk2, gtk3, qt4, qt5). Para casos em que a maioria das dependências podem se manter funcionando junto com lançamentos mais novos, mas alguns não podem (por exemplo, código fechado que precisa de libpng12 ou similar), uma versão obsoleta daquele pacote pode ser chamado de libfoo1 enquanto a versão atual é apenas libfoo.\n\n"
    },
    {
      "title": "Versionamento de pacotes",
      "level": 2,
      "content": "- Versões de pacotes (p.ex., PKGBUILD (Português)#pkgver) devem ser as mesmas que a versão lançada pelo autor. Versões podem incluir letras, se for necessário (ex: a versão do nmap é 2.54BETA32). Tags de versão não podem incluir hífens! Letras, números e pontos, somente.\n- Pacotes estáveis empacotam lançamentos estáveis: Candidatos a lançamento (p.ex., 1.0.0-rc1), alfa (p.ex., 1.0.0-alpha1) e beta (p.ex., 1.0.0-beta1) não são permitidos e são apenas para ser usado sob as seguintes circunstâncias.\n- Lançamentos de pacotes (p.ex., PKGBUILD (Português)#pkgrel) são específicos de pacotes do Arch Linux. Eles permitem a usuários diferenciar entre compilações de pacotes mais novas das mais antigas. Quando uma nova versão de software do pacote é lançada, o contador de lançamento recomeça em 1. Então, na medida em que correções e otimizações forem feitas, o pacote será relançado para o público do Arch Linux e o número de lançamento será incrementado. Quando uma nova versão for lançada, o contador de lançamento será reiniciado para 1. As tags de lançamento do pacote seguem as mesmas restrições de nomenclatura que tags de versão.\n\n"
    },
    {
      "title": "Dependências de pacotes",
      "level": 2,
      "content": "- Não confie em dependências transitivas em qualquer uma das PKGBUILD (Português)#Dependências, pois elas podem quebrar, se uma das dependências for atualizada.\n- Liste todas as dependências diretas da biblioteca. Para identificá-las, find-libdeps(1) (parte de devtools) pode ser usado.\n\n"
    },
    {
      "title": "Relações de pacotes",
      "level": 2,
      "content": "- Não adicione $pkgname a PKGBUILD (Português)#provides, pois ele é sempre fornecido implicitamente pelo pacote.\n- Liste todas as bibliotecas compartilhadas externas de um pacote em PKGBUILD (Português)#provides (por exemplo, 'libalgumacoisa.so'). Para identificá-los, find-libprovides(1) (parte de devtools) pode ser usado.\n\n"
    },
    {
      "title": "Fontes de pacotes",
      "level": 2,
      "content": "- Os fontes HTTPS (https:// para tarballs, git+https:// para fontes git) devem ser usados sempre que possível\n- Os fontes devem ser verificados usando assinaturas PGP sempre que possível (isso pode envolver a criação de uma tag git em vez de um tarball de origem, se os sinais upstream confirmarem e marcarem, mas não os tarballs)\n- Ao compilar a partir de uma tag do git, use seu hash de objeto obtido de git rev-parse em vez do nome da tag:\n\n```\n_tag=1234567890123456789012345678901234567890 # git rev-parse \"v$pkgver\"\nsource=(git+https://$url.git?signed#tag=$_tag)\n\npkgver() {\n    cd \"$pkgname\"\n    git describe\n}\n```\n\n- Não diminua a segurança ou a validade de um pacote (por exemplo, removendo uma verificação de soma de verificação ou removendo a verificação de assinatura PGP) porque uma versão anterior foi interrompida ou de repente carece de um determinado recurso (por exemplo, falta de assinatura PGP para um novo lançamento)\n- Os fontes precisam ser exclusivos em srcdir (isso pode exigir que você os renomeie durante o download, por exemplo, \"${pkgname}-${pkgver}.tar.gz::https://${pkgname}.tld/download/${pkgver}.tar.gz\")\n- Evite usar espelhos específicos (por exemplo, no sourceforge) para fazer o download, pois eles podem ficar indisponíveis\n\n"
    },
    {
      "title": "Trabalhando com upstream",
      "level": 2,
      "content": "É uma boa prática trabalhar em estreita colaboração com a upstream, sempre que possível. Isso implica relatar problemas sobre a compilação e o teste de um pacote.\n\n- Relate problemas imediatamente ao upstream.\n- Patches do upstream sempre que possível.\n- Adicione comentários com links para relatórios de erros relevantes (do upstream) no PKGBUILD (isso é particularmente importante, pois garante, que outros empacotadores possam entender as alterações e também trabalhar com um pacote).\n\nÉ recomendado monitorar o upstream com ferramentas como nvchecker ou urlwatch para ser informado sobre novos lançamentos estáveis.\n\n"
    },
    {
      "title": "Diretórios",
      "level": 2,
      "content": "- Arquivos de configuração devem ser mantidos dentro do diretório /etc. Se há mais de um arquivo de configuração, é costumeiro usar um subdiretório para manter a área do /etc o mais limpo possível. Use /etc/pkg, sendo pkg o nome do pacote (ou uma alternativa adequada, p.ex., o apache usa /etc/httpd/).\n- Arquivos de pacotes devem seguir essas diretrizes gerais de diretórios:\n\nTable content:\n/etc | Arquivos de configuração essenciais para o sistema\n/usr/bin | Binários\n/usr/lib | Bibliotecas\n/usr/include | Arquivos cabeçalhos (headers)\n/usr/lib/pkg | Módulos, plug-ins, etc.\n/usr/share/doc/pkg | Documentação de aplicativo\n/usr/share/info | Arquivos de sistema do GNU Info\n/usr/share/licenses/pkg | Licenças de aplicativo\n/usr/share/man | Páginas de manual (man)\n/usr/share/pkg | Dados de aplicativo\n/var/lib/pkg | Armazenamento persistente de aplicativo\n/etc/pkg | Arquivos de configuração de pkg\n/opt/pkg | Pacotes grandes contendo todos os seus arquivos\n\n- Pacotes não devem conter os diretórios abaixo: /bin /sbin /dev /home /srv /media /mnt /proc /root /selinux /sys /tmp /var/tmp /run\n\n- /bin\n- /sbin\n- /dev\n- /home\n- /srv\n- /media\n- /mnt\n- /proc\n- /root\n- /selinux\n- /sys\n- /tmp\n- /var/tmp\n- /run\n\n"
    },
    {
      "title": "Tarefas do Makepkg",
      "level": 2,
      "content": "Quando makepkg é usado para compilar um pacote, ele automaticamente faz o seguinte:\n\n1. Verifica se as dependências (depends) e dependências em tempo de compilação (makedepends) do pacote estão instaladas\n1. Baixa os arquivos fontes dos servidores\n1. Verifica a integridade de arquivos fonte\n1. Descompacta os arquivos fonte\n1. Realiza qualquer patching necessário\n1. Compila o software e instala-o em um fakeroot\n1. Remove (strips) símbolos de binários\n1. Remove (strips) símbolos de depuração de bibliotecas\n1. Compacta páginas de manual e/ou info\n1. Gera o meta-arquivo de pacote, o qual é incluído em cada pacote\n1. Compacta o fakeroot no arquivo de pacote\n1. Armazena o arquivo de pacote no diretório de destino configurado (isto é, por padrão, diretório de trabalho atual)\n\n"
    },
    {
      "title": "Arquiteturas",
      "level": 2,
      "content": "O vetor arch deve conter 'x86_64' se o pacote compilado é específico para a arquitetura. Do contrário, use 'any' para pacotes que independem de arquitetura.\n\n"
    },
    {
      "title": "Licenças",
      "level": 2,
      "content": "Veja PKGBUILD#license.\n\n"
    },
    {
      "title": "Compilações reproduzíveis",
      "level": 2,
      "content": "O Arch está trabalhando para tornar todos os pacotes reproduzíveis. Um empacotador pode verificar se um pacote é reproduzível com makerepropkg de devtools ou repro de archlinux-repro.\n\n```\n$ makerepropkg $pkgname-1-1-any.pkg.tar.zst\n```\n\nou\n\n```\n$ repro -f $pkgname-1-1-any.pkg.tar.zst\n```\n\nSe a marca de data/hora é necessário em tempo de compilação, use a variável de ambiente SOURCE_DATE_EPOCH. O formato está documentado no upstream.\n\n"
    },
    {
      "title": "Diretrizes adicionais",
      "level": 2,
      "content": "Certifique-se de ler primeiro as diretrizes acima - pontos importantes são listados nesta página e que não serão repetidos nas páginas de diretrizes a seguir. As diretrizes específicas abaixo têm a intenção de ser um adicionar aos padrões listados nesta.\n\n32-bit – CLR – CMake – Cross – DKMS – Eclipse – Electron – Fonte – Free Pascal – GNOME – Go – Haskell – Java – KDE – Kernel – Lisp – Meson – MinGW – Node.js – Nonfree – OCaml – Perl – PHP – Python – R – Ruby – Rust – Shell – VCS – Web – Wine\n\nPacotes enviados ao AUR também devem estar em conformidade com as diretrizes de envio ao AUR.\n\n"
    }
  ]
}