{
  "title": "Weechat",
  "url": "https://wiki.archlinux.org/title/Weechat",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "WeeChat is a highly extendable and feature rich IRC client.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the weechat package, or weechat-gitAUR for the development version.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "WeeChat provides two executables:\n\n- weechat(1), the curses interface;\n- weechat-headless(1), the headless version.\n\nRead the quick start guide. For details consult the user's guide.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "By default WeeChat stores its configuration files in XDG directories. Editing these files directly is not recommended because WeeChat may write them at any time.[1]\n\nInstead you should use the /set command. You can get a list of all configurable options by running /set in the WeeChat buffer window. Since there are nearly 600 default configurable options, you can search through them with a wildcard syntax: /set irc.server.* or /set *server* as an example. You can get help on each option with the /help command:\n\n```\n/help irc.server.libera.autoconnect\n```\n\n"
    },
    {
      "title": "Connecting to a server",
      "level": 2,
      "content": "You can connect to a IRC server by adding it and then using /connect:\n\n```\n/server add libera irc.libera.chat/6697\n/connect libera\n```\n\nSee the WeeChat documentation and /help server for more information.\n\n"
    },
    {
      "title": "Configuring SSL",
      "level": 2,
      "content": "Many IRC servers, including Libera.Chat where the Arch IRC channels are, support SSL.\n\nIf you are making a server with /server, add the SSL port (usually 6697) and -tls to the end of the line. For example:\n\n```\n/server add libera irc.libera.chat/6697 -tls\n```\n\n"
    },
    {
      "title": "Upgrading",
      "level": 3,
      "content": "WeeChat can be upgraded without disconnecting from the IRC servers (non-SSL connections only):\n\n```\n/upgrade\n```\n\nThis will load the new WeeChat binary and reload the current configuration.\n\n"
    },
    {
      "title": "Aliases",
      "level": 3,
      "content": "Aliases can be created to simplify commonly executed commands. A nice example is Wraithan's smart filter alias:\n\nFirst, we need to enable smart filters:\n\n```\n/set irc.look.smart_filter \"on\"\n```\n\nNext, we will create the \"sfilter\" alias:\n\n```\n/alias add sfilter filter add irc_smart_$server_$channel irc.$server.$channel irc_smart_filter *\n```\n\nWe can now type\n\n```\n/sfilter\n```\n\nin any buffer, and the smart filter will only be enabled for that buffer.\n\nThe following alias will remove a previously enabled smart filter in the current buffer. Add the alias:\n\n```\n/alias add rmsfilter filter del irc_smart_$server_$channel\n```\n\nand execute it by\n\n```\n/rmsfilter\n```\n\n"
    },
    {
      "title": "Exec command",
      "level": 3,
      "content": "A plugin called \"exec\" is available, with the command /exec. It will execute external command and can display output to the current buffer with the -o option or locally (default).\n\n"
    },
    {
      "title": "Key bindings",
      "level": 3,
      "content": "See /help key.\n\nExample that adds basic irssi style window scrolling:\n\n```\n/key bind meta-p /window page_up\n/key bind meta-n /window page_down\n```\n\nIf you are using vimode plugin, most of the default bindings will not work will have vim like alternatives. Check bindings\n\n"
    },
    {
      "title": "SSH connection lost when idle",
      "level": 3,
      "content": "If you are connecting to your WeeChat through a remote shell using SSH, for example running it in GNU Screen or tmux you might experience getting disconnected after a while when idle. There are multiple factors in play why this might happen, but the easiest way to change this is to force the connection to be kept alive by appending this to your SSH-configuration on the remote shell.\n\nThis has nothing to do with WeeChat itself, but losing connection when idle will not happen with its alternative irssi by default, and thus is a common situation for those converting to WeeChat.\n\n```\n# /etc/ssh/sshd_config\n```\n\n```\nClientAliveInterval 300\n```\n\nOr have a look at Mosh.\n\n"
    },
    {
      "title": "Emojis",
      "level": 3,
      "content": "Emojis are part of Unicode set. Requirements for emojis:\n\n- terminal emulator must support Unicode and emojis subset.\n- font used in terminal emulator must support emojis subset.\n\nIncomplete list of terminals with emojis support:\n\n- xfce4-terminal\n- alacritty\n- rxvt-unicode\n- foot\n\n"
    },
    {
      "title": "Mouse support",
      "level": 3,
      "content": "A terminal emulator will pass through mouse scroll events and weechat will scroll-in areas\n\n- chat area\n- nicklist bar\n\n"
    },
    {
      "title": "Mouse in tmux",
      "level": 4,
      "content": "When running in tmux turn on mouse support in ~/.tmux.conf:\n\n```\nset -g mouse on\n```\n\n"
    },
    {
      "title": "Matrix",
      "level": 3,
      "content": "The weechat-matrixAUR script allows you to connect to Matrix servers. Install it, then:\n\n1. run /script load weechat-matrix.py inside Weechat,\n1. configure weechat-matrix, and\n1. use the /join command inside a Matrix buffer to join Matrix channels, e.g. /join #archlinux:archlinux.org.\n\nTo load the script automatically during WeeChat startup, run:\n\n```\n$ mkdir -p ~/.local/share/weechat/python/autoload\n$ ln -s /usr/share/weechat/python/weechat-matrix.py -t ~/.local/share/weechat/python/autoload\n```\n\n"
    },
    {
      "title": "Slack",
      "level": 3,
      "content": "There is a native client for slack: wee-slack\n\n"
    },
    {
      "title": "Desktop notifications",
      "level": 3,
      "content": "To receive desktop notifications for mentions or private messages, the weechat-notify-sendAUR script by Petr Zemek can be installed.\n\nThe script uses libnotify and is known to work with both KDE and Gnome.\n\nAnother alternative with the built-in trigger plugin is to set a value for trigger.trigger.beep.command.\n\n```\n/set trigger.trigger.beep.command \"/print -beep;/exec -bg notify-send -i '/usr/share/icons/hicolor/32x32/apps/weechat.png' 'IRC Notification' \"${tg_tag_nick}: ${tg_message_nocolor}\"\"\n```\n\n"
    },
    {
      "title": "Mobile device notifications",
      "level": 3,
      "content": "To receive notifications for mentions or private messages to an Android mobile device, you can use the IrssiNotifier port to WeeChat from the official website. This script requires a Google Account, and a registration step with the service provider to obtain an API key. Then, install the plugin\n\n```\n$ cd ~/.local/share/weechat/python\n$ curl -O https://www.weechat.org/files/scripts/irssinotifier.py\n$ ln -s ../irssinotifier.py autoload/\n```\n\nand intialize the API token and end-to-end encryption password in WeeChat\n\n```\n/set plugins.var.python.irssinotifier.api_token your-api-token-from-website\n/set plugins.var.python.irssinotifier.encryption_password your-password-same-as-in-andoid-app\n/save\n```\n\nAn alternative that does not require a Google Account is a Ruby script for NotifyMyAndroid.com from GitHub, with a similar installation procedure to the above, but into ~/.local/weechat/ruby.\n\n"
    },
    {
      "title": "WeeChat relay with a systemd user service",
      "level": 3,
      "content": "To use your WeeChat instance as a WeeChat relay for other WeeChat clients (not to be confused with the IRC relay feature) you can use the WeeChat relay plugin and either a systemd user service, if you only want headless operation, or a combination of a systemd user service and tmux to maintain full command line functionality.\n\nEither method involves creating a service file in the directory ~/.config/systemd/user/\n\n"
    },
    {
      "title": "tmux method",
      "level": 4,
      "content": "Due to the incompatibilities between how systemd manages jobs and the client-server behavior of tmux you will want to use the -L option to separate your default tmux sessions from the WeeChat one being managed by systemd. If this is the first tmux session started using the default socket then stopping and restarting the WeeChat user service will kill all the sessions connected to the default tmux socket. If the WeeChat tmux session is started after another default tmux session then the WeeChat session will die once systemd moves onto the next service unit. Sequestering the WeeChat tmux server to its own socket forces the expected behaviors when invoking systemctl. This does however mean that you will not see the WeeChat session when using tmux without using -L to select the correct socket.\n\n```\n~/.config/systemd/user/weechat.service\n```\n\n```\n[Unit]\nDescription=A WeeChat client and relay service using Tmux\nAfter=network.target\n\n[Service]\nType=forking\nRemainAfterExit=yes\nExecStart=/usr/bin/tmux -L weechat new -d -s weechat weechat\nExecStop=/usr/bin/tmux -L weechat kill-session -t weechat\n\n[Install]\nWantedBy=default.target\n```\n\nOnce the service is in place, all you need to do is start/enable the user unit and run loginctl enable-linger.\n\nFrom there you can connect to the tmux session in order to configure the weechat relay plugin:\n\n```\n$ tmux -L weechat attach\n```\n\nFrom there you can configure the WeeChat relay plugin with the desired settings on the console: https://www.weechat.org/files/doc/stable/weechat_user.en.html#relay\n\nIf you want to hide tmux status bar, you can append this option to ExecStart:\n\n```\n\\; set-option status off\n```\n\nFor displaying 256 colors with the session it may be needed to append this to tmux configuration file:\n\n```\nset -g default-terminal screen-256color\n```\n\n"
    },
    {
      "title": "Headless method",
      "level": 4,
      "content": "A key difference with this method is that you will either need to start WeeChat normally, configure the relay plugin, stop WeeChat, and then start the service or edit your relay.conf file manually while WeeChat is not running and then start your service. Either way you will need to configure your relay settings before starting your systemd WeeChat service: https://www.weechat.org/files/doc/stable/weechat_user.en.html#relay.\n\n```\n~/.config/systemd/user/weechat-headless.service\n```\n\n```\n[Unit]\nDescription=A headless WeeChat client and relay service \nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/bin/weechat-headless --daemon\n\n[Install]\nWantedBy=default.target\n```\n\nOnce the service is in place, all you need to do is start/enable the user unit and run loginctl enable-linger.\n\nNote that we do not need an ExecStop defined because systemd will automatically track the PID and send the appropriate shutdown signal to the daemon.\n\nOnce the user unit is in place, enable it. When you are ready to start your headless relay, start the user unit.\n\n"
    },
    {
      "title": "Errors loading plugins",
      "level": 3,
      "content": "You may see output like the following in the main window after starting weechat:\n\n```\n13:26:10 =!= | Error: unable to load plugin \"/usr/lib/weechat/plugins/ruby.so\": libruby.so.2.4: cannot open shared object file: No such file or directory\n13:26:10 =!= | If you're trying to load a script and not a C plugin, try command to load scripts (/perl, /python, ...)\n13:26:10 =!= | Error: unable to load plugin \"/usr/lib/weechat/plugins/lua.so\": liblua.so.5.3: cannot open shared object file: No such file or directory\n13:26:10 =!= | If you're trying to load a script and not a C plugin, try command to load scripts (/perl, /python, ...)\n13:26:10 =!= | Error: unable to load plugin \"/usr/lib/weechat/plugins/aspell.so\": libaspell.so.15: cannot open shared object file: No such file or directory\n13:26:10 =!= | If you're trying to load a script and not a C plugin, try command to load scripts (/perl, /python, ...)\n13:26:10 =!= | Error: unable to load plugin \"/usr/lib/weechat/plugins/tcl.so\": libtcl8.6.so: cannot open shared object file: No such file or directory\n13:26:10 =!= | If you're trying to load a script and not a C plugin, try command to load scripts (/perl, /python, ...)\n```\n\nThe default configuration for weechat attempts to load all plugins found in /usr/lib/weechat/plugins which in this case includes ruby, lua, aspell and tcl. These packages are not required by the weechat package and may not be installed on your machine. There are two options if these errors bother you:\n\n1. Install ruby, lua, aspell and/or tcl.\n1. Or, run /set weechat.plugin.autoload \"*,!ruby,!lua,!aspell,!tcl\" which will prevent loading those plugins with a bang (!) prefix.\n\n"
    },
    {
      "title": "Problem loading multiline.pl",
      "level": 4,
      "content": "This problem happens with perl version >= 5.31.1\n\nThe script multiline.pl depends on the Pod::Select module. However, since perl version v5.31.1 Pod::Select has been removed.\n\nTo fix the problem, install perl-pod-parser.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Home Page\n- WeeChat Documentation\n- WeeChat Scripts\n- WeeChat Development Blog\n\n"
    },
    {
      "title": "Guides",
      "level": 3,
      "content": "- Official WeeChat quick start guide - a good place to start\n- FiXato's guide to WeeChat - A Weechat Contributers Guide\n- My always up-to-date WeeChat configuration - r3m (weechat-dev)\n\n"
    }
  ]
}