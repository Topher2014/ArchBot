{
  "title": "Octave",
  "url": "https://wiki.archlinux.org/title/Octave",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Matlab\n- Sage-mathematics\n- Mathematica\n\nFrom the official website:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the octave package.\n\nRun the GUI with octave --gui or the CLI with octave-cli.\n\n"
    },
    {
      "title": "Alternative graphical interfaces",
      "level": 3,
      "content": "The default octave GUI is included in the octave package. Alternatively, you can use one of the following unofficial GUIs:\n\n- Cantor — A graphical user interface that delegates its mathematical operations to one of several back ends (Scilab, Maxima, Octave and others).\n\n- JupyterLab — Browser-based interactive environment which supports many programming backends, including Octave.\n\n"
    },
    {
      "title": "Performance",
      "level": 3,
      "content": "Octave uses the blas package for linear algebra computation by default. However, this implementation does not take advantage of modern CPU instructions. To accelerate performance, the blas-openblas package can be installed as a drop-in replacement for blas. Other BLAS implementations can also be used depending on available hardware, such as intel-oneapi-mkl for Intel CPUs or cuda for NVIDIA GPUs.\n\nTo illustrate this point, the following code can be used to get an estimate for how many GFLOPS are being executed on an NxN matrix multiply:\n\n```\nN = 4096;\nA = single(rand(N, N));\nB = single(rand(N, N));\nstart = clock();\nC = A * B;\nelapsedTime = etime(clock(), start);\ngFlops = 2 * N * N * N / (elapsedTime * 1e9)\n```\n\nRunning the following code on an Intel Core i7-9750H:\n\n```\noctave ~/test_program.m\n```\n\n```\ngFlops = 3.7222\n```\n\nAfter installing openblas and running the program on a single thread:\n\n```\nOMP_NUM_THREADS=1 octave ~/test_program.m\n```\n\n```\ngFlops = 121.55\n```\n\nAfter letting openblas use all 12 threads available on the 9750H:\n\n```\nOMP_NUM_THREADS=12 octave ~/test_program.m\n```\n\n```\ngFlops = 281.33\n```\n\n"
    },
    {
      "title": "Octave-Forge",
      "level": 2,
      "content": "Octave provides a set of packages, similar to Matlab's Toolboxes, through Octave-Forge. The complete list of packages is here.\n\nPackages can be installed #Using Octave's installer or #Using the AUR.\n\n"
    },
    {
      "title": "Using Octave's installer",
      "level": 3,
      "content": "Packages can be managed using Octave's installer. They are installed to ~/octave, or in a system directory with the -global option. To install a package:\n\n```\noctave:1> pkg install -forge packagename\n```\n\nTo uninstall a package:\n\n```\noctave:3> pkg uninstall packagename\n```\n\nSome packages get loaded automatically by Octave, for those which do not:\n\n```\noctave:4> pkg load packagename\n```\n\nLoading all packages is discouraged, as it may affect performance and create name conflicts. If you however wish to load all packages, you can issue:\n\n```\noctave:5> cellfun (@(x) pkg (\"load\", x.name), pkg (\"list\"));\n```\n\nTo see which packages have been loaded use pkg list, the packages with an asterisk are the ones that are already loaded.\n\nA way to make sure that all packages gets loaded at Octave startup:\n\n```\n/usr/share/octave/site/m/startup/octaverc\n```\n\n```\n## System-wide startup file for Octave.\n##\n## This file should contain any commands that should be executed each\n## time Octave starts for every user at this site. \n pkg load all\n```\n\n"
    },
    {
      "title": "Using the AUR",
      "level": 3,
      "content": "Some packages may be found in the AUR (search packages). New Octave-forge packages for Arch can be created semi-automatically using the Octave-forge helper scripts for Arch Linux.\n\n"
    },
    {
      "title": "Plotting",
      "level": 2,
      "content": "Qt is the default plotting backend:\n\n```\n>> available_graphics_toolkits\nans =\n{\n  [1,1] = fltk\n  [1,2] = qt\n}\n>> graphics_toolkit\nans = qt\n```\n\nAlternatively you can use either FLTK or Gnuplot backend (by installing gnuplot) and running the following command:\n\n```\n>> graphics_toolkit(\"gnuplot\");\n```\n\nTo make this change permanent add it to your ~/.octaverc file.\n\n"
    },
    {
      "title": "Reading Microsoft Excel Spreadsheets",
      "level": 2,
      "content": "You can open .ods, .xls and .xlsx files with the odsread or xlsread function, which requires the octave-ioAUR package:\n\n```\noctave:1> odsread('myfile.ods');\noctave:1> xlsread('myfile.xls');\noctave:1> xlsread('myfile.xlsx');\n```\n\n"
    },
    {
      "title": "Converting to CSV format",
      "level": 3,
      "content": "Alternatively, first convert the files to .csv using LibreOffice Calc (limited to 1024 columns) or Calligra Sheets (calligra, limited to 32768 columns).\n\nAfter the conversion is complete you can use the build-in Octave function csvread for .csv files:\n\n```\noctave:1> csvread('myfile.csv');\n```\n\n"
    },
    {
      "title": "Zsh Undecodable Token",
      "level": 3,
      "content": "If you get error\n\n```\nundecodable token: b(hex)[23m\n```\n\nwhen printing, install grml-zsh-config and relogin.\n\n"
    },
    {
      "title": "vi Mode Undecodable Token",
      "level": 3,
      "content": "Users with their .inputrc configured for vi-mode, for example, as\n\n```\n~/.inputrc\n```\n\n```\n$include /etc/inputrc\nset editing-mode vi\n$if mode=vi\n\nset show-mode-in-prompt on\nset vi-ins-mode-string \\1\\e[6 q\\2\nset vi-cmd-mode-string \\1\\e[2 q\\2\n\nset keymap vi-command\n# these are for vi-command mode\nControl-l: clear-screen\nControl-a: beginning-of-line\n\nset keymap vi-insert\n# these are for vi-insert mode\nControl-l: clear-screen\nControl-a: beginning-of-line\n\n$endif\n```\n\nmay have the Octave GUI prompt corrupted as q>> undecodable token: \\001b(hex)[6\\0020(hex). To remedy this, disable the show-mode-in-prompt setting for Octave, by changing the above .inputrc to be\n\n```\n~/.inputrc\n```\n\n```\n$include /etc/inputrc\nset editing-mode vi\n$if mode=vi\n\n$if Octave\nset show-mode-in-prompt off\n$else\nset show-mode-in-prompt on\nset vi-ins-mode-string \\1\\e[6 q\\2\nset vi-cmd-mode-string \\1\\e[2 q\\2\n\nset keymap vi-command\n# these are for vi-command mode\nControl-l: clear-screen\nControl-a: beginning-of-line\n\nset keymap vi-insert\n# these are for vi-insert mode\nControl-l: clear-screen\nControl-a: beginning-of-line\n$endif\n\n$endif\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:GNU Octave\n\n"
    }
  ]
}