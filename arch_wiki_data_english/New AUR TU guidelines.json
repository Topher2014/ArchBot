{
  "title": "New AUR TU guidelines",
  "url": "https://wiki.archlinux.org/title/New_AUR_TU_guidelines",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Arch User Repository\n- DeveloperWiki:How to be a packager\n- DeveloperWiki:Building in a clean chroot\n- GnuPG\n- OpenPGP\n\nPackage Maintainers are Arch Linux staff members charged with keeping the AUR in working order. They maintain popular packages (communicating with and sending patches upstream as needed), and vote in administrative matters. A Package Maintainer is elected from active community members by current Package Maintainers in a democratic process. Package Maintainers are the only members who have a final say in the direction of the AUR.\n\nThe Package Maintainers are governed using the Package Maintainer bylaws\n\n"
    },
    {
      "title": "TODO list for new Package Maintainers",
      "level": 2,
      "content": "1. Read this entire wiki article.\n1. Read the Package Maintainer Bylaws.\n1. Make sure your account details on the AUR are up-to-date.\n1. Ask one of your sponsors to give you the Package Maintainer status on the AUR.\n1. Remind a bureaucrat to add your wiki account to the Arch Linux Package Maintainers group.\n1. Remind a BBS admin to change your account on forums.\n1. Ask one of your sponsors for the #archlinux-staff and #archlinux-packaging keys and join us in the channels (this is not mandatory, but a great way of getting to know parts of the team and collaborate). If you need a bouncer, ask heftig for a Matrix invite. If you want an @archlinux/package-maintainer/username cloak, ask our group contacts to get you one.\n1. Ask one of your sponsors to create a ticket in the infrastructure repository issue tracker (using the Onboarding template) and provide them with the following information: An SSH public key. If you do not have one, follow SSH keys#Generating an SSH key pair to create one. A username which will be used for your SSO account and for your (to be created) @archlinux.org email address. Your full name. Your (personal) e-mail address and a valid PGP public key ID for it, which will be used to provide the initial password for the developer interface (archweb) to you and which will be linked to your (to be created) SSO account. Whether your private or your (to be created) username@archlinux.org email address should be used for the non-public mailing lists and be allowed to post to the arch-dev-public mailing list.\n1. Set the password for your @archlinux.org e-mail address by following DeveloperWiki:Staff Services#Email.\n1. Create a PGP key pair for package signing by following the workflow for adding a new packager key (using your new username@archlinux.org address as uid).\n1. Ask one of your sponsors to create a ticket in the archlinux-keyring repository issue tracker (using the New Packager Key template) in order to have your PGP key signed by (at least) three main key holders.\n1. Install the devtools package.\n1. Configure your private ssh key for repos.archlinux.org.\n1. Ssh to yourname@repos.archlinux.org (once you have permissions).\n1. Start contributing!\n\n- If you need a bouncer, ask heftig for a Matrix invite.\n- If you want an @archlinux/package-maintainer/username cloak, ask our group contacts to get you one.\n\n- An SSH public key. If you do not have one, follow SSH keys#Generating an SSH key pair to create one.\n- A username which will be used for your SSO account and for your (to be created) @archlinux.org email address.\n- Your full name.\n- Your (personal) e-mail address and a valid PGP public key ID for it, which will be used to provide the initial password for the developer interface (archweb) to you and which will be linked to your (to be created) SSO account.\n- Whether your private or your (to be created) username@archlinux.org email address should be used for the non-public mailing lists and be allowed to post to the arch-dev-public mailing list.\n\n"
    },
    {
      "title": "Junior maintainership",
      "level": 3,
      "content": "Since the ratification of RFC 0014, new Package Maintainers will be marked as \"junior\" for their first two months of packaging. During this time, the new Package Maintainer may only push to the extra-testing repository. Your sponsors can review your packages as-needed and move them to extra.\n\n"
    },
    {
      "title": "The Package Maintainer and the AUR",
      "level": 2,
      "content": "The Package Maintainers should also make an effort to check package submissions in the AUR for malicious code and good PKGBUILDing standards. In around 80% of cases the PKGBUILDs in the AUR are very simple and can be quickly checked for sanity and malicious code by the Package Maintainer team.\n\nPackage Maintainers should also check PKGBUILDs for minor mistakes, suggest corrections and improvements. The Package Maintainer should endeavor to confirm that all packages follow the Arch Packaging Guidelines/Standards and in doing so share their skills with other package builders in an effort to raise the standard of package building across the distribution.\n\nPackage Maintainers are also in an excellent position to document recommended practices.\n\n"
    },
    {
      "title": "Rewriting git history",
      "level": 3,
      "content": "In some cases rewriting the history of an AUR repository is required, for example when a user inadvertently uses their legal name in a published commit. This can be automated with git-filter-branch(1).\n\nTo force push the new history, forward the AUR_OVERWRITE=1 environment variable to git-push(1).\n\nIn detail this includes adding SendEnv AUR_OVERWRITE to your AUR SSH config and setting the env var on your push command: AUR_OVERWRITE=1 git push --force. See [1] for details.\n\nInstall git-filter-repo and run:\n\n```\n$ git-filter-repo --name-callback 'return name.replace(b\"Old name\", b\"New name\")' --email-callback 'return email.replace(b\"old@email.com\", b\"new@email.com\")'\n```\n\nAlternatively, use git filter-branch --env-filter with the GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_COMMITTER_NAME and GIT_COMMITTER_EMAIL environment variables. For example:\n\n```\ngit filter-branch --env-filter '\nif test \"$GIT_AUTHOR_EMAIL\" = \"lepetit@prince.com\"; then\n  GIT_AUTHOR_EMAIL=user@users.noreply.github.com\nfi\nif test \"$GIT_AUTHOR_NAME\" = \"Antoine de Saint-Exup√©ry\"; then\n  GIT_AUTHOR_NAME=user\nfi'\n```\n\n"
    },
    {
      "title": "Handling AUR requests",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nPackage Maintainers should periodically check the requests filed on the AUR. For that there are some generic rules what to check for each request type:\n\n- check if the request is older then 14 days (the date column turns red in the overview) (you cannot accept it before that anyway)\n- check if there was no update to the package itself (commit or release) done in the past 14 days\n- check if there was no comment from the AUR package maintainer done in the past 14 days\n\nIf all of the above points are true then you can accept the Orphan Request.\n\n"
    },
    {
      "title": "Rules for packages entering the extra repository",
      "level": 3,
      "content": "- A package must not already exist in any of the Arch Linux repositories. You should take necessary precautions to ensure no other packager is in the process of promoting the same package. Double-check the AUR package comments, read the latest subject headings in aur-general, grep the git-log(1), and send a quick message to the private packaging IRC channel.\n- Pacman wrappers, as a special exception, will never be permitted. If wanting to otherwise add an AUR helper, write an email to arch-dev-public with the proposed addition, and respect any objections provided by team members.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\n- Only \"popular\" packages may enter the repository, as defined by 1% usage from pkgstats or 10 votes on the AUR.\n- Automatic exceptions to this rule are: i18n packages accessibility packages drivers dependencies of packages who satisfy the definition of popular, including makedeps and optdeps packages that are part of a collection and are intended to be distributed together, provided a part of this collection satisfies the definition of popular\n- Any additions not covered by the above criteria must first be proposed on the aur-general mailing list, explaining the reason for the exemption (e.g. renamed package, new package). The agreement of three other Package Maintainers is required for the package to be accepted into extra. Proposed additions from Package Maintainers with large numbers of \"non-popular\" packages are more likely to be rejected.\n- Package Maintainers are strongly encouraged to move packages they currently maintain from extra if they have low usage. No enforcement will be made, although resigning Package Maintainers packages may be filtered before adoption can occur.\n- It is good practice to always bump the pkgrel by 1 (in other words, set it to n + 1) when promoting a package from AUR. This is to facilitate automatic updates for those who already have the package installed, so that they may continue to receive updates from the official channel. Another positive effect of this is that users are not warned that their local copy is newer, as is the case if a packager does reset the pkgrel to 1.\n- Build scripts for all official packages are provided under the 0BSD license[2]. If build scripts in the AUR package are not explicitly licensed under 0BSD, they need to be rewritten.\n\n- i18n packages\n- accessibility packages\n- drivers\n- dependencies of packages who satisfy the definition of popular, including makedeps and optdeps\n- packages that are part of a collection and are intended to be distributed together, provided a part of this collection satisfies the definition of popular\n\n"
    },
    {
      "title": "Accessing and updating the repository",
      "level": 3,
      "content": "See the packager guide.\n\n"
    },
    {
      "title": "Disowning packages",
      "level": 3,
      "content": "If a Package Maintainer cannot or does not want to maintain a package any longer, a notice should be posted to the AUR Mailing List, so another package maintainer can maintain it. A package can still be disowned even if no other Package Maintainer wants to maintain it, but the Package Maintainers should try not to drop many packages (they should not take on more than they have time for). If a package has become obsolete or is not used any longer, it can be removed completely as well.\n\nIf a package has been removed completely, it can be uploaded once again (fresh) to the AUR, where a regular user can maintain the package instead of the Package Maintainer.\n\n"
    },
    {
      "title": "Moving packages from the AUR to extra",
      "level": 3,
      "content": "Follow the normal procedures for adding a package to extra using the instructions in the Packager guide, but remember to delete the corresponding package from the AUR!\n\n"
    },
    {
      "title": "Moving packages from extra to the AUR",
      "level": 3,
      "content": "Remove the package using the instructions in the Packager Guide and upload your source to the AUR.\n\n"
    },
    {
      "title": "Moving packages from extra-testing to extra",
      "level": 3,
      "content": "Move the package from the extra-testing to the extra repository using the instructions in the packager guide.\n\n"
    },
    {
      "title": "Remote build on build.archlinux.org",
      "level": 3,
      "content": "Package Maintainers and Developers can connect to build.archlinux.org via SSH to, among others, build packages using the devtools. This has numerous advantages over a local setup:\n\n- Builds are fast and network speed is high.\n- The environment needs setup only once.\n- Your local system need not be Arch Linux.\n\nThe process is similar to that of a local setup with devtools. Your GnuPG private is required for signing but you do not want to upload it for obvious security reasons. As such, you will need to forward the GnuPG agent socket from your local machine to the server: this will allow you to sign packages on the build server without communicating your key. This also means that we need to disable the agent on the server before we can run anything.\n\nFirst, connect to build.archlinux.org and disable\n\n```\n$ ssh build.archlinux.org\n$ systemctl --user mask gpg-agent.service\n```\n\nMake sure gpg-agent is not running (systemctl --user stop gpg-agent.service). At this point, make sure that no sockets exist in the folder pointed by gpgconf --list-dir socketdir. If they do, remove them or log out and in again. If you have a custom $GNUPGHOME (eg. to move it to ~/.config/gnupg), you will need to unset that, as it is not possible in gnupg to set the homedir without setting the socketdir. On build.archlinux.org, StreamLocalBindUnlink yes is set in sshd_config, therefore removing the sockets manually on logout is not necessary.\n\nWhile the PGP private keys remain on your local machine, the public keys must be on the build server. Export your public ring to the build server, e.g. from you local machine\n\n```\n$ scp ~/.gnupg/pubring.gpg build.archlinux.org:~/.gnupg/pubring.gpg\n```\n\nSSH is required to checkout and commit to the Git repository. You can either set up a new SSH key pair on the server (it is highly discouraged to put your local private key on a server for security reasons) or reuse your local keys via socket forwarding. If you opt for the latter, make sure to disable ssh-agent on the build server if you had enabled it previously (it is not running by default).\n\nConfigure you build environment on the build server:\n\n```\n~/.makepkg.conf\n```\n\n```\nPACKAGER=\"John Doe <john@doe.example>\"\n## Optional\nPKGDEST=\"/home/johndoe/packages\"\nSRCDEST=\"/home/johndoe/sources\"\nSRCPKGDEST=\"/home/johndoe/srcpackages\"\nLOGDEST=\"/home/johndoe/logs\"\n## If your PGP key is not the default, specify the right fingerprint:\nGPGKEY=\"ABCD1234...\"\n```\n\nDisable passphrase caching with the following settings:\n\n```\ngpg-agent.conf\n```\n\n```\ndefault-cache-ttl 0\nmax-cache-ttl 0\n```\n\nBecause we will want to keep our usual GPG agent running with its current settings, we are going to run another GPG agent dedicated to the task at hand. Create a ~/.gnupg-archlinux folder and symlink everything from ~/.gnupg there, except ~/.gnupg/gpg-agent.conf. Configure the new GPG agent:\n\n```\n~/.gnupg-archlinux\n```\n\n```\nextra-socket /home/doe/.gnupg-archlinux/S.gpg-agent.extra\ndefault-cache-ttl 0\nmax-cache-ttl 0\npinentry-program /usr/bin/pinentry-gtk-2\n```\n\nThe gpg-agent-extra.socket will be forwarded to build.archlinux.org.\n\nStart the dedicated agent with\n\n```\n$ gpg-agent --homedir ~/.gnupg-archlinux --daemon\n```\n\nConnect with:\n\n```\n$ ssh -R REMOTE_SSH_AUTH_SOCK:$SSH_AUTH_SOCK -R /run/user/REMOTE_UID/gnupg/S.gpg-agent:/home/doe/.gnupg-archlinux/S.gpg-agent.extra build.archlinux.org\n```\n\nor, if using GnuPG as your SSH agent:\n\n```\n$ ssh -R /run/user/REMOTE_UID/gnupg/S.gpg-agent.ssh:/run/user/LOCAL_UID/gnupg/S.gpg-agent.ssh -R /run/user/REMOTE_UID/gnupg/S.gpg-agent:/home/doe/.gnupg-archlinux/S.gpg-agent.extra build.archlinux.org\n```\n\nReplace REMOTE_UID and LOCAL_UID by your user identifier as returned by id -u on the build server and locally, respectively. If using ssh-agent, replace REMOTE_SSH_AUTH_SOCK by the path to the SSH socket on the remote host (it can be anything).\n\nYou can make the forwarding permanent for that host. For instance with gpg-agent.ssh:\n\n```\n~/.ssh/config\n```\n\n```\nHost build.archlinux.org\n  RemoteForward /run/user/REMOTE_UID/gnupg/S.gpg-agent /run/user/%i/gnupg/S.gpg-agent.extra\n  RemoteForward /run/user/REMOTE_UID/gnupg/S.gpg-agent.ssh /run/user/%i/gnupg/S.gpg-agent.ssh\n```\n\nAgain, replace REMOTE_UID with the user UID on the build server.\n\nFrom then on, the procedure should be exactly the same as a local build:\n\n```\n$ ssh build.archlinux.org\n$ pkgctl repo clone existing-package\n$ ...\n```\n\n"
    },
    {
      "title": "TODO list retiring a Package Maintainer",
      "level": 2,
      "content": "When a Package Maintainer resigns the following list has be followed, these steps do not apply when a Package Maintainer resigns but is still a Developer.\n\n1. All packages packaged by the retiree should be resigned (so rebuild). Packages packaged by the retiree can be found in Archweb https://archlinux.org/packages/?sort=&q=&packager=$packager&flagged= where packager is the username on Archweb.\n1. The account of the retiree should be disabled on Archweb and added to the 'Retired Package maintainers' group. The retiree should be removed from the 'Package Maintainers' and the repository permissions should be reduced to none.\n1. The shell access to our servers should be disabled. (notably repos.archlinux.org, pkgbuild.com)\n1. The GPG key should be removed and a new archlinux-keyring package should be pushed to the repos. Create bug reports in the keyring project to remove the keys of the retired Package Maintainers.\n1. Remove the Package Maintainer group from their AUR account.\n1. A bureaucrat should remove their wiki account from the Arch Linux Package Maintainers group.\n1. A BBS admin should change their account on forums.\n\n"
    }
  ]
}