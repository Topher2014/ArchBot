{
  "title": "Pt-br:Rust",
  "url": "https://wiki.archlinux.org/title/Pt-br:Rust",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Artigos relacionados\n\n- Rust package guidelines\n\nDa Wikipedia:\n\n"
    },
    {
      "title": "Biblioteca do Núcleo Rust",
      "level": 3,
      "content": "A Biblioteca do Núcleo Rust (Core Library) é a base livre de dependências da Biblioteca padrão do Rust. Ela interage diretamente com as primitivas LLVM, o que perrmite que o Rust seja independente de plataforma e hardware. É essa integração com o LLVM que permite ao Rust obter maior desempenho do que aplicativos C equivalentes compilados com Clang, tornando o software Rust projetado com libcore de nível inferior ao C. Ele contém apenas tipos básicos independentes de plataforma, como Option, Result, and Iterator. Os desenvolvedores que procuram software de destino para plataformas incorporadas(embedded) podem renunciar à biblioteca padrão #![no_std] para usar exclusivamente a biblioteca do núcleo sem baterias incluídas, binários em tamanhos menores e performance aprimorada. No entanto, usando #![no_std] limita a quantidade de suporte de software que você pode obter da maior comunidade Rust, pois a maioria das bibliotecas requer a biblioteca padrão.\n\n"
    },
    {
      "title": "Biblioteca Padrão Rust",
      "level": 3,
      "content": "A Biblioteca Padrão Rust (Standard Library) fornece convenientes abstrações de alto nível com as quais a maioria dos software portáteis Rust são criados. Fornece recursos convenientes como tipos Vec e String; uma vasta quantidade de métodos para linguagens primitivas; um grande número de macros padrão; E/S e suporte multi threading; alocações de pilha(heap) com Box; e muitos outros recursos de alto nível não disponíveis na biblioteca do núcleo.\n\n"
    },
    {
      "title": "Ciclo de Lançamento",
      "level": 3,
      "content": "Rust segue um ciclo de lançamento regular de seis semanas, semelhante ao ciclo de lançamento do Firefox. A cada novo lançamento, as bibliotecas do núcleo e a biblioteca padrão são aprimoradas para suportar mais plataformas, melhorar a performance, e estabilizar novas recursos para uso com o Rust estável.\n\n"
    },
    {
      "title": "Instalação",
      "level": 2,
      "content": "As duas principais formas para instalar Rust são:\n\n- A instalação Nativa, recomendada se você apenas usa rust para executar ou instalar software feitos com Rust\n- A instalação Rustup, recomendada se você pretende programar algo em Rust\n\n"
    },
    {
      "title": "Instalação Nativa",
      "level": 3,
      "content": "Para install a ultima versão estável do Rust a partir do repositório oficial de software do Arch Linux, install o pacote rust. Isto irá instalar o compilador rustc e Cargo(gerenciador de pacotes Rust).\n\nHá também uma versão de desenvolvimento do compilador Rust disponível no AUR. Use rust-nightly-binAUR para binários genéricos pré-construídos ou rust-gitAUR para construí o compilador com a biblioteca do sistema.\n\n"
    },
    {
      "title": "Rustup",
      "level": 3,
      "content": "O método oficial e recomendado de instalação Rust para propósito de desenvolvimento de software é usa o gerenciador de ferramentas Rustup, escrito em Rust.\n\nOs benefícios de usar o gerenciador de ferramentas Rustup ao invés do Rust pré-empacotado no repositório de software é a capacidade de instalar múltiplas ferramentas (stable, beta, nightly) para múltiplas plataformas (windows, mac, android) e arquiteturas (x86, x86_64, arm).\n\nExistem duas opções para instalar Rustup, a primeira é suportada pelo Arch Linux via pacman, e a segunda é oficialmente suportada pelo Rust via seu script de instalação.\n\n"
    },
    {
      "title": "Pacote Arch Linux",
      "level": 4,
      "content": "rustup está disponível no repositório de software do Arch Linux. Note que rustup self update não not funcionar quando instalado desta forma, o pacote precisa ser atualizado pelo pacman.\n\nEste pacote tem a vantagem que os vários executáveis Rust estarão em /usr/bin, ao invés de ~/.cargo/bin, removendo a necessidade de adicionar outra diretório ao seu PATH.\n\nNote: **não** \n\nPara instalar a cadeia de ferramentas, você precisa informar ao rustup qual versão usar: stable ou nightly.\n\nExemplo:\n\n```\n$ rustup default stable\n```\n\n"
    },
    {
      "title": "Instalação pelo Script Upstream",
      "level": 4,
      "content": "Rustup está também disponível para download e instalação manual via pagina oficial rustup.\n\nBaixe o arquivo com curl --proto '=https' --tlsv1.3 -sSf https://sh.rustup.rs -o rust.sh, visualize-o com: less ./rust.sh, e execute o script ./rust.sh para iniciar a instalação do rustup. O script faz mudanças no PATH apenas para arquivos de configuração de login do shell. Você precisa fazer source ~/.cargo/env até você sair e logar de volta no sistema. para update rustup posteriormente, execute rustup self update.\n\nO script instala e ativa a cadeia de ferramentas padrão (usada pelo pacote rust), portanto, não há necessidade de instalar manualmente para começar usar o Rust.\n\n"
    },
    {
      "title": "Uso",
      "level": 4,
      "content": "Você pode precisar instalar manualmente uma cadeia de ferramentas(toolchain), e.g. stable, beta, nightly ou 1.58.0. Você também precisará fazer isto se você quiser usar/testa outras toolchain.\n\n```\n$ rustup toolchain install toolchain\n```\n\nVocê agora pode executar comandos Rust executando, rustup run toolchain command. No entanto, para usar estes comandos diretamente, você precisa ativar o toolchain:\n\n```\n$ rustup default toolchain\n```\n\nVerifique a versão da instalação Rust usando rustc -V:\n\n```\n$ rustc -V\n```\n\n```\nrustc 1.58.0 (02072b482 2022-01-11)\n```\n\nNote: Rust não faz sua própria vinculação(linking), e você precisará ter um linker instalado. você pode usar gcc, de outra forma Rust irá gerar o seguinte erro: linker `cc` not found.\n\nRust não faz sua própria vinculação(linking), e você precisará ter um linker instalado. você pode usar gcc, de outra forma Rust irá gerar o seguinte erro: linker `cc` not found.\n\n"
    },
    {
      "title": "Teste sua instalação",
      "level": 3,
      "content": "verifique se Rust está corretamente instalado construindo um programa simples, como o seguinte:\n\n```\n~/hello.rs\n```\n\n```\nfn main() {\n     println!(\"Hello, World!\");\n }\n```\n\nVocê pode compilar isto com rustc, executando isto:\n\n```\n$ rustc hello.rs && ./hello\n```\n\n```\nHello, World!\n```\n\n"
    },
    {
      "title": "Usando rustup",
      "level": 3,
      "content": "Você pode facilmente realizar compilação cruzada usando Rustup. Rustup suporta muitos alvos de compilação cruzada. Uma lista completa pode ser encontrada executando rustup target list.\n\nPor exemplo, se você quiser instalar rust usando o canal estável para Windows, usando o compilador GNU, você irá precisar fazer:\n\n```\n$ rustup toolchain install stable-x86_64-pc-windows-gnu\n```\n\nIsto irá apenas instalar rust e suas ferramentas para sua arquitetura alvo, mas algumas ferramentas adicionais poderão ser necessárias para compilação cruzada.\n\n"
    },
    {
      "title": "Windows",
      "level": 3,
      "content": "Nesta seção, $ARCH é a arquitetura alvo (qualquer x86_64 ou i686). Isto irá explicar como fazer compilação cruzada usando rustup.\n\n1. Install mingw-w64-gcc\n1. Run rustup target add $ARCH-pc-windows-gnu para instalar a biblioteca padrão rust para sua arquitetura.\n1. Finalmente, informe ao cargo onde procurar a MinGW-w64 gcc/ar adicionado o seguinte ao seu ~/.cargo/config:\n\n```\n~/.cargo/config\n```\n\n```\n[target.$ARCH-pc-windows-gnu]\nlinker = \"/usr/bin/$ARCH-w64-mingw32-gcc\"\nar = \"/usr/bin/$ARCH-w64-mingw32-ar\"\n```\n\nFinalmente, você pode fazer compilação cruzada para windows passando --target $ARCH-pc-windows-gnu para o cargo:\n\n```\n$ # Build\n$ cargo build --release --target \"$ARCH-pc-windows-gnu\"\n$ # Run unit tests under wine\n$ cargo test --target \"$ARCH-pc-windows-gnu\"\n```\n\nAtualmente a construção de execultaveis usando MinGW 6 e toolchains instalados por rustup estão quebrados. para corrigir isto, execute:\n\n```\nfor lib in crt2.o dllcrt2.o libmsvcrt.a; do cp -v /usr/x86_64-w64-mingw32/lib/$lib $HOME/.rustup/toolchains/$CHANNEL-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib/; done\n```\n\nOnde CHANNEL é o canal de atualização (stable, beta ou nightly)\n\n"
    },
    {
      "title": "Pacotes não oficiais",
      "level": 3,
      "content": "No repositório não oficial archlinuxcn está rust-nightly e a biblioteca padrão Rust para i686, ARM, ARMv7, Windows 32 e 64 para que você possa instalar o que deseja e aproveitar a compilação cruzada. No entanto, você tem que procurar um ARM toolchain por você mesmo. para alvos Windows 32bit, você irá precisar pegar uma libgcc_s_dw2-1.dll (fornecida por mingw-w64-gcc) pra construir e executar.\n\n"
    },
    {
      "title": "Cargo",
      "level": 2,
      "content": "Cargo, é o gerenciador de pacote Rust, é parte do pacote rust. O nightly version está disponível no AUR como parte de rust-nightly-binAUR. Se você usa rustup, ele já inclui o cargo.\n\nCargo é uma ferramenta que permite projetos Rust declarar suas varias dependências, e garante que você irá sempre pegar uma build replicável. Você será encorajado a ler o guia oficial.\n\n"
    },
    {
      "title": "Uso",
      "level": 3,
      "content": "Para criar um novo projeto usando Cargo:\n\n```\n$ cargo new hello_world\n```\n\nIsto criar um diretório com uma arquivo Cargo.toml padrão, definido para construir um executável.\n\n```\nCargo.toml\n```\n\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n```\n\n"
    },
    {
      "title": "Otimizando para plataformas nativas da CPU",
      "level": 3,
      "content": "Para instruir o Cargo a sempre compilar o código otimizado para sua plataforma da CPU, você pode alcançar isto adicionando uma flag para ~/.cargo/config. Esteja ciente que o binário resultante pode não ser distribuído para uso em outros computadores, e pode sempre falhar em seu sistema se você decide mudar sua CPU no futuro.\n\nProcure qual plataforma alvo é usada por padrão em sua instalação:\n\n```\n$ rustup toolchain list\n```\n\n```\nstable-x86_64-unknown-linux-gnu (default)\n```\n\nNeste exemplo, nos estamos usando rust stable na plataforma x86_64-unknown-linux-gnu.\n\nInstruir Cargo a sempre compilar o código otimizado para a plataforma nativa da CPU:\n\n```\n~/.cargo/config\n```\n\n```\n[target.x86_64-unknown-linux-gnu]\nrustflags = [\"-C\", \"target-cpu=native\"]\n```\n\n"
    },
    {
      "title": "sccache",
      "level": 3,
      "content": "O tempo de compilação pode ser muito reduzido usando o pacote sccache (sccache). Isto irá manter um cache local do artefatos do compilador, eliminado a necessidade para recompilar o código que não mudou desde a ultima vez que foi compilado.\n\nPara ativar sccache, você pode usar RUSTC_WRAPPER environment variable:\n\n```\nexport RUSTC_WRAPPER=sccache\ncargo build\n```\n\nou\n\n```\nRUSTC_WRAPPER=sccache cargo construtor\n```\n\nAlternativamente, adicionar a seguinte configuração para ~/.cargo/config:\n\n```\n~/.cargo/config\n```\n\n```\n[build]\nrustc-wrapper = \"sccache\"\n```\n\n"
    },
    {
      "title": "Ferramentas",
      "level": 3,
      "content": "Veja https://www.rust-lang.org/tools para as ferramentas recomendadas do projeto Rust.\n\n"
    },
    {
      "title": "RLS",
      "level": 4,
      "content": "Note: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\nRLS usado para fornecer uma Language Server Protocol implementação para Rust, fornecer IDEs, editores, e outras ferramentas com informações sobre programas Rust. Ele é suporta funcionalidades como 'definição goto', pesquisa de simbolos, reformatação, complementação de código, ativar renome e refatoração.\n\nRLS está incluído no pacote rust. para instalar RLS use rustup:\n\n```\n$ rustup component add rls rust-analysis rust-src\n```\n\n"
    },
    {
      "title": "rust-analyzer",
      "level": 4,
      "content": "rust-analyzer é uma implementação experimental de um Language Server Protocol para Rust an experimental Language Server Protocol implementation for Rust feito para substituir o RSL.\n\nEle está disponível como o pacote rust-analyzer, e a ultima versão do Git está disponível como rust-analyzer-gitAUR.\n\nrust-analyzer necessita do source code da biblioteca padrão. Se ela não está presente, rust-analyzer irá tentar fazer a instalação automaticamente usando rustup. Para instalar o source code manualmente usando rustup, execute o seguinte comando:\n\n```\n$ rustup component add rust-src\n```\n\n"
    },
    {
      "title": "Racer",
      "level": 4,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nRacer fornece suporte a complementação de código para editores e IDEs. Eles está sendo It has been suplantado por (que usa Racer como um substituto).\n\nEle requer que você também instale uma cópia do Rust source code, que você pode obter em uma destas fontes:\n\n- Com rustup: rustup component add rust-src\n- Do AUR: rust-src-gitAUR ou rust-nightly-srcAUR[link quebrado: package not found], neste caso você deve definir a variável de ambiente RUST_SRC_PATH.\n\nDepois de instalar o source code, você pode usar qualquer Cargo para instalar racer ou obtê-lo deste repositório (rust-racerAUR).\n\n```\n$ cargo +nightly install racer\n```\n\n"
    },
    {
      "title": "Clippy",
      "level": 4,
      "content": "Clippy Leva vantagem do plugin de suporte do compilador por fornecer um grande número de lints adicionais para detectar e alertar sobre uma grande variedade de erros e compiler plugin support to provide a large number of additional lints for detecting and warning about a larger variety of errors and Rust não idiomático.\n\nClippy está incluído no pacote rust. para instalar ele com rustup use:\n\n```\n$ rustup component add clippy\n```\n\n"
    },
    {
      "title": "Rustfmt",
      "level": 4,
      "content": "Rustfmt é uma ferramenta para formatar código Rust de acordo com os guias de estilo oficiais.\n\nRustfmt está incluso no pacote rust. para instalar ele com rustup use:\n\n```\n$ rustup component add rustfmt\n```\n\n"
    },
    {
      "title": "IntelliJ IDEA",
      "level": 4,
      "content": "IntelliJ IDEA tem um plugin Rust . O mesmo plugin também trabalha com CLion.\n\nSe usar rustup, use rustup para download o source (rustup component add rust-src), e então selecione ~/.rustup/toolchains/<your toolchain>/bin como a localização do toolchain.\n\nSe usar Rust do repositório de software oficial do Arch Linux, selecione /usr/bin como a localização do toolchain e /usr/lib/rustlib/src/rust/library/ coma a stdlib localização das fontes.\n\n"
    },
    {
      "title": "Visual Studio Code",
      "level": 4,
      "content": "Visual Studio Code suporte para Rust pode ser obtido via extensão rust-lang.rls (requer rustup). Se usa rust-analyzer, use a extensão matklad.rust-analyzer.\n\n"
    },
    {
      "title": "Vim",
      "level": 4,
      "content": "Vim suporte para Rust pode ser obtido via o oficial plugin rust.vim plugin, que fornece detecção de arquivo, destaque de sintaxe, formatação e suporte para plugin de checagem de sintaxe Syntastic. Muitas engines de complementação tem suporte para Rust, como coc (via o plugin coc.rls) e o YouCompleteMe.\n\n"
    },
    {
      "title": "Emacs",
      "level": 4,
      "content": "Emacs suporte para Rust pode ser obtido via o oficial plugin rust-mode.\n\n"
    },
    {
      "title": "Kate",
      "level": 4,
      "content": "Kate suporte para Rust é obtido usando Language Server Protocol. Ele usa rust-analyzer por padrão; tudo que você precisa para fazer esta instalação está junto com a fonte do Rust.\n\n"
    },
    {
      "title": "GNOME Builder",
      "level": 4,
      "content": "GNOME Builder suporte para Rust é obtido usando Language Server Protocol. Eles usa rust-analyzer por padrão; tudo o que você precisa para fazer a instalação está junto com a fonte do Rust.\n\n"
    },
    {
      "title": "Vejá também",
      "level": 2,
      "content": "- Official website of the Rust Programming Language\n- Rust Documentation\n- Official Rust Book\n- Standard Library API Lookup\n- Examples with small descriptions\n- Page listing of Rust tutorials\n- Libraries(crates) available through Cargo\n- This Week in Rust\n- The Rust Programming Language Blog\n- The Rust Users Forum\n- The Rust Internals Forum\n- Awesome Rust: A curated list of Rust libraries and resources\n- Wikipedia:Rust (programming language)\n\n"
    }
  ]
}