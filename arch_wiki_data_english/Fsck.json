{
  "title": "Fsck",
  "url": "https://wiki.archlinux.org/title/Fsck",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Ext4\n- Btrfs\n- fstab\n\nfsck stands for \"file system check\" and it is used to check and optionally repair one or more Linux file systems. Normally, the fsck program will try to handle file systems on different physical disk drives in parallel to reduce the total amount of time needed to check all of the file systems (see fsck(8)).\n\nThe Arch Linux boot process conveniently takes care of the fsck procedure for you and will check all relevant partitions on your drive(s) automatically on every boot. Hence, there is usually no need to resort to the command-line.\n\n"
    },
    {
      "title": "Mechanism",
      "level": 3,
      "content": "There are two players involved:\n\n1. mkinitcpio offers you the option to fsck your root file system before mounting it via the fsck hook. If you do this, you should mount root read-write via the appropriate rw kernel parameter.[1]\n1. systemd will fsck all file systems having a fsck pass number greater than 0 (either with #fstab options or a user-supplied unit file). For the root file system, it also has to be mounted read-only initially with the kernel parameter ro and only then remounted read-write from fstab (note that the defaults mount option implies rw).\n\nThe first option is the recommended default, and what you will end up with if you follow the Installation guide. If you want to go with option 2 instead, you should remove the fsck hook from mkinitcpio.conf and use ro on the kernel command-line. The kernel parameter fsck.mode=skip can be used to make sure fsck is disabled entirely for both options.\n\n"
    },
    {
      "title": "Forcing the check",
      "level": 3,
      "content": "If you use the base mkinitcpio hook, you can force fsck at boot time by passing fsck.mode=force as a kernel parameter. This will check every file system you have on the machine.\n\nAlternatively, systemd provides systemd-fsck@.service(8), which checks all configured file systems, which were not checked in the initramfs. However, checking the root file system this way causes a delay in the boot process, because the file system has to be remounted.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Automatically answer yes to all repair questions",
      "level": 3,
      "content": "The boot time fsck checks might end up saying \"UNEXPECTED INCONSISTENCY; RUN fsck MANUALLY.\"\n\nThis happens when you need to apply some changes to fix the file system which are not considered completely safe, and thus require fsck to be run manually.\n\nYou can set fsck to automatically apply all suggested change (i.e. answer yes to all questions) by setting the fsck.repair kernel command line option to yes. (Other possible values are no and preen.) Check the documentation systemd-fsck@.service(8) for the meaning of these options.\n\n"
    },
    {
      "title": "Attempt to repair damaged blocks",
      "level": 3,
      "content": "To automatically repair damaged portions of an ext2/ext3/ext4 or FAT file system, run:\n\nNote: **Yes** \n\n```\n# fsck -a\n```\n\n"
    },
    {
      "title": "Repair damaged blocks interactively",
      "level": 3,
      "content": "This is useful for when files on the boot partition have changed, and the journal failed to properly update. In this case, unmount the boot partition, and run the following code to repair damaged portions:\n\n```\n# fsck -r drive\n```\n\n"
    },
    {
      "title": "Changing the check frequency",
      "level": 3,
      "content": "By default, fsck checks a file system every 30 boots (counted individually for each partition). To change the frequency of checking, run:\n\n```\n# tune2fs -c 20 /dev/sda1\n```\n\nIn this example, 20 is the number of boots between two checks.\n\nNote that 1 would make it scan at every boot, while 0 would stop scanning altogether.\n\nIf you wish to see the frequency number and the current mount count for a specific partition, use:\n\n```\n# dumpe2fs -h /dev/sda1 | grep -i 'mount count'\n```\n\n"
    },
    {
      "title": "fstab options",
      "level": 3,
      "content": "fstab is a system configuration file and is used to tell the Linux kernel which partitions (file systems) to mount and where on the file system tree.\n\nA typical /etc/fstab entry may look like this:\n\n```\n/dev/sda1   /         ext4      defaults       0  1\n/dev/sda2   /other    ext4      defaults       0  2\n/dev/sda3   /win      ntfs-3g   defaults       0  0\n```\n\nThe 6th column (in bold) is the fsck option.\n\n- 0 — do not check.\n- 1 — first file system (partition) to check; / (root partition) should be set to 1.\n- 2 — all other file systems to be checked.\n\n"
    },
    {
      "title": "Can't run fsck on a separate /usr partition",
      "level": 3,
      "content": "1. Make sure you have the required hooks in /etc/mkinitcpio.conf and that you remembered to re-generate your initramfs image after editing this file.\n1. Check your fstab! Only the root partition needs 1 at the end, everything else should have either 2 or 0. Carefully inspect it for other typos, as well.\n\n"
    },
    {
      "title": "ext2fs: no external journal",
      "level": 3,
      "content": "There are times (due to power failure) in which an ext(3/4) file system can corrupt beyond normal repair. Normally, there will be a prompt from fsck indicating that it cannot find an external journal. In this case, run the following commands:\n\nUnmount the partition based on its directory\n\n```\n# umount directory\n```\n\nWrite a new journal to the partition\n\n```\n# tune2fs -j /dev/partition\n```\n\nRun an fsck to repair the partition\n\n```\n# fsck -p /dev/partition\n```\n\n"
    }
  ]
}