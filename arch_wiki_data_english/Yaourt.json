{
  "title": "Yaourt",
  "url": "https://wiki.archlinux.org/title/Yaourt",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **not supported** \n\nAUR helpers automate usage of the Arch User Repository. In particular, they may automate the following tasks:\n\n- searching for packages published on the AUR;\n- resolving of dependencies between AUR packages;\n- retrieve and build AUR packages;\n- retrieve web content, such as user comments;\n- submission of AUR packages.\n\nPacman only handles updates for pre-built packages in its repositories. AUR packages are redistributed in form of PKGBUILDs and need an AUR helper to automate the re-build process. However, keep in mind that a rebuild of a package may be required when its shared library dependencies are updated, not only when the package itself is updated.\n\n"
    },
    {
      "title": "Legend",
      "level": 2,
      "content": "The #Comparison tables columns have the following meaning:\n\n- Multiple packages from the same package base, without rebuilding or reinstalling multiple times, such as clionAUR.\n- Split packages which depend on a package from the same package base, such as samsung-unified-driverAUR.\n- Split packages independently, such as nxproxyAUR and nxagentAUR.\n\n- Optional means that a feature is available, but only through a command-line argument or configuration option.\n- Partial means that a feature is not fully implemented, or that it partially deviates from the given criteria.\n\n"
    },
    {
      "title": "Search and download",
      "level": 3,
      "content": "Table content:\nName | Written in | File review | Diff view | Git clone | Reliable parser | Reliable solver | Shell completion | Specificity\nauracle-gitAUR | C++ | Yes | No | Yes | Yes | Yes | bash | print build order\npbgetAUR | Python | Yes | No | Yes | Yes | – | – | –\nrepoctlAUR | Go | Yes | No | No | Yes | – | bash, zsh, fish | local repository\nyaahAUR | Bash | Yes | No | Optional | Yes | – | bash | –\n\n"
    },
    {
      "title": "Search and build",
      "level": 3,
      "content": "Table content:\nName | Written in | File review | Diff view | Git clone | Reliable parser | Reliable solver | Split packages | Shell completion | Specificity\naurutilsAUR | Bash | Yes | Yes | Yes | Yes | Yes | Yes | bash, zsh | local repository, local patch application, package signing, clean chroot\nbauerbillAUR | Python | Yes | No | Yes | Yes | Yes | Yes | bash, zsh | bb-wrapper for pacman wrapping, trust management\nPKGBUILDerAUR | Python | No | No | Yes | Yes | Yes | Partial | – | pb for pacman wrapping\nruaAUR | Rust | Yes | Yes | Yes | Yes | Yes | Yes | bash, zsh, fish | local patch application, bubblewrap, .pkg.tar inspection\n\n"
    },
    {
      "title": "Pacman wrappers",
      "level": 3,
      "content": "Table content:\nName | Written in | File review | Diff view | Git clone | Reliable parser | Reliable solver | Split packages | Unsafe flags | Shell completion | Specificity\nauraAUR | Rust | No | Partial | Yes | Yes | Yes | Yes | – | bash, fish, zsh | clean chroot\naurmanAUR | Python | Yes | Yes | Yes | Yes | Partial | Yes | -Sy--ask | bash, fish | fetch PGP keys\npacaurAUR | Bash | Yes | Yes | Yes | Yes | Yes | Yes | --ask | bash, zsh | –\npakkuAUR | Nim | Yes | Yes | Yes | Yes | Yes | Yes | -Sy | bash, zsh | –\nparuAUR | Rust | Yes | Yes | Yes | Yes | Yes | Yes | -Sy--ask | bash, fish, zsh | local repository, clean chroot\npikaurAUR | Python | Yes | Yes | Yes | Yes | Yes | Yes | -Sy | bash, fish, zsh | dynamic users\ntrizenAUR | Perl | Yes | Yes | Yes | Yes | Yes | Partial | – | bash, fish, zsh | –\nyayAUR | Go | Yes | Yes | Yes | Yes | Yes | Yes | --ask | bash, fish, zsh | –\n\n"
    },
    {
      "title": "Graphical",
      "level": 2,
      "content": "- Argon — GTK 3 pacman wrapper written in Python.\n\n- Bauh — Qt5 Python app supporting AppImage, Debian and Arch packages (including AUR), Flatpak, Snap and native Web applications.\n\n- Cylon — TUI pacman wrapper written in Bash.\n\n- Kalu — Systray notification icon using libalpm and PolicyKit, with optional updater\n\n- Octopi — Qt 5 pacman wrapper written in C++.\n\n- Pacseek — A terminal user interface for searching and installing Arch Linux packages.\n\n- Pamac — Standalone GTK 4 (or terminal) package manager written for Manjaro using libalpm(3). Has a tray app. Can also be used with command line interface.\n\n- Pakku GUI — GTK 3 frontend for pakku written in Python.\n\n- PkgBrowser — Qt 5 read-only browser for repository packages and AUR written in Python.\n\n- Yup — Ncurses TUI pacman wrapper written in Go.\n\n"
    },
    {
      "title": "Maintenance",
      "level": 2,
      "content": "- aur-out-of-date — Uses hoster APIs to check AUR packages for upstream changes.\n\n- aurpublish — Helper script to manage and upload AUR packages using git-subtree(1). Uses githooks(5) to verify the PKGBUILD integrity, generate .SRCINFO automatically, and create a commit message template.\n\n- devtools — Build packages in a clean environment (systemd-nspawn container) to ensure their correctness. Wrapped by auraAUR, aurutilsAUR, clean-chroot-managerAUR and paruAUR.\n\n- pkgoutofdate — Parses the source URL from PKGBUILDs and tries to find new versions of packages by incrementing the version number and sending requests to the web server.\n\n- repman — Command line tool to manage local and remote repositories.\n\n"
    },
    {
      "title": "Other",
      "level": 2,
      "content": "- aur-talk — Fetch and display AUR comments.\n\n- aurvote-utils — A set of utilities for managing AUR votes.\n\n- haskell-aur — Haskell library for accessing Aurweb RPC interface.\n\n- package-query — Tool for querying libalpm(3) and the AUR.\n\n- python3-aur — Python 3 modules and helper utilities for accessing AUR package information and automating AUR interactions.\n\n- raur — Rust library for accessing Aurweb RPC interface.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- GUI Package Managers for Arch Linux (DebugPoint, 2023) offers some screenshots and simple information about a few of the options mentioned in #Graphical\n\n"
    }
  ]
}