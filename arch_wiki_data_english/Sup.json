{
  "title": "Sup",
  "url": "https://wiki.archlinux.org/title/Sup",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Sup is a powerful new mail client developed for people who manage lots of mail. It can be viewed as a cross between Mutt and Gmail, with very fast operation and search, tagging, automatic contact management, support for a wide variety of accounts at once, and more.\n\n"
    },
    {
      "title": "Automated",
      "level": 3,
      "content": "Install supAUR.\n\n"
    },
    {
      "title": "Manual",
      "level": 3,
      "content": "Sup can instead be installed via RubyGems with system Ruby, as follows:\n\n- It is recommended to run all gem install commands as your user (not as root nor using sudo), for a per-user installation. See Ruby#Configuration.\n- If you have not used gem before, then you will first need to add $(ruby -e 'puts Gem.user_dir')/bin to your PATH environment variable. See RubyGems.\n\nInstall the dependencies: base-devel, ruby, ruby-rake, and ruby-rdoc.\n\nInstall xapian-ruby gem first, and then sup gem:\n\n```\n$ gem install xapian-ruby\n$ gem install sup\n```\n\nLaunch sup:\n\n```\n$ sup\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Sup comes with an easy to use configuration tool called sup-config. To use it, start it in the console and walk through the steps, which are as follows:\n\n1. Enter your full name.\n1. Enter your primary e-mail address, as well as any alternate e-mail addresses.\n1. Enter the path to your signature file, if you have one.\n1. Enter the editor that should be used to compose new mail, as well as any arguments that should be passed to it.\n1. Add sources for your mail, including: mbox files maildir directories\n\n1. mbox files\n1. maildir directories\n\nSupport for remote sources (POP3, IMAP, IMAPS, and mbox+ssh) was removed in the 0.12 release.\n\nSup is for the most part only an MUA (mail user agent) and cannot handle downloading mail on its own. You can use tools like offlineimap, fetchmail, and rsync to transfer email to the local system mbox or maildir folders.\n\nThe sup wiki has an example for configuring a gmail+imap source using offlineimap. The Mutt#POP3 subsection shows some additional mail transfer methods.\n\nAfter the email sources have been added, sup-config will execute the sup-sync command to import mail into your mailbox.\n\n"
    },
    {
      "title": "Filtering mail",
      "level": 3,
      "content": "sup works by having all relevant mail in one view at a time and no folders. To control exactly what is viewed and what is not mail needs filtering.\n\nThere are many ways to filter mail. Depending on how you access your mail you might want to filter on the serverside (with e.g. imapfilterAUR or on the clientside.\n\nTo decide which way to go consider these two scenarios:\n\n- you always check mail on the same computer using sup -> go for local filtering\n- you want to be able to read your (uncluttered) email (through webmail) when using other computers -> filter on the server\n\n"
    },
    {
      "title": "Local filtering",
      "level": 4,
      "content": "The sup hook before-add-message.rb enables you with a little ruby knowledge to filter your mail and applying labels, archive, mark read etc. to mail easily.\n\n"
    },
    {
      "title": "Filter serverside",
      "level": 4,
      "content": "Sup only hides from view so to keep the serverside clean you have to resort to another tool. imapfilterAUR is a popular mailfilter. Set it up starting from the example.config.\n\nNote: **quotas** \n\n"
    },
    {
      "title": "sup sources",
      "level": 3,
      "content": "Sup uses the file ~/.sup/sources.yaml to get sync your mail with its index and supports adding one or more labels to all mail from a source.\n\n```\n~/.sup/sources.yaml\n```\n\n```\n--- \n- !supmua.org,2006-10-01/Redwood/Maildir \n  uri: maildir:/home/User/Mail/Inbox\n  usual: true\n  archived: false\n  id: 1\n  labels: []\n- !supmua.org,2006-10-01/Redwood/Maildir \n  uri: maildir:/home/User/Mail/Pulse\n  usual: true\n  archived: true\n  id: 2\n  labels:\n  - pulse\n  - cruft\n```\n\nAs seen in the example the Pulse folder has 2 labels: pulse and cruft. All the mail from Pulse is archived on import and hidden from view avoiding a cluttered screen. See the sup wiki for details on labels and ids.\n\n"
    },
    {
      "title": "sup hooks",
      "level": 3,
      "content": "sup has to types of hooks: interactive and non-interactive to enable the user to easily customize the program. See details in the sup wiki on hooks for details.\n\n"
    },
    {
      "title": "before-poll hook",
      "level": 4,
      "content": "To activate the filtering and syncing automatically we set up a non-interactive startup hook using before-poll:\n\n```\nFile: ~/.sup/hooks/before-poll.rb\n Executes immediately before a poll for new messages commences.\n No variables.\n```\n\nHere is a simple example (without filtering)\n\n```\nsay \"Running offlineimap...\"\n system \"offlineimap\", \"-o\", \"-u\", \"quiet\"\n```\n\nHere is a simple example (with filtering)\n\n```\nsay \"Running imapfilter...\"\n system \"imapfilter\", \"-c\", \"path-to-config.lua\"\n say \"Running offlineimap...\"\n system \"offlineimap\", \"-o\", \"-u\", \"quiet\"\n```\n\nNow running sup will start filtering and then synching mail when sup starts or whenever you poll mail manually. See details in the sup wiki on before-poll\n\n"
    },
    {
      "title": "Viewing HTML attachments",
      "level": 3,
      "content": "create ~/.sup/hooks/mime-decode.rb with\n\n```\nrequire 'shellwords'\n   unless sibling_types.member? \"text/plain\"\n     case content_type\n     when \"text/html\"\n       `/usr/bin/w3m -dump -T #{content_type} #{Shellwords.escape filename}`\n     end\n   end\n```\n\nOr\n\n```\nrequire 'shellwords'\n    unless sibling_types.member? \"text/plain\"\n      case content_type\n      when \"text/html\"\n\t`/usr/bin/links -dump #{Shellwords.escape filename}`\n      end\n    end\n```\n\nNote the difference in program executed. See details on the sup wiki\n\n"
    },
    {
      "title": "Viewing non-text attachments",
      "level": 3,
      "content": "Create the following hook:\n\n```\n~/.sup/hooks/mime-view.rb\n```\n\n```\n# filename has already been shell-escaped\n  pid = Process.spawn(\"xdg-open\", filename,\n                    :out => '/dev/null',\n                    :err => '/dev/null')\n\n  Process.detach pid\n\n  true\n```\n\nSee details on the sup wiki\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Execute the sup command to start the Sup mail client. The program should show the messages imported by sup-config.\n\nThe most important key for new users to remember is the ? key. This will display a full list of keyboard commands at any point, reminding new users how to navigate the program.\n\nTo navigate between threads, use the arrow keys or the j and k keys (Shift+j and Shift+k work like the Page Up and Page Down keys). To jump between threads with new messages, press the Tab key. Sup does not load all threads by default; press Shift+m to load more (more messages will automatically load to fill the window).\n\nTo view a thread, select it and press the Enter key. To expand or collapse an individual message while viewing a thread, select the message and press the Enter key. Press Shift+n to expand only new messages (the default view) or Shift+e to toggle the state of all messages. Press o to show or hide hidden parts of a message (such as signatures).\n\nTo navigate between messages in a thread, press the n and p keys. To display the headers on a message, press the h key.\n\nTo cycle through buffers, press the b key, or press the ; key to view a list of all of the open buffers. To kill a buffer, press the x key.\n\nTo archive a thread, press the a key. This will hide it from the inbox until someone replies to it, at which point it will reappear. To kill a thread, press the & key. This is equivalent to Gmail's \"mute\" function, which hides a message even if people reply to it. It will never re-appear in the inbox, but it will still show up in search results.\n\nTo star a thread, press the * key. To mark a thread as spam, press the Shift+s key. Sup does not have any built-in spam filter; for that, consider a program such as spamassassin.\n\nTo tag a thread, press the t key. To label the messages in a thread, press the l key. To search labels, press the Shift+l key. Enter a label for which to search or press the Enter key to call up a list of labels. To perform a full text search, press the \\ key.\n\nTo view a list of contacts, press the Shift+c key. To e-mail one of the people on the list, select their name and press the Enter key.\n\n"
    },
    {
      "title": "Back-up and Restore",
      "level": 2,
      "content": "Backing-up e-mail is very important. To ensure that you do not lose anything, first back up the sources, such as mbox files and maildir directories, then run:\n\n```\n$ sup-dump > filename\n```\n\nThis will back-up all message states in a text file. To restore your message states from this text file, simply run:\n\n```\n$ sup-sync [<source>+] --restored --restore filename\n```\n\nJust remember that the commands above only back-up and restore message states. The messages themselves will need to be backed-up separately.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Website\n- Wiki\n- README\n- FAQ\n- Philosophical statement\n\n"
    }
  ]
}