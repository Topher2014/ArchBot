{
  "title": "Intelgma",
  "url": "https://wiki.archlinux.org/title/Intelgma",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Intel GMA 3600\n- Xorg\n- Kernel mode setting\n- Xrandr\n- Hybrid graphics\n- Vulkan\n- GPGPU\n\nSince Intel provides and supports open source drivers, Intel graphics are essentially plug-and-play.\n\nFor a comprehensive list of Intel GPU models and corresponding chipsets and CPUs, see Wikipedia:Intel Graphics Technology and Gentoo:Intel#Feature support.\n\n- PowerVR-based graphics (GMA 3600 series) are not supported by open source drivers.\n- Intel's GenN hardware does not refer to the generation of the CPU, it refers to the generation of the GPU, which is different from the generation of the CPU.\n- See Xorg#Driver installation to identify your card.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "- Install one of the following packages, which provide the DRI driver for 3D acceleration. mesa is the up-to-date Mesa package which includes the modern Gallium3D drivers for Gen 3 hardware and later. This is the recommended choice. mesa-amber is the legacy Mesa package which includes the classic (non-Gallium3D) drivers from Gen 2 to Gen 11 hardware. This driver might have better performance or stability for Gen 7 and older hardware, but is unmaintained.\n- For 32-bit application support, also install the lib32-mesa or lib32-mesa-amber package from the multilib repository.\n- For the DDX driver which provides 2D acceleration in Xorg use one of the following drivers: The modesetting driver included in the xorg-server package is the recommended choice for Gen 4 hardware and later. It uses the DRI driver for acceleration via glamor. The xf86-video-intel package provides the legacy intel DDX driver from Gen 2 to Gen 9 hardware. This package is generally not recommended, see note below.\n- For Vulkan support (Broadwell and newer; support for earlier chips is incomplete or missing), install the vulkan-intel package. For 32-bit Vulkan support, install the lib32-vulkan-intel package.\n\n- mesa is the up-to-date Mesa package which includes the modern Gallium3D drivers for Gen 3 hardware and later. This is the recommended choice.\n- mesa-amber is the legacy Mesa package which includes the classic (non-Gallium3D) drivers from Gen 2 to Gen 11 hardware. This driver might have better performance or stability for Gen 7 and older hardware, but is unmaintained.\n\n- The modesetting driver included in the xorg-server package is the recommended choice for Gen 4 hardware and later. It uses the DRI driver for acceleration via glamor.\n- The xf86-video-intel package provides the legacy intel DDX driver from Gen 2 to Gen 9 hardware. This package is generally not recommended, see note below.\n\nAlso see Hardware video acceleration.\n\n- Some (Debian & Ubuntu, Fedora, KDE, Mozilla) recommend not installing the xf86-video-intel driver, and instead falling back on the modesetting driver. See [1], [2], Xorg#Installation, and modesetting(4). However, the modesetting driver can cause problems such as screen tearing and mouse jittering on XFCE, artifacts when switching virtual desktops in Chromium, and vsync jitter/video stutter in mpv.\n- The xf86-video-intel driver does not have proper support for Gen 11 and newer hardware, causing lack of acceleration and rendering issues that make Plasma Desktop almost unusable. See [3].\n- There have been a couple of reports [4] [5] where the whole graphics stack hard freezes when xf86-video-intel is installed, not even switching to a different virtual console works (by pressing Ctrl+Alt+Fn), only killing the user processes with SysRq works.\n\n"
    },
    {
      "title": "Loading",
      "level": 2,
      "content": "The Intel kernel module should load fine automatically on system boot.\n\nIf it does not happen, then:\n\n- Make sure you do not have nomodeset as a kernel parameter, since Intel requires kernel mode-setting.\n- Also, check that you have not disabled Intel by using any modprobe blacklisting within /etc/modprobe.d/ or /usr/lib/modprobe.d/.\n\n"
    },
    {
      "title": "Early KMS",
      "level": 3,
      "content": "Kernel mode setting (KMS) is supported by the i915 and xe drivers, and is enabled early since mkinitcpio v32, as the kms hook is included by default. For other setups, see Kernel mode setting#Early KMS start for instructions on how to enable KMS as soon as possible at the boot process.\n\n"
    },
    {
      "title": "Enable GuC / HuC firmware loading",
      "level": 3,
      "content": "Starting with Gen9 (Skylake and onwards), Intel GPUs include a Graphics micro (μ) Controller (GuC) which provides the following functionality:\n\n- Offloading some media decoding functionality from the CPU to the HEVC/H.265 micro (µ) Controller (HuC). Only applicable if using intel-media-driver for hardware video acceleration. Introduced with Gen9.\n- Using the GuC for scheduling, context submission, and power management. Introduced with Alder Lake-P (Mobile), within Gen12.\n\nTo use this functionality, first ensure that linux-firmware is installed, as it provides the GuC and HuC firmware files.\n\nNext, the GuC firmware must be loaded. With regards to HuC support, some video features (e.g. CBR rate control on SKL low-power encoding mode) require loading the HuC firmware as well [6].\n\nThe new experimental xe driver enables Guc and Huc functionality by default.\n\nFor the i915 driver, GuC functionality is controlled by the enable_guc kernel module parameter. Its usage is as follows:\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nTable content:\nenable_guc value | GuC Submission | HuC Firmware Loading | Default for platforms | Supported on platforms\n0 | No | No | Tiger Lake, Rocket Lake, and Pre-Gen12 [7] | All\n1 | Yes | No | – | Alder Lake-P (Mobile) and newer\n2 | No | Yes | Alder Lake-S (Desktop) [8] [9] | Gen9 and newer\n3 | Yes | Yes | Alder Lake-P (Mobile) and newer | Gen 9.5 and newer (better for some)\n\nIf GuC submission or HuC firmware loading is not enabled by default for your GPU, you can manually enable it.\n\nSet the enable_guc= kernel module parameter. For example, with:\n\n```\n/etc/modprobe.d/i915.conf\n```\n\n```\noptions i915 enable_guc=3\n```\n\nRegenerate the initramfs, on next boot you can verify both GuC and HuC are enabled by using dmesg:\n\n```\n# dmesg | grep -i -e 'huc' -e 'guc'\n```\n\n```\n[30130.586970] i915 0000:00:02.0: [drm] GuC firmware i915/icl_guc_33.0.0.bin version 33.0 submission:disabled\n[30130.586973] i915 0000:00:02.0: [drm] HuC firmware i915/icl_huc_9.0.0.bin version 9.0 authenticated:yes\n```\n\nIf they are not supported by your graphics adapter you will see:\n\n```\n# dmesg | grep -i -e 'huc' -e 'guc'\n```\n\n```\n[    0.571339] i915 0000:00:02.0: [drm] Incompatible option enable_guc=2 - GuC is not supported!\n[    0.571340] i915 0000:00:02.0: [drm] Incompatible option enable_guc=2 - HuC is not supported!\n```\n\nAlternatively, check using:\n\n```\n# less /sys/kernel/debug/dri/*/gt0/uc/guc_info\n# less /sys/kernel/debug/dri/*/gt0/uc/huc_info\n```\n\nNote: Note that the related warning is not fatal, as explained in [10]:\n\n```\n# journalctl\n```\n\n```\n... kernel: [drm:intel_gvt_init [i915]] *ERROR* i915 GVT-g loading failed due to Graphics virtualization is not yet supported with GuC submission\n... kernel: i915 0000:00:02.0: [drm:i915_driver_load [i915]] Device initialization failed (-5)\n... kernel: i915: probe of 0000:00:02.0 failed with error -5\n... kernel: snd_hda_intel 0000:00:1f.3: failed to add i915 component master (-19)\n```\n\nNote that the related warning is not fatal, as explained in [10]:\n\n```\n# journalctl -b\n```\n\n```\n... kernel: i915 0000:00:02.0: Direct firmware load for i915/gvt/vid_0x8086_did_0x5916_rid_0x02.golden_hw_state failed with error -2\n```\n\n"
    },
    {
      "title": "Xorg configuration",
      "level": 2,
      "content": "There is generally no need for any configuration to run Xorg.\n\nHowever, to take advantage of some driver options or if Xorg does not start, you can create an Xorg configuration file.\n\n"
    },
    {
      "title": "With the modesetting driver",
      "level": 3,
      "content": "If you have installed xf86-video-intel but want to load the modesetting driver explicitly instead of letting the DDX driver take priority, for example when trying to compare them:\n\n```\n/etc/X11/xorg.conf.d/20-intel.conf\n```\n\n```\nSection \"Device\"\n  Identifier \"Intel Graphics\"\n  Driver \"modesetting\"\nEndSection\n```\n\n"
    },
    {
      "title": "With the Intel driver",
      "level": 3,
      "content": "Create an Xorg configuration file similar to the one below:\n\n```\n/etc/X11/xorg.conf.d/20-intel.conf\n```\n\n```\nSection \"Device\"\n  Identifier \"Intel Graphics\"\n  Driver \"intel\"\nEndSection\n```\n\nAdditional options are added by the user on new lines below Driver. For the full list of options, see the intel(4) man page.\n\n"
    },
    {
      "title": "AccelMethod",
      "level": 4,
      "content": "You may need to indicate Option \"AccelMethod\" when creating a configuration file, the classical options are UXA, SNA (default) and BLT.\n\nIf you experience issues with default SNA (e.g. pixelated graphics, corrupt text, etc.), try using UXA instead, which can be done by adding the following line to your configuration file:\n\n```\nOption      \"AccelMethod\"  \"uxa\"\n```\n\nSee the \"AccelMethod\" option under intel(4) § CONFIGURATION DETAILS.\n\n"
    },
    {
      "title": "Using Intel DDX driver with recent GPUs",
      "level": 4,
      "content": "For Intel GPUs starting from Gen8 (Broadwell), the Iris Mesa driver is needed:\n\n```\nOption      \"DRI\"  \"iris\"\n```\n\n"
    },
    {
      "title": "Disabling TearFree, TripleBuffer, SwapbuffersWait",
      "level": 4,
      "content": "If you use a compositor (the default in modern desktop environment like GNOME, KDE Plasma, Xfce, etc.), then TearFree, TripleBuffer and SwapbuffersWait can usually be disabled to improve performance and decrease power consumption.\n\n```\nOption      \"TearFree\"        \"false\"\nOption      \"TripleBuffer\"    \"false\"\nOption      \"SwapbuffersWait\" \"false\"\n```\n\n"
    },
    {
      "title": "Module-based options",
      "level": 2,
      "content": "The i915 kernel module allows for configuration via module options. Some of the module options impact power saving.\n\nA list of all options along with short descriptions and default values can be generated with the following command:\n\n```\n$ modinfo -p i915\n```\n\nTo check which options are currently enabled, run\n\n```\n# systool -m i915 -av\n```\n\nYou will note that many options default to -1, resulting in per-chip powersaving defaults. It is however possible to configure more aggressive powersaving by using module options.\n\n"
    },
    {
      "title": "Framebuffer compression (enable_fbc)",
      "level": 3,
      "content": "Framebuffer compression (FBC) is a feature that can reduce power consumption and memory bandwidth during screen refreshes.\n\nThe feature will be automatically enabled if supported by the hardware. You can use the command below to verify whether it is is enabled:\n\n```\n$ modinfo i915 | grep enable_fbc\n```\n\n```\nparm:           enable_fbc:Enable frame buffer compression for power savings (default: -1 (use per-chip default)) (int)\n```\n\nIf the parm is set to -1, you do not need to do anything. Otherwise, to force-enable FBC, use i915.enable_fbc=1 as kernel parameter or set in /etc/modprobe.d/i915.conf:\n\n```\n/etc/modprobe.d/i915.conf\n```\n\n```\noptions i915 enable_fbc=1\n```\n\nNote: Enabling frame buffer compression on pre-Sandy Bridge CPUs results in endless error messages:\n\n```\nkernel: drm: not enough stolen space for compressed buffer, disabling.\n```\n\nEnabling frame buffer compression on pre-Sandy Bridge CPUs results in endless error messages:\n\n```\n# dmesg\n```\n\n```\n[ 2360.475430] [drm] not enough stolen space for compressed buffer (need 4325376 bytes), disabling\n[ 2360.475437] [drm] hint: you may be able to increase stolen memory size in the BIOS to avoid this\n```\n\n"
    },
    {
      "title": "Fastboot",
      "level": 3,
      "content": "The goal of Intel Fastboot is to preserve the frame-buffer as setup by the BIOS or boot loader to avoid any flickering until Xorg has started.[16][17]\n\nTo force enable fastboot on platforms where it is not the default already, set i915.fastboot=1 as kernel parameter or set in /etc/modprobe.d/i915.conf:\n\n```\n/etc/modprobe.d/i915.conf\n```\n\n```\noptions i915 fastboot=1\n```\n\n"
    },
    {
      "title": "Intel GVT-g graphics virtualization support",
      "level": 3,
      "content": "See Intel GVT-g for details.\n\n"
    },
    {
      "title": "Enable performance support",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nStarting with Gen6 (Sandy Bridge and onwards), Intel GPUs provide performance counters used for exposing internal performance data to drivers. The drivers and hardware registers refer to this infrastructure as the Observation Architecture (internally \"OA\") [19], but Intel's documentation also more generally refers to this functionality as providing Observability Performance Counters [20][dead link 2023-09-16 ⓘ] [21][dead link 2023-09-16 ⓘ].\n\nBy default, only programs running with the CAP_SYS_ADMIN (equivalent to root) or CAP_PERFMON capabilities can utilize the observation architecture [22] [23]. Most applications will be running without either of these, resulting in the following warning:\n\n```\nMESA-INTEL: warning: Performance support disabled, consider sysctl dev.i915.perf_stream_paranoid=0\n```\n\nTo enable performance support without using the capabilities (or root), set the kernel parameter as described in sysctl.\n\n"
    },
    {
      "title": "Setting scaling mode",
      "level": 3,
      "content": "This can be useful for some full screen applications:\n\n```\n$ xrandr --output LVDS1 --set PANEL_FITTING param\n```\n\nwhere param can be:\n\n- center: resolution will be kept exactly as defined, no scaling will be made,\n- full: scale the resolution so it uses the entire screen or\n- full_aspect: scale the resolution to the maximum possible but keep the aspect ratio.\n\nIf it does not work, try:\n\n```\n$ xrandr --output LVDS1 --set \"scaling mode\" param\n```\n\nwhere param is one of \"Full\", \"Center\" or \"Full aspect\".\n\n"
    },
    {
      "title": "Hardware accelerated H.264 decoding on GMA 4500",
      "level": 3,
      "content": "The libva-intel-driver package only provides hardware accelerated MPEG-2 decoding – and not H.264 decoding – for some GMA 4500 series GPUs. To check whether that affects your particular GPU, install both that driver and the libva-utils package, then check the output of the vainfo tool for the presence of entries that start with VAProfileH264.\n\nThe H.264 decoding support is maintained in a separated g45-h264 branch, which can be used by installing libva-intel-driver-g45-h264AUR package. Note, however, that this support is experimental and its development has been abandoned. Using the VA-API with this driver on a GMA 4500 series GPU will offload the CPU but may not result in as smooth a playback as non-accelerated playback. Tests using mplayer showed that using vaapi to play back an H.264 encoded 1080p video halved the CPU load (compared to the XV overlay) but resulted in very choppy playback, while 720p worked reasonably well [26]. This is echoed by other experiences [27]. Setting the preallocated video ram size higher in BIOS results in much better hardware decoded playback. Even 1080p h264 works well if this is done[28]. Smooth playback (1080p/720p) works also with mpv-gitAUR in combination with ffmpeg-gitAUR and libva-intel-driver-g45-h264AUR. With MPV and the Firefox plugin \"Send to MPV player\"[29] it is possible to watch hardware accelerated YouTube videos.\n\n"
    },
    {
      "title": "Overriding reported OpenGL version",
      "level": 3,
      "content": "The MESA_GL_VERSION_OVERRIDE environment variable can be used to override the reported OpenGL version to any application. For example, setting MESA_GL_VERSION_OVERRIDE=4.5 will report OpenGL 4.5.\n\n"
    },
    {
      "title": "Monitoring",
      "level": 3,
      "content": "See Hardware video acceleration#Verification.\n\n"
    },
    {
      "title": "Setting brightness and gamma",
      "level": 3,
      "content": "See Backlight.\n\n"
    },
    {
      "title": "Testing the new experimental Xe driver",
      "level": 3,
      "content": "To try the (experimental) new Xe driver, you need:\n\n- linux 6.8 or above\n- Tiger Lake integrated graphics and newer, or a discrete graphics card.\n- mesa.\n\nNote your PCI ID with:\n\n```\n$ lspci -nn | grep VGA\n```\n\n```\n00:02.0 VGA compatible controller [0300]: Intel Corporation TigerLake-LP GT2 [Iris Xe Graphics] [8086:9a49] (rev 01)\n```\n\nThen add the following to your Kernel parameters with the appropriate PCI ID:\n\n```\n... i915.force_probe=!9a49 xe.force_probe=9a49\n```\n\nMake sure you have an alternate solution to boot in order to revert if necessary.\n\n"
    },
    {
      "title": "With the Intel driver",
      "level": 4,
      "content": "The SNA acceleration method causes tearing on some machines. To fix this, enable the TearFree option in the xf86-video-intel driver by adding the following line to your configuration file:\n\n```\n/etc/X11/xorg.conf.d/20-intel.conf\n```\n\n```\nSection \"Device\"\n  Identifier \"Intel Graphics\"\n  Driver \"intel\"\n  Option \"TearFree\" \"true\"\nEndSection\n```\n\nSee the original bug report for more info.\n\n- This option may not work when SwapbuffersWait is false.\n- This option may increase memory allocation considerably and reduce performance. [30]\n- This option is problematic for applications that are very picky about vsync timing, like Super Meat Boy.\n- This option does not work with UXA acceleration method, only with SNA.\n- For Intel UHD 620 or 630 you will need to add Option \"TripleBuffer\" \"true\" in order for TearFree to work.\n- It might be necessary to disable DRI3 by adding Option \"DRI\" \"2\", otherwise any full screen app (such as video playback) can break TearFree. [31]\n\n"
    },
    {
      "title": "With the modesetting driver",
      "level": 4,
      "content": "TearFree support was added to the modesetting driver [32][33]. As the last release for the non-XWayland servers was the 21.1 release in 2021, this patch has not reached a stable release, so you will need xorg-server-gitAUR until then.\n\n```\n/etc/X11/xorg.conf.d/20-intel.conf\n```\n\n```\nSection \"Device\"\n  Identifier \"Intel Graphics\"\n  Driver \"modesetting\"\n  Option \"TearFree\" \"true\"\nEndSection\n```\n\n"
    },
    {
      "title": "Disable Vertical Synchronization (VSYNC)",
      "level": 3,
      "content": "Useful when:\n\n- Chromium/Chrome has lags and slow performance due to GPU and runs smoothly with --disable-gpu switch\n- glxgears test does not show desired performance\n\nThe intel-driver uses Triple Buffering for vertical synchronization; this allows for full performance and avoids tearing. To turn vertical synchronization off (e.g. for benchmarking) use this .drirc in your home directory:\n\n```\n~/.drirc\n```\n\n```\n<device screen=\"0\" driver=\"dri2\">\n\t<application name=\"Default\">\n\t\t<option name=\"vblank_mode\" value=\"0\"/>\n\t</application>\n</device>\n```\n\n"
    },
    {
      "title": "DRI3 issues",
      "level": 3,
      "content": "DRI3 is the default DRI version in xf86-video-intel. On some systems this can cause issues such as this. To switch back to DRI2 add the following line to your configuration file:\n\n```\nOption \"DRI\" \"2\"\n```\n\nFor the modesetting driver, this method of disabling DRI3 does not work. Instead, one can set the environment variable LIBGL_DRI3_DISABLE=1.\n\n"
    },
    {
      "title": "Font and screen corruption in GTK applications (missing glyphs after suspend/resume)",
      "level": 3,
      "content": "Should you experience missing font glyphs in GTK applications, the following workaround might help. Edit /etc/environment to add the following line:\n\n```\n/etc/environment\n```\n\n```\nCOGL_ATLAS_DEFAULT_BLIT_MODE=framebuffer\n```\n\nSee also FreeDesktop bug 88584.\n\n"
    },
    {
      "title": "X freeze/crash with intel driver",
      "level": 3,
      "content": "Some issues with X crashing, GPU hanging, or problems with X freezing, can be fixed by disabling the GPU usage with the NoAccel option - add the following lines to your configuration file:\n\n```\nOption \"NoAccel\" \"True\"\n```\n\nAlternatively, try to disable the 3D acceleration only with the DRI option:\n\n```\nOption \"DRI\" \"False\"\n```\n\n"
    },
    {
      "title": "Adding undetected resolutions",
      "level": 3,
      "content": "This issue is covered on the Xrandr page.\n\n"
    },
    {
      "title": "Backlight is not adjustable",
      "level": 3,
      "content": "If after resuming from suspend, the hotkeys for changing the screen brightness do not take effect, check your configuration against the Backlight article.\n\nIf the problem persists, try one of the following kernel parameters:\n\n```\nacpi_osi=Linux\nacpi_osi=\"!Windows 2012\"\nacpi_osi=\n```\n\nAlso make sure you are not using fastboot mode (i915.fastboot kernel parameter), it is known for breaking backlight controls.\n\n"
    },
    {
      "title": "Corruption or unresponsiveness in Chromium and Firefox",
      "level": 3,
      "content": "If you experience corruption, unresponsiveness, lags or slow performance in Chromium and/or Firefox some possible solutions are:\n\n- Set the AccelMethod to \"uxa\"\n- Disable VSYNC\n- Enable the TearFree option\n- Disable \"DRI\" and acceleration method (tested on Intel Iris 10th generation): Option \"NoAccel\" \"True\" Option \"DRI\" \"False\"\n\n```\nOption \"NoAccel\" \"True\"\nOption \"DRI\" \"False\"\n```\n\n"
    },
    {
      "title": "Kernel crashing w/kernels 4.0+ on Broadwell/Core-M chips",
      "level": 3,
      "content": "A few seconds after X/Wayland loads the machine will freeze and journalctl will log a kernel crash referencing the Intel graphics as below:\n\n```\nJun 16 17:54:03 hostname kernel: BUG: unable to handle kernel NULL pointer dereference at           (null)\nJun 16 17:54:03 hostname kernel: IP: [<          (null)>]           (null)\n...\nJun 16 17:54:03 hostname kernel: CPU: 0 PID: 733 Comm: gnome-shell Tainted: G     U     O    4.0.5-1-ARCH #1\n...\nJun 16 17:54:03 hostname kernel: Call Trace:\nJun 16 17:54:03 hostname kernel:  [<ffffffffa055cc27>] ? i915_gem_object_sync+0xe7/0x190 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffffa0579634>] intel_execlists_submission+0x294/0x4c0 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffffa05539fc>] i915_gem_do_execbuffer.isra.12+0xabc/0x1230 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffffa055d349>] ? i915_gem_object_set_to_cpu_domain+0xa9/0x1f0 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffff811ba2ae>] ? __kmalloc+0x2e/0x2a0\nJun 16 17:54:03 hostname kernel:  [<ffffffffa0555471>] i915_gem_execbuffer2+0x141/0x2b0 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffffa042fcab>] drm_ioctl+0x1db/0x640 [drm]\nJun 16 17:54:03 hostname kernel:  [<ffffffffa0555330>] ? i915_gem_execbuffer+0x450/0x450 [i915]\nJun 16 17:54:03 hostname kernel:  [<ffffffff8122339b>] ? eventfd_ctx_read+0x16b/0x200\nJun 16 17:54:03 hostname kernel:  [<ffffffff811ebc36>] do_vfs_ioctl+0x2c6/0x4d0\nJun 16 17:54:03 hostname kernel:  [<ffffffff811f6452>] ? __fget+0x72/0xb0\nJun 16 17:54:03 hostname kernel:  [<ffffffff811ebec1>] SyS_ioctl+0x81/0xa0\nJun 16 17:54:03 hostname kernel:  [<ffffffff8157a589>] system_call_fastpath+0x12/0x17\nJun 16 17:54:03 hostname kernel: Code:  Bad RIP value.\nJun 16 17:54:03 hostname kernel: RIP  [<          (null)>]           (null)\n```\n\nThis can be fixed by disabling execlist support which was changed to default on with kernel 4.0. Add the following kernel parameter:\n\n```\ni915.enable_execlists=0\n```\n\nThis is known to be broken to at least kernel 4.0.5.\n\n"
    },
    {
      "title": "Lag in Windows guests",
      "level": 3,
      "content": "The video output of a Windows guest in VirtualBox sometimes hangs until the host forces a screen update (e.g. by moving the mouse cursor). Removing the enable_fbc=1 option fixes this issue.\n\n"
    },
    {
      "title": "Screen flickering",
      "level": 3,
      "content": "Panel Self Refresh (PSR), a power saving feature used by Intel iGPUs is known to cause flickering in some instances FS#49628 FS#49371 FS#50605. A temporary solution is to disable this feature using the kernel parameter i915.enable_psr=0 or xe.enable_psr=0.\n\nThis can solve error messages like [i915] *ERROR* CPU pipe A FIFO underrun.\n\n"
    },
    {
      "title": "OpenGL 2.1 with i915 driver",
      "level": 3,
      "content": "The classic mesa driver for Gen 3 GPUs included in the mesa-amber package reports OpenGL 2.0 by default, because the hardware is not fully compatible with OpenGL 2.1.[34] OpenGL 2.1 support can be enabled manually by setting /etc/drirc or ~/.drirc options like:\n\n```\n/etc/drirc\n```\n\n```\n<driconf>\n...\n    <device driver=\"i915\">\n        <application name=\"Default\">\n            <option name=\"stub_occlusion_query\" value=\"true\" />\n            <option name=\"fragment_shader\" value=\"true\" />\n        </application>\n    </device>\n...\n</driconf>\n```\n\n- The reason of this step back was Chromium and other applications' bad experience. If needed, you might edit the drirc file in a \"app-specific\" style, see here, to disable OpenGL 2.1 on executable chromium for instance.\n- The new Gallium based i915 driver included in mesa package always reports OpenGL 2.1, so this setting is not needed for that driver.\n\n"
    },
    {
      "title": "KMS Issue: console is limited to small area",
      "level": 3,
      "content": "One of the low-resolution video ports may be enabled on boot which is causing the terminal to utilize a small area of the screen. To fix, explicitly disable the port with an i915 module setting with video=SVIDEO-1:d in the kernel command line parameter in the boot loader. See Kernel parameters for more info.\n\nIf that does not work, try disabling TV1 or VGA1 instead of SVIDEO-1. Video port names can be listed with xrandr.\n\n"
    },
    {
      "title": "No sound through HDMI on a Haswell CPU",
      "level": 3,
      "content": "According to a Linux kernel issue, sound will not be output through HDMI if intel_iommu=on. To fix this problem, use the following kernel parameter:\n\n```\nintel_iommu=on,igfx_off\n```\n\nOr alternatively, disable IOMMU:\n\n```\nintel_iommu=off\n```\n\n"
    },
    {
      "title": "Crash/freeze on low power Intel CPUs",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nLow-powered Intel processors and/or laptop processors have a tendency to randomly hang or crash due to the problems with the power management features found in low-power Intel chips. If such a crash happens, you will not see any logs reporting this problem. Adding the following Kernel parameters may help to resolve the problem.\n\n```\nintel_idle.max_cstate=1 i915.enable_dc=0 ahci.mobile_lpm_policy=1\n```\n\nahci.mobile_lpm_policy=1 fixes a hang on several Lenovo laptops and some Acer notebooks due to problematic SATA controller power management. That workaround is strictly not related to Intel graphics but it does solve related issues. Adding this kernel parameter sets the link power management from firmware default to maximum performance and will also solve hangs when you change display brightness on certain Lenovo machines but increases idle power consumption by 1-1.5 W on modern ultrabooks. For further information, especially about the other states, see the Linux kernel mailing list and Red Hat documentation.\n\ni915.enable_dc=0 disables GPU power management. This does solve random hangs on certain Intel systems, notably Goldmount and Kaby Lake Refresh chips. Using this parameter does result in higher power use and shorter battery life on laptops/notebooks.\n\nintel_idle.max_cstate=1 limits the processors sleep states, it prevents the processor from going into deep sleep states. That is absolutely not ideal and does result in higher power use and lower battery life. However, it does solve random hangs on many Intel systems. Use this if you have a Intel Baytrail or a Kaby Lake Refresh chip. Intel \"Baytrail\" chips were known to randomly hang without this kernel parameter due to a hardware flaw, theoretically fixed 2019-04-26. More information about the max_cstate parameter can be found in the kernel documentation and about the cstates in general on a writeup on GitHub.\n\nIf you try adding intel_idle.max_cstate=1 i915.enable_dc=0 ahci.mobile_lpm_policy=1 in the hope of fixing frequent hangs and that solves the issue you should later remove one by one to see which of them actually helped you solve the issue. Running with cstates and display power management disabled is not advisable if the actual problem is related to SATA power management and ahci.mobile_lpm_policy=1 is the one that actually solves it.\n\nCheck Linux Reviews for more details.\n\n"
    },
    {
      "title": "Higher C-states prevent wakeup from S3",
      "level": 4,
      "content": "In case you infrequently wake up to a black screen, but the system otherwise properly resumes with CPU pipe A FIFO underrun messages in the journal and limiting intel_idle.max_cstate=1 reliably prevents that, you can use Suspend and hibernate#Sleep hooks and cpupower-idle-set(1) to effectively control the C-state around the suspend cycle with -D0 and -E to not permanently run the CPU in the lowest C-state.\n\n"
    },
    {
      "title": "Add support for 165Hz monitor",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with Kernel mode setting#Forcing modes and EDID.** This article or section is a candidate for merging with Kernel mode setting#Forcing modes and EDID.\n\nThis article or section is a candidate for merging with Kernel mode setting#Forcing modes and EDID.\n\nFor some 165Hz monitors, xrandr might not display the 165Hz option, and the fix in #Adding undetected resolutions does not solve this. In this case, see i915-driver-stuck-at-40hz-on-165hz-screen.\n\nNote: Then append edid in HOOKS of /etc/mkinitcpio.conf, Just like this:\n\n```\n/etc/initcpio/install/edid\n```\n\n```\n#!/bin/bash\n\nbuild() {\n    add_file /lib/firmware/edid/edid.bin\n}\n\nhelp() {\n    cat <<HELPEOF\nThis hook add support for 165Hz\nHELPEOF\n}\n```\n\nThen append edid in HOOKS of /etc/mkinitcpio.conf, Just like this:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nHOOKS=(... fsck edid)\n```\n\nThen regenerate the initramfs.\n\n"
    },
    {
      "title": "Freeze after wake from sleep/suspend with Raptor Lake and Alder Lake-P",
      "level": 3,
      "content": "Users with Raptor Lake and Alder Lake-P 12th gen mobile processor laptops from various vendors experienced freeze and black-screen after waking up from suspending. It is because many laptop vendors ship an incorrect VBT (Video BIOS Table), as described in freedesktop issues 5531 6401, that wrongly describe the actual ports connected to the iGPU. In this case, all of the documented cases concern duplicate eDP entries.\n\nConsidering most vendors will not publish a BIOS update for a laptop with a properly working Windows OS, Linux users could only address the issue on the kernel side. There are two methods for a user to prevent the duplicate eDP entries from affecting the kernel: patching the kernel or loading a modified VBT.\n\nFor patching the kernel, the duplicate eDP entry needs to be identified by analyzing the output of:\n\n```\n# intel_vbt_decode /sys/kernel/debug/dri/1/i915_vbt\n```\n\n```\nChild device info:\n        Device handle: 0x0008 (LFP 1 (eDP))\n        Device type: 0x1806 (unknown)\n ...\n Child device info:\n        Device handle: 0x0080 (LFP 2 (eDP))\n        Device type: 0x1806 (unknown)\n```\n\nThis shows that there is in fact a duplicate eDP, and the kernel should ignore the second entry, but the user is still encouraged to check this. This can then be patched with the following kernel patch in which the index of the duplicate screen can be substituted for ignoreEntry = 1 if it needs be.\n\n```\n--- a/drivers/gpu/drm/i915/display/intel_bios.c\n+++ b/drivers/gpu/drm/i915/display/intel_bios.c\n@@ -3688,6 +3688,14 @@\n{\n       struct intel_bios_encoder_data *devdata;\n\n+       int ignoreEntry = 0;\n+\n       list_for_each_entry(devdata, &i915->display.vbt.display_devices, node)\n-               func(i915, devdata);\n+       {\n+               if (ignoreEntry != 1)\n+               {\n+                       func(i915, devdata);\n+                       ignoreEntry++;\n+               }\n+       }\n}\n```\n\nA second way to solve this is to edit the VBT by directly erasing the duplicate entry from the VBT.\n\nThis works by copying the VBT and editing it with a hex editor and changing the device type corresponding with the duplicate device handle to 00 00:\n\n```\n$ cat /sys/kernel/debug/dri/0/i915_vbt > vbt\n```\n\n```\n--- vbt\n+++ modified_vbt\n@@ -22,10 +22,10 @@\n 00000150  00 08 00 20 00 08 00 10  00 08 00 02 00 08 00 01  |... ............|\n 00000160  00 08 00 00 01 08 00 00  00 04 00 00 00 40 00 00  |.............@..|\n 00000170  00 20 00 00 00 10 00 00  00 02 00 00 00 01 00 00  |. ..............|\n-00000180  00 00 01 00 00 02 8b 01  02 04 00 00 27 08 00 06  |............'...|\n-00000190  18 00 00 00 00 00 00 00  00 00 00 00 00 0a 00 00  |................|\n+00000180  00 00 01 00 00 02 8b 01  02 04 00 00 27 08 00 00  |............'...|\n+00000190  00 00 00 00 00 00 00 00  00 00 00 00 00 0a 00 00  |................|\n 000001a0  03 00 00 00 c0 00 40 00  20 00 00 00 00 00 00 00  |......@. .......|\n-000001b0  00 00 20 00 80 00 06 18  00 00 00 00 00 00 00 00  |.. .............|\n+000001b0  00 00 20 00 80 00 00 00  00 00 00 00 00 00 00 00  |.. .............|\n 000001c0  00 00 00 00 07 00 00 00  00 00 00 c0 00 10 00 20  |............... |\n 000001d0  00 00 00 00 00 00 00 00  00 20 00 04 00 d2 60 00  |......... ....`.|\n 000001e0  10 10 00 23 21 10 00 00  00 00 00 07 00 00 02 00  |...#!...........|\n```\n\nThe modified VBT can then be loaded by copying it to /lib/firmware/modified_vbt passing i915.vbt_firmware=modified_vbt as a kernel parameter and, if required, regenerate the initramfs.\n\n"
    },
    {
      "title": "Washed out colors",
      "level": 3,
      "content": "By default some monitors might not be recognized properly by the Intel GPU and have washed out colors because it's not in full-range RGB mode.\n\n"
    },
    {
      "title": "Fix colors for Wayland",
      "level": 4,
      "content": "```\n/etc/udev/rules.d/80-i915.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"module\", KERNEL==\"i915\", RUN+=\"/usr/local/bin/intel-wayland-fix-full-color\"\n```\n\n```\n/usr/local/bin/intel-wayland-fix-full-color\n```\n\n```\n#!/bin/bash\n\nreadarray -t proptest_result <<<\"$(/usr/bin/proptest -M i915 -D /dev/dri/card0 | grep -E 'Broadcast|Connector')\"\n\nfor ((i = 0; i < ${#proptest_result[*]}; i += 2)); do\n    connector=$(echo ${proptest_result[i]} | awk '{print $2}')\n    connector_id=$(echo ${proptest_result[i + 1]} | awk '{print $1}')\n\n    /usr/bin/proptest -M i915 $connector connector $connector_id 1\ndone\n```\n\nIf you are using GNOME, an alternative is to add <rgbrange>full</rgbrange> to the ~/.config/monitors.xml configuration. For example:\n\n```\n~/.config/monitors.xml\n```\n\n```\n<monitors version=\"2\">\n  <configuration>\n    <layoutmode>logical</layoutmode>\n    <logicalmonitor>\n      <x>0</x>\n      <y>0</y>\n      <primary>yes</primary>\n      <monitor>\n        <monitorspec>\n          <connector>HDMI-1</connector>\n          <vendor>MetaProduct's Inc.</vendor>\n          <product>MetaMonitor</product>\n          <serial>0x123456</serial>\n        </monitorspec>\n        <mode>\n          <width>1920</width>\n          <height>1080</height>\n          <rate>60.000</rate>\n        </mode>\n        <rgbrange>full</rgbrange>\n      </monitor>\n    </logicalmonitor>\n  </configuration>\n</monitors>\n```\n\n- If displays are rearranged or display settings changed in any other way, a new layout might be added to monitors.xml file without the <rgbrange>full</rgbrange> tag. To ensure the RGB range is consistently set across different layouts, consider adding the tag to every duplicated entry of the logical monitor.\n- If GDM login screen is not using full RGB range, copy user's monitors.xml to gdm's home directory. See GDM#Setup default monitor settings\n\n"
    },
    {
      "title": "Fix colors for X11/Xorg",
      "level": 4,
      "content": "```\n# xrandr --output NAME_OF_YOUR_OUTPUT --set \"Broadcast RGB\" \"Full\"\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- linux graphics (includes a list of 106 related products)\n- Intel® Processor Graphics (includes a table of processor series, former code name, launch date and graphics technology)\n\n"
    }
  ]
}