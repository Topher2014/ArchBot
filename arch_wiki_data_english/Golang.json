{
  "title": "Golang",
  "url": "https://wiki.archlinux.org/title/Golang",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Go package guidelines\n\nGo is an open source programming language supported by Google. From the Go documentation:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the go package, which includes the standard Go compiler and other development tools. See the go command documentation for a list of included subcommands.\n\n"
    },
    {
      "title": "Alternative Compilers",
      "level": 3,
      "content": "The go package includes the standard Go compiler, which is called gc. The following alternative compilers are also available.\n\n"
    },
    {
      "title": "gccgo",
      "level": 4,
      "content": "A frontend for GCC called gccgo is provided by the gcc-go package. gccgo may produce faster binaries than gc in some cases and can target additional operating systems and architectures. In practice, gc produces faster binaries than gccgo for almost all workloads.\n\n"
    },
    {
      "title": "TinyGo",
      "level": 4,
      "content": "TinyGo is an LLVM based compiler designed to produce very small binaries for embedded systems and WebAssembly. It is provided by the tinygo package.\n\n"
    },
    {
      "title": "Tools",
      "level": 3,
      "content": "The following packages provide developer tools for Go:\n\n- Go tools — Various tools and Go packages mostly for static analysis of Go programs.\n\n- gopls — The official Go language server.\n\n- Delve — A debugger for the Go programming language.\n\n- GoReleaser — A release automation tool for Go projects.\n\n- gox — A tool for Go cross compilation that will parallelize builds for multiple platforms.\n\n- ko — A container image builder for Go applications.\n\n- revive — A fast, configurable, extensible, flexible, and beautiful linter for Go.\n\n- Staticcheck — A state of the art linter for the Go programming language.\n\n- Yaegi — A Go interpreter. Includes the yaegi command-line interpreter/REPL.\n\nYou can also install and run developer tools within modules using go get -tool and go tool. See the official documentation on tool dependencies for instructions.\n\n"
    },
    {
      "title": "Install directory",
      "level": 3,
      "content": "The go install command installs Go executables in the directory named by the GOBIN environment variable. GOBIN defaults to $GOPATH/bin, or ~/go/bin if the GOPATH environment variable is not set.\n\nFor convenience, add the bin subdirectory to PATH:\n\n```\n$ export PATH=\"$PATH:$(go env GOBIN):$(go env GOPATH)/bin\"\n```\n\nSee How to Write Go Code and go help install for more information.\n\n"
    },
    {
      "title": "Compiling source code",
      "level": 3,
      "content": "You can write a Hello World program as follows:\n\n```\nhello.go\n```\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, Arch!\")\n}\n```\n\nThen run it with the go tool:\n\n```\n$ go run hello.go\n```\n\n```\nHello, Arch!\n```\n\nCompilation with the standard compiler (same as go build -compiler=gc hello.go):\n\n```\n$ go build hello.go\n```\n\nCompilation with gccgo (same as go build -compiler=gccgo hello.go):\n\n```\n$ gccgo hello.go -o hello\n```\n\nCompilation with tinygo:\n\n```\n$ tinygo build -o hello ./hello.go\n```\n\n"
    },
    {
      "title": "Cross compiling to other platforms",
      "level": 3,
      "content": "The standard compiler can natively cross-compile to a number of platforms. The procedure varies depending on whether the source code calls C code using cgo.\n\n"
    },
    {
      "title": "Without cgo",
      "level": 4,
      "content": "If cgo is not required for your build, then simply specify the target OS and architecture as environment variables to go build:\n\n```\n$ GOOS=linux GOARCH=arm64 go build .\n```\n\nSee the official documentation for the valid combinations of GOOS and GOARCH.\n\n"
    },
    {
      "title": "With cgo",
      "level": 4,
      "content": "If cgo is required for your build, you have to provide the path to your C/C++ cross-compilers, via the CC/CXX environment variables.\n\nSay you want to cross-compile for GOOS=linux and GOARCH=arm64.\n\nYou need first to install the aarch64-linux-gnu-gcc cross-compiler.\n\nHere is a sample program that requires cgo, so that we can test the cross-compilation process:\n\n```\nhello.go\n```\n\n```\npackage main\n\n// #include <stdio.h>\n// void hello() { puts(\"Hello, Arch!\"); }\nimport \"C\"\n\nfunc main() {\n    C.hello()\n}\n```\n\nThen, you can cross-compile it like this:\n\n```\n$ GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=/usr/bin/aarch64-linux-gnu-gcc go build hello.go\n```\n\nYou can check that the architecture of the generated binary is actually aarch64:\n\n```\n$ file hello\nhello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID[sha1]=b1d92ae8840a019f36cc2aee4606b6ae4a581bf1, for GNU/Linux 3.7.0, not stripped\n```\n\nIf you copy hello to a suitable host, you can test-run it:\n\n```\n[alarm@rpi3 ~]$ uname -a\nLinux alarm 5.3.8-1-ARCH #1 SMP Tue Oct 29 19:31:23 MDT 2019 aarch64 GNU/Linux\n[alarm@arpi3 ~]$ ./hello\nHello, Arch!\n```\n\n"
    },
    {
      "title": "Using an alternate Go module mirror",
      "level": 3,
      "content": "By default, Go uses Google's service proxy.golang.org as a module mirror.\n\nIf an alternate mirror is desired, it can be changed with the environment variable GOPROXY, for example:\n\n```\n$ export GOPROXY=https://goproxy.io/\n```\n\nA number of public module mirrors are available, see for example: Go and Hugo Proxy Servers.\n\n"
    },
    {
      "title": "JetBrains Go Plugin",
      "level": 3,
      "content": "If you are using a JetBrains IDE and the Go plugin cannot find your Go SDK path, you might be using an incompatible package. Remove the gcc-go package and replace it with go. If your GOPATH is set, the IDE should now be able to find your Go SDK at /usr/lib/go.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official website\n- Official wiki\n- Wikipedia article\n- Examples with small descriptions\n- Interactive Go training tour\n- Go cross compilation\n\n"
    }
  ]
}