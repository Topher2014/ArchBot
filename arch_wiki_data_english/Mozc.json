{
  "title": "Mozc",
  "url": "https://wiki.archlinux.org/title/Mozc",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "From the project's home page:\n\nThe differences between Mozc and Google Japanese Input are described in detail at the project's About Branding page, but in short, Mozc's open-source code does not include Google's extensive word conversion tables (so called \"dictionaries\"), so its conversion quality is not equivalent to that of Google's branded product. This can be mostly mitigated with custom dictionaries though (see below).\n\n"
    },
    {
      "title": "Split vs. integrated packages",
      "level": 3,
      "content": "As an IME, Mozc has two distinct parts: a server, which does all the work of the conversion, and a set of modules which allow the server to communicate with the system's input method framework and output the result on the screen. A separate module is required for each of IBus, Fcitx5, Fcitx and Emacs.\n\nSome Mozc packages contain only the IMF-specific modules and split the server into a separate mozcAUR package; this allows for the different modules to be installed side by side, independently from the server itself (which can be useful in a multi-user setup where different users use different IMFs, or when using Emacs).\n\nOther Mozc packages forego this split and instead integrate the server together with the modules. This does have its advantages, but one very notable disadvantage is that it makes it impossible to install additional modules due to file conflicts (because more than one package are competing to provide the server's files).\n\nIf for any reason you will be needing more than one IMF module installed at the same time, the solution is to either build the non-split packages yourself and manually resolve the file conflicts, or to only choose from among the packages that split the server from the modules.\n\n"
    },
    {
      "title": "The UT Dictionary",
      "level": 3,
      "content": "As already mentioned, Mozc's conversion quality is not quite as good as that of Google Japanese Input because it does not include Google's extensive word conversion tables (so called \"dictionaries\"). A solution exists for that in the form of the UT dictionary, which is a third-party dictionary that enhances Mozc's conversion quality and brings it closer to Google Japanese Input. It achieves that by including thousands of additional words aggregated from several popular online sources (based on page rankings from Google, Yahoo and Wikipedia) and also by integrating a variety of other specialized sources such as the NEologd dictionary, which in the words of its creator contains \"neologisms (new words), which are extracted from many language resources on the Web\".\n\n"
    },
    {
      "title": "Summary",
      "level": 3,
      "content": "Install one or more of fcitx5-mozc-utAUR, fcitx-mozc-utAUR, ibus-mozcAUR and emacs-mozcAUR.\n\nWhen you are asked which flavor of Mozc you wish to use, select either mozcAUR for the vanilla Mozc or mozc-utAUR for the UT-enhanced Mozc.\n\nNote: **integrated packages** \n\n"
    },
    {
      "title": "IBus",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nSee IBus for more information.\n\nNote: **active_on_launch: True** If that doesn't work:\n\n```\n~/.config/mozc/ibus_config.textproto\n```\n\n```\n...\n}\nactive_on_launch: True\n```\n\nIf that doesn't work:\n\n- Check that ~/.mozc/ibus_config.textproto does not exist. If it does (for example because Mozc was upgraded from an older installation), it will take precedence over ~/.config/mozc/ibus_config.textproto.\n- Run the ibus write-cache; ibus restart command to restart IBus.\n\nMore information is available in the Mozc documentation.\n\nOpen the IBus configuration tool by running:\n\n```\n$ ibus-setup\n```\n\nIn the Input Method tab, click on Add, and then search for and add the Mozc layout.\n\nYou can switch to the new Mozc layout with Alt+Shift_L (as per the IBus default).\n\n"
    },
    {
      "title": "Fcitx5",
      "level": 3,
      "content": "See Fcitx5 for more information.\n\nOpen the Fcitx5 configuration tool by running:\n\n```\n$ fcitx5-configtool\n```\n\nIn the Input Method tab, add Mozc in the Add Input Method menu. You can set the keyboard shortcut to switch between layouts in Configure global options. This is different to the normal KDE layout switcher, so one could switch between different layouts mapped to Japanese by Mozc.\n\nSimilar to Ibus’ Use system keyboard layout, you can select the layout for Mozc to the left of the remove button. This selects the layout to use before Mozc, so one can use custom layouts mapped correctly to Mozc.\n\n"
    },
    {
      "title": "Emacs",
      "level": 3,
      "content": "You can use mozc.el (mozc-mode) to input Japanese via LEIM (Library of Emacs Input Method). To use mozc-mode, write the following into your .emacs.d/init.el or some other file for Emacs customizing:\n\n```\n(require 'mozc)  ; or (load-file \"/path/to/mozc.el\")\n(setq default-input-method \"japanese-mozc\")\n```\n\nmozc.el provides \"overlay\" mode in the styles of showing candidates (from mozc r77) which shows a candidate window in box style close to the point. If you want to use it by default, add the following:\n\n```\n(setq mozc-candidate-style 'overlay)\n```\n\nC-\\ (toggle-input-method) enables and disables use of mozc-mode.\n\n"
    },
    {
      "title": "Disabling XIM",
      "level": 4,
      "content": "When you are using input method on your desktop and assigning activation/deactivation of input method to C-SPC, you will be not able to use C-SPC/C-@ as set-mark-command on Emacs. To avoid this problem, add the following into your ~/.Xresources or ~/.Xdefaults. xim will be disabled on Emacs.\n\n```\nEmacs*UseXIM: false\n```\n\n"
    },
    {
      "title": "Confirming Mozc version which you are using now",
      "level": 3,
      "content": "Type \"ばーじょん\" (\"version\") and convert it while activating Mozc. The version number of Mozc will be shown in the candidate list like follows:\n\n```\nばーじょん\n```\n\n```\nバージョン\nヴァージョン\nばーじょん\nMozc-1.6.1187.102  ⇐ Current version of Mozc\n...\n```\n\n"
    },
    {
      "title": "Launching Mozc tools from command line",
      "level": 3,
      "content": "The followings are commands to launch Mozc tools:\n\n- Mozc Settings: /usr/lib/mozc/mozc_tool --mode=config_dialog\n- Mozc Dictionary Tool: /usr/lib/mozc/mozc_tool --mode=dictionary_tool\n- Mozc Word Register: /usr/lib/mozc/mozc_tool --mode=word_register_dialog\n\n"
    },
    {
      "title": "Use CapsLock as Eisu_toggle key on ASCII layout keyboard",
      "level": 3,
      "content": "In all of the preset keymap styles of Mozc, the command Toggle alphanumeric mode on Composition mode is assigned to the Eisu (Eisu_toggle), Hiragana/Katakana or Muhenkan key, but the ASCII keyboard has none of them.\n\nOne solution for it is to use Caps Lock key as Eisu_toggle (Mozc does not recognize the Caps Lock key as of r124). The following is a way to assign Eisu_toggle to Caps Lock (without any modifier keys) and Caps_Lock to Shift+CapsLock, as on the OADG keyboard layout.\n\nEdit ~/.Xmodmap as follows:\n\n```\nkeycode 66 = Eisu_toggle Caps_Lock\nclear Lock\n```\n\nThen, restart X or run xmodmap to apply the changes immediately:\n\n```\n$ xmodmap ~/.Xmodmap\n```\n\n"
    },
    {
      "title": "Use underlying Japanese keymap on Non-English/Non-Japanese systems",
      "level": 3,
      "content": "If you are primarily using a Non-English or Non-Japanese system with a keyboard layout different than QWERTY (e.g. German) and only want to use Japanese as a secondary input language, the key mapping might be based on this main keyboard language. This might be odd, especially if migrating from Windows or MacOS or directly from a Japanese computer.\n\nTo change the underlying keyboard layout on Ibus, change the default keymap in ~/.config/mozc/ibus_config.textproto by setting the layout key to Japanese (or some other keyboard with QWERTY):\n\n```\n~/.config/mozc/ibus_config.textproto\n```\n\n```\nengines {\n...\n  layout : \"jp\"\n...\n}\n```\n\n"
    },
    {
      "title": "Building Mozc fails (process is killed)",
      "level": 3,
      "content": "If the build process fails with an error message like the following:\n\n```\n...\n/bin/sh: line 1:  xxxx killed\n...\nmake: *** [xxx/xxx...] error 137\n...\n```\n\nMake sure you have not run out of memory.\n\n"
    },
    {
      "title": "New version of Mozc does not appear though I upgraded Mozc and restarted X or Input Method Framework (not rebooted)",
      "level": 3,
      "content": "The old version of Mozc may be still on your memory. Try to kill the existing mozc_server process:\n\n```\n$ killall mozc_server\n```\n\n"
    },
    {
      "title": "mozc_server becomes defunct",
      "level": 3,
      "content": "Mozc cannot run in root. Start X in normal user.\n\n"
    },
    {
      "title": "mozc_emacs_helper not found in emacs",
      "level": 3,
      "content": "When installing mozc.el you need to install a helper program called mozc_emacs_helper.\n\nYou need to install emacs-mozcAUR for this helper program.\n\n"
    },
    {
      "title": "mozc tool(s) does not launch",
      "level": 3,
      "content": "It is also possible to launch Mozc tools with log sent directly to console, which is useful for debugging. To enable this, simply append --logtostderr like this for example:\n\n```\n$ /usr/lib/mozc/mozc_tool --mode=config_dialog --logtostderr\n```\n\nSee also\n\n"
    },
    {
      "title": "Suggestion window is blindingly white in dark mode",
      "level": 3,
      "content": "Use the following environment variable:\n\n```\nMOZC_IBUS_CANDIDATE_WINDOW=ibus\n```\n\n"
    }
  ]
}