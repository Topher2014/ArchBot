{
  "title": "Dunstify",
  "url": "https://wiki.archlinux.org/title/Dunstify",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Desktop notifications\n\nDunst is a lightweight replacement for the notification-daemons provided by most desktop environments.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the dunst package.\n\nAn example configuration file is included at /etc/dunst/dunstrc. Copy this file to ~/.config/dunst/dunstrc and edit it accordingly.\n\nLaunch /usr/bin/dunst and make sure your window manager or desktop environment starts it on startup/login.\n\n"
    },
    {
      "title": "Appearance",
      "level": 2,
      "content": "Text in notifications can be styled. Some examples are bold, italics, strikethrough and underline. For a complete reference see Pango markup. Pango can be stripped from notifications if markup is set to none.\n\nThe formatting of the notification can be specified. Options are as follows:\n\n```\n%a  appname\n%s  summary\n%b  body\n%i  iconname (including its path)\n%I  iconname (without its path)\n%p  progress value if set ([  0%] to [100%]) or nothing\n```\n\nThese can be used in conjunction with HTML markup. For example the format can be set to <b>%s</b>\\n%b for a bolded notification summary, a newline and the body unformatted.\n\n"
    },
    {
      "title": "Icon sets",
      "level": 3,
      "content": "Icons are set in the option icon_path of the global section of the configuration file. Status, devices and legacy icons are needed. By default, Dunst looks for the gnome-icon-themeAUR icons. For example, to use adwaita-icon-theme (gnome-icon-theme's successor), instead:\n\n```\nicon_path = /usr/share/icons/Adwaita/16x16/status/:/usr/share/icons/Adwaita/16x16/devices/:/usr/share/icons/Adwaita/16x16/legacy/\n```\n\nInstead of specifying the path to the icon folder, it is possible to specify the icon theme directly, also in the global section of the configuration file. In this case, you also need to set enable_recursive_icon_lookup=true to enable search in the subfolders of the theme main folder.\n\nExample:\n\n```\nicon_theme = Papirus\nenable_recursive_icon_lookup = true\n```\n\n"
    },
    {
      "title": "Shortcuts",
      "level": 2,
      "content": "Dunst can be controlled with dunstctl. You can update your keyboard shortcuts to call dunstctl.\n\nFor example, to close all notifications:\n\n```\n$ dunstctl close-all\n```\n\nTo show history:\n\n```\n$ dunstctl history-pop\n```\n\n"
    },
    {
      "title": "Rules",
      "level": 2,
      "content": "You can create rules in your dunstrc file which match certain notifications and then perform an action on it such as executing a script.\n\n"
    },
    {
      "title": "Filtering",
      "level": 3,
      "content": "To create a new rule, create a new section with a custom name in your configuration file. In that section you can now use the attributes appname, summary, body, icon, category, match_transient and msg_urgency to match the notification. Globbing is supported. See Scripting for an example. Start dunst with the -print option to find out useful information about a notification to write proper rules.\n\n"
    },
    {
      "title": "Modifying",
      "level": 3,
      "content": "When a notification is matched you can perform certain actions on it like modifying the format string, which is especially useful if you want to completely ignore certain notifications. In that case simply add the line format=\"\" to your rule.\n\nAnother useful feature is if you want to keep certain notifications out of your history for example if you use dunst as a Volume indicator. To achieve this simply add history_ignore=yes to your rule.\n\n"
    },
    {
      "title": "Scripting",
      "level": 3,
      "content": "Dunst can be configured to run scripts based on certain notification content. Here is an example using Dunst to run a script when someone from pidgin signs on:\n\n```\n[signed_on]\n   appname = Pidgin\n   summary = \"*signed on*\"\n   urgency = low\n   script = do_something.sh\n```\n\nThe specified script will be passed the following parameters in that order: appname, summary, body, icon, urgency.\n\n"
    },
    {
      "title": "Disable dunst temporarily",
      "level": 2,
      "content": "To disable dunst temporarily there are two options.\n\nOnce paused dunst will hold back all notifications. After enabling dunst again all held back notifications will be displayed.\n\n"
    },
    {
      "title": "Dunstify",
      "level": 2,
      "content": "Dunstify is an alternative to the notify-send command which is completely compatible to notify-send and can be used alongside it, but offers some more features.\n\nAdditionally to the options available in notify-send, dunstify offers some more features like IDs and actions.\n\n"
    },
    {
      "title": "Replacing notifications",
      "level": 3,
      "content": "You can assign an ID to a notification by calling dunstify with the -r ID option, where ID must be an integer. If a notification with that ID already exists it will be replaced with the new one. You may also close a notification with dunstify -C ID.\n\nHowever, for most use cases, implementing tags is preferred over micromanaging IDs because the latter option has many hidden pitfalls [1]. Replacing IDs may be considered for debugging and for very complex notification senders instead of common practice [2].\n\nNotifications with the same tag (\"test\" in this example) are replaced without having to care for IDs.\n\n```\n$ dunstify -h string:x-dunst-stack-tag:test Test -A 'tested,default'\n$ dunstify -h string:x-dunst-stack-tag:test Testing\n```\n\n"
    },
    {
      "title": "Actions",
      "level": 3,
      "content": "You can define actions which can be invoked directly from the notification by specifying one or more --action=action,label parameters. For instance:\n\n```\n$ dunstify --action=\"replyAction,reply\" \"Message received\"\n```\n\nThe user can then access the specified actions via Dunst's context menu. The call to dunstify will block until either the notification disappears or an action is selected. In the former case dunstify will return 1 if the notification timed out and 2 if it was dismissed manually [3]. In the latter case it returns the action which was selected by the Dunst context menu.\n\nIn addition to invoking actions with the context menu, you may also define how mouse events invoke actions [4]. This allows Dunst to be used interactively, as was suggested in [5]. When a notification has only one action, or when an action is named \"default\", that action may be invoked by middle-clicking the notification (by default or when dunstrc defines mouse_middle_click = do_action).\n\n```\nreply_action () {}\nforward_action () {}\nhandle_dismiss () {}\n\nACTION=$(dunstify --action=\"default,Reply\" --action=\"forwardAction,Forward\" \"Message Received\")\n\ncase \"$ACTION\" in\n\"default\")\n    reply_action\n    ;;\n\"forwardAction\")\n    forward_action\n    ;;\n\"2\")\n    handle_dismiss\n    ;;\nesac\n```\n\n"
    },
    {
      "title": "Using dunstify as volume/brightness level indicator",
      "level": 3,
      "content": "You can use the replace id feature to implement a simple volume or brightness indicator notification like in this picture [6].\n\nTo realize that volume indicator place the following script somewhere on your PATH.\n\n```\n#!/bin/bash\n# changeVolume\n\n# Arbitrary but unique message tag\nmsgTag=\"myvolume\"\n\n# Change the volume using alsa(might differ if you use PulseAudio)\namixer -c 0 set Master \"$@\" > /dev/null\n\n# Query amixer for the current volume and whether or not the speaker is muted\nvolume=\"$(amixer -c 0 get Master | tail -1 | awk '{print $4}' | sed 's/[^0-9]*//g')\"\nmute=\"$(amixer -c 0 get Master | tail -1 | awk '{print $6}' | sed 's/[^a-z]*//g')\"\nif [[ $volume == 0 || \"$mute\" == \"off\" ]]; then\n    # Show the sound muted notification\n    dunstify -a \"changeVolume\" -u low -i audio-volume-muted -h string:x-dunst-stack-tag:$msgTag \"Volume muted\" \nelse\n    # Show the volume notification\n    dunstify -a \"changeVolume\" -u low -i audio-volume-high -h string:x-dunst-stack-tag:$msgTag \\\n    -h int:value:\"$volume\" \"Volume: ${volume}%\"\nfi\n\n# Play the volume changed sound\ncanberra-gtk-play -i audio-volume-change -d \"changeVolume\"\n```\n\nNow simply bind changeVolume 2dB+ unmute etc. to some hotkey and you are done. You might also want to make dunst ignore these type of notifications in its history. See #Modifying.\n\n"
    },
    {
      "title": "Overwrite previous notification",
      "level": 3,
      "content": "For some notifications (for example sound or brightness), you might want to overwrite the previous notification. You can either use the Dunst method in #Replacing notifications or refer to Desktop notifications#Replace previous notification for a more general example.\n\n"
    },
    {
      "title": "Dunst fails to start via systemd",
      "level": 3,
      "content": "When using dunst without a Display Manager, the DISPLAY environment variable might not be correctly set.[7]\n\nTo fix this, add the following to your .xinitrc:\n\n```\nsystemctl --user import-environment DISPLAY\n```\n\n"
    },
    {
      "title": "Non-matching font sizes (Emojis much larger than text)",
      "level": 3,
      "content": "This is caused by fontconfig not rescaling bitmap fonts. This is usually only noticed with certain emoji fonts (e.g. noto-fonts-emoji)\n\nTo solve, simply run:\n\n```\n# ln -s /etc/fonts/conf.avail/10-scale-bitmap-fonts.conf /etc/fonts/conf.d/\n```\n\nand restart Dunst.\n\n"
    },
    {
      "title": "Notifications from some applications do not obey timeout rules",
      "level": 3,
      "content": "The symptoms for this issue is having configured the timeouts for all urgency levels to be 30 seconds, but notifications from certain applications, such as Discord, Mattermost, and GitLab, disappearing very quickly (typically after only 3 seconds).\n\nYou can find more details about this in upstream's issue #276.\n\nThis occurs because the notifications are being closed forcefully. To address this, a special parameter called ignore_dbusclose has been introduced. You can enable this parameter to disregard the closeNotification message sent via D-Bus. Enabling it ensures that the timeout defined in the dunst configuration is respected. By default, this parameter is set to false.\n\n"
    }
  ]
}