{
  "title": "R",
  "url": "https://wiki.archlinux.org/title/R",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- R package guidelines\n\nFrom \"What is R?\" in the R FAQ:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the r package. The installation of external packages within the R environment may require gcc-fortran.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "To start an R session, open your terminal and type this command:\n\n```\n$ R\n```\n\nNote: **site** \n\n- Make sure to use a capital \"R\" for the command. Note that some shells use the lowercase r command to repeat the last entered command. Once in your R session, the prompt will change to >\n- site refers to system-wide in R Documentation\n\nRun ?Startup to read the documentation about system file configuration, help() for the on-line help, help.start() for the HTML browser interface to help, demo() for some demos and q() to close the session and quit.\n\nWhen closing the session, you will be prompted as follows:\n\n```\nSave workspace image? [y/n/c]:\n```\n\nThe workspace is your current working environment and include any user-defined objects, functions. The saved image is stored in .RData format and will be automatically reloaded the next time R is started. You can manually save the workspace at any time in the session with the save.image(image.RData) command, save as many images as you want (eg: image1.RData, image2.RData). You can load image with the load.image(image.RData) command at any time of your session.\n\n- The --quiet option can be used to start R without a verbose startup message. Add alias R=\"R --quiet\" to a startup file to use this behaviour by default.\n- Running R from the command line will set R's working directory to the current directory. Opening the R GUI will set R's working directory to $HOME, unless explicitly defined in your configuration files (.Renviron or .Rprofile).\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Whenever R starts, its configuration is controlled by several files. Please refer to Initialization at Start of an R Session to get a detailed understanding of startup process.\n\n"
    },
    {
      "title": "Environment",
      "level": 3,
      "content": "R first loads site and user environment variable files. The name of the site file is controlled by the environment variable R_ENVIRON if it exists, and defaults to /etc/R/Renviron.site. The name of the user file is specified by R_ENVIRON_USER. If that is unset, it defaults to .Renviron in the current working directory if it exists, or ~/.Renviron otherwise.\n\nThe most important variables can be found on Environment Variables R Documentation.\n\nYou may disable loading environment files with --no-environ\n\nLines in the Renviron file should be either comment lines starting with # or lines of the form name=value. Here is a very basic .Renviron:\n\n```\n.Renviron\n```\n\n```\nR_HOME_USER = /path/to/your/r/directory\nR_PROFILE_USER = ${HOME}/.config/r/.Rprofile\nR_LIBS_USER = /path/to/your/r/library\nR_HISTFILE = /path/to/your/filename.Rhistory\nMYSQL_HOME = /var/lib/mysql\n```\n\nAlternatively, environmental variables may be set from within your R session via the Sys.setenv() function. For instance, to set the time zone (TZ) environmental variable to \"Europe/London\":\n\n```\n> Sys.setenv(TZ=\"Europe/London\")\n```\n\n"
    },
    {
      "title": "Profile",
      "level": 3,
      "content": "R then loads a .Rprofile file, which contains R code that is executed. These files are read in the following order of preference (only one file is loaded):\n\n1. A file specified by the environment variable R_PROFILE_USER.\n1. A .Rprofile file in the current working directory.\n1. $HOME/.Rprofile.\n\nA .Rprofile file can contain arbitrary R code, though best practice suggests that one should not load packages at startup, or execute any code that would hinder package upgrades and reproducibility.\n\n```\n~/.Rprofile\n```\n\n```\n# The .First function is called after everything else in .Rprofile is executed\n.First <- function() {\n  # Print a welcome message\n  message(\"Welcome back \", Sys.getenv(\"USER\"),\"!\\n\",\"Working directory is: \", getwd())\n}\n\n# Set default browser\noptions(browser = \"firefox\")\n# Number of digits to print. Default is 7, max is 15\noptions(digits = 12)\n# Penalty applied to inhibit the use of scientific notation\noptions(scipen = 2)\n# Do not show stars indicating statistical significance in model outputs\noptions(show.signif.stars = FALSE)\nlocal({\n    # Detect the number of cores available for use in parallelisation\n    n <- max(parallel::detectCores() - 2L, 1L)\n    # Compile the different sources of a single package in parallel\n    Sys.setenv(MAKEFLAGS = paste0(\"-j\",n))\n    # Install different packages passed to a single install.packages() call in parallel\n    options(Ncpus = n)\n    # Parallel apply-type functions via 'parallel' package\n    options(mc.cores =  n)\n})\n# Post-mortem debugging facilities\nerror <- quote(dump.frames(\"${R_HOME_USER}/testdump\", TRUE))\n```\n\nYou can add more global options to customize your R environment. See this post for more examples of user configurations.\n\n"
    },
    {
      "title": "Locale",
      "level": 3,
      "content": "Aspects of the Locale are accessed by the functions Sys.getlocale and Sys.localeconv within the R session. Locales will be the one defined in your system.\n\n"
    },
    {
      "title": "Managing R packages",
      "level": 2,
      "content": "There are many add-on R packages which can be browsed on CRAN package repository.\n\n"
    },
    {
      "title": "With pacman",
      "level": 3,
      "content": "There are some packages available on the AUR with the prefix r-.\n\nYou can mix and match installing R packages with pacman and through R (see below), but if you do so, you should let pacman manage system packages (those that reside at /usr/lib/R/library) and let R manage user-installed packages elsewhere (e.g. ~/R/library).\n\nThe desolve repository also provides a set of pre-built R packages. For requests, please see the repository's Git repository.\n\n"
    },
    {
      "title": "With R",
      "level": 3,
      "content": "Packages can be installed from within R using the install.packages(c(\"pkgname\")) command.\n\nBy default, packages will be installed in the directory corresponding to the first element returned by .libPaths(), which in turn defaults to the value of the environment variable R_LIBS_USER.\n\nYou can change the directory in which packages will be installed with the `lib` argument of install.packages.\n\nYou should use a local library and let pacman manage files that reside under /usr/lib/R/library.\n\nNote: You can disable graphical pop-ups like this by running:\n\nYou can disable graphical pop-ups like this by running:\n\n```\n> options(menu.graphics=FALSE)\n```\n\nWithin your R session, run this command to check that your user library exists and is set correctly:\n\n```\n> Sys.getenv(\"R_LIBS_USER\")\n```\n\n```\n[1] \"/path/to/directory/R/packages\"\n```\n\nAlternatively, you may install from the command line like so:\n\n```\n$ R CMD INSTALL -l $R_LIBS_USER pkg1 pkg2 ...\n```\n\n"
    },
    {
      "title": "Upgrading R packages",
      "level": 4,
      "content": "```\n> update.packages(ask=FALSE)\n```\n\nOr when you also need to rebuild packages which were built for an older version:\n\n```\n> update.packages(ask=FALSE, checkBuilt=TRUE)\n```\n\nOr when you also need to select a specific mirror (https://cran.r-project.org/mirrors.html) to download the packages from (changing the URL as needed):\n\n```\n> update.packages(ask=FALSE, checkBuilt=TRUE, repos=\"https://cran.ma.imperial.ac.uk/\")\n```\n\nYou can use Rscript, which comes with r to update packages from a shell:\n\n```\n$ Rscript -e \"update.packages()\"\n```\n\n"
    },
    {
      "title": "Makevars",
      "level": 3,
      "content": "The Makevars file can be used to set the default make options when installing packages. An example optimized Makevars file is as follow:\n\n```\n~/.R/Makevars\n```\n\n```\nCFLAGS=-O3 -Wall -pedantic -march=native -mtune=native -pipe\nCXXFLAGS=-O3 -Wall -pedantic -march=native -mtune=native -pipe\n```\n\n"
    },
    {
      "title": "Alternative shells",
      "level": 2,
      "content": "As an alternative to the default R program, the following shell is also available:\n\n- radian â€” An alternative console for the R program with multiline editing and rich syntax highlight.\n\n"
    },
    {
      "title": "Adding a graphical frontend to R",
      "level": 2,
      "content": "R does not include a point-and-click graphical user interface for statistics or data manipulation. However, third-party user interfaces for R are available, such as R Commander and Rattle.\n\n"
    },
    {
      "title": "R Commander frontend",
      "level": 3,
      "content": "R Commander(CRAN repo) is a popular user interface to R. There is no Arch Linux package available to install R Commander, but it is an R package so it can be installed easily from within R. R Commander requires tk and gcc-fortran to be installed.\n\nTo install R Commander, run R from the command line. Then type:\n\n```\n> install.packages(\"Rcmdr\", dependencies=TRUE)\n```\n\nThis can take some time.\n\nYou can then start R Commander from within R using the library command:\n\n```\n> library(\"Rcmdr\")\n```\n\n"
    },
    {
      "title": "Rattle frontend",
      "level": 3,
      "content": "Rattle is a popular user interface to R with focus on data mining. There is no Arch Linux package available but it can be installed easily from within R.\n\nTo install Rattle, run R from the command line. Then type:\n\n```\n> install.packages(\"rattle\", dependencies=TRUE)\n```\n\nThis can take some time.\n\nYou can then start Rattle from within R using the library command:\n\n```\n> library(\"rattle\")\n> rattle()\n```\n\n"
    },
    {
      "title": "JASP",
      "level": 3,
      "content": "jasp-desktop provides a menu-driven interface for common statistical analysis using R as the backend. A Flatpak package is also available.\n\n"
    },
    {
      "title": "jamovi",
      "level": 3,
      "content": "jamovi (jamovi-gitAUR) provides a menu-driven interface for common statistical analysis using R as the backend. A Flatpak package is also available.\n\n"
    },
    {
      "title": "RKWard IDE",
      "level": 3,
      "content": "RKWard is an IDE developed by KDE, which allows for data import and browsing as well as running common statistical tests and plots. You can install rkward from the official Arch repositories.\n\n"
    },
    {
      "title": "RStudio IDE",
      "level": 3,
      "content": "RStudio is an open-source R IDE. It includes many modern conveniences such as parentheses matching, tab-completion, tool-tip help popups, and a spreadsheet-like data viewer.\n\nInstall rstudio-desktop-binAUR.\n\nThe R library path is often configured with the R_LIBS environment variable. RStudio ignores this, so the user must set R_LIBS_USER in ~/.Renviron, as documented above.\n\nRStudio uses a four-pane layout by default. However, if only the taskbar and toolbar located at the vertical top of an otherwise blank screen are visible, create with elevated privileges the following file and populate it with contents as shown below:\n\n```\n/usr/lib/qt/libexec/qt.conf\n```\n\n```\n[Paths]\nPrefix = /usr/lib/qt\nData = /usr/share/qt\nTranslations = /usr/share/qt/translations\n```\n\nRestart RStudio and observe the expected split-screen layout with four panes. See RStudio does not show any pane on Stack Overflow and https://github.com/rstudio/rstudio/issues/5961 for more information.\n\nIf, at startup, RStudio throws at you the following error:\n\n```\n/usr/lib/rstudio/resources/app/bin/rsession: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory\n```\n\nyou need to install the openssl-1.1 package.\n\n"
    },
    {
      "title": "RStudio server",
      "level": 3,
      "content": "RStudio Server enables you to provide a browser based interface to a version of R running on a remote Linux server.\n\nInstall rstudio-server-gitAUR. The two main configuration files are /etc/rstudio/rserver.conf and /etc/rstudio/rsession.conf. They are not created during the install, so you will need to create and edit them.\n\nTo start the server, please enable and start the rstudio-server.service unit file provided with the package.\n\n"
    },
    {
      "title": "Emacs Speaks Statistics",
      "level": 3,
      "content": "Emacs users can interact with R via the emacs-essAUR package.\n\n"
    },
    {
      "title": "Nvim-R and R.nvim",
      "level": 3,
      "content": "The nvim-rAUR package helps vim users to code in R, by including editing and rendering of R markdown (.Rmd) files, execution of R code in a separate pane, inspection of variables, and integrated help panes.\n\nneovim users should use R.nvim instead.\n\n"
    },
    {
      "title": "Cantor",
      "level": 3,
      "content": "cantor is a notebook application developed by KDE that includes support for R.\n\n"
    },
    {
      "title": "Visual Studio Code",
      "level": 3,
      "content": "The Visual Studio Code (code) editor has plugin support for R.\n\n"
    },
    {
      "title": "Jupyter notebook",
      "level": 3,
      "content": "Jupyter is a browser based notebook with support for many programming languages. R support can be added by installing the IRkernel.\n\n"
    },
    {
      "title": "Architect",
      "level": 3,
      "content": "Architect is an integrated development environment (IDE) that focuses specifically on the needs of the data scientist. Install architectAUR.\n\n"
    },
    {
      "title": "Radiant",
      "level": 3,
      "content": "Radiant is a platform-independent browser-based interface for business analytics in R, based on the Shiny package.\n\nInstall r-radiant.dataAUR.\n\n"
    },
    {
      "title": "Optimized packages",
      "level": 3,
      "content": "The numerical libraries that come with the r package (lapack and consequently blas) do not have multithreading capabilities. Replacing the reference blas package with an optimized BLAS can produce dramatic speed increases for many common computations in R. See these threads for an overview of the potential speed increases:\n\n- https://github.com/tmolteno/necpp/issues/18\n- http://blog.nguyenvq.com/blog/2014/11/10/optimized-r-and-python-standard-blas-vs-atlas-vs-openblas-vs-mkl/\n- https://freddie.witherden.org/pages/blas-gemm-bench/\n- https://nghiaho.com/?p=1726\n\nTo find out which numerical libraries R is using, call sessionInfo() or extSoftVersion() within an R session.\n\n"
    },
    {
      "title": "OpenBLAS",
      "level": 4,
      "content": "openblas can replace the reference blas.\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nIf you are using the regular r package from the extra repository, no further configuration is needed; R is configured to use the system BLAS and will use OpenBLAS once it is installed.\n\nIf that does not work, use the ropenblas package to compile, install and use the latest version of openblas:\n\n```\ninstall.packages(\"ropenblas\")\nropenblas::ropenblas()\n```\n\n"
    },
    {
      "title": "Intel MKL",
      "level": 4,
      "content": "If your processors are Intel, you can use the Intel Math Kernel Library. The MKL, beyond the capabilities of multithreading, also has specific optimizations for Intel processors.\n\nPlease first install the intel-oneapi-mkl, then the r-mklAUR package.\n\nNote: **R** \n\n- If you install the r-mkl package with R already installed, you will be prompted to remove R. Once r-mkl is installed, please run on R console the following command:\n\n```\n> update.packages(checkBuilt=TRUE)\n```\n\n- Here are elapsed time in seconds from computing 15 tests with default GCC build and icc/MKL build: 274.93 sec for GCC build, 21.01 sec for icc/MKL build. See this post for more information.\n\n"
    },
    {
      "title": "Intel Advisor",
      "level": 4,
      "content": "Intel Advisor delivers top application performance with C, C++ and Fortran compilers, libraries and analysis tools.\n\nInstall the intel-advisor-standaloneAUR package.\n\n"
    },
    {
      "title": "Set CRAN mirror across R sessions",
      "level": 3,
      "content": "Instead of having R ask which CRAN mirror to use every time you install or update a package, you can set the mirror in the .Rprofile file. https://cloud.r-project.org/ should be a good default for everywhere as it redirects to your closest CRAN mirror:\n\n```\n~/.Rprofile\n```\n\n```\n## Set CRAN Mirror:\nlocal({\n  r <- getOption(\"repos\")\n  r[\"CRAN\"] <- \"https://cloud.r-project.org/\"\n  options(repos = r)\n})\n```\n\n"
    },
    {
      "title": "Inhibit \"Save workspace image?\" prompt",
      "level": 3,
      "content": "Upon executing q() in R to exit, you will typically be greeted by the following prompt:\n\n```\n> q()\n```\n\n```\nSave workspace image? [y/n/c]:\n```\n\nOn face value, this may seem convenient, but using workspace images will render your code less portable. The \"Save workspace image?\" prompt may be disabled by creating a hidden environment (.env), adding a new version of the q() function to it in which the default value for the save argument has been altered to \"no\", then attaching the hidden environment. This will mask the q() function of R's base package, effectively switching off the prompt. To make this change permanent, add the following code to your .Rprofile file:\n\n```\n~/.Rprofile\n```\n\n```\n## Create hidden environment\n.env <- new.env()\n\n## Define new q() function\n.env$q <- function(save = \"no\", ...) {\n\n  quit(save = save, ...)\n\n}\n\n## Attach hidden environment\nattach(.env, warn.conflicts = FALSE)\n```\n\nThe above will make q() exit R without displaying a prompt, but it will not have an effect on quitting with Ctrl+D.\n\nIf you never want to see the save workspace prompt, it is more convenient to start R with --no-save. Add alias R=\"R --no-save\" to e.g. .bashrc to make the change persistent.\n\n"
    },
    {
      "title": "Running R from a shell",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nRun the following command to execute R code from a command-line shell:\n\n```\n$ R CMD BATCH script.R\n```\n\nThis command will return a .Rout file with results from script.R. The .Rout file will always contain a proc.time() call at the end as a benchmark. sessionInfo() can be added to the end of the R code to keep a record of packages and versions.\n\n"
    },
    {
      "title": "Installing V8 package",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nTo install the V8 R package you need the V8 engine installed on your system.\n\nTo do so, you can install the v8AUR[broken link: package not found] package (warning: compiled from source, long compilation time).\n\n"
    },
    {
      "title": "Unable to load stringi.so",
      "level": 3,
      "content": "The following error may be encountered when running R code that depends on the stringi CRAN package:\n\n```\nunable to load shared object 'R_LIBS_USER/stringi/libs/stringi.so':\nlibicui18n.so.MAJOR: cannot open shared object file: No such file or directory\n```\n\nThis often occurs following a soname bump to the library (provided by icu). stringi will need to be rebuilt in R by installing the package again.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official website The R Manuals\n- RSeek A Google Custom Search Engine for R related material.\n- R-bloggers Aggregation site for (English) blogs related to R.\n- /r/Rlanguage on Reddit There are several R related Subreddits, each one provides links to the others.\n\n- The R Manuals\n\n"
    }
  ]
}