{
  "title": "Cozy",
  "url": "https://wiki.archlinux.org/title/Cozy",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Synchronization and backup programs\n\nCozy is a personal cloud platform free, and self-hostable, written in Go (the former version, v2, was written in Node.js instead).\n\nThe platform aims at simplifying the use of a personal cloud and at allowing the users to take back ownership of their privacy. Its base applications’ features include hosting, sharing and synchronising files & pictures and collecting your data from several providers. Some other apps are on the roadmap, like a contacts manager and a calendar.\n\nThird-party apps are also available through a marketplace.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nInstall the cozy-stack package. It provides the core plus related configuration files, as well as the minimum required dependencies.\n\nYou might also want to install nsjail to run Konnectors in isolated environments, as well as an SMTP server to let Cozy send emails to your users.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Almost everything happens in /etc/cozy/cozy.yml. Some defaults are already set, while some placeholders will be replaced during configuration. You can also find an example file at /usr/share/cozy/cozy.example.yaml.\n\n"
    },
    {
      "title": "Configuring CouchDB",
      "level": 3,
      "content": "Cozy stores everything (but actual files) in a CouchDB database, and needs a CouchDB administrator to manage this database. This administrator’s credentials must be specified as part of the couchdb url setting in /etc/cozy/cozy.yml so that Cozy can use them. The following supposes you have a running CouchDB instance, if not you can follow the corresponding wiki page to setup one as single node.\n\nYou can generate the credentials with pwgen for example. Once you have them (couch_user and couch_password), edit your configuration as follow:\n\n```\n/etc/cozy/cozy.yml\n```\n\n```\ncouchdb:\n  url: http://<couch_user>:<couch_password>@localhost:5984/\n```\n\nAnd register them to CouchDB (replace <couchdb_admin> and <couchdb_password> with your CouchDB admin credentials):\n\n```\n$ curl -X PUT http://<couchdb_admin>:<couchdb_password>@127.0.0.1:5984/_node/<node_name>/_config/admins/<couch_user> -d \"\\\"<couch_password>\\\"\"\n```\n\nYou can retrieve the correct node name with:\n\n```\n$ curl -X GET http://<couchdb_admin>:<couchdb_password>@127.0.0.1:5984/_membership\n```\n\n"
    },
    {
      "title": "Configuring Cozy admin password",
      "level": 3,
      "content": "Cozy itself requires an admin password for all operations at the stack level. Create it as the cozy user:\n\n```\n[cozy]$ cozy-stack -c /dev/null config passwd /etc/cozy/cozy-admin-passphrase\n```\n\nYou will be prompted to enter a passphrase.\n\n"
    },
    {
      "title": "Creating vault keys",
      "level": 3,
      "content": "Cozy uses a vault to store some user passwords. To create the vault keys with right ownership and permissions, just proceed as the cozy user:\n\n```\n[cozy]$ cozy-stack -c /dev/null config gen-keys /etc/cozy/vault\n```\n\n"
    },
    {
      "title": "Starting the stack",
      "level": 3,
      "content": "At this point, you should start/enable the cozy-stack.service daemon.\n\nYou can check everything is right by running:\n\n```\n$ curl http://localhost:8080/version\n```\n\n"
    },
    {
      "title": "Creating an instance",
      "level": 2,
      "content": "To add an instance (you will be prompted for your Cozy admin password, you might also pass it using COZY_ADMIN_PASSWORD env var):\n\n```\n$ cozy-stack instances add <instance>.example.tld --apps home,settings,store\n```\n\nThis will output you a registration token. You can also specify an email using --email <address> at which the registration token will be sent (this require having set a smtp server in /etc/cozy/cozy.yml).\n\nYou will then need to visit https://<instance>.example.tld/?registerToken=<token>, which requires you to have setup a reverse proxy (see below).\n\n"
    },
    {
      "title": "Reverse proxying",
      "level": 3,
      "content": "As a security measure, Cozy needs to be served over HTTPS, which means it needs a reverse proxy in front of it. This can managed by either a proxying software like HAproxy or a webserver such as Apache HTTP Server, nginx or Caddy.\n\nCozy needs a full domain name for the instance (something like <instance>.example.tld) and use one domain name per application, in the form of <app>.<instance>.example.tld.\n\nThus, you have to setup your domain zone with something like this:\n\n```\n<instance> 1h IN A x.x.x.x\n   *.<instance> 1h IN CNAME <instance>\n```\n\nYou will also need SSL certificates, either a wildcard one covering *.<instance>.example.tld and <instance>.example.tld or a certificate for <instance>.example.tld with apps domains added as SAN. Currently, the list of apps is: home, banks, contacts, drive, notes, passwords, photos, settings, store and mespapiers. However, this may grow over time, so you could have to expand your certificate. Thus, getting a wildcard one is advised.\n\nBelow is an example configuration file for nginx.\n\n"
    },
    {
      "title": "nginx",
      "level": 4,
      "content": "```\n/etc/nginx/sites-available/instance.conf\n```\n\n```\n# Always redirect http:// to https://\nserver {\n    listen 80;\n    server_name .instance.example.tld instance.example.tld;\n\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name .instance.example.tld instance.example.tld; \n\n    ssl_certificate /etc/cozy/instance.crt;\n    ssl_certificate_key /etc/cozy/instance.key;\n\n    # Limit max upload size\n    client_max_body_size 1g;\n\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_http_version 1.1;\n        proxy_redirect http:// https://;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n    }\n}\n```\n\n"
    }
  ]
}