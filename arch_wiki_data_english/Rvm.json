{
  "title": "Rvm",
  "url": "https://wiki.archlinux.org/title/Rvm",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Rbenv\n- Chruby\n- Ruby\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nRVM (Ruby enVironment Manager) is a command line tool which allows us to easily install, manage and work with multiple Ruby environments from interpreters to sets of gems.\n\nThere exists a similar application that you may also want to consider: rbenv.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "The install process is very easy. You have two choices, one system-wide, another as a user. The first is for production servers, or if you are alone on your machine, you will need root privileges. The second is recommended for multiple users on the same machine (like a development test box). If you do not know which to choose then start with a single user installation.\n\nThe upstream instructions for installing RVM should just work. The install script is aware enough to tell you what packages you need to install on Arch Linux to make different rubies work. This usually involves gcc and some other stuff needed to compile ruby.\n\nAs an observation, installing RVM with gem is not recommended anymore. This article uses the recommended documentation with minor tweaks to make it work on Arch Linux.\n\n"
    },
    {
      "title": "Pre-requisites",
      "level": 3,
      "content": "Before starting, you will need to install the following packages base-devel, tar, gzip, diffutils, git and curl if not installed yet.\n\n"
    },
    {
      "title": "Single-user installation",
      "level": 3,
      "content": "For most purposes, the recommended installation method is single-user, which is a self-contained RVM installation in a user's home directory.\n\nUse the script that rvm docs recommends to install. Make sure to run this script as the user for whom you want RVM installed (i.e. your normal user that you use for development).\n\nTo check the script before running it, do:\n\n```\n$ curl -L get.rvm.io > rvm-install\n```\n\nInspect the file, and then run it with:\n\n```\n$ bash < ./rvm-install\n```\n\nNow, close out your current shell or terminal session and open a new one to set up your PATH and the rvm function. You may attempt reloading your ~/.bash_profile with the following command:\n\n```\n$ source ~/.bash_profile\n```\n\nHowever, closing out your current shell or terminal and opening a new one is the preferred way for initial installations.\n\n"
    },
    {
      "title": "Multi-user installation",
      "level": 3,
      "content": "System-wide installation is a similar procedure to the single user install. However, instead run the install script with sudo. Do not run the installer directly as root!\n\n```\n$ sudo bash -s stable\n```\n\n(to install a specific version replace stable with, for example, -- --version 1.13.0)\n\nAfter the script has finished, add yourself and your users to the 'rvm' group. (The installer does not auto-add any users to the rvm group. Admins must do this.) For each one, repeat:\n\n```\n# usermod -a -G rvm <user>\n```\n\nGroup memberships are only evaluated at login time. Log the users out, then back in. You too: close out your current shell or terminal session and open a new one. You may attempt reloading your ~/.bash_profile with the following command:\n\n```\n$ source ~/.bash_profile\n```\n\nHowever, closing out your current shell or terminal and opening a new one is the preferred way for initial installations. Alternatively, you can use the newgrp rvm command and check with id to see whether the shell has picked up the new group membership of your user\n\nRVM will be automatically configured for every user on the system (in opposite to the single-user installation); this is accomplished by loading /etc/profile.d/rvm.sh on login. Arch Linux defaults to parsing /etc/profile which contains the logic to load all files residing in the /etc/profile.d/ directory.\n\nBefore installing gems with multi-user rvm, make sure that /etc/gemrc does not have the line gem: --user-install. If it does you need to comment it out otherwise the gems will install to the wrong place.\n\nOnly use the sudo command during the install process. In multi-user configurations, any operations which require sudo access must use the rvmsudo command which preserves the RVM environment and passes this on to sudo. There are very few cases where rvmsudo is required once the core install is completed, except for when updating RVM itself. There is never a reason to use sudo post-install. rvmsudo should only be needed for updating with\n\n```\n$ rvmsudo rvm get head\n```\n\n"
    },
    {
      "title": "A cautionary action",
      "level": 4,
      "content": "In order to prevent the installation breakage by this cause, you may add this configuration to your /etc/sudoers file with command: su -c visudo (run as the root user)\n\n```\n## Cmnd alias specification\nCmnd_Alias RVM = /usr/local/rvm/rubies/ruby_interpreter/bin/gem, \\\n                 /usr/local/rvm/rubies/another_ruby_interpreter/bin/gem, \\\n                 /usr/local/rvm/bin/rvm\n\n## User privilege specification\nroot ALL=(ALL) ALL\n\n## Uncomment to allow members of group wheel to execute any command\n%wheel ALL=(ALL) ALL, !RVM\n```\n\nWhere ruby_interpreter would be —for example— ruby-1.9.2-p290.\n\n"
    },
    {
      "title": "Post Installation",
      "level": 2,
      "content": "After the installation, check everything worked with this command:\n\n```\n$ type rvm | head -n1\n```\n\nThe response should be:\n\n```\n$ rvm is a function\n```\n\nIf you receive rvm: not found, you may need to source your ~/.bash_profile (or wherever you put the line above):\n\n```\n$ . ~/.bash_profile\n```\n\nIf you receive \"rvm is hashed\", you need to source ~/.rvm/scripts/rvm in ~/.bashrc or similar:\n\n```\n$ source $HOME/.rvm/scripts/rvm\n```\n\nCheck if the rvm function is working:\n\n```\n$ rvm notes\n```\n\nFinally, see if there are any dependency requirements for your installation by running:\n\n```\n$ rvm requirements\n```\n\n(Follow the returned instructions if any.)\n\nVery important: whenever you upgrade RVM in the future, you should always run rvm notes and rvm requirements as this is usually where you will find details on any major changes and/or additional requirements to ensure your installation stays working.\n\n"
    },
    {
      "title": "Some extras",
      "level": 3,
      "content": "You may put in your ~/.bashrc the following lines to get some useful features:\n\n```\n# Display the current RVM ruby selection\nPS1=\"\\$(/usr/local/rvm/bin/rvm-prompt) $PS1\"\n\n# RVM bash completion\n[[ -r /usr/local/rvm/scripts/completion ]] && . /usr/local/rvm/scripts/completion\n```\n\nOr if you are running as a single user:\n\n```\n# Display the current RVM ruby selection\nPS1=\"\\$($HOME/.rvm/bin/rvm-prompt) $PS1\"\n\n# RVM bash completion\n[[ -r \"$HOME/.rvm/scripts/completion\" ]] && source \"$HOME/.rvm/scripts/completion\"\n```\n\n"
    },
    {
      "title": "Using RVM",
      "level": 2,
      "content": "The RVM documentation is quite comprehensive and explanatory. However, here are some RVM usage examples to get you started.\n\n"
    },
    {
      "title": "Installing environments",
      "level": 4,
      "content": "To see what Ruby environments are available to install, run:\n\n```\n$ rvm list known\n```\n\nTo install one, run:\n\n```\n$ rvm install <ruby_version>\n```\n\nFor example, to install Ruby 1.9.2 one would run the following command:\n\n```\n$ rvm install 1.9.2\n```\n\nThis should download, configure and install Ruby 1.9.2 in the place you installed RVM. For example, if you did a single user install, it will be in ~/.rvm/rubies/1.9.2.\n\nYou can define a default ruby interpreter by doing:\n\n```\n$ rvm use <ruby_version> --default\n```\n\nIf not, the default environment will be the system ruby in /usr —if you have installed one using pacman— or none.\n\n"
    },
    {
      "title": "Switching environments",
      "level": 4,
      "content": "To switch from one environment to another simply run:\n\n```\n$ rvm use <ruby_version>\n```\n\nFor example to switch to Ruby 1.8.7 one would run the following command:\n\n```\n$ rvm 1.8.7\n```\n\n(As you see, the flag use is not really necessary.)\n\nYou should get a message telling you the switch worked. It can be confirmed by running:\n\n```\n$ ruby --version\n```\n\nNote that this environment will only be used in the current shell. You can open another shell and select a different environment for that one in parallel.\n\nIn case you have set a default interpreter as explained above, you can do the switch with:\n\n```\n$ rvm default\n```\n\n"
    },
    {
      "title": "System ruby",
      "level": 4,
      "content": "If you wish the ruby interpreter that is outside RVM (i.e. the one installed in /usr by the standard Arch Linux package), you can switch to it using:\n\n```\n$ rvm system\n```\n\n"
    },
    {
      "title": "Listing environments",
      "level": 4,
      "content": "To see all installed Ruby environments, run the following command:\n\n```\n$ rvm list\n```\n\nIf you have installed a few rubies, this might generate a list like so:\n\n```\nrvm Rubies\n=> ruby-1.8.7-p249 [ x86_64 ]\n   ruby-1.9.2-head [ x86_64 ]\nSystem Ruby\n   system [ x86_64 ]\n```\n\nThe ASCII arrow indicates which environment is currently enabled. In this case, it is Ruby 1.8.7. This could be confirmed by running:\n\n```\n$ ruby --version\nruby 1.8.7 (2010-01-10 patchlevel 249) [x86_64-linux]\n```\n\n"
    },
    {
      "title": "Gemsets",
      "level": 3,
      "content": "RVM has a valued feature called gemsets which enables you to store different sets of gems in compartmentalized independent ruby setups. This means that ruby, gems and irb are all separate and self-contained from the system and each other.\n\n"
    },
    {
      "title": "Creating",
      "level": 4,
      "content": "Gemsets must be created before being used. To create a new gemset for the current ruby, do this:\n\n```\n$ rvm use <ruby_version>\n$ rvm gemset create <gemset_name>\n```\n\nAlternatively, if you prefer the shorthand syntax offered by rvm use, employ the --create option like so:\n\n```\n$ rvm use <ruby_version>@<gemset_name> --create\n```\n\nYou can also specify a default gemset for a given ruby interpreter, by doing:\n\n```\n$ rvm use <ruby_version>@<gemset_name> --default\n```\n\n"
    },
    {
      "title": "Using",
      "level": 4,
      "content": "Note: and check what's left:\n\n```\n$ gem  list --local --no-version\n```\n\nand check what's left:\n\n```\n$ gem list --local\n```\n\nTo use a gemset:\n\n```\n$ rvm gemset use <gemset_name>\n```\n\nYou can switch to a gemset as you start to use a ruby, by appending @<gemset_name> to the end of the ruby selector string:\n\n```\n$ rvm use <ruby_version>@<gemset_name>\n```\n\nWhen you install a ruby environment, it comes with two gemsets out of the box, their names are default and global. You will usually find in the latter some pre-installed common gems, while the former always starts empty.\n\nA little bit about where the default and global gemsets differ: When you do not use a gemset at all, you get the gems in the default set. If you use a specific gemset (say @testing), it will inherit gems from that ruby's @global. The global gemset is to allow you to share gems to all your gemsets.\n\n"
    },
    {
      "title": "Gems",
      "level": 4,
      "content": "Within a gemset, you can utilize usual RubyGems commands\n\n```\n$ gem install <gem>\n```\n\nto add,\n\n```\n$ gem uninstall <gem>\n```\n\nto remove gems, and\n\n```\n$ gem list\n```\n\nto view installed ones.\n\nIf you are deploying to a server, or you do not want to wait around for rdoc and ri to install for each gem, you can disable them for gem installs and updates. Just add these two lines to your ~/.gemrc or /etc/gemrc:\n\n```\ninstall: --no-document\nupdate: --no-document\n```\n\n"
    },
    {
      "title": "Listing",
      "level": 4,
      "content": "To see the name of the current gemset:\n\n```\n$ rvm gemset name\n```\n\nTo list all named gemsets for the current ruby interpreter:\n\n```\n$ rvm gemset list\n```\n\nTo list all named gemsets for all interpreters:\n\n```\n$ rvm gemset list_all\n```\n\n"
    },
    {
      "title": "Deleting",
      "level": 4,
      "content": "This action removes the current gemset:\n\n```\n$ rvm gemset use <gemset_name>\n$ rvm gemset delete <gemset_name>\n```\n\nBy default, rvm deletes gemsets from the currently selected Ruby interpreter. To delete a gemset from a different interpreter, say 1.9.2, run your command this way:\n\n```\n$ rvm 1.9.2 do gemset delete <gemset_name>\n```\n\n"
    },
    {
      "title": "Emptying",
      "level": 4,
      "content": "This action removes all gems installed in the gemset:\n\n```\n$ rvm gemset use <gemset_name>\n$ rvm gemset empty <gemset_name>\n```\n\n"
    },
    {
      "title": "Updating",
      "level": 4,
      "content": "To upgrade to the most recent release version:\n\n```\n$ rvm get latest\n```\n\nUpgrading to the latest repository source version (the most bugfixes):\n\n```\n$ rvm get head\n```\n\nRemember to use rvmsudo for multi-user setups. Update often!\n\n"
    },
    {
      "title": "Uninstalling",
      "level": 4,
      "content": "Executing\n\n```\n$ rvm implode\n```\n\nis going to wipe out the RVM installation —cleanly—.\n\n"
    },
    {
      "title": "Further reading",
      "level": 3,
      "content": "This is just a simple introduction to switching ruby versions with RVM and managing different set of gems in different environments. There is lots more that you can do with it! For more information, consult the very comprehensive RVM documentation. This page is a good place to start.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "Unfortunately, some ruby patchlevels just do not play nicely with Arch Linux, and many times RVM does not choose the latest patchlevel version to install. So, you will need to manually check on the ruby website, and force RVM to install it.\n\n"
    },
    {
      "title": "\"data definition has no type or storage class\"",
      "level": 3,
      "content": "This appears to be specific to 1.8.7, but if you get this error while compiling the following steps will fix your problem:\n\n```\n$ cd src/ruby-1.8.7-p334/ext/dl\n$ rm callback.func\n$ touch callback.func\n$ ruby mkcallback.rb >> callback.func\n$ rm cbtable.func\n$ touch cbtable.func\n$ ruby mkcbtable.rb >> cbtable.func\n```\n\nNaturally, substitute the actual build path to your source, which will be something like ~/.rvm/src/.\n\n"
    },
    {
      "title": "RVM uses wrong OpenSSL version",
      "level": 3,
      "content": "Ruby versions older than 2.4 require OpenSSL 1.0 but RVM will try to build them with OpenSSL 1.1. You know this is the case if you find this line in the ~/.rvm/log/XYZ/make.log file:\n\n```\n/usr/include/openssl/asn1_mac.h:10:2: error: #error \"This file is obsolete; please update your software.\"\n```\n\nFirst install openssl-1.0AUR if not already installed.\n\nYou can point it to the correct version like this:\n\n```\n$ rvm remove <ruby-version>\n$ PKG_CONFIG_PATH=/usr/lib/openssl-1.0/pkgconfig:/usr/lib/pkgconfig rvm install <ruby-version>\n```\n\nif the above does not work, try changing the last command to:\n\n```\nPKG_CONFIG_PATH=/usr/lib/openssl-1.0/pkgconfig \\\nCFLAGS+=\" -I/usr/include/openssl-1.0\" \\\nLDFLAGS+=\" -L/usr/lib/openssl-1.0 -lssl\" \\\nrvm install <ruby-version>\n```\n\nAlternatively you could also use RVM to install OpenSSL:\n\n```\n$ rvm pkg install openssl\n$ rvm remove X.Y.Z\n$ rvm install X.Y.Z -C --with-openssl-dir=$HOME/.rvm/usr\n```\n\n"
    },
    {
      "title": "See Also",
      "level": 2,
      "content": "- RVM project website.\n- The Perfect Rails Setup.\n\n"
    }
  ]
}