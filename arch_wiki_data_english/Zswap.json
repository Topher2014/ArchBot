{
  "title": "Zswap",
  "url": "https://wiki.archlinux.org/title/Zswap",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Kernel parameters\n- Mkinitcpio\n\nzswap is a kernel feature that provides a compressed RAM cache for swap pages. Pages which would otherwise be swapped out to disk are instead compressed and stored into a memory pool in RAM. Once the pool is full or the RAM is exhausted, the least recently used (LRU) page is decompressed and written to disk, as if it had not been intercepted. After the page has been decompressed into the swap cache, the compressed version in the pool can be freed.\n\nThe difference compared to zram is that zswap works in conjunction with a swap device while zram with created swap on top of it is a swap device in RAM that does not require a backing swap device.\n\n"
    },
    {
      "title": "Toggling zswap",
      "level": 2,
      "content": "zswap can be toggled at runtime, by writing either 1 (to enable) or 0 (to disable) to /sys/module/zswap/parameters/enabled. For example, to disable it at runtime:\n\n```\n# echo 0 > /sys/module/zswap/parameters/enabled\n```\n\nTo enable zswap permanently, add zswap.enabled=1 to your kernel parameters. To disable zswap permanently on kernels where it is enabled by default, add zswap.enabled=0 instead.\n\n"
    },
    {
      "title": "Current parameters",
      "level": 3,
      "content": "zswap has several customizable parameters. The live settings can be displayed using:\n\n```\n$ grep -r . /sys/module/zswap/parameters/\n```\n\n```\n/sys/module/zswap/parameters/same_filled_pages_enabled:Y\n/sys/module/zswap/parameters/enabled:Y\n/sys/module/zswap/parameters/max_pool_percent:20\n/sys/module/zswap/parameters/compressor:zstd\n/sys/module/zswap/parameters/non_same_filled_pages_enabled:Y\n/sys/module/zswap/parameters/zpool:zsmalloc\n/sys/module/zswap/parameters/exclusive_loads:N\n/sys/module/zswap/parameters/accept_threshold_percent:90\n```\n\nSee the zswap documentation for the description of the different parameters.\n\nFor more information about exclusive_loads parameter (which is not currently in zswap documentation), see this commentary in linux kernel source code.\n\nThe boot time load message showing the initial configuration can be retrieved with:\n\n```\n# dmesg | grep zswap:\n```\n\n```\n[    0.317569] zswap: loaded using pool zstd/zsmalloc\n```\n\n"
    },
    {
      "title": "Using sysfs",
      "level": 4,
      "content": "Each setting can be changed at runtime via the sysfs interface. For example, to change the compressor parameter:\n\n```\n# echo lz4 > /sys/module/zswap/parameters/compressor\n```\n\n"
    },
    {
      "title": "Using kernel boot parameters",
      "level": 4,
      "content": "To persist the parameter change, the corresponding option, for example zswap.compressor=lz4, must be added to the kernel boot parameter. Therefore to set permanently all the above settings, the following kernel parameters must be added:\n\n```\nzswap.enabled=1 zswap.compressor=lz4 zswap.max_pool_percent=20 zswap.zpool=zsmalloc\n```\n\nWhen changing the compression algorithm via boot parameter, one needs to ensure the corresponding compression module is loaded early during boot (refer to #Compression algorithm).\n\n"
    },
    {
      "title": "Maximum pool size",
      "level": 3,
      "content": "The memory pool is not preallocated, it is allowed to grow up to a certain limit in percentage of the total memory available, by default up to 20% of the total RAM. Once this threshold is reached, pages are evicted from the pool into the swap device. The maximum compressed pool size is controlled with the parameter max_pool_percent.\n\n"
    },
    {
      "title": "Compressed memory pool allocator",
      "level": 3,
      "content": "The zpool parameter controls the management of the compressed memory pool.\n\nIn kernels after 6.3 zsmalloc allocator was added. It is supposed to work well under low memory conditions and it saves more memory.\n\nFor older kernels, the zbud data allocator is available, which stores exactly two compressed pages into one, which limits the compression ratio to 2 or less.\n\nSimilarly, the z3fold allocator allows up to 3 compressed objects by page (with a typical compression ratio averaging around 2.7, compared with 1.7 for zbud). This allocator was previously suggested over zsmalloc because it had better performances, but as this is no longer true and because of numerous bugs, it has been deprecated and disabled by default since 6.13 (backported to 6.6 LTS in 6.6.55) and is scheduled for removal.\n\nA zpool of type zsmalloc is created by default. Use the kernel parameter zswap.zpool to select another allocator at boot time. The data allocator can also be changed at a later stage via the sysfs interface.\n\n"
    },
    {
      "title": "Compression algorithm",
      "level": 3,
      "content": "For page compression, zswap uses compressor modules provided by the kernel's cryptographic API. In official kernels the zstd compression algorithm is used by default but this can be changed with zswap.compressor= at boot time. Other options include deflate, lzo, 842, lz4 and lz4hc.\n\nThere is no issue changing the compression at runtime using sysfs but zswap starts in this case with zstd and switches at a later stage to the defined algorithm. To start zswap with another algorithm straight away, this must be set via the kernel boot parameters and the corresponding module must be loaded early by the kernel. This can be achieved by following these steps:\n\n1. Add the modules required for the chosen compressor to the mkinitcpio#MODULES array.\n1. Regenerate the initramfs.\n1. Set the compression algorithm using the zswap.compressor= kernel parameter.\n\nOn next boot, see #Current parameters to check if zswap now uses the requested compressor.\n\n"
    },
    {
      "title": "Disable writeback",
      "level": 3,
      "content": "zswap has a a per-cgroup option to disable writeback (i.e. to prevent writes to disk).\n\nSee Power management/Suspend and hibernate#Disable zswap writeback to use the swap space only for hibernation for an example use case.\n\n"
    },
    {
      "title": "Zswap statistics",
      "level": 2,
      "content": "To see zswap statistics you can run this:\n\n```\n# grep -r . /sys/kernel/debug/zswap/\n```\n\n```\n/sys/kernel/debug/zswap/same_filled_pages:26274\n/sys/kernel/debug/zswap/stored_pages:159898\n/sys/kernel/debug/zswap/pool_total_size:171565056\n/sys/kernel/debug/zswap/written_back_pages:787323\n/sys/kernel/debug/zswap/reject_compress_poor:0\n/sys/kernel/debug/zswap/reject_compress_fail:15860\n/sys/kernel/debug/zswap/reject_kmemcache_fail:0\n/sys/kernel/debug/zswap/reject_alloc_fail:0\n/sys/kernel/debug/zswap/reject_reclaim_fail:31\n/sys/kernel/debug/zswap/pool_limit_hit:0\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- zswap: How to determine whether it is compressing swap pages?.\n- IBM Support Article \"New Linux zswap compression functionality\" (benchmarks images do not load).\n- Ask Ubuntu: zram vs. zswap vs. zcache. (zcache is deprecated)\n- Arch Linux forum thread.\n- LWN.net technical article by the main developer of zswap.\n\n"
    }
  ]
}