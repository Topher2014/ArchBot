{
  "title": "Monit",
  "url": "https://wiki.archlinux.org/title/Monit",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Monit, not to be confused to M/Monit, is an AGPL3.0 licensed system and process monitoring tool. Monit can automatically restart crashed services, display temperatures from standard hardware (through lm_sensors and hard drives from smartmontools for example). Service alerts can be sent based on a wide criteria including a single occurrence or occurrences over a period of time. It can be accessed directly through the command line or ran as a web app using its integrated HTTP(S) server. This allows quick and streamlined snapshot of a given systems status.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the monit package and any software for optional testing such as lm_sensors or smartmontools. Once you have completed the configuration, be sure to enable and start monit.service.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Monit keeps a main configuration file as /etc/monitrc. You can choose to edit this file but if you wish to run scripts (such as to get hard drive temperatures or health status) you should uncomment the last directive of include /etc/monit.d/*, save /etc/monitrc and create /etc/monit.d/.\n\n"
    },
    {
      "title": "Configuration syntax",
      "level": 3,
      "content": "Monit utilizes a configuration syntax that makes it very easy to read; essentially check WHAT followed by if THING condition THEN action format. Any occurrence of if, and, with(in), has, us(ing|e), on(ly), then, for, of in the configuration file is for human readability only and are completely ignored by Monit.\n\nChecks are usually performed in cycles. This is defined at the beginning of the configuration file, for example a 30second poll is defined with:\n\n```\nset daemon 30\n```\n\nChecks with 4 cycles would therefore happen every 2 minutes\n\n"
    },
    {
      "title": "Mailserver declaration",
      "level": 3,
      "content": "```\nset mailserver smtp.myserver.com port 587\n        username \"MyUser\" password \"MyPassW0rd\"\nusing tlsv12\n```\n\n"
    },
    {
      "title": "Email notification format",
      "level": 3,
      "content": "```\nset mail-format {\n      from: Monit@MyServer\n   subject: $SERVICE $EVENT at $DATE\n   message: Monit $ACTION $SERVICE at $DATE on $HOST: $DESCRIPTION.\n}\n```\n\n"
    },
    {
      "title": "CPU, memory and swap utilization",
      "level": 3,
      "content": "```\ncheck system $HOST\n    if loadavg (15min) > 15 for 5 times within 15 cycles then alert\n    if memory usage > 80% for 4 cycles then alert\n    if swap usage > 20% for 4 cycles then alert\n```\n\n"
    },
    {
      "title": "Filesystem(s) usage",
      "level": 3,
      "content": "```\ncheck filesystem rootfs with path /\n    if space usage > 90% then alert\n\ncheck filesystem NFS with path /mnt/nfs_share\n    if space usage > 90% then alert\n```\n\n"
    },
    {
      "title": "Process monitoring",
      "level": 3,
      "content": "```\ncheck process sshd with pidfile /var/run/sshd.pid\n   start program  \"systemctl start sshd\"\n   stop program  \"systemctl stop sshd\"\n   if failed port 22 protocol ssh then restart\n```\n\n```\ncheck process smbd with pidfile /run/samba/smbd.pid\n   group samba\n   start program = \"/etc/init.d/samba start\"\n   stop  program = \"/etc/init.d/samba stop\"\n   if failed host 192.168.1.250 port 139 type TCP  then restart\n   depends on smbd_bin\n\ncheck file smbd_bin with path /usr/bin/smbd\n   group samba\n   if failed permission 755 then unmonitor\n   if failed uid root then unmonitor\n   if failed gid root then unmonitor\n```\n\n"
    },
    {
      "title": "Temperature",
      "level": 4,
      "content": "Create the file /etc/monit.d/scripts/hdtemp.sh as well as the /etc/monit.d/scripts folder if necessary.\n\n```\n/etc/monit.d/scripts/hdtemp.sh\n```\n\n```\n#!/usr/bin/sh\n HDDTP=`/usr/bin/smartctl -A /dev/sd${1} | grep Temp.*Cels | awk -F \" \" '{printf \"%d\",$10}'`\n #echo $HDDTP # for debug only\n exit $HDDTP\n```\n\n```\nmonitrc or /etc/monit.d/*.monit file\n```\n\n```\ncheck program SSD-A-Temp with path \"/etc/monit.d/scripts/hdtemp.sh a\"\n    every 5 cycles\n    if status > 40 then alert\n    group health\n\ncheck program HDD-B-Temp with path \"/etc/monit.d/scripts/hdtemp.sh b\"\n    every 5 cycles\n    if status > 40 then alert\n    group health\n```\n\nIn this example, the /etc/monit.d/scripts/hdtemp.sh script assumes your drive path is /dev/sdX where X is filled in by the letter at the end of the check declaration. A similar method is used for the SMART health status in the next example.\n\n"
    },
    {
      "title": "SMART health status",
      "level": 4,
      "content": "```\n/etc/monit.d/scripts/hdhealth.sh\n```\n\n```\n#!/usr/bin/sh\n STATUS=`/usr/bin/smartctl -H /dev/sd${1} | grep overall-health | awk 'match($0,\"result:\"){print substr($0,RSTART+8,6)}'`\n if [ \"$STATUS\" = \"PASSED\" ] \n then\n     # 1 implies PASSED\n     TP=1\n else \n     # 2 implies FAILED\n     TP=2\n fi\n #echo $TP # for debug only\n exit $TP\n```\n\n```\nmonitrc or /etc/monit.d/*.monit file\n```\n\n```\ncheck program SSD-A-Health with path \"/etc/monit.d/scripts/hdhealth.sh a\"\n    every 120 cycles\n    if status != 1 then alert\n    group health\n\ncheck program HDD-B-Health with path \"/etc/monit.d/scripts/hdhealth.sh b\"\n    every 120 cycles\n    if status != 1 then alert\n    group health\n```\n\n"
    },
    {
      "title": "Alert recipients: global or subsystem based",
      "level": 2,
      "content": "Alerts can be set globally, where a given user / email address is alerted for any alert condition; or you can set an alert recipient for each type of check (eg network alerts go to recipient A; process alerts go to recipient B). You can set as many global or subsystem recipients as you like, just make multiple declarations.\n\n"
    },
    {
      "title": "Global alerts",
      "level": 3,
      "content": "Global alerts are set outside of any subsystem checks; for ease of reading they should be set in the same location as the mailserver declaration.\n\n```\nSET ALERT email@domain\n```\n\n"
    },
    {
      "title": "Subsystem alerts",
      "level": 3,
      "content": "Subsystem alerts are set very similarly to global alerts except they lack the SET flag.\n\n```\nALERT email@domain\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official Documentation\n- Monit Wiki configuration examples\n\n"
    }
  ]
}