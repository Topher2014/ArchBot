{
  "title": "MPD - Music Player Daemon",
  "url": "https://wiki.archlinux.org/title/MPD_-_Music_Player_Daemon",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- MPD/Tips and Tricks\n- MPD/Troubleshooting\n\nMPD (music player daemon) is an audio player that has a server-client architecture. It plays audio files, organizes playlists and maintains a music database, all while using very few resources. In order to interface with it, a separate client is needed.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the mpd package, or mpd-gitAUR for the development version.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "MPD is able to run in #Per-user configuration or #System-wide configuration mode (settings apply to all users). Also it is possible to run multiple instances of MPD in a #Multi-MPD setup. The way of setting up MPD depends on the way it is intended to be used: a local per-user configuration is easier to set up and may prove more adapted on a desktop system. The system-wide setup might be better suited for a always-on audio server with multiple users but a shared MPD instance.\n\nIn order for MPD to be able to playback audio, ALSA, optionally with PulseAudio or PipeWire, must be set up and working. The #Audio configuration section thereafter describes the parameters needed for ALSA, PulseAudio or PipeWire.\n\nMPD is configured in the file mpd.conf(5) which can be located in various paths depending on the setup chosen (system-wide or per-user). In short, the two common locations used are:\n\n1. ~/.config/mpd/mpd.conf in per-user configuration mode, this is the first location searched,\n1. /etc/mpd.conf in system-wide configuration.\n\nThese are some of the most commonly used configuration options:\n\n- pid_file - The file where MPD stores its process ID\n- db_file - The music database\n- state_file - MPD's current state is noted here\n- playlist_directory - The directory where playlists are saved into\n- music_directory - The directory that MPD scans for music\n- sticker_file - The sticker database\n\n"
    },
    {
      "title": "Per-user configuration",
      "level": 3,
      "content": "MPD can be configured per-user. Running it as a normal user has the benefits of:\n\n- Regrouping into one single directory ~/.config/mpd/ (or any other directory under $HOME) all the MPD configuration files.\n- Avoiding unforeseen directory and file permission errors.\n\n"
    },
    {
      "title": "Configure the location of files and directories",
      "level": 4,
      "content": "In user mode, the configuration is read from $XDG_CONFIG_HOME/mpd/mpd.conf. We will assume here $XDG_CONFIG_HOME equals the default of ~/.config.\n\nTo build the user configuration, the MPD configuration example included in the package is a good starting point, copy it using the following lines:\n\n```\n$ mkdir -p ~/.config/mpd\n$ cp /usr/share/doc/mpd/mpdconf.example ~/.config/mpd/mpd.conf\n```\n\nA good practice is to use this newly created ~/.config/mpd/ directory to store, together with the configuration file, other MPD related files like the database or the playlists. The user must have read write access to this directory.\n\nThen edit the configuration file in order to specify the required and optional files and directories:\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\n# Recommended location for database\ndb_file            \"~/.config/mpd/database\"\n\n# If running mpd using systemd, delete this line to log directly to systemd.\nlog_file           \"syslog\"\n\n# The music directory is by default the XDG directory, uncomment to amend and choose a different directory\n#music_directory    \"~/music\"\n\n# Uncomment to refresh the database whenever files in the music_directory are changed\n#auto_update \"yes\"\n\n# Uncomment to enable the functionalities\n#playlist_directory \"~/.config/mpd/playlists\"\n#pid_file           \"~/.config/mpd/pid\"\n#state_file         \"~/.local/state/mpd/state\"\n#sticker_file       \"~/.config/mpd/sticker.sql\"\n```\n\nIf playlists are enabled in the configuration, the specified playlist directory must be created:\n\n```\n$ mkdir ~/.config/mpd/playlists\n```\n\nIf state_file is set, the specified directory must be created:\n\n```\n$ mkdir -p ~/.local/state/mpd\n```\n\nMPD can now be started (an optional custom location for the configuration file can be specified):\n\n```\n$ mpd [config_file]\n```\n\nIn order to build the database file, MPD must scan into the music_directory defined above. To request this task, one of the MPD clients must be used. For example with mpc the command is:\n\n```\n$ mpc update\n```\n\nor alternatively one can set the option auto_update to \"yes\" in the configuration to refresh the database whenever files are changed in music_directory.\n\n"
    },
    {
      "title": "Audio configuration",
      "level": 4,
      "content": "If ALSA is used, autodetection of the default device should work out of the box without any particular setting. If not, the syntax for ALSA audio output definition is provided thereafter; the required name parameter specifies a unique name for the audio output. The exact device as displayed using aplay --list-pcm from the package alsa-utils can optionally be indicated with the device option.\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\naudio_output {\n        type          \"alsa\"\n        name          \"ALSA sound card\"\n        # Optional\n        #device        \"iec958:CARD=Intel,DEV=0\"\n        #mixer_control \"PCM\"\n}\n```\n\nUsers of PulseAudio will need to make the following modification:\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\naudio_output {\n        type            \"pulse\"\n        name            \"pulse audio\"\n}\n```\n\nOutput with PipeWire can also be configured:\n\n```\n~/.config/mpd/mpd.conf\n```\n\n```\naudio_output {\n        type            \"pipewire\"\n        name            \"PipeWire Sound Server\"\n}\n```\n\n"
    },
    {
      "title": "Autostart with systemd",
      "level": 4,
      "content": "The mpd package provides a user service file. The service starts the process as user, there is no need to change permission nor use the user and group variables in the MPD configuration file.\n\nStart/enable the user unit mpd.service (i.e. with the --user flag).\n\n"
    },
    {
      "title": "Autostart on tty login",
      "level": 4,
      "content": "To start MPD on login add the following to ~/.profile or another autostart file:\n\n```\n# MPD daemon start (if no other user instance exists)\n[Â ! -s ~/.config/mpd/pid ] && mpd\n```\n\n"
    },
    {
      "title": "Scripted configuration",
      "level": 4,
      "content": "The mpd-configure tool creates a MPD configuration optimized for bit perfect audio playback, without any resampling or conversion, using the ALSA interface hardware address (hw:x,y).\n\n"
    },
    {
      "title": "System-wide configuration",
      "level": 3,
      "content": "The default /etc/mpd.conf keeps the setup in /var/lib/mpd which is assigned to user as well as primary group MPD.\n\n"
    },
    {
      "title": "Music directory",
      "level": 4,
      "content": "The music directory is defined by the option music_directory in the configuration file /etc/mpd.conf.\n\nMPD needs to have execute permission on all parent directories of the music collection and also read access to all directories containing music files. This may conflict with the default configuration of the user directory, like ~/Music, where the music is stored.\n\nWhile there are several solutions to this issue, one of these should be most practical:\n\n- Switch to the #Per-user configuration mode instead\n- Add the mpd user to the user's group and grant group execute permission to the user directory. This way the mpd user has permission to open the user directory:\n\n```\n# gpasswd -a mpd user_group_name\n$ chmod 710 /home/user_directory\n```\n\n- Store the music collection in a different path, either: by moving it entirely, with a bind mount, or with Btrfs#Subvolumes (you should make this change persistent with an entry to /etc/fstab ).\n\n- by moving it entirely,\n- with a bind mount,\n- or with Btrfs#Subvolumes (you should make this change persistent with an entry to /etc/fstab ).\n\nThe MPD configuration file must define only one music directory. If the music collection is contained under multiple directories, create symbolic links under the main music directory in /var/lib/mpd. Remember to set permissions accordingly on the directories being linked.\n\nTo exclude a file - or files - from the update, create a file called .mpdignore in its parent directory. Each line of that file may contain a list of shell wildcards. Matching files in the current directory and all subdirectories are then excluded from subsequent updates.\n\n"
    },
    {
      "title": "Start with systemd",
      "level": 4,
      "content": "MPD can be controlled with mpd.service using systemd. The first startup can take some time as MPD will scan your music directory.\n\nTest everything by starting a client application (ncmpc is a light and easy to use client), and play some music!\n\nmpd provides a mpd.socket unit. If mpd.socket is enabled (and mpd.service is disabled), systemd will not start MPD immediately, it will just listen to the appropriate sockets. Then, whenever an MPD client attempts to connect to one of these sockets, systemd will start mpd.service and transparently hand over control of these ports to the MPD process.\n\nIf you prefer to listen to different UNIX sockets or network ports (even multiple sockets of each type), or if you prefer not to listen to network ports at all, edit the mpd.socket unit appropriately and modify /etc/mpd.conf to match the configuration (see mpd.conf(5) for details).\n\n"
    },
    {
      "title": "User id startup workflow",
      "level": 4,
      "content": "MPD should never run as root; you may use the user option in the configuration to make MPD change its user id after initialization. Do not use this option if you start MPD as an unprivileged user. To describe how MPD drops its superuser privileges and switch to those of the user set in the configuration, the steps of a normal MPD startup are listed thereafter:\n\n1. Since MPD is started as root by systemd, it first reads the /etc/mpd.conf file.\n1. MPD reads the user variable in the configuration, and changes from root to this user.\n1. MPD then reads the rest of the configuration file and configures itself accordingly. Uses of ~ in the configuration file points to the home user's directory, and not root's directory.\n\n"
    },
    {
      "title": "Running an Icecast server",
      "level": 4,
      "content": "For a second MPD (e.g. with Icecast output to share music over the network) using the same music and playlist as the one above, simply copy the above configuration file and make a new file (e.g., /home/username/.mpd/config-icecast), and only change the log_file, error_file, pid_file, and state_file parameters (e.g. mpd-icecast.log, mpd-icecast.error, and so on). Using the same directory paths for the music and playlist directories would ensure that this second MPD uses the same music collection as the first one, e.g. creating and editing a playlist under the first daemon would affect the second daemon as well. Users do not have to create the same playlists all over again for the second daemon. Call this second daemon the same way from ~/.xinitrc above - but be sure to have a different port number, avoiding a conflict with the first MPD daemon.\n\n"
    },
    {
      "title": "Satellite setup",
      "level": 4,
      "content": "The method described in #Running an Icecast server works, but at least in theory could lead to issues with the database, when both MPD instances try to write to the same database file concurrently. MPD has a satellite mode where one instance can receive the database from an already running MPD instance.\n\nIn your config-icecast add this, where host and port reflect your primary MPD server:\n\n```\ndatabase {\n    plugin \"proxy\"\n    host \"localhost\"\n    port \"6600\"\n}\n```\n\n"
    },
    {
      "title": "Clients",
      "level": 2,
      "content": "A separate client is needed to control MPD. See a long list of clients at the mpd website. Popular options are:\n\n"
    },
    {
      "title": "Command-line",
      "level": 3,
      "content": "- mpc â Command line user interface for MPD server written in C.\n\n"
    },
    {
      "title": "Console",
      "level": 3,
      "content": "- clerk â MPD client using Rofi.\n\n- gomp â MPD client inspired by ncmpcpp with builtin cover-art view and LastFM integration.\n\n- inori â MPD client with a folding library view and effective searching.\n\n- mmtc â Minimal mpd terminal client that aims to be simple yet highly configurable.\n\n- ncmpc â Ncurses client for MPD written in C++.\n\n- ncmpcpp â Almost exact clone of ncmpc, written in C++ with some additional features (tag editor, search engine).\n\n- ncmpy â Curses-based MPD client written in Python.\n\n- nncmpp â Yet another MPD client. It is in effect a simplified TUI version of Sonata.\n\n- pms â Highly configurable and accessible ncurses client written in Go.\n\n- rmpc â A configurable MPD client inspired by ncmpcpp and ranger with album art support via various graphics protocols.\n\n- vimpc â Ncurses based MPD client with vi-like key bindings.\n\n"
    },
    {
      "title": "Graphical",
      "level": 3,
      "content": "- Ario â Very feature-rich GTK3 GUI client for MPD, inspired by Rhythmbox.\n\n- Cantata â Unmaintained high-feature, Qt5 client for MPD with very configurable interface.\n\n- CoverGrid â GTK3 GUI client focusing on albums instead of single tracks.\n\n- Plattenalbum â A modern and small GTK4 MPD client written in python.\n\n- QMPDClient â Qt5 GUI client.\n\n- Quimup â Simple Qt5 frontend for MPD written in C++.\n\n- RompÐ¯ â Web client for MPD.\n\n- SkyMPC â Simple MPD client, powered by Qt5.\n\n- Sonata â Elegant Python GTK client.\n\n- Xfce MPD Panel Plugin â MPD plugin for Xfce4 panel.\n\n- Xfmpc â Graphical GTK MPD client focusing on low footprint.\n\n- ympd â Standalone MPD Web GUI written in C, utilizing Websockets and Bootstrap/JS.\n\n- Ymuse â Easy, functional and snappy GTK front-end (client) for Music Player Daemon written in Go.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- MPD Forum\n- MPD User Manual\n- MPD Wikipedia article\n- MPD GitHub repository\n- mopidy is an alternative to MPD written in Python. Note it is not a complete MPD replacement, its advantage is that it has plug-ins for playing music from cloud services like Spotify, SoundCloud, and Google Play Music.\n\n"
    }
  ]
}