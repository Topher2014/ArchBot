{
  "title": "Fscrypt",
  "url": "https://wiki.archlinux.org/title/Fscrypt",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Data-at-rest encryption\n- Ext4\n- F2FS\n\nfscrypt is a tool for managing the native file encryption support of the ext4, F2FS, UBIFS, CephFS and Lustre file systems.\n\nThe underlying encryption mechanism in the kernel, which is integrated into the above file systems, is also sometimes called \"fscrypt\". To avoid ambiguity, this article calls the kernel feature \"Linux native file encryption\". With Linux native file encryption, different directories can use different encryption keys. In an encrypted directory, all file contents, filenames, and symlinks are encrypted. All subdirectories are encrypted too. Non-filename metadata, such as timestamps, the sizes and number of files, and extended attributes, is not encrypted.\n\nAs this article assumes the use of the fscrypt tool (and optionally pam_fscrypt, which goes along with fscrypt), most of it is not applicable to other userspace tools that can set up Linux native file encryption, for example systemd-homed.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Alternatives to consider",
      "level": 2,
      "content": "To protect an entire file system with one password, block device encryption with dm-crypt (LUKS) is generally a better option, as it ensures that all files on the file system are encrypted, and also that all file system metadata is encrypted. fscrypt is most useful to encrypt specific directories, or to enable different encrypted directories to be unlockable independentlyâ€”for example, per-user encrypted home directories.\n\nCompared to eCryptfs, the Linux native file encryption controlled by fscrypt does not use file system stacking, which makes it more memory-efficient. It also uses more up-to-date cryptography and does not require root privileges to set up, which avoids the need for setuid binaries. eCryptfs is also no longer being actively developed, and its largest users (Ubuntu and Chrome OS) have migrated to other solutions.\n\nSee data-at-rest encryption for more information about other encryption solutions, and about what encryption does and does not do.\n\n- It is possible to use fscrypt in combination with dm-crypt, with each encryption layer serving a different purpose. For example, the file system itself could be protected by dm-crypt using a less secure method, like a TPM tied into \"secure boot\" or a password known to all the system's users, while each user's home directory could also be protected by fscrypt using a password known only to that user.\n- The e4crypt tool from e2fsprogs can be used as an alternative to the fscrypt tool. However, this is not recommended since e4crypt is missing many basic features and is no longer being actively developed.\n- f2fscrypt from f2fs-tools is just a copy of e4crypt and likewise is not recommended.\n\n"
    },
    {
      "title": "Kernel",
      "level": 3,
      "content": "All officially supported kernels support native file encryption on ext4, F2FS, UBIFS and CephFS.\n\nUsers of custom kernels, make sure CONFIG_FS_ENCRYPTION=y is set.\n\n"
    },
    {
      "title": "ext4",
      "level": 4,
      "content": "For ext4, the file system on which encryption is to be used must have the encrypt feature flag enabled. To enable it, run:\n\n```\n# tune2fs -O encrypt /dev/device\n```\n\n"
    },
    {
      "title": "F2FS",
      "level": 4,
      "content": "For F2FS, use mkfs.f2fs -O encrypt when creating the file system or fsck.f2fs -O encrypt at a later time.\n\n"
    },
    {
      "title": "Userspace tool",
      "level": 3,
      "content": "Install the fscrypt package. Then run:\n\n```\n# fscrypt setup\n```\n\nThis creates the file /etc/fscrypt.conf and the directory /.fscrypt.\n\nThen, if the file system on which encryption is to be used is not the root file system, also run:\n\n```\n# fscrypt setup mountpoint\n```\n\nwhere mountpoint is where the file system is mounted, e.g. /home.\n\nThis creates the directory mountpoint/.fscrypt to store fscrypt policies and protectors.\n\n"
    },
    {
      "title": "PAM module",
      "level": 3,
      "content": "To unlock login passphrase-protected directories automatically at login, and to keep login passphrase-protected directories in sync with changes to the login passphrase, adjust the system PAM configuration to enable pam_fscrypt.\n\nAppend the following line to the auth section in /etc/pam.d/system-login:\n\n```\n/etc/pam.d/system-login\n```\n\n```\nauth       optional   pam_fscrypt.so\n```\n\nInsert the following lines before session include system-auth in the session section:\n\n```\n/etc/pam.d/system-login\n```\n\n```\nsession    [success=1 default=ignore]  pam_succeed_if.so  service = systemd-user quiet \nsession    optional                    pam_fscrypt.so\n```\n\nFinally, append the following line to /etc/pam.d/passwd:\n\n```\n/etc/pam.d/passwd\n```\n\n```\npassword    optional    pam_fscrypt.so\n```\n\n"
    },
    {
      "title": "Encrypt a directory",
      "level": 2,
      "content": "To encrypt an empty directory, run:\n\n```\n$ fscrypt encrypt dir\n```\n\nFollow the prompts to create or choose a \"protector\". A protector is the secret or information that protects the directory's encryption key. The types of protectors include:\n\n- \"custom_passphrase\". This is exactly what it sounds like, a user defined passphrase.\n- \"pam_passphrase\". This is the login passphrase for a particular user. Directories using this type of protector will be automatically unlocked by pam_fscrypt (if enabled) when that user logs in. Be sure to follow the security recommendations before using this type of protector.\n\nIn both cases, the passphrase can be changed later, or the directory can be re-protected with another method.\n\nExample for custom passphrase:\n\n```\n$ fscrypt encrypt private/\n```\n\n```\nShould we create a new protector? [y/N] y\nYour data can be protected with one of the following sources:\n1 - Your login passphrase (pam_passphrase)\n2 - A custom passphrase (custom_passphrase)\n3 - A raw 256-bit key (raw_key)\nEnter the source number for the new protector [2 - custom_passphrase]: 2\nEnter a name for the new protector: Super Secret\nEnter custom passphrase for protector \"Super Secret\":\nConfirm passphrase:\n\"private/\" is now encrypted, unlocked, and ready for use.\n```\n\nExample for PAM passphrase:\n\n```\n$ fscrypt encrypt private/\n```\n\n```\nShould we create a new protector? [y/N] y\nYour data can be protected with one of the following sources:\n1 - Your login passphrase (pam_passphrase)\n2 - A custom passphrase (custom_passphrase)\n3 - A raw 256-bit key (raw_key)\nEnter the source number for the new protector [2 - custom_passphrase]: 1\nEnter login passphrase for testuser:\n\"private/\" is now encrypted, unlocked, and ready for use.\n```\n\n```\n$ mkdir new_dir\n$ fscrypt encrypt new_dir\n$ cp -a -T old_dir new_dir\n$ find old_dir -type f -print0 | xargs -0 shred -n1 --remove=unlink\n$ rm -rf old_dir\n```\n\n"
    },
    {
      "title": "Lock/unlock a directory",
      "level": 2,
      "content": "To unlock an encrypted directory, run:\n\n```\n$ fscrypt unlock dir\n```\n\nfscrypt will prompt for the passphrase.\n\nTo lock an encrypted directory, run:\n\n```\n$ fscrypt lock dir\n```\n\n"
    },
    {
      "title": "Encrypt a home directory",
      "level": 2,
      "content": "- Login protectors are only as secure as the system's passphrase hashing in /etc/shadow. Before using a login protector, be sure to follow the security recommendations.\n- If a user's home directory is encrypted, SSH for that user may not work until their home directory has been unlocked.\n\nTo encrypt a user's home directory, first ensure that all preparations have been completed, including enabling pam_fscrypt.\n\nThen, create a new encrypted directory for the user:\n\n```\n# mkdir /home/newhome\n# chown user:user /home/newhome \n# fscrypt encrypt /home/newhome --user=user\n```\n\nSelect the option to protect the directory with the user's login passphrase.\n\nThen copy the contents of the user's old home directory into the encrypted directory:\n\n```\n# cp -a -T /home/user /home/newhome\n```\n\nIf the cp method was used, check whether the directory is being automatically unlocked on login before actually switching to using it. The simplest way to do this is to reboot and log in as that user. Afterwards, run:\n\n```\n$ fscrypt status /home/newhome\n```\n\n```\n\"/home/newhome\" is encrypted with fscrypt.\n\nPolicy:   d80f252996aae181204403043b0ada25\nOptions:  padding:32 contents:AES_256_XTS filenames:AES_256_CTS policy_version:2\nUnlocked: Yes\n\nProtected with 1 protector:\nPROTECTOR         LINKED  DESCRIPTION\n5952c84ebaf0f98d  No      login protector for testuser\n```\n\nIf it says Unlocked: No instead, then something is wrong with the PAM configuration, or the incorrect type of protector was selected.\n\nOtherwise, replace the home directory:\n\n```\n# mv /home/user /home/oldhome\n# mv /home/newhome /home/user\n# reboot\n```\n\nIf everything is working as expected, delete the old home directory:\n\n```\n# find /home/oldhome -type f -print0 | xargs -0 shred -n1 --remove=unlink\n# rm -rf /home/oldhome\n```\n\n"
    },
    {
      "title": "Encryption within Linux Containers (lxc)",
      "level": 2,
      "content": "Support to use fscrypt inside Linux Containers (lxc), or more generally in mount_namespaces(7) where the file system's root directory is not visible has been added in v0.2.8.\n\n"
    },
    {
      "title": "Lock directory when container is stopped",
      "level": 3,
      "content": "A systemd/User unit within the container can lock an encrypted directory when the container is stopped:\n\n```\n~/.config/systemd/user/lock-directory.service\n```\n\n```\n[Unit]\nDescription=lock encrypted directory on shutdown\nDefaultDependencies=no\nBefore=shutdown.target\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c \"/usr/bin/fscrypt lock /home/facade/target\"\nTimeoutStartSec=0\n\n[Install]\nWantedBy=shutdown.target\n```\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "See https://github.com/google/fscrypt/blob/master/README.md#troubleshooting for solutions to some common problems and also the open issues on Github.\n\n"
    },
    {
      "title": "ext4: Encrypted files outside fscrypt encrypted directory",
      "level": 3,
      "content": "Encrypted regular files from an unlocked fscrypt can be moved into an unencrypted directory. While possible, it is not well supported, normally not desired and could led to later issues: It may not be noticed by the user, unless the according protector is locked or worse: deleted. https://github.com/google/fscrypt/issues/393\n\nIf you want to decrypt files permanently, copy them from the unlocked fscrypt directory into a regular unencrypted directory.[1]\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Documentation for the fscrypt tool\n- Documentation for Linux native file encryption\n- The design document for the fscrypt tool\n\n"
    }
  ]
}