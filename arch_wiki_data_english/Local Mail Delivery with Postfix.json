{
  "title": "Local Mail Delivery with Postfix",
  "url": "https://wiki.archlinux.org/title/Local_Mail_Delivery_with_Postfix",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Postfix with SASL\n- Virtual user mail system\n- OpenDMARC\n- OpenDKIM\n\nPostfix is a mail transfer agent that according to its website:\n\nThis article builds upon Mail server. The goal of this article is to setup Postfix and explain what the basic configuration files do. There are instructions for setting up local system user-only delivery and a link to a guide for virtual user delivery.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the postfix package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "See Postfix Basic Configuration. Configuration files are in /etc/postfix by default. The two most important files are:\n\n- master.cf, defines what Postfix services are enabled and how clients connect to them, see master(5)\n- main.cf, the main configuration file, see postconf(5)\n\nConfiguration changes need a postfix.service reload or run postfix reload in order to take effect.\n\n"
    },
    {
      "title": "Aliases",
      "level": 3,
      "content": "See aliases(5).\n\nYou can specify aliases (also known as forwarders) in /etc/postfix/aliases.\n\nYou should map all mail addressed to root to another account since it is not a good idea to read mail as root.\n\nUncomment the following line, and change you to a real account.\n\n```\nroot: you\n```\n\nOnce you have finished editing /etc/postfix/aliases you must run the postalias command:\n\n```\n# postalias /etc/postfix/aliases\n```\n\nFor later changes you can use:\n\n```\n# newaliases\n```\n\n```\n/root/.forward\n```\n\n```\nuser@localhost\n```\n\n"
    },
    {
      "title": "Local mail",
      "level": 3,
      "content": "To only deliver mail to local system users (that are in /etc/passwd) update /etc/postfix/main.cf to reflect the following configuration. Uncomment, change, or add the following lines:\n\n```\nmyhostname = localhost\nmydomain = localdomain\nmydestination = $myhostname, localhost.$mydomain, localhost\ninet_interfaces = $myhostname, localhost\nmynetworks_style = host\ndefault_transport = error: outside mail is not deliverable\n```\n\nAll other settings may remain unchanged. After setting up the above configuration file, you may wish to set up some #Aliases and then #Start Postfix.\n\n"
    },
    {
      "title": "Virtual mail",
      "level": 3,
      "content": "Virtual mail is mail that does not map to a user account (/etc/passwd).\n\n"
    },
    {
      "title": "Virtual aliases",
      "level": 4,
      "content": "Virtual aliases are used to rewrite the destination addresses for all local, virtual and remote destinations. This can be used to rewrite the destination address for a single recipient, or an entire domain.\n\nSet up a virtual alias for a single address.\n\nEnable the virtual alias table:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nvirtual_alias_maps = lmdb:/etc/postfix/virtual\n```\n\nPopulate the virtual alias table:\n\n```\n/etc/postfix/virtual\n```\n\n```\nuser@domain address\n```\n\nRebuild the index file:\n\n```\n# postmap /etc/postfix/virtual\n```\n\nRestart postfix.service.\n\n"
    },
    {
      "title": "Check configuration",
      "level": 3,
      "content": "Run the postfix check command. It should output anything that you might have done wrong in a configuration file.\n\nTo see all of your configs, type postconf. To see how you differ from the defaults, try postconf -n.\n\n"
    },
    {
      "title": "Start Postfix",
      "level": 2,
      "content": "Start/enable the postfix.service.\n\n"
    },
    {
      "title": "TLS",
      "level": 2,
      "content": "For more information, see Postfix TLS Support.\n\n"
    },
    {
      "title": "Secure SMTP (sending)",
      "level": 3,
      "content": "By default, Postfix/sendmail will not send email encrypted to other SMTP servers. To use TLS when available, add the following line to main.cf:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsmtp_tls_security_level = may\n```\n\nTo enforce TLS (and fail when the remote server does not support it), change may to encrypt. Note, however, that this violates RFC:2487 if the SMTP server is publicly referenced.\n\n"
    },
    {
      "title": "Secure SMTP (receiving)",
      "level": 3,
      "content": "By default, Postfix will not accept secure mail.\n\nYou need to obtain a certificate. Point Postfix to your TLS certificates by adding the following lines to main.cf:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsmtpd_tls_security_level = may\nsmtpd_use_tls = yes\nsmtpd_tls_cert_file = /path/to/cert.pem\nsmtpd_tls_key_file = /path/to/key.pem\n```\n\nThere are two ways to accept secure mail. STARTTLS over SMTP (port 587 (also called \"submission\" port)) and SMTPS (port 465 (also called \"submissions\" port). The latter was previously deprecated but was reinstated by RFC:8314.\n\nTo enable STARTTLS over SMTP (port 587), uncomment the following lines in master.cf:\n\n```\n/etc/postfix/master.cf\n```\n\n```\nsubmission inet n       -       n       -       -       smtpd\n  -o syslog_name=postfix/submission\n  -o smtpd_tls_security_level=encrypt\n  -o smtpd_sasl_auth_enable=yes\n  -o smtpd_tls_auth_only=yes\n  -o smtpd_reject_unlisted_recipient=no\n#  -o smtpd_client_restrictions=$mua_client_restrictions\n#  -o smtpd_helo_restrictions=$mua_helo_restrictions\n#  -o smtpd_sender_restrictions=$mua_sender_restrictions\n  -o smtpd_relay_restrictions=\n  -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject\n  -o milter_macro_daemon_name=ORIGINATING\n```\n\nThe smtpd_*_restrictions options remain commented because $mua_*_restrictions are not defined in main.cf by default. If you do decide to set any of $mua_*_restrictions, uncomment those lines too.\n\nTo enable SMTPS (port 465), uncomment the following lines in master.cf:\n\n```\n/etc/postfix/master.cf\n```\n\n```\nsubmissions     inet  n       -       n       -       -       smtpd\n  -o syslog_name=postfix/smtps\n  -o smtpd_tls_wrappermode=yes\n  -o smtpd_sasl_auth_enable=yes\n  -o smtpd_reject_unlisted_recipient=no\n#  -o smtpd_client_restrictions=$mua_client_restrictions\n#  -o smtpd_helo_restrictions=$mua_helo_restrictions\n#  -o smtpd_sender_restrictions=$mua_sender_restrictions\n  -o smtpd_relay_restrictions=\n  -o smtpd_relay_restrictions=permit_sasl_authenticated,reject\n  -o milter_macro_daemon_name=ORIGINATING\n```\n\nThe rationale surrounding the $smtpd_*_restrictions lines is the same as above.\n\n"
    },
    {
      "title": "Post-quantum TLS",
      "level": 3,
      "content": "As of Postfix 3.10 and OpenSSL 3.5.0, it is possible to offer post-quantum key exchanges for TLS. In order to do this, OpenSSL needs to be provided with a config file, as Postfix does not support the new keyshare syntax itself.\n\nTo enable this functionality, add the following to your configuration:\n\n```\n/etc/postfix/main.cf\n```\n\n```\ntls_eecdh_auto_curves =\ntls_ffdhe_auto_groups =\ntls_config_file = ${config_directory}/openssl.cnf\ntls_config_name = postfix\n```\n\nThen you need to add an appropriate OpenSSL config:\n\n```\n/etc/postfix/openssl.cnf\n```\n\n```\npostfix = postfix_settings\n[postfix_settings]\nssl_conf = postfix_ssl_settings\n[postfix_ssl_settings]\nsystem_default = baseline_postfix_settings\n[baseline_postfix_settings]\nGroups = *X25519MLKEM768 / *X25519:X448 / P-256:P-384:P-521:ffdhe2048:ffdhe3072\n```\n\nThis enables the new post-quantum secure X25519MLKEM768 as well as the previous defaults for traditional, non-quantum safe curves.\n\n"
    },
    {
      "title": "Blacklist incoming emails",
      "level": 3,
      "content": "Manually blacklisting incoming emails by sender address can easily be done with Postfix.\n\nCreate and open /etc/postfix/blacklist_incoming file and append sender email address:\n\n```\nuser@example.com REJECT\n```\n\nThen use the postmap command to create a database:\n\n```\n# postmap lmdb:blacklist_incoming\n```\n\nAdd the following code before the first permit rule in main.cf:\n\n```\nsmtpd_recipient_restrictions = check_sender_access lmdb:/etc/postfix/blacklist_incoming\n```\n\nFinally restart postfix.service.\n\n"
    },
    {
      "title": "Hide the sender's IP and user agent in the Received header",
      "level": 3,
      "content": "This is a privacy concern mostly, if you use Thunderbird and send an email. The received header will contain your LAN and WAN IP and info about the email client you used. (Original source: AskUbuntu) What we want to do is remove the Received header from outgoing emails. This can be done by the following steps:\n\nAdd the following line to main.cf:\n\n```\nsmtp_header_checks = regexp:/etc/postfix/smtp_header_checks\n```\n\nCreate /etc/postfix/smtp_header_checks with this content:\n\n```\n/^Received: .*/     IGNORE\n/^User-Agent: .*/   IGNORE\n```\n\nFinally, restart postfix.service.\n\n"
    },
    {
      "title": "Postfix in a chroot jail",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nPostfix is not put in a chroot jail by default. The Postfix documentation [1] provides details about how to accomplish such a jail. The steps are outlined below and are based on the chroot-setup script provided in the Postfix source code.\n\nFirst, go into the master.cf file in the directory /etc/postfix and change all the chroot entries to 'yes' (y) except for the services qmgr, proxymap, proxywrite, local, and virtual\n\nSecond, create two functions that will help us later with copying files over into the chroot jail (see last step)\n\n```\n$ alias CP=\"cp -p\"\n```\n\n```\ncond_copy() {\n  # find files as per pattern in $1\n  # if any, copy to directory $2\n  dir=$(dirname \"$1\")\n  pat=$(basename \"$1\")\n  lr=$(find \"$dir\" -maxdepth 1 -name \"$pat\")\n  if test ! -d \"$2\" ; then exit 1 ; fi\n  if test \"x$lr\" != \"x\" ; then $CP $1 \"$2\" ; fi\n}\n```\n\nNext, make the new directories for the jail:\n\n```\n$ set -e\n$ umask 022\n$ POSTFIX_DIR=${POSTFIX_DIR-/var/spool/postfix}\n$ cd ${POSTFIX_DIR}\n$ mkdir -p etc lib usr/lib/zoneinfo\n$ test -d /lib64 && mkdir -p lib64\n```\n\nFind the localtime file:\n\n```\n$ lt=/etc/localtime\n$ if test ! -f $lt ; then lt=/usr/lib/zoneinfo/localtime ; fi\n$ if test ! -f $lt ; then lt=/usr/share/zoneinfo/localtime ; fi\n$ if test ! -f $lt ; then echo \"cannot find localtime\" ; exit 1 ; fi\n$ rm -f etc/localtime\n```\n\nCopy localtime and some other system files into the chroot's etc\n\n```\n$ CP -f $lt /etc/services /etc/resolv.conf /etc/nsswitch.conf etc\n$ CP -f /etc/host.conf /etc/hosts /etc/passwd etc\n$ ln -s -f /etc/localtime usr/lib/zoneinfo\n```\n\nMake sure resolv.conf is owned by root:\n\n```\n$ chown root /var/spool/postfix/etc/resolv.conf\n```\n\nCopy required libraries into the chroot using the previously created function cond_copy\n\n```\n$ cond_copy '/usr/lib/libnss_*.so*' lib\n$ cond_copy '/usr/lib/libresolv.so*' lib\n$ cond_copy '/usr/lib/libdb.so*' lib\n```\n\nAnd do not forget to reload Postfix.\n\n"
    },
    {
      "title": "Resource Record",
      "level": 4,
      "content": "DANE supports several types of records, however not all of them are suitable in Postfix.\n\nCertificate usage 0 is unsupported, 1 is mapped to 3 and 2 is optional, thus it is recommendet to publish a \"3\" record. More on Resource Records.\n\n"
    },
    {
      "title": "Configuration",
      "level": 4,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nOpportunistic DANE is configured this way:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsmtpd_use_tls = yes\nsmtp_dns_support_level = dnssec\nsmtp_tls_security_level = dane\n```\n\n```\n/etc/postfix/master.cf\n```\n\n```\ndane       unix  -       -       n       -       -       smtp\n  -o smtp_dns_support_level=dnssec\n  -o smtp_tls_security_level=dane\n```\n\nTo use per-domain policies, e.g. opportunistic DANE for example.org and mandatory DANE for example.com, use something like this:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nindexed = ${default_database_type}:${config_directory}/\n\n# Per-destination TLS policy\n#\nsmtp_tls_policy_maps = ${indexed}tls_policy\n\n# default_transport = smtp, but some destinations are special:\n#\ntransport_maps = ${indexed}transport\n```\n\n```\ntransport\n```\n\n```\nexample.com dane\nexample.org dane\n```\n\n```\ntls_policy\n```\n\n```\nexample.com dane-only\n```\n\nFull documentation is found here.\n\n"
    },
    {
      "title": "Extras",
      "level": 2,
      "content": "- PostfixAdmin — A web-based administrative interface for Postfix.\n\n"
    },
    {
      "title": "Postgrey",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nPostgrey can be used to enable greylisting for a Postfix mail server.\n\n"
    },
    {
      "title": "Installation",
      "level": 4,
      "content": "Install the postgrey package. To get it running quickly edit the Postfix configuration file and add these lines:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsmtpd_recipient_restrictions =\n  check_policy_service inet:127.0.0.1:10030\n```\n\nThen start/enable the postgrey service. Afterwards, reload the postfix service. Now greylisting should be enabled.\n\n"
    },
    {
      "title": "Configuration",
      "level": 4,
      "content": "Configuration is done by extending the unit postgrey.service.\n\n"
    },
    {
      "title": "Whitelisting",
      "level": 4,
      "content": "To add automatic whitelisting (successful deliveries are whitelisted and do not have to wait any more), add the --auto-whitelist-clients=N option and replace N by a suitably small number (or leave it at its default of 5).\n\n```\n/etc/systemd/system/postgrey.service.d/override.conf\n```\n\n```\n[Service]\nExecStart=\nExecStart=/usr/bin/postgrey --inet=127.0.0.1:10030 \\\n       --pidfile=/run/postgrey/postgrey.pid \\\n       --group=postgrey --user=postgrey \\\n       --daemonize \\\n       --greylist-text=\"Greylisted for %%s seconds\" \\\n       --auto-whitelist-clients\n```\n\nTo add your own list of whitelisted clients in addition to the default ones, create the file /etc/postfix/postgrey_whitelist_clients.local and enter one host or domain per line, then restart postgrey.service so the changes take effect.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 4,
      "content": "If you specify --unix=/path/to/socket and the socket file is not created ensure you have removed the default --inet=127.0.0.1:10030 from the service file.\n\nFor a full documentation of possible options see perldoc postgrey.\n\n"
    },
    {
      "title": "SpamAssassin",
      "level": 3,
      "content": "This section describes how to integrate SpamAssassin.\n\n"
    },
    {
      "title": "SpamAssassin stand-alone generic setup",
      "level": 4,
      "content": "Edit /etc/postfix/master.cf and add the content filter under smtp.\n\n```\nsmtp      inet  n       -       n       -       -       smtpd\n  -o content_filter=spamassassin\n```\n\nAlso add the following service entry for SpamAssassin\n\n```\nspamassassin unix -     n       n       -       -       pipe\n  flags=R user=spamd argv=/usr/bin/vendor_perl/spamc -e /usr/bin/sendmail -oi -f ${sender} ${recipient}\n```\n\nNow you can start and enable spamassassin.service.\n\n"
    },
    {
      "title": "SpamAssassin combined with Dovecot LDA / Sieve (Mailfiltering)",
      "level": 4,
      "content": "Set up LDA and the Sieve-Plugin as described in Dovecot#Sieve. But ignore the last line mailbox_command... .\n\nInstead add a pipe in /etc/postfix/master.cf:\n\n```\ndovecot   unix  -       n       n       -       -       pipe\n       flags=DRhu user=vmail:vmail argv=/usr/bin/vendor_perl/spamc -u spamd -e /usr/lib/dovecot/dovecot-lda -f ${sender} -d ${recipient}\n```\n\nAnd activate it in /etc/postfix/main.cf:\n\n```\nvirtual_transport = dovecot\n```\n\nAlternately, if you do not want to use virtual transports you can use the mailbox_command. This runs with the local user and group, whereas the pipe runs with with the specified user using the user setting.\n\n```\nmailbox_command = /usr/bin/vendor_perl/spamc -u spamd -e /usr/lib/dovecot/dovecot-lda -f \"$SENDER\" -a \"$RECIPIENT\"\n```\n\n"
    },
    {
      "title": "SpamAssassin combined with Dovecot LMTP / Sieve",
      "level": 4,
      "content": "Set up the LMTP and Sieve as described in Dovecot#Sieve.\n\nEdit /etc/dovecot/conf.d/90-plugin.conf and add:\n\n```\nsieve_before = /etc/dovecot/sieve.before.d/\n sieve_extensions = +vnd.dovecot.filter\n sieve_plugins = sieve_extprograms\n sieve_filter_bin_dir = /etc/dovecot/sieve-filter\n sieve_filter_exec_timeout = 120s #this is often needed for the long running spamassassin scans, default is otherwise 10s\n```\n\nCreate the directory and put spamassassin in as a binary that can be ran by dovecot:\n\n```\n# mkdir /etc/dovecot/sieve-filter\n # ln -s /usr/bin/vendor_perl/spamc /etc/dovecot/sieve-filter/spamc\n```\n\nCreate a new file, /etc/dovecot/sieve.before.d/spamassassin.sieve which contains:\n\n```\nrequire [ \"vnd.dovecot.filter\" ];\n filter \"spamc\" [ \"-d\", \"127.0.0.1\", \"--no-safe-fallback\" ];\n```\n\nCompile the sieve rules spamassassin.svbin:\n\n```\n# cd /etc/dovecot/sieve.before.d\n # sievec spamassassin.sieve\n```\n\nFinally, restart dovecot.service.\n\n"
    },
    {
      "title": "Rule-based mail processing",
      "level": 3,
      "content": "With policy services one can easily finetune Postfix' behaviour of mail delivery. postfwd provides services to do so. This allows you to e.g. implement time-aware grey- and blacklisting of senders and receivers as well as SPF policy checking.\n\nPolicy services are standalone services and connected to Postfix like this:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsmtpd_recipient_restrictions =\n  ...\n  check_policy_service unix:/run/policyd.sock\n  check_policy_service inet:127.0.0.1:10040\n```\n\nPlacing policy services at the end of the queue reduces load, as only legitimate mails are processed. Be sure to place it before the first permit statement to catch all incoming messages.\n\n"
    },
    {
      "title": "Sender Policy Framework",
      "level": 3,
      "content": "To use the Sender Policy Framework with Postfix, you can install python-spf-engineAUR, python-postfix-policyd-spfAUR or postfix-policyd-spf-perlAUR.\n\n"
    },
    {
      "title": "With spf-engine or python-postfix-policyd-spf",
      "level": 4,
      "content": "Edit /etc/python-policyd-spf/policyd-spf.conf to your needs. An extensively commented version can be found at /etc/python-policyd-spf/policyd-spf.conf.commented. Pay some extra attention to the HELO check policy, as standard settings strictly reject HELO failures.\n\nIn main.cf file, add a timeout for the policyd:\n\n```\n/etc/postfix/main.cf\n```\n\n```\npolicy-spf_time_limit = 3600s\n```\n\nThen add a transport\n\n```\n/etc/postfix/master.cf\n```\n\n```\npolicy-spf  unix  -       n       n       -       0       spawn user=nobody argv=/usr/bin/policyd-spf\n```\n\nLastly you need to add the policyd to the smtpd_recipient_restrictions. To minimize load put it to the end of the restrictions but above any reject_rbl_client DNSBL line:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsmtpd_recipient_restrictions=\n     ...\n     permit_sasl_authenticated\n     permit_mynetworks\n     reject_unauth_destination\n     check_policy_service unix:private/policy-spf\n```\n\nNow reload the postfix service.\n\nYou can test your setup with the following:\n\n```\n/etc/python-policyd-spf/policyd-spf.conf\n```\n\n```\ndefaultSeedOnly = 0\n```\n\n"
    },
    {
      "title": "With postfix-policyd-spf-perl",
      "level": 4,
      "content": "Do the same process with postfix as with python-postfix-policyd-spf, but with the following differences:\n\nTimeout for the policyd in main.cf file:\n\n```\n/etc/postfix/main.cf\n```\n\n```\npolicy_time_limit = 3600\n```\n\nTransport:\n\n```\n/etc/postfix/master.cf\n```\n\n```\npolicy  unix  -       n       n       -       0       spawn\n     user=nobody argv=/usr/lib/postfix/postfix-policyd-spf-perl\n```\n\nAdd the policyd to the smtpd_recipient_restrictions:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsmtpd_recipient_restrictions=\n     ...\n     reject_unauth_destination\n     check_policy_service unix:private/policy\n     ...\n```\n\n"
    },
    {
      "title": "Sender Rewriting Scheme",
      "level": 3,
      "content": "To use the Sender Rewriting Scheme with Postfix, install postsrsdAUR and adjust the settings:\n\n```\n/etc/postsrsd/postsrsd.conf\n```\n\n```\ndomains = { \"yourdomain.tld\", \"yournextdomain.tld\", \"yournextdomain.tld\" }\nunprivileged-user = \"postsrsd\"\n```\n\nEnable and start the daemon, making sure it runs after reboot as well. Then configure Postfix accordingly by tweaking the following lines:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsender_canonical_maps = socketmap:unix:srs:forward\nsender_canonical_classes = envelope_sender\nrecipient_canonical_maps = socketmap:unix:srs:reverse\nrecipient_canonical_classes = envelope_recipient, header_recipient\n```\n\nRestart Postfix and start forwarding mail.\n\n"
    },
    {
      "title": "Warning: \"database /etc/postfix/*.db is older than source file ..\"",
      "level": 3,
      "content": "If you get one or both warnings with journalctl:\n\n```\nwarning: database /etc/postfix/virtual.db is older than source file /etc/postfix/virtual\nwarning: database /etc/postfix/transport.db is older than source file /etc/postfix/transport\n```\n\nThen you can fix it by using these commands, depending on the messages you get:\n\n```\npostmap /etc/postfix/transport\npostmap /etc/postfix/virtual\n```\n\nAnd restart postfix.service.\n\n"
    },
    {
      "title": "Host or domain name not found. Name service error for name=...",
      "level": 3,
      "content": "If you get the following warning with journalctl:\n\n```\nHost or domain name not found. Name service error for name=...\n```\n\nIt could be that you are running Postfix in a chroot and /etc/resolv.conf is missing. If so, you can fix this by:\n\n```\nmkdir -p /var/spool/postfix/etc\ncp /etc/resolv.conf /var/spool/postfix/etc/resolv.conf\n```\n\nAnd restart postfix.service.\n\n"
    },
    {
      "title": "error: require command: unknown Sieve capability `vnd.dovecot.filter'",
      "level": 3,
      "content": "```\nspamassassin: line 1: error: require command: unknown Sieve capability `vnd.dovecot.filter'.\nspamassassin: line 2: error: unknown command 'filter' (only reported once at first occurrence).\nspamassassin: error: validation failed.\nsievec(root): Fatal: failed to compile sieve script 'spamassassin.sieve'\n```\n\nIf you get this error when running sievec after following #SpamAssassin combined with Dovecot LMTP / Sieve, replace sieve_extensions with sieve_global_extensions in /etc/dovecot/sieve.before.d/spamassassin.sieve.\n\nRestart dovecot.service.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official documentation\n- Postfix Ubuntu documentation\n- Virtual user mail system with Postfix, Dovecot and Roundcube\n\n"
    }
  ]
}