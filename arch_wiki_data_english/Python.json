{
  "title": "Python",
  "url": "https://wiki.archlinux.org/title/Python",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Python package guidelines\n- Python/Virtual environment\n- mod_wsgi\n- Django\n- List of applications/Utilities#Python IDEs\n\nFrom What is Python?:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the python package.\n\n"
    },
    {
      "title": "Other versions",
      "level": 3,
      "content": "Previous and future versions of Python are available via the AUR. These are useful for applications or projects that require specific versions, or just for curiosity:\n\n- Python 3.14: python314AUR pre-release\n- Python 3.12: python312AUR\n- Python 3.11: python311AUR\n- Python 3.10: python310AUR\n- Python 3.9: python39AUR\n- Python 3.8: python38AUR (unmaintained)\n- Python 3.7: python37AUR (unmaintained)\n- Python 3.6: python36AUR (unmaintained)\n- Python 2.7: python2AUR (unmaintained)\n\nEach of these packages installs a distinct binary named after the version number, e.g. python3.9 for Python 3.9, allowing multiple versions to coexist on a system. You can also use pyenv or uv to easily install and switch between multiple versions of Python.\n\nExtra modules/libraries for old versions of Python may be found on the AUR by searching for python<version without period>, e.g. searching for python39 for Python 3.9 modules.\n\nYou can also download the source for any release on the https://www.python.org/downloads/ page.\n\n"
    },
    {
      "title": "Alternative implementations",
      "level": 3,
      "content": "The python package installs CPython, the reference implementation of Python. However, there are also other implementations available. These implementations are usually based on older versions of Python and are not fully compatible with CPython.\n\nImplementations available on Arch Linux include:\n\n- PyPy — A Python implementation written in Python. It has speed and memory usage advantages compared to CPython.\n\n- Jython — An implementation of the Python language written in Java. It can be used to embed Python scripting into Java programs or use Java libraries in Python programs.\n\n- micropython — Python for microcontrollers. It includes a small subset of the Python standard library and is optimized to run on microcontrollers and in constrained environments.\n\n- IronPython — An implementation of the Python programming language which is tightly integrated with .NET. It can use .NET libraries and allows .NET programs to use Python libraries.\n\nMore implementations exist. Some, such Cinder, are used internally at large technology companies. Others are historically notable but are no longer maintained due to improvements in the most popular implementations.\n\n"
    },
    {
      "title": "Alternative shells",
      "level": 3,
      "content": "The python package includes an interactive Python shell/REPL which can be launched with the python command. The following shells are also available:\n\n- bpython — A fancy interface for the Python interpreter.\n\n- IPython — A powerful interactive Python shell.\n\n- Jupyter — A web-based computation application powered by IPython.\n\n- ptpython — An advanced Python REPL built with prompt-toolkit.\n\n"
    },
    {
      "title": "Package management",
      "level": 2,
      "content": "There are several ways to install Python packages on Arch Linux.\n\n"
    },
    {
      "title": "Arch repositories",
      "level": 3,
      "content": "A large number of popular packages are available in the official repositories and AUR. This is the preferred way to install system-wide packages, and the only method officially supported on Arch Linux.\n\n"
    },
    {
      "title": "Third-party packages",
      "level": 3,
      "content": "Developers working with Python may need to use packages or package versions not available in the Arch repositories. The recommended practice is to use a separate virtual environment to isolate each project, preventing conflicts with system packages in /usr. Various tools are available to install packages within a virtual environment:\n\n- pip(1) — The official package installer for Python.\n\n- pipx — A specialized package installer that can only be used to install packages with CLI entrypoints (but not library packages).\n\n- Poetry — Python dependency management and packaging made easy. Poetry is a single tool to develop, build, publish, and track dependencies for Python projects.\n\n- Conda — Conda provides package, dependency, and environment management for any language. Conda was originally created for Python, and is popular for scientific computing, data science and machine learning. Conda is the package manager of the miniforge community distribution and the Anaconda and Miniconda distributions.\n\n- uv — An extremely fast Python package installer and resolver, written in Rust. A single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more.\n\npip, pipx, poetry and uv install packages from the Python Package Index and other indexes. Conda and Miniconda use the Anaconda repositories.\n\nAs an alternative to virtual environments, pip install --user can be used to install packages into the user scheme instead of /usr. This separates packages per-user rather than per-project. Virtual environments are usually the better choice.\n\nSee the Python Packaging User Guide for the official best practices for package management.\n\n"
    },
    {
      "title": "Historical notes",
      "level": 3,
      "content": "Historically, easy_install (part of python-setuptools) was used to install packages distributed as Eggs. easy_install and Eggs have been replaced with pip and Wheels. See pip vs easy_install and Package Formats for more information.\n\nPrevious versions of pip could install third-party packages system-wide, but this caused a number of problems outlined in PEP668. The system-wide environment is now marked as an externally managed environment, and pip no longer allows system-wide installation.\n\n"
    },
    {
      "title": "Widget bindings",
      "level": 2,
      "content": "The following widget toolkit bindings are available:\n\n- Tkinter — The standard Python interface to the Tk GUI toolkit.\n\n- Qt for Python (PySide2) — The official Python bindings for Qt5.\n\n- Qt for Python (PySide6) — The official Python bindings for Qt6.\n\n- pyQt — A set of Python bindings for Qt.\n\n- PyGObject — Python bindings for GObject based libraries such as GTK, GStreamer, WebKitGTK, GLib, and GIO.\n\n- wxPython — A cross-platform GUI toolkit for Python which wraps wxWidgets.\n\nTo use these with Python, you may also need to install the associated widget toolkit packages (e.g. tk must also be installed to use Tkinter).\n\n"
    },
    {
      "title": "Virtual environment",
      "level": 3,
      "content": "Python provides tools to create isolated virtual environments into which packages may be installed without conflicting with other virtual environments or the system packages. Virtual environments can also run applications with different versions of Python on the same system.\n\nSee Python/Virtual environment for details.\n\n"
    },
    {
      "title": "Tab completion in Python shell",
      "level": 3,
      "content": "Tab completion is available in the interactive shell by default. Note that the readline completer will only complete names in the global namespace. You can use python-jedi for a richer tab completion experience [1].\n\n"
    },
    {
      "title": "List packages built for a specific Python version",
      "level": 3,
      "content": "Sometimes it is useful to know which installed packages were built for a specific version of Python. For example,\n\n```\n$ pacman -Qoq /usr/lib/python3.12\n```\n\nwill list all those built for Python version 3.12. This is especially useful when the official Python version is updated and one wants to get a list of packages from the AUR that need rebuilding because they were built for a possibly no longer installed Python version, see #Module not found after Python version update.\n\n"
    },
    {
      "title": "Module not found after Python version update",
      "level": 3,
      "content": "A Python-based application might output No module named module_name for an installed dependency named module_name after having upgraded the python package to a new minor version (e.g. from version 3.10 to 3.11).\n\nThe above scenario happens when a dependency is not available for that Python version or not installed at all. Python packages are installed in a versioned site-packages directory (/usr/lib/pythonX.Y/site-packages if system-wide, or ~/.local/lib/pythonX.Y/site-packages/ if per-user, where X.Y is a version like \"3.11\"). So whenever there is a new minor version upgrade, the Python-based package built with previous Python version must be rebuilt against the new one in order to be properly used.\n\nPlease notice it is the user's responsibility to rebuild non-official packages, including Python-based packages installed from AUR. See AUR#Updating packages and FAQ#What if I run a full system upgrade and there will be an update for a shared library, but not for the applications that depend on it?\n\n"
    },
    {
      "title": "Official",
      "level": 3,
      "content": "- Official Python documentation (Can be installed with the python-docs package for offline access.)\n- Official Python tutorial\n\n"
    },
    {
      "title": "Third-Party",
      "level": 3,
      "content": "- Automate the Boring Stuff with Python - Creative Commons book\n- Awesome Python - A curated list of Python resources\n- A Byte of Python - Creative Commons book\n- Cracking Codes With Python - Free online book\n- Crash into Python - Free tutorial\n- Python Debugging With Pdb - Guide to using pdb, the Python debugger\n- Dive Into Python - Creative Commons book\n- Fluent Python - Commercial book\n- Introducing Python - Commercial book\n- Invent Your Own Computer Games with Python - Free online book\n- Learn Python - Free interactive tutorial\n- Learn Python the Hard Way - Commercial book\n- Pythonspot Python Tutorials - Free online tutorials\n- Think Python - Creative Commons book\n\n"
    }
  ]
}