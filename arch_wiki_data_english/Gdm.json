{
  "title": "Gdm",
  "url": "https://wiki.archlinux.org/title/Gdm",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- GNOME\n- Display manager\n\nFrom GDM - GNOME Display Manager: \"The GNOME Display Manager (GDM) is a program that manages graphical display servers and handles graphical user logins.\"\n\nDisplay managers provide X Window System and Wayland users with a graphical login prompt.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "GDM can be installed with the gdm package, and is installed as part of the gnome group.\n\n"
    },
    {
      "title": "Starting",
      "level": 2,
      "content": "To start GDM at boot time, enable gdm.service.\n\n"
    },
    {
      "title": "Autostarting applications",
      "level": 3,
      "content": "To automatically start applications after logging in, follow the instructions in Autostarting#On desktop environment startup that pertain to your desktop environment.\n\n"
    },
    {
      "title": "Login screen background image",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\n- Since GNOME 3.16, GNOME Shell themes are now stored as binary files (gresource).\n- This change will be overwritten on subsequent updates of gnome-shell.\n\nFirstly, you need to extract the existing GNOME Shell theme to a directory in your home directory. You can do this using the following script:\n\n```\nextractgst.sh\n```\n\n```\n#!/bin/sh\ngst=/usr/share/gnome-shell/gnome-shell-theme.gresource\nworkdir=${HOME}/shell-theme\n\nfor r in `gresource list $gst`; do\n\tr=${r#\\/org\\/gnome\\/shell/}\n\tif [ ! -d $workdir/${r%/*} ]; then\n\t  mkdir -p $workdir/${r%/*}\n\tfi\ndone\n\nfor r in `gresource list $gst`; do\n        gresource extract $gst $r >$workdir/${r#\\/org\\/gnome\\/shell/}\ndone\n```\n\nNavigate to the created directory. You should find that the theme files have been extracted to it (under a theme subfolder). Now copy your preferred background image to this directory.\n\nNext, you need to create a file under the theme directory with the following content (the list below is for Gnome 47, just in case verify that the contents of the theme subfolder match the list here, including the background image):\n\n```\ngnome-shell-theme.gresource.xml\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gresources>\n  <gresource prefix=\"/org/gnome/shell/theme\">\n    <file>calendar-today.svg</file>\n    <file>calendar-today-light.svg</file>\n    <file>gnome-shell-dark.css</file>\n    <file>gnome-shell-light.css</file>\n    <file>gnome-shell-high-contrast.css</file>\n    <file>gnome-shell-start.svg</file>\n    <file>pad-osd.css</file>\n    <file>process-working-dark.svg</file>\n    <file>process-working-light.svg</file>\n    <file>workspace-placeholder.svg</file>\n    <file>filename</file>\n  </gresource>\n</gresources>\n```\n\nReplace filename with the filename of your background image or remove the line to use a hex color value instead.\n\nNow, open the gnome-shell-light.css and gnome-shell-dark.css files and change the #lockDialogGroup definition as follows:\n\n```\n#lockDialogGroup {\n  background: url(\"filename\");\n  background-size: widthpx heightpx;\n  background-repeat: no-repeat;\n}\n```\n\nSet background-size to the resolution that GDM uses; this might not necessarily be the resolution of the image. For a list of display resolutions, see Display resolution.\n\nAgain, set filename to be the name of the background image, filename should be within quotes in the CSS. background-size can also be set to auto if you want the image scaled to fill.\n\nIf using multiple monitors, the image ends up spanning across the monitors, so it might be better to use an SVG file for the background.\n\nIf you only want to change the background color, adjust the #lockDialogGroup definition as follows:\n\n```\n#lockDialogGroup {\n  background-color: #color;\n}\n```\n\nwhere color is the new hex-encoded background color.\n\nNext, compile the theme using the following command:\n\n```\n$ glib-compile-resources gnome-shell-theme.gresource.xml\n```\n\nThen, copy the resulting gnome-shell-theme.gresource file to the /usr/share/gnome-shell directory (keep a backup of the original).\n\n```\n$ sudo cp /usr/share/gnome-shell/gnome-shell-theme.gresource /usr/share/gnome-shell/gnome-shell-theme-original.gresource\n$ sudo cp ./gnome-shell-theme.gresource /usr/share/gnome-shell\n```\n\nFinally, logout and you should find that gdm is using your preferred background image (you might need to restart gdm if the changes aren't applied immediately).\n\nIf a subsequent update resets the gnome-shell-theme.gresource file, simply repeat the above steps, verifying that the contents of the XML match the extracted file list.\n\nFor more information, please see the following forum thread. A shell script to automate the above steps is available on DimaZirix's github repository.\n\n"
    },
    {
      "title": "dconf configuration",
      "level": 3,
      "content": "Some GDM settings are stored in a dconf database. They can be configured either by adding keyfiles to the /etc/dconf/db/gdm.d directory and then recompiling the GDM database by running dconf update as root or by logging into the GDM user on the system and changing the setting directly using the gsettings command line tool. Note that for the former approach, a GDM profile file is required—this must be created manually as it is no longer shipped upstream, see below:\n\n```\n/etc/dconf/profile/gdm\n```\n\n```\nuser-db:user\nsystem-db:gdm\nfile-db:/usr/share/gdm/greeter-dconf-defaults\n```\n\nFor the latter approach, you can log into the GDM user with the command below:\n\n```\n# machinectl shell gdm@ /bin/bash\n```\n\n"
    },
    {
      "title": "Login screen logo",
      "level": 4,
      "content": "Create the following keyfile:\n\n```\n/etc/dconf/db/gdm.d/02-logo\n```\n\n```\n[org/gnome/login-screen]\nlogo='/path/to/logo.png'\n```\n\nThen recompile the GDM database.\n\nAlternatively, execute the following as the GDM user to change the logo:\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.login-screen logo '/path/to/logo.png'\n```\n\nTo disable the logo, you can set the value to an empty string:\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.login-screen logo ''\n```\n\n"
    },
    {
      "title": "Changing the cursor theme",
      "level": 4,
      "content": "GDM disregards GNOME cursor theme settings and it also ignores the cursor theme set according to the XDG specification. To change the cursor theme used in GDM, create the following keyfile:\n\n```\n/etc/dconf/db/gdm.d/10-cursor-settings\n```\n\n```\n[org/gnome/desktop/interface]\ncursor-theme='theme-name'\n```\n\nThen recompile the GDM database. Alternatively, execute the following as the GDM user temporarily and change the cursor theme:\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.desktop.interface cursor-theme 'theme-name'\n```\n\n"
    },
    {
      "title": "Changing the icon theme",
      "level": 4,
      "content": "The same methods can be used to change the icon theme. Create the following keyfile:\n\n```\n/etc/dconf/db/gdm.d/11-icon-settings\n```\n\n```\n[org/gnome/desktop/interface]\nicon-theme='theme-name'\n```\n\nThen, recompile the GDM database. Alternatively, execute the following as the GDM user temporarily and change the icon theme:\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.desktop.interface icon-theme 'theme-name'\n```\n\n"
    },
    {
      "title": "Larger font for log-in screen",
      "level": 4,
      "content": "Click on the accessibility icon at the top right of the screen (a white circle with the silhouette of a person in the centre) and check the Large Text option.\n\nTo set a specific scaling factor, create the following keyfile:\n\n```\n/etc/dconf/db/gdm.d/03-scaling\n```\n\n```\n[org/gnome/desktop/interface]\ntext-scaling-factor='1.25'\n```\n\nThen recompile the GDM database. Alternatively, execute the following as the GDM user temporarily and change the font:\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.desktop.interface text-scaling-factor '1.25'\n```\n\n"
    },
    {
      "title": "Turning off the sound",
      "level": 4,
      "content": "This tweak disables the audible feedback heard when the system volume is adjusted (via keyboard) on the login screen.\n\nCreate the following keyfile:\n\n```\n/etc/dconf/db/gdm.d/04-sound\n```\n\n```\n[org/gnome/desktop/sound]\nevent-sounds=false\n```\n\nThen recompile the GDM database. Alternatively execute the following as the GDM user temporarily and turn off the sound:\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.desktop.sound event-sounds 'false'\n```\n\n"
    },
    {
      "title": "Configure power button behavior",
      "level": 4,
      "content": "- The logind settings for the power button are overriden by GNOME Settings Daemon. [1]\n- As of GDM 3.18, the power button cannot be set to interactive. [2]\n- In some cases, this setting will be ignored and hardcoded defaults will be used. [3]\n\nCreate the following keyfile:\n\n```\n/etc/dconf/db/gdm.d/05-power\n```\n\n```\n[org/gnome/settings-daemon/plugins/power]\npower-button-action='action'\n```\n\nThen recompile the GDM database. Alternatively, execute the following as the GDM user temporarily and configure the behavior:\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.settings-daemon.plugins.power power-button-action 'action'\n```\n\nwhere action can be one of nothing, suspend or hibernate.\n\n"
    },
    {
      "title": "Enabling tap-to-click",
      "level": 4,
      "content": "Tap-to-click is disabled in GDM (and GNOME) by default, but you can easily enable it with a dconf setting.\n\nTo enable tap-to-click, create the following keyfile:\n\n```\n/etc/dconf/db/gdm.d/06-tap-to-click\n```\n\n```\n[org/gnome/desktop/peripherals/touchpad]\ntap-to-click=true\n```\n\nThen recompile the GDM database. Alternatively, execute the following as the GDM user temporarily and enable the action:\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click 'true'\n```\n\n"
    },
    {
      "title": "Disable/Enable Accessibility Menu",
      "level": 4,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nTo disable or enable the Accessibility Menu, create the following keyfile:\n\n```\n/etc/dconf/db/gdm.d/07-accessibility\n```\n\n```\n[org/gnome/desktop/interface]\ntoolkit-accessibility='boolean'\n```\n\nThen recompile the GDM database. Alternatively, execute the following as the GDM user temporarily and change the status:\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.desktop.interface toolkit-accessibility 'boolean'\n```\n\nThe menu is disabled when the key is false, enabled when it is true.\n\n"
    },
    {
      "title": "Enable Night Light on GDM",
      "level": 4,
      "content": "To enable Night Light on GDM, run\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true\n```\n\n"
    },
    {
      "title": "Keyboard layout",
      "level": 3,
      "content": "GDM requires the XKBLAYOUT parameter to be set in /etc/vconsole.conf; without it it defaults to a standard us (qwerty) layout, i.e it will not honor the value set in KEYMAP.\n\nOne generally applicable way to do so is to use localectl --no-convert set-x11-keymap [keymap]: see Keyboard configuration in Xorg#Setting keyboard layout for details.\n\n"
    },
    {
      "title": "Change the language",
      "level": 3,
      "content": "The system language will be applied to GDM. If a system has multiple users, it is possible to set a language for GDM different to the system language. In this case, firstly ensure that gnome-control-center is installed. Then, start gnome-control-center and choose Region & Language. In the header bar, check the Login Screen toggle button. Finally, click on Language and choose your language from the list. You will be prompted for your root password. Note that the Login Screen button will not be visible in the header bar unless multiple users are present on the system [5].\n\n"
    },
    {
      "title": "Automatic login",
      "level": 4,
      "content": "To enable automatic login with GDM, add the following to /etc/gdm/custom.conf (replace username with your own):\n\n```\n/etc/gdm/custom.conf\n```\n\n```\n# Enable automatic login for user\n[daemon]\nAutomaticLogin=username\nAutomaticLoginEnable=True\n```\n\nor for an automatic login with a delay:\n\n```\n/etc/gdm/custom.conf\n```\n\n```\n[daemon]\nTimedLoginEnable=true\nTimedLogin=username\nTimedLoginDelay=1\n```\n\nYou can set the session used for automatic login (replace gnome-xorg with desired session):\n\n```\n/var/lib/AccountsService/users/username\n```\n\n```\nXSession=gnome-xorg\n```\n\n"
    },
    {
      "title": "Passwordless login",
      "level": 4,
      "content": "If you want to bypass the password prompt in GDM then simply add the following line on the first line of /etc/pam.d/gdm-password:\n\n```\nauth sufficient pam_succeed_if.so user ingroup nopasswdlogin\n```\n\nThen, add the group nopasswdlogin to your system. See User group for group descriptions and group management commands.\n\nNow, add your user to the nopasswdlogin group and you will only have to click on your username to login.\n\nNote: **not** \n\n- Do not do this for a root account.\n- You will not be able to change your session type at login with GDM anymore. If you want to change your default session type, you will first need to remove your user from the nopasswdlogin group.\n\n"
    },
    {
      "title": "Disable fingerprint login",
      "level": 4,
      "content": "When using a fingerprint to login, it will not unlock the keychain, so you will still be prompted for the keychain password. You might want to disallow login and keep the fingerprint to unlock your session. To do this, just disable fingerprint for the GDM user.\n\nExecute the following as the GDM user temporarily and change this setting:\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.login-screen enable-fingerprint-authentication false\n```\n\n"
    },
    {
      "title": "Passwordless shutdown for multiple sessions",
      "level": 4,
      "content": "GDM uses polkit and logind to gain permissions for shutdown. You can shutdown the system when multiple users are logged in by setting:\n\n```\n/etc/polkit-1/localauthority.conf.d/org.freedesktop.logind.policy\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE policyconfig PUBLIC\n \"-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN\"\n \"http://www.freedesktop.org/software/polkit/policyconfig-1.dtd\">\n\n<!--\nPolicy definitions for logind\n -->\n\n<policyconfig>\n\n  <action id=\"org.freedesktop.login1.power-off-multiple-sessions\">\n    <description>Shutdown the system when multiple users are logged in</description>\n    <message>System policy prevents shutting down the system when other users are logged in</message>\n    <defaults>\n      <allow_inactive>yes</allow_inactive>\n      <allow_active>yes</allow_active>\n    </defaults>\n  </action>\n\n</policyconfig>\n```\n\nYou can find all available logind options (e.g. reboot-multiple-sessions) in org.freedesktop.login1(5).\n\n"
    },
    {
      "title": "Enable root login in GDM",
      "level": 4,
      "content": "It is not advised to login as root, but if necessary you can edit /etc/pam.d/gdm-password and add the following line before the line auth required pam_deny.so:\n\n```\n/etc/pam.d/gdm-password\n```\n\n```\nauth            sufficient      pam_succeed_if.so uid eq 0 quiet\n```\n\nThe file should look something like this:\n\n```\n/etc/pam.d/gdm-password\n```\n\n```\n...\nauth            sufficient      pam_succeed_if.so uid eq 0 quiet\nauth            sufficient      pam_succeed_if.so uid >= 1000 quiet\nauth            required        pam_deny.so\n...\n```\n\nYou should be able to login as root after restarting GDM.\n\n"
    },
    {
      "title": "Hide user from login list",
      "level": 4,
      "content": "The users for the gdm user list are gathered by AccountsService. It will automatically hide system users (UID < 1000). To hide ordinary users from the login list create or edit a file named after the user to hide in /var/lib/AccountsService/users/ to contain at least:\n\n```\n/var/lib/AccountsService/users/username\n```\n\n```\n[User]\nSystemAccount=true\n```\n\n"
    },
    {
      "title": "Remote login via RDP",
      "level": 4,
      "content": "Remote login can be configured via graphical interface by navigating to System > Remote Desktop > Remote Login in Gnome Settings app.\n\nTo display current status and credentials, the following command can be used:\n\n```\n# grdctl --system status --show-credentials\n```\n\nTo set credentials:\n\n```\n# grdctl --system rdp set-credentials rdp_login rdp_password\n```\n\nTo generate new TLS key and certificate:\n\n```\n# winpr-makecert3 -rdp -path /etc/gnome-remote-desktop -n rdp-tls\n```\n\nIf -n rdp-tls part is omitted, hostname will be used as the name instead.\n\nTo set TLS key and certificate:\n\n```\n# grdctl --system rdp set-tls-key /etc/gnome-remote-desktop/rdp-tls.key\n# grdctl --system rdp set-tls-cert /etc/gnome-remote-desktop/rdp-tls.crt\n```\n\nFinally, to enable Remote Login:\n\n```\n# grdctl --system rdp enable\n```\n\n"
    },
    {
      "title": "Setup default monitor settings",
      "level": 3,
      "content": "Some desktop environments store display settings in ~/.config/monitors.xml. xrandr commands are then generated on the base of the file content. GDM has a similar file stored in /var/lib/gdm/.config/monitors.xml.\n\nIf you have your monitors setup as you like (resolution, refresh rate, orientation, scaling, primary and so on) in ~/.config/monitors.xml and want GDM to honor those settings:\n\n```\n# cp /home/user/.config/monitors.xml /var/lib/gdm/.config/\n```\n\nTo automatically re-configure the monitor setup on each boot, use a drop-in file for gdm.service:\n\n```\n/etc/systemd/system/gdm.service.d/override.conf\n```\n\n```\n[Service]\nExecStartPre=/bin/cp /home/user/.config/monitors.xml /var/lib/gdm/.config/monitors.xml\n```\n\nThe relevant parts of monitors.xml for screen rotation and scaling are:\n\n```\n<monitors version=\"2\">\n  <configuration>\n    <logicalmonitor>\n      ...\n      <scale>2</scale>\n      ...\n      <transform>\n        <rotation>right</rotation>\n        <flipped>no</flipped>\n      </transform>\n      ...\n    </logicalmonitor>\n  </configuration>\n</monitors>\n```\n\nChanges will take effect on logout. This is necessary because GDM does not respect xorg.conf.\n\n- If you use GDM under Wayland, you must also use a monitors.xml that was created under Wayland. See GDM bug 224 for more info. Alternatively, you can force GDM to #Use Xorg backend, and use a monitors.xml that was created under Xorg.\n- If you use fractional scaling, you need to enable it for user gdm,\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.mutter experimental-features \"['scale-monitor-framebuffer']\"\n```\n\n"
    },
    {
      "title": "Configure X server access permission",
      "level": 3,
      "content": "You can use the xhost command to configure X server access permissions.\n\nFor instance, to grant GDM the right to access the X server, use the following command:\n\n```\n# xhost +SI:localuser:gdm\n```\n\n"
    },
    {
      "title": "Wayland and the proprietary NVIDIA driver",
      "level": 3,
      "content": "To use Wayland in GDM with the NVIDIA driver, you must fulfill the three following conditions:\n\n- enable DRM KMS,\n- configure Wayland,\n- follow NVIDIA/Tips and tricks#Preserve video memory after suspend.\n\nAs of GDM 42 and NVIDIA driver 510, GDM defaults to Wayland. For older NVIDIA drivers (in between version 470 and 510), GDM has chipset-dependent udev rules to use Xorg rather than Wayland. To force-enable Wayland, instead of following the three regular steps above, override these rules by creating the following symlink:\n\n```\n# ln -s /dev/null /etc/udev/rules.d/61-gdm.rules\n```\n\nIf, instead of GDM, a black screen appears, try disabling integrated graphics in your computer's BIOS settings.\n\nIn some cases, GNOME fails to start and transfers control back to GDM, which in turn causes the login screen to reappear. You may try setting the following environment variable as suggested in BBS#2126478:\n\n```\n/etc/environment\n```\n\n```\nMUTTER_DEBUG_KMS_THREAD_TYPE=user\n```\n\n"
    },
    {
      "title": "Failure on logout",
      "level": 3,
      "content": "If GDM starts up properly on boot, but fails after repeated attempts on logout, try adding this line to the daemon section of /etc/gdm/custom.conf:\n\n```\nGdmXserverTimeout=60\n```\n\n"
    },
    {
      "title": "Rootless Xorg",
      "level": 3,
      "content": "See Xorg#Rootless Xorg.\n\n"
    },
    {
      "title": "Use Xorg backend",
      "level": 3,
      "content": "The Wayland backend is used by default, and the Xorg backend is used only if the Wayland backend cannot be started. You may wish to use the Xorg backend instead if, for example:\n\n- GDM crashes\n\nTo use the Xorg backend by default, uncomment the following line in /etc/gdm/custom.conf:\n\n```\n#WaylandEnable=false\n```\n\n"
    },
    {
      "title": "Incomplete removal of gdm",
      "level": 3,
      "content": "After removing gdm, systemd may report the following:\n\n```\nuser 'gdm': directory '/var/lib/gdm' does not exist\n```\n\nTo remove this warning, login as root and delete the primary user gdm and then delete the group gdm:\n\nVerify that gdm is successfully removed via pwck and grpck with root privileges. To round it off, you may want to double-check no unowned files for gdm remain.\n\n"
    },
    {
      "title": "GDM auto-suspend (GNOME 3.28)",
      "level": 3,
      "content": "GDM uses a separate dconf database to control power management. To apply your user's power settings, copy them to GDM's dconf database:\n\n```\n$ IFS=$'\\n'; for x in $(sudo -u username gsettings list-recursively org.gnome.settings-daemon.plugins.power); do eval \"sudo -u gdm dbus-launch gsettings set $x\"; done; unset IFS\n```\n\nwhere username is your username.\n\nTo only disable auto-suspend on AC, run:\n\n```\n[gdm]$ dbus-launch gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing'\n```\n\n(To also disable auto-suspend on battery, run the command with battery instead of ac.)\n\nRestart GDM to activate your changes.\n\n"
    },
    {
      "title": "GDM ignores Wayland and uses X.Org by default",
      "level": 3,
      "content": "Wayland requires Kernel Mode Setting (KMS) running in order to work, and on some machines the GDM process start earlier than KMS, resulting in GDM unable to see Wayland and working only with X.Org. This might result in messages like the following showing up in your log:\n\n```\ngnome-shell[569]: Failed to open gpu '/dev/dri/card0': GDBus.Error:org.freedesktop.DBus.Error.AccessDenied: Operation not permitted\ngnome-shell[569]: Failed to create backend: No GPUs found\nsystemd[505]: org.gnome.Shell@wayland.service: Failed with result 'protocol'.\nsystemd[505]: Failed to start GNOME Shell on Wayland.\n```\n\nAlternatively, the same issue may lead to GDM not appearing or monitor only displaying the TTY output.\n\nYou can solve this problem by starting KMS earlier. You may also wish to just verify that Wayland is enabled in the GDM config (see above).\n\nAlso, if you use a NVIDIA driver, the Wayland session might be blocked by a udev rule (see the notes under GNOME#Wayland sessions). This might result in messages like the following:\n\n```\nsystemd[1022]: Condition check resulted in GNOME Shell on Wayland being skipped.\nsystemd[1022]: org.gnome.Shell@wayland.service: Skipped due to 'exec-condition'.\nsystemd[1022]: org.gnome.Shell@wayland.service: Control process exited, code=exited, status=2/INVALIDARGUMENT\n```\n\nSee #Wayland and the proprietary NVIDIA driver for a workaround.\n\n"
    },
    {
      "title": "Black screen on AMD or Intel GPUs when an NVIDIA (e)GPU is present",
      "level": 3,
      "content": "At first, without an NVIDIA device, GDM starts and works normally on Wayland, but stops working once an NVIDIA eGPU is plugged in (or the nvidia module is loaded for other reasons). A typical symptom of the problem is a black screen with a blinking cursor upon logouts and GDM restarts and the following message in GDM's logs (accessed by running journalctl -u gdm -b as root):\n\n```\nGdm: Child process -<some PID> was already dead.\n```\n\nThe solution is the same as #GDM ignores Wayland and uses X.Org by default: Prevent /usr/lib/gdm-disable-wayland from running upon nvidia module loading.\n\nNotice that GDM on Wayland will no longer work once /usr/lib/gdm-disable-wayland has run. This is because WaylandEnable=false has been written into /run/gdm/custom.conf, which overrides /etc/gdm/custom.conf. To fix the situation without a reboot, remove /run/gdm/custom.conf and then restart GDM.\n\n"
    },
    {
      "title": "GDM cannot be enabled",
      "level": 3,
      "content": "See systemd/FAQ#Failure to enable unit due to preexisting symlink.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- GDM Reference Manual\n\n"
    }
  ]
}