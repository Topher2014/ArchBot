{
  "title": "CouchDB",
  "url": "https://wiki.archlinux.org/title/CouchDB",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "\"Apache CouchDB is a document-oriented database that can be queried and indexed in a MapReduce fashion using JavaScript.\" ― CouchDB homepage\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the couchdb package.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Before you start the application, you need to create admin account as follows [1]:\n\n```\n/etc/couchdb/local.ini\n```\n\n```\n[admins]\nadmin = plain-password\n```\n\nAfter starting CouchDB for the first time, plain-password will be replaced with the hashed version.\n\nNext, start/enable the couchdb.service daemon.\n\nTest to see if the service is running by running curl http://127.0.0.1:5984/. Note that in order to access this instance of CouchDB from another system, you will need to configure it (see below).\n\n"
    },
    {
      "title": "Using Fauxton admin interface",
      "level": 3,
      "content": "You can now access the Fauxton admin interface by going to http://localhost:5984/_utils.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "You can do this through Fauxton or using command line.\n\nTo setup the database and create an admin account through Fauxton, visit http://127.0.0.1:5984/_utils/#setup.\n\nTo setup a single node from the command line (where <adminuser> and <password> are to be replaced).\n\n```\n$ curl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:5984/_cluster_setup -d '{\"action\": \"enable_single_node\", \"bind_address\":\"127.0.0.1\", \"username\": \"<adminuser>\", \"password\": \"<password>\"}'\n```\n\nAlso, you might want to take a look at #Single node setup & Security.\n\nNote that you can also do all this as well as changing the default port, bind address, log-level and other useful nuggets in /etc/couchdb/local.ini.\n\nIf you want to run CouchDB on port 80 you will have to run the daemon as root, use a reverse proxy or set an iptables rule such as:\n\n```\n$ iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 5984\n```\n\n"
    },
    {
      "title": "Creating a self-signed certificate",
      "level": 3,
      "content": "If you would like to use ssl with a self-signed certificate you can create one like this:\n\n```\n# cd /etc/couchdb\n# openssl req -new -x509 -nodes -newkey rsa:4096 -keyout server.key -out server.crt\n```\n\nThen uncomment httpsd and update the paths in [daemons] and [ssl] sections:\n\n```\n/etc/couchdb/local.ini\n```\n\n```\n[daemons]\nhttpsd = {couch_httpd, start_link, [https]}\n\n[ssl]\ncert_file = /etc/couchdb/server.crt\nkey_file = /etc/couchdb/server.key\n```\n\nFauxton can then be accessed over SSL on port 6984 via https://localhost:6984/_utils/.\n\n"
    },
    {
      "title": "Single node setup & Security",
      "level": 2,
      "content": "If you run CouchDB in a single node setup, you might want to increase security by not binding unnecessarily on public network interfaces. Two process are actually doing so: epmd and beam.smp. The first one is quite easy to work around, you can simply add the following systemd drop-in addition to couchdb.service:\n\n```\n/etc/systemd/system/couchdb.service.d/10-bind-locally.conf\n```\n\n```\n[Service]\nEnvironment=ERL_EPMD_ADDRESS=127.0.0.1\n```\n\nThe second one needs an edit in vm.args\n\n```\n/etc/couchdb/vm.args\n```\n\n```\n-kernel inet_dist_use_interface {127,0,0,1}\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official CouchDB page\n- CouchDB Document\n- CouchDB - The Definitive Guide\n- create a read-only database[dead link 2025-01-19 ⓘ]\n\n"
    }
  ]
}