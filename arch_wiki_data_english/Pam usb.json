{
  "title": "Pam usb",
  "url": "https://wiki.archlinux.org/title/Pam_usb",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Security\n- pam_mount\n- pam_abl\n- pam_oath\n\npam_usb (active fork of the original repo) provides hardware authentication for Linux using ordinary USB Flash Drives.\n\nIt works with any application supporting PAM, such as su and Display manager.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the pam_usbAUR package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Setting up pam_usb requires the following, once pam_usb is installed:\n\n1. Set up devices and users\n1. Configuring PAM for system authentication\n\n"
    },
    {
      "title": "Setting up Devices and Users",
      "level": 3,
      "content": "Once you have connected your USB device to the computer, use pamusb-conf to add it to the configuration file:\n\n```\n# pamusb-conf --add-device MyDevice\n```\n\n```\nPlease select the device you wish to add.\n* Using \"SanDisk Corp. Cruzer Titanium (SNDKXXXXXXXXXXXXXXXX)\" (only option)\nWhich volume would you like to use for storing data ?\n* Using \"/dev/sda1 (UUID: <6F6B-42FC>)\" (only option)\nName            : MyDevice\nVendor          : SanDisk Corp.\nModel           : Cruzer Titanium\nSerial          : SNDKXXXXXXXXXXXXXXXX\nVolume UUID     : 6F6B-42FC (/dev/sda1)\nSave to /etc/pamusb.conf ?\n[Y/n] y\nDone.\n```\n\nNote that MyDevice can be any arbitrary name you would like. Also, you can add as many devices as you want.\n\nNext, configure users you want to be able to authenticate with pam_usb:\n\n```\n# pamusb-conf --add-user root\n```\n\n```\nWhich device would you like to use for authentication ?\n* Using \"MyDevice\" (only option)\nUser            : root\nDevice          : MyDevice\nSave to /etc/pamusb.conf ?\n[Y/n] y\nDone.\n```\n\n"
    },
    {
      "title": "Check the configuration",
      "level": 3,
      "content": "You can run pamusb-check anytime to check if everything is correctly worked. This tool will simulate an authentication request (requires your device to be connected, otherwise it will fail).\n\n```\n# pamusb-check root\n```\n\n```\n* Authentication request for user \"root\" (pamusb-check)\n* Device \"MyDevice\" is connected (good).\n* Performing one time pad verification...\n* Verification match, updating one time pads...\n* Access granted.\n```\n\n"
    },
    {
      "title": "Setting up the PAM module",
      "level": 3,
      "content": "To add pam_usb into the system authentication process, we need to edit /etc/pam.d/system-auth\n\nThe default PAM configuration file should include the following line:\n\n```\nauth    [success=2 default=ignore]        pam_unix.so try_first_pass nullok_secure\n```\n\nChange it to:\n\n```\nauth    sufficient                    pam_usb.so\nauth    [success=2 default=ignore]    pam_unix.so nullok_secure\n```\n\nThe sufficient keyword means that if pam_usb allows the authentication, then no password will be asked. If the authentication fails, then the default password-based authentication will be used as fallback.\n\nIf you change it to required, it means that both the USB flash drive and the password will be required to grant access to the system.\n\nNow you should be able to authenticate with the relevant USB device plugged-in.\n\n```\n$ su\n```\n\n```\n* pam_usb v.SVN\n* Authentication request for user \"root\" (su)\n* Device \"MyDevice\" is connected (good).\n* Performing one time pad verification...\n* Verification match, updating one time pads...\n* Access granted.\n```\n\n"
    },
    {
      "title": "Enabling events management",
      "level": 3,
      "content": "pam_usb provides support for lock and unlock events that can trigger a user-defined list of commands along with custom environment variables. For instance, it can be used to instruct pam_usb to automatically lock the current session upon removal of a configured USB device, via the lock event.\n\nThere are two pre-requisites for the configured events to be triggered upon a configured USB device insertion/removal:\n\n1. The lock and/or unlock events configuration must be added to the pam_usb configuration file;\n1. The pamusb-agent must be running.\n\nBoth topics above are fully descibed in the pam_usb's wiki.\n\nHere is an example of events configuration for a given user. Note that it also takes care of passing the DISPLAY and dbus environment details to the commands to be executed upon events. Both <env> and <cmd> elements content should be changed according to the target environment:\n\n```\n/etc/security/pam_usb.conf abstract\n```\n\n```\n...\n<user id=\"auser\">\n    <device>MyUSBKey</device>\n    <agent event=\"lock\">\n      <cmd>xfce4-screensaver-command --lock</cmd>\n      <env>DISPLAY=:0.0</env>\n      <env>DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus</env>\n    </agent>\n    <agent event=\"unlock\">\n      <cmd>xfce4-screensaver-command --deactivate</cmd>\n      <env>DISPLAY=:0.0</env>\n      <env>DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus</env>\n    </agent>\n</user>\n...\n```\n\nNote that although the pam_usbAUR package installs pamusb-agent, it does not configure the system to either manage or start it automatically, this has to be taken care of manually post-installation as a service or simply as a session program, e.g. via Xfce Session and Startup 's Application Autostart control panel.\n\n"
    },
    {
      "title": "su fails to use pam_usb",
      "level": 3,
      "content": "If you set:\n\n```\n/etc/pam.d/system-auth\n```\n\n```\nauth          sufficient   pam_usb.so\n```\n\nand su prompts for a password, and does not use pam_usb, add the same line at the beginning of /etc/pam.d/su. This may be required for other pam-aware applications as well.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Github repository\n- Github wiki\n\n"
    }
  ]
}