{
  "title": "Ovmf vfio",
  "url": "https://wiki.archlinux.org/title/Ovmf_vfio",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Intel GVT-g\n- PCI passthrough via OVMF/Examples\n- QEMU/Guest graphics acceleration\n\nThe Open Virtual Machine Firmware (OVMF) is a project to enable UEFI support for virtual machines. Starting with Linux 3.9 and recent versions of QEMU, it is now possible to passthrough a graphics card, offering the virtual machine native graphics performance which is useful for graphic-intensive tasks.\n\nProvided you have a desktop computer with a spare GPU you can dedicate to the host (be it an integrated GPU or an old OEM card, the brands do not even need to match) and that your hardware supports it (see #Prerequisites), it is possible to have a virtual machine of any OS with its own dedicated GPU and near-native performance. For more information on techniques see the background presentation (pdf).\n\n"
    },
    {
      "title": "Prerequisites",
      "level": 2,
      "content": "A VGA Passthrough relies on a number of technologies that are not ubiquitous as of today and might not be available on your hardware. You will not be able to do this on your machine unless the following requirements are met:\n\n- Your CPU must support hardware virtualization (for kvm) and IOMMU (for the passthrough itself). List of compatible Intel CPUs (Intel VT-x and Intel VT-d). All AMD CPUs from the Bulldozer generation and up (including Zen) should be compatible. CPUs from the K10 generation (2007) do not have an IOMMU, so you need to have a motherboard with a 890FX or 990FX chipset to make it work, as those have their own IOMMU.\n- Your motherboard must also support IOMMU. Both the chipset and the BIOS must support it. It is not always easy to tell at a glance whether or not this is the case, but there is a fairly comprehensive list on the matter on the Xen wiki as well as Wikipedia:List of IOMMU-supporting hardware.\n- Your guest GPU ROM must support UEFI. If you can find any ROM in this list that applies to your specific GPU and is said to support UEFI, you are generally in the clear. All GPUs from 2012 and later should support this, as Microsoft made UEFI a requirement for devices to be marketed as compatible with Windows 8.\n\n- List of compatible Intel CPUs (Intel VT-x and Intel VT-d).\n- All AMD CPUs from the Bulldozer generation and up (including Zen) should be compatible. CPUs from the K10 generation (2007) do not have an IOMMU, so you need to have a motherboard with a 890FX or 990FX chipset to make it work, as those have their own IOMMU.\n\n- CPUs from the K10 generation (2007) do not have an IOMMU, so you need to have a motherboard with a 890FX or 990FX chipset to make it work, as those have their own IOMMU.\n\n- Both the chipset and the BIOS must support it. It is not always easy to tell at a glance whether or not this is the case, but there is a fairly comprehensive list on the matter on the Xen wiki as well as Wikipedia:List of IOMMU-supporting hardware.\n\n- If you can find any ROM in this list that applies to your specific GPU and is said to support UEFI, you are generally in the clear. All GPUs from 2012 and later should support this, as Microsoft made UEFI a requirement for devices to be marketed as compatible with Windows 8.\n\nYou will probably want to have a spare monitor or one with multiple input ports connected to different GPUs (the passthrough GPU will not display anything if there is no screen plugged in and using a VNC or Spice connection will not help your performance), as well as a mouse and a keyboard you can pass to your virtual machine. If anything goes wrong, you will at least have a way to control your host machine this way.\n\n"
    },
    {
      "title": "Setting up IOMMU",
      "level": 2,
      "content": "- IOMMU is a generic name for Intel VT-d and AMD-Vi.\n- VT-d stands for Intel Virtualization Technology for Directed I/O and should not be confused with VT-x Intel Virtualization Technology. VT-x allows one hardware platform to function as multiple “virtual” platforms while VT-d improves security and reliability of the systems and also improves performance of I/O devices in virtualized environments.\n\nUsing IOMMU opens to features like PCI passthrough and memory protection from faulty or malicious devices, see Wikipedia:Input-output memory management unit#Advantages and Memory Management (computer programming): Could you explain IOMMU in plain English?.\n\n"
    },
    {
      "title": "Enabling IOMMU",
      "level": 3,
      "content": "Ensure that AMD-Vi or Intel VT-d is supported by your CPU and enabled in the BIOS settings. These options typically appear alongside other CPU features, which may be located in an overclocking-related menu. They may be listed under their actual names (\"VT-d\" or \"AMD-Vi\") or in more ambiguous terms such as \"Virtualization Technology,\" which may or may not be explained in the motherboard manual.\n\nUse dmesg to check whether IOMMU is enabled:\n\n```\n# dmesg | grep -i IOMMU\n```\n\n```\n[    0.000000] ACPI: DMAR 0x00000000BDCB1CB0 0000B8 (v01 INTEL  BDW      00000001 INTL 00000001)\n[    0.000000] Intel-IOMMU: enabled\n[    0.028879] dmar: IOMMU 0: reg_base_addr fed90000 ver 1:0 cap c0000020660462 ecap f0101a\n[    0.028883] dmar: IOMMU 1: reg_base_addr fed91000 ver 1:0 cap d2008c20660462 ecap f010da\n[    0.028950] IOAPIC id 8 under DRHD base  0xfed91000 IOMMU 1\n[    0.536212] DMAR: No ATSR found\n[    0.536229] IOMMU 0 0xfed90000: using Queued invalidation\n[    0.536230] IOMMU 1 0xfed91000: using Queued invalidation\n[    0.536231] IOMMU: Setting RMRR:\n[    0.536241] IOMMU: Setting identity map for device 0000:00:02.0 [0xbf000000 - 0xcf1fffff]\n[    0.537490] IOMMU: Setting identity map for device 0000:00:14.0 [0xbdea8000 - 0xbdeb6fff]\n[    0.537512] IOMMU: Setting identity map for device 0000:00:1a.0 [0xbdea8000 - 0xbdeb6fff]\n[    0.537530] IOMMU: Setting identity map for device 0000:00:1d.0 [0xbdea8000 - 0xbdeb6fff]\n[    0.537543] IOMMU: Prepare 0-16MiB unity mapping for LPC\n[    0.537549] IOMMU: Setting identity map for device 0000:00:1f.0 [0x0 - 0xffffff]\n[    2.182790] [drm] DMAR active, disabling use of stolen memory\n```\n\nTo manually enable IOMMU support, set the correct kernel parameter depending on the type of CPU in use:\n\n- For Intel CPUs (VT-d) set intel_iommu=on, unless your kernel sets the CONFIG_INTEL_IOMMU_DEFAULT_ON config option.\n- For AMD CPUs (AMD-Vi), IOMMU support is enabled automatically if the kernel detects IOMMU hardware support from the BIOS.\n\n"
    },
    {
      "title": "Ensuring that the groups are valid",
      "level": 3,
      "content": "The following script should allow you to see how your various PCI devices are mapped to IOMMU groups. If it does not return anything, you either have not enabled IOMMU support properly or your hardware does not support it.\n\n```\n#!/bin/bash\nshopt -s nullglob\nfor g in $(find /sys/kernel/iommu_groups/* -maxdepth 0 -type d | sort -V); do\n    echo \"IOMMU Group ${g##*/}:\"\n    for d in $g/devices/*; do\n        echo -e \"\\t$(lspci -nns ${d##*/})\"\n    done;\ndone;\n```\n\nExample output:\n\n```\nIOMMU Group 1:\n\t00:01.0 PCI bridge: Intel Corporation Xeon E3-1200 v2/3rd Gen Core processor PCI Express Root Port [8086:0151] (rev 09)\nIOMMU Group 2:\n\t00:14.0 USB controller: Intel Corporation 7 Series/C210 Series Chipset Family USB xHCI Host Controller [8086:0e31] (rev 04)\nIOMMU Group 4:\n\t00:1a.0 USB controller: Intel Corporation 7 Series/C210 Series Chipset Family USB Enhanced Host Controller #2 [8086:0e2d] (rev 04)\nIOMMU Group 10:\n\t00:1d.0 USB controller: Intel Corporation 7 Series/C210 Series Chipset Family USB Enhanced Host Controller #1 [8086:0e26] (rev 04)\nIOMMU Group 13:\n\t06:00.0 VGA compatible controller: NVIDIA Corporation GM204 [GeForce GTX 970] [10de:13c2] (rev a1)\n\t06:00.1 Audio device: NVIDIA Corporation GM204 High Definition Audio Controller [10de:0fbb] (rev a1)\n```\n\nAn IOMMU group is the smallest set of physical devices that can be passed to a virtual machine. For instance, in the example above, both the GPU in 06:00.0 and its audio controller in 6:00.1 belong to IOMMU group 13 and can only be passed together. The frontal USB controller, however, has its own group (group 2) which is separate from both the USB expansion controller (group 10) and the rear USB controller (group 4), meaning that any of them could be passed to a virtual machine without affecting the others.\n\n"
    },
    {
      "title": "Plugging your guest GPU in an unisolated CPU-based PCIe slot",
      "level": 4,
      "content": "Not all PCI-E slots are the same. Most motherboards have PCIe slots provided by both the CPU and the PCH. Depending on your CPU, it is possible that your processor-based PCIe slot does not support isolation properly, in which case the PCI slot itself will appear to be grouped with the device that is connected to it.\n\n```\nIOMMU Group 1:\n\t 00:01.0 PCI bridge: Intel Corporation Xeon E3-1200 v2/3rd Gen Core processor PCI Express Root Port (rev 09)\n\t 01:00.0 VGA compatible controller: NVIDIA Corporation GM107 [GeForce GTX 750] (rev a2)\n\t 01:00.1 Audio device: NVIDIA Corporation Device 0fbc (rev a1)\n```\n\nThis is fine so long as only your guest GPU is included in here, such as above. Depending on what is plugged in to your other PCIe slots and whether they are allocated to your CPU or your PCH, you may find yourself with additional devices within the same group, which would force you to pass those as well. If you are ok with passing everything that is in there to your virtual machine, you are free to continue. Otherwise, you will either need to try and plug your GPU in your other PCIe slots (if you have any) and see if those provide isolation from the rest or to install the ACS override patch, which comes with its own drawbacks. See #Bypassing the IOMMU groups (ACS override patch) for more information.\n\n"
    },
    {
      "title": "Isolating the GPU",
      "level": 2,
      "content": "In order to assign a device to a virtual machine, this device and all those sharing the same IOMMU group must have their driver replaced by a stub driver or a VFIO driver in order to prevent the host machine from interacting with them. In the case of most devices, this can be done on the fly right before the virtual machine starts.\n\nHowever, due to their size and complexity, GPU drivers do not tend to support dynamic rebinding very well, so you cannot just have some GPU you use on the host be transparently passed to a virtual machine without having both drivers conflict with each other. Because of this, it is generally advised to bind those placeholder drivers manually before starting the virtual machine, in order to stop other drivers from attempting to claim it.\n\nThe following section details how to configure a GPU so those placeholder drivers are bound early during the boot process, which makes said device inactive until a virtual machine claims it or the driver is switched back. This is the preferred method, considering it has less caveats than switching drivers once the system is fully online.\n\nStarting with Linux 4.1, the kernel includes vfio-pci. This is a VFIO driver, meaning it fulfills the same role as pci-stub did, but it can also control devices to an extent, such as by switching them into their D3 state when they are not in use.\n\n"
    },
    {
      "title": "Binding vfio-pci via device ID",
      "level": 3,
      "content": "Vfio-pci normally targets PCI devices by ID, meaning you only need to specify the IDs of the devices you intend to passthrough. For the following IOMMU group, you would want to bind vfio-pci with 10de:13c2 and 10de:0fbb, which will be used as example values for the rest of this section.\n\n```\nIOMMU Group 13:\n\t 06:00.0 VGA compatible controller: NVIDIA Corporation GM204 [GeForce GTX 970] [10de:13c2] (rev a1)\n\t 06:00.1 Audio device: NVIDIA Corporation GM204 High Definition Audio Controller [10de:0fbb] (rev a1)\n```\n\nNote: **must not** \n\n- You cannot specify which device to isolate using vendor-device ID pairs if the host GPU and the guest GPU share the same pair (i.e : if both are the same model). If this is your case, read #Using identical guest and host GPUs instead.\n- If, as noted in #Plugging your guest GPU in an unisolated CPU-based PCIe slot, your pci root port is part of your IOMMU group, you must not pass its ID to vfio-pci, as it needs to remain attached to the host to function properly. Any other device within that group, however, should be left for vfio-pci to bind with.\n- Binding the audio device (10de:0fbb in above's example) is optional. Libvirt is able to unbind it from the snd_hda_intel driver on its own.\n\nProviding the device IDs is done via the kernel module parameter ids=10de:13c2,10de:0fbb for vfio-pci.\n\nIn case of wanting to keep the HDAudio in the host it can be detached by using the kernel module parameters gpu_bind=0 for snd-hda-core and enable_acomp=n for snd-hda-codec-hdmi.\n\nYou can use this bash script without kernel vfio-pci ID. GPU can function in host after calling unbind_vfio.\n\n```\n#!/bin/bash\n\ngpu=\"0000:06:00.0\"\naud=\"0000:06:00.1\"\ngpu_vd=\"$(cat /sys/bus/pci/devices/$gpu/vendor) $(cat /sys/bus/pci/devices/$gpu/device)\"\naud_vd=\"$(cat /sys/bus/pci/devices/$aud/vendor) $(cat /sys/bus/pci/devices/$aud/device)\"\n\nfunction bind_vfio {\n  echo \"$gpu\" > \"/sys/bus/pci/devices/$gpu/driver/unbind\"\n  echo \"$aud\" > \"/sys/bus/pci/devices/$aud/driver/unbind\"\n  echo \"$gpu_vd\" > /sys/bus/pci/drivers/vfio-pci/new_id\n  echo \"$aud_vd\" > /sys/bus/pci/drivers/vfio-pci/new_id\n}\n \nfunction unbind_vfio {\n  echo \"$gpu_vd\" > \"/sys/bus/pci/drivers/vfio-pci/remove_id\"\n  echo \"$aud_vd\" > \"/sys/bus/pci/drivers/vfio-pci/remove_id\"\n  echo 1 > \"/sys/bus/pci/devices/$gpu/remove\"\n  echo 1 > \"/sys/bus/pci/devices/$aud/remove\"\n  echo 1 > \"/sys/bus/pci/rescan\"\n}\n```\n\n"
    },
    {
      "title": "Loading vfio-pci early",
      "level": 3,
      "content": "Since Arch's linux has vfio-pci built as a module, we need to force it to load before the graphics drivers have a chance to bind to the card. There are two methods: modprobe configuration, or adding the modules to initramfs.\n\n"
    },
    {
      "title": "modprobe.d",
      "level": 4,
      "content": "This method loads vfio when udev loads GPU drivers. This avoids bloating initramfs and slowing boot times unnecessarily.\n\n```\n/etc/modprobe.d/vfio.conf\n```\n\n```\nsoftdep drm pre: vfio-pci\n```\n\nIf you are passing through an Nvidia GPU and have the proprietary nvidia driver installed, use the following instead:\n\n```\n/etc/modprobe.d/vfio.conf\n```\n\n```\nsoftdep nvidia pre: vfio-pci\n```\n\n"
    },
    {
      "title": "initramfs",
      "level": 4,
      "content": "Add vfio_pci, vfio, and vfio_iommu_type1 to mkinitcpio:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nMODULES=(... vfio_pci vfio vfio_iommu_type1 ...)\n```\n\nNote: **must** \n\n- As of kernel 6.2, the vfio_virqfd functionality has been folded into the base vfio module.\n- If you also have another driver loaded this way for early modesetting (such as nouveau, radeon, amdgpu, i915, etc.), all of the aforementioned VFIO modules must precede it.\n- If you are modesetting the nvidia driver, the vfio-pci.ids must be embedded in the initramfs image. If given via kernel arguments, they will be read too late to take effect. Follow the instructions in #Binding vfio-pci via device ID for adding the ids to a modprobe conf file.\n\nAlso, ensure that the modconf hook is included in the HOOKS list of mkinitcpio.conf:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nHOOKS=(... modconf ...)\n```\n\nSince new modules have been added to the initramfs configuration, you must regenerate the initramfs.\n\nSimilar to mkinitcpio you need to specify modules to load early:\n\n```\n/etc/booster.yaml\n```\n\n```\nmodules_force_load: vfio_pci,vfio,vfio_iommu_type1\n```\n\nand then regenerate the initramfs.\n\nFollowing the same idea, we need to ensure all vfio drivers are in the initramfs. Add the following file to /etc/dracut.conf.d:\n\n```\n10-vfio.conf\n```\n\n```\nforce_drivers+=\" vfio_pci vfio vfio_iommu_type1 \"\n```\n\nNote that we used force_drivers instead the usual add_drivers option, which will ensure that the drivers are tried to be loaded early via modprobe (Dracut#Early kernel module loading).\n\nAs with mkinitcpio, you must regenerate the initramfs afterwards. See dracut for more details.\n\n"
    },
    {
      "title": "Verifying that the configuration worked",
      "level": 3,
      "content": "Reboot and verify that vfio-pci has loaded properly and that it is now bound to the right devices.\n\n```\n# dmesg | grep -i vfio\n```\n\n```\n[    0.329224] VFIO - User Level meta-driver version: 0.3\n[    0.341372] vfio_pci: add [10de:13c2[ffff:ffff]] class 0x000000/00000000\n[    0.354704] vfio_pci: add [10de:0fbb[ffff:ffff]] class 0x000000/00000000\n[    2.061326] vfio-pci 0000:06:00.0: enabling device (0100 -> 0103)\n```\n\nIt is not necessary for all devices (or even expected device) from vfio.conf to be in dmesg output. Even if a device does not appear, it might still be visible and usable in the guest virtual machine.\n\n```\n$ lspci -nnk -d 10de:13c2\n```\n\n```\n06:00.0 VGA compatible controller: NVIDIA Corporation GM204 [GeForce GTX 970] [10de:13c2] (rev a1)\n\tKernel driver in use: vfio-pci\n\tKernel modules: nouveau nvidia\n```\n\n```\n$ lspci -nnk -d 10de:0fbb\n```\n\n```\n06:00.1 Audio device: NVIDIA Corporation GM204 High Definition Audio Controller [10de:0fbb] (rev a1)\n\tKernel driver in use: vfio-pci\n\tKernel modules: snd_hda_intel\n```\n\n"
    },
    {
      "title": "Setting up an OVMF-based guest virtual machine",
      "level": 2,
      "content": "OVMF is an open-source UEFI firmware for QEMU virtual machines. While it is possible to use SeaBIOS to get similar results to an actual PCI passthrough, the setup process is different and it is generally preferable to use the EFI method if your hardware supports it.\n\n"
    },
    {
      "title": "Configuring libvirt",
      "level": 3,
      "content": "Libvirt is a wrapper for a number of virtualization utilities that greatly simplifies the configuration and deployment process of virtual machines. In the case of KVM and QEMU, the frontend it provides allows us to avoid dealing with the permissions for QEMU and make it easier to add and remove various devices on a live virtual machine. Its status as a wrapper, however, means that it might not always support all of the latest qemu features, which could end up requiring the use of a wrapper script to provide some extra arguments to QEMU.\n\nInstall qemu-desktop, libvirt, edk2-ovmf, and virt-manager. For the default network connection dnsmasq is required.\n\nFollow Libvirt#Configuration to configure libvirt for use.\n\nYou may also need to activate the default libvirt network:\n\n```\n# virsh net-autostart default\n# virsh net-start default\n```\n\n"
    },
    {
      "title": "Setting up the guest OS",
      "level": 3,
      "content": "The process of setting up a virtual machine using virt-manager is mostly self-explanatory, as most of the process comes with fairly comprehensive on-screen instructions.\n\nHowever, you should pay special attention to the following steps:\n\n- When the virtual machine creation wizard asks you to name your virtual machine (final step before clicking \"Finish\"), check the \"Customize before install\" checkbox.\n- In the \"Overview\" section, set your firmware to \"UEFI\". If the option is grayed out, make sure that: Your hypervisor is running as a system session and not a user session. This can be verified by clicking, then hovering over the session in virt-manager. If you are accidentally running it as a user session, you must open a new connection by clicking \"File\" > \"Add Connection..\", then select the option from the drop-down menu station \"QEMU/KVM\" and not \"QEMU/KVM user session\".\n- In the \"CPUs\" section, change your CPU model to \"host-passthrough\". If it is not in the list, you will have to either type it by hand or by using virt-xml vmname --edit --cpu host-passthrough. This will ensure that your CPU is detected properly, since it causes libvirt to expose your CPU capabilities exactly as they are instead of only those it recognizes (which is the preferred default behavior to make CPU behavior easier to reproduce). Without it, some applications may complain about your CPU being of an unknown model.\n- If you want to minimize IO overhead, it is easier to setup #Virtio disk before installing\n\n- Your hypervisor is running as a system session and not a user session. This can be verified by clicking, then hovering over the session in virt-manager. If you are accidentally running it as a user session, you must open a new connection by clicking \"File\" > \"Add Connection..\", then select the option from the drop-down menu station \"QEMU/KVM\" and not \"QEMU/KVM user session\".\n\nThe rest of the installation process will take place as normal using a standard QXL video adapter running in a window. At this point, there is no need to install additional drivers for the rest of the virtual devices, since most of them will be removed later on. Once the guest OS is done installing, simply turn off the virtual machine. It is possible you will be dropped into the UEFI menu instead of starting the installation upon powering your virtual machine for the first time. Sometimes the correct ISO file was not automatically detected and you will need to manually specify the drive to boot. By typing exit and navigating to \"boot manager\" you will enter a menu that allows you to choose between devices.\n\n"
    },
    {
      "title": "Attaching the PCI devices",
      "level": 3,
      "content": "With the installation done, it is now possible to edit the hardware details in libvirt and remove virtual integration devices, such as the spice channel and virtual display, the QXL video adapter, the emulated mouse and keyboard and the USB tablet device. For example, remove the following sections from your XML file:\n\n```\n<channel type=\"spicevmc\">\n      ...\n    </channel>\n    <input type=\"tablet\" bus=\"usb\">\n      ...\n    </input>\n    <input type=\"mouse\" bus=\"ps2\"/>\n    <input type=\"keyboard\" bus=\"ps2\"/>\n    <graphics type=\"spice\" autoport=\"yes\">\n      ...\n    </graphics>\n    <video>\n      <model type=\"qxl\" .../>\n      ...\n    </video>\n```\n\nSince that leaves you with no input devices, you may want to bind a few USB host devices to your virtual machine as well, but remember to leave at least one mouse and/or keyboard assigned to your host in case something goes wrong with the guest. This may be done by using Add Hardware > USB Host Device.\n\nAt this point, it also becomes possible to attach the PCI device that was isolated earlier; simply click on \"Add Hardware\" and select the PCI Host Devices you want to passthrough. If everything went well, the screen plugged into your GPU should show the OVMF splash screen and your virtual machine should start up normally. From there, you can setup the drivers for the rest of your virtual machine.\n\n"
    },
    {
      "title": "Video card driver virtualisation detection",
      "level": 3,
      "content": "Video card drivers by AMD incorporate very basic virtual machine detection targeting Hyper-V extensions. Should this detection mechanism trigger, the drivers will refuse to run, resulting in a black screen.\n\nIf this is the case, it is required to modify the reported Hyper-V vendor ID:\n\n```\n$ virsh edit vmname\n```\n\n```\n...\n<features>\n  ...\n  <hyperv>\n    ...\n    <vendor_id state='on' value='randomid'/>\n    ...\n  </hyperv>\n  ...\n</features>\n...\n```\n\nNvidia guest drivers prior to version 465 exhibited a similar behaviour which resulted in a generic error 43 in the card's device manager status. Systems using these older drivers therefore also need the above modification. In addition, they also require hiding the KVM CPU leaf:\n\n```\n$ virsh edit vmname\n```\n\n```\n...\n<features>\n  ...\n  <kvm>\n    <hidden state='on'/>\n  </kvm>\n  ...\n</features>\n...\n```\n\nNote that the above steps do not equate 'hiding' the virtual machine from Windows or any drivers/programs running in the virtual machine. Also, various other issues not related to any detection mechanism referred to here can also trigger error 43.\n\n"
    },
    {
      "title": "Passing keyboard/mouse via Evdev",
      "level": 3,
      "content": "If you do not have a spare mouse or keyboard to dedicate to your guest, and you do not want to suffer from the video overhead of Spice, you can setup evdev to share them between your Linux host and your virtual machine.\n\nNote: You can change this hotkeys. You need to set grabToggle variable to one of available combination ctrl-ctrl, alt-alt, shift-shift, meta-meta, scrolllock or ctrl-scrolllock for your keyboard. More information: https://github.com/libvirt/libvirt/blob/master/docs/formatdomain.rst#input-devices\n\nYou can change this hotkeys. You need to set grabToggle variable to one of available combination ctrl-ctrl, alt-alt, shift-shift, meta-meta, scrolllock or ctrl-scrolllock for your keyboard. More information: https://github.com/libvirt/libvirt/blob/master/docs/formatdomain.rst#input-devices\n\nFirst, find your keyboard and mouse devices in /dev/input/by-id/. Only devices with event in their name are valid. You may find multiple devices associated to your mouse or keyboard, so try cat /dev/input/by-id/device_id and either hit some keys on the keyboard or wiggle your mouse to see if input comes through, if so you have got the right device. Now add those devices to your configuration:\n\n```\n$ virsh edit vmname\n```\n\n```\n...\n  <devices>\n    ...\n    <input type='evdev'>\n      <source dev='/dev/input/by-id/MOUSE_NAME'/>\n    </input>\n    <input type='evdev'>\n      <source dev='/dev/input/by-id/KEYBOARD_NAME' grab='all' repeat='on' grabToggle='ctrl-ctrl'/>\n    </input>\n    ...\n  </devices>\n```\n\nReplace MOUSE_NAME and KEYBOARD_NAME with your device path. Now you can startup the guest OS and test swapping control of your mouse and keyboard between the host and guest by pressing both the left and right control keys at the same time.\n\nYou may also consider switching from PS/2 to Virtio inputs in your configurations. Add these two devices:\n\n```\n$ virsh edit vmname\n```\n\n```\n...\n<input type='mouse' bus='virtio'/>\n<input type='keyboard' bus='virtio'/>\n...\n```\n\nThe virtio input devices will not actually be used until the guest drivers are installed. QEMU will continue to send key events to the PS2 devices until it detects the virtio input driver initialization. Note that the PS2 devices cannot be removed as they are an internal function of the emulated Q35/440FX chipsets.\n\n"
    },
    {
      "title": "Using a non-EFI image on an OVMF-based virtual machine",
      "level": 4,
      "content": "The OVMF firmware does not support booting off non-EFI mediums. If the installation process drops you in a UEFI shell right after booting, you may have an invalid EFI boot media. Try using an alternate Linux/Windows image to determine if you have an invalid media.\n\n"
    },
    {
      "title": "Performance tuning",
      "level": 2,
      "content": "Most use cases for PCI passthroughs relate to performance-intensive domains such as video games and GPU-accelerated tasks. While a PCI passthrough on its own is a step towards reaching native performance, there are still a few ajustments on the host and guest to get the most out of your virtual machine.\n\n"
    },
    {
      "title": "CPU pinning",
      "level": 3,
      "content": "The default behavior for KVM guests is to run operations coming from the guest as a number of threads representing virtual processors. Those threads are managed by the Linux scheduler like any other thread and are dispatched to any available CPU cores based on niceness and priority queues. As such, the local CPU cache benefits (L1/L2/L3) are lost each time the host scheduler reschedules the virtual CPU thread on a different physical CPU. This can noticeably harm performance on the guest. CPU pinning aims to resolve this by limiting which physical CPUs the virtual CPUs are allowed to run on. The ideal setup is a one to one mapping such that the virtual CPU cores match physical CPU cores while taking hyperthreading/SMT into account.\n\nIn addition, in some modern CPUs, groups of cores often share a common L3 cache. In such cases, care should be taken to pin exactly those physical cores that share a particular L3. Failing to do so might lead to cache evictions which could result in microstutters.\n\n"
    },
    {
      "title": "CPU topology",
      "level": 4,
      "content": "Most modern CPUs support hardware multitasking, also known as hyper-threading on Intel CPUs or SMT on AMD CPUs. Hyper-threading/SMT is simply a very efficient way of running two threads on one CPU core at any given time. You will want to take into consideration that the CPU pinning you choose will greatly depend on what you do with your host while your virtual machine is running.\n\nTo find the topology for your CPU run lscpu -e:\n\nNote: **\"CORE\"** \n\nlscpu -e on a 6c/12t Ryzen 5 1600:\n\n```\nCPU NODE SOCKET CORE L1d:L1i:L2:L3 ONLINE MAXMHZ    MINMHZ\n0   0    0      0    0:0:0:0       yes    3800.0000 1550.0000\n1   0    0      0    0:0:0:0       yes    3800.0000 1550.0000\n2   0    0      1    1:1:1:0       yes    3800.0000 1550.0000\n3   0    0      1    1:1:1:0       yes    3800.0000 1550.0000\n4   0    0      2    2:2:2:0       yes    3800.0000 1550.0000\n5   0    0      2    2:2:2:0       yes    3800.0000 1550.0000\n6   0    0      3    3:3:3:1       yes    3800.0000 1550.0000\n7   0    0      3    3:3:3:1       yes    3800.0000 1550.0000\n8   0    0      4    4:4:4:1       yes    3800.0000 1550.0000\n9   0    0      4    4:4:4:1       yes    3800.0000 1550.0000\n10  0    0      5    5:5:5:1       yes    3800.0000 1550.0000\n11  0    0      5    5:5:5:1       yes    3800.0000 1550.0000\n```\n\nConsidering the L3 mapping, it is recommended to pin and isolate CPUs 6–11. Pinning and isolating fewer than these (e.g. 8–11) would result in the host system making use of the L3 cache in core 6 and 7 which would eventually lead to cache evictions and therefore bad performance.\n\nlscpu -e on a 6c/12t Intel 8700k:\n\n```\nCPU NODE SOCKET CORE L1d:L1i:L2:L3 ONLINE MAXMHZ    MINMHZ\n0   0    0      0    0:0:0:0       yes    4600.0000 800.0000\n1   0    0      1    1:1:1:0       yes    4600.0000 800.0000\n2   0    0      2    2:2:2:0       yes    4600.0000 800.0000\n3   0    0      3    3:3:3:0       yes    4600.0000 800.0000\n4   0    0      4    4:4:4:0       yes    4600.0000 800.0000\n5   0    0      5    5:5:5:0       yes    4600.0000 800.0000\n6   0    0      0    0:0:0:0       yes    4600.0000 800.0000\n7   0    0      1    1:1:1:0       yes    4600.0000 800.0000\n8   0    0      2    2:2:2:0       yes    4600.0000 800.0000\n9   0    0      3    3:3:3:0       yes    4600.0000 800.0000\n10  0    0      4    4:4:4:0       yes    4600.0000 800.0000\n11  0    0      5    5:5:5:0       yes    4600.0000 800.0000\n```\n\nSince all cores are connected to the same L3 in this example, it does not matter much how many CPUs you pin and isolate as long as you do it in the proper thread pairs. For instance, (0, 6), (1, 7), etc.\n\nAs we see above, with AMD Core 0 is sequential with CPU 0 & 1, whereas Intel places Core 0 on CPU 0 & 6.\n\nIf you do not need all cores for the guest, it would then be preferable to leave at the very least one core for the host. Choosing which cores one to use for the host or guest should be based on the specific hardware characteristics of your CPU, however Core 0 is a good choice for the host in most cases. If any cores are reserved for the host, it is recommended to pin the emulator and iothreads, if used, to the host cores rather than the VCPUs. This may improve performance and reduce latency for the guest since those threads will not pollute the cache or contend for scheduling with the guest VCPU threads. If all cores are passed to the guest, there is no need or benefit to pinning the emulator or iothreads.\n\n"
    },
    {
      "title": "XML examples",
      "level": 4,
      "content": "Note: **iothread** \n\n```\n$ virsh edit vmname\n```\n\n```\n...\n<vcpu placement='static'>4</vcpu>\n<cputune>\n    <vcpupin vcpu='0' cpuset='0'/>\n    <vcpupin vcpu='1' cpuset='1'/>\n    <vcpupin vcpu='2' cpuset='2'/>\n    <vcpupin vcpu='3' cpuset='3'/>\n</cputune>\n...\n```\n\n```\n$ virsh edit vmname\n```\n\n```\n...\n<vcpu placement='static'>8</vcpu>\n<iothreads>1</iothreads>\n<cputune>\n    <vcpupin vcpu='0' cpuset='2'/>\n    <vcpupin vcpu='1' cpuset='8'/>\n    <vcpupin vcpu='2' cpuset='3'/>\n    <vcpupin vcpu='3' cpuset='9'/>\n    <vcpupin vcpu='4' cpuset='4'/>\n    <vcpupin vcpu='5' cpuset='10'/>\n    <vcpupin vcpu='6' cpuset='5'/>\n    <vcpupin vcpu='7' cpuset='11'/>\n    <emulatorpin cpuset='0,6'/>\n    <iothreadpin iothread='1' cpuset='0,6'/>\n</cputune>\n    ...\n<cpu mode='host-passthrough'>\n    <topology sockets='1' cores='4' threads='2'/>\n</cpu>\n    ...\n```\n\n```\n$ virsh edit vmname\n```\n\n```\n...\n<vcpu placement='static'>8</vcpu>\n<iothreads>1</iothreads>\n<cputune>\n  <vcpupin vcpu='0' cpuset='2'/>\n  <vcpupin vcpu='1' cpuset='3'/>\n  <vcpupin vcpu='2' cpuset='4'/>\n  <vcpupin vcpu='3' cpuset='5'/>\n  <vcpupin vcpu='4' cpuset='6'/>\n  <vcpupin vcpu='5' cpuset='7'/>\n  <vcpupin vcpu='6' cpuset='8'/>\n  <vcpupin vcpu='7' cpuset='9'/>\n  <emulatorpin cpuset='0-1'/>\n  <iothreadpin iothread='1' cpuset='0-1'/>\n</cputune>\n    ...\n<cpu mode='host-passthrough'>\n    <topology sockets='1' cores='4' threads='2'/>\n</cpu>\n    ...\n```\n\nNote: **isolcpus** \n\nIf you do not intend to be doing any computation-heavy work on the host (or even anything at all) at the same time as you would on the virtual machine, you may want to pin your virtual machine threads across all of your cores, so that the virtual machine can fully take advantage of the spare CPU time the host has available. Be aware that pinning all physical and logical cores of your CPU could induce latency in the guest virtual machine.\n\n"
    },
    {
      "title": "Huge memory pages",
      "level": 3,
      "content": "When dealing with applications that require large amounts of memory, memory latency can become a problem since the more memory pages are being used, the more likely it is that this application will attempt to access information across multiple memory \"pages\", which is the base unit for memory allocation. Resolving the actual address of the memory page takes multiple steps, and so CPUs normally cache information on recently used memory pages to make subsequent uses on the same pages faster. Applications using large amounts of memory run into a problem where, for instance, a virtual machine uses 4 GiB of memory divided into 4 KiB pages (which is the default size for normal pages) for a total of 1.04 million pages, meaning that such cache misses can become extremely frequent and greatly increase memory latency. Huge pages exist to mitigate this issue by giving larger individual pages to those applications, increasing the odds that multiple operations will target the same page in succession.\n\n"
    },
    {
      "title": "Transparent huge pages",
      "level": 4,
      "content": "QEMU will use 2MiB sized transparent huge pages automatically without any explicit configuration in QEMU or Libvirt, subject to some important caveats. When using VFIO the pages are locked in at boot time and transparent huge pages are allocated up front when the virtual machine first boots. If the kernel memory is highly fragmented, or the virtual machine is using a majority of the remaining free memory, it is likely that the kernel will not have enough 2MiB pages to fully satisfy the allocation. In such a case, it silently fails by using a mix of 2MiB and 4KiB pages. Since the pages are locked in VFIO mode, the kernel will not be able to convert those 4KiB pages to huge after the virtual machine starts either. The number of available 2MiB huge pages available to THP is the same as via the #Dynamic huge pages mechanism described in the following sections.\n\nTo check how much memory THP is using globally:\n\n```\n$ grep AnonHugePages /proc/meminfo\n```\n\n```\nAnonHugePages:   8091648 kB\n```\n\nTo check a specific QEMU instance. QEMU's PID must be substituted in the grep command:\n\n```\n$ grep -P 'AnonHugePages:\\s+(?!0)\\d+' /proc/[PID]/smaps\n```\n\n```\nAnonHugePages:   8087552 kB\n```\n\nIn this example, the virtual machine was allocated 8388608KiB of memory, but only 8087552KiB was available via THP. The remaining 301056KiB are allocated as 4KiB pages. Aside from manually checking, there is no indication when partial allocations occur. As such, THP's effectiveness is very much dependent on the host system's memory fragmentation at the time of virtual machine startup. If this trade off is unacceptable or strict guarantees are required, #Static huge pages is recommended.\n\nArch kernels have THP compiled in and enabled by default with /sys/kernel/mm/transparent_hugepage/enabled set to madvise mode.\n\n"
    },
    {
      "title": "Static huge pages",
      "level": 4,
      "content": "While transparent huge pages should work in the vast majority of cases, they can also be allocated statically during boot. This should only be needed to make use 1 GiB hugepages on machines that support it, since transparent huge pages normally only go up to 2 MiB.\n\nNote: **even when the virtual machine is not running** \n\nTo allocate huge pages at boot, one must simply specify the desired amount on their kernel command line with hugepages=x. For instance, reserving 1024 pages with hugepages=1024 and the default size of 2048 KiB per huge page creates 2 GiB worth of memory for the virtual machine to use.\n\nIf supported by CPU page size could be set manually. 1 GiB huge page support could be verified by grep pdpe1gb /proc/cpuinfo. Setting 1 GiB huge page size via kernel parameters : default_hugepagesz=1G hugepagesz=1G hugepages=X.\n\nAlso, since static huge pages can only be used by applications that specifically request it, you must add this section in your libvirt domain configuration to allow kvm to benefit from them :\n\n```\n$ virsh edit vmname\n```\n\n```\n...\n<memoryBacking>\n\t<hugepages/>\n</memoryBacking>\n...\n```\n\n"
    },
    {
      "title": "Dynamic huge pages",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nHugepages could be allocated manually via vm.nr_overcommit_hugepages sysctl parameter.\n\n```\n/etc/sysctl.d/10-kvm.conf\n```\n\n```\nvm.nr_hugepages = 0\nvm.nr_overcommit_hugepages = num\n```\n\nWhere num - is the number of huge pages, which default size if 2 MiB. Pages will be automatically allocated, and freed after the virtual machine stops.\n\nMore manual way:\n\n```\n# echo num > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages\n# echo num > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages\n```\n\nFor 2 MiB and 1 GiB page size respectively. And they should be manually freed in the same way.\n\nIt is hardly recommended to drop caches, compact memory and wait a couple of seconds before starting the virtual machine, as there could be not enough free contiguous memory for required huge pages blocks. Especially after some uptime of the host system.\n\n```\n# echo 3 > /proc/sys/vm/drop_caches\n# echo 1 > /proc/sys/vm/compact_memory\n```\n\nTheoretically, 1 GiB pages works as 2 MiB. But practically - no guaranteed way was found to get contiguous 1 GiB memory blocks. Each consequent request of 1 GiB blocks lead to lesser and lesser dynamically allocated count.\n\n"
    },
    {
      "title": "CPU frequency governor",
      "level": 3,
      "content": "Depending on the way your CPU governor is configured, the virtual machine threads may not hit the CPU load thresholds for the frequency to ramp up. Indeed, KVM cannot actually change the CPU frequency on its own, which can be a problem if it does not scale up with vCPU usage as it would result in underwhelming performance. An easy way to see if it behaves correctly is to check if the frequency reported by watch lscpu goes up when running a CPU-intensive task on the guest. If you are indeed experiencing stutter and the frequency does not go up to reach its reported maximum, it may be due to CPU scaling being controlled by the host OS. In this case, try setting all cores to maximum frequency to see if this improves performance. Note that if you are using a modern intel chip with the default pstate driver, cpupower commands will be ineffective, so monitor /proc/cpuinfo to make sure your cpu is actually at max frequency.\n\n"
    },
    {
      "title": "Isolating pinned CPUs",
      "level": 3,
      "content": "CPU pinning by itself will not prevent other host processes from running on the pinned CPUs. Properly isolating the pinned CPUs can reduce latency in the guest virtual machine.\n\n"
    },
    {
      "title": "With isolcpus kernel parameter",
      "level": 4,
      "content": "In this example, let us assume you are using CPUs 4-7. Use the kernel parameters isolcpus nohz_full to completely isolate the CPUs from the kernel. For example:\n\n```\nisolcpus=4-7 nohz_full=4-7\n```\n\nThen, run qemu-system-x86_64 with taskset and chrt:\n\n```\n# chrt -r 1 taskset -c 4-7 qemu-system-x86_64 ...\n```\n\nThe chrt command will ensure that the task scheduler will round-robin distribute work (otherwise it will all stay on the first cpu). For taskset, the CPU numbers can be comma- and/or dash-separated, like \"0,1,2,3\" or \"0-4\" or \"1,7-8,10\" etc.\n\nSee the Internet Archive copy of a Removeddit mirror of a Reddit thread for more info.\n\n"
    },
    {
      "title": "Dynamically isolating CPUs",
      "level": 4,
      "content": "The isolcpus kernel parameter will permanently reserve CPU cores, even when the guest is not running. A more flexible alternative is to dynamically isolate CPUs when starting the guest. This can be achieved with the following alternatives:\n\n- cpuset-gitAUR (vfio-users post, blog post, example script)\n- vfio-isolateAUR\n- systemd\n\nIn this example, we assume a host with 12 CPUs, where CPUs 2-5 and 8-11 are pinned to the guest. Then run the following to isolate the host to CPUs 0, 1, 6, and 7:\n\n```\n# systemctl set-property --runtime -- user.slice AllowedCPUs=0,1,6,7\n# systemctl set-property --runtime -- system.slice AllowedCPUs=0,1,6,7\n# systemctl set-property --runtime -- init.scope AllowedCPUs=0,1,6,7\n```\n\nAfter shutting down the guest, run the following to reallocate all 12 CPUs back to the host:\n\n```\n# systemctl set-property --runtime -- user.slice AllowedCPUs=0-11\n# systemctl set-property --runtime -- system.slice AllowedCPUs=0-11\n# systemctl set-property --runtime -- init.scope AllowedCPUs=0-11\n```\n\nYou can use a libvirt hook to automatically run the above at startup/shutdown of the guest like so:\n\nCreate or edit /etc/libvirt/hooks/qemu with the following content.\n\n```\n/etc/libvirt/hooks/qemu\n```\n\n```\n#!/bin/sh\n\ncommand=$2\n\nif [ \"$command\" = \"started\" ]; then\n    systemctl set-property --runtime -- system.slice AllowedCPUs=0,1,6,7\n    systemctl set-property --runtime -- user.slice AllowedCPUs=0,1,6,7\n    systemctl set-property --runtime -- init.scope AllowedCPUs=0,1,6,7\nelif [ \"$command\" = \"release\" ]; then\n    systemctl set-property --runtime -- system.slice AllowedCPUs=0-11\n    systemctl set-property --runtime -- user.slice AllowedCPUs=0-11\n    systemctl set-property --runtime -- init.scope AllowedCPUs=0-11\nfi\n```\n\nAfterwards make it executable.\n\nRestart libvirtd.service and then start your virtual machine. If you create some heavily multithreaded load on your host now, you should see that it keeps your chosen CPUs free from load while the virtual machine can still make use of it. You should also see those CPUs automatically getting fully used by your host once you terminate the virtual machine.\n\nMore examples are contained in the following reddit threads: [1] [2] [3]\n\nNote that this requires systemd 244 or higher, and cgroups v2, which is now enabled by default.\n\n"
    },
    {
      "title": "Improving performance on AMD CPUs",
      "level": 3,
      "content": "Starting with QEMU 3.1 the TOPOEXT cpuid flag is disabled by default. In order to use hyperthreading (SMT) on AMD CPUs you need to manually enable it:\n\n```\n<cpu mode='host-passthrough' check='none'>\n <topology sockets='1' cores='4' threads='2'/>\n <feature policy='require' name='topoext'/>\n </cpu>\n```\n\ncommit: https://gitlab.com/qemu-project/qemu/-/commit/7210a02c58572b2686a3a8d610c6628f87864aed\n\n"
    },
    {
      "title": "Virtio disk",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with QEMU#Installing virtio drivers.** This article or section is a candidate for merging with QEMU#Installing virtio drivers.\n\nThis article or section is a candidate for merging with QEMU#Installing virtio drivers.\n\nThe default disk types are SATA or IDE emulation out of the box. These controllers offer maximum compatibility but are not suited for efficient virtualization. Two accelerated models exist: virtio-scsi for SCSI emulation and passthrough, or virtio-blk for a more basic block device emulation.\n\n"
    },
    {
      "title": "Drivers",
      "level": 4,
      "content": "- Linux guests should support these out of the box on any modern kernel\n- macOS has virtio-blk support starting in Mojave via AppleVirtIO.kext\n- Windows needs the Windows virtio drivers. virtio-scsi uses the vioscsi driver. virtio-blk uses the viostor driver\n- Windows can be installed directly onto these disks by selecting 'load driver' on the installer disk selection menu. The windows iso and virtio driver iso should both be attached as regular SATA/IDE cdroms during the installation process\n- To switch boot disks to virtio on an existing Windows installation: virtio-blk: Add a temporary disk with bus virtio, boot windows & load the driver for the disk, then shutdown and switch the boot disk disk bus to virtio virtio-scsi: Add a scsi controller with model virtio, boot windows & load the driver for the controller, then shutdown and switch the boot disk bus to scsi (not virtio)\n\n- virtio-blk: Add a temporary disk with bus virtio, boot windows & load the driver for the disk, then shutdown and switch the boot disk disk bus to virtio\n- virtio-scsi: Add a scsi controller with model virtio, boot windows & load the driver for the controller, then shutdown and switch the boot disk bus to scsi (not virtio)\n\n"
    },
    {
      "title": "Considerations",
      "level": 4,
      "content": "- virtio-scsi TRIM support is mature, all versions should support it. Traditionally, virtio-scsi has been the preferred approach for this reason\n- virtio-blk TRIM support is new, this requires qemu 4.0+, guest linux kernel 5.0+, guest windows drivers 0.1.173+\n- Thin provisioning works by enabling TRIM on a sparse image file: discard='unmap'. Unused blocks will be freed and the disk usage will drop (works on both raw and qcow2). Actual on-disk size of a sparse image file may be checked with du /path/to/disk.img\n- Thin provisioning can also work with block storage such as zfs zvols or thin lvm\n- Virt queue count will influence the number of threads inside the guest kernel used for IO processing, suggest using queues='4' or more\n- Native mode (io='native') uses a single threaded model based on linux AIO, is a bit more CPU efficient but may have lower peak performance and does not allow host side caching to be used\n- Threaded mode (io='threads') will spawn dozens of threads on demand as the disk is used. This is less efficient but may perform better if there are enough host cores available to run them, and allows for host side caching to be used\n- Modern versions of libvirt will group the dynamic worker threads created when using threaded mode in with the iothread=1 cgroup for pinning purposes. Very old versions of libvirt left these in the emulator cgroup\n\n"
    },
    {
      "title": "IO threads",
      "level": 4,
      "content": "An IO thread is a dedicated thread for processing disk events, rather than using the main qemu emulator loop. This should not be confused with the worker threads spawned on demand with io='threads'.\n\n- You can only use one iothread per disk controller. The thread must be assigned to a specific controller with iothread='X' in the <driver> tag. Furthermore, extra & unassigned iothreads will not be used and do nothing\n- In the case of virtio-scsi, there is one controller for multiple scsi disks. The iothread is assigned on the controller: <controller><driver iothread='X'>\n- In the case of virtio-blk, each disk has its own controller. The iothread is assigned in the driver tag under the disk itself: <disk><driver iothread='X'>\n- Since emulated disks incur a significant amount of CPU overhead, that can lead to vcpu stuttering under high disk load (especially high random IOPS). In this case it helps to pin the IO to different core(s) than your vcpus with <iothreadpin>\n\n"
    },
    {
      "title": "Examples with libvirt",
      "level": 4,
      "content": "virtio-scsi + iothread + worker threads + host side writeback caching + full disk block device backend:\n\n```\n<domain>\n  <devices>\n    <disk type='block' device='disk'>\n      <driver name='qemu' type='raw' cache='writeback' io='threads' discard='unmap'/>\n      <source dev='/dev/disk/by-id/ata-Samsung_SSD_840_EVO_1TB_S1D9NSAF206396F'/>\n      <target dev='sda' bus='scsi'/>\n    </disk>\n    <controller type='scsi' index='0' model='virtio-scsi'>\n      <driver iothread='1' queues='8'/>\n    </controller>\n```\n\nvirtio-blk + iothread + native aio + no host caching + raw sparse image backend:\n\n```\n<domain>\n  <devices>\n    <disk type='file' device='disk'>\n      <driver name='qemu' type='raw' cache='none' io='native' discard='unmap' iothread='1' queues='8'/>\n      <source file='/var/lib/libvirt/images/pool/win10.img'/>\n      <target dev='vda' bus='virtio'/>\n    </disk>\n```\n\nCreating the iothreads:\n\n```\n<domain>\n  <iothreads>1</iothreads>\n```\n\nPinning iothreads:\n\n```\n<domain>\n  <cputune>\n    <iothreadpin iothread='1' cpuset='0-1,6-7'/>\n```\n\n"
    },
    {
      "title": "Example with virt-manager",
      "level": 4,
      "content": "This will create a virtio-blk device:\n\n1. Open the virtual machine preferences\n1. Go to Add Hardware > Storage\n1. Create or choose a storage file\n1. Select Device Type: Disk device and Bus type: VirtIO\n1. Click Finish\n\n"
    },
    {
      "title": "Virtio network",
      "level": 3,
      "content": "The default NIC models rtl8139 or e1000 can be a bottleneck for gigabit+ speeds and have a significant amount of CPU overhead compared to virtio-net.\n\n- Select virtio as the model for the NIC with libvirt or use the virtio-net-pci device in bare qemu\n- Windows needs the NetKVM driver from Windows virtio drivers\n- Virtio uses vhost-net by default for in-kernel packet processing without exiting to userspace\n- Multiqueue can enabled for a further speedup with multiple connections but typically will not boost single stream speeds. For libvirt add <driver queues='8'/> under the interface tag\n- Zero copy transmit may also be enabled on macvtap by setting the module parameter vhost_net.experimental_zcopytx=1 but this may actually have worse performance, see commit\n\nLibvirt example with a bridge:\n\n```\n<interface type='bridge'>\n  <mac address=\"52:54:00:6d:6e:2e\"/>\n  <source bridge='br0'/>\n  <model type='virtio'/>\n  <driver queues='8'/>\n</interface>\n```\n\nMACVTAP example with a bridge:\n\n```\n<interface type=\"direct\">\n <source dev=\"eno1\" mode=\"vepa\"/>\n <target dev=\"macvtap0\"/>\n <model type=\"virtio\"/>\n <alias name=\"net0\"/>\n</interface>\n```\n\nPossible options for mode are 'vepa', 'bridge', 'private', and 'passthrough'. A guide with decriptions of the differences is available from redhat[4].\n\nReplace the source /dev device with your own device address. You can get your local address with the following command:\n\n```\n$ ip link\n```\n\n```\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\n   link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000\n   link/ether 30:9c:23:ac:51:d0 brd ff:ff:ff:ff:ff:ff\n   altname enp0s31f6\n```\n\n"
    },
    {
      "title": "Further tuning",
      "level": 3,
      "content": "More specialized virtual machine tuning tips are available at Red Hat's Virtualization Tuning and Optimization Guide.\n\n"
    },
    {
      "title": "Special procedures",
      "level": 2,
      "content": "Certain setups require specific configuration tweaks in order to work properly. If you are having problems getting your host or your virtual machine to work properly, see if your system matches one of the cases below and try adjusting your configuration accordingly.\n\n"
    },
    {
      "title": "Using identical guest and host GPUs",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nDue to how vfio-pci uses your vendor and device id pair to identify which device they need to bind to at boot, if you have two GPUs sharing such an ID pair you will not be able to get your passthrough driver to bind with just one of them. This sort of setup makes it necessary to use a script, so that whichever driver you are using is instead assigned by pci bus address using the driver_override mechanism.\n\n"
    },
    {
      "title": "Script variants",
      "level": 4,
      "content": "Here, we will make a script to bind vfio-pci to all GPUs but the boot gpu. Create the script /usr/local/bin/vfio-pci-override.sh:\n\n```\n#!/bin/sh\n\nfor i in /sys/bus/pci/devices/*/boot_vga; do\n    if [ $(cat \"$i\") -eq 0 ]; then\n        GPU=\"${i%/boot_vga}\"\n        AUDIO=\"$(echo \"$GPU\" | sed -e \"s/0$/1/\")\"\n        USB=\"$(echo \"$GPU\" | sed -e \"s/0$/2/\")\"\n        echo \"vfio-pci\" > \"$GPU/driver_override\"\n        if [ -d \"$AUDIO\" ]; then\n            echo \"vfio-pci\" > \"$AUDIO/driver_override\"\n        fi\n        if [ -d \"$USB\" ]; then\n            echo \"vfio-pci\" > \"$USB/driver_override\"\n        fi\n    fi\ndone\n\nmodprobe -i vfio-pci\n```\n\nIn this case we manually specify the GPU to bind.\n\n```\n#!/bin/sh\n\nDEVS=\"0000:03:00.0 0000:03:00.1\"\n\nif [ ! -z \"$(ls -A /sys/class/iommu)\" ]; then\n    for DEV in $DEVS; do\n        echo \"vfio-pci\" > /sys/bus/pci/devices/$DEV/driver_override\n    done\nfi\n\nmodprobe -i vfio-pci\n```\n\nSimplifying the passthrough of other necessary devices from selected GPU(s). Things like the graphicscard's onboard Audio, USB and RGB controllers.\n\n```\n#!/bin/sh\n\nDEVS=\"0000:03:00.0\"\n\nif [ ! -z \"$(ls -A /sys/class/iommu)\" ]; then\n    for DEV in $DEVS; do\n        for IOMMUDEV in $(ls /sys/bus/pci/devices/$DEV/iommu_group/devices) ; do\n            echo \"vfio-pci\" > /sys/bus/pci/devices/$IOMMUDEV/driver_override\n        done\n    done\nfi\n\nmodprobe -i vfio-pci\n```\n\n"
    },
    {
      "title": "Script installation",
      "level": 4,
      "content": "Edit /etc/mkinitcpio.conf:\n\n1. Add modconf to the HOOKS array and /usr/local/bin/vfio-pci-override.sh to the FILES array.\n\nEdit /etc/modprobe.d/vfio.conf:\n\n1. Add the following line: install vfio-pci /usr/local/bin/vfio-pci-override.sh\n1. Regenerate the initramfs and reboot.\n\n"
    },
    {
      "title": "Passing the boot GPU to the guest",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nThe GPU marked as boot_vga is a special case when it comes to doing PCI passthroughs, since the BIOS needs to use it in order to display things like boot messages or the BIOS configuration menu. To do that, it makes a copy of the VGA boot ROM which can then be freely modified. This modified copy is the version the system gets to see, which the passthrough driver may reject as invalid. As such, it is generally recommended to change the boot GPU in the BIOS configuration so the host GPU is used instead or, if that is not possible, to swap the host and guest cards in the machine itself.\n\n"
    },
    {
      "title": "Using Looking Glass to stream guest screen to the host",
      "level": 3,
      "content": "It is possible to make a virtual machine share the monitor, and optionally a keyboard and a mouse with a help of Looking Glass.\n\n"
    },
    {
      "title": "Adding IVSHMEM Device to virtual machines",
      "level": 4,
      "content": "Looking glass works by creating a shared memory buffer between a host and a guest. This is a lot faster than streaming frames via localhost, but requires additional setup.\n\nWith your virtual machine turned off open the machine configuration\n\n```\n$ virsh edit vmname\n```\n\n```\n...\n<devices>\n    ...\n  <shmem name='looking-glass'>\n    <model type='ivshmem-plain'/>\n    <size unit='M'>32</size>\n  </shmem>\n</devices>\n...\n```\n\nYou should replace 32 with your own calculated value based on what resolution you are going to pass through. It can be calculated like this:\n\n```\nwidth x height x 4 x 2 = total bytes\ntotal bytes / 1024 / 1024 = total mebibytes + 10\n```\n\nFor example, in case of 1920x1080\n\n```\n1920 x 1080 x 4 x 2 = 16,588,800 bytes\n16,588,800 / 1024 / 1024 = 15.82 MiB + 10 = 25.82\n```\n\nThe result must be rounded up to the nearest power of two, and since 25.82 is bigger than 16 we should choose 32.\n\nNext create a configuration file to create the shared memory file on boot\n\n```\n/etc/tmpfiles.d/10-looking-glass.conf\n```\n\n```\nf\t/dev/shm/looking-glass\t0660\tuser\tkvm\t-\n```\n\nReplace user with your username.\n\nAsk systemd-tmpfiles to create the shared memory file now without waiting to next boot\n\n```\n# systemd-tmpfiles --create /etc/tmpfiles.d/10-looking-glass.conf\n```\n\n"
    },
    {
      "title": "Installing the IVSHMEM Host to Windows guest",
      "level": 4,
      "content": "Currently Windows would not notify users about a new IVSHMEM device, it would silently install a dummy driver. To actually enable the device you have to go into device manager and update the driver for the device under the \"System Devices\" node for \"PCI standard RAM Controller\". Download the signed driver from Red Hat.\n\nOnce the driver is installed you must download a matching looking-glass-host package that matches the client you will install from AUR, and install it on your guest. In order to run it you would also need to install Microsoft Visual C++ Redistributable from Microsoft. The recent version will automatically install a service that starts the daemon on boot. The logs of the host daemon are located at %ProgramData%\\Looking Glass (host)\\looking-glass-host.txt on the guest system.\n\n"
    },
    {
      "title": "Setting up the null video device",
      "level": 4,
      "content": "(Retrieved from: https://looking-glass.io/docs/stable/install/#spice-server)\n\nIf you would like to use Spice to give you keyboard and mouse input along with clipboard sync support, make sure you have a <graphics type='spice'> device, then:\n\n- Find your <video> device, and set <model type='none'/>\n- If you cannot find it, make sure you have a <graphics> device, save and edit again\n\n"
    },
    {
      "title": "Getting a client",
      "level": 4,
      "content": "Looking glass client can be installed from AUR using looking-glassAUR or looking-glass-gitAUR packages.\n\nYou can start it once the virtual machine is set up and running\n\n```\n$ looking-glass-client\n```\n\nIf you do not want to use Spice to control the guest mouse and keyboard you can disable the Spice server.\n\n```\n$ looking-glass-client -s\n```\n\nAdditionally you may want to start Looking Glass Client in full screen, otherwise the image may be scaled down resulting in poor image fidelity.\n\n```\n$ looking-glass-client -F\n```\n\nTo inhibit your host's screensaver start Looking Glass with the -S flag.\n\n```\n$ looking-glass-client -S\n```\n\nThis does not work on some DEs, including KDE. The issue with KDE is likely related to this behaviour. To temporarily disable the host's screensaver while using Looking Glass and KDE you can wrap Looking Glass in the following script:\n\n```\n#!/bin/sh\nkwriteconfig6 --file kscreenlockerrc --group Daemon --key Autolock false\nqdbus org.freedesktop.ScreenSaver /ScreenSaver configure\nlooking-glass-client\nkwriteconfig6 --file kscreenlockerrc --group Daemon --key Autolock true\nqdbus org.freedesktop.ScreenSaver /ScreenSaver configure\n```\n\nLaunch with the --help option for further information.\n\n"
    },
    {
      "title": "Additional information",
      "level": 4,
      "content": "Refer to the upstream documentation for further details.\n\n"
    },
    {
      "title": "Swap peripherals to and from the Host",
      "level": 3,
      "content": "Looking Glass includes a Spice client in order to control mouse movement on the Windows guest. However this may have too much latency for certain applications, such as gaming. An alternative method is passing through specific USB devices for minimal latency. This allows for switching the devices between host and guest.\n\nFirst create a .xml file for the device(s) you wish to pass-through, which libvirt will use to identify the device.\n\n```\n~/.VFIOinput/input_1.xml\n```\n\n```\n<hostdev mode='subsystem' type='usb'>\n<source>\n<vendor id='0x[Before Colon]'/>\n<product id='0x[After Colon]'/>\n</source>\n</hostdev>\n```\n\nReplace [Before/After Colon] with the contents of the 'lsusb' command, specific to the device you want to pass-through.\n\nFor instance my mouse is Bus 005 Device 002: ID 1532:0037 Razer USA, Ltd so I would replace vendor id with 1532, and product id with 0037.\n\nRepeat this process for any additional USB devices you want to pass-through. If your mouse / keyboard has multiple entries in lsusb, perhaps if it is wireless, then create additional xml files for each.\n\nNext a bash script file is needed to tell libvirt what to attach/detach the USB devices to the guest.\n\n```\n~/.VFIOinput/input_attach.sh\n```\n\n```\n#!/bin/sh\n\nvirsh attach-device [VirtualMachine-Name] [USBdevice]\n```\n\nReplace [VirtualMachine-Name] with the name of your virtual machine, which can be seen under virt-manager. Additionally replace [USBdevice] with the full path to the .xml file for the device you wish to pass-through. Add additional lines for more than 1 device. For example here is my script:\n\n```\n~/.VFIOinput/input_attach.sh\n```\n\n```\n#!/bin/sh\n\nvirsh attach-device win10 /home/$USER/.VFIOinput/input_mouse.xml\nvirsh attach-device win10 /home/$USER/.VFIOinput/input_keyboard.xml\n```\n\nNext duplicate the script file and replace attach-device with detach-device. Ensure both scripts are executable.\n\nThis 2 script files can now be executed to attach or detach your USB devices from the host to the guest virtual machine. It is important to note that they may need to be executed as root. To run the script from the Windows virtual machine, one possibility is using PuTTY to SSH into the host, and execute the script. On Windows PuTTY comes with plink.exe which can execute singular commands over SSH before then logging out, instead of opening a SSH terminal, all in the background.\n\n```\ndetach_devices.bat\n```\n\n```\n\"C:\\Program Files\\PuTTY\\plink.exe\" root@$HOST_IP -pw $ROOTPASSWORD /home/$USER/.VFIOinput/input_detach.sh\n```\n\nReplace $HOST_IP with the Host IP Address and $ROOTPASSWORD with the root password.\n\nYou may also want to execute the script files using key binds. On Windows one option is Autohotkey, and on the Host Xbindkeys. Because of the need to run the scripts as root, you may also need to use Polkit or Sudo which can both be used to authenticate specific executables as able to run as root without needing a password.\n\n"
    },
    {
      "title": "Bypassing the IOMMU groups (ACS override patch)",
      "level": 3,
      "content": "If you find your PCI devices grouped among others that you do not wish to pass through, you may be able to separate them using Alex Williamson's ACS override patch. Make sure you understand the potential risk of doing so.\n\nYou will need a kernel with the patch applied. The easiest method to acquiring this is through the linux-zen or linux-vfioAUR package.\n\nIn addition, the ACS override patch needs to be enabled with kernel command line options. The patch file adds the following documentation:\n\n```\npcie_acs_override =\n        [PCIE] Override missing PCIe ACS support for:\n    downstream\n        All downstream ports - full ACS capabilties\n    multifunction\n        All multifunction devices - multifunction ACS subset\n    id:nnnn:nnnn\n        Specfic device - full ACS capabilities\n        Specified as vid:did (vendor/device ID) in hex\n```\n\nThe option pcie_acs_override=downstream,multifunction should break up as many devices as possible.\n\nAfter installation and configuration, reconfigure your kernel parameters to load the new kernel with the pcie_acs_override= option enabled.\n\n"
    },
    {
      "title": "Plain QEMU without libvirt",
      "level": 2,
      "content": "Instead of setting up a virtual machine with the help of libvirt, plain QEMU commands with custom parameters can be used for running the virtual machine intended to be used with PCI passthrough. This is desirable for some use cases like scripted setups, where the flexibility for usage with other scripts is needed.\n\nTo achieve this after #Setting up IOMMU and #Isolating the GPU, follow the QEMU article to setup the virtualized environment, enable KVM on it and use the flag -device vfio-pci,host=07:00.0 replacing the identifier (07:00.0) with your actual device's ID that you used for the GPU isolation earlier.\n\nFor utilizing the OVMF firmware, make sure the edk2-ovmf package is installed, copy the UEFI variables from /usr/share/edk2/x64/OVMF_VARS.4m.fd to temporary location like /tmp/my_OVMF_VARS.4m.fd and finally specify the OVMF paths by appending the following parameters to the QEMU command (order matters):\n\n- -drive if=pflash,format=raw,readonly=on,file=/usr/share/edk2/x64/OVMF_CODE.4m.fd for the actual OVMF firmware binary, note the readonly option\n- -drive if=pflash,format=raw,file=/tmp/my_OVMF_VARS.4m.fd for the variables\n\n- Make sure that OVMF_CODE.4m.fd is given as a command line parameter before my_OVMF_VARS.4m.fd. The boot sequence will fail otherwise.\n- QEMU's default SeaBIOS can be used instead of OVMF, but it is not recommended as it can cause issues with passthrough setups.\n\nIt is recommended to study the QEMU article for ways to enhance the performance by using the virtio drivers and other further configurations for the setup.\n\nYou also might have to use the -cpu host,kvm=off parameter to forward the host's CPU model info to the virtual machine and fool the virtualization detection used by Nvidia's and possibly other manufacturers' device drivers trying to block the full hardware usage inside a virtualized system.\n\n"
    },
    {
      "title": "USB controller",
      "level": 3,
      "content": "If your motherboard has multiple USB controllers mapped to multiple groups, it is possible to pass those instead of USB devices. Passing an actual controller over an individual USB device provides the following advantages :\n\n- If a device disconnects or changes ID over the course of an given operation (such as a phone undergoing an update), the virtual machine will not suddenly stop seeing it.\n- Any USB port managed by this controller is directly handled by the virtual machine and can have its devices unplugged, replugged and changed without having to notify the hypervisor.\n- Libvirt will not complain if one of the USB devices you usually pass to the guest is missing when starting the virtual machine.\n\nUnlike with GPUs, drivers for most USB controllers do not require any specific configuration to work on a virtual machine and control can normally be passed back and forth between the host and guest systems with no side effects.\n\nYou can find out which USB devices correspond to which controller and how various ports and devices are assigned to each one of them using this command:\n\n```\n$ for usb_ctrl in /sys/bus/pci/devices/*/usb*; do pci_path=${usb_ctrl%/*}; iommu_group=$(readlink $pci_path/iommu_group); echo \"Bus $(cat $usb_ctrl/busnum) --> ${pci_path##*/} (IOMMU group ${iommu_group##*/})\"; lsusb -s ${usb_ctrl#*/usb}:; echo; done\n```\n\n```\nBus 1 --> 0000:00:1a.0 (IOMMU group 4)\nBus 001 Device 004: ID 04f2:b217 Chicony Electronics Co., Ltd Lenovo Integrated Camera (0.3MP)\nBus 001 Device 007: ID 0a5c:21e6 Broadcom Corp. BCM20702 Bluetooth 4.0 [ThinkPad]\nBus 001 Device 008: ID 0781:5530 SanDisk Corp. Cruzer\nBus 001 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n\nBus 2 --> 0000:00:1d.0 (IOMMU group 9)\nBus 002 Device 006: ID 0451:e012 Texas Instruments, Inc. TI-Nspire Calculator\nBus 002 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub\nBus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n```\n\nThis laptop has 3 USB ports managed by 2 USB controllers, each with their own IOMMU group. In this example, Bus 001 manages a single USB port (with a SanDisk USB pendrive plugged into it so it appears on the list), but also a number of internal devices, such as the internal webcam and the bluetooth card. Bus 002, on the other hand, does not apprear to manage anything except for the calculator that is plugged into it. The third port is empty, which is why it does not show up on the list, but is actually managed by Bus 002.\n\nOnce you have identified which controller manages which ports by plugging various devices into them and decided which one you want to passthrough, simply add it to the list of PCI host devices controlled by the virtual machine in your guest configuration. No other configuration should be needed.\n\n"
    },
    {
      "title": "Passing audio from virtual machine to host via PipeWire directly",
      "level": 3,
      "content": "This is preferable to passing audio to the pipewire's pulseaudio emulation layer.\n\n```\n$ virsh edit vmname\n```\n\n```\n<devices> \n    ... \n      <audio id=\"1\" type=\"pipewire\" runtimeDir=\"/run/user/1000\"> \n        <input name=\"qemuinput\"/> \n        <output name=\"qemuoutput\"/> \n      </audio> \n    </devices>\n```\n\n(Please change the runtimeDir value from 1000 accordingly to your desktop user uid)\n\nTo resolve 'Failed to initialize PW context' error you can modify the qemu configuration to use your user.\n\n```\n/etc/libvirt/qemu.conf\n```\n\n```\nuser = \"example\"\n```\n\n"
    },
    {
      "title": "Passing audio from virtual machine to host via PulseAudio",
      "level": 3,
      "content": "It is possible to route the virtual machine's audio to the host as an application using libvirt. This has the advantage of multiple audio streams being routable to one host output, and working with audio output devices that do not support passthrough. This requires PulseAudio to be running on the host system.\n\nFirst, install qemu-audio-pa.\n\nThen, remove the comment from the #user = \"\" line. Then add your username in the quotations. This tells QEMU which user's pulseaudio stream to route through.\n\n```\n/etc/libvirt/qemu.conf\n```\n\n```\nuser = \"example\"\n```\n\nAn emulated audio setup consists of two components: An emulated sound device exposed to the guest and an audio backend connecting the sound device to the host's PulseAudio.\n\nOf the emulated sound devices available, two are of main interest: ICH9 and usb-audio. ICH9 features both output and input but is limited to stereo. usb-audio only features audio output but supports up to 6 channels in 5.1 configuration. For ICH9 remove any pre-existing audio backend in the <devices> section and add:\n\n```\n$ virsh edit vmname\n```\n\n```\n<sound model='ich9'>\n      <codec type='micro'/>\n      <audio id='1'/>\n    </sound>\n    <audio id='1' type='pulseaudio' serverName='/run/user/1000/pulse/native'/>\n```\n\nNote the matching id elements. The example above assumes a single-user system with user ID 1000. Use the id command to find the correct ID. You can also use the /tmp directory if you have multiple users accessing PulseAudio:\n\n```\n$ virsh edit vmname\n```\n\n```\n<audio id='1' type='pulseaudio' serverName='unix:/tmp/pulse-socket'/>\n```\n\nIf you get crackling or distorted sound, try experimenting with some latency settings. The following example uses 20000 microseconds:\n\n```\n$ virsh edit vmname\n```\n\n```\n<audio id=\"1\" type=\"pulseaudio\" serverName=\"/run/user/1000/pulse/native\">\n      <input latency=\"20000\"/>\n      <output latency=\"20000\"/>\n    </audio>\n```\n\nYou can also try disabling the software mixer included in QEMU. This should, in theory, be more efficient and allow for lower latencies since mixing will then take place on your host only:\n\n```\n$ virsh edit vmname\n```\n\n```\n<audio id=\"1\" type=\"pulseaudio\" serverName=\"/run/user/1000/pulse/native\">\n      <input mixingEngine=\"no\"/>\n      <output mixingEngine=\"no\"/>\n    </audio>\n```\n\nFor usb-audio, the corresponding elements read\n\n```\n$ virsh edit vmname\n```\n\n```\n<sound model='usb'>\n      <audio id='1'/>\n    </sound>\n    <audio id='1' type='pulseaudio' serverName='/run/user/1000/pulse/native'/>\n```\n\nHowever, if a 5.1 configuration is required the sound device needs to be configured via QEMU command line arguments:\n\n```\n$ virsh edit vmname\n```\n\n```\n</devices>\n  <qemu:commandline>\n    <qemu:arg value='-device'/>\n    <qemu:arg value='usb-audio,id=sound0,audiodev=audio1,multi=on'/>\n  </qemu:commandline>\n</domain>\n```\n\nThe audiodev tag has to be set to match the audio backend's id element. id='1' corresponds to audio1 and so on.\n\n- You can have multiple audio backends, by simply specifying <audio>/-audiodev multiple times in your XML and by assigning them different ids. This can be useful for a use case of having two identical backends. With PulseAudio each backend is a separate stream and can be routed to different output devices on the host (using a pulse mixer like pavucontrol or pulsemixer).\n- USB 3 emulation is needed in Libvirt/QEMU to enable the usb-audio.\n- It is recommended to enable MSI interrupts with a tool such as [6] on the ICH9 audio device to mitigate any crackling, stuttering, speedup, or no audio at all after virtual machine restart.\n- If audio is crackling/stuttering/speedup etc. is still present you may want to adjust parameters such as buffer-length and timer-period, more information on these parameters and more can be found in the qemu(1) manual.\n- Some audio chipsets such as Realtek alc1220 may also have issues out of the box so do consider this when using any audio emulation with QEMU.\n- Improper pinning or heavy host usage without using isolcpus can also influence sound bugs, especially while gaming in a virtual machine.\n\n"
    },
    {
      "title": "Passing audio from virtual machine to host via JACK and PipeWire",
      "level": 3,
      "content": "It is also possible to pass the virtual machine's audio to the host via JACK and PipeWire.\n\nFirst, make sure you have a working PipeWire setup with JACK support.\n\nNext, you will need to tell libvirt to run QEMU as your user:\n\n```\n/etc/libvirt/qemu.conf\n```\n\n```\nuser = \"example\"\n```\n\nDo not forget to restart libvirtd.service.\n\nAs a final preparation, the XML scheme has to be extended to allow passing of environment variables. For this, modify the virtual machine domain configuration\n\n```\n$ virsh edit vmname\n```\n\n```\n<domain type='kvm'>\n```\n\nto\n\n```\n$ virsh edit vmname\n```\n\n```\n<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>\n```\n\nThen, you can add the actual audio config to your virtual machine:\n\n```\n$ virsh edit vmname\n```\n\n```\n<devices>\n    ...\n      <audio id=\"1\" type=\"jack\">\n        <input clientName=\"vm-win10\" connectPorts=\"your-input\"/>\n        <output clientName=\"vm-win10\" connectPorts=\"your-output\"/>\n      </audio>\n    </devices>\n      <qemu:commandline>\n        <qemu:env name=\"PIPEWIRE_RUNTIME_DIR\" value=\"/run/user/1000\"/>\n        <qemu:env name=\"PIPEWIRE_LATENCY\" value=\"512/48000\"/>\n      </qemu:commandline>\n </domain>\n```\n\nNote the matching id elements. Above's example assumes a single-user system with user ID 1000. Use the id command to find the correct ID.\n\nYou might have to play with the PIPEWIRE_LATENCY values to get to the desired latency without crackling.\n\n"
    },
    {
      "title": "Passing audio from virtual machine to host via Scream",
      "level": 3,
      "content": "It is possible to pass the virtual machine's audio through a bridged network such as the one provided by Libvirt or by adding a IVSHMEM device to the host by using a application called Scream. This section will only cover using PulseAudio as a receiver on the host. See the project page for more details and instructions on other methods.\n\n"
    },
    {
      "title": "Using Scream with a bridged network",
      "level": 4,
      "content": "Note: **e1000e** \n\n- This is the preferred way to use this, although results may vary per user\n- It is recommend to use the #Virtio network adapter while using Scream, other virtual adapters provided by QEMU such as e1000e may lead to poor performance\n\nTo use scream via your network you will want to find your bridge name via ip a, in most cases it will be called br0 or virbr0. Below is a example of the command needed to start the Scream application:\n\n```\n$ scream -o pulse -i virbr0 &\n```\n\nNote: **macvtap bridge** \n\n"
    },
    {
      "title": "Adding the IVSHMEM device to use Scream with IVSHMEM",
      "level": 4,
      "content": "With the virtual machine turned off, edit the machine configuration\n\n```\n$ virsh edit vmname\n```\n\n```\n...\n<devices>\n    ...\n  <shmem name='scream-ivshmem'>\n    <model type='ivshmem-plain'/>\n    <size unit='M'>2</size>\n  </shmem>\n</devices>\n...\n```\n\nIn the above configuration, the size of the IVSHMEM device is 2MB (the recommended amount). Change this as needed.\n\nNow refer to #Adding IVSHMEM Device to virtual machines to configure the host to create the shared memory file on boot, replacing looking-glass with scream-ivshmem.\n\nThe correct driver must be installed for the IVSHMEM device on the guest. See #Installing the IVSHMEM Host to Windows guest. Ignore the part about looking-glass-host.\n\nInstall the Scream virtual audio driver on the guest. If you have secure boot enabled for your virtual machine, you may need to disable it.\n\nUsing the registry editor, set the DWORD HKLM\\SYSTEM\\CurrentControlSet\\Services\\Scream\\Options\\UseIVSHMEM to the size of the IVSHMEM device in MB. Note that scream identifies its IVSHMEM device using its size, so make sure there is only one device of that size (the suggested default is 2 for 2MB).\n\nUse the following command in an admin CMD shell to create both key and DWORD: REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Services\\Scream\\Options /v UseIVSHMEM /t REG_DWORD /d 2 (sourced from scream on Github)\n\nInstall screamAUR.\n\nCreate a systemd user service to control the receiver:\n\n```\n~/.config/systemd/user/scream-ivshmem-pulse.service\n```\n\n```\n[Unit]\nDescription=Scream IVSHMEM pulse receiver\nAfter=pulseaudio.service\nWants=pulseaudio.service\n\n[Service]\nType=simple\nExecStartPre=/usr/bin/truncate -s 0 /dev/shm/scream-ivshmem\nExecStartPre=/usr/bin/dd if=/dev/zero of=/dev/shm/scream-ivshmem bs=1M count=2\nExecStart=/usr/bin/scream -m /dev/shm/scream-ivshmem\n\n[Install]\nWantedBy=default.target\n```\n\nEdit count=2 with the size of the IVSHMEM device in MiB.\n\nNow start the scream-ivshmem-pulse.service user unit.\n\nTo have it automatically start on next login, enable the user unit.\n\n"
    },
    {
      "title": "Physical disk/partition",
      "level": 3,
      "content": "Raw and qcow2 especially can have noticeable overhead for heavy IO. A whole disk or a partition may be used directly to bypass the filesystem and improve I/O performance. If you wish to dual boot the guest OS natively you would need to pass the entire disk without any partitioning. It is suggested to use /dev/disk/by- paths to refer to the disk since /dev/sdX entries can change between boots. To find out which disk/partition is associated with the one you would like to pass:\n\n```\n$ ls -l /dev/disk/by-id/*\n```\n\n```\n/dev/disk/by-id/ata-ST1000LM002-9VQ14L_Z0501SZ9 -> ../../sdd\n```\n\nSee #Virtio disk on how to add these with libvirt XML. You can also add the disk with Virt-Manager's Add Hardware menu and then type the disk you want in the Select or create custom storage box, e.g. /dev/disk/by-id/ata-ST1000LM002-9VQ14L_Z0501SZ9\n\n"
    },
    {
      "title": "Passing through a device that does not support resetting",
      "level": 4,
      "content": "When the virtual machine shuts down, all devices used by the guest are deinitialized by its OS in preparation for shutdown. In this state, those devices are no longer functional and must then be power-cycled before they can resume normal operation. Linux can handle this power-cycling on its own, but when a device has no known reset methods, it remains in this disabled state and becomes unavailable. Since Libvirt and Qemu both expect all host PCI devices to be ready to reattach to the host before completely stopping the virtual machine, when encountering a device that will not reset, they will hang in a \"Shutting down\" state where they will not be able to be restarted until the host system has been rebooted. It is therefore recommended to only pass through PCI devices which the kernel is able to reset, as evidenced by the presence of a reset file in the PCI device sysfs node, such as /sys/bus/pci/devices/0000:00:1a.0/reset.\n\nThe following bash command shows which devices can and cannot be reset.\n\n```\nfor iommu_group in $(find /sys/kernel/iommu_groups/ -maxdepth 1 -mindepth 1 -type d);do echo \"IOMMU group $(basename \"$iommu_group\")\"; for device in $(\\ls -1 \"$iommu_group\"/devices/); do if [[ -e \"$iommu_group\"/devices/\"$device\"/reset ]]; then echo -n \"[RESET]\"; fi; echo -n $'\\t';lspci -nns \"$device\"; done; done\n```\n\n```\nIOMMU group 0\n\t00:00.0 Host bridge [0600]: Intel Corporation Xeon E3-1200 v2/Ivy Bridge DRAM Controller [8086:0158] (rev 09)\nIOMMU group 1\n\t00:01.0 PCI bridge [0604]: Intel Corporation Xeon E3-1200 v2/3rd Gen Core processor PCI Express Root Port [8086:0151] (rev 09)\n\t01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GK208 [GeForce GT 720] [10de:1288] (rev a1)\n\t01:00.1 Audio device [0403]: NVIDIA Corporation GK208 HDMI/DP Audio Controller [10de:0e0f] (rev a1)\nIOMMU group 2\n\t00:14.0 USB controller [0c03]: Intel Corporation 7 Series/C210 Series Chipset Family USB xHCI Host Controller [8086:1e31] (rev 04)\nIOMMU group 4\n[RESET]\t00:1a.0 USB controller [0c03]: Intel Corporation 7 Series/C210 Series Chipset Family USB Enhanced Host Controller #2 [8086:1e2d] (rev 04)\nIOMMU group 5\n[RESET]\t00:1b.0 Audio device [0403]: Intel Corporation 7 Series/C210 Series Chipset Family High Definition Audio Controller [8086:1e20] (rev 04)\nIOMMU group 10\n[RESET]\t00:1d.0 USB controller [0c03]: Intel Corporation 7 Series/C210 Series Chipset Family USB Enhanced Host Controller #1 [8086:1e26] (rev 04)\nIOMMU group 13\n\t06:00.0 VGA compatible controller [0300]: NVIDIA Corporation GM204 [GeForce GTX 970] [10de:13c2] (rev a1)\n\t06:00.1 Audio device [0403]: NVIDIA Corporation GM204 High Definition Audio Controller [10de:0fbb] (rev a1)\n```\n\nThis signals that the xHCI USB controller in 00:14.0 cannot be reset and will therefore stop the virtual machine from shutting down properly, while the integrated sound card in 00:1b.0 and the other two controllers in 00:1a.0 and 00:1d.0 do not share this problem and can be passed without issue.\n\n"
    },
    {
      "title": "Complete setups and examples",
      "level": 2,
      "content": "For many reasons users may seek to see complete passthrough setup examples.\n\nThese examples offer a supplement to existing hardware compatibility lists. Additionally, if you have trouble configuring a certain mechanism in your setup, you might find these examples very valuable. Users there have described their setups in detail, and some have provided examples of their configuration files as well.\n\nWe encourage those who successfully build their system from this resource to help improve it by contributing their builds. Due to the many different hardware manufacturers involved, the seemingly significant lack of sufficient documentation, as well as other issues due to the nature of this process, community contributions are necessary.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "Note: **This article or section is a candidate for merging with PCI passthrough via OVMF/Troubleshooting.** This article or section is a candidate for merging with PCI passthrough via OVMF/Troubleshooting.\n\nThis article or section is a candidate for merging with PCI passthrough via OVMF/Troubleshooting.\n\nIf your issue is not mentioned below, you may want to browse QEMU#Troubleshooting.\n\n"
    },
    {
      "title": "QEMU 4.0: Unable to load graphics drivers/BSOD/Graphics stutter after driver install using Q35",
      "level": 3,
      "content": "Starting with QEMU 4.0, the Q35 machine type changes the default kernel_irqchip from off to split which breaks some guest devices, such as nVidia graphics (the driver fails to load / black screen / code 43 / graphics stutters, usually when mouse moving). Switch to full KVM mode instead by adding <ioapic driver='kvm'/> under libvirt's <features> tag in your virtual machine configuration or by adding kernel_irqchip=on in the -machine QEMU arg.\n\n"
    },
    {
      "title": "QEMU 5.0: host-passthrough with kernel version 5.5 to 5.8.1 when using Zen 2 processors: Windows 10 BSOD loop 'KERNEL SECURITY CHECK FAILURE'",
      "level": 3,
      "content": "Starting with QEMU 5.0 virtual machines running on Zen 2 and newer kernels than 5.4 will cause a BSOD loop of: 'KERNEL SECURITY CHECK FAILURE'. This can be fixed by either updating to kernel version 5.8.2 or higher, or disabling STIBP:\n\n```\n<cpu mode='host-passthrough' ...>\n   ...\n   <feature policy='disable' name='amd-stibp'/>\n   ...\n </cpu>\n```\n\nThis requires libvirt 6.5 or higher. On older versions, several workarounds exist:\n\n- Switch CPU mode from host-passthrough to host-model. This only works on libvirt 6.4 or lower.\n- Manually patch qemu-desktop in order to revert this commit.\n- On qemu commandline, add amd-stibp=off to the cpu flags string. This can also be invoked through libvirt via a <qemu:commandline> entry.\n\n"
    },
    {
      "title": "\"Error 43: Driver failed to load\" with mobile (Optimus/max-q) nvidia GPUs",
      "level": 3,
      "content": "This error occurs because the Nvidia driver wants to check the status of the power supply. If no battery is present, the driver does not work. Whether Libvirt or QEMU, by default none of them provide the possibility to simulate a battery. This might also result in a reduced screen resolution and the Nvidia Desktop Manager refusing to load when right-clicking the desktop, saying it requires Windows 10, a compatible GPU and the Nvidia graphics driver.\n\nYou can however create and add a custom acpi table file to the virtual machine which will do the work.\n\nFirst you have to create the custom acpi table file by saving the following file as SSDT1.dat (base64 encoded here):\n\n```\necho 'U1NEVKEAAAAB9EJPQ0hTAEJYUENTU0RUAQAAAElOVEwYEBkgoA8AFVwuX1NCX1BDSTAGABBMBi5f\nU0JfUENJMFuCTwVCQVQwCF9ISUQMQdAMCghfVUlEABQJX1NUQQCkCh8UK19CSUYApBIjDQELcBcL\ncBcBC9A5C1gCCywBCjwKPA0ADQANTElPTgANABQSX0JTVACkEgoEAAALcBcL0Dk=' | base64 -d > SSDT1.dat\n```\n\nNext you must add the processed file to the main domain of the virtual machine:\n\n```\n<domain xmlns:qemu=\"http://libvirt.org/schemas/domain/qemu/1.0\" type=\"kvm\">\n  ...\n  <qemu:commandline>\n    <qemu:arg value=\"-acpitable\"/>\n    <qemu:arg value=\"file=/path/to/your/SSDT1.dat\"/>\n  </qemu:commandline>\n</domain>\n```\n\nMake sure your XML file has the correct namespace in the <domain> tag as visible above, otherwise the XML verification will fail.\n\nSource\n\n"
    },
    {
      "title": "\"BAR 3: cannot reserve [mem]\" error in dmesg after starting virtual machine",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nWith respect to this article:\n\nIf you still have code 43 check dmesg for memory reservation errors after starting up your virtual machine, if you have similar it could be the case:\n\n```\nvfio-pci 0000:09:00.0: BAR 3: cannot reserve [mem 0xf0000000-0xf1ffffff 64bit pref]\n```\n\nFind out a PCI Bridge your graphics card is connected to. This will give actual hierarchy of devices:\n\n```\n$ lspci -t\n```\n\nBefore starting the virtual machine run the following lines, replacing IDs with actual values from previous output.\n\n```\n# echo 1 > /sys/bus/pci/devices/0000\\:00\\:03.1/remove\n# echo 1 > /sys/bus/pci/rescan\n```\n\nIn addition try adding kernel parameter pci=realloc which also helps with hotplugging issues.\n\n"
    },
    {
      "title": "UEFI (OVMF) compatibility in VBIOS",
      "level": 3,
      "content": "Note: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\nWith respect to this article:\n\nError 43 can be caused by the GPU's VBIOS without UEFI support. To check whenever your VBIOS supports it, you will have to use rom-parser:\n\n```\n$ git clone https://github.com/awilliam/rom-parser\n$ cd rom-parser && make\n```\n\nDump the GPU VBIOS:\n\n```\n# echo 1 > /sys/bus/pci/devices/0000:01:00.0/rom\n# cat /sys/bus/pci/devices/0000:01:00.0/rom > /tmp/image.rom\n# echo 0 > /sys/bus/pci/devices/0000:01:00.0/rom\n```\n\nAnd test it for compatibility:\n\n```\n$ ./rom-parser /tmp/image.rom\n```\n\n```\nValid ROM signature found @600h, PCIR offset 190h\n\tPCIR: type 0 (x86 PC-AT), vendor: 10de, device: 1184, class: 030000\n\tPCIR: revision 0, vendor revision: 1\nValid ROM signature found @fa00h, PCIR offset 1ch\n\tPCIR: type 3 (EFI), vendor: 10de, device: 1184, class: 030000\n\tPCIR: revision 3, vendor revision: 0\n\t\tEFI: Signature Valid, Subsystem: Boot, Machine: X64\n\tLast image\n```\n\nTo be UEFI compatible, you need a \"type 3 (EFI)\" in the result. If it is not there, try updating your GPU VBIOS. GPU manufacturers often share VBIOS upgrades on their support pages. A large database of known compatible and working VBIOSes (along with their UEFI compatibility status!) is available on TechPowerUp.\n\nUpdated VBIOS can be used in the virtual machine without flashing. To load it in QEMU:\n\n```\n-device vfio-pci,host=07:00.0,......,romfile=/path/to/your/gpu/bios.bin \\\n```\n\nAnd in libvirt:\n\n```\n<hostdev>\n     ...\n     <rom file='/path/to/your/gpu/bios.bin'/>\n     ...\n   </hostdev>\n```\n\nOne should compare VBIOS versions between host and guest systems using nvflash (Linux versions under Show more versions) or GPU-Z (in Windows guest). To check the currently loaded VBIOS:\n\n```\n$ ./nvflash --version\n```\n\n```\n...\nVersion               : 80.04.XX.00.97\n...\nUEFI Support          : No\nUEFI Version          : N/A\nUEFI Variant Id       : N/A ( Unknown )\nUEFI Signer(s)        : Unsigned\n...\n```\n\nAnd to check a given VBIOS file:\n\n```\n$ ./nvflash --version NV299MH.rom\n```\n\n```\n...\nVersion               : 80.04.XX.00.95\n...\nUEFI Support          : Yes\nUEFI Version          : 0x10022 (Jul  2 2013 @ 16377903 )\nUEFI Variant Id       : 0x0000000000000004 ( GK1xx )\nUEFI Signer(s)        : Microsoft Corporation UEFI CA 2011\n...\n```\n\nIf the external ROM did not work as it should in the guest, you will have to flash the newer VBIOS image to the GPU. In some cases it is possible to create your own VBIOS image with UEFI support using GOPUpd tool, however this is risky and may result in GPU brick.\n\nNote: **DO NOT** \n\nIn order to avoid the irreparable damage to your graphics adapter it is necessary to unload the NVIDIA kernel driver first:\n\n```\n# modprobe -r nvidia_modeset nvidia\n```\n\nFlashing the VBIOS can be done with:\n\n```\n# ./nvflash romfile.bin\n```\n\nNote: **DO NOT** \n\n"
    },
    {
      "title": "Slowed down audio pumped through HDMI on the video card",
      "level": 3,
      "content": "For some users, the virtual machine's audio slows down/starts stuttering/becomes demonic after a while when it is pumped through HDMI on the video card. This usually also slows down graphics. A possible solution consists of enabling MSI (Message Signaled-Based Interrupts) instead of the default (Line-Based Interrupts).\n\nIn order to check whether MSI is supported or enabled, run the following command as root:\n\n```\n# lspci -vs $device | grep 'MSI:'\n```\n\nwhere `$device` is the card's address (e.g. `01:00.0`).\n\nThe output should be similar to:\n\n```\nCapabilities: [60] MSI: Enable- Count=1/1 Maskable- 64bit+\n```\n\nA - after Enable means MSI is supported, but not used by the virtual machine, while a + says that the virtual machine is using it.\n\nThe procedure to enable it is quite complex, instructions and an overview of the setting can be found here.\n\nOn a linux guest you can use modinfo to see if there is option to enable MSI (for example: \"modinfo snd_hda_intel |grep msi\"). If there is, one can enable it by adding the relevant option to a custom omdprobe file - in \"/etc/modprobe.d/snd-hda-intel.conf\" inserting \"options snd-hda-intel enable_msi=1\"\n\nOther hints can be found on the lime-technology's wiki[dead link 2023-05-06 ⓘ], or on this article on VFIO tips and tricks.\n\nA UI tool called MSI Utility (FOSS Version 2) works with Windows 10 64-bit and simplifies the process.\n\nIn order to fix the issues enabling MSI on the 0 function of a nVidia card (01:00.0 VGA compatible controller: NVIDIA Corporation GM206 [GeForce GTX 960] (rev a1) (prog-if 00 [VGA controller])) was not enough; it will also be required to enable it on the other function (01:00.1 Audio device: NVIDIA Corporation Device 0fba (rev a1)) to fix the issue.\n\n"
    },
    {
      "title": "No HDMI audio output on host when intel_iommu is enabled",
      "level": 3,
      "content": "If after enabling intel_iommu the HDMI output device of Intel GPU becomes unusable on the host then setting the option igfx_off (i.e. intel_iommu=on,igfx_off) might bring the audio back, please read iommu.html for details about setting igfx_off.\n\n"
    },
    {
      "title": "X does not start after enabling vfio_pci",
      "level": 3,
      "content": "This is related to the host GPU being detected as a secondary GPU, which causes X to fail/crash when it tries to load a driver for the guest GPU. To circumvent this, a Xorg configuration file specifying the BusID for the host GPU is required. The correct BusID can be acquired from lspci -n or the Xorg log [7]. Note that the value from the lspci output is hexadecimal and should be converted to decimal in the .conf file.\n\n```\n/etc/X11/xorg.conf.d/10-intel.conf\n```\n\n```\nSection \"Device\"\n        Identifier \"Intel GPU\"\n        Driver \"modesetting\"\n        BusID  \"PCI:0:2:0\"\nEndSection\n```\n\n"
    },
    {
      "title": "Chromium ignores integrated graphics for acceleration",
      "level": 3,
      "content": "Chromium and friends will try to detect as many GPUs as they can in the system and pick which one is preferred (usually discrete NVIDIA/AMD graphics). It tries to pick a GPU by looking at PCI devices, not OpenGL renderers available in the system - the result is that Chromium may ignore the integrated GPU available for rendering and try to use the dedicated GPU bound to the vfio-pci driver, and unusable on the host system, regardless of whenever a guest virtual machine is running or not. This results in software rendering being used (leading to higher CPU load, which may also result in choppy video playback, scrolling and general un-smoothness).\n\nThis can be fixed by explicitly telling Chromium which GPU you want to use.\n\n"
    },
    {
      "title": "Virtual machine only uses one core",
      "level": 3,
      "content": "For some users, even if IOMMU is enabled and the core count is set to more than 1, the virtual machine still only uses one CPU core and thread. To solve this enable \"Manually set CPU topology\" in virt-manager and set it to the desirable amount of CPU sockets, cores and threads. Keep in mind that \"Threads\" refers to the thread count per CPU, not the total count.\n\n"
    },
    {
      "title": "Passthrough seems to work but no output is displayed",
      "level": 3,
      "content": "Make sure if you are using virt-manager that UEFI firmware is selected for your virtual machine. Also, make sure you have passed the correct device to the virtual machine.\n\n"
    },
    {
      "title": "Host lockup after virtual machine shutdown",
      "level": 3,
      "content": "This issue seems to primarily affect users running a Windows 10 guest and usually after the virtual machine has been run for a prolonged period of time: the host will experience multiple CPU core lockups (see [8]). To fix this try enabling Message Signal Interrupts on the GPU passed through to the guest. A good guide for how to do this can be found in [9]. You can also download this application for windows here [10] that should make the process easier.\n\n"
    },
    {
      "title": "Host lockup if guest is left running during sleep",
      "level": 3,
      "content": "VFIO-enabled virtual machines tend to become unstable if left running through a sleep/wakeup cycle and have been known to cause the host machine to lockup when an attempt is then made to shut them down. In order to avoid this, one can simply prevent the host from going into sleep while the guest is running using the following libvirt hook script and systemd unit. The hook file needs executable permissions to work.\n\n```\n/etc/libvirt/hooks/qemu\n```\n\n```\n#!/bin/sh\n\nOBJECT=\"$1\"\nOPERATION=\"$2\"\nSUBOPERATION=\"$3\"\nEXTRA_ARG=\"$4\"\n\ncase \"$OPERATION\" in\n        \"prepare\")\n                systemctl start libvirt-nosleep@\"$OBJECT\"\n                ;;\n        \"release\")\n                systemctl stop libvirt-nosleep@\"$OBJECT\"\n                ;;\nesac\n```\n\n```\n/etc/systemd/system/libvirt-nosleep@.service\n```\n\n```\n[Unit]\nDescription=Preventing sleep while libvirt domain \"%i\" is running\n\n[Service]\nType=simple\nExecStart=/usr/bin/systemd-inhibit --what=sleep --why=\"Libvirt domain \\\"%i\\\" is running\" --who=%U --mode=block sleep infinity\n```\n\n"
    },
    {
      "title": "Bluescreen at boot since Windows 10 1803",
      "level": 3,
      "content": "Since Windows 10 1803 there is a problem when you are using \"host-passthrough\" as cpu model. The machine cannot boot and is either boot looping or you get a bluescreen. You can workaround this by:\n\n```\n# echo 1 > /sys/module/kvm/parameters/ignore_msrs\n```\n\nTo make it permanently you can create a modprobe file kvm.conf:\n\n```\noptions kvm ignore_msrs=1\n```\n\nTo prevent clogging up dmesg with \"ignored rdmsr\" messages you can additionally add:\n\n```\noptions kvm report_ignored_msrs=0\n```\n\n"
    },
    {
      "title": "AMD Ryzen / BIOS updates (AGESA) yields \"Error: internal error: Unknown PCI header type ‘127’\"",
      "level": 3,
      "content": "AMD users have been experiencing breakage of their KVM setups after updating the BIOS on their motherboard. There is a kernel patch[dead link 2024-07-30 ⓘ], (see Kernel/Arch build system for instruction on compiling kernels with custom patches) that can resolve the issue as of now (7/28/19), but this is not the first time AMD has made an error of this very nature, so take this into account if you are considering updating your BIOS in the future as a VFIO user.\n\n"
    },
    {
      "title": "AMD GPU not resetting properly yielding \"Error: internal error: Unknown PCI header type ‘127’\" (Separate issue from the one above)",
      "level": 3,
      "content": "Passing through an AMD GPU may result into a problem known as the \"AMD reset bug\". Upon power cycling the guest, the GPU does not properly reset its state which causes the device to malfunction until the host is also rebooted. This is usually paired with a \"code 43\" driver error in a Windows guest, and the message \"Error: internal error: Unknown PCI header type '127'\" in the libvirt log on the host.\n\nIn the past, this meant having to use work-arounds to manually reset the GPU, or resorting to the use of kernel patches that were unlikely to land in upstream. Currently, the recommended solution that does not require patching of the kernel is to install vendor-reset-gitAUR or vendor-reset-dkms-gitAUR and making sure the 'vendor-reset' kernel module is loaded before booting the guest. For convenience, you can load the module automatically.\n\n"
    },
    {
      "title": "Host crashes when hotplugging Nvidia card with USB",
      "level": 3,
      "content": "If attempting to hotplug an Nvidia card with a USB port, you may have to blacklist the i2c_nvidia_gpu driver. Do this by adding the line blacklist i2c_nvidia_gpu to /etc/modprobe.d/blacklist.conf.\n\n"
    },
    {
      "title": "Host unable to boot and stuck in black screen after enabling vfio",
      "level": 3,
      "content": "If debug kernel messages during boot are enabled by adding with the debug ignore_loglevel kernel parameters, you may see boot stuck with the last message similar to:\n\n```\nvfio-pci 0000:01:00.0: vgaarb: changed VGA decodes: olddecodes=io+mem,decodes=io+mem:owns=none\n```\n\nThis can be mitigated by disconnecting the passed-through GPU from your monitor. You may reconnect the passed-through GPU to a monitor after the host has booted.\n\nIf you do not want to plug the cable in each time you boot the host. You can disable the framebuffer in your boot loader to bypass this message. For UEFI systems you can add video=efifb:off as a kernel parameter. For legacy support, use video=vesafb:off instead or in conjunction. Note that doing this may cause issues with Xorg.\n\nIf you encounter problems with Xorg, the following solution may help (remember to substitute with your own values if needed).\n\n```\n/etc/X11/xorg.conf.d/10-amd.conf\n```\n\n```\nSection \"Device\"\n        Identifier \"AMD GPU\"\n        Driver \"amdgpu\"\n        BusID  \"PCI:0:2:0\"\nEndSection\n```\n\n"
    },
    {
      "title": "AER errors when passing through PCIe USB hub",
      "level": 3,
      "content": "In some cases passing through a PCIe USB hub, such as one connected to the guest GPU, might fail with AER errors similar to the following:\n\n```\nkernel: pcieport 0000:00:01.1: AER: Uncorrected (Non-Fatal) error received: 0000:00:01.1\nkernel: pcieport 0000:00:01.1: AER: PCIe Bus Error: severity=Uncorrected (Non-Fatal), type=Transaction Layer, (Requester ID)\nkernel: pcieport 0000:00:01.1: AER:   device [8086:1905] error status/mask=00100000/00000000\nkernel: pcieport 0000:00:01.1: AER:    [20] UnsupReq               (First)\nkernel: pcieport 0000:00:01.1: AER:   TLP Header: 00000000 00000000 00000000 00000000\nkernel: pcieport 0000:00:01.1: AER: device recovery successful\n```\n\n"
    },
    {
      "title": "Reserved Memory Region Reporting (RMRR) Conflict",
      "level": 3,
      "content": "If you run into an issue passing through a device because of the BIOS's usage of RMRR, like the error below.\n\n```\nvfio-pci 0000:01:00.1: Device is ineligible for IOMMU domain attach due to platform RMRR requirement. Contact your platform vendor.\n```\n\nYou can try the patches here: https://github.com/kiler129/relax-intel-rmrr\n\n"
    },
    {
      "title": "Too-low frequency limit for AMD GPU passed-through to virtual machine",
      "level": 3,
      "content": "On some machines with AMD GPUs, binding the devices to vfio-pci may be insufficient to prevent interference from the host, since the amdgpu driver on the host may query global ATIF methods which can alter the behavior of the GPU. For example, a user with a Dell Precision 7540 laptop containing a Radon Pro WX 3200 AMD GPU reported that, with the AMD GPU bound to vfio-pci, the passed-through AMD GPU was limited to 501 MHz instead of the correct 1295 MHz limit. Blacklisting the amdgpu kernel module using the kernel command line was a workaround.\n\nSee this kernel mailing list discussion for further details.\n\n"
    },
    {
      "title": "Host clocksource is HPET rather than TSC",
      "level": 3,
      "content": "If the clocksource of your host machine is HPET you may see severely crippled performance in games. While this issue also occurs when running games outside of a virtual machine, unaware users will likely begin troubleshooting their virtual machine when the issue is actually with their host system.\n\nTo see your current clocksource, run this command on your host machine:\n\n```\n$ cat /sys/devices/system/clocksource/clocksource*/current_clocksource\n```\n\nIf your clocksource is HPET you can try to force it to TSC by setting the kernel parameters clocksource=tsc and tsc=reliable. See this Reddit thread for more information.\n\n"
    },
    {
      "title": "Code 43 while Resizable Bar is turned on in the bios",
      "level": 3,
      "content": "If you own a GPU that supports Resizable BAR / SAM and have the corresponding BIOS option enabled, you might get code 43 because this feature is disabled in QEMU [11]. Linux Kernel release 6.1 added option to manipulate PCIe Resizable BARs through sysfs, so you can try permanently resizing it using a udev rule:\n\n```\n/etc/udev/rules.d/01-amd.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x1002\", ATTR{device}==\"0x73bf\", ATTR{resource0_resize}=\"14\"\nACTION==\"add\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x1002\", ATTR{device}==\"0x73bf\", ATTR{resource2_resize}=\"8\"\n```\n\nAlternatively, to temporarily resize the PCIe BAR, you can write the new size to /sys/bus/pci/devices/device_address/resourcenumber_resize, where device_address is the address of your GPU, such as 0000:03:00.0 (note that for changing this parameter, no driver can be loaded for the device).\n\nYou can confirm values using lspci -vvvxxxx.\n\n"
    },
    {
      "title": "Operating system hangs",
      "level": 3,
      "content": "If your virtualized OS (particularly Windows) hangs when the GPU is attached, you can also try opening your motherboard's settings and:\n\n- disabling Re-Size BAR Support,\n- disabling Above 4G memory / Crypto Currency mining,\n- enabling SR-IOV,\n- changing Max TOLUD from dynamic to a specific value,\n- switching your Initiate Graphic Adapter from PEG to IGD.\n\nAt the very least, VEGA cards seem to be picky about those settings and won't actually work unless you change them.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- VFIO users mailing list\n- /r/VFIO: A subreddit focused on vfio\n- GVT-d: passthrough of an entire integrated GPU\n\n"
    }
  ]
}