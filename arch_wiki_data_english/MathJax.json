{
  "title": "MathJax",
  "url": "https://wiki.archlinux.org/title/MathJax",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "MathJax is a JavaScript display engine for mathematics that works in all browsers. It is able to parse TeX input in html files to produce svg output, amongst other supported formats. The higher-level Jupyter notebook depends on MathJax and other modules for plotting, running interactive code, etc.\n\nMathJax can easily be embedded on any website to typeset your TeX. It is possible to quickly integrate MathJax with a distributed network service, see here for the currently available CDN.\n\nThis article assumes you want a hard copy of MathJax on your system.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install one of the following;\n\n- mathjax - Version 3\n- mathjax2 - Version 2\n\n"
    },
    {
      "title": "Local Usage",
      "level": 3,
      "content": "The scripts for MathJax are located in /usr/share/mathjax for both version 2 and 3. There are some differences in using the scripts between the versions. For version 3 there are a number of pre built components with different output results and functionality, click here for a list and explanation of the components.\n\nTo have MathJax parse the TeX code in ~/equations.html and produce SVG output:\n\n```\n<head>\n    ... \n    Version 2\n    <script src=\"/usr/share/mathjax/MathJax.js?config=TeX-AMS_SVG\"></script> \n    ...\n    ... \n    Version 3\n    <script src=\"/usr/share/mathjax/tex-mml-svg.js\"></script>\n    ...\n</head>\n```\n\nDo not forget to include a configuration query string to tell MathJax about your desired i/o formats.\n\nYou can also configure MathJax inline, see here for more details and configuration options.\n\nYour browser should now render the symbols at file:///home/user/equations.html.\n\nNote that the TeX delimiters MathJax uses by default are \\( ... \\) for inline math and \\[ ... \\] , $$ ... $$ for outline math.\n\n"
    },
    {
      "title": "Server Usage",
      "level": 3,
      "content": "In order to serve your clients with MathJax processed documents, you need your scripts to access its main file:\n\n/usr/share/mathjax/tex-mml-chtml.js.js (or /usr/share/mathjax/MathJax.js for version 2).\n\nLet us assume the server's root directory is set to /srv/http/, creating symlinks will grant your scripts access to the installed package:\n\n```\n$ cp -rs /usr/share/mathjax /srv/http/mathjax\n```\n\nYou can now have MathJax parse the TeX code in, say, /srv/http/pages/equations.html by including in its head:\n\n```\n<script src=\"../mathjax/tex-mml-chtml.js></script>\n```\n\nor for version 2:\n\n```\n<script src=\"../mathjax/MathJax.js?config=TeX-AMS_SVG\"></script>\n```\n\n"
    },
    {
      "title": "MathJax and Plotly",
      "level": 3,
      "content": "If you are using plotly.js as well, loading MathJax before Plotly might fail to render TeX code. Loading Plotly before MathJax should work. For example:\n\n```\n<head>\n     <script src=\"path-to-plotly/plotly-latest.min.js\"></script>\n     <script src=\"path-to-mathjax/MathJax.js?config=TeX-AMS_SVG\"></script>\n</head>\n```\n\nYou may also try different MathJax output.\n\n"
    },
    {
      "title": "TeX raw code visible while page is loading",
      "level": 3,
      "content": "It can happen that MathJax takes some time to typeset and raw TeX code appears during the while, producing an unpleasant result.\n\nYou can fix this by setting visibility: hidden in some element's css properties, and catch the event MathJax emits after typesetting is done to show it:\n\n```\nMathJax.Hub.Queue( function () { \n    document.getElementById(\"myID\").visibility = \"visible\";\n});\n```\n\n"
    }
  ]
}