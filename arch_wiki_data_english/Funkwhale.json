{
  "title": "Funkwhale",
  "url": "https://wiki.archlinux.org/title/Funkwhale",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Django\n- Apache HTTP Server\n- Nginx\n- OpenSSL\n- Certbot\n- Redis\n- PostgreSQL\n\nQuoting the main documentation page:\n\nInstances can be federated via the ActivityPub protocol.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Funkwhale requires a reverse proxy ([1]), so nginx or Apache HTTP Server need to be installed.\n\nIt also needs a configured PostgreSQL database and a Redis cache server. See #Configuration and the respective pages for information.\n\nInstall the funkwhale-venvAUR package.\n\n"
    },
    {
      "title": "Manual install",
      "level": 3,
      "content": "Follow instructions at [2]. This will install all components in /srv/funkwhale.\n\n"
    },
    {
      "title": "Docker install",
      "level": 3,
      "content": "Follow instructions at [3].\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The following sections assume funkwhale-venv was installed, for a manual installation the folders should be changed appropriately.\n\nIt also assumes that you are using Funkwhale on a local network. See the official documentation for making it accessible outside, especially for the certificates using Certbot.\n\n"
    },
    {
      "title": "Host config",
      "level": 3,
      "content": "Make sure your /etc/hosts file is setup correctly. The Funkwhale server is running on 127.0.0.1 with alias funkwhale.local, but this can be changed.\n\nYour /etc/hosts file should look something like the following,\n\n```\n#<ip-address>   <hostname.domain.org>   <hostname>\n127.0.0.1       localhost\n::1             localhost\n127.0.0.1       funkwhale.local\n```\n\n"
    },
    {
      "title": "Configure nginx",
      "level": 3,
      "content": "The upstream template of the Nginx configuration file is provided in /etc/webapps/funkwhale/nginx.template. However, this file contains variables that need to be replaced by their value from the env file (see section #Initialization on how to create this file):\n\n```\n$ set -a && source /srv/funkwhale/config/env && set +a\n$ envsubst \"`env | awk -F = '{printf \\\" $%s\\\", $$1}'`\" \\\n   < /etc/webapps/funkwhale/nginx.template \\\n   > /etc/nginx/sites-available/funkwhale.conf\n```\n\nThe paths to the certificates should also be modified accordingly.\n\nThen enable the site:\n\n```\n$ ln -s /etc/nginx/sites-available/funkwhale.conf /etc/nginx/sites-enabled/\n```\n\nAnd start the nginx.service.\n\n"
    },
    {
      "title": "Configure apache",
      "level": 3,
      "content": "A template Apache configuration file is provided in /etc/webapps/funkwhale/apache-funkwhale.conf. It configures the Funkwhale instance to be accessible at https://funkwhale.local.\n\nThe folder names should be change to fit your installation. More explanation on which lines need to be modified is provided in [4].\n\nCopy the template to the apache configuration folder,\n\n```\n$ cp /etc/webapps/funkwhale/apache-funkwhale.conf /etc/httpd/conf/extra/funkwhale.conf\n```\n\nNext, edit the Apache HTTP Server configuration file and add the following:\n\n```\n/etc/httpd/conf/httpd.conf\n```\n\n```\nInclude conf/extra/funkwhale.conf\n```\n\nFor the changes to be applied, you need to restart httpd.service (Apache).\n\n"
    },
    {
      "title": "Configure PostgreSQL",
      "level": 3,
      "content": "Connect to the PostgreSQL command line using the postgres user to create the funkwhale user and the database.\n\n```\n[postgres]$ psql\n```\n\n```\nCREATE DATABASE \"funkwhale\"\n WITH ENCODING 'utf8';\nCREATE USER funkwhale;\nALTER DATABASE funkwhale OWNER TO funkwhale;\n\\c funkwhale;\nCREATE EXTENSION \"unaccent\";\nCREATE EXTENSION \"citext\";\n```\n\nThe last three lines load the unaccent and citext extensions, which are needed for funkwhale to work (citext since version 0.20).\n\n"
    },
    {
      "title": "Funkwhale user",
      "level": 3,
      "content": "Funkwhale should run as the funkwhale user. It is automatically created by the AUR package. If you followed the manual installation, create it with\n\n```\n# useradd -r -d /srv/funkwhale -m funkwhale -c \"Funkwhale music server\" -s /usr/bin/nologin\n```\n\nCreate Funkwhale's data folders in /srv/funkwhale, owned by the funkwhale user:\n\n```\n# mkdir /srv/funkwhale\n# chown funkwhale:funkwhale /srv/funkwhale\n```\n\nRun the following commands as the funkwhale user.\n\nCreate sub-folders for API files and storage:\n\n```\n[funkwhale]$ cd /srv/funkwhale\n[funkwhale]$ mkdir -p api data/static data/media data/music config\n```\n\nTo work, Funkwhale needs several environment variables to be present, these should be defined in the environment file /srv/funkwhale/config/env. There is a template at /etc/webapps/funkwhale/env.template, copy and modify it to fit your installation.\n\n```\n[funkwhale]$ cp /etc/webapps/funkwhale/env.template /srv/funkwhale/config/env\n```\n\nThe FUNKWHALE_HOSTNAME variable should correspond to the hostname in /etc/hosts. DJANGO_ALLOWED_HOSTS needs also to match the address where the funkwhale instance will be reached. You should generate a unique DJANGO_SECRET_KEY and change the paths accordingly to your installation.\n\nNote: For convenience, you can copy this line to /srv/funkwhale/.bashrc (or whichever shell you are using), so it is loaded automatically every time you log in to the funkwhale user.\n\n```\n[funkwhale]$ export $(grep -v ^#  /srv/funkwhale/config/env | xargs)\n```\n\nFor convenience, you can copy this line to /srv/funkwhale/.bashrc (or whichever shell you are using), so it is loaded automatically every time you log in to the funkwhale user.\n\n"
    },
    {
      "title": "Database setup",
      "level": 3,
      "content": "Use /usr/bin/funkwhale_manage to run the /usr/share/webapps/funkwhale/api/manage.py command as funkwhale user.\n\nInitialize the database before launching the application:\n\n```\n[funkwhale]$ funkwhale_manage migrate\n```\n\nCreate a superuser for your Funkwhale instance:\n\n```\n[funkwhale]$ funkwhale_manage createsuperuser\n```\n\nCollect the static files for the webapp:\n\n```\n[funkwhale]$ funkwhale_manage collectstatic\n```\n\n```\n[funkwhale]$ source /usr/share/webapps/funkwhale/virtualenv/bin/activate\n[funkwhale]$ python /usr/share/webapps/funkwhale/api/manage.py migrate\n[funkwhale]$ python /usr/share/webapps/funkwhale/api/manage.py createsuperuser\n[funkwhale]$ python /usr/share/webapps/funkwhale/api/manage.py collectstatic\n[funkwhale]$ deactivate\n```\n\n"
    },
    {
      "title": "Version upgrade",
      "level": 2,
      "content": "In case of an error, use the /usr/bin/funkwhale_manage script to run the /usr/share/webapps/funkwhale/api/manage.py commands (it should be run as root).\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Upstream provides systemd services that are already installed.\n\nTo start the instance, just start funkwhale.target.\n\nThis starts three services, you can check their status with:\n\n```\n$ systemctl status funkwhale-\\*\n```\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "See https://docs.funkwhale.audio/administrator/troubleshooting/index.html\n\n"
    },
    {
      "title": "Proxy logs",
      "level": 3,
      "content": "Apache logs for funkwhale:\n\n```\n$ tail -f /var/log/httpd/funkwhale/error.log\n```\n\n"
    }
  ]
}