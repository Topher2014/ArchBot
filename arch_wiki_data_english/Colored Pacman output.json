{
  "title": "Colored Pacman output",
  "url": "https://wiki.archlinux.org/title/Colored_Pacman_output",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nRelated articles\n\n- Emacs#Custom colors and theme\n- nano#Syntax highlighting\n\nThis page was created to consolidate colorization of CLI outputs.\n\n"
    },
    {
      "title": "Background",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Escape sequences",
      "level": 3,
      "content": "The ANSI escape sequences define a way to put additional information into terminal output, and color is part of this \"additional information\". Throughout the years the range of terminal colors has been vastly expanded, from the initial eight colors to a full 24-bit truecolor.\n\nThe basic color encoding provides 8 normal-brightness colors and 8 brighter versions of these colors. Modern terminal emulators, including the Linux console itself, allows you to specify the precise RGB values that the colors translate to. This mode is supported by almost all terminal emulators.\n\nWith the advent of 256-color displays came the 256-color escape. The 256 colors are the 16 basic colors, the 216 RGB colors (laid out in a 6x6x6 cube), and 24 levels of greyscale. Except for the first 16 colors, the scheme is usually not customizable as it has a well-defined mapping to RGB. This mode is supported by most terminal emulators. (A minority of emulators use a similar but incompatible encoding with only 88 colors. You are very unlikely to use them in practice, but they will appear in the terminfo database.)\n\nLess commonly supported is the truecolor mode, allowing one to use 16.7 million (224) colors in RGB (each value ranging from 0 to 255).\n\n"
    },
    {
      "title": "Termcap and terminfo",
      "level": 3,
      "content": "Termcap and terminfo, part of ncurses, are databases that provide information on the escape sequences terminals (usually specified by the TERM env-var) understand. The tput(1) and infocmp(1) commands can be used to access them from command-line.\n\n"
    },
    {
      "title": "diff",
      "level": 3,
      "content": "diffutils from version 3.4 includes the --color option (GNU mailing list).\n\n```\n$ alias diff='diff --color=auto'\n```\n\n"
    },
    {
      "title": "grep",
      "level": 3,
      "content": "The --color=auto option enables color highlighting. Color codes are emitted only on standard output; not in pipes or redirection.\n\nColor output in grep is also useful with regexp tasks.\n\nUse an alias to permanently enable this option:\n\n```\nalias grep='grep --color=auto'\n```\n\nThe GREP_COLORS variable is used to define colors, and it configures various parts of highlighting. To change the colors, find the needed ANSI escape sequence and apply it. See grep(1) § GREP COLORS for more information.\n\nThe -n option includes file line numbers in the output.\n\n"
    },
    {
      "title": "ip",
      "level": 3,
      "content": "ip(8) command from iproute2 supports colors with -c/-color option. When using the auto parameter, colored output will be enabled only when stdout is a terminal. iproute2 can be built with auto as the default, but such a change has been rejected by the Arch package maintainer.\n\nYou can use an alias to enable colored output, e.g.:\n\n```\nalias ip='ip -color=auto'\n```\n\n"
    },
    {
      "title": "Environment variables",
      "level": 4,
      "content": "As with the #man case, we can tell less to emit colors when it is meaning to make bold text and other formatting effects.\n\nAdd the following lines to your shell configuration file:\n\n```\nexport LESS='-R --use-color -Dd+r$Du+b$'\n```\n\nIt will set red for bold and blue for underlined.\n\nFor more information about the --use-color and -D options, see less(1) § D or [1].\n\n"
    },
    {
      "title": "Reading from stdin",
      "level": 4,
      "content": "When you run a command and pipe its standard output (stdout) to less for a paged view (e.g. pacman -Qe | less), you may find that the output is no longer colored. This is usually because the program tries to detect if its stdout is an interactive terminal, in which case it prints colored text, and otherwise prints uncolored text. This is good behaviour when you want to redirect stdout to a file, e.g. pacman -Qe > pkglst-backup.txt, but less suited when you want to view output in less.\n\nSome programs provide an option to disable the interactive tty detection:\n\n```\n# dmesg --color=always | less\n```\n\nIn case that the program does not provide any similar option, it is possible to trick the program into thinking its stdout is an interactive terminal with the following utilities:\n\n- ColorThis — Force colored output of a program by running it within a (group of) pty, support forwarding stdin.\n\n- stdoutisatty — A small program and a LD_PRELOAD-able library that catches the isatty(3) function call.\n\n- unbuffer — A tclsh script comes with expect, it invokes desired program within a pty.\n\nAlternatively, using zpty module from zsh: [2]\n\n```\n~/.zshrc\n```\n\n```\nzmodload zsh/zpty\n\npty() {\n\tzpty pty-${UID} ${1+$@}\n\tif [[ ! -t 1 ]];then\n\t\tsetopt local_traps\n\t\ttrap '' INT\n\tfi\n\tzpty -r pty-${UID}\n\tzpty -d pty-${UID}\n}\n\nptyless() {\n\tpty $@ | less\n}\n```\n\nUsage:\n\n```\n$ ptyless program\n```\n\nTo pipe it to other pager (less in this example):\n\n```\n$ pty program | less\n```\n\n"
    },
    {
      "title": "ls",
      "level": 3,
      "content": "The --color=auto option enables color highlighting. Color codes are emitted only on standard output; not in pipes or redirection.\n\nUse an alias to permanently enable this option:\n\n```\nalias ls='ls --color=auto'\n```\n\nThe LS_COLORS variable is used to define colors, and it configures various parts of highlighting. Use the dircolors(1) command to set it.\n\nAn advanced alternative to dircolors that ships with many themes is the vivid package, see vivid --help for usage.\n\n```\neval $(dircolors -p | perl -pe 's/^((CAP|S[ET]|O[TR]|M|E)\\w+).*/$1 00/' | dircolors -)\n```\n\nSee ls(1) for more information.\n\n"
    },
    {
      "title": "man",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThere is a real color facility in grotty(1), but it is strongly discouraged for man pages. Here we fake a colored man by hacking two main pagers, less and most: we replace the sequences for bold, standout, and underline with spiced ones that contain color.\n\n"
    },
    {
      "title": "Using bat",
      "level": 4,
      "content": "bat can be used as a colorizing pager for man, by setting the MANPAGER environment variable as documented here.\n\n"
    },
    {
      "title": "Using less",
      "level": 4,
      "content": "See #less for a more detailed description.\n\n```\nexport MANPAGER=\"less -R --use-color -Dd+r -Du+b\"\nexport MANROFFOPT=\"-P -c\"\n```\n\nFor Fish you could accomplish this with:\n\n```\n~/.config/fish/config.fish\n```\n\n```\nset -xU MANPAGER 'less -R --use-color -Dd+r -Du+b'\nset -xU MANROFFOPT '-P -c'\n```\n\nRemember to source your config or restart your shell to make the changes take effect.\n\n"
    },
    {
      "title": "Using most",
      "level": 4,
      "content": "The basic function of 'most' is similar to less and more, but it has a smaller feature set. Configuring most to use colors is easier than using less, but additional configuration is necessary to make most behave like less. Install the most package.\n\nEdit /etc/man_db.conf, uncomment the pager definition and change it to:\n\n```\nDEFINE     pager     most -s\n```\n\nTest the new setup by typing:\n\n```\n$ man whatever_man_page\n```\n\nModifying the color values requires editing ~/.mostrc (creating the file if it is not present) or editing /etc/most.conf for system-wide changes. Example ~/.mostrc:\n\n```\n% Color settings\ncolor normal lightgray black\ncolor status yellow blue\ncolor underline yellow black\ncolor overstrike brightblue black\n```\n\n"
    },
    {
      "title": "Using X resources",
      "level": 4,
      "content": "A quick way to add color to manual pages viewed on xterm/uxterm or rxvt-unicode is to modify ~/.Xresources.\n\n```\n*VT100.colorBDMode:     true\n*VT100.colorBD:         red\n*VT100.colorULMode:     true\n*VT100.colorUL:         cyan\n```\n\nwhich replaces the decorations with the colors. Also add:\n\n```\n*VT100.veryBoldColors: 6\n```\n\nif you want colors and decorations (bold or underline) at the same time. See xterm(1) § veryBoldColors for more information.\n\n```\nURxvt.colorIT:      #87af5f\nURxvt.colorBD:      #d7d7d7\nURxvt.colorUL:      #87afd7\n```\n\nRun:\n\n```\n$ xrdb -load ~/.Xresources\n```\n\nLaunch a new xterm/uxterm or rxvt-unicode and you should see colorful man pages.\n\nThis combination puts colors to bold and underlined words in xterm/uxterm or to bold, underlined, and italicized text in rxvt-unicode. You can play with different combinations of these attributes. See the sources (archived) of this item.\n\n"
    },
    {
      "title": "pacman",
      "level": 3,
      "content": "Pacman has a color option. Uncomment the Color line in /etc/pacman.conf.\n\n"
    },
    {
      "title": "Wrappers",
      "level": 2,
      "content": "Note: **This article or section is a candidate for moving to [[]].** This article or section is a candidate for moving to [[]].\n\nThis article or section is a candidate for moving to [[]].\n\n"
    },
    {
      "title": "Universal wrappers",
      "level": 3,
      "content": "(most of them outdated, but still functioning)\n\nThey go with multiple preconfigured presets that can be changed, and new ones can be created/contributed.\n\n- rainbow — Colorize commands output or STDIN using patterns.Presets: df, diff, env, host, ifconfig, java-stack-trace, jboss, jonas, md5sum, mvn2, mvn3, ping, tomcat, top, traceroute.\n\n- grc — Yet another colouriser for beautifying your logfiles or output of commands.Presets: cat, cvs, df, diff, dig, gcc, g++, ls, ifconfig, make, mount, mtr, netstat, ping, ps, tail, traceroute, wdiff, blkid, du, dnf, docker, docker-machine, env, id, ip, iostat, last, lsattr, lsblk, lspci, lsmod, lsof, getfacl, getsebool, ulimit, uptime, nmap, fdisk, findmnt, free, semanage, sar, ss, sysctl, systemctl, stat, showmount, tune2fs and tcpdump.\n\n- cope — A colourful wrapper for terminal programs.Presets: acpi, arp, cc, df, dprofpp, fdisk, free, g++, gcc, id, ifconfig, ls, lspci, lsusb, make, md5sum, mpc, netstat, nm, nmap, nocope, ping, pmap, ps, readelf, route, screen, sha1sum, sha224sum, sha256sum, sha384sum, sha512sum, shasum, socklist, stat, strace, tcpdump, tracepath, traceroute, w, wget, who, xrandr.\n\n- cw — A non-intrusive real-time ANSI color wrapper for common unix-based commands. Wraps file which can cause issues.Presets: arp, arping, auth.log@, blockdev, cal, cksum, clock, configure, cpuinfo@, crontab@, cw-pipe, cw-test.cgi, date, df, diff, dig, dmesg, du, env, figlet, file, find, finger, free, fstab@, fuser, g++, gcc, group@, groups, hdparm, hexdump, host, hosts@, id, ifconfig, inittab@, iptables, last, lastlog, lsattr, lsmod, lsof, ltrace-color, make, md5sum, meminfo@, messages@, mount, mpg123, netstat, nfsstat, nmap, nslookup, objdump, passwd@, ping, pmap, pmap_dump, praliases, profile@, protocols@, ps, pstree, quota, quotastats, resolv.conf@, route, routel, sdiff, services@, showmount, smbstatus, stat, strace-color, sysctl, syslog, tar, tcpdump, tracepath, traceroute, umount, uname, uptime, users, vmstat, w, wc, whereis, who, xferlog.\n\n- ccze — A fast log colorizer written in C, intended to be a drop-in replacement for colorize\n\n"
    },
    {
      "title": "Libraries for colorizing an output",
      "level": 3,
      "content": "- libtextstyle — A C library for styling text output to terminals\n\n- ruby-rainbow — Rainbow is extension to ruby's String class adding support for colorizing text on ANSI terminal\n\n- python-blessings — A thin, practical wrapper around terminal coloring, styling, and positioning\n\n- lolcat — Ruby program that makes the output colorful like a rainbow\n\n"
    },
    {
      "title": "Compilers",
      "level": 4,
      "content": "- colorgcc — A Perl wrapper to colorize the output of compilers with warning/error messages matching the gcc output format\n\n"
    },
    {
      "title": "diff",
      "level": 4,
      "content": "Diff has built-in color output, which is reasonable to use. But the following wrappers can be used:\n\n- colordiff — Perl script for diff highlighting.\n\n- cwdiff — (w)diff wrapper with directories support and highlighting.\n\n- git-delta — A syntax-highlighting pager for git and diff output.\n\n"
    },
    {
      "title": "cat",
      "level": 4,
      "content": "- bat — Cat clone with syntax highlighting and git integration.\n\n"
    },
    {
      "title": "less",
      "level": 4,
      "content": "You can enable code syntax coloring in less. First, install source-highlight, then add these lines to your shell configuration file:\n\n```\n~/.bashrc\n```\n\n```\nexport LESSOPEN=\"| /usr/bin/source-highlight-esc.sh %s\"\nexport LESS='-R '\n```\n\nFrequent users of the command line interface might want to install lesspipe.\n\nUsers may now list the compressed files inside of an archive using their pager:\n\n```\n$ less compressed_file.tar.gz\n```\n\n```\n==> use tar_file:contained_file to view a file in the archive\n-rw------- username/group  695 2008-01-04 19:24 compressed_file/content1\n-rw------- username/group   43 2007-11-07 11:17 compressed_file/content2\ncompressed_file.tar.gz (END)\n```\n\nlesspipe also grants less the ability of interfacing with files other than archives, serving as an alternative for the specific command associated for that file-type (such as viewing HTML via python-html2text).\n\nRe-login after installing lesspipe in order to activate it, or source /etc/profile.d/lesspipe.sh.\n\n"
    },
    {
      "title": "Make",
      "level": 4,
      "content": "- colormake — A simple wrapper around make to make its output more readable.\n\n"
    },
    {
      "title": "Ping",
      "level": 4,
      "content": "- prettyping — Add some great features to ping monitoring. A wrapper around the standard ping tool with the objective of making the output prettier, more colorful, more compact, and easier to read.\n\n"
    },
    {
      "title": "bash",
      "level": 3,
      "content": "See Bash/Prompt customization#Colors.\n\n"
    },
    {
      "title": "Fish",
      "level": 3,
      "content": "See Fish#Web interface.\n\n"
    },
    {
      "title": "xonsh",
      "level": 3,
      "content": "See Customizing the Prompt.\n\n"
    },
    {
      "title": "zsh",
      "level": 3,
      "content": "See Zsh#Colors.\n\n"
    },
    {
      "title": "Virtual console",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThe colors in the Linux virtual console running on the framebuffer can be changed. This is done by writing the escape code \\\\e]PXRRGGBB, where X is the hexadecimal index of the color from 0-F, and RRGGBB is a traditional hexadecimal RGB code.\n\nFor example, to reuse existing colors defined in ~/.Xresources, add the following to the shell initialization file (such as ~/.bashrc):\n\n```\nif [ \"$TERM\" = \"linux\" ]; then\n    _SEDCMD='s/.*\\*color\\([0-9]\\{1,\\}\\).*#\\([0-9a-fA-F]\\{6\\}\\).*/\\1 \\2/p'\n    for i in $(sed -n \"$_SEDCMD\" $HOME/.Xresources | awk '$1 < 16 {printf \"\\\\e]P%X%s\", $1, $2}'); do\n        echo -en \"$i\"\n    done\n    clear\nfi\n```\n\n"
    },
    {
      "title": "Login screen",
      "level": 4,
      "content": "The below is a colored example of the virtual console login screen in /etc/issue. Create a backup of the original file with mv /etc/issue /etc/issue.bak as root, and create a new /etc/issue:\n\n```\n\\e[H\\e[2J\n                                                             \\e[1;30m| \\e[34m\\r \\s\n      \\e[36;1m/\\\\\\\\                        \\e[37m||      \\e[36m| =                 \\e[30m|\n     \\e[36m/  \\\\\\\\                       \\e[37m||      \\e[36m|                   \\e[30m| \\e[32m\\t\n    \\e[1;36m/ \\e[0;36m.. \\e[1m\\\\\\\\   \\e[37m//==\\\\\\\\\\\\ ||/= /==\\\\\\\\ ||/=\\\\\\\\  \\e[36m| | |/\\\\\\\\ |  | \\\\\\\\ /  \\e[30m| \\e[32m\\d\n   \\e[0;36m/ .  . \\\\\\\\ \\e[37m||    || ||  ||     ||  ||  \\e[36m| | |  | |  |   X   \\e[1;30m|\n  \\e[0;36m/  .  .  \\\\\\\\ \\e[37m\\\\\\\\\\\\==/| ||   \\\\\\\\==/ ||  ||  \\e[36m| | |  |\\  \\\\/|  / \\\\\\\\ \\e[1;30m| \\e[31m\\U\n \\e[0;36m/ ..    .. \\\\\\\\   \\e[0;37mA simple, lightweight linux distribution.   \\e[1;30m|\n\\e[0;36m/_'        `_\\\\\\\\                                              \\e[1;30m| \\e[35m\\l \\e[0mon \\e[1;33m\\n\n\\e[0m\n```\n\nSee also:\n\n- https://bbs.archlinux.org/viewtopic.php?pid=386429#p386429\n- https://www.linuxfromscratch.org/blfs/view/svn/postlfs/logon.html\n\n"
    },
    {
      "title": "X window system",
      "level": 3,
      "content": "Most Xorg terminals, including xterm and urxvt, support at least 16 basic colors. The colors 0-7 are the 'normal' colors. Colors 8-15 are their 'bright' counterparts, used for highlighting. These colors can be modified through X resources, or through specific terminal settings. For example:\n\n```\n~/.Xresources\n```\n\n```\n! Black + DarkGrey\n*color0:  #000000\n*color8:  #555753\n! DarkRed + Red\n*color1:  #ff6565\n*color9:  #ff8d8d\n! DarkGreen + Green\n*color2:  #93d44f\n*color10: #c8e7a8\n! DarkYellow + Yellow\n*color3:  #eab93d\n*color11: #ffc123\n! DarkBlue + Blue\n*color4:  #204a87\n*color12: #3465a4\n! DarkMagenta + Magenta\n*color5:  #ce5c00\n*color13: #f57900\n!DarkCyan + Cyan (both not tango)\n*color6:  #89b6e2\n*color14: #46a4ff\n! LightGrey + White\n*color7:  #cccccc\n*color15: #ffffff\n```\n\nSee also:\n\n- #Using X resources for how to color bold and underlined text automatically.\n- Color Themes - Extensive list of terminal color themes by Phraktured.\n- Xcolors by dkeg (see files with paths matching theme/dkeg - theme in the repository)\n- base16 color schemes\n\n"
    },
    {
      "title": "Setting foreground and background colors with tput",
      "level": 3,
      "content": "Example to set bold, yellow text, with blue background:\n\n```\n$ tput bold; tput setaf 3; tput setab 4\n```\n\nTable content:\ntput command | Description\ntput bold | Bold text\ntput setaf [CODE] | Set foreground color\ntput setab [CODE] | Set background color\ntput rev | Inverse colors\ntput sgr0 | Reset everything\n\nTable content:\ntput color [CODE] | Color\n0 | Black\n1 | Red\n2 | Green\n3 | Yellow\n4 | Blue\n5 | Magenta\n6 | Cyan\n7 | White\n\nExample to print 256 colors across the screen:\n\n```\n$ (x=`tput op` y=`printf %76s`;for i in {0..256};do o=00$i;echo -e ${o:${#o}-3:3} `tput setaf $i;tput setab $i`${y// /=}$x;done)\n```\n\n"
    },
    {
      "title": "Display tput escape codes",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with Bash/Prompt_customization.** This article or section is a candidate for merging with Bash/Prompt_customization.\n\nThis article or section is a candidate for merging with Bash/Prompt_customization.\n\nReplace tput op with whatever tput you want to trace. op is the default foreground and background color.\n\n```\n$ ( strace -s5000 -e write tput op 2>&2 2>&1 ) | tee -a /dev/stderr | grep -o '\"[^\"]*\"'\n```\n\n```\n033[\\033[1;34m\"\\33[39;49m\"\\033[00m\n```\n\n"
    },
    {
      "title": "Enumerate supported colors",
      "level": 3,
      "content": "The following command will let you discover all the terminals you have terminfo support for, and the number of colors each terminal supports. The possible values are: 8, 15, 16, 52, 64, 88 and 256.\n\n```\n$ for T in `find /usr/share/terminfo -type f -printf '%f '`;do echo \"$T `tput -T $T colors`\";done|sort -nk2\n```\n\n```\nEterm-88color 88\nrxvt-88color 88\nxterm+88color 88\nxterm-88color 88\nEterm-256color 256\ngnome-256color 256\nkonsole-256color 256\nputty-256color 256\nrxvt-256color 256\nscreen-256color 256\nscreen-256color-bce 256\nscreen-256color-bce-s 256\nscreen-256color-s 256\nxterm+256color 256\nxterm-256color 256\n```\n\n"
    },
    {
      "title": "Color scheme scripts",
      "level": 3,
      "content": "See [3] for scripts which display a chart of your current terminal scheme.\n\n"
    },
    {
      "title": "True color support",
      "level": 3,
      "content": "Some terminals support the full range of 16 million colors (RGB, each with 8 bit resolution): xterm, konsole, st, etc. The corresponding TERM values xterm-direct, konsole-direct, st-direct, etc. are supported starting with ncurses version 6.1 [4]. For more info about terminal emulators and applications that support true color, see [5].\n\nNote that the Linux kernel supports the SGR (Select Graphic Rendition) escape sequences for true-color, but it is pointless to use it, because the driver maps the 24-bit color specifications to a 256-colors color map in the kernel (see the functions rgb_foreground, rgb_background). For this reason, there is no terminfo entry linux-direct.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- lolcat clone in x64 assembly\n\n"
    }
  ]
}