{
  "title": "Keycloak",
  "url": "https://wiki.archlinux.org/title/Keycloak",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Keycloak is an identity management solution implemented in Java that can be used as an authentication backend for many different applications.\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the keycloak package.\n\n"
    },
    {
      "title": "Running",
      "level": 2,
      "content": "Start/enable keycloak.service. In the default configuration, it will start in standalone mode which is not recommended for production environments but will be used in this article for the sake of simplicity.\n\nBy default, Keycloak is available on http://127.0.0.1:8080/ and https://127.0.0.1:8443/.\n\n"
    },
    {
      "title": "Creating an admin user",
      "level": 2,
      "content": "As per upstream instructions, you have two ways to create the initial Keycloak admin user one is connecting to keycloak through http://localhost:8080 and the second is to add environment variables for username and password for the first launch.\n\nTo do the latter, override the unit:\n\n```\n/etc/systemd/system/keycloak.service.d/admin.conf\n```\n\n```\n[Service]\nEnvironment=\"KEYCLOAK_ADMIN=admin\"\nEnvironment=\"KEYCLOAK_ADMIN_PASSWORD=securepassword\"\n```\n\nReload the systemd daemon, then restart the keycloak.service.\n\nAfterwards, make sure to delete the override and daemon-reload again, as Keycloak will refuse to start up with the environment variables defined when the account already exists.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The default standalone configuration can be found at /etc/keycloak/standalone.xml.\n\nAny changes you make to this file while the server is running will not take effect and may even be overwritten by the server. Either stop the service beforehand, use the command line scripting or use the web console of WildFly.\n\nThe ports used by the service can found in that file, albeit in a slightly unusual format:\n\n```\n/etc/keycloak/standalone.xml\n```\n\n```\n<socket-binding-group name=\"standard-sockets\" default-interface=\"public\" port-offset=\"${jboss.socket.binding.port-offset:0}\">\n        <socket-binding name=\"ajp\" port=\"${jboss.ajp.port:8009}\"/>\n        <socket-binding name=\"http\" port=\"${jboss.http.port:8080}\"/>\n        <socket-binding name=\"https\" port=\"${jboss.https.port:8443}\"/>   \n        <socket-binding name=\"management-http\" interface=\"management\" port=\"${jboss.management.http.port:9990}\"/>\n        <socket-binding name=\"management-https\" interface=\"management\" port=\"${jboss.management.https.port:9993}\"/>\n        <socket-binding name=\"txn-recovery-environment\" port=\"4712\"/>\n        <socket-binding name=\"txn-status-manager\" port=\"4713\"/>\n        <outbound-socket-binding name=\"mail-smtp\">\n            <remote-destination host=\"localhost\" port=\"25\"/>\n        </outbound-socket-binding>\n    </socket-binding-group>\n```\n\n"
    },
    {
      "title": "H2 configuration",
      "level": 3,
      "content": "Keycloak's standalone.xml file is preconfigured with two h2 datasources. One is \"ExampleDS\", and can be safely removed. The other is \"KeycloakDS\" and is used to store Keycloak's configuration. (jboss.home.dir refers to /opt/keycloak in the Keycloak package)\n\nExample configuration parts for the H2 file-based database:\n\n```\n/etc/keycloak/standalone.xml\n```\n\n```\n<subsystem xmlns=\"urn:jboss:domain:datasources:5.0\">\n            <datasources>\n                <datasource jndi-name=\"java:jboss/datasources/ExampleDS\" pool-name=\"ExampleDS\" enabled=\"true\" use-java-context=\"true\" statistics-enabled=\"${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}\">\n                    <connection-url>jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</connection-url>\n                    <driver>h2</driver>\n                    <security>\n                        <user-name>sa</user-name>\n                        <password>sa</password>\n                    </security>\n                </datasource>\n                <datasource jndi-name=\"java:jboss/datasources/KeycloakDS\" pool-name=\"KeycloakDS\" enabled=\"true\" use-java-context=\"true\" statistics-enabled=\"${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}\">\n                    <connection-url>jdbc:h2:${jboss.server.data.dir}/keycloak;AUTO_SERVER=TRUE</connection-url>\n                    <driver>h2</driver>\n                    <security>\n                        <user-name>sa</user-name>\n                        <password>sa</password>\n                    </security>\n                </datasource>\n                <drivers>\n                    <driver name=\"h2\" module=\"com.h2database.h2\">\n                        <xa-datasource-class>org.h2.jdbcx.JdbcDataSource</xa-datasource-class>\n                    </driver>\n                </drivers>\n            </datasources>\n        </subsystem>\n   ...\n            <default-bindings context-service=\"java:jboss/ee/concurrency/context/default\" datasource=\"java:jboss/datasources/KeycloakDS\" managed-executor-service=\"java:jboss/ee/concurrency/executor/default\" managed-scheduled-executor-service=\"java:jboss/ee/concurrency/scheduler/default\" managed-thread-factory=\"java:jboss/ee/concurrency/factory/default\"/>\n```\n\n"
    },
    {
      "title": "PostgreSQL configuration",
      "level": 3,
      "content": "The official Arch Linux Keycloak package already comes with inbuilt PostgreSQL support.\n\nExample configuration parts for PostgreSQL:\n\n```\n/etc/keycloak/standalone.xml\n```\n\n```\n<subsystem xmlns=\"urn:jboss:domain:datasources:5.0\">\n            <datasources>\n                <datasource jndi-name=\"java:jboss/datasources/KeycloakDS\" pool-name=\"KeycloakDS\" enabled=\"true\" use-java-context=\"true\" statistics-enabled=\"${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}\">\n                    <connection-url>jdbc:postgresql://localhost:5432/keycloak</connection-url>\n                    <driver>postgresql</driver>\n                    <security>\n                        <user-name>keycloak</user-name>\n                        <password>keycloak</password>\n                    </security>\n                </datasource>\n                <drivers>\n                    <driver name=\"postgresql\" module=\"org.postgresql\">\n                        <xa-datasource-class>org.postgresql.xa.PGXADataSource</xa-datasource-class>\n                    </driver>\n                </drivers>\n            </datasources>\n        </subsystem>\n   ...\n            <default-bindings context-service=\"java:jboss/ee/concurrency/context/default\" datasource=\"java:jboss/datasources/KeycloakDS\" managed-executor-service=\"java:jboss/ee/concurrency/executor/default\" managed-scheduled-executor-service=\"java:jboss/ee/concurrency/scheduler/default\" managed-thread-factory=\"java:jboss/ee/concurrency/factory/default\"/>\n```\n\n"
    },
    {
      "title": "Keycloak Prometheus metrics",
      "level": 3,
      "content": "Install the keycloak-metrics-spi package. To enable the metrics listener endpoint\n\n```\n/opt/keycloak/bin/kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user $KEYCLOAK_ADMIN --password $KEYCLOAK_PASS\n /opt/keycloak/bin/kcadm.sh update events/config -s \"eventsEnabled=true\" -s \"adminEventsEnabled=true\" -s \"eventsListeners+=metrics-listener\"\n```\n\nThe config command creates a kcadm.config file in the .keycloak directory of the user who runs the command. As contains an access token, it is recommend to remove the file after\n\n```\nrm /home/$USER/.keycloak/kcadm.config\n```\n\nAfter restarting the metrics are available via http://localhost:8080/auth/realms/master/metrics\n\n"
    },
    {
      "title": "External links",
      "level": 2,
      "content": "- Configuring Keycloak with Postgres\n- Official Keycloak documentation\n\n"
    }
  ]
}