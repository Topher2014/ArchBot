{
  "title": "Jhbuild",
  "url": "https://wiki.archlinux.org/title/Jhbuild",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- GNOME\n\nFrom JHBuild's wiki:\n\nJHBuild is a tool that allows you to automatically download and compile \"modules\" (i.e. source code packages). It can pull modules from a variety of sources (CVS, Subversion, Git, Bazaar, tarballs, etc.) and handle dependencies. You can also choose which specific modules you want to build, instead of building the whole project.\n\nJHBuild was originally written for building GNOME, but has since been extended to be usable with other projects.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the jhbuildAUR package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "There are two configuration files: the default configuration file installed by jhbuildAUR package, and the user-specific configuration file created by the user.\n\nBy default JHBuild uses the installed configuration file. Its configuration is overridden by the configuration in the user-specific configuration file if it exists.\n\nThese use Python syntax. See JHBuild Manual for more information.\n\n"
    },
    {
      "title": "Default configuration file",
      "level": 3,
      "content": "The default configuration file is located at /usr/lib/python3.9/site-packages/jhbuild/defaults.jhbuildrc. It should have everything you need for start using JHBuild, as it sets the modulesets directory, the default moduleset, autogen/meson/cmake arguments for all modules that use it.\n\nSome default values currently set:\n\n- moduleset = gnome-apps-latest\n- modules = meta-gnome-core\n- directory of downloaded tarball = $XDG_CACHE_HOME/jhbuild/downloads\n- buildroot = $XDG_CACHE_HOME/jhbuild/build\n\nIf believe you found a Arch-specific setting that should be set, feel free to suggest that in jhbuildAUR comments. If not Arch-specific, consider filing an issue in the upstream.\n\n"
    },
    {
      "title": "User-specific configuration file",
      "level": 3,
      "content": "This configuration file is located at $XDG_CONFIG_HOME/jhbuildrc (e.g. ~/.config/jhbuildrc). It is optional, does not exist by default and overrides values set in the default JHBuild configuration file.\n\nIt is very useful for, e.g., set a different moduleset, or to add a compiler flag to debug and try to fix a build failure system.\n\nSee examples in /usr/share/jhbuild/examples/.\n\n"
    },
    {
      "title": "Sample configuration",
      "level": 3,
      "content": "This section shows a non-exhaustive list of key/value pairs that can be set in any of the configuration files.\n\n- Use a local moduleset file instead of downloading it again, making it possible to change something in the file and test it\n\n```\nuse_local_modulesets = True\nmodulesets_dir = \"~/.cache/jhbuild/\"\n```\n\n- Enable a wide-most moduleset, and also force GTK3 for modules that would use GTK2 by default\n\n```\nmoduleset = ['gnome-world']\nautogenargs = '--with-gtk3'\n```\n\n- Or you may want to enable documentation build for autotools, even though it will slowdown module compilation\n\n```\nautogenargs = '--enable-gtk-doc'\n```\n\n- Or you want some debug output from make command\n\n```\nmakeargs = 'V=1'\n```\n\n- Or you found out that a module requires a specific automake option (WebKit is already patched, there is no real need for this one)\n\n```\nmodule_autogenargs['WebKit'] = 'PYTHON=/usr/bin/python2'\n```\n\n- Or you want to disable documentation build for a module that use meson build system\n\n```\nmodule_mesonargs['gstreamer'] = '-Ddisable_gtkdoc=true'\n```\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "This topic provides some information and examples on how to use some JHBuild commands, but without intending to exhaust the subject. For a detailed information on each of JHBuild commands, please refer to JHBuild Manual, learn from each command's help output or even read JHBuild's source code.\n\nJHBuild provides a general --help which lists all the commands available, and also a help message for each sub-command, e.g. jhbuild sysdeps --help.\n\n"
    },
    {
      "title": "Checking and installing prerequisites",
      "level": 3,
      "content": "sysdeps can be used to get a detailed list of which dependencies you have installed and which ones you should install. In order to get this information, just run:\n\n```\n$ jhbuild sysdeps\n```\n\nTo install missing dependencies, run use --install parameter:\n\n```\n$ jhbuild sysdeps --install\n```\n\nFor dependencies that the above command is unable install, consider installing the correspondent package from official repositories or the AUR.\n\n"
    },
    {
      "title": "Updating modules",
      "level": 3,
      "content": "It is possible to simply update the source code of the modules without building them, making it possible build another time without having to wait fetching the source code. There are three ways of simply updating modules:\n\nupdate, without any arguments, will update all modules available in the moduleset/modules set in configuration file\n\n```\n$ jhbuild update\n```\n\nupdate, with one or more modules as arguments, will update all modules that the named modules depends on. e.g.:\n\n```\n$ jhbuild update gedit\n```\n\nupdateone, with one or more modules, will update only the named module(s). e.g.:\n\n```\n$ jhbuild updateonly gedit\n```\n\n"
    },
    {
      "title": "Building modules",
      "level": 3,
      "content": "This action will run the whole build process: it will update the source code (unless it is already up-to-date), configure & build, and install it in the proper directory.\n\nJust like update, There are three ways of building modules in JHBuild:\n\nbuild, without any arguments, will build all modules available in the moduleset/modules set in configuration file\n\n```\n$ jhbuild build\n```\n\nbuild, with one or more modules as arguments, will build all modules that the named modules depends on. e.g.:\n\n```\n$ jhbuild build gedit\n```\n\nbuildone, with one or more modules, will build only the named module(s). e.g.:\n\n```\n$ jhbuild buildone gedit\n```\n\n"
    },
    {
      "title": "Running modules",
      "level": 3,
      "content": "After a successfully installed application in JHBuild, use run to start the module you just built. e.g.:\n\n```\n$ jhbuild run gedit\n```\n\n"
    },
    {
      "title": "Creating dependency graph",
      "level": 3,
      "content": "JHBuild can output graph contents which can by piped into graphviz in order to generate e.g. a PNG or PostScript file.\n\nTo generate a PNG file of e.g. gedit, run:\n\n```\n$ jhbuild dot gedit | dot -Tpng > dependencies.png\n```\n\n"
    },
    {
      "title": "Python issues",
      "level": 3,
      "content": "A module that depends on python2AUR may fail to build as software usually expect the binary filename of python 2.x to be /usr/bin/python and python 3.x to be /usr/bin/python3, which is not the case in Arch Linux: python 2.x is /usr/bin/python2 and python 3.x is /usr/bin/python.\n\nFor cases like that, force the modules to run /usr/bin/python2 using the one or more methods below:\n\n- set module_autoargs with PYTHON=/usr/bin/python2 for this specific module in ~/.config/jhbuildrc, as mentioned in the above Configuration section — this will run autogen.sh or configure with this value for variable PYTHON\n\n- if the configure or Makefile does not parse PYTHON variable, one approach is to manually find all lines in configure/Makefile that run python binary and rename python -> python2 — this will hard code python2 in the module's source code.\n\n- if only the above workarounds still do not work for you, consider editing module's .py files in order to replace python with python2 when the first line matches #!/usr/bin/env python or #!/usr/bin/python\n\n- All edits and patches that are manually applied to the source code will be lost when you wipe the directory and checkout (download) it again, so it is not exactly a permanent solution\n- If a module's configure/build process misuse PYTHON variable, or does not use at all, consider reporting it to the module's upstream and/or providing patch for JHBuild upstream\n\n"
    },
    {
      "title": "pkg-config issues",
      "level": 3,
      "content": "If you have a malformatted .pc file on your PKG_CONFIG_PATH, JHBuild will not be able to detect all the (valid) .pc files you have installed and will complain that the .pc files are missing. Look at the output of jhbuild sysdeps—there should be a message about the problematic .pc files.\n\n"
    },
    {
      "title": "Build failed due to incompatible meson versions",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nYou may come across with a message similar to one of these below.\n\n```\nMeson encountered an error:\nBuild directory has been generated with Meson version 0.40.0, which is incompatible with current version 0.40.1.\nPlease delete this build directory AND create a new one.\nFAILED: build.ninja \n'/usr/bin/python3' '/home/foobar/jhbuild/install/bin/meson' --internal regenerate '/home/foobar/jhbuild/checkout/gst-plugins-base' '/home/foobar/.cache/jhbuild/build/gst-plugins-base' --backend ninja\nninja: error: rebuilding 'build.ninja': subcommand failed\n```\n\nIn the above example, the module was configured with meson 0.40.0 at on time, but a newer version (0.40.1, in the example) is now installed and is not compatible with the old one.\n\nSolution: Run Configure phase again, in order to have this module configured with newer Meson version\n\n"
    },
    {
      "title": "Build failed due to GCC library or object not found",
      "level": 3,
      "content": "You may come across with a message similar to the one below.\n\n```\ncc: error: /usr/lib/gcc/x86_64-pc-linux-gnu/gcc_version/../../../../lib/name.so: No such file or directory\n```\n\nor\n\n```\ng++: error: /usr/lib/gcc/x86_64-pc-linux-gnu/gcc_version/../../../../lib/name.o: No such file or directory\n```\n\nwhere gcc_version is a GCC version older than the current one, and name is the name of the library (.so) or object (.o) that failed to be found.\n\nThis may happen if gcc was updated and the software was previously configured and built with the previous version of gcc.\n\nSolution: Run Configure phase again, in order to have this module configured with newer GCC version\n\n"
    },
    {
      "title": "gst-plugin-bad fails on missing vulkan headers",
      "level": 3,
      "content": "When building the gst-plugins-bad module, You may come across with a number of messages similar to the one below:\n\n```\nIn file included from ext/vulkan/gstvulkan-plugins-enumtypes.c:8:\n../../../../jhbuild/checkout/gst-plugins-bad/ext/vulkan/vkviewconvert.h:26:10: fatal error: gst/vulkan/vulkan.h: No such file or directory\n   26\n```\n\nIt means gst-plugin-bad was automatically set to build its vulkan extension, but did not find all the dependecies it needs. As of the writing this subsection, ext/vulkan/meson.build looks for the binary glslc provided by shaderc, which several packages depend on directly or indirectly. Removing shaderc would solve this error, but this might not be an option if you want to keep those packages depend on it.\n\nSolution: edit your jhbuild user configuration file to disable the vulkan extension:\n\n```\n~/.config/jhbuildrc\n```\n\n```\nmodule_mesonargs['gst-plugins-bad'] = '-D vulkan=disabled'\n```\n\nand run Configure phase again, in order to have the gst-plugins-bad module successfully built.\n\n"
    },
    {
      "title": "Library missing and no known rule to make it",
      "level": 3,
      "content": "When building a module that uses meson build system you might come across an issue like this:\n\n```\n*** Checking out module_name *** [67/218]\nsome omitted checkout output\n*** Building module_name *** [67/218]\nninja\nninja: error: 'path/to/missing_library.so', needed by 'path/to/module_file', missing and no known rule to make it\n*** Error during the phase build of module_name: ########## Error running ninja   *** [67/218]\n```\n\nThis happens because the module was previously configured and built in another commit of this module, and in that occasion it was configured to a previous version of the dependency path/to/missing_library.so. Since the file path/to/module_file was configured to and expects that missing library to be available, it fails.\n\nSolution: Just run option 7 for the configure phase to reconfigure the module and build it again.\n\n"
    },
    {
      "title": "Building JHBuild from scratch",
      "level": 2,
      "content": "If you do not want to use the jhbuildAUR package, and instead you want build JHBuild from scratch on your own, there are a few things you should pay attention too.\n\n- Make sure to install all the dependencies required by JHBuild and its target modules. Refer to list of dependencies for Arch Linux;\n\n- JHBuild itself used to depend on Python version 2 but it got migrated to python 3, so no specific configuration on python version;\n\n- Some modules might still depend on python2. Make sure to read the #Python issues section;\n\n- For detailed information downloading and building the source code of JHBuild, check JHBuild's \"How Do I\" at GNOME wiki.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- JHBuild homepage in GNOME Wiki\n- JHBuild for experienced GNOME contributors\n- JHBuild Manual\n- JHBuild Source Code\n\n"
    }
  ]
}