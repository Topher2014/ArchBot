{
  "title": "Caddy",
  "url": "https://wiki.archlinux.org/title/Caddy",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Caddy is a HTTP/3 capable web server with automatic HTTPS.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the caddy package.\n\n"
    },
    {
      "title": "Plugins",
      "level": 2,
      "content": "If you need more than the base version of caddy, you can use xcaddy-binAUR to customize your caddy server build. This is useful if you need the additional plugins for DNS challenge, etc. Alternatively, if a pre-built package, with the plugins you require, is already available you may choose to install those from AUR, for eg. caddy-cloudflareAUR.\n\nFor a custom caddy server build you can use xcaddy to build caddy with the necessary plugin modules:\n\n```\n$ xcaddy build [<caddy_version>]\n   [--output <file>]\n   [--with <module[@version][=replacement]>...]\n```\n\nFor more information, see the xcaddy repository.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Caddy 2 supports various configuration formats, see config adapters (caddyfile, nginx, json, yaml, toml, among others).\n\nMost commonly, Caddy is configured using a plain text file called Caddyfile. The Caddyfile starts with (an optional global options block and) an address of the site to be served, and is followed by a number of directives.\n\nA simple Caddyfile hosting the site at localhost:2020:\n\n```\n{\n  http_port 2020\n}\n\nlocalhost:2020\nfile_server\n```\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "```\n$ caddy help\n$ caddy help run\n```\n\nCaddy can be run by any user from the page's directory, and the Caddyfile should be in the same directory:\n\n```\n$ caddy run\n```\n\nAlternatively you may specify a custom Caddyfile:\n\n```\n$ caddy run --config ../path/to/Caddyfile\n```\n\n"
    },
    {
      "title": "Certificate error",
      "level": 3,
      "content": "If you are facing any issues related to SSL certificates (especially on non-public domains), it is probably because the running caddy instance does not have permission to add the certificate to the system's trust store. This seems to be the case when caddy.service is used to autostart caddy.\n\nTo fix this, run the following as root. You only have to run this once in a very long time (lifetime of the root certificate).\n\n```\n# XDG_DATA_HOME=/var/lib caddy trust\n```\n\n"
    },
    {
      "title": "Missing Content-Type",
      "level": 3,
      "content": "If you are facing issues when using the browse subdirective of the file-server like e.g. video files not displayed properly, it could be due to missing Content-Type header in HTTP responses.\n\nCaddy is written in Go and uses the TypeByExtension function of the standard MIME library to obtain the mime type from the file extension. As documented, the TypeByExtension function uses /etc/mime.types (or one of the other listed files) to get the MIME type.\n\nYou have to install the mailcap package to make /etc/mime.types available to caddy, allowing proper generation of the Content-Type header.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Caddy Official Website\n- Caddy User Guide\n- Caddyfile documentation\n\n"
    }
  ]
}