{
  "title": "Blender",
  "url": "https://wiki.archlinux.org/title/Blender",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Blender is best known as a popular open source 3D modelling program.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the blender package.\n\n"
    },
    {
      "title": "GPU rendering",
      "level": 2,
      "content": "Blender supports a multitude of hardware offloading options for rendering. After preparing your system according to your hardware (see following paragraphs), you can set these your graphics card as a compute device under Edit > Preferences... > System.\n\n"
    },
    {
      "title": "NVIDIA GPUs",
      "level": 3,
      "content": "For NVIDIA, Blender supports two GPU rendering backends: CUDA and OptiX. Most modern NVIDIA GPUs are supported. In order to make use of these, you need to install cuda. Afterwards, the rendering backends should be available in the systems options.\n\n"
    },
    {
      "title": "Intel Arc GPUs",
      "level": 3,
      "content": "If you have a modern Intel Arc GPU, you can make use of Blender's built-in hardware rendering support for those devices. To do so, you need to have the intel-compute-runtime package installed.\n\nAs of this writing, you might have to launch Blender with the an additional environment variable set:\n\n```\nCYCLES_ONEAPI_ALL_DEVICES=1 blender\n```\n\n"
    },
    {
      "title": "HIP on AMD open source drivers",
      "level": 3,
      "content": "On supported GPUs (GFX9, CDNA, and RDNA; see the official hardware compatibility list for more info), hip-runtime-amd can be used to get GPU acceleration through HIP in Blender, using Mesa.\n\nTo get HIP working in Blender, install hip-runtime-amd and select your GPU in the Blender's Preferences, same as with proprietary drivers.\n\n"
    },
    {
      "title": "Enable Hardware Ray tracing on supported GPUs",
      "level": 4,
      "content": "To enable hardware raytracing on Navi 2x (AMD 6xxx series) and upward, hiprt must be installed. The minimum Blender version is 3.5+.\n\nThis gives a steady 20% speed boost on Navi 3x compared to software ray tracing.\n\n"
    },
    {
      "title": "Professional rendering plugins",
      "level": 2,
      "content": "Blender is becoming increasingly well known in the professional industry. As such, there are now alternative rendering methods to EEVEE and Cycles, in the form of plugins. This should serve as a list of the major professional rendering plugins that are released or upcoming for Linux.\n\n"
    },
    {
      "title": "BlendNet",
      "level": 3,
      "content": "BlendNet is an open source plugin that allows distributing CPU and GPU renders across multiple machines.\n\nBlendNet natively integrates with major cloud providers like AWS, Azure or GCP, and also supports self-hosting your own render farm.\n\n"
    },
    {
      "title": "Cloud integration",
      "level": 4,
      "content": "1. Install the blendnetAUR package\n1. Enable the BlendNet plugin in Preferences -> Add-ons -> Enable \"Render: BlendNet\"\n1. Follow the instructions on the official BlendNet wiki to configure a render farm on AWS, Azure or GCP.\n\n"
    },
    {
      "title": "Self-hosting",
      "level": 4,
      "content": "The blendnetAUR package provides systemd units and configuration to quickly deploy your own CUDA GPU-accelerated Blendnet render farm.\n\nA BlendNet render farm consists of one Manager instance, which distributes tasks to multiple Agent machines. The blender Addon connects to the Manager and the Agents to schedule renders. See the BlendNet wiki for more information on BlendNet architecture.\n\nTo start, install blendnetAUR on the Manager, Agent and Addon machines, then follow these instructions.\n\n1. Copy /etc/blendnet/server.key and /etc/blendnet/server.crt to all Agent and Addon machines, to /etc/blendnet/.\n1. Edit /etc/blendnet/manager.json, adding a manager username and password.\n1. Edit /etc/blendnet/manager.json, adding an agent username and password.\n1. Start/enable the blendnet-manager.service unit.\n\n1. Edit /etc/blendnet/agent.json, adding the same agent username and password used in the Manager.\n1. Start/enable the blendnet-agent.service unit.\n\nIf cuda is installed, blendnetAUR will automatically enable GPU+CPU acceleration: you can check whether GPU acceleration is in use by checking the agent logs:\n\n```\n$ journalctl -xefu blendnet-agent.service\n```\n\n1. Enable the BlendNet plugin in Preferences -> Add-ons -> Enable \"Render: BlendNet\".\n1. Configure the plugin with the Manager/Agent usernames and passwords.\n1. Specify the CA certificate located in /etc/blendnet/server.crt.\n1. Close Preferences, open the Render tab and switch to the Cycles rendering engine (**NOT** BlendNet!).\n1. Add all Agents using the + button in the new \"BlendNet Render (local)\" Cycles panel.\n1. Follow the BlendNet rendering instructions.\n\n"
    },
    {
      "title": "LuxCoreRender",
      "level": 3,
      "content": "LuxCoreRender is an open source rendering method that can also make use of OpenCL to render. To make use of it, simply install the (blender-plugin-luxcorerenderAUR) package and then enable the LuxCoreRender addon in the User Preferences box in Blender.\n\n"
    },
    {
      "title": "RenderMan",
      "level": 3,
      "content": "RenderMan is a Linux compatible proprietary rendering plugin that is free for use with blender under a non-commercial license. See the Renderman page for setting it up with blender.\n\n"
    },
    {
      "title": "Pro-Render",
      "level": 3,
      "content": "Pro-Render is an open source Blender rendering plugin from AMD that will allow any machine using an OpenCL 1.2 compatible AMD GPU the ability to create realistic GPU renders, allowing for faster work compared to the CPU.\n\n"
    },
    {
      "title": "Blend4Web",
      "level": 3,
      "content": "Blend4Web is an open source framework for creating and displaying interactive 3D graphics in web browsers. It contains a Blender add-on to create and export 3D scenes directly into the web. A Blend4Web-specific profile can be activated in the add-on settings. When switching to this profile, the Blender interface changes so that it only reveals settings relevant to Blend4Web. See the documentation on how to install Blend4Web SDK.\n\n"
    },
    {
      "title": "Verge3D",
      "level": 3,
      "content": "Verge3D for Blender is a real-time renderer and a toolkit from the original creators of Blend4Web. It contains Puzzles visual editor to allow creating interactive web applications without coding.\n\n"
    },
    {
      "title": "Blender is slow to select objects",
      "level": 3,
      "content": "When using onboard Intel graphics, it may take 5-10 seconds to select an object. Change Selection in File > User Preferences > System to OpenGL Occlusion Queries.\n\n"
    },
    {
      "title": "Blender does not show the AMD card as an OpenCL rendering device",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nBlender only supports the official AMD proprietary drivers for rendering with OpenCL (for now), meaning you will need to install one of the following AMD OpenCL drivers:\n\n- Install AMDGPU PRO\n- Install opencl-amdAUR driver alongside the open source AMDGPU driver\n\nAfter installation, the AMD GPU should now appear as a selectable device under File > User Preferences > System > Compute Device.\n\nNote: Blender developers decided to switch another API (HIP) and deprecate OpenCL support. This will happen in Blender 3.0 release (4th December 2021). More information.\n\n"
    },
    {
      "title": "Blender crashes on i915",
      "level": 3,
      "content": "Blender gets unresponsive simply by resizing the startup cube, dmesg shows messages about a GPU hang:\n\n```\nkernel: i915 0000:00:02.0: [drm] blender[90663] context reset due to GPU hang\nkernel: i915 0000:00:02.0: [drm] GPU HANG: ecode 9:1:85df9ebf, in blender [90663]\n```\n\nWorkaround based on the Upstream Bug and a question on AskUbuntu:\n\n- Start Blender with the environment variable INTEL_DEBUG=reemit, i.e. by changing the .desktop file's Exec line to Exec=env INTEL_DEBUG=reemit blender %f\n- Increase the preemtion timeout to 10 000 ms. To persist this, add a udev rule:\n\n```\n/etc/udev/rules.d/99-i915-increase-preemt-timeout.rules\n```\n\n```\n# Increase Intel preemt timeout to 10 000 ms\n#\n# This is needed for Blender not to crush, see\n# https://askubuntu.com/questions/1477715/blender-hangs-using-intel-integrated-graphics\n \nACTION==\"add|bind\",SUBSYSTEM==\"pci\",DRIVER==\"i915\",RUN+=\"/bin/bash -c 'for i in /sys/$DEVPATH/drm/card?/engine/[rc]cs*/preempt_timeout_ms; do echo 10000 > $i; done'\"\n```\n\n"
    },
    {
      "title": "Interface text",
      "level": 3,
      "content": "If fonts look small or blurry, their size can be increased (by a point or two) in User Preferences > Themes > Text Style. Selecting a bold font family as Interface Font in User Preferences > Themes > System can also greatly decrease blurriness.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Blender manual\n- Blender wiki on Reddit\n- Sheepit free, distributed render farm for Blender\n\n"
    }
  ]
}