{
  "title": "Apple Keyboard",
  "url": "https://wiki.archlinux.org/title/Apple_Keyboard",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Extra keyboard keys\n\nSome keyboard models that use the Apple keyboard driver may have swapped keys or missing functionality. This article describes how to change the settings for the keyboard so that it behaves as expected.\n\n"
    },
    {
      "title": "Numlock is on",
      "level": 2,
      "content": "You may find that the numlock is on. The symptoms are that only the physical keys 7,8,9,u,i,o,j,k,l and surrounding keys work and output numbers. To fix this hit Fn+F6 twice or thrice. You might need to use a utility like numlockx.\n\nAlternatively, set the keycodes manually using xmodmap to avoid use Numlock:\n\n```\nkeycode  90 = KP_0 KP_0 KP_0 KP_0 KP_0 KP_0\nkeycode  87 = KP_1 KP_1 KP_1 KP_1 KP_1 KP_1\nkeycode  88 = KP_2 KP_2 KP_2 KP_2 KP_2 KP_2\nkeycode  89 = KP_3 KP_3 KP_3 KP_3 KP_3 KP_3\nkeycode  83 = KP_4 KP_4 KP_4 KP_4 KP_4 KP_4\nkeycode  84 = KP_5 KP_5 KP_5 KP_5 KP_5 KP_5\nkeycode  85 = KP_6 KP_6 KP_6 KP_6 KP_6 KP_6\nkeycode  79 = KP_7 KP_7 KP_7 KP_7 KP_7 KP_7\nkeycode  80 = KP_8 KP_8 KP_8 KP_8 KP_8 KP_8\nkeycode  81 = KP_9 KP_9 KP_9 KP_9 KP_9 KP_9\n```\n\n"
    },
    {
      "title": "Repeating keys on a wireless keyboard",
      "level": 2,
      "content": "Unpair the keyboard and then re-pair it. The trick is to hold down the power button throughout the entire pairing process.\n\n"
    },
    {
      "title": "hid_apple module options",
      "level": 2,
      "content": "- fnmode - Mode of top-row keys 0 - disabled 1 - normally media keys, switchable to function keys by holding Fn key (=auto on Apple keyboards) 2 - normally function keys, switchable to media keys by holding Fn key (=auto on non-Apple keyboards) 3 - auto (Default)\n- iso_layout - Enable/disable hardcoded ISO layout of the keyboard. Possibly relevant for international keyboard layouts 0 - not ISO (=auto on ANSI keyboards) 1 - ISO (=auto on ISO keyboards) -1 - auto (Default)\n- swap_opt_cmd - Swap the Option (Alt) and Command (Flag) keys 0 - as silkscreened, Mac layout (Default) 1 - swapped, PC layout\n- swap_fn_leftctrl - Swap the Fn and L_Control keys 0 - as silkscreened, Mac layout (Default) 1 - swapped, PC layout\n\n- 0 - disabled\n- 1 - normally media keys, switchable to function keys by holding Fn key (=auto on Apple keyboards)\n- 2 - normally function keys, switchable to media keys by holding Fn key (=auto on non-Apple keyboards)\n- 3 - auto (Default)\n\n- 0 - not ISO (=auto on ANSI keyboards)\n- 1 - ISO (=auto on ISO keyboards)\n- -1 - auto (Default)\n\n- 0 - as silkscreened, Mac layout (Default)\n- 1 - swapped, PC layout\n\n- 0 - as silkscreened, Mac layout (Default)\n- 1 - swapped, PC layout\n\n"
    },
    {
      "title": "Function keys do not work",
      "level": 2,
      "content": "If your F<num> keys do not work, this is probably because the kernel driver for the keyboard has defaulted to using the media keys and requiring you to use the Fn key to get to the F<num> keys. To change the behavior temporarily, append 2 to /sys/module/hid_apple/parameters/fnmode.\n\n```\n# echo 2 >> /sys/module/hid_apple/parameters/fnmode\n```\n\nTo make the change permanent, set the hid_apple fnmode option to 2:\n\n```\n/etc/modprobe.d/hid_apple.conf\n```\n\n```\noptions hid_apple fnmode=2\n```\n\nTo apply the change to your initial ramdisk, in your mkinitcpio configuration (usually /etc/mkinitcpio.conf), make sure you either have modconf included in the HOOKS variable or /etc/modprobe.d/hid_apple.conf in the FILES variable. You would then need to regenerate the initramfs.\n\n"
    },
    {
      "title": "Switching Cmd and Alt/AltGr",
      "level": 2,
      "content": "This will switch the left Alt and Cmd key as well as the right Alt/AltGr and Cmd key.\n\nTemporary and immediate solution:\n\n```\n# echo \"1\" > /sys/module/hid_apple/parameters/swap_opt_cmd\n```\n\nPermanent change, taking place at next reboot:\n\n```\n/etc/modprobe.d/hid_apple.conf\n```\n\n```\noptions hid_apple swap_opt_cmd=1\n```\n\nYou then need to regenerate the initramfs.\n\n"
    },
    {
      "title": "Swap the function and left control keys",
      "level": 2,
      "content": "This will switch the Fn and left Ctrl keys.\n\nTemporary and immediate solution:\n\n```\n# echo \"1\" > /sys/module/hid_apple/parameters/swap_fn_leftctrl\n```\n\nPermanent change, taking place at next reboot:\n\n```\n/etc/modprobe.d/hid_apple.conf\n```\n\n```\noptions hid_apple swap_fn_leftctrl=1\n```\n\nYou then need to regenerate the initramfs.\n\n"
    },
    {
      "title": "PrintScreen and SysRq",
      "level": 2,
      "content": "Apple Keyboards have an F13 key instead of a PrintScreen/SysRq key. This means that Alt+SysRq sequences do not work, and application actions associated with PrintScreen (such as taking screenshots in many games that work under Wine) do not work. To fix this, you can add setxkbmap -option \"apple:alupckeys\" to your .xinitrc. This will map PrintScreen/SysRq to F13, as well as Scroll lock to F14 and Pause to F15.\n\nAlternatively, follow the Map scancodes to keycodes article to map the F13 scancode to the PrintScreen/SysRq keycode, where 458856 (0x070068) is the scancode of F13, and sysrq is the keycode of PrintScreen/SysRq.\n\n"
    },
    {
      "title": "Treating Apple keyboards like regular keyboards",
      "level": 2,
      "content": "Depending on the customisations you want to accomplish, there are two solutions available and some options that are in the kernel. You need to choose one of the other.\n\n"
    },
    {
      "title": "Use a patch to hid-apple",
      "level": 3,
      "content": "While the original hid-apple module does not have options to further customize the keyboard, like swapping Fn and left Ctrl keys or having Alt on the left side of Super, there is a patched version adding this functionality to the module. To use it, install the hid-apple-patched-dkms-gitAUR package. This will install the patched hid-apple and mask out the original one.\n\nThe package uses DKMS to automatically recompile the module during kernel upgrades. While the dkms will be pulled in by dependency. You still need to install an appropriate kernel header package manually. See the DKMS page for more info.\n\nIn addition to the patched kernel module, a configuration file is also provided by the package at /usr/lib/modprobe.d/hid_apple.conf, which enables PC-like layout by default:\n\n- Top-row keys are normally function keys, switchable to media keys by holding Fn key, as in #Function keys do not work.\n- Four keys at the lower left corner act as Ctrl, Fn, Super, Alt, in this order.\n- Two keys at the lower right corner act as Alt, Ctrl, in this order.\n- If you have an Ejectcd key, it will act as Delete key.\n\nIf you wish to change the default options, copy the configuration file to /etc/modprobe.d and make desired changes:\n\n```\n# cp {/usr/lib,/etc}/modprobe.d/hid_apple.conf\n```\n\nThe file under /etc/modprobe.d will completely override the one with the same name under /usr/lib/modprobe.d, and the content is NOT merged.\n\nAlternatively, put additional options in a file with a different name if you want to keep default ones.\n\nPlease refer to the project README for the exact meaning of each configuration option and tweaking the configuration file to suit your needs. Learn more about modprobe.d at Kernel module#Using modprobe.d.\n\nAfter installation, reboot for the change to take effect, or #Change the behavior without reboot.\n\n"
    },
    {
      "title": "Troubleshooting configuration not picked up by the module",
      "level": 4,
      "content": "First, make sure the patched version is loaded, see what parameters are provided by the module:\n\n```\n$ ls /sys/module/hid_apple/parameters/\n```\n\nIf you do not see new options like swap_fn_leftctrl, ejectcd_as_delete, etc., check your DKMS installation.\n\nThen, check if configuration files are correctly included in the initramfs:\n\n```\n$ mkdir /tmp/initramfs\n$ cd /tmp/initramfs\n# lsinitcpio -x /boot/initramfs-linux.img\n```\n\nCheck the presence and content of usr/lib/modprobe.d/hid_apple.conf and any other relevant configuration files in etc/modprobe.d/. If they are not there, you should check your /etc/mkinitcpio.conf to include those. By default, there should be a modconf hook that automatically include those files, if not, add it to the HOOKS array after autodetect.\n\nAlternatively, specify those files in FILES array explicitly:\n\n```\nFILES=(/usr/lib/modprobe.d/hid_apple.conf)\n```\n\nFinally, regenerate the initramfs and reboot.\n\n"
    },
    {
      "title": "Use un-apple-keyboard",
      "level": 3,
      "content": "If you do not need all of these customizations and you do not want to compile a new module manually or using dkms, there is an AUR package un-apple-keyboardAUR which does not rely on a new kernel module, but rather just to mappings. It enables the following features:\n\n- The keyboard is considered as an ISO keyboard (e.g. < and > located at the right of the Left Shift key are working like expected).\n- The function keys are disabled by default. You need to press the Fn key in combination to trigger them. By default, the behavior are thus keys F1 to F12\n- The Alt and Cmd keys are swapped.\n- F13 is mapped to SYSRQ, F14 to Scroll Lock and F15 to Pause.\n\nThe first 3 aforementioned features are brought to you using the default linux kernel module hid-apple.\n\nThe last one is provided by providing a mapping to keyfuzzAUR.\n\n"
    },
    {
      "title": "Change the behavior without reboot",
      "level": 3,
      "content": "To reload the kernel module without reboot, run\n\n```\n# rmmod hid_apple && modprobe hid_apple\n```\n\n"
    },
    {
      "title": "Magic Keyboard does not connect",
      "level": 2,
      "content": "If you have a magic keyboard that will not connect to the system through the built in tools, such as the Gnome 3 bluetooth menu in settings, install blueman and its dependencies and attempt to connect with it. If it still fails to connect, make sure you have bluetoothctl and hcitool installed.\n\n"
    },
    {
      "title": "Enable dvorak/dvp",
      "level": 2,
      "content": "By default xkb loads translation table (actually called xkb_symbols) macintosh_vndr/us for macintosh keyboard:\n\n```\n$ setxkbmap -print -verbose 10 | grep symbols\n```\n\nThis translation table located in /usr/share/X11/xkb/symbols/macintosh_vndr/us and do not contains dvorak/dvp layout. You can use default translation table from /usr/share/X11/xkb/symbols/us and add command setxkbmap in your .profile for forced loading layout:\n\n```\n# mv /usr/share/X11/xkb/symbols/macintosh_vndr/us /usr/share/X11/xkb/symbols/macintosh_vndr/us.back\n# cp /usr/share/X11/xkb/symbols/us /usr/share/X11/xkb/symbols/macintosh_vndr/us\n$ echo \"setxkbmap -v 10 -layout us -variant dvp\" >> .xprofile\n```\n\n"
    },
    {
      "title": "No input during root disk decryption",
      "level": 2,
      "content": "You may have to manually add the hid_apple module to the mkinitcpio configuration:\n\n```\nMODULES=(hid_apple)\n```\n\nOr place the keyboard hook before autodetect so that all keyboard drivers are included:\n\n```\nHOOKS=(... keyboard autodetect ...)\n```\n\nRegenerate the initramfs after doing either of these.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- https://help.ubuntu.com/community/AppleKeyboard\n- https://github.com/hlechner/xmodmap-aluminium-pt-br\n- https://github.com/free5lot/hid-apple-patched\n\n"
    }
  ]
}