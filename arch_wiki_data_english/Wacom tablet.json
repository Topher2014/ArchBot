{
  "title": "Wacom tablet",
  "url": "https://wiki.archlinux.org/title/Wacom_tablet",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Tablet PC\n\nFrom Wikipedia:Graphics tablet:\n\nMost graphics tablets will work out of the box with Arch Linux. Additional configuration is required for certain extra features, such as button remapping and adjusting the tablet's aspect ratio. This article explains how to configure your tablet under Xorg with the xf86-input-wacom driver. For configuration under Wayland, or when using the default xf86-input-libinput driver, see #Wayland and libinput.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "The Arch Linux kernels include drivers by the linux-wacom and DIGImend projects. linux-wacom supports Wacom devices, while DIGImend supports devices from other manufacturers. Both projects publish a list of supported devices: linux-wacom, DIGImend. After connecting your tablet via USB or Bluetooth, it should show up when running dmesg as root and be listed in /proc/bus/input/devices. For USB devices, the lsusb command from usbutils should also show your tablet. If your tablet does not show up, or if certain features do not work, see #Device not recognized by the kernel.\n\nInstall the xf86-input-wacom Xorg driver. No additional configuration is required for Wacom devices, as the included /usr/share/X11/xorg.conf.d/70-wacom.conf file will automatically load the wacom(4) driver when plugging Wacom devices. If your device is from another manufacturer, you will need to manually configure Xorg to use it with the wacom driver, which will allow configuring it through xsetwacom. Create a file in /etc/X11/xorg.conf.d, where VID:PID is your USB ID as seen by lsusb:\n\n```\n/etc/X11/xorg.conf.d/10-tablet.conf\n```\n\n```\nSection \"InputClass\"\n    Identifier \"Tablet\"\n    Driver \"wacom\"\n    MatchDevicePath \"/dev/input/event*\"\n    MatchUSBID \"VID:PID\"\nEndSection\n```\n\nAfter restarting X, the command xsetwacom list devices should now list some devices. If it does not, see #Manual setup.\n\n"
    },
    {
      "title": "Utilities",
      "level": 3,
      "content": "- Wacom Tablet KCM — A KDE configuration module that allows remapping buttons and mapping a tablet to a monitor. It also supports tablet-specific profiles and hotplugging. It does not work on Wayland as it requires the wacom Xorg driver.\n\n- mapwacom — A script that automates mapping a tablet to a monitor while preserving the aspect ratio using the #Reducing_the_drawing_area_height method.\n\n- wacom2monitor — A script that maps all Wacom devices using the #Mapping the tablet to a monitor method, and allows cycling between available outputs. It is designed to be activated through Xbindkeys or sxhkd.\n\n"
    },
    {
      "title": "Alternative drivers",
      "level": 3,
      "content": "- Tuhi — An application that can download drawings from Wacom's smartpad range of devices, such as the Bamboo Spark and Bamboo Slate.\n\n- Huion Linux Driver — Huion's official, proprietary Linux driver.\n\n- XP-Pen Linux Driver — XP-Pen's official, proprietary Linux driver. Some UGEE devices may also be supported.\n\n- OpenTabletDriver — A cross-platform user space driver for several different tablet models.\n\n- wacom_serial5 — A kernel driver for old Wacom serial tablets. See Serial input device to kernel input for additional information about attaching serial devices.\n\n"
    },
    {
      "title": "Weylus",
      "level": 3,
      "content": "Weylus is a project that allows using a smartphone or tablet as a graphics tablet on your computer. It is available as weylusAUR or weylus-binAUR.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The Xorg driver can be temporarily configured with xsetwacom, see xsetwacom(1). Changes are lost after X server restarts or replugging your tablet, see #Permanent configuration to view methods to keep your settings persistent.\n\nList the available devices:\n\n```\n$ xsetwacom list devices\n```\n\n```\nWacom Bamboo 16FG 4x5 Finger touch\tid: 12\ttype: TOUCH\nWacom Bamboo 16FG 4x5 Finger pad\tid: 13\ttype: PAD       \nWacom Bamboo 16FG 4x5 Pen stylus\tid: 17\ttype: STYLUS    \nWacom Bamboo 16FG 4x5 Pen eraser\tid: 18\ttype: ERASER\n```\n\nFor the get and set commands, devices can be specified by name or id. Scripts should use names because ids can change after X server restarts or replugging.\n\n"
    },
    {
      "title": "Remapping buttons",
      "level": 3,
      "content": "Xorg treats the buttons on tablets and pens as mouse buttons. Tablet buttons start at 1, pen buttons start at 2 (1 is the tip contact event). Since most applications do not allow mapping shortcuts to mouse buttons, users may be interested in remapping these buttons to keyboard buttons.\n\nIf you have not yet remapped your buttons, you can easily identify their numbers with xorg-xev by running the following command, placing the mouse cursor on the created window and pressing a button:\n\n```\n$ xev -event button\n```\n\n```\nOuter window is 0x1a00001, inner window is 0x1a00002\n\nButtonPress event, serial 25, synthetic NO, window 0x1a00001,\n    root 0x2a0, subw 0x0, time 3390669, (404,422), root:(1047,444),\n    state 0x0, button 8, same_screen YES\n```\n\nAfter identifying the button, you can remap it with xsetwacom. The general mapping syntax is as follows:\n\n```\n$ xsetwacom set pad-or-stylus Button number keyword arguments\n```\n\nThe full list of keywords and their arguments is available in xsetwacom(1) § Button. Here are a few examples:\n\n- A + sign before a key means it is pressed, while a - sign means it is released. Keys with no signs are pressed then released.\n- You can view a full list of modifiers with xsetwacom list modifiers.\n- Keywords such as key and button can be mixed.\n\nTo remap the button to Ctrl+z:\n\n```\n$ xsetwacom set pad Button 1 \"key +ctrl z -ctrl\"\n```\n\nTo remap the button to mouse button 3:\n\n```\n$ xsetwacom set pad Button 1 \"button 3\"\n```\n\nTo press mouse button 1 while holding Shift:\n\n```\n$ xsetwacom set pad Button 1 \"key +shift button 1 key -shift\"\n```\n\nTo clear all custom mappings from the button:\n\n```\n$ xsetwacom set pad Button 1\n```\n\n"
    },
    {
      "title": "Execute custom commands",
      "level": 4,
      "content": "Although you cannot map tablet buttons to custom commands directly using xsetwacom, it is possible to map them to a key combination that will activate a custom keybind utility such as Xbindkeys, sxhkd, or the keyboard shortcut configuration system for your window manager or desktop environment.\n\nIt is possible to remap the tablet buttons to a function key or mouse button that's not available on your hardware, such as F20 or mouse button 10. This way, you can set up custom commands that are only executed through your tablet's buttons.\n\n"
    },
    {
      "title": "Adjusting aspect ratios",
      "level": 3,
      "content": "Drawing areas of tablets are generally more square than the usual widescreen display with a 16:9 aspect ratio, leading to a slight vertical compression of your input. To resolve such an aspect ratio mismatch you need to compromise by either reducing the drawing area height (called Force Proportions on Windows) or reducing the screen area width. The former wastes drawing area and the latter prevents you from reaching the right edge of your screen with your Stylus. It is probably still a compromise worth to be made because it prevents your strokes from being skewed.\n\nFind out your tablet's resolution by running:\n\n```\n$ xsetwacom get stylus Area\n```\n\n"
    },
    {
      "title": "Reducing the drawing area height",
      "level": 4,
      "content": "Run:\n\n```\n$ xsetwacom set stylus Area 0 0 tablet_width height\n```\n\nwhere height is tablet_width * screen_height / screen_width.\n\nThe tablet resolution can be reset back to the default using:\n\n```\n$ xsetwacom set stylus ResetArea\n```\n\n"
    },
    {
      "title": "Reducing the screen area width",
      "level": 4,
      "content": "Run:\n\n```\n$ xsetwacom set stylus MapToOutput WIDTHxSCREEN_HEIGHT+0+0\n```\n\nwhere WIDTH is screen_height * tablet_width / tablet_height.\n\n"
    },
    {
      "title": "Mapping the tablet to a monitor",
      "level": 3,
      "content": "If you have multiple monitors, it is useful to map your tablet to a single monitor in order to avoid distortions when drawing. This can also be used if you have a graphics tablet with a screen, in order to map the tablet's active area to its own screen.\n\nYou can map your tablet to a monitor with the following command, where output is your monitor identifier as reported by xrandr:\n\n```\n$ xsetwacom set stylus MapToOutput output\n```\n\nFor example:\n\n```\n$ xsetwacom set 'Wacom Intuos S Pen stylus' MapToOutput VGA-0\n```\n\nIf this does not work with the Nvidia binary drivers, try using HEAD-0, HEAD-1, ... according to the monitor number.\n\nAlternatively you can use the argument next to switch to the next available monitor.\n\nFor example:\n\n```\n$ xsetwacom set 'Wacom Intuos S Pen stylus' MapToOutput next\n```\n\nIf xsetwacom is unable to find your output, you can use the command in #Reducing the screen area width to manually map the tablet to a region matching your monitor. Run:\n\n```\n$ xsetwacom set stylus MapToOutput SCREEN_WIDTHxSCREEN_HEIGHT+HORIZONTAL_OFFSET+VERTICAL_OFFSET\n```\n\nWhere SCREEN_WIDTH and SCREEN_HEIGHT are your monitor's width and height in pixels, while HORIZONTAL_OFFSET and VERTICAL_OFFSET are the coordinates for your desired monitor, starting from the leftmost and highest pixel in your setup. For example, if you have two 1920x1080 monitors side-by-side, and you want to map your tablet to the rightmost monitor, you would run:\n\n```\n$ xsetwacom set stylus MapToOutput 1920x1080+1920+0\n```\n\nIn case xsetwacom does not work, you can try xinput. First, you need to find your stylus ID:\n\n```\n$ xinput list\n```\n\n```\n⎡ Virtual core pointer                          id=2    [master pointer  (3)]\n⎜   ↳ Virtual core XTEST pointer                id=4    [slave  pointer  (2)]\n⎜   ↳ Wacom Intuos PT S 2 Finger                id=11   [slave  pointer  (2)]\n⎜   ↳ Wacom Intuos PT S 2 Pad                   id=12   [slave  pointer  (2)]\n⎜   ↳ USB Keyboard                              id=14   [slave  pointer  (2)]\n⎜   ↳ SynPS/2 Synaptics TouchPad                id=16   [slave  pointer  (2)]\n⎜   ↳ TPPS/2 IBM TrackPoint                     id=17   [slave  pointer  (2)]\n⎜   ↳ SteelSeries Kinzu V2 Gaming Mouse         id=9    [slave  pointer  (2)]\n⎜   ↳ Wacom Intuos PT S 2 Pen Pen (0x6281780c)  id=20   [slave  pointer  (2)]\n⎣ Virtual core keyboard                         id=3    [master keyboard (2)]\n    ↳ ...\n```\n\nIn this case, the stylus ID is 20. To map it to monitor VGA-0, run:\n\n```\n$ xinput map-to-output 20 VGA-0\n```\n\nIf all else fails, you will have to adjust your tablet's Coordinate Transformation Matrix. Instructions to calculate a matrix for your tablet are available in the xf86-input-wacom wiki.\n\n"
    },
    {
      "title": "Pressure curve",
      "level": 3,
      "content": "Use the Wacom Pressure Curve and Threshold Graph to find P1=red (eg. 50,0) and P2=purple (eg. 100,80) of your desired curve. The x-axis is the input pressure you apply to the pen; the y-axis is the output pressure the application is given.\n\nYou can change the pressure curve with:\n\n```\n$ xsetwacom set stylus PressureCurve x1 y1 x2 y2\n```\n\n"
    },
    {
      "title": "Through xsetwacom via udev and systemd service",
      "level": 4,
      "content": "It is possible to save your xsetwacom parameters in a shell script that is autostarted through udev with a custom systemd/User unit file. This approach is more complex than autostarting the shell script through your desktop environment or window manager, however, it will run the script every time the tablet is connected to the computer.\n\nFirst install usbutils and run lsusb to find the vendor ID of your tablet (056a in the example below).\n\nThen create a udev rule to start a systemd unit when the tablet is connected (replace the vendor ID accordingly):\n\n```\n/etc/udev/rules.d/99-wacom.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"056a\", TAG+=\"systemd\", ENV{SYSTEMD_USER_WANTS}+=\"wacom.service\"\n```\n\nPrepare the systemd unit file. It is connected to the special graphical-session.target which should be active whenever any graphical session is active, see systemd.special(7) § Special Passive User Units.\n\n```\n~/.config/systemd/user/wacom.service\n```\n\n```\n[Unit]\nDescription=Configure my Wacom tablet\nAfter=graphical-session.target\nPartOf=graphical-session.target\n\n[Service]\nType=oneshot\nExecStart=/path/to/wacom-config.sh\n\n[Install]\nWantedBy=graphical-session.target\n```\n\nPrepare the script for tablet configuration. When started from the systemd user service, the needed variables DISPLAY and XAUTHORITY should already be set. See systemd/User#DISPLAY and XAUTHORITY for details.\n\n- The Wacom input devices may not be ready at the time udev invokes the systemd service and the script is started. A workaround is to add sleep 1 at the beginning of your script (more might be needed, e.g. up to 10s for a Cintiq with integrated display due to its startup time). If it is still not working, check [1] for possible solutions.\n- The button IDs might change each time a tablet is plugged in. Hence, the script should not hardcode the IDs, but parse the correct IDs from the xsetwacom list devices output. See [2] for details.\n\n```\nwacom-config.sh\n```\n\n```\n#!/bin/sh\n\nfor i in $(seq 10); do\n    if xsetwacom list devices | grep -q Wacom; then\n        break\n    fi\n    sleep 1\ndone\n\nlist=$(xsetwacom list devices)\npad=$(echo \"${list}\" | awk '/pad/{print $7}')\nstylus=$(echo \"${list}\" | xsetwacom list devices | awk '/stylus/{print $7}')\n\nif [ -z \"${pad}\" ]; then\n    exit 0\nfi\n\n# configure the buttons on ${stylus} with your xsetwacom commands...\n#xsetwacom set \"${stylus}\" Button 2 11\n#...\n```\n\nFinally start/enable the service wacom.service with the --user flag.\n\n"
    },
    {
      "title": "Compatibility with Xfce4 Display Profiles",
      "level": 4,
      "content": "If you have a tablet with integrated display and want to seamlessly switch between multiple display profiles in Xfce4, simply listening to udev events might not be enough. You'll need to change the device settings whenever your display geometry changes. (e.g. Mirrored vs. Side-by-Side Setups).\n\nIn these cases you can use xfconf-query to monitor changes to the active display profile.\n\n```\nwacom-config-daemon.sh\n```\n\n```\n#!/usr/bin/env sh\n\n# Use this to target your specific monitor device\nscreen_dev=\"HDMI-A-0\"\n\nxfconf-query -c displays -p /ActiveProfile -m | while IFS= read -r; do\n  echo \"Reconfiguring...\"\n\n  # Tested with Wacom Cintiq 16 Pen (stylus/eraser)\n  for id in $(xsetwacom list devices | grep -i wacom | awk '/Pen/{print $7}'); do\n    xsetwacom set \"${id}\" MapToOutput \"${screen_dev}\"\n  done\ndone\n```\n\nNow add this script to your autostart applications in Settings > Session and Startup > Application Autostart\n\n"
    },
    {
      "title": "Through Xorg.conf",
      "level": 4,
      "content": "Configuration can be made persistent in xorg.conf and xorg.conf(5).\n\nYou firstly need to find out your product names in the Xorg log file:\n\n```\n$ grep \"Using input driver 'wacom'\" ~/.local/share/xorg/Xorg.0.log\n```\n\n```\n[ 25059.351] (II) Using input driver 'wacom' for 'Wacom Intuos BT M Pen'\n[ 25059.409] (II) Using input driver 'wacom' for 'Wacom Intuos BT M Pad'\n[ 25059.428] (II) Using input driver 'wacom' for 'Wacom Intuos BT M Pen eraser'\n[ 25059.429] (II) Using input driver 'wacom' for 'Wacom Intuos BT M Pen cursor'\n```\n\nFor these product names the sections would be:\n\n```\n/etc/X11/xorg.conf.d/72-wacom-options.conf\n```\n\n```\nSection \"InputClass\"\n\tIdentifier \"WACOM OPTIONS pen\"\n\tMatchDriver \"wacom\"\n\tMatchProduct \"Pen\"\n\tNoMatchProduct \"eraser\"\n\tNoMatchProduct \"cursor\"\nEndSection\n\nSection \"InputClass\"\n\tIdentifier \"WACOM OPTIONS pad\"\n\tMatchDriver \"wacom\"\n\tMatchProduct \"Pad\"\nEndSection\n\nSection \"InputClass\"\n\tIdentifier \"WACOM OPTIONS eraser\"\n\tMatchDriver \"wacom\"\n\tMatchProduct \"eraser\"\nEndSection\n\nSection \"InputClass\"\n\tIdentifier \"WACOM OPTIONS cursor\"\n\tMatchDriver \"wacom\"\n\tMatchProduct \"cursor\"\nEndSection\n```\n\n- The options described in wacom(4) can be added to sections.\n- The product name needs to contain the MatchProduct value in order for a section to match. Matching of parent devices requires negative matching.\n- The Identifier can be arbitrary and is printed into the Xorg log when the section matches. Giving your identifiers a common prefix lets you easily grep for what sections were matched: grep \"WACOM OPT\" /var/log/Xorg.0.log\n- Configuration changes require a X server restart to take effect.\n\n```\ngrep \"WACOM OPT\" /var/log/Xorg.0.log\n```\n\nxsetwacom can try to print all current settings of a device in xorg.conf format with:\n\n```\n$ xsetwacom get device all\n```\n\nButton remapping through Xorg.conf only allows you to remap the tablet buttons to mouse buttons.\n\n```\n/etc/X11/xorg.conf.d/10-tablet.conf\n```\n\n```\nSection \"InputClass\"\n    [...]\n    # Setting up buttons (preferably choose the correct button order, so the topmost key is mapped to 10 and so on)\n    Option \"Button1\" \"10\"\n    Option \"Button2\" \"11\"\n    Option \"Button3\" \"12\"\n    Option \"Button4\" \"13\"\nEndSection\n```\n\nYou can then use #Execute custom commands to map these buttons to other commands, or other keys using automation tools.\n\n```\n$ grep -rl 'Wacom Bamboo 16FG 4x5' /usr/share/libwacom/*.tablet\n```\n\n```\n/usr/share/libwacom/bamboo-16fg-s-t.tablet\n```\n\nAs the wacom touchpad normally does not support inverted scrolling it can be desirable to use libinput to take control of the touchpad.\n\nTo do this create /etc/X11/xorg.conf.d/90-libinput-wacom.conf with the following contents:\n\n```\nSection \"InputClass\"\n    Identifier \"libinput Wacom touchpad override class\"\n    MatchUSBID \"056a:*\"\n    MatchDevicePath \"/dev/input/event*\"\n    MatchIsTouchpad \"true\"\n    Driver \"libinput\"\nEndSection\n```\n\nReboot afterwards.\n\nSee [3] for a more detailed explanation.\n\n"
    },
    {
      "title": "LEDs",
      "level": 3,
      "content": "See the sysfs-driver-wacom documentation. To make changes without requiring root permissions you will likely want to create a udev rule like so:\n\n```\n/etc/udev/rules.d/99-wacom.rules\n```\n\n```\n# Give the users group permissions to set Wacom device LEDs.\nACTION==\"add\", SUBSYSTEM==\"hid\", DRIVERS==\"wacom\", RUN+=\"/usr/bin/sh -c 'chown :users /sys/%p/wacom_led/*'\"\n```\n\nSetting the Intuos OLEDs can be done using i4oledAUR.\n\n"
    },
    {
      "title": "Alchemy",
      "level": 3,
      "content": "AlchemyAUR (and Alchemy-gitAUR) needs the JPen library to manage stylus pressure. See Digimend documentation about Alchemy.\n\n"
    },
    {
      "title": "Blender",
      "level": 3,
      "content": "To enable pad buttons and extra pen buttons in Blender, you can create a xsetwacom wrapper to temporarily remap buttons for your blender session.\n\n"
    },
    {
      "title": "DrawPile",
      "level": 3,
      "content": "drawpileAUR is a drawing whiteboard (network collaborative drawing tool). It manages pressure level on its drawing tools. In the \"Freehand\" box, a brush icon at the right of each parameter needs to be activated to have pressure management on this parameter. There is only a general curve on the bottom right of the window (\"Input\" box), that can be applied to stylus, distance and velocity.\n\n"
    },
    {
      "title": "GIMP",
      "level": 3,
      "content": "To enable proper usage and pressure sensitive painting in GIMP, just go to Edit > Input Devices. Now for each of your eraser, stylus, and cursor devices, set the mode to Screen, and remember to save.\n\n- Please take note that if present, the pad device should be kept disabled as I do not think GIMP supports such things. Alternatively, to use such features of your tablet you should map them to keyboard commands with a program such as Wacom ExpressKeys.\n- You should also take note that the tool selected for the stylus is independent to that of the eraser. This can actually be quite handy, as you can have the eraser set to be used as any tool you like.\n\nFor more information checkout the Setting up GIMP section of GIMP Talk - Community - Install Guide: Getting Wacom Drawing Tablets To Work In Gimp.\n\nIf the above was not enough, you may want to try setting up the tablet's stylus (and eraser) as a second mouse pointer (separating it from your mouse) by using the xinput create-master and xinput reattach commands. It can help when GIMP does not start painting even if the stylus touches the tablet.\n\n"
    },
    {
      "title": "Inkscape",
      "level": 3,
      "content": "Pressure sensitivity in Inkscape is enabled the same way as in GIMP. Go to Edit > Input Devices.... Now for each of your eraser, stylus, and cursor devices, set the mode to Screen, and remember to save.\n\n"
    },
    {
      "title": "Krita",
      "level": 3,
      "content": "If your tablet does not draw in Krita (clicks/pressure are not registered) but works in the brush selection dialog which has a small test area, try putting Krita in full-screen or canvas-only mode.\n\nKrita only requires that Qt is able to use your tablet to function properly. If your tablet is not working in Krita, then make sure to check it is working in Qt first. The effect of tablet pressure can then be tweaked in the painttop configuration, for example by selecting opacity, then selecting pressure from the drop down and adjusting the curve to your preference.\n\n"
    },
    {
      "title": "MyPaint",
      "level": 3,
      "content": "mypaint (extra mypaint-brushes, mypaint-brushes1, note that these brushes are also used on other applications using libmypaint) is a general bitmap drawing application. Its advanced brush settings have been adopted by GIMP, Krita, OpenToonz, and few others and is in integration process in Pencil2D. It is a very light tool that can be used in low-end computers.\n\nIn MyPaint, there are general settings about tablets and per brush specific parameters (you can set your own brushes).\n\nGeneral settings are in menu Edit > Edit Preferences.\n\n- The \"Pressure\" tab is for global pressure mapping.\n- The \"Devices\" tab displays the list of detected input devices with little general information. Each one can be assigned to specific tasks by clicking on their parameter in the \"Use for...\" (Any Task, Ignore, Non-painting tasks, Navigation only) and \"Scroll...\" (zoom, pan) columns.\n- The \"Buttons\" tab allows to assign buttons to specific functions.\n\nBrush settings can be accessed by the brush context menu (right click on a tool). You can duplicate an existing tool before making modification, and so, keep the tool with its default preset (\"clone\" in the context menu).\n\n- To edit brush settings, simply use the Edit Brush settings from the context menu on brush. There are several settings, see the MyPaint documentation for a full description or play with them to discover what they do.\n\n"
    },
    {
      "title": "OpenToonz",
      "level": 3,
      "content": "opentoonz is a professional 2D animation tool, first developed by Studio Ghibli, and used by Ghibli and Folimage among others.\n\nStylus pressure is managed by default on default tools. There is a checkbox Pressure at the second line, at top right, that can be unchecked to disable pressure management. Several presets can be selected by the menu button at right of Preset, and added or deleted with the +/- buttons.\n\nlibmypaint brushes can be chosen in the Basics mode (upper right tabs), and then in the column between the drawing area and the exposure sheet: at the \"[LEVEL]: Palette\" button, click on \"Raster\" tab to view the brushes. The brushes can be edited with MyPaint and used in OpenToonz.\n\n"
    },
    {
      "title": "Pencil2D",
      "level": 3,
      "content": "pencil2d is a light 2D animation tool. Each tool that can use the pressure parameter (Pencil, Eraser, Pen and Brush) has a checkbox called \"Pressure\" that is checked by default to use stylus pressure parameter.\n\n"
    },
    {
      "title": "Xournal++",
      "level": 3,
      "content": "Xournal++ (xournalpp) is the successor to xournalAUR and fully supports pressure sensitive stylus input. For configurations, see Input Devices and Stylus in the Edit > Preferences menu.\n\n"
    },
    {
      "title": "Wayland and libinput",
      "level": 2,
      "content": "When you are using Wayland, graphics tablets are handled by libinput, which relies on information provided by libwacom. In this scenario, configuration through xsetwacom is not possible. You can only configure your tablet through the settings that are available in your desktop environment or Wayland compositor. See [4] to check if your device is fully supported, and for methods to add support to your device.\n\n- GNOME has full support for configuring buttons and mapping the tablet to a monitor. [5]\n- KDE Plasma has full support for configuring buttons and mapping the tablet to a monitor. [6] [7]\n- Sway only supports mapping the tablet to a monitor or region, see #Sway and sway-input(5) § MAPPING CONFIGURATION.\n- Hyprland only supports mapping the tablet to a monitor or region, see the Hyprland documentation.\n\n- input-remapper-gitAUR can remap tablet buttons when using libinput or Wayland.\n- OpenTabletDriver may also be used if your Wayland environment offers no tablet options. See #Alternative drivers.\n\n"
    },
    {
      "title": "Map to output",
      "level": 4,
      "content": "This has the same effect of #Mapping the tablet to a monitor, meaning that the tablet will not have an exact aspect ratio match with the output.\n\nAdd the following line to your sway configuration file:\n\n```\n~/.config/sway/config\n```\n\n```\ninput Identifier map_to_output Display-Name\n```\n\nWhere Identifier is the identifier of your tablet, as read by swaymsg -t get_inputs:\n\n```\n$ swaymsg -t get_inputs\n```\n\n```\nInput device: Wacom One by Wacom S Pen\n Type: Tablet tool\n Identifier: 1386:890:Wacom_One_by_Wacom_S_Pen\n Product ID: 890\n Vendor ID: 1386\n Libinput Send Events: enabled\n ...\n```\n\nAnd Display-Name is the identifier of your output, as read by swaymsg -t get_outputs:\n\n```\n$ swaymsg -t get_outputs\n```\n\n```\nOutput HDMI-A-1 'Samsung Electric Company ...'\n Current mode: 1920x1080 @ 60.000 Hz\n Position: 0,0\n Scale factor: 1.000000\n Scale filter: nearest\n ...\n```\n\n"
    },
    {
      "title": "Map to output region",
      "level": 4,
      "content": "This has the same effect as #Reducing the screen area width. First, you need to figure out the active area for your tablet. Run:\n\n```\n# libinput debug-tablet\n```\n\nMove your tablet stylus to the bottom right corner to get the maximum ABS_X and ABS_Y values, then add the following line to your sway configuration:\n\n```\n~/.config/sway/config\n```\n\n```\ninput Identifier map_to_region X Y width output_height\n```\n\nWhere width is calculated by output_height * (ABS_X / ABS_Y), and X and Y are the starting coordinates of the region.\n\nFor example, if you have two 1920x1080 monitors side-by-side, and you want to map your tablet to a region in the rightmost monitor, use the following line:\n\n```\n~/.config/sway/config\n```\n\n```\ninput Identifier map_to_region 1920 0 width 1080\n```\n\n"
    },
    {
      "title": "Device not recognized by the kernel",
      "level": 3,
      "content": "Some tablets may be too recent to be supported by your current kernel. On Wacom devices, this is represented by a \"Unknown device_type\" message in your dmesg output. In this scenario, it is possible that the out-of-tree version of the drivers have support for your tablet before it is upstreamed to the kernel.\n\nInstall input-wacom-dkms-gitAUR if you have a Wacom tablet, or digimend-kernel-drivers-dkms-gitAUR if you have a tablet from another manufacturer. You will also need the headers for your current kernel, see DKMS for more information.\n\n"
    },
    {
      "title": "Tablet recognized but xsetwacom and similar tools do not display it",
      "level": 3,
      "content": "Your logs indicate that the correct driver is selected, and the tablet works. However, when running xsetwacom list devices or use similar tools that depend on the correct driver, you get an empty list.\n\nA reason might be the execution order of your xorg configuration. /usr/share/X11/xorg.conf.d gets executed first, then /etc/X11/xorg.conf.d. The package xf86-input-wacom contains the file /usr/share/X11/xorg.conf.d/70-wacom.conf. If there is a catchall for tablets, executed after this file, the previously selected wacom driver will be overwritten with a generic one that does not work with xsetwacom et. al.\n\nTo make sure, check the rules contained in the files executed after /usr/share/X11/xorg.conf.d/70-wacom.conf for anything that looks like graphics tablets.\n\n"
    },
    {
      "title": "Manual setup",
      "level": 3,
      "content": "A manual configuration is done in /etc/X11/xorg.conf or in a separate file in the /etc/X11/xorg.conf.d/ directory. The Wacom tablet device is accessed using an input event interface in /dev/input/ which is provided by the kernel driver. The interface number event?? is likely to change when unplugging and replugging into the same or especially a different USB port. Therefore it is wise to not refer to the device using its concrete event?? interface (static configuration) but by letting udev dynamically create a symbolic link to the correct event file (dynamic configuration).\n\n"
    },
    {
      "title": "USB-devices",
      "level": 4,
      "content": "After (re-)plugging in your USB-tablet (or at least after rebooting) some symbolic links should appear in /dev/input referring to your tablet device.\n\n```\n$ ls /dev/input/wacom*\n```\n\n```\n/dev/input/wacom  /dev/input/wacom-stylus  /dev/input/wacom-touch\n```\n\nIf not, your device is likely to be not yet included in the udev configuration from wacom-udev which resides in /usr/lib/udev/rules.d/wacom.rules. Copy the file to /etc/udev/rules.d/wacom.rules and modify it there.\n\nAdd your device to the file by duplicating some line of another device and adapting idVendor,idProduct and the symlink name to your device. The two id's can be determined using\n\n```\n$ lsusb | grep -i wacom\n```\n\n```\nBus 002 Device 007: ID 056a:0062 Wacom Co., Ltd\n```\n\nIn this example idVendor is 056a and idProduct 0062. In case you have device with touch (e.g. Bamboo Pen&Touch) you might need to add a second line for the touch input interface. For details check the linuxwacom wiki Fixed device files with udev.\n\nSave the file and reload udev's configuration profile using the command udevadm control --reload-rules Check again the content of /dev/input to make sure that the wacom symlinks appeared. Note that you may need to plug-in the tablet again for the device to appear.\n\nThe files of further interest for the Xorg configuration are /dev/input/wacom and for a touch-device also /dev/input/wacom_touch.\n\n"
    },
    {
      "title": "Static setup",
      "level": 4,
      "content": "Usually it is recommended to rely on Xorg's auto-detection or to use a dynamic setup. However for an internal tablet device one might consider a static Xorg setup in case autodetection does not work. A static Xorg setup is usually not able to recognize your Wacom tablet when it is connected to a different USB port or even after unplugging and replugging it into the same port, and as such it should be considered as deprecated.\n\nIf you insist in using a static setup just refer to your tablet in the Xorg configuration in the next section using the correct /dev/input/event?? files as one can find out by looking into /proc/bus/input/devices.\n\n"
    },
    {
      "title": "Xorg configuration",
      "level": 4,
      "content": "In either case, dynamic or static setup you got now one or two files in /dev/input/ which refer to the correct input event devices of your tablet. All that is left to do is add the relevant information to /etc/X11/xorg.conf, or a dedicated file under /etc/X11/xorg.conf.d/. The exact configuration depends on your tablet's features of course. xsetwacom list devices might give helpful information on what InputDevice sections are needed for your tablet.\n\nAn example configuration for a Volito2 might look like this\n\n```\nSection \"InputDevice\"\n    Driver        \"wacom\"\n    Identifier    \"stylus\"\n    Option        \"Device\"       \"/dev/input/wacom\"   # or the corresponding event?? for a static setup\n    Option        \"Type\"         \"stylus\"\n    Option        \"USB\"          \"on\"                 # USB ONLY\n    Option        \"Mode\"         \"Relative\"           # other option: \"Absolute\"\n    Option        \"Vendor\"       \"WACOM\"\n    Option        \"tilt\"         \"on\"  # add this if your tablet supports tilt\n    Option        \"Threshold\"    \"5\"   # the official linuxwacom howto advises this line\nEndSection\nSection \"InputDevice\"\n    Driver        \"wacom\"\n    Identifier    \"eraser\"\n    Option        \"Device\"       \"/dev/input/wacom\"   # or the corresponding event?? for a static setup\n    Option        \"Type\"         \"eraser\"\n    Option        \"USB\"          \"on\"                  # USB ONLY\n    Option        \"Mode\"         \"Relative\"            # other option: \"Absolute\"\n    Option        \"Vendor\"       \"WACOM\"\n    Option        \"tilt\"         \"on\"  # add this if your tablet supports tilt\n    Option        \"Threshold\"    \"5\"   # the official linuxwacom howto advises this line\nEndSection\nSection \"InputDevice\"\n    Driver        \"wacom\"\n    Identifier    \"cursor\"\n    Option        \"Device\"       \"/dev/input/wacom\"   # or the corresponding event?? for a static setup\n    Option        \"Type\"         \"cursor\"\n    Option        \"USB\"          \"on\"                  # USB ONLY\n    Option        \"Mode\"         \"Relative\"            # other option: \"Absolute\"\n    Option        \"Vendor\"       \"WACOM\"\nEndSection\n```\n\nMake sure that you also change the path (\"Device\") to your mouse, as it will be /dev/input/mouse_udev now.\n\n```\nSection \"InputDevice\"\n    Identifier  \"Mouse1\"\n    Driver      \"mouse\"\n    Option      \"CorePointer\"\n    Option      \"Device\"             \"/dev/input/mouse_udev\"\n    Option      \"SendCoreEvents\"     \"true\"\n    Option      \"Protocol\"           \"IMPS/2\"\n    Option      \"ZAxisMapping\"       \"4 5\"\n    Option      \"Buttons\"            \"5\"\nEndSection\n```\n\nAdd this to the ServerLayout section\n\n```\nInputDevice \"cursor\" \"SendCoreEvents\" \nInputDevice \"stylus\" \"SendCoreEvents\"\nInputDevice \"eraser\" \"SendCoreEvents\"\n```\n\nAnd finally make sure to update the identifier of your mouse in the ServerLayout section – as mine went from\n\n```\nInputDevice    \"Mouse0\" \"CorePointer\"\n```\n\nto\n\n```\nInputDevice    \"Mouse1\" \"CorePointer\"\n```\n\n"
    },
    {
      "title": "Mouse moving erratically due to proximity sensor",
      "level": 3,
      "content": "You can disable the mouse jumping due to a proximity sensor detecting a non-existing stylus. You can find your device with xinput --list, and after spotting the stylus, disable it with:\n\n```\n$ xinput disable device\n```\n\nThis only works if you are not currently using a stylus.\n\n"
    },
    {
      "title": "Touch arbitration not working on graphic tablets",
      "level": 3,
      "content": "If you are using libinput, graphic tablets that have a stylus and a touchscreen might not support touch arbitration out of the box because the devices are not grouped into the same libinput device group. You can fix this by writing udev rules. For example, if the touchscreen is recognized with 0001:000a and the Wacom tablet with 0002:000b, you can create /etc/udev/rules.d/80-touch-arbitration.rules as a rule that groups these devices into the group f865e87b:\n\n```\n/etc/udev/rules.d/80-touch-arbitration.rules\n```\n\n```\nSUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0001\", ATTRS{idProduct}==\"000a\", ENV{LIBINPUT_DEVICE_GROUP}=\"f865e87b\"\nSUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0002\", ATTRS{idProduct}==\"000b\", ENV{LIBINPUT_DEVICE_GROUP}=\"f865e87b\"\n```\n\n"
    },
    {
      "title": "Reporting issues with non-Wacom tablets",
      "level": 3,
      "content": "If you have a non-Wacom tablet that has missing features, you can report a tablet test to DIGImend drivers authors in order to include its functionalities into the driver. The DIGImend diagnostic tools are available on the AUR as uclogic-toolsAUR. You will also need the lsusb and usbhid-dump programs available in usbutils.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- List of applications/Documents#Stylus note-taking\n- input-wacom Wiki\n- xf86-input-wacom Wiki (out of date)\n- GIMP Talk - Community - Install Guide: Getting Wacom Drawing Tablets To Work In Gimp\n- Ubuntu Help: Wacom\n- Ubuntu Forums - Install a LinuxWacom Kernel Driver for Tablet PC's\n- Wacom-GUI\n\n"
    }
  ]
}