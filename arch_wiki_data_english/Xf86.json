{
  "title": "Xf86",
  "url": "https://wiki.archlinux.org/title/Xf86",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Autostarting\n- Cursor themes\n- Desktop environment\n- Display manager\n- Font configuration\n- Window manager\n- XDMCP\n- xinit\n- xrandr\n\nX.Org Server — commonly referred to as simply X — is the X.Org Foundation implementation of the X Window System (X11) display server, and it is the most popular display server among Linux users. Its ubiquity has led to making it an ever-present requisite for GUI applications, resulting in massive adoption from most distributions.\n\nFor the alternative and successor, see Wayland.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Xorg can be installed with the xorg-server package.\n\nAdditionally, some packages from the xorg-apps group are necessary for certain configuration tasks. They are pointed out in the relevant sections.\n\nFinally, an xorg group is also available, which includes Xorg server packages, packages from the xorg-apps group and fonts.\n\n"
    },
    {
      "title": "Driver installation",
      "level": 3,
      "content": "The Linux kernel includes open-source video drivers and support for hardware accelerated framebuffers. However, userland support is required for OpenGL, Vulkan and 2D acceleration in X11.\n\nFirst, identify the graphics card (the Subsystem output shows the specific model):\n\n```\n$ lspci -v -nn -d ::03xx\n```\n\nThen, install an appropriate driver. You can search the package database for a complete list of open-source Device Dependent X (DDX) drivers:\n\n```\n$ pacman -Ss xf86-video\n```\n\nHowever, hardware-specific DDX is considered legacy nowadays. There is a generic modesetting(4) DDX driver in xorg-server, which uses kernel mode setting and works well on modern hardware. The modesetting DDX driver uses Glamor[1] for 2D acceleration, which requires OpenGL.\n\nIf you want to install another DDX driver, note that Xorg searches for installed DDX drivers automatically:\n\n- If it cannot find the specific driver installed for the hardware (listed below), it first searches for fbdev (xf86-video-fbdev), which does not include any 2D or 3D acceleration.\n- If that is not found, it searches for vesa (xf86-video-vesa), the generic driver, which handles a large number of chipsets but does not include any 2D or 3D acceleration.\n- If vesa is not found, Xorg will fall back to modesetting(4) DDX driver.\n\nIn order for video acceleration to work, and often to expose all the modes that the GPU can set, a proper video driver is required:\n\nTable content:\nBrand | Type | Documentation | DRM Driver | OpenGL | OpenGL (multilib) | Vulkan | Vulkan (multilib) | DDX Driver\nAMD (ex-ATI) | Open source | AMDGPU | included in Linux | mesa3 | lib32-mesa3 | vulkan-radeon / amdvlk4 | lib32-vulkan-radeon / lib32-amdvlk4 | xf86-video-amdgpu\nATI | None | xf86-video-ati\nProprietary | AMDGPU PRO | amdgpu-pro-oglpAUR | lib32-amdgpu-pro-oglpAUR | vulkan-amdgpu-proAUR | lib32-vulkan-amdgpu-proAUR | xf86-video-amdgpu\nIntel | Open source | Intel graphics | mesa3 | lib32-mesa3 | vulkan-intel | lib32-vulkan-intel | xf86-video-intel2\nNVIDIA | Open source | Nouveau1 | mesa3 | lib32-mesa3 | vulkan-nouveau | lib32-vulkan-nouveau | xf86-video-nouveau\nProprietary | NVIDIA1 | nvidia or nvidia-open5 | nvidia-utils | lib32-nvidia-utils | nvidia-utils | lib32-nvidia-utils | nvidia-utils\nnvidia-535xx-dkmsAUR | nvidia-535xx-utilsAUR | lib32-nvidia-535xx-utilsAUR | nvidia-535xx-utilsAUR | lib32-nvidia-535xx-utilsAUR | nvidia-535xx-utilsAUR\nnvidia-470xx-dkmsAUR | nvidia-470xx-utilsAUR | lib32-nvidia-470xx-utilsAUR | nvidia-470xx-utilsAUR | lib32-nvidia-470xx-utilsAUR | nvidia-470xx-utilsAUR\nnvidia-390xx-dkmsAUR | nvidia-390xx-utilsAUR | lib32-nvidia-390xx-utilsAUR | nvidia-390xx-utilsAUR | lib32-nvidia-390xx-utilsAUR | nvidia-390xx-utilsAUR\n\n1. For NVIDIA Optimus enabled laptop which uses an integrated video card combined with a dedicated GPU, see NVIDIA Optimus.\n1. For Intel graphics on 4th generation and above, the modesetting DDX driver is recommended. See Intel graphics#Installation for details.\n1. For older hardware, classic OpenGL (non-Gallium3D) drivers in mesa-amber/lib32-mesa-amber might be useful (Mesa 22.0 and higher have dropped support for non-Gallium3D classic drivers), see OpenGL#Installation.\n1. vulkan-radeon / lib32-vulkan-radeon is recommended over amdvlk / lib32-amdvlk (see AMDGPU#Installation).\n1. For the difference between nvidia and nvidia-open, see NVIDIA#Installation.\n\nOther DDX drivers can be found in the xorg-drivers group.\n\nXorg should run smoothly without closed source drivers, which are typically needed only for advanced features such as fast 3D-accelerated rendering for games. The exceptions to this rule are recent GPUs (especially NVIDIA GPUs) not supported by open source drivers.\n\n"
    },
    {
      "title": "AMD",
      "level": 4,
      "content": "For a translation of model names (e.g. Radeon RX 6800) to GPU architectures (e.g. RDNA 2), see Wikipedia:List of AMD graphics processing units#Features overview.\n\nTable content:\nGPU architecture | Open-source driver | Proprietary driver\nRDNA and later | AMDGPU | AMDGPU PRO\nGCN 3 and later\nGCN 1&2 | AMDGPU1 / ATI | not available\nTeraScaleand older | ATI | not available\n\n1. Experimental.\n\n"
    },
    {
      "title": "Running",
      "level": 2,
      "content": "The Xorg(1) command is usually not run directly. Instead, the X server is started with either a display manager or xinit.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Xorg uses a configuration file called xorg.conf and files ending in the suffix .conf for its initial setup: the complete list of the folders where these files are searched can be found in xorg.conf(5), together with a detailed explanation of all the available options.\n\n"
    },
    {
      "title": "Using .conf files",
      "level": 3,
      "content": "The /etc/X11/xorg.conf.d/ directory stores host-specific configuration. You are free to add configuration files there, but they must have a .conf suffix: the files are read in ASCII order, and by convention their names start with XX- (two digits and a hyphen, so that for example 10 is read before 20). These files are parsed by the X server upon startup and are treated like part of the traditional xorg.conf configuration file. Note that on conflicting configuration, the file read last will be processed. For this reason, the most generic configuration files should be ordered first by name. The configuration entries in the xorg.conf file are processed at the end.\n\nFor option examples to set, see Fedora:Input device configuration#xorg.conf.d.\n\n"
    },
    {
      "title": "Using xorg.conf",
      "level": 3,
      "content": "Xorg can also be configured via /etc/X11/xorg.conf or /etc/xorg.conf. You can also generate a skeleton for xorg.conf with:\n\n```\n# Xorg :0 -configure\n```\n\nThis should create a xorg.conf.new file in /root/ that you can copy over to /etc/X11/xorg.conf.\n\nAlternatively, your proprietary video card drivers may come with a tool to automatically configure Xorg: see the article of your video driver, NVIDIA or AMDGPU PRO, for more details.\n\n"
    },
    {
      "title": "Input devices",
      "level": 2,
      "content": "For input devices the X server defaults to the libinput driver (xf86-input-libinput), but xf86-input-evdev and related drivers are available as alternative.[2]\n\nUdev, which is provided as a systemd dependency, will detect hardware and both drivers will act as hotplugging input driver for almost all devices, as defined in the default configuration files 10-quirks.conf and 40-libinput.conf in the /usr/share/X11/xorg.conf.d/ directory.\n\nAfter starting X server, the log file will show which driver hotplugged for the individual devices (note the most recent log file name may vary):\n\n```\n$ grep -e \"Using input driver \" Xorg.0.log\n```\n\nIf both do not support a particular device, install the needed driver from the xorg-drivers group. The same applies, if you want to use another driver.\n\nTo influence hotplugging, see #Configuration.\n\nFor specific instructions, see also the libinput article, the following pages below, or Fedora:Input device configuration for more examples.\n\n"
    },
    {
      "title": "Input identification",
      "level": 3,
      "content": "See Keyboard input#Identifying keycodes in Xorg.\n\n"
    },
    {
      "title": "Mouse acceleration",
      "level": 3,
      "content": "See Mouse acceleration.\n\n"
    },
    {
      "title": "Extra mouse buttons",
      "level": 3,
      "content": "See Mouse buttons.\n\n"
    },
    {
      "title": "Touchpad",
      "level": 3,
      "content": "See libinput or Synaptics.\n\n"
    },
    {
      "title": "Touchscreen",
      "level": 3,
      "content": "See Touchscreen.\n\n"
    },
    {
      "title": "Keyboard settings",
      "level": 3,
      "content": "See Keyboard configuration in Xorg.\n\n"
    },
    {
      "title": "Manual configuration",
      "level": 3,
      "content": "- Newer versions of Xorg are auto-configuring, so manual configuration should not be needed.\n- If Xorg is unable to detect any monitor or to avoid auto-configuring, a configuration file can be used. A common case where this is necessary is a headless system, which boots without a monitor and starts Xorg automatically, either from a virtual console at login, or from a display manager.\n\nFor a headless configuration, the xf86-video-dummy driver is necessary; install it and create a configuration file, such as the following:\n\n```\n/etc/X11/xorg.conf.d/10-headless.conf\n```\n\n```\nSection \"Monitor\"\n        Identifier \"dummy_monitor\"\n        HorizSync 28.0-80.0\n        VertRefresh 48.0-75.0\n        Modeline \"1920x1080\" 172.80 1920 2040 2248 2576 1080 1081 1084 1118\nEndSection\n\nSection \"Device\"\n        Identifier \"dummy_card\"\n        VideoRam 256000\n        Driver \"dummy\"\nEndSection\n\nSection \"Screen\"\n        Identifier \"dummy_screen\"\n        Device \"dummy_card\"\n        Monitor \"dummy_monitor\"\n        SubSection \"Display\"\n        EndSubSection\nEndSection\n```\n\n"
    },
    {
      "title": "Multiple monitors",
      "level": 3,
      "content": "See main article Multihead for general information.\n\n"
    },
    {
      "title": "More than one graphics card",
      "level": 4,
      "content": "You must define the correct driver to use and put the bus ID of your graphic cards (in decimal notation).\n\n```\nSection \"Device\"\n    Identifier             \"Screen0\"\n    Driver                 \"intel\"\n    BusID                  \"PCI:0:2:0\"\nEndSection\n\nSection \"Device\"\n    Identifier             \"Screen1\"\n    Driver                 \"nouveau\"\n    BusID                  \"PCI:1:0:0\"\nEndSection\n```\n\nTo get your bus IDs (in hexadecimal):\n\n```\n$ lspci -d ::03xx\n```\n\n```\n00:02.0 VGA compatible controller: Intel Corporation HD Graphics 630 (rev 04)\n01:00.0 3D controller: NVIDIA Corporation GP107M [GeForce GTX 1050 Mobile] (rev a1)\n```\n\nThe bus IDs here are 0:2:0 and 1:0:0.\n\n"
    },
    {
      "title": "Display size and DPI",
      "level": 3,
      "content": "By default, Xorg always sets DPI to 96 since 2009-01-30. A change was made with version 21.1 to provide proper DPI auto-detection, but reverted.\n\nThe DPI of the X server can be set with the -dpi command line option.\n\nHaving the correct DPI is helpful where fine detail is required (like font rendering). Previously, manufacturers tried to create a standard for 96 DPI (a 10.3\" diagonal monitor would be 800x600, a 13.2\" monitor 1024x768). These days, screen DPIs vary and may not be equal horizontally and vertically. For example, a 19\" widescreen LCD at 1440x900 may have a DPI of 89x87.\n\nTo see if your display size and DPI are correct:\n\n```\n$ xdpyinfo | grep -B2 resolution\n```\n\nCheck that the dimensions match your display size.\n\nIf you have specifications on the physical size of the screen, they can be entered in the Xorg configuration file so that the proper DPI is calculated (adjust identifier to your xrandr output):\n\n```\nSection \"Monitor\"\n    Identifier             \"DVI-D-0\"\n    DisplaySize             286 179    # In millimeters\nEndSection\n```\n\nIf you only want to enter the specification of your monitor without creating a full xorg.conf, create a new configuration file. For example (/etc/X11/xorg.conf.d/90-monitor.conf):\n\n```\nSection \"Monitor\"\n    Identifier             \"<default monitor>\"\n    DisplaySize            286 179    # In millimeters\nEndSection\n```\n\nIf you do not have specifications for physical screen width and height (most specifications these days only list by diagonal size), you can use the monitor's native resolution (or aspect ratio) and diagonal length to calculate the horizontal and vertical physical dimensions. Using the Pythagorean theorem on a 13.3\" diagonal length screen with a 1280x800 native resolution (or 16:10 aspect ratio):\n\n```\n$ echo 'scale=5;sqrt(1280^2+800^2)' | bc  # 1509.43698\n```\n\nThis will give the pixel diagonal length, and with this value you can discover the physical horizontal and vertical lengths (and convert them to millimeters):\n\n```\n$ echo 'scale=5;(13.3/1509)*1280*25.4' | bc  # 286.43072\n$ echo 'scale=5;(13.3/1509)*800*25.4'  | bc  # 179.01920\n```\n\n"
    },
    {
      "title": "Setting DPI manually",
      "level": 4,
      "content": "Note: **96** \n\nFor RandR compliant drivers (for example the open source ATI driver), you can set it by:\n\n```\n$ xrandr --dpi 144\n```\n\nTo make it permanent, see Autostarting#On Xorg startup.\n\nYou can manually set the DPI by adding the option under the Device or Screen section:\n\n```\nOption              \"DPI\" \"96 x 96\"\n```\n\nGTK very often overrides the server's DPI via the optional X resource Xft.dpi. To find out whether this is happening to you, check with:\n\n```\n$ xrdb -query | grep dpi\n```\n\nWith GTK library versions since 3.16, when this variable is not otherwise explicitly set, GTK sets it to 96. To have GTK apps obey the server DPI you may need to explicitly set Xft.dpi to the same value as the server. The Xft.dpi resource is the method by which some desktop environments optionally force DPI to a particular value in personal settings. Among these are KDE and TDE.\n\n"
    },
    {
      "title": "Display Power Management",
      "level": 3,
      "content": "DPMS is a technology that allows power saving behaviour of monitors when the computer is not in use. This will allow you to have your monitors automatically go into standby after a predefined period of time.\n\n"
    },
    {
      "title": "Composite",
      "level": 2,
      "content": "The Composite extension for X causes an entire sub-tree of the window hierarchy to be rendered to an off-screen buffer. Applications can then take the contents of that buffer and do whatever they like. The off-screen buffer can be automatically merged into the parent window, or merged by external programs called compositing managers. For more information, see Wikipedia:Compositing window manager.\n\nSome window managers (e.g. Compiz, Enlightenment, KWin, Marco, Metacity, Muffin, Mutter, Xfwm) do compositing on their own. For other window managers, a standalone composite manager can be used.\n\n"
    },
    {
      "title": "List of composite managers",
      "level": 3,
      "content": "- Picom — Lightweight compositor with shadowing, advanced blurring and fading. Forked from Compton.\n\n- Xcompmgr — Composite window-effects manager.\n\n- Gamescope — The micro-compositor from Valve, with gaming-oriented features such as FSR upscaling. Forked from steamos-compositor.\n\n- steamos-compositor-plus — Valve's compositor, with some added tweaks and fixes.\n\n"
    },
    {
      "title": "Automation",
      "level": 3,
      "content": "This section lists utilities for automating keyboard / mouse input and window operations (like moving, resizing or raising).\n\nTable content:\nTool | Package | Manual | Keysyminput | Windowoperations | Note\nxautomation | xautomation | xte(1) | Yes | No | Also contains screen scraping tools. Cannot simulate F13 and more.\nxdo | xdo | xdo(1) | No | Yes | Small X utility to perform elementary actions on windows.\nxdotool | xdotool | xdotool(1) | Yes | Yes | Very buggy and not in active development, e.g: has broken CLI parsing.[3][4]\nxvkbd | xvkbdAUR | xvkbd(1) | Yes | No | Virtual keyboard for Xorg, also has the -text option for sending characters.\nAutoKey | autokey-qtAUR autokey-gtkAUR | documentation | Yes | Yes | Higher-level, powerful macro and scripting utility, with both Qt and Gtk front-ends.\n\nSee also Clipboard#Tools and an overview of X automation tools.\n\n"
    },
    {
      "title": "Nested X session",
      "level": 3,
      "content": "To run a nested session of another desktop environment:\n\n```\n$ /usr/bin/Xnest :1 -geometry 1024x768+0+0 -ac -name Windowmaker & wmaker -display :1\n```\n\nThis will launch a Window Maker session in a 1024 by 768 window within your current X session.\n\nThis needs the package xorg-server-xnest to be installed.\n\nA more modern way of doing a nested X session is with Xephyr.\n\n"
    },
    {
      "title": "Starting an application without a window manager",
      "level": 3,
      "content": "See xinit#Starting applications without a window manager.\n\n"
    },
    {
      "title": "Starting GUI programs remotely",
      "level": 3,
      "content": "See main article: OpenSSH#X11 forwarding.\n\n"
    },
    {
      "title": "On-demand disabling and enabling of input sources",
      "level": 3,
      "content": "With the help of xinput you can temporarily disable or enable input sources. This might be useful, for example, on systems that have more than one mouse, such as the ThinkPads and you would rather use just one to avoid unwanted mouse clicks.\n\nInstall the xorg-xinput package.\n\nFind the name or ID of the device you want to disable:\n\n```\n$ xinput\n```\n\nFor example in a Lenovo ThinkPad T500, the output looks like this:\n\n```\n$ xinput\n```\n\n```\n⎡ Virtual core pointer                          id=2    [master pointer  (3)]\n⎜   ↳ Virtual core XTEST pointer                id=4    [slave  pointer  (2)]\n⎜   ↳ TPPS/2 IBM TrackPoint                     id=11   [slave  pointer  (2)]\n⎜   ↳ SynPS/2 Synaptics TouchPad                id=10   [slave  pointer  (2)]\n⎣ Virtual core keyboard                         id=3    [master keyboard (2)]\n    ↳ Virtual core XTEST keyboard               id=5    [slave  keyboard (3)]\n    ↳ Power Button                              id=6    [slave  keyboard (3)]\n    ↳ Video Bus                                 id=7    [slave  keyboard (3)]\n    ↳ Sleep Button                              id=8    [slave  keyboard (3)]\n    ↳ AT Translated Set 2 keyboard              id=9    [slave  keyboard (3)]\n    ↳ ThinkPad Extra Buttons                    id=12   [slave  keyboard (3)]\n```\n\nDisable the device with xinput --disable device, where device is the device ID or name of the device you want to disable. In this example we will disable the Synaptics Touchpad, with the ID 10:\n\n```\n$ xinput --disable 10\n```\n\nTo re-enable the device, just issue the opposite command:\n\n```\n$ xinput --enable 10\n```\n\nAlternatively using the device name, the command to disable the touchpad would be:\n\n```\n$ xinput --disable \"SynPS/2 Synaptics TouchPad\"\n```\n\n"
    },
    {
      "title": "Persistently disable input source",
      "level": 3,
      "content": "You can disable a particular input source using a configuration snippet:\n\n```\n/etc/X11/xorg.conf.d/30-disable-device.conf\n```\n\n```\nSection \"InputClass\"\n       Identifier   \"disable-device\"\n       Driver       \"driver_name\"\n       MatchProduct \"device_name\"\n       Option       \"Ignore\" \"True\"\nEndSection\n```\n\ndevice is an arbitrary name, and driver_name is the name of the input driver, e.g. libinput. device_name is what is actually used to match the proper device. For alternate methods of targeting the correct device, such as libinput's MatchIsTouchscreen, consult your input driver's documentation. Though this example uses libinput, this is a driver-agnostic method which simply prevents the device from being propagated to the driver.\n\n"
    },
    {
      "title": "Killing application with hotkey",
      "level": 3,
      "content": "Run script on hotkey:\n\n```\n#!/bin/sh\nwindowFocus=$(xdotool getwindowfocus)\npid=$(xprop -id \"$windowFocus\" | grep PID)\nkill -9 \"$pid\"\n```\n\nDependencies: xorg-xprop, xdotool\n\nSee also #Killing an application visually.\n\n"
    },
    {
      "title": "Block TTY access",
      "level": 3,
      "content": "To block tty access when in an X add the following to xorg.conf:\n\n```\nSection \"ServerFlags\"\n    Option \"DontVTSwitch\" \"True\"\nEndSection\n```\n\nThis can be used to help restrict command line access on a system accessible to non-trusted users.\n\n"
    },
    {
      "title": "Prevent a user from killing X",
      "level": 3,
      "content": "To prevent a user from killing X when it is running add the following to xorg.conf:\n\n```\nSection \"ServerFlags\"\n    Option \"DontZap\"      \"True\"\nEndSection\n```\n\n"
    },
    {
      "title": "Killing an application visually",
      "level": 3,
      "content": "When an application is misbehaving or stuck, instead of using kill or killall from a terminal and having to find the process ID or name, xorg-xkill allows to click on said application to close its connection to the X server. Many existing applications do indeed abort when their connection to the X server is closed, but some can choose to continue.\n\n"
    },
    {
      "title": "Rootless Xorg",
      "level": 3,
      "content": "Xorg may run with standard user privileges instead of root (so-called \"rootless\" Xorg). This is a significant security improvement over running as root. Note that some popular display managers do not support rootless Xorg (e.g. LightDM or XDM).\n\nYou can verify which user Xorg is running as with ps -o user= -C Xorg.\n\nSee also Xorg.wrap(1), systemd-logind(8), Systemd/User#Xorg as a systemd user service, Fedora:Changes/XorgWithoutRootRights and FS#41257.\n\n"
    },
    {
      "title": "Using xinitrc",
      "level": 4,
      "content": "To configure rootless Xorg using xinitrc:\n\n- Run startx as a subprocess of the login shell; run startx directly and do not use exec startx.\n- Ensure that Xorg uses virtual terminal for which permissions were set, i.e. passed by logind in $XDG_VTNR via .xserverrc.\n- If using certain proprietary display drivers, kernel mode setting auto-detection will fail. In such cases, you must set needs_root_rights = no in /etc/X11/Xwrapper.config.\n\n"
    },
    {
      "title": "Using GDM",
      "level": 4,
      "content": "GDM will run Xorg without root privileges by default when kernel mode setting is used.\n\n"
    },
    {
      "title": "Session log redirection",
      "level": 4,
      "content": "When Xorg is run in rootless mode, Xorg logs are saved to ~/.local/share/xorg/Xorg.log. However, the stdout and stderr output from the Xorg session is not redirected to this log. To re-enable redirection, start Xorg with the -keeptty flag and redirect the stdout and stderr output to a file:\n\n```\nstartx -- -keeptty >~/.xorg.log 2>&1\n```\n\nAlternatively, copy /etc/X11/xinit/xserverrc to ~/.xserverrc, and append -keeptty. See [5].\n\n"
    },
    {
      "title": "Xorg as Root",
      "level": 3,
      "content": "As explained above, there are circumstances in which rootless Xorg is defaulted to. If this is the case for your configuration, and you have a need to run Xorg as root, you can configure Xorg.wrap(1) to require root:\n\n```\n/etc/X11/Xwrapper.config\n```\n\n```\nneeds_root_rights = yes\n```\n\n"
    },
    {
      "title": "General",
      "level": 3,
      "content": "If a problem occurs, view the log stored in either /var/log/ or, for the rootless X default since v1.16, in ~/.local/share/xorg/. GDM users should check the systemd journal. [6]\n\nThe logfiles are of the form Xorg.n.log with n being the display number. For a single user machine with default configuration the applicable log is frequently Xorg.0.log, but otherwise it may vary. To make sure to pick the right file it may help to look at the timestamp of the X server session start and from which console it was started. For example:\n\n```\n$ grep -e Log -e tty Xorg.0.log\n```\n\n```\n[    40.623] (==) Log file: \"/home/archuser/.local/share/xorg/Xorg.0.log\", Time: Thu Aug 28 12:36:44 2014\n[    40.704] (--) controlling tty is VT number 1, auto-enabling KeepTty\n```\n\n```\n$ tail -f ~/.local/share/xorg/Xorg.0.log | ts\n```\n\n- In the logfile then be on the lookout for any lines beginning with (EE), which represent errors, and also (WW), which are warnings that could indicate other issues.\n- If there is an empty .xinitrc file in your $HOME, either delete or edit it in order for X to start properly. If you do not do this X will show a blank screen with what appears to be no errors in your Xorg.0.log. Simply deleting it will get it running with a default X environment.\n- If the screen goes black, you may still attempt to switch to a different virtual console (e.g. Ctrl+Alt+F6), and blindly log in as root. You can do this by typing root (press Enter after typing it) and entering the root password (again, press Enter after typing it).\n\n```\n# pkill -x X\n```\n\n```\n# reboot\n```\n\n- Check specific pages in Category:Input devices if you have issues with keyboard, mouse, touchpad etc.\n- Search for common problems in AMDGPU, Intel and NVIDIA articles.\n\n"
    },
    {
      "title": "Black screen, No protocol specified, Resource temporarily unavailable for all or some users",
      "level": 3,
      "content": "X creates configuration and temporary files in current user's home directory. Make sure there is free disk space available on the partition your home directory resides in. Unfortunately, X server does not provide any more obvious information about lack of disk space in this case.\n\n"
    },
    {
      "title": "DRI with Matrox cards stopped working",
      "level": 3,
      "content": "If you use a Matrox card and DRI stopped working after upgrading to Xorg, try adding the line:\n\n```\nOption \"OldDmaInit\" \"On\"\n```\n\nto the Device section that references the video card in xorg.conf.\n\n"
    },
    {
      "title": "Frame-buffer mode problems",
      "level": 3,
      "content": "X fails to start with the following log messages:\n\n```\n(WW) Falling back to old probe method for fbdev\n(II) Loading sub module \"fbdevhw\"\n(II) LoadModule: \"fbdevhw\"\n(II) Loading /usr/lib/xorg/modules/linux//libfbdevhw.so\n(II) Module fbdevhw: vendor=\"X.Org Foundation\"\n       compiled for 1.6.1, module version=0.0.2\n       ABI class: X.Org Video Driver, version 5.0\n(II) FBDEV(1): using default device\n\nFatal server error:\nCannot run in framebuffer mode. Please specify busIDs for all framebuffer devices\n```\n\nTo correct, uninstall the xf86-video-fbdev package.\n\n"
    },
    {
      "title": "Program requests \"font '(null)'\"",
      "level": 3,
      "content": "Error message: unable to load font `(null)'.\n\nSome programs only work with bitmap fonts. Two major packages with bitmap fonts are available, xorg-fonts-75dpi and xorg-fonts-100dpi. You do not need both; one should be enough. To find out which one would be better in your case, try xdpyinfo from xorg-xdpyinfo, like this:\n\n```\n$ xdpyinfo | grep resolution\n```\n\nand use what is closer to the shown value.\n\n"
    },
    {
      "title": "Recovery: disabling Xorg before GUI login",
      "level": 3,
      "content": "If Xorg is set to boot up automatically and for some reason you need to prevent it from starting up before the login/display manager appears (if the system is wrongly configured and Xorg does not recognize your mouse or keyboard input, for instance), you can accomplish this task with two methods.\n\n- Change default target to rescue.target. See systemd#Change default target to boot into.\n- If you have not only a faulty system that makes Xorg unusable, but you have also set the GRUB menu wait time to zero, or cannot otherwise use GRUB to prevent Xorg from booting, you can use the Arch Linux live CD. Follow the installation guide about how to mount and chroot into the installed Arch Linux. Alternatively try to switch into another tty with Ctrl+Alt + function key (usually from F1 to F7 depending on which is not used by X), login as root and follow steps below.\n\nDepending on setup, you will need to do one or more of these steps:\n\n- Disable the display manager.\n- Disable the automatic start of X.\n- Rename the ~/.xinitrc or comment out the exec line in it.\n\n"
    },
    {
      "title": "X clients started with \"su\" fail",
      "level": 3,
      "content": "If you are getting Client is not authorized to connect to server, try adding the line:\n\n```\nsession        optional        pam_xauth.so\n```\n\nto /etc/pam.d/su and /etc/pam.d/su-l. pam_xauth will then properly set environment variables and handle xauth keys.\n\n"
    },
    {
      "title": "X failed to start: Keyboard initialization failed",
      "level": 3,
      "content": "If the filesystem (specifically /tmp) is full, startx will fail. The log file will contain:\n\n```\n(EE) Error compiling keymap (server-0)\n(EE) XKB: Could not compile keymap\n(EE) XKB: Failed to load keymap. Loading default keymap instead.\n(EE) Error compiling keymap (server-0)\n(EE) XKB: Could not compile keymap\nXKB: Failed to compile keymap\nKeyboard initialization failed. This could be a missing or incorrect setup of xkeyboard-config.\nFatal server error:\nFailed to activate core devices.\n...\n```\n\nMake some free space on the relevant filesystem and X will start.\n\n"
    },
    {
      "title": "A green screen whenever trying to watch a video",
      "level": 3,
      "content": "Your color depth is set wrong. It may need to be 24 instead of 16, for example.\n\n"
    },
    {
      "title": "SocketCreateListener error",
      "level": 3,
      "content": "If X terminates with error message SocketCreateListener() failed, you may need to delete socket files in /tmp/.X11-unix. This may happen if you have previously run Xorg as root (e.g. to generate an xorg.conf).\n\n"
    },
    {
      "title": "Invalid MIT-MAGIC-COOKIE-1 key when trying to run a program as root",
      "level": 3,
      "content": "That error means that only the current user has access to the X server. The solution is to give access to root:\n\n```\n$ xhost +si:localuser:root\n```\n\nThat line can also be used to give access to X to a different user than root.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Xplain - In-depth explanation of the X Window System\n- Xorg(1)\n- Prepare for LPIC-1 exam 2 - topic 106.1: X11 - briefly covers architecture, #Configuration, desktop environments, remote usage, Wayland.\n- xorg.conf(5)\n- Gentoo:Xorg/Guide#Configuration\n\n"
    }
  ]
}