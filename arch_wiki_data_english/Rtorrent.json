{
  "title": "Rtorrent",
  "url": "https://wiki.archlinux.org/title/Rtorrent",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "rTorrent is a quick and efficient BitTorrent client that uses, and is in development alongside, the libTorrent (not to be confused with libtorrent-rasterbar) library. It is written in C++ and provides a terminal-based user interface via the ncurses programming library. When combined with a terminal multiplexer (e.g. GNU Screen or Tmux) and Secure Shell, it becomes a convenient remote BitTorrent client.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the rtorrent package.\n\n"
    },
    {
      "title": "Unofficial packages",
      "level": 3,
      "content": "- rtorrent-gitAUR - Git master branch package\n- rtorrent-psAUR - Release package with rtorrent-ps patchset\n- rtorrent-pyro-gitAUR - Git feature-bind branch package with rtorrent-ps patchset\n- rtorrent-vi-colorAUR - Release package with vi-like key bindings\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n- See the rTorrent wiki article on this subject for more information: Common Tasks in rTorrent for Dummies.\n- Vim may mistake the syntax of the configuration file, causing errors in the highlighting. To resolve this you can append a modeline # vim: set filetype=conf to ~/.rtorrent.rc, or install rtorrent-syntax-file.\n\nBefore running rTorrent, copy the example configuration file /usr/share/doc/rtorrent/rtorrent.rc to ~/.rtorrent.rc, and check out the related rTorrent wiki page that has a modern basic configuration file.\n\n"
    },
    {
      "title": "Performance",
      "level": 3,
      "content": "The values for the following options are dependent on the system's hardware and Internet connection speed.\n\n```\nthrottle.min_peers.normal.set = 40\nthrottle.max_peers.normal.set = 52\n\nthrottle.min_peers.seed.set = 10\nthrottle.max_peers.seed.set = 52\n\nthrottle.max_uploads.set = 8\n\nthrottle.global_down.max_rate.set = 200\nthrottle.global_up.max_rate.set = 28\n```\n\nThe pieces.hash.on_completion.set option executes a hash check when rTorrent is started. It checks for errors in your completed files.\n\n```\npieces.hash.on_completion.set = yes\n```\n\n"
    },
    {
      "title": "Create and manage files",
      "level": 3,
      "content": "The directory.default.set option will determine where your torrent data will be saved (could be a relative path):\n\n```\ndirectory.default.set = ~/downloaded\n```\n\nThe session.path.set option allows rTorrent to save the progress of your torrents. It is recommended to create a directory in home directory (e.g. mkdir ~/.rtorrent.session).\n\n```\nsession.path.set = ~/.rtorrent.session\n```\n\nThe schedule2 option has rTorrent watch a particular directory for new torrent files. Saving a torrent file to this directory will automatically start the download. Remember to create the directory that will be watched (e.g. mkdir ~/watch). Also, be careful when using this option as rTorrent will move the torrent file to your session folder and rename it to its hash value.\n\n```\nschedule2 = watch_directory,5,5,load.start=/home/user/watch/*.torrent\nschedule2 = untied_directory,5,5,stop_untied=\nschedule2 = tied_directory,5,5,start_tied=\n```\n\nThe following schedule2 option is intended to stop rTorrent from downloading data when disk space is low.\n\n```\nschedule2 = low_diskspace,5,60,((close_low_diskspace,100M))\n```\n\n"
    },
    {
      "title": "Port configuration",
      "level": 3,
      "content": "The network.port_range.set option sets which port(s) to use for listening. It is recommended to use a port that is higher than 49152 (see: List of port numbers). Although, rTorrent allows a range of ports, a single port is recommended.\n\n```\nnetwork.port_range.set = 49164-49164\n```\n\nAdditionally, make sure port forwarding is enabled for the proper port(s) (see: Port Forward guides).\n\n"
    },
    {
      "title": "Additional settings",
      "level": 3,
      "content": "The protocol.encryption.set option enables or disables encryption. It is very important to enable this option, not only for yourself, but also for your peers in the torrent swarm. Some users need to obscure their bandwidth usage from their ISP. And it does not hurt to enable it even if you do not need the added security.\n\n```\nprotocol.encryption.set = allow_incoming,try_outgoing,enable_retry\n```\n\nIt is also possible to force all connections to use encryption. However, be aware that this stricter rule will reduce your client's availability:\n\n```\nprotocol.encryption.set = require,require_RC4,allow_incoming,try_outgoing\n```\n\nSee also Wikipedia:BitTorrent Protocol Encryption.\n\nThis final dht.mode.set option enables DHT support. DHT is common among public trackers and will allow the client to acquire more peers.\n\n```\ndht.mode.set = auto\ndht.port.set = 6881\nprotocol.pex.set= yes\n```\n\n"
    },
    {
      "title": "Key bindings",
      "level": 2,
      "content": "rTorrent relies exclusively on keyboard shortcuts for user input. A quick reference is available in the table below. A complete guide is available on the rTorrent wiki (see: rTorrent User Guide).\n\nTable content:\nCmd | Action\nCtrl-q | Quit application\nCtrl-s | Start download. Runs hash first unless already done.\nCtrl-d | Stop an active download or remove a stopped download\nCtrl-k | Stop and close the files of an active download.\nCtrl-r | Initiate hash check of torrent. Starts downloading if file is not available.\nCtrl-o | Specify the download directory for a added, but not started torrent.\nLeft | Returns to the previous screen\nRight | Goes to the next screen\nBackspace | Adds and starts the specified *.torrent\nReturn | Adds and does not start the specified *.torrent\na|s|d | Increase global upload throttle about 1|5|50 KB/s\nA|S|D | Increase global download throttle about 1|5|50 KB/s\nz|x|c | Decrease global upload throttle about 1|5|50 KB/s\nZ|X|C | Decrease global download throttle about 1|5|50 KB/s\n\n"
    },
    {
      "title": "Redundant mapping",
      "level": 3,
      "content": "Ctrl-s is often used for terminal control to stop screen output while Ctrl-q is used to start it. These mappings may interfere with rTorrent. Check to see if these terminal options are bound to a mapping:\n\n```\n$ stty -a\n```\n\n```\n...\nswtch = <undef>; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V;\n...\n```\n\nTo remove the mappings, change the terminal characteristics to undefine the aforementioned special characters (i.e. stop and start):\n\n```\n# stty stop undef\n# stty start undef\n```\n\nTo remove these mappings automatically at startup you may add the two preceding commands to your ~/.bashrc file.\n\n"
    },
    {
      "title": "Systemd service for a headless server",
      "level": 3,
      "content": "This unit file relies on running a single user named rtorrent and configuring rtorrent to run as a daemon.\n\nCreate the following file:\n\n```\n/etc/systemd/system/rtorrent.service\n```\n\n```\n[Unit]\nDescription=rTorrent System Daemon\nAfter=network.target\n\n[Service]\nType=simple\nUser=rtorrent\nGroup=rtorrent\n# Modify the next 2 lines to use absolute paths\nExecStartPre=-/bin/rm -f /<home>/.session/rtorrent.lock\nExecStart=/usr/bin/rtorrent\nRestart=on-failure\nRestartSec=3\n\n[Install]\nWantedBy=multi-user.target\n```\n\n"
    },
    {
      "title": "Systemd service as a daemon for a user",
      "level": 3,
      "content": "This unit will allow multiple users, or a single user to run rtorrent as a daemon.\n\nTo start rtorrent at boot time, enable rtorrent@user (where user is the user who will run rtorrent).\n\nCreate the following file:\n\n```\n/etc/systemd/system/rtorrent@.service\n```\n\n```\n[Unit]\nDescription=rTorrent for %i\nAfter=network.target\n\n[Service]\nType=simple\nUser=%i\nGroup=%i\nWorkingDirectory=/home/%i\n# Modify the next line to the absolute path for rtorrent.lock, for example\nExecStartPre=-/bin/rm -f /home/%i/.session/rtorrent.lock\nExecStart=/usr/bin/rtorrent -o system.daemon.set=true\nRestart=on-failure\nRestartSec=3\n\n[Install]\nWantedBy=multi-user.target\n```\n\n"
    },
    {
      "title": "Systemd services using tmux or screen",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nUsage of the following services depends on type of service unit.\n\nFor system services (in /etc/systemd/system/):\n\nTo start at boot time:\n\n```\n# systemctl enable rtorrent\n```\n\nStart manually:\n\n```\n# systemctl start rtorrent\n```\n\nStop:\n\n```\n# systemctl stop rtorrent\n```\n\nMake sure 'rtorrent' user is created with the appropriate home directory with your rtorrent.rc placed in.\n\nFor user services (in /etc/systemd/user/):\n\n```\n$ systemctl --user enable rtorrent\n```\n\nStart manually:\n\n```\n$ systemctl --user start rtorrent\n```\n\nStop:\n\n```\n$ systemctl --user stop rtorrent\n```\n\n"
    },
    {
      "title": "With screen",
      "level": 4,
      "content": "- As system service unit\n\n```\n/etc/systemd/system/rtorrent.service\n```\n\n```\n[Unit]\nDescription=rTorrent\nAfter=network.target\n\n[Service]\nType=forking\nKillMode=none\nUser=rtorrent\nExecStartPre=/usr/bin/bash -c \"if test -e %h/.rtorrent_session/rtorrent.lock && test -z `pidof rtorrent`; then rm -f %h/.rtorrent_session/rtorrent.lock; fi\"\nExecStart=/usr/bin/screen -dmfa -S rtorrent /usr/bin/rtorrent\nExecStop=/usr/bin/bash -c \"test `pidof rtorrent` && killall -w -s 2 /usr/bin/rtorrent\"\nWorkingDirectory=%h\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n- As user service unit\n\n```\n/etc/systemd/user/rtorrent.service\n```\n\n```\n[Unit]\nDescription=rTorrent\nAfter=network.target\n\n[Service]\nType=forking\nKillMode=none\nExecStart=/usr/bin/screen -dmfa -S rtorrent /usr/bin/rtorrent\nExecStop=/usr/bin/killall -w -s 2 /usr/bin/rtorrent\nWorkingDirectory=%h\n\n[Install]\nWantedBy=default.target\n```\n\nAttach to rtorrent's session:\n\n```\nscreen -D -r rtorrent\n```\n\nDetach:\n\n```\nCtrl-a d\n```\n\n"
    },
    {
      "title": "with tmux",
      "level": 4,
      "content": "- With independent tmux server (restart rtorrent if crashed)\n\n```\n~/.config/systemd/user/rtorrent.service\n```\n\n```\n[Unit]\nDescription=rtorrent\nAfter=network.target\n\n[Service]\nType=forking\nExecStartPre=/usr/bin/bash -c \"if test -e ~/.session/rtorrent.lock && test -z `pidof rtorrent`; then rm -f ~/.session/rtorrent.lock; fi\"\nExecStart=/usr/bin/tmux -L rt new-session -s rt -n rtorrent -d rtorrent \nExecStop=/usr/bin/bash -c \"/usr/bin/tmux -L rt send-keys -t rt:rtorrent.0 C-q; while pidof rtorrent > /dev/null; do echo stopping rtorrent...; sleep 1; done\"\nRestart=on-failure\n\n[Install]\nWantedBy=default.target\n```\n\n- With tmux running as user rtorrent (restart rtorrent if crashed)\n\n```\n/etc/systemd/system/rtorrent.service\n```\n\n```\n[Unit]\nDescription=rTorrent Daemon\nAfter=network.target\n\n[Service]\nType=forking\nKillMode=none\nUser=rtorrent\nExecStart=/usr/bin/tmux new-session -c /mnt/storage/rtorrent -s rtorrent -n rtorrent -d rtorrent\nExecStop=/usr/bin/bash -c \"/usr/bin/tmux send-keys -t rtorrent C-q && while pidof rtorrent > /dev/null; do sleep 0.5; done\"\nWorkingDirectory=%h\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\nAttach to rtorrent's session:\n\n```\ntmux -L rt attach -t rt\ntmux attach -t rt\n```\n\nDetach:\n\n```\nCtrl-b d\n```\n\n"
    },
    {
      "title": "systemd service file with dtach",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nWhen running dtach from systemd unit, the TERM environment variable has to be set explicitly for rtorrent to work.\n\nThis service file has no restart because the author occasionally takes the drive in question offline, and rtorrent fails, shall we say, \"suboptimally\" when started in this scenario and loses many torrent specific settings such as the specific directories each torrent is stored in. In fact the symlinks that kick off rtorrent live on the relevant drive; if it is unmounted rtorrent cannot start. This use case of blocking rtorrent from starting is relevant to users who put the downloaded files on removable media such as NAS, USB or eSATA drives.\n\n```\n~/.config/systemd/user/rtorrent.service\n```\n\n```\n[Unit]\nDescription=rTorrent\n#After=network.target\n\n[Service]\n# set TERM according to your terminal\nEnvironment=\"TERM=xterm\"\n#Environment=\"TERM=linux\" \nType=forking\nKillMode=none\nExecStart=-/usr/bin/dtach -n /home/sam/run/dtach_fifos/fifo -e \"^T\" /home/sam/bin/rtr_new -n -o import=/home/sam/.config/rtorrent/new_.rc \n   # dtach -n <separate filename for each instance>\n   # \n   # rtr_new -n to ignore the default .rtorrent.rc\n   # rtr_new -o import to load the instance-specific rc\nExecStop=-/usr/bin/killall -u sam -e -w -s INT /home/sam/bin/rtr_new\n\n[Install]\nWantedBy=multi-user.target\n```\n\nNote some other issues exposed in this service file other than just dtach:\n\n/home/sam/bin/rtr_new is a symlink to /usr/bin/rtorrent\n\nThis lets us run several instances and kill each one independently with a different version of the ExecStop, to wit:\n\n```\nExecStop=-/usr/bin/killall -u sam -e -w -s INT /home/sam/bin/rtr_new\nExecStop=-/usr/bin/killall -u sam -e -w -s INT /home/sam/bin/rtr_academic\nExecStop=-/usr/bin/killall -u sam -e -w -s INT /home/sam/bin/rtr_other_stuff\n```\n\nThese are each in a different service file, each of which controls one instance.\n\nWithout this step, when running multiple instances a killall solution would kill all the running rtorrent instances.\n\nIf multiple rtorrent instances are not needed and the rtorrent rc file is in the default location the above service file may be simplified. The entire file is included but only the ExecStart and ExecStop lines change.\n\n```\n~/.config/systemd/user/rtorrent.service\n```\n\n```\n[Unit]\nDescription=rTorrent\n#After=network.target\n\n[Service]\n# set TERM according to your terminal\nEnvironment=\"TERM=xterm\"\n#Environment=\"TERM=linux\" \n# Type=forking is not required if ExecStart command is run using dtach -N (i.e dtach will run on foreground).\nType=forking\nKillMode=none\nExecStart=-/usr/bin/dtach -n /home/sam/run/dtach_fifos/fifo -e \"^T\" /usr/bin/rtorrent \n   # dtach -n <user specified FIFO name> -e <user specified character> /usr/bin/rtorrent \nExecStop=/usr/bin/killall -w -s INT /usr/bin/rtorrent\n   # -e (exact match) and -u (user name) were added above to stop specific processes\n   #  and may be omitted here because only one rtorrent will be running\n\n[Install]\nWantedBy=multi-user.target\n```\n\nNote the hyphen in `ExecStart=-/usr/bin/dtach` part, which allows failure exit code also to denote successfull termination. This is likely because of a current issue[1]. An alternative is to use `SuccessExitStatus=1` in the service section.\n\nThe service can be controlled as a user unit. When it is started, you can attach to the session:\n\n```\n$ dtach -a  /home/sam/run/dtach_fifos/fifo -e \"^T\"\n```\n\n"
    },
    {
      "title": "Pre-allocation",
      "level": 3,
      "content": "rTorrent has the ability to pre-allocate space for a torrent. The major benefit is that it limits and avoids fragmentation of the filesystem. However, this introduces a delay during the pre-allocation if the filesystem does not support the fallocate syscall natively.\n\nTherefore this switch is recommended for xfs, ext4, btrfs and ocfs2 filesystems, which have native fallocate syscall support. They will see no delay during preallocation and no fragmented filesystem. Pre-allocation on others filesystems will cause a delay but will not fragment the files.\n\nTo enable it, add the following to your ~/rtorrent.rc:\n\n```\n~/rtorrent.rc\n```\n\n```\n# Preallocate files; reduces defragmentation on filesystems.\n  system.file.allocate = 1\n```\n\nTo make pre-allocation available on filesystems other than the above - albeit at a delay - you can recompile libTorrent from the ABS tree with the following new switch:\n\n```\n$ ./configure --prefix=/usr --disable-debug --with-posix-fallocate\n```\n\nSee the upstream documentation for further information\n\n"
    },
    {
      "title": "With watch folders",
      "level": 4,
      "content": "It is possible to have rtorrent organize completed torrent data to specific folders based on which 'watch' folder you drop the *.torrent into while continuing to seed.\n\nAs a solution, use the following example in your ~/.rtorrent.rc. Make sure to change the paths.\n\n```\n# default path for in progress downloads\ndirectory = /home/user/torrents/incomplete\n\n# schedule a timer event named 'watch_directory_1':\n# 1) triggers 10 seconds after rtorrent starts\n# 2) triggers at 10 second intervals thereafter\n# 3) Upon trigger, attempt to load (and start) new *.torrent files found in /home/user/torrents/watch/\n# 4) set a variable named 'custom1' with the value \"/home/user/torrents/complete\"\n# NOTE: if you do not want it to automatically start the torrent, change 'load.start' to 'load.normal'\nschedule2 = watch_directory_1,10,10,\"load.start=/home/user/torrents/watch/*.torrent,d.custom1.set=/home/user/torrents/complete\"\n\n# upon completion, move content to path specified above via custom1\nmethod.insert = d.data_path, simple, \"if=(d.is_multi_file), (cat,(d.directory),/), (cat,(d.directory),/,(d.name))\"\nmethod.insert = d.move_to_complete, simple, \"d.directory.set=$argument.1=; execute=mkdir,-p,$argument.1=; execute=mv,-u,$argument.0=,$argument.1=; d.save_full_session=\"\nmethod.set_key = event.download.finished,move_complete,\"d.move_to_complete=$d.data_path=,$d.custom1=\"\n```\n\nYou can add additional watch directories and corresponding completion directories like so:\n\n```\ndirectory = /home/user/torrents/incomplete\n\nschedule2 = watch_directory_1,10,10,\"load.start=/home/user/torrents/watch/*.torrent,d.custom1.set=/home/user/torrents/complete\"\nschedule2 = watch_directory_2,10,10,\"load.start=/home/user/torrents/watch/iso/*.torrent,d.custom1.set=/home/user/torrents/complete/iso\"\nschedule2 = watch_directory_3,10,10,\"load.start=/home/user/torrents/watch/music/*.torrent,d.custom1.set=/home/user/torrents/complete/music\"\n\nmethod.insert = d.data_path, simple, \"if=(d.is_multi_file), (cat,(d.directory),/), (cat,(d.directory),/,(d.name))\"\nmethod.insert = d.move_to_complete, simple, \"d.directory.set=$argument.1=; execute=mkdir,-p,$argument.1=; execute=mv,-u,$argument.0=,$argument.1=; d.save_full_session=\"\nmethod.set_key = event.download.finished,move_complete,\"d.move_to_complete=$d.data_path=,$d.custom1=\"\n```\n\nYou can also specify incomplete directories per watch directory:\n\n```\ndirectory = /home/user/torrents/incomplete\n\nschedule2 = watch_directory_1,10,10,\"load.start=/home/user/torrents/watch/*.torrent,d.directory.set=/home/user/torrents/incomplete,d.custom1.set=/home/user/torrents/complete\"\nschedule2 = watch_directory_2,10,10,\"load.start=/home/user/torrents/watch/iso/*.torrent,d.directory.set=/home/user/torrents/incomplete/iso,d.custom1.set=/home/user/torrents/complete/iso\"\nschedule2 = watch_directory_3,10,10,\"load.start=/home/user/torrents/watch/music/*.torrent,d.directory.set=/home/user/torrents/incomplete/music,d.custom1.set=/home/user/torrents/complete/music\"\n\nmethod.insert = d.data_path, simple, \"if=(d.is_multi_file), (cat,(d.directory),/), (cat,(d.directory),/,(d.name))\"\nmethod.insert = d.move_to_complete, simple, \"d.directory.set=$argument.1=; execute=mkdir,-p,$argument.1=; execute=mv,-u,$argument.0=,$argument.1=; d.save_full_session=\"\nmethod.set_key = event.download.finished,move_complete,\"d.move_to_complete=$d.data_path=,$d.custom1=\"\n```\n\nAlso see completion moving via a bash script, and via pyrocore's rtcontrol (there is an AUR package).\n\n"
    },
    {
      "title": "Without watch folders",
      "level": 4,
      "content": "If you prefer rtorrent to manage completed folder locations automatically, per label, add the below to your rtorrent.rc configuration and amend the paths to suit your environment:\n\n```\n# Check if destination dir is not Null\nmethod.set_key = event.download.inserted_new,check_dest_dir, \\\n\"branch=d.custom=storagedir,,\\\n \\\"d.custom.set=storagedir,/path/to/download/directory\\\"\"\n\n# Modify destination dir according to tv label\nmethod.set_key = event.download.inserted_new,update_dest_dir_tv, \\\n\"branch=\\\"equal={d.custom1=, cat=TV}\\\",\\\n \\\"d.custom.set=storagedir,/path/to/tv/dir\\\"\"\n\n# Modify destination dir according to movies label\nmethod.set_key = event.download.inserted_new,update_dest_dir_movies, \\\n\"branch=\\\"equal={d.custom1=, cat=Movies}\\\",\\\n  \\\"d.custom.set=storagedir,/path/to/movie/dir\\\"\"\n\n# Move files of completed torrents\nmethod.set_key = event.download.finished,move_completed, \\\n\"d.directory.set=$d.custom=storagedir; \\\n     execute2={mv,-u,$d.base_path=,$d.custom=storagedir}\"\n```\n\nAn example use-case for this is if you are using ZFS and need to have the source material on the same filesystem. rTorrent will download to a temporary NVMe/SSD and then move the content to a ZFS filesystem where the *arrs can then process the media and hardlink to a separate folder that your media server will scrape.\n\n"
    },
    {
      "title": "Notification with Google mail",
      "level": 4,
      "content": "Cell phone providers allow you to \"email\" your phone:\n\n```\nVerizon: 10digitphonenumber@vtext.com\nAT&T: 10digitphonenumber@txt.att.net\nFormer AT&T customers: 10digitphonenumber@mmode.com\nSprint: 10digitphonenumber@messaging.sprintpcs.com\nT-Mobile: 10digitphonenumber@tmomail.net\nNextel: 10digitphonenumber@messaging.nextel.com\nCingular: 10digitphonenumber@cingularme.com\nVirgin Mobile: 10digitphonenumber@vmobl.com\nAlltel: 10digitphonenumber@alltelmessage.com OR\n10digitphonenumber@message.alltel.com\nCellularOne: 10digitphonenumber@mobile.celloneusa.com\nOmnipoint: 10digitphonenumber@omnipointpcs.com\nQwest: 10digitphonenumber@qwestmp.com\nTelus: 10digitphonenumber@msg.telus.com\nRogers Wireless: 10digitphonenumber@pcs.rogers.com\nFido: 10digitphonenumber@fido.ca\nBell Mobility: 10digitphonenumber@txt.bell.ca\nKoodo Mobile: 10digitphonenumber@msg.koodomobile.com\nMTS: 10digitphonenumber@text.mtsmobility.com\nPresident's Choice: 10digitphonenumber@txt.bell.ca\nSasktel: 10digitphonenumber@sms.sasktel.com\nSolo: 10digitphonenumber@txt.bell.ca\n```\n\n- Install mailx which is provided by the s-nail package.\n\n- Clear the /etc/mail.rc file and enter:\n\n```\nset sendmail=\"/usr/bin/mailx\"\nset smtp=smtp.gmail.com:587\nset smtp-use-starttls\nset ssl-verify=ignore\nset ssl-auth=login\nset smtp-auth-user=USERNAME@gmail.com\nset smtp-auth-password=PASSWORD\n```\n\nNow to send the text, we must pipe a message to the mailx program.\n\n- Make a Bash script:\n\n```\n/path/to/mail.sh\n```\n\n```\necho \"$@: Done\" | mailx 5551234567@vtext.com\n```\n\nWhere the $@ is a variable holding all the arguments passed to our script.\n\n- And finally, add the important ~/.rtorrent.rc line:\n\n```\nmethod.set_key = event.download.finished,notify_me,\"execute2=/path/to/mail.sh,$d.name=\"\n```\n\nBreaking it down:\n\nnotify_me is the command id, which may be used by other commands, it can be just about anything you like, so long as it is unique.\n\nexecute= is the rtorrent command, in this case to execute a shell command.\n\n/path/to/mail.sh is the name of our script (or whatever command you want to execute) followed by a comma separated list of all the switches/arguments to be passed.\n\n$d.get_name= 'd' is an alias to whatever download triggered the command, get_name is a function which returns the name of our download, and the '$' tells rTorrent to replace the command with its output before it calls execute.\n\nThe end result? When that torrent, 'All Live Nudibranches', that we started before leaving for work finishes, we will be texted:\n\n```\nAll Live Nudibranches: Done\n```\n\n"
    },
    {
      "title": "UI tricks",
      "level": 3,
      "content": "rTorrent does not list the active tab properly by default, add this line to your .rtorrent.rc to show only active torrents\n\n```\nschedule2 = filter_active,30,30,\"view.filter = active,\\\"or={d.up.rate=,d.down.rate=}\\\"\"\n```\n\nThen press 9 in your rTorrent client to see the changes in action.\n\nTo sort the seeding view by the upload rate and only show torrents with peers:\n\n```\n# Sort the seeding view by the upload rate and only show torrents with peers\nview.sort_current = seeding,greater=d.up.rate=\nview.filter = seeding,\"and=d.complete=,d.peers_connected=\"\nview.sort_new = seeding,less=d.up.rate=\nview.sort = seeding\n```\n\nTo sort the complete view by the upload rate:\n\n```\n# Sort the complete view by the upload rate\nview.sort_current = complete,greater=d.up.rate=\nview.filter = seeding,\"and=d.complete=\"\nview.sort_new = seeding,less=d.up.rate=\nview.sort = seeding\n```\n\n"
    },
    {
      "title": "Manually adding trackers to torrents",
      "level": 3,
      "content": "1. Select torrent to edit from rTorrent console view.\n1. Hit Ctrl+x.\n1. If you had four trackers type following lines one at a time (always press Ctrl+x first) to add four more for example:\n\n```\nd.tracker.insert=\"5\",\"udp://tracker.publicbt.com:80\"\nd.tracker.insert=\"6\",\"udp://tracker.openbittorrent.com:80\"\nd.tracker.insert=\"7\",\"udp://tracker.istole.it:80\"\nd.tracker.insert=\"8\",\"udp://tracker.ccc.de:80\"\n```\n\n"
    },
    {
      "title": "Schedule torrent to start at a specific time",
      "level": 3,
      "content": "If you do not want to download a torrent immediately, and would prefer it to begin at a later time (to accomodate a data plan, for example), you can add the torrent to a specific directory and tell rtorrent to check that directory periodically, if a torrent file is present, rtorrent will start downloading at the appointed time:\n\n```\n# Start torrents at 1am in this directory\nschedule2 = watch_start,01:00:00,24:00:00, \"load.start=/home/user/torrents/offpeak/*.torrent\"\n```\n\nrtorrent will check the directory torrents/offpeak/ every 24 hours, and if a torrent file is present will start it at 01:00 am.\n\n"
    },
    {
      "title": "CA certificates",
      "level": 3,
      "content": "By default rTorrent will work with trackers that use HTTPS with valid certificates. If an HTTPS tracker is being rejected because it has a custom or unusual certificate you may need to download it and validate it separately.\n\nOnce you have done that you can inform rTorrent of the new certificate via\n\n```\n$ rtorrent -o http_capath=/etc/ssl/certs/www.your-tracker.com.pem\n```\n\nFor more information see:\n\n- rTorrent + SSL guide Full instructions for downloading and validating a new HTTPS certificate.\n- rTorrent Error & CA Certificate\n- rTorrent Certificates Problem\n- rtorrent setup\n\nIn rTorrent 0.8.9 and up you can disable HTTPS checking completely by setting network.http.ssl_verify_peer.set=0 and network.http.ssl_verify_host.set=0, source.\n\n"
    },
    {
      "title": "Locked directories",
      "level": 3,
      "content": "rTorrent can sometimes lock up after a crash or incorrect shutdown, and will complain about a lock file.\n\nPer the error message, the file called \"rtorrent.lock\" can be found within the hidden folder .rtorrentsession for your download directory and manually removed.\n\n"
    },
    {
      "title": "Event failed: bad return code",
      "level": 3,
      "content": "This is most often caused by there being spaces in your system.method.* lines, or by event handlers that call out to external scripts which are either simply not installed, or return a non-zero exit code.\n\nFor the first, remove any spurious spaces, or else quote path etc. where they are intentional, and it will work.\n\n"
    },
    {
      "title": "Web interface",
      "level": 2,
      "content": "There are numerous web-based front ends for rTorrent; the most active include the following:\n\n- ruTorrent - Has an interface very similar to μTorrent and supports many plugins and advanced features (see also: RTorrent/RuTorrent and guide on forum).\n- Flood - Modern interface, written in Node.js using XMLRPC.\n\n"
    },
    {
      "title": "XMLRPC interface",
      "level": 3,
      "content": "Users of ruTorrent upgrading to rtorrent v0.15.2 and ruTorrent v5.1.7, please see RTorrent/RuTorrent#RPC_Changes\n\n"
    },
    {
      "title": "Unix socket",
      "level": 4,
      "content": "If you want to use rTorrent with web interfaces, you need to add the following line to the configuration file, replacing user with the user who runs rTorrent:\n\n```\nnetwork.scgi.open_local = /home/user/rpc.socket\nexecute.nothrow = chmod,770,/home/user/rpc.socket\n```\n\nyou must also give access to the Unix socket to the chosen web interface by means of ACL (Access Control List), replacing <user> and <group> with those generated by the web interface at the time of their installation (the unix socket is not accessible if rtorrent and web server do not share a common user or group)\n\n```\nsetfacl -m u:<user>:rwx,g<group>:rwx /home/user/rpc.socket\n```\n\nThis will grant read, write and execute permissions on the socket to the chosen web interface.\n\nFor more information see: Using XMLRPC with rtorrent.\n\n"
    },
    {
      "title": "SCGI port",
      "level": 4,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n```\nnetwork.scgi.open_port = localhost:5000\n```\n\n"
    },
    {
      "title": "Saving magnet links as torrent files in watch folder",
      "level": 3,
      "content": "If you wish to have magnet links automatically added to your watch folder, here is a script that will do the trick:\n\n```\n#!/bin/bash\n watch_folder=~/.rtorrent/watch\n cd $watch_folder\n [[ \"$1\" =~ xt=urn:btih:([^&/]+) ]] || exit;\n echo \"d10:magnet-uri${#1}:${1}e\" > \"meta-${BASH_REMATCH[1]}.torrent\"\n```\n\n(adapted from https://blog.gonzih.me/blog/2012/02/17/how-to-use-magnet-links-with-rtorrent/).\n\nSave it, for instance as rtorrent-magnet, give it execution permission, and place it somewhere under your $PATH. Then in Firefox:\n\n1. Type about:config into the Location Bar (address bar) and press Enter.\n1. Right-click: New > Boolean > Name: network.protocol-handler.expose.magnet > Value > false.\n1. Next time you click a magnet link you will be asked which application to open it with. Select the script we just created and you will be done.\n\nIf you want xdg-open to handle this, which you need if you are using chrome instead of Firefox, (though gnome and other DE might have their own programs overriding xdg-open) you need to create the desktop entry for the rtorrent-magnet script in ~/.local/share/applications/rtorrent-magnet.desktop with the following content:\n\n```\n[Desktop Entry]\n Type=Application\n Name=rtorrent-magnet\n Exec=rtorrent-magnet %U\n MimeType=x-scheme-handler/magnet;\n NoDisplay=true\n```\n\nThen all you need to do is to register the mimetype using\n\n```\n$ xdg-mime default rtorrent-magnet.desktop x-scheme-handler/magnet\n```\n\n"
    },
    {
      "title": "Magnet to torrent",
      "level": 2,
      "content": "You could also use the magnet2torrent-gitAUR package which downloads the metadata and creates a torrent file.\n\nHow to use:\n\n```\n$ magnet2torrent -m <magnet link> -o [torrent file]\n```\n\nOr use aria2 and xclip, to process magnet links from clipboard:\n\n```\n$ d=$(xdg-user-dir DOWNLOAD)\n$ c=$(xclip -o -selection clipboard | grep ^magnet)\n$ aria2c -d \"$d\" --input-file <( echo \"$c\" ) --bt-metadata-only=true --bt-save-metadata=true\n```\n\n"
    },
    {
      "title": "rtorrent-ps",
      "level": 2,
      "content": "rTorrent-PS is an rTorrent distribution in form of a patchset with UI enhancements, colorization, and some added features.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "Install rtorrent-psAUR.\n\n"
    },
    {
      "title": "Configuration",
      "level": 3,
      "content": "Set \"pyro.extended\" to 1 in your rTorrent configuration file to activate rTorrent-PS features.\n\n```\nmethod.insert = pyro.extended, value|const, 1\n```\n\nSee rtorrent-ps templates of the pimp-my-box repository for additional configuration examples. Be aware they may require PyroScope command line utilities to work.\n\n"
    },
    {
      "title": "PyroScope command line utilities",
      "level": 2,
      "content": "PyroScope command line utilities are a collection of tools for the rTorrent client that work well together with the #rtorrent-ps patchset. Amongst other things, they provide automation for common tasks and a queue manager for rTorrent.\n\nFollow the official documentation for installation and configuration. See rtorrent-ps templates of the pimp-my-box repository for additional configuration examples.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- RTorrent/RuTorrent\n- GNU Screen\n- The rTorrent Handbook - Includes an explanation of basic and advanced configuration, a scripting guide, and a (not yet) complete command reference with an auto-generated index.\n- rtorrent(1)\n- Comparison of BitTorrent clients on Wikipedia\n- rTorrent Community Wiki - Public place for information on rTorrent and any project related to rTorrent, regarding setup, configuration, operations, and development.\n- pyrocore - Collection of command line tools for rTorrent. It provides commands for creating and modifying torrent files, moving data on completion without having multiple watch folders, and mass-controlling download items via rTorrent's XML-RPC interface: searching, start/stop, deleting items with or without their data, etc. It also offers a documented Python API.\n- Installation guide for rTorrent and Pyroscope on Linux - Collection of tools for the BitTorrent protocol and especially the rTorrent client\n- mktorrent - Command line application used to generate torrent files, which is available as mktorrent.\n- docktorrent - Using Docker, rTorrent and ruTorrent to run a full-featured BitTorrent box.\n- reptyr - another tool to take over a program's TTY (it is in the standard repos). The process may have started being attached to a terminal or to a socket in tmux, screen or dtach.\n- neercs - a more screen/tmux like tool than reptyr, but, like reptyr, neercs can also \"steal\" a process that may have started slaved to a terminal or to a socket in tmux, screen or dtach.\n\nForum threads\n\n- 2009-03-11 - Arch Linux - HOWTO: rTorrent stats in Conky\n\n"
    }
  ]
}