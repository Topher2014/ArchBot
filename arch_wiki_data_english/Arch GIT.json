{
  "title": "Arch GIT",
  "url": "https://wiki.archlinux.org/title/Arch_GIT",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Bisecting bugs with Git\n- Concurrent Versions System\n- Git server\n- Gitweb\n- HTTP tunneling#Tunneling Git\n- Subversion\n- VCS package guidelines\n\nGit is the version control system (VCS) designed and developed by Linus Torvalds, the creator of the Linux kernel. Git is now used to maintain AUR packages, as well as many other projects, including sources for the Linux kernel.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the git package. For the development version, install the git-gitAUR package. Check the optional dependencies when using tools such as git svn, git gui and gitk.\n\n"
    },
    {
      "title": "Graphical front-ends",
      "level": 3,
      "content": "See also git GUI Clients.\n\n- Commit — Editor that helps you write better Git and Mercurial commit messages.\n\n- Forge Sparks — Simple notifier app with support for Github, GitLab, Gitea and Forgejo.\n\n- Giggle — GTK frontend for git.\n\n- GitAhead — Graphical git client including a built-in Merge Tool.\n\n- GitButler — Version control client, backed by Git, powered by Tauri/Rust/Svelte.\n\n- Git Cola — Sleek and powerful graphical user interface for Git written in Python.\n\n- Git Extensions — Graphical user interface for Git that allows you to control Git without using the commandline.\n\n- gitg — GNOME GUI client to view git repositories. Part of gnome-extra.\n\n- git-gui — Tcl/Tk based portable graphical interface to Git.\n\n- GitHub Desktop — Electron-based graphical user interface built by the GitHub team.\n\n- gitk — Tcl/Tk based Git repository browser.\n\n- Gittyup — Qt based Git client.\n\n- Guitar — Git GUI Client.\n\n- gitui — fast terminal-ui for git written in rust.\n\n- Kommit — Git GUI client for KDE.\n\n- lazygit — simple terminal UI for git commands.\n\n- QGit — Git GUI viewer to browse revisions history, view patch content and changed files, graphically following different development branches.\n\n- RabbitVCS — Set of graphical tools written to provide simple and straightforward access to the version control systems you use.\n\n- Sublime Merge — Git Client from the makers of Sublime Text.\n\n- Tig — ncurses-based text-mode interface for git.\n\n- ungit — Brings user friendliness to git without sacrificing the versatility of git.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "In order to use Git you need to set at least a name and email:\n\n```\n$ git config --global user.name  \"John Doe\"\n$ git config --global user.email \"johndoe@example.com\"\n```\n\nSee Getting Started - First-Time Git Setup.\n\nSee #Tips and tricks for more settings.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "A Git repository is contained in a .git directory, which holds the revision history and other metadata. The directory tracked by the repository, by default the parent directory, is called the working directory. Changes in the working tree need to be staged before they can be recorded (committed) to the repository. Git also lets you restore, previously committed, working tree files.\n\nSee Getting Started.\n\n"
    },
    {
      "title": "Getting a Git repository",
      "level": 3,
      "content": "See Getting a Git Repository - Git Basics\n\n"
    },
    {
      "title": "Recording changes",
      "level": 3,
      "content": "See Recording Changes to the Repository - Git Basics\n\n"
    },
    {
      "title": "Viewing change history",
      "level": 3,
      "content": "See Viewing the Commit History - Git Basics\n\n"
    },
    {
      "title": "Undoing things",
      "level": 3,
      "content": "See Undoing Things - Git Basics\n\n"
    },
    {
      "title": "Working with remotes",
      "level": 3,
      "content": "See Working with Remotes - Git Basics\n\n"
    },
    {
      "title": "Branching",
      "level": 3,
      "content": "See Branching in a Nutshell - Git Branching\n\n"
    },
    {
      "title": "Basic branching and merging",
      "level": 4,
      "content": "See Basic Branching and Merging - Git Branching\n\n"
    },
    {
      "title": "Branch management",
      "level": 4,
      "content": "See Branch Management - Git Branching\n\n"
    },
    {
      "title": "Branching workflows",
      "level": 4,
      "content": "See Branching Workflows - Git Branching\n\n"
    },
    {
      "title": "Remote branches",
      "level": 4,
      "content": "See Remote Branches - Git Branching\n\n"
    },
    {
      "title": "Rebasing",
      "level": 4,
      "content": "See Rebasing - Git Branching\n\n"
    },
    {
      "title": "Distributed workflows",
      "level": 4,
      "content": "See Distributed Workflows - Distributed Git\n\n"
    },
    {
      "title": "Contributing to a project",
      "level": 4,
      "content": "See Contributing to a Project - Distributed Git\n\n"
    },
    {
      "title": "Maintaining a project",
      "level": 4,
      "content": "See Maintaining a Project - Distributed Git\n\n"
    },
    {
      "title": "Revision selection",
      "level": 4,
      "content": "See Revision Selection - Git Tools\n\n"
    },
    {
      "title": "Interactive staging",
      "level": 4,
      "content": "See Interactive Staging - Git Tools\n\n"
    },
    {
      "title": "Stashing and cleaning",
      "level": 4,
      "content": "See Stashing and Cleaning - Git Tools\n\n"
    },
    {
      "title": "Signing your work",
      "level": 4,
      "content": "See Signing Your Work - Git Tools\n\n"
    },
    {
      "title": "Searching",
      "level": 4,
      "content": "See Searching - Git Tools\n\n"
    },
    {
      "title": "Rewriting history",
      "level": 4,
      "content": "See Rewriting History - Git Tools\n\n"
    },
    {
      "title": "Reset demystified",
      "level": 4,
      "content": "See Reset Demystified - Git Tools\n\n"
    },
    {
      "title": "Advanced merging",
      "level": 4,
      "content": "See Advanced Merging - Git Tools\n\n"
    },
    {
      "title": "Rerere",
      "level": 4,
      "content": "See Rerere - Git Tools\n\n"
    },
    {
      "title": "Debugging with Git",
      "level": 4,
      "content": "See Debugging with Git - Git Tools\n\n"
    },
    {
      "title": "Submodules",
      "level": 4,
      "content": "See Submodules - Git Tools\n\n"
    },
    {
      "title": "Bundling",
      "level": 4,
      "content": "See Bundling - Git Tools\n\n"
    },
    {
      "title": "Replace",
      "level": 4,
      "content": "See Replace - Git Tools\n\n"
    },
    {
      "title": "Credential storage",
      "level": 4,
      "content": "See Credential Storage - Git Tools\n\n"
    },
    {
      "title": "Using git-config",
      "level": 3,
      "content": "Git reads its configuration from four INI-type configuration files:\n\n- /etc/gitconfig for system-wide defaults\n- ~/.gitconfig and ~/.config/git/config (since 1.7.12) for user-specific configuration\n- .git/config for repository-specific configuration\n\nThese files can be edited directly, but the usual method is to use git config, as shown in the examples below.\n\nList the currently set variables:\n\n```\n$ git config {--local,--global,--system} list\n```\n\nSet the default editor from vim to nano:\n\n```\n$ git config --global core.editor \"nano -w\"\n```\n\nSet the default push action:\n\n```\n$ git config --global push.default simple\n```\n\nSet a different tool for git difftool (meld by default):\n\n```\n$ git config --global diff.tool vimdiff\n```\n\nSee git-config(1) and Git Configuration for more information.\n\n"
    },
    {
      "title": "Inclusion of separate configuration files",
      "level": 4,
      "content": "Since v1.7.10 in 2012, Git is able to build a configuration file that is split into multiple configuration files using the include keyword inside the gitconfig file.\n\n"
    },
    {
      "title": "Adopting a good etiquette",
      "level": 3,
      "content": "- When considering contributing to an existing project, read and understand its license, as it may excessively limit your ability to change the code. Some licenses can generate disputes over the ownership of the code.\n- Think about the project's community and how well you can fit into it. To get a feeling of the direction of the project, read any documentation and even the log of the repository.\n- When requesting to pull a commit, or submit a patch, keep it small and well documented; this will help the maintainers understand your changes and decide whether to merge them or ask you to make some amendments.\n- If a contribution is rejected, do not get discouraged, it is their project after all. If it is important, discuss the reasoning for the contribution as clearly and as patiently as possible: with such an approach a resolution may eventually be possible.\n\n"
    },
    {
      "title": "Speeding up authentication",
      "level": 3,
      "content": "You may wish to avoid the hassle of authenticating interactively at every push to the Git server.\n\n- If you are authenticating with SSH keys, use an SSH agent. See also OpenSSH#Speeding up SSH and OpenSSH#Keep alive.\n- If you are authenticating with username and password, switch to SSH keys if the server supports SSH, otherwise use git-credential-libsecret credential helper, or try git-credential-cache or git-credential-store.\n\n"
    },
    {
      "title": "Using git-credential-libsecret as credential-helper",
      "level": 3,
      "content": "Git may fetch your credentials from an org.freedesktop.secrets compatible keyring like GNOME Keyring, KeePassXC or KDE Wallet. Therefore set up one compatible keyring and check if a keyring is registered to dbus using:\n\n```\n$ dbus-send --session --print-reply --dest=org.freedesktop.DBus / \\\n    org.freedesktop.DBus.GetConnectionUnixProcessID \\\n    string:org.freedesktop.secrets\n```\n\nthen run\n\n```\n$ git config --global credential.helper /usr/lib/git-core/git-credential-libsecret\n```\n\nto set up git.\n\n"
    },
    {
      "title": "Using git-credential-netrc as credential-helper",
      "level": 3,
      "content": "Git can read the netrc file to access credentials. First, direct Git to the netrc helper script:\n\n```\n$ git config --global credential.helper /usr/share/git/credential/netrc/git-credential-netrc.perl\n```\n\nThen, create a .netrc file:\n\n```\n~/.netrc\n```\n\n```\nmachine git-host\nlogin username\npassword password\n```\n\nThe credential helper also supports gpg-encrypted files (~/.netrc.gpg) if you like to keep your secrets safe.\n\n"
    },
    {
      "title": "Protocol defaults",
      "level": 3,
      "content": "If you are running a multiplexed SSH connection as shown above, Git over SSH might be faster than HTTPS. Also, some servers (like the AUR) only allow pushing via SSH. For example, the following configuration will set Git over SSH for any repository hosted on the AUR.\n\n```\n~/.gitconfig\n```\n\n```\n[url \"ssh://aur@aur.archlinux.org/\"]\n\tinsteadOf = https://aur.archlinux.org/\n\tinsteadOf = http://aur.archlinux.org/\n\tinsteadOf = git://aur.archlinux.org/\n```\n\n"
    },
    {
      "title": "Bash completion",
      "level": 3,
      "content": "In order to enable Bash completion, source /usr/share/git/completion/git-completion.bash in a Bash startup file. Alternatively, install bash-completion.\n\n"
    },
    {
      "title": "Git prompt",
      "level": 3,
      "content": "The Git package comes with a prompt script. To enable it, source the /usr/share/git/completion/git-prompt.sh and set a custom prompt with the %s parameter:\n\n- For Bash: PS1='[\\u@\\h \\W$(__git_ps1 \" (%s)\")]\\$ '\n- For Zsh: setopt PROMPT_SUBST ; PS1='[%n@%m %c$(__git_ps1 \" (%s)\")]\\$ ' Tip: Zsh provides a vcs_info function which can be used as an alternative. See zshcontrib(1) § GATHERING INFORMATION FROM VERSION CONTROL SYSTEMS.\n\nNote that the command substitution must be escaped, see Bash/Prompt customization#Embedding commands for details. See Command-line shell#Configuration files for persistent configuration.\n\nWhen changing to a directory of a Git repository, the prompt will change to show the branch name. Extra details can be set to be shown by the prompt by setting the corresponding environment variable:\n\nTable content:\nShell variable | Information\nGIT_PS1_SHOWDIRTYSTATE | + for staged, * if unstaged.\nGIT_PS1_SHOWSTASHSTATE | $ if something is stashed.\nGIT_PS1_SHOWUNTRACKEDFILES | % if there are untracked files.\nGIT_PS1_SHOWUPSTREAM | <, >, <> behind, ahead, or diverged from upstream.\nGIT_PS1_STATESEPARATOR | separator between branch name and state symbols\nGIT_PS1_DESCRIBE_STYLE | show commit relative to tag or branch, when detached HEAD\nGIT_PS1_SHOWCOLORHINTS | display in color\n\nThe full documentation for the environment variables is available in the comments of the script.\n\n- If you experience that $(__git_ps1) returns ((unknown)), then there is a .git folder in your current directory which does not contain any repository, and therefore Git does not recognize it. This can, for example, happen if you mistake Git's configuration file to be ~/.git/config instead of ~/.gitconfig.\n- If your prompt is experiencing delays with very large repositories, it is likely due to the GIT_PS1_SHOWUNTRACKEDFILES option, which triggers a full directory tree scan every time to detect new files, causing noticeable performance impact. To disable this option locally for those repositories, you can use the command git config --local bash.showUntrackedFiles false.\n\nAlternatively, you can use one of git shell prompt customization packages from AUR such as bash-git-promptAUR or gittifyAUR.\n\n"
    },
    {
      "title": "Visual representation",
      "level": 3,
      "content": "To get an idea of the amount of work done:\n\n```\n$ git diff --stat\n```\n\ngit log with forking representation:\n\n```\n$ git log --graph --oneline --decorate\n```\n\ngit log graph alias (i.e. git graph will show a decorated version):\n\n```\n$ git config --global alias.graph 'log --graph --oneline --decorate'\n```\n\n"
    },
    {
      "title": "Commit tips",
      "level": 3,
      "content": "Reset to previous commit (very dangerous, erases all tracked files to the specified commit):\n\n```\n$ git reset --hard HEAD~\n```\n\nIf a repository address gets changed, its remote location will need to be updated:\n\n```\n$ git remote set-url origin git@address:user/repo.git\n```\n\nAlternatively, edit .git/config with the new location.\n\nSigned-off-by line append (a name-email signature is added to the commit which is required by some projects):\n\n```\n$ git commit -s\n```\n\nSigned-off-by automatically append to patches (when using git format-patch commit):\n\n```\n$ git config --local format.signoff true\n```\n\nCommit specific parts of files that have changed. This is useful if there are a large number of changes made that would be best split into several commits:\n\n```\n$ git add -p\n```\n\n"
    },
    {
      "title": "Signing commits",
      "level": 3,
      "content": "Git allows commits and tags to be signed using GnuPG, see Signing Your Work.\n\nTo configure Git to automatically sign commits:\n\n```\n$ git config --global commit.gpgSign true\n```\n\n"
    },
    {
      "title": "Working with a non-master branch",
      "level": 3,
      "content": "Occasionally a maintainer will ask that work be done on a branch. These branches are often called devel or testing. Begin by cloning the repository.\n\nTo enter another branch beside master (git clone only shows master branch but others still exist, git branch -a to show):\n\n```\n$ git checkout -b branch origin/branch\n```\n\nNow edit normally; however to keep the repository tree in sync be sure to use both:\n\n```\n$ git pull --all\n$ git push --all\n```\n\n"
    },
    {
      "title": "Directly sending patches to a mailing list",
      "level": 3,
      "content": "If you want to send patches directly to a mailing list, you have to install the following packages: perl-authen-sasl and perl-io-socket-ssl.\n\nMake sure you have configured your username and e-mail address, see #Configuration.\n\nConfigure your e-mail settings:\n\n```\n$ git config --global sendemail.smtpserver smtp.example.com\n$ git config --global sendemail.smtpserverport 465\n$ git config --global sendemail.smtpencryption ssl\n$ git config --global sendemail.smtpuser foobar@example.com\n```\n\nNow you should be able to send the patch to the mailing list (see also OpenEmbedded: Sending the Patches via Email and git-send-email.io):\n\n```\n$ git add filename\n$ git commit -s\n$ git send-email --to=pacman-contrib@lists.archlinux.org --confirm=always -M -1\n```\n\n"
    },
    {
      "title": "Working with a large git repository",
      "level": 3,
      "content": "When working with a large remote repository, a significant amount of data has to be fetched. The following examples use the Linux kernel to illustrate how to work with such codebases.\n\n"
    },
    {
      "title": "Fetching the entire repository",
      "level": 4,
      "content": "The easiest solution is to get the entire repository:\n\n```\n$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git\n```\n\nYou can update your repository by git pull.\n\n"
    },
    {
      "title": "Partially fetching the repository",
      "level": 4,
      "content": "To limit your local repository to a smaller subset of the origin, say after v4.14 to bisect a bug, use a shallow clone:\n\n```\n$ git clone --shallow-exclude v4.13 git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git\n```\n\nYou will get v4.14 and later, but not v4.13 and older.\n\nIf you only want the latest snapshot, ignoring all history. (If a tarball is available and it suffices, choose that. Downloading from a git repository needs more bandwidth.) You can get it with:\n\n```\n$ git clone --depth 1 git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git\n```\n\nYou can later obtain older commits, as the two following examples show:\n\n```\n$ git fetch --tags --shallow-exclude v4.1\n$ git fetch --tags --shallow-since 2016-01-01\n```\n\n"
    },
    {
      "title": "Using Scalar",
      "level": 4,
      "content": "Scalar, formerly Virtual File System for Git (VFS for Git), allows to access git repositories without a local instance.\n\nSee scalar(1).\n\n"
    },
    {
      "title": "Getting other branches",
      "level": 4,
      "content": "Your local repository tracks, in the above example, only the mainline kernel, i.e. in which the latest development is done. Suppose you want the latest LTS, for example the up-to-date 4.14 branch. You can get it by:\n\n```\n$ git remote set-branches --add origin linux-4.14.y\n$ git fetch --shallow-exclude v4.14\n$ git branch --track linux-4.14.y origin/linux-4.14.y\n```\n\nThe last line is not mandatory, but probably wanted. (To know the name of the branch you want, there is no general rule. You can guess one by seeing the \"ref\" link in the gitweb interface.)\n\nFor the snapshot of linux-4.14.y, do\n\n```\n$ git checkout linux-4.14.y\n```\n\nOr to extract it in another directory,\n\n```\n$ mkdir /path/to/src-4.14; cd /path/to/src-4.14\n$ git clone --no-local --depth 1 -b linux-4.14.y ../linux-stable\n```\n\nAs usual, do git pull to update your snapshot.\n\n"
    },
    {
      "title": "Filtering confidential information",
      "level": 3,
      "content": "Occasionally, software may keep plain-text passwords in configuration files, as opposed to hooking into a keyring. In these cases, git clean-filters may be handy to avoid accidentally commiting confidential information. E. g., the following file assigns a filter to the file “some-dotfile”:\n\n```\n.gitattributes\n```\n\n```\nsome-dotfile filter=remove-pass\n```\n\nWhenever the file “some-dotfile” is checked into git, git will invoke the filter “remove-pass” on the file before checking it in. The filter must be defined in the git-configuration file, e. g.:\n\n```\n.git/config\n```\n\n```\n[filter \"remove-pass\"]\nclean = \"sed -e 's/^password=.*/#password=TODO/'\"\n```\n\n"
    },
    {
      "title": "HTML help files",
      "level": 3,
      "content": "The git help documentation is also available in HTML form by installing git-htmldocsAUR. After installing, the HTML docs can be accessed by passing the -w flag. For example:\n\n```\n$ git help -w merge\n```\n\nThe HTML documentation can be loaded by default by setting a git config option:\n\n```\n$ git config --global help.format html\n```\n\n"
    },
    {
      "title": "Helpers and utilities",
      "level": 3,
      "content": "- git-extras — Collection of utilities for Git (repo summary, repl, changelog, author commit, etc.)\n\n- gitflow-cjs — Extend Git with Vincent Driessen's branching model. The CJS Edition is an actively maintained fork.\n\n- gitmoji-cli — A gitmoji interactive NodeJS client for using gitmojis on commit messages.\n\n"
    },
    {
      "title": "Support of large file synchronization",
      "level": 3,
      "content": "- git-annex — Distributed file synchronization system written in Haskell allowing managing large data using Git.\n\n"
    },
    {
      "title": "Manager of multiple Git repository",
      "level": 3,
      "content": "- git-bulk — Command-line tool written in Bash to manage multiple Git repositories.\n\n- mani — Command-line tool and TUI written in Go to manage multiple Git repositories.\n\n- gita — Command-line tool written in Python to manage multiple Git repositories.\n\n- mu-repo — Command-line tool written in Python to manage multiple Git repositories.\n\n- myrepos (mr) — Command-line tool written in Perl to manage multiple Git repositories.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Git man pages, see git(1)\n- Pro Git book\n- Git Reference by GitHub\n- Git workflow: Forks, remotes, and pull requests\n- VideoLAN wiki article\n- Git Protocols - Git on the Server\n- How to GitHub\n\n"
    }
  ]
}