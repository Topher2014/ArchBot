{
  "title": "Getmail",
  "url": "https://wiki.archlinux.org/title/Getmail",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\ngetmail is a mail retriever designed to allow you to get your mail from one or more mail accounts on various mail servers to your local machine for reading with a minimum of fuss. getmail is designed to be secure, flexible, reliable, and easy-to-use. getmail is designed to replace other mail retrievers such as fetchmail.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the getmailAUR package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "- Create a configuration directory, and set the right permissions by executing: $ mkdir -m 0700 ~/.getmail. The main configuration file often contains sensitive information, namely passwords in plain text.\n- Create a configuration file, the default being: ~/.getmail/getmailrc. A separate configuration file is needed for each mailserver to pick up mail from. Configuration files other than the default, will have to be explicitly passed as arguments to the getmail command.\n\n"
    },
    {
      "title": "Retrieving mail",
      "level": 3,
      "content": "Here is an example getmailrc used with a gmail account.\n\n```\ngetmailrc\n```\n\n```\n[retriever]\ntype = SimplePOP3SSLRetriever\nserver = pop.gmail.com\nusername = username@gmail.com\nport = 995\npassword = password\n\n[destination]\ntype = Maildir\npath = ~/mail/\n```\n\nYou can tweak this to your POP3 service's specification.\n\n"
    },
    {
      "title": "Password management",
      "level": 4,
      "content": "It is possible, rather than storing your password in the config, to call an external program to read the password. In which case, you would use the password_command parameter:\n\n```\npassword_command = (\"/path/to/password-retriever\", \"-p\", \"myaccount@example.org\")\n```\n\nNote that the password parameter (in the example configuration above) overrides this parameter; specify one or the other, not both.\n\n"
    },
    {
      "title": "Other options",
      "level": 4,
      "content": "Most people will like to add the following section to their getmailrc to prevent all the mail on the server being downloaded every time getmail is ran.\n\n```\ngetmailrc\n```\n\n```\n[options]\nread_all = False\n```\n\nFor this guide we will be storing our mail in the maildir format. The two main mailbox formats are mbox and maildir. The main difference between the two is that mbox is one file, with all of your mails and their headers stored in it, whereas a maildir is a directory tree. Each mail is its own file, which will often speed things up.\n\nA maildir is just a folder with the folders cur, new and tmp in it.\n\n```\n$ mkdir -p ~/mail/{cur,new,tmp}\n```\n\nNow, run getmail. If it works fine, you can create a cronjob for getmail to run every n hours/minutes. Type crontab -e to edit cronjobs, and enter the following:\n\n```\n*/10 * * * * /usr/bin/getmail\n```\n\nThat will run getmail every 10 minutes.\n\nAlso, to quiet getmail down, we can reduce its verbosity to zero by adding the following to getmailrc.\n\n```\ngetmailrc\n```\n\n```\n[options]\nverbose = 0\n```\n\n"
    },
    {
      "title": "More than one Email account with getmail",
      "level": 4,
      "content": "By default, when you run getmail the program searches for the file getmailrc created as seen above. If you have more than one mail account you would like to get mail from, then you can create such a file for each email address, and then tell getmail to run using both of them. Obviously if you have two accounts and two files you cannot have both of them called getmailrc. What you do is give them two different names, using myself as an example: I call one personal, and one university. These two files contain content relevant to my personal mail, and my university work mail respectively. Then to get getmail to work on these two files, instead of searching for getmailrc(default), I use the --rcfile switch like so: getmail --rcfile university --rcfile personal This can work with more files if you have more email accounts, just make sure each file is in the .getmail directory and make sure to alter the cronjob to run the command with the --rcfile switches. E.g.\n\n```\n*/30 * * * * /usr/bin/getmail --rcfile university --rcfile personal\n```\n\nObviously you can call your files whatever you want, providing you include them in the cronjob or shell command, and they are in the .getmail/ directory, getmail will fetch mail from those two accounts.\n\n"
    },
    {
      "title": "Sorting mail with procmail",
      "level": 3,
      "content": "Edit your getmailrc to pass retrieved mail to procmail:\n\n```\n[destination]\ntype = MDA_external\npath = /usr/bin/procmail\n```\n\nThen configure procmail to filter your mail.\n\n"
    },
    {
      "title": "Fetching mail automatically with systemd",
      "level": 3,
      "content": "You can run getmail every n hours/minutes with Systemd/Timers. Create a unit file for the timer:\n\n```\n~/.config/systemd/user/get_mail.timer\n```\n\n```\n[Unit]\nDescription=Run getmail every 15 minutes\n\n[Timer]\nOnActiveSec=15min\nOnUnitActiveSec=15min\n\n[Install]\nWantedBy=timers.target\n```\n\nNow create the service file:\n\n```\n~/.config/systemd/user/get_mail.service\n```\n\n```\n[Unit]\nDescription=Run getmail\n\n[Service]\nExecStart=/usr/bin/getmail --quiet\n\n[Install]\nWantedBy=default.target\n```\n\nEnable/start the user unit get_mail.timer.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- getmail documentation\n- Documentation on Configuring Getmail with rcfiles\n- How to Backup Gmail with getmail.\n\n"
    }
  ]
}