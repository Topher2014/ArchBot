{
  "title": "Openbox",
  "url": "https://wiki.archlinux.org/title/Openbox",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Desktop environment\n- Display manager\n- File manager functionality\n- Xdg-menu\n- Oblogout\n- Window manager\n\nOpenbox is a lightweight, powerful, and highly configurable stacking window manager with extensive standards support. It may be built upon and run independently as the basis of a unique desktop environment, or within other integrated desktop environments such as KDE and Xfce, as an alternative to the window managers they provide. The LXDE desktop environment is itself built around Openbox.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the openbox package. Also install TTF fonts such as ttf-dejavu and ttf-liberation.\n\n"
    },
    {
      "title": "Standalone",
      "level": 3,
      "content": "Run openbox or openbox-session with xinit. Note that only openbox-session provides autostart.\n\nNote: **right click** \n\n"
    },
    {
      "title": "Other desktop environments",
      "level": 3,
      "content": "- When replacing the native window manager of a desktop environment with Openbox, keep in mind that Openbox does not provide any compositing effects (such as transparency). See #Compositing effects.\n- Openbox does work with GNOME applications (but see GTK#Client-side decorations). [1]\n\nSee Desktop environment#Use a different window manager.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Four key files form the basis of the openbox configuration, each serving a unique role. They are: rc.xml, menu.xml, autostart, and environment. Although these files are discussed in more detail below, to start configuring Openbox, it will first be necessary to create a local Openbox profile (i.e for your specific user account) based on them. This can be done by copying them from the global /etc/xdg/openbox profile (applicable to any and all users) as a template:\n\n```\n$ mkdir -p ~/.config/openbox\n$ cp -a /etc/xdg/openbox ~/.config/\n```\n\n"
    },
    {
      "title": "rc.xml",
      "level": 3,
      "content": "~/.config/openbox/rc.xml is the main configuration file, responsible for determining the behaviour and settings of the overall session, including:\n\n- Keyboard shortcuts (e.g. starting applications; controlling the volume)\n- Theming\n- Desktop and Virtual desktop settings, and\n- Application Window settings\n\nThis file is also pre-configured, meaning that it will only be necessary to amend existing content in order to customise behaviour to suit personal preference.\n\n"
    },
    {
      "title": "menu.xml",
      "level": 3,
      "content": "~/.config/openbox/menu.xml defines the type and behaviour of the desktop menu, accessible by right-clicking the background. Although the default provided is a static menu (meaning that it will not automatically update when new applications are installed), it is possible to employ the use of dynamic menus that will automatically update as well.\n\nThe available options are discussed extensively below in the #Menus section.\n\n"
    },
    {
      "title": "Autostart",
      "level": 3,
      "content": "openbox-session provides two autostart mechanisms: XDG Autostart (which only works if python-pyxdg is installed) and Openbox's own autostart mechanism.\n\nOpenbox's own autostart mechanism:\n\n- sources /etc/xdg/openbox/environment\n- sources ~/.config/openbox/environment\n- runs /etc/xdg/openbox/autostart\n- runs ~/.config/openbox/autostart\n\nIssues regarding commands in ~/.config/openbox/autostart being executed out of order (or skipped altogether) are often resolved by the addition of small delays. For instance:\n\n```\nxset -b\n(sleep 3s && nm-applet) &\n(sleep 3s && conky) &\n```\n\nIn a standalone Openbox session, a Polkit authentication agent like the one provided by polkit-gnome can be launched from Openbox autostart. For example:\n\n```\n(sleep 3s && /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1) &\n```\n\n"
    },
    {
      "title": "environment",
      "level": 3,
      "content": "~/.config/openbox/environment can be used to export and set relevant environmental variables such as to:\n\n- Define new pathways (e.g. execute commands that would otherwise require the entire pathway to be listed with them)\n- Change language settings, and\n- Define other variables to be used (e.g. the fix for GTK theming could be listed here)\n\n"
    },
    {
      "title": "Themes",
      "level": 3,
      "content": "Install obconf-qt and/or lxappearance-obconf for a GUI to configure visual settings and theming.\n\nA good selection of themes are available in the openbox-themesAUR package or the AUR. Some GTK themes come with an Openbox theme as well. Both Openbox-specific and Openbox-compatible themes will be installed to the /usr/share/themes directory and will also be immediately available for selection.\n\nbox-look.org is an excellent and well-established source of themes. deviantART.com is another excellent resource. Many more can be found online.\n\n"
    },
    {
      "title": "Edit or create",
      "level": 4,
      "content": "The process of creating new or modifying existing themes is covered extensively at the official openbox.org website. obthemeAUR is a user-friendly GUI for doing so.\n\n"
    },
    {
      "title": "GUI configuration",
      "level": 3,
      "content": "Several GUI applications are available to quickly and easily configure your Openbox desktop.\n\n- ObConf — A Qt6 based configuration tool for the Openbox window manager.\n\n- LXAppearance ObConf — Plugin for LXAppearance to configure Openbox. Note that not all options to configure Openbox are available in this plugin, so you might want to install obconf-qt anyway.\n\n- LXInput — LXDE keyboard and mouse configuration\n\n- LXRandR — LXDE monitor configuration.\n\n- obkey — Configure Openbox keyboard shortcuts\n\nPrograms and applications relating to the configuration of Openbox's desktop menu are discussed in #Menus.\n\n"
    },
    {
      "title": "Openbox reconfiguration",
      "level": 2,
      "content": "Openbox will not always automatically reflect any changes made to its configuration files within a session. As a consequence, it will be necessary to manually reload those files after they have been edited. To do so, enter the following command:\n\n```\n$ openbox --reconfigure\n```\n\nWhere intending to add this command as a keybind to ~/.config/openbox/rc.xml, it will only be necessary to list the command as reconfigure. An example has been provided below, using the Super+F11 keybind:\n\n```\n<keybind key=\"W-F11\">\n  <action name=\"Reconfigure\"/>\n</keybind>\n```\n\n"
    },
    {
      "title": "Keyboard shortcuts",
      "level": 2,
      "content": "All keybinds must be added to the ~/.config/openbox/rc.xml file, and below the <!-- Keybindings for running aplications --> heading. Although a brief overview has been provided here, a more in-depth explanation of keybindings can be found at openbox.org.\n\nKeybinds can be added to the configuration file using the following syntax:\n\n```\n<keybind key=\"my-key-combination\">\n  <action name=\"my-action\">\n    ...\n  </action>\n</keybind>\n```\n\nThe action name for running an external command is Execute. Use the following syntax to define an external command to execute:\n\n```\n<action name=\"Execute\">\n  <command>my-command</command>\n</action>\n```\n\nSee the Openbox wiki for a list of all available actions.\n\nWhile the use of standard alpha-numeric keys for keybindings is self-explanatory, special names are assigned to other types of keys, such as modifiers, multimedia and navigation.\n\n"
    },
    {
      "title": "Modifiers",
      "level": 3,
      "content": "Modifier keys play an important role in keybindings (e.g. holding down the Shift or Ctrl key in combination with another key to undertake an action). Using modifiers helps to prevent conflicting keybinds, whereby two or more actions are linked to the same key or combination of keys. The syntax to use a modifier with another key is:\n\n```\n\"<modifier>-<key>\"\n```\n\nThe modifier codes are as follows:\n\n- S: Shift\n- C: Control\n- A: Alt\n- W: Super\n- M: Meta\n- H: Hyper (If it is bound to something)\n\n"
    },
    {
      "title": "Multimedia keys",
      "level": 3,
      "content": "Where available, it is possible to set the appropriate multimedia keys to perform their intended functions, such as to control the volume and/or the screen brightness. These will usually be integrated into the function keys, and are identified by their appropriate symbols. See Keyboard input for details.\n\nThe volume and brightness multimedia codes are as follows (note that commands will still have to be assigned to them to actually function):\n\n- XF86AudioRaiseVolume: Increase volume\n- XF86AudioLowerVolume: Decrease volume\n- XF86AudioMute: Mute / unmute volume\n- XF86MonBrightnessUp: Increase screen brightness\n- XF86MonBrightnessDown: Decrease screen brightness\n\nFor a full list of XF86 multimedia keys, see LQWiki:XF86 keyboard symbols.\n\n"
    },
    {
      "title": "Volume control",
      "level": 4,
      "content": "What commands should be used for controlling the volume will depend on whether ALSA, PulseAudio, or OSS is used for sound.\n\n- ALSA: see Advanced Linux Sound Architecture#Keyboard volume control.\n- PulseAudio: see PulseAudio#Keyboard volume control\n- OSS: see OSS#Keyboard volume control.\n\n"
    },
    {
      "title": "Navigation keys",
      "level": 3,
      "content": "These are the directional / arrow keys, usually used to move the cursor up, down, left, or right. The (self-explanatory) navigation codes are as follows:\n\n- Up: Up\n- Down: Down\n- Left: Left\n- Right: Right\n\n"
    },
    {
      "title": "Menus",
      "level": 2,
      "content": "It is possible to employ three types of menu in Openbox: static, pipes (dynamic), and generators (static or dynamic). They may also be used alone or in any combination.\n\n"
    },
    {
      "title": "Static",
      "level": 3,
      "content": "As the name would suggest, this default type of menu does not change in any way, and may be manually edited and/or (re)generated automatically through the use on an appropriate software package.\n\nFast and efficient, while this type of menu can be used to select applications, it can also be useful to access specific functions and/or perform specific tasks (e.g. desktop configuration), leaving the access of applications to another process (e.g. the synapse or xfce4-appfinder applications).\n\nThe ~/.config/openbox/menu.xml file will be the sole source of static desktop menu content.\n\n"
    },
    {
      "title": "menumaker",
      "level": 4,
      "content": "menumaker automatically generates xml menus for several window managers, including Openbox, Fluxbox, IceWM and Xfce. It will search for all installed executable programs and consequently create a menu file for them. It is also possible to configure MenuMaker to exclude certain application types (e.g. relating to GNOME or KDE), if desired.\n\nOnce installed and executed, it will automatically generate a new ~/.config/openbox/menu.xml file. To avoid overwriting an existing file, enter:\n\n```\n$ mmaker -v OpenBox3\n```\n\nOtherwise, to overwrite an existing file, add the force argument (f):\n\n```\n$ mmaker -vf OpenBox3\n```\n\nOnce a new ~/.config/openbox/menu.xml file has been generated it may then be manually edited, or configured using a GUI menu editor, such as obmenuAUR.\n\n"
    },
    {
      "title": "obmenu",
      "level": 4,
      "content": "obmenuAUR is a \"user-friendly\" GUI application to edit ~/.config/openbox/menu.xml, without the need to code in xml.\n\n"
    },
    {
      "title": "xdg-menu",
      "level": 4,
      "content": "archlinux-xdg-menu will automatically generate a menu based on xdg files contained within the /etc/xdg/ directory for numerous Window Managers, including Openbox. Review the Xdg-menu#OpenBox article for further information.\n\n"
    },
    {
      "title": "logout menu options",
      "level": 4,
      "content": "The ~/.config/openbox/menu.xml file can be edited in order to provide a sub-menu with the same options as provided by oblogout. The sample script below will provide all of these options, with the exception of the ability to lock the screen:\n\n```\n<menu id=\"exit-menu\" label=\"Exit\">\n\t<item label=\"Log Out\">\n\t\t<action name=\"Execute\">\n\t\t\t<command>openbox --exit</command>\n\t\t</action>\n\t</item>\n\t<item label=\"Shutdown\">\n\t\t<action name=\"Execute\">\n\t\t\t<command>systemctl poweroff</command>\n\t\t</action>\n\t</item>\n\t<item label=\"Restart\">\n\t\t<action name=\"Execute\">\n\t\t        <command>systemctl reboot</command>\n\t\t</action>\n\t</item>\n\t<item label=\"Suspend\">\n\t\t<action name=\"Execute\">\n\t\t        <command>systemctl suspend</command>\n\t\t</action>\n\t</item>\n\t<item label=\"Hibernate\">\n\t\t<action name=\"Execute\">\n\t\t        <command>systemctl hibernate</command>\n\t\t</action>\n\t</item>\n</menu>\n```\n\nOnce the entries have been composed, add the following line to present the sub-menu where desired within the main desktop menu (usually as the last entry):\n\n```\n<menu id=\"exit-menu\"/>\n```\n\n"
    },
    {
      "title": "Pipes",
      "level": 3,
      "content": "This type of menu is in essence a script that provides dynamic, refreshed lists on-the-fly as and when run. These lists may be used for multiple purposes, including to list applications, to provide information, and to provide control functions. Pre-configured pipe menus can be installed, although not from the official repositories. More experienced users can also modify and/or create their own custom scripts. Again, ~/.config/openbox/menu.xml may and commonly will contain several pipe menus.\n\n"
    },
    {
      "title": "Examples",
      "level": 4,
      "content": "- obfilebrowserAUR: Application and file browser\n- wifi pipe menu: Wireless networking using Netctl\n\nOpenbox.org also provides a further list of pipe menus.\n\n"
    },
    {
      "title": "Generators",
      "level": 3,
      "content": "This type of menu is akin to those provided by the taskbars of desktop environments such as Xfce or LXDE. Automatically updating on-the-fly, this type of menu can be powerful and very convenient. It may also be possible to add custom categories and menu entries; read the documentation for your intended dynamic menu to determine if and how this can be done.\n\nA menu generator will have to be executed from the ~/.config/openbox/menu.xml file.\n\n"
    },
    {
      "title": "obmenu-generator",
      "level": 4,
      "content": "obmenu-generatorAUR is highly recommended despite being an unofficial package. With the ability to be used as a static or dynamic menu, it is highly configurable, powerful, and versatile. Menu categories and individual entries may also be easily hidden, customised, and/or added with ease. The official homepage provides further information and screenshots.\n\nBelow is an example of how obmenu-generator would be dynamically executed without icons in ~/.config/openbox/menu.xml:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<openbox_menu>\n    <menu id=\"root-menu\" label=\"OpenBox 3\" execute=\"/usr/bin/obmenu-generator\">\n    </menu>\n</openbox_menu>\n```\n\nTo automatically iconify entries, the -i option would be added:\n\n```\n<menu id=\"root-menu\" label=\"OpenBox 3\" execute=\"/usr/bin/obmenu-generator -i\">\n```\n\n"
    },
    {
      "title": "openbox-menu",
      "level": 4,
      "content": "openbox-menuAUR uses the LXDE menu-cache to create dynamic menus. The official homepage provides further information and screenshots.\n\n"
    },
    {
      "title": "Menu icons",
      "level": 3,
      "content": "To show icons next to menu entries, it will be necessary to ensure they are enabled in the <menu> section of the ~/.config/openbox/rc.xml file:\n\n```\n<showIcons>yes</showIcons>\n```\n\nWhere using a static menu, it will then be necessary to edit the ~/.config/openbox/menu.xml file to provide both the icon = command, along with the full path and icon name for each entry. An example of the syntax used to provide an icon for a category is:\n\n```\n<menu id=\"apps-menu\" label=\"[label name]\" icon=\"[pathway to icon]/[icon name]\">\n```\n\nIf you're having problems with icons not showing in the menu then try converting them to .png\n\n"
    },
    {
      "title": "Desktop menu as a panel menu",
      "level": 3,
      "content": "xdotool is a package that can issue commands to simulate key presses / keybinds, meaning that it is possible to use it to invoke keybind-related actions without having to actually press their assigned keys. As this includes the ability to invoke an assigned keybind for the Openbox desktop menu, it is therefore possible to use XDoTool to turn the Openbox desktop menu into a panel menu. Especially where the desktop menu is heavily customised and feature-rich, this may prove very useful to:\n\n- Replace an existing panel menu\n- Implement a panel menu where otherwise not provided or possible (e.g. for Tint2)\n- Compensate where losing access to the desktop menu due to the use of an application like xfdesktop to manage the desktop.\n\nOnce XDoTool has been installed - if not already present - it will be necessary to create a keybind to access the root menu in ~/.config/openbox/rc.xml, and again below the <!-- Keybindings for running aplications --> heading. For example, the following code will bring up the menu by pressing Ctrl+m:\n\n```\n<keybind key=\"C-m\">\n    <action name=\"ShowMenu\">\n       <menu>root-menu</menu>\n    </action>\n</keybind>\n```\n\nOpenbox must then be reconfigured. In this instance, XDoTool will be used to simulate the Ctrl+m keypress to access the desktop menu with the following command (note the use of + in place of -):\n\n```\nxdotool key control+m\n```\n\nHow this command may be used as a panel launcher / icon is largely dependent on the features of panel used. While some panels will allow the above command to be executed directly in the process of creating a new launcher, others may require the use of an executable script. As an example, a custom executable script called obpanelmenu.sh will be created in the ~/.config directory and the appropriate XDoTool command is added to the file (to simulate the Ctrl+m keypress in this example):\n\n```\n~/.config/obpanelmenu.sh\n```\n\n```\nxdotool key control+m\n```\n\nAfter the file has been saved and closed, it may then be made into an executable script.\n\nExecuting it will bring up the Openbox desktop menu. Consequently, where using a panel that supports drag-and-drop functionality to add new launchers, simply drag the executable script onto it before changing the icon to suit personal taste.\n\n"
    },
    {
      "title": "XDG compliant menu",
      "level": 3,
      "content": "A xdg compliant menu is based on the freedesktop.org standard. The menu is defined in menu-files which reside in /etc/xdg/menus. New applications will occur automatically in the menu.\n\n"
    },
    {
      "title": "Example",
      "level": 4,
      "content": "The archlinux-menusAUR package provides an Arch Linux specific XDG-compliant menu.\n\n"
    },
    {
      "title": "Cursor and icon themes",
      "level": 3,
      "content": "See Cursor themes and Icons for details.\n\n"
    },
    {
      "title": "Desktop icons and wallpapers",
      "level": 3,
      "content": "Openbox does not natively support the use of desktop icons or wallpapers.\n\nSee PCManFM, SpaceFM and Idesk.\n\nSee List of applications/Other#Wallpaper setters.\n\n"
    },
    {
      "title": "Compositing effects",
      "level": 3,
      "content": "Openbox does not provide native support for compositing, and thus requires an external compositor for this purpose.\n\nAlthough compositing is not a necessary component, it may specifically avoid issues such as screen distortion with oblogout, and visual glitches with terminal window transparency. See Xorg#List of composite managers for common choices.\n\n"
    },
    {
      "title": "oblogout",
      "level": 3,
      "content": "See the Oblogout article for an overview on how to use this useful, graphical logout script.\n\n"
    },
    {
      "title": "Launch a complex command with hotkey",
      "level": 3,
      "content": "If you need to execute a complex command, use shell functionality.\n\nWhen writing your own scripts, make sure to escape xml special characters, such as \"&\" (\"&amp;\"), \"<\" (\"&lt;\"), \">\" (\"&gt;\") and other (see more on Predefined entities in XML).\n\nThis example will turn off display immediately and lock screen with slock. It was taken from this thread.\n\n```\n<keybind key=\"W-l\">\n   <action name=\"Execute\">\n     <command>sh -c 'slock &amp; (sleep .5 &amp;&amp; xset dpms force off)'</command>\n   </action>\n </keybind>\n```\n\nSometimes one need to specify environment variable for application:\n\n```\n<keybind key=\"A-F7\">\n   <action name=\"Execute\">\n     <command>sh -c \"LC_ALL=C.UTF-8 obconf-qt\"</command>\n   </action>\n </keybind>\n```\n\nAnother example will launch application preserving all stdout and stderr output to file:\n\n```\n<keybind key=\"A-f\">\n   <action name=\"Execute\">\n     <command>sh -c sh -c \"exec gimp &gt;/tmp/gimp.out 2&gt;&amp;1\"</command>\n   </action>\n </keybind>\n```\n\nEnable screenshot:\n\n```\n<keybind key=\"Print\">\n   <action name=\"Execute\">\n     <command>gnome-screenshot --clipboard</command>\n   </action>\n </keybind>\n <keybind key=\"A-Print\">\n   <action name=\"Execute\">\n     <command>gnome-screenshot --clipboard --window</command>\n   </action>\n </keybind>\n <keybind key=\"W-Print\">\n   <action name=\"Execute\">\n     <command>gnome-screenshot --interactive</command>\n   </action>\n </keybind>\n```\n\n"
    },
    {
      "title": "Application launchers",
      "level": 3,
      "content": "Given the lack of a desktop environment with a plain Openbox install, it can be useful to install one or more application launchers as supplements to the Openbox menu system and the hotkeys. Lists of such launchers can be found at Category:Application launchers and List of applications/Other#Application launchers; popular examples are Gmrun and dmenu.\n\n"
    },
    {
      "title": "Switch desktops using the mouse",
      "level": 3,
      "content": "It is possible to switch desktop by moving the mouse cursor to the edges of the screen. First install xdotool and add the following two lines to your ~/.xinitrc:\n\n```\nxdotool behave_screen_edge --delay 500 left set_desktop --relative -- -1 &\nxdotool behave_screen_edge --delay 500 right set_desktop --relative -- +1 &\n```\n\n"
    },
    {
      "title": "Set default applications / file associations",
      "level": 3,
      "content": "See the Default applications article.\n\n"
    },
    {
      "title": "Ad-hoc window transparency",
      "level": 3,
      "content": "The program transset-dfAUR can enable window transparency on-the-fly.\n\nFor example, using the following code in the <mouse> section of the ~/.config/openbox/rc.xml file will enable control of application window transparency by hovering the mouse-pointer over the title bar and scrolling with the middle button:\n\n```\n<context name=\"Titlebar\">\n    ...\n    <mousebind button=\"Up\" action=\"Click\">\n        <action name= \"Execute\" >\n        <execute>transset-df --point .2 --inc  </execute>\n        </action>\n    </mousebind>\n    <mousebind button=\"Down\" action=\"Click\">\n        <action name= \"Execute\" >\n        <execute>transset-df --point .2 --dec </execute>\n        </action>\n    </mousebind>\n    ...\n</context>\n```\n\n"
    },
    {
      "title": "Using obxprop for faster configuration",
      "level": 3,
      "content": "The openbox package provides a obxprop binary that can parse relevant values for applications settings in rc.xml. Officially obxprop | grep \"^_OB_APP\" is recommended for this task. Start the process by running the command shown, then click a window to see its properties in the terminal.\n\n"
    },
    {
      "title": "Xprop values for applications",
      "level": 3,
      "content": "xorg-xprop can be used to relay property values for selected applications. Where frequently using per-application settings, the following Bash Alias may be useful:\n\n```\nalias xp='xprop | grep \"WM_WINDOW_ROLE\\|WM_CLASS\" && echo \"WM_CLASS(STRING) = \\\"NAME\\\", \\\"CLASS\\\"\"'\n```\n\nTo use Xorg-XProp, run using the alias given xp, and click on the active program desired to define with per-application settings. The results displayed will only be the information that Openbox itself requires, namely the WM_WINDOW_ROLE and WM_CLASS (name and class) values:\n\n```\nWM_WINDOW_ROLE(STRING) = \"roster\"\nWM_CLASS(STRING) = \"gajim.py\", \"Gajim.py\"\nWM_CLASS(STRING) = \"NAME\", \"CLASS\"\n```\n\n"
    },
    {
      "title": "Switching between keyboard layouts",
      "level": 3,
      "content": "See the article section switching between keyboard layouts for instructions.\n\n"
    },
    {
      "title": "Set grid layout for virtual desktops",
      "level": 3,
      "content": "Install obsetlayoutAUR. To set a 2x2 grid for example:\n\n```\nobsetlayout 0 2 2 0\n```\n\nRun it without arguments to know what the arguments mean.\n\n"
    },
    {
      "title": "Enable Hot Corners",
      "level": 3,
      "content": "lead-gitAUR provides hot corners for openbox and other lightweight window managers. Start the application with a entry in the autostart-file:\n\n```\nlead &\n```\n\nCommands can be edited in the configuration file ~/.config/lead/lead.conf (replace eDP1 with the name of your screen output, which you can find out using xrandr):\n\n```\n[eDP1]\nbottom=\nbottomLeft=chromium\nbottomRight=thunar\nleft=\nright=\ntop=\ntopLeft=mlde.californium toggle\ntopRight=skippy-xd\n```\n\nFor more information see [2].\n\n"
    },
    {
      "title": "Window snapping",
      "level": 3,
      "content": "Many desktop environments and window managers support window snapping (e.g. Windows 7 Aero snap), whereby they will automatically snap into place when moved to the edge of the screen. This effect can also be simulated in Openbox through the use of keybinds on focused windows.\n\nAs illustrated in the example below, percentages must be used to determine window sizes (see openbox.org for further information). In this instance, The super key is used in conjunction with the navigation keys:\n\n```\n<keybind key=\"W-Left\">\n  <action name=\"UnmaximizeFull\"/>\n  <action name=\"MaximizeVert\"/>\n  <action name=\"Raise\"/>\n  <action name=\"MoveResizeTo\">\n    <width>50%</width>\n    <x>0</x>\n    <y>0</y>\n  </action>\n</keybind>\n<keybind key=\"W-Right\">\n  <action name=\"UnmaximizeFull\"/>\n  <action name=\"MaximizeVert\"/>\n  <action name=\"Raise\"/>\n  <action name=\"MoveResizeTo\">\n    <width>50%</width>\n    <x>50%</x>\n    <y>0</y>\n  </action>\n</keybind>\n```\n\nHowever, it should be noted that once a window has been 'snapped' to an edge, it will remain vertically maximised unless subsequently maximised and then restored. The solution is to implement additional keybinds - in this instance using the down and up keys - to do so. This will also make pulling 'snapped' windows from screen edges faster as well:\n\n```\n<keybind key=\"W-Down\">\n   <action name=\"Unmaximize\"/>\n</keybind>\n<keybind key=\"W-Up\">\n   <action name=\"Maximize\"/>\n</keybind>\n```\n\nThis Ubuntu forum thread provides more information. Applications such as opensnapAUR are also available to automatically simulate window snapping behaviour without the use of keybinds. Another option is to use bunsen-utilities-gitAUR which provides bl-aerosnap --left and bl-aerosnap --right commands which will snap active window on left or right edge respectively if it is not snapped and restore it to original size and position otherwise. Just bind these commands to the key combination of your choosing.\n\nThe example below will give you quarter window tiling in each corner of the screen using the alt key in combination with the navigation keys\n\n```\n<keybind key=\"A-Up\">\n  <action name=\"UnmaximizeFull\"/>\n  <action name=\"Raise\"/>\n  <action name=\"MoveResizeTo\">\n    <x>0</x>\n    <y>0</y>\n    <width>50%</width>\n    <height>50%</height>\n  </action>\n</keybind>\n<keybind key=\"A-Right\">\n  <action name=\"UnmaximizeFull\"/>\n  <action name=\"Raise\"/>\n  <action name=\"MoveResizeTo\">\n    <x>50%</x>\n    <y>0</y>\n    <width>50%</width>\n    <height>50%</height>\n  </action>\n</keybind>\n<keybind key=\"A-Left\">\n  <action name=\"UnmaximizeFull\"/>\n  <action name=\"Raise\"/>\n  <action name=\"MoveResizeTo\">\n    <x>0</x>\n    <y>50%</y>\n    <width>50%</width>\n    <height>50%</height>\n  </action>\n</keybind>\n<keybind key=\"A-Down\">\n  <action name=\"UnmaximizeFull\"/>\n  <action name=\"Raise\"/>\n  <action name=\"MoveResizeTo\">\n    <x>50%</x>\n    <y>50%</y>\n    <width>50%</width>\n    <height>50%</height>\n  </action>\n</keybind>\n```\n\n"
    },
    {
      "title": "Smooth display manager transition",
      "level": 3,
      "content": "Users of display managers might experience a flickering during the transition between the display manager and the Openbox desktop. The flickering comes from Openbox setting the root window's color during startup. Therefore there is a brief moment when the display flashes in a grey color, between the display manager's background and the desktop's wallpaper.\n\nSetting the root window's background color can be disabled by editing the Openbox startup script found in /usr/lib/openbox/openbox-autostart. Simply comment out (or delete) the block starting with # Set a background color.\n\n"
    },
    {
      "title": "Window Decorations",
      "level": 3,
      "content": "To remove window decorations for all or particular applications, use the <decor> option in the <applications> section of rc.xml (user: ~/.config/openbox/ or system: /etc/xdg/openbox/). Example for Firefox, including variants like Firefox-Beta and Firefox-Nightly:\n\n```\n<application class=\"Firefox*\">\n   <decor>no</decor>\n </application>\n```\n\nOne could also disable decorations for all applications (using class \"*\"), then enable them (using yes) for individual ones. To apply the changes, restart your desktop session, and thus Openbox. Reference: Openbox FAQ\n\n"
    },
    {
      "title": "Firefox",
      "level": 3,
      "content": "Mozilla based browsers may ignore application rules (e.g. <desktop>) unless class=\"Firefox\" is used. See #Xprop values for applications.\n\n"
    },
    {
      "title": "Missing themes",
      "level": 3,
      "content": "If for any reason the newly extracted theme cannot be selected, open the theme directory to first ensure that it is compatible with Openbox - there should be an openbox-3 directory and a themerc file within it. An .obt (OpenBox Theme) file may also be present in some instances, which can then be manually loaded in obconf-qt.\n\nA theme may also be not accessible due to wrong permissions. See File permissions and attributes for more.\n\n"
    },
    {
      "title": "Stop continuous desktop switching",
      "level": 3,
      "content": "By default Openbox switches from the last desktop back to the first desktop on mouse wheel scroll. Use <wrap>no</wrap> in the mousebind section to disable this behaviour.\n\n```\n<context name=\"Desktop\">\n     <mousebind button=\"Up\" action=\"Click\">\n       <action name=\"GoToDesktop\">\n         <to>previous</to>\n         <wrap>no</wrap>\n       </action>\n     </mousebind>\n     <mousebind button=\"Down\" action=\"Click\">\n       <action name=\"GoToDesktop\">\n         <to>next</to>\n         <wrap>no</wrap>\n       </action>\n     </mousebind>\n   </context>\n```\n\n"
    },
    {
      "title": "Windows load behind the active window",
      "level": 3,
      "content": "Some application windows (such as Firefox windows) may load behind the currently active window, causing you to need to switch to the window you just created to focus it. To fix this behavior add this to your ~/.config/openbox/rc.xml file, inbetween the <openbox_config> and </openbox_config> tags:\n\n```\n<applications>\n  <application class=\"*\">\n    <focus>yes</focus>\n  </application>\n</applications>\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Openbox Website - Official website\n- Box-Look.org - A good resource for themes and related artwork\n- Openbox Hacks and Configs Thread @ Arch Linux Forums\n- Openbox Screenshots Thread @ Arch Linux Forums\n- An Openbox guide\n\n"
    }
  ]
}