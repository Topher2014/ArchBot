{
  "title": "Streamzap",
  "url": "https://wiki.archlinux.org/title/Streamzap",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- LIRC/Quick start guide\n\nFrom the official website:\n\nThis article covers setup and usage of LIRC with serial or USB infrared devices.\n\nLIRC is a daemon that can translate key presses on a supported remote into program specific commands. In this context, the term, \"program specific\" means that a key press can do different things depending on which program is running and taking commands from LIRC.\n\n1. A button on the remote is pressed causing it to transmit an IR or RF signal.\n1. The signal is received by the receiver connected to the Linux computer.\n1. The kernel (via the correct module) use presents pulse data from the remote on a device like /dev/lirc0, /dev/input/eventX, /dev/ttyUSBX or /dev/ttyS0.\n1. /usr/bin/lircd uses the information from /etc/lirc/lircd.conf.d/foo.conf to convert the pulse data into button press information.\n1. Programs that use LIRC translate the button press info from /usr/bin/lircd into user-defined actions according to ~/.config/lircrc or to program-specific mappings.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the lirc package. If you need audio driver, install lirc-gitAUR.\n\n"
    },
    {
      "title": "Receiver and transmitter configuration",
      "level": 3,
      "content": "The driver and/or the device for the LIRC service may need to be specified in order to run properly. Look for messages like these in the journalctl output if the service abruptly stops while running LIRC-dependent programs such as irrecord:\n\n```\nDriver `devinput' not found or not loadable (wrong or missing -U/--plugindir?).\nreadlink() failed for \"auto\": No such file or directory\n```\n\nSet these in the configuration file and then restart the service.\n\n```\n/etc/lirc/lirc_options.conf\n```\n\n```\n[lircd]\ndriver = driver-name\ndevice = /dev/path-to-dev\n```\n\n"
    },
    {
      "title": "Serial port",
      "level": 4,
      "content": "Modern kernel has serial_ir module, which supersedes older lirc_serial driver. It supports even DIY receivers and transmitters, connected to the motherboard's serial port. Install setserialAUR and run:\n\n```\n# setserial /dev/ttyS0 uart none\n# modprobe serial_ir\n```\n\nAfter loading serial_ir module, device /dev/lirc0 will be created by kernel. If not, check the journal for any relevant errors. An LIRC configuration example for serial device:\n\n```\n/etc/lirc/lirc_options.conf\n```\n\n```\n[lircd]\ndriver          = default\ndevice          = auto\n\n[modinit]\ncode = /usr/bin/setserial /dev/ttyS0 uart none\ncode1 = /usr/sbin/modprobe serial_ir\n```\n\n"
    },
    {
      "title": "Sound card",
      "level": 4,
      "content": "Sound card with connected external DIY circuits can be used to receive and transmit IR codes.\n\naudio_alsa driver included in lirc, but supports only reception.\n\nUnmute microphone input with alsamixer and set enough gain. You can check waveform and gain with audacity. There should be distinguishable square pulses: not flatlined, nor overloaded. Also good demodulated pulses easily perceptible by ear. Note that LIRC and irrecord reads positive pulses in right audio channel. Negative pulses will not work.\n\n```\n/etc/lirc/lirc_options.conf\n```\n\n```\ndriver          = audio_alsa\ndevice          = default\n```\n\naudio driver included in lirc-gitAUR and supports both reception and transmission. Note, that default latency around 0.02 can cause \"Warning: Output underflow\" and corrupted transmission - receiver will not respond to it. Try a higher value like 0.05.\n\nIncrease sound card output loudness, otherwise LED signal will be weak and range is low. LED flash can be detected with smartphone camera, as it sensitive to infrared wavelengths.\n\n```\n/etc/lirc/lirc_options.conf\n```\n\n```\ndriver          = audio\ndevice          = ALSA:default@48000:0.05\n```\n\n"
    },
    {
      "title": "Remote configuration",
      "level": 3,
      "content": "Directory /etc/lirc/lircd.conf.d/ contains system-wide configuration files for remotes. Each *.conf file corresponds to one device and describes its protocol, scancodes and keycodes. It allows LIRC receive and send signals for specific hardware. These files are not included in lirc package and should be found somewhere or created by user.\n\n"
    },
    {
      "title": "Searching for remote configuration",
      "level": 4,
      "content": "Plenty of configuration files can be found in the LIRC remotes database. Follow the url or use irdb-get(1) to search the database.\n\nAn example using irdb-get to find a configuration file for a \"Streamzap\" remote:\n\n```\n$ irdb-get find stream\n```\n\n```\natiusb/atiusb.lircd.conf\ndigital_stream/DTX9900.lircd.conf\nsnapstream/Firefly-Mini.lircd.conf\nstreamzap/PC_Remote.lircd.conf\nstreamzap/streamzap.lircd.conf\nx10/atiusb.lircd.conf\n```\n\n```\n$ irdb-get download streamzap/streamzap.lircd.conf\n```\n\n```\nDownloaded sourceforge.net/p/lirc-remotes/code/ci/master/tree/remotes/streamzap/streamzap.lircd.conf as streamzap.lircd.conf\n```\n\nOnce identified, copy the needed .conf to /etc/lirc/lircd.conf.d/ to allow the daemon to initialize support for it.\n\n```\n# cp streamzap.lircd.conf /etc/lirc/lircd.conf.d/\n```\n\n"
    },
    {
      "title": "Creating remote configuration",
      "level": 4,
      "content": "Remote control configurations can be created using irrecord(1), which guides users trough the process. If using a detected remote, invoke it like so:\n\n```\n# irrecord --device=/dev/lirc0 MyRemote\n```\n\nThe program will instruct user to begin hitting keys on the remote in an attempt to learn it, ultimately mapping out every button and its corresponding scancode. When finished, save the resulting file to /etc/lirc/lircd.conf.d/foo.conf and proceed. Consider sharing configuration file with others.\n\n"
    },
    {
      "title": "Application-specific actions",
      "level": 3,
      "content": "Bind keycodes to application-specific actions by placing their respective configuration files in ~/.config/lircrc/ which should be created manually if desired, see lircrc(5). This only works for LIRC-aware applications, like MPlayer, VLC, MythTV and totem (Kodi also supports LIRC but does so in a non-standard way, see Kodi#Using a remote control).\n\nDefine these application-specific configurations in separate files and include them in lircrc, like:\n\n```\ninclude \"~/.config/lircrc/mplayer\"\ninclude \"~/.config/lircrc/mythtv\"\ninclude \"~/.config/lircrc/vlc\"\n```\n\n"
    },
    {
      "title": "Running as a regular user",
      "level": 3,
      "content": "By default, lircd runs as root. For increased stability and security, upstream recommends running it as a regular user. See Appendix 14 at this link.\n\n"
    },
    {
      "title": "User the AUR package for lirc-user-service",
      "level": 4,
      "content": "lirc-user-serviceAUR is offered which does everything automatically.\n\n"
    },
    {
      "title": "Testing",
      "level": 2,
      "content": "Start/enable lircd.service.\n\n"
    },
    {
      "title": "Receiving commands",
      "level": 3,
      "content": "Run irw(1), point remote to the receiver and press some buttons. Received codes will be printed to stdout.\n\n```\n$ irw\n```\n\n```\n000000037ff07bfe 00 One mceusb\n000000037ff07bfd 00 Two mceusb\n000000037ff07bfd 01 Two mceusb\n000000037ff07bf2 00 Home mceusb\n000000037ff07bf2 01 Home mceusb\n```\n\nIf irw gives no output:\n\n- Run mode2 or xmode2 to see if LIRC actually read something from IR sensor, if no - check the hardware\n- If mode2 receives pulse data, check the configuration files in /etc/lirc/lircd.conf.d/ for errors\n\n"
    },
    {
      "title": "Transmitting commands",
      "level": 3,
      "content": "List registered remotes (configuration files):\n\n```\n$ irsend LIST \"\" \"\"\n```\n\n```\nLG_6710CMAP01A\n```\n\nList available codes for the specific device:\n\n```\n$ irsend LIST LG_6710CMAP01A \"\"\n```\n\n```\n0000000000007887 KEY_POWER\n000000000000f807 KEY_MUTE\n000000000000e817 KEY_VOLUMEUP\n...\n```\n\nChoose discovered device LG_6710CMAP01A and send command KEY_POWER:\n\n```\n$ irsend SEND_ONCE LG_6710CMAP01A KEY_POWER\n```\n\n"
    },
    {
      "title": "When using Xorg",
      "level": 4,
      "content": "Xorg detects some remotes, such as the Streamzap USB PC Remote, as a Human Interface Device (HID) which means some or all of the keys will show up as key strokes as if entered from the physical keyboard. This behavior will present problems if LIRC is to be used to manage the device.\n\nTo disable, create the following file and restart X:\n\n```\n/etc/X11/xorg.conf.d/90-streamzap.conf\n```\n\n```\nSection \"InputClass\"\n  Identifier \"Ignore Streamzap IR\"\n  MatchProduct \"Streamzap\"\n  MatchIsKeyboard \"true\"\n  Option \"Ignore\" \"true\"\nEndSection\n```\n\nDo not forget to alter the MatchProduct property according to one shown in Name from output of\n\n```\n$ grep -e IR /proc/bus/input/devices\n```\n\nFor example WinFast for N: Name=\"cx88 IR (WinFast DTV2000 H rev.\"\n\n"
    },
    {
      "title": "Not using Xorg",
      "level": 4,
      "content": "Blacklist the offending modules by creating /etc/modprobed.d/streamzap.conf to suppress this behavior. An example is provided for the Streamzap remote.\n\n```\ninstall ir_sharp_decoder /bin/false\ninstall ir_xmp_decoder /bin/false\ninstall ir_rc5_decoder /bin/false\ninstall ir_nec_decoder /bin/false\ninstall ir_sony_decoder /bin/false\ninstall ir_mce_kbd_decoder /bin/false\ninstall ir_jvc_decoder /bin/false\ninstall ir_rc6_decoder /bin/false\ninstall ir_sanyo_decoder /bin/false\n```\n\n"
    },
    {
      "title": "Changing default configuration",
      "level": 3,
      "content": "Users not getting any output from irw may have the default configuration in /etc/lirc/lirc_options.conf incorrectly setup (or might have been overwritten by an update).\n\nFirst, check if /dev/lirc0 is present:\n\n```\n$ mode2 --driver default --device /dev/lirc0\n```\n\nWatch the output while pressing buttons on the remote. If output is present, edit /etc/lirc/lirc_options.conf changing the driver and device appropriately.\n\nIf no output is presented, the task becomes locating the correct driver/device combination. First check what combination lirc detected by default. Run ir-keytable from the v4l-utils package. and check the output. It will look similar to this:\n\n```\nFound /sys/class/rc/rc0/ (/dev/input/event5) with:\n       Driver ite-cir, table rc-rc6-mce\n       Supported protocols: unknown other lirc rc-5 jvc sony nec sanyo mce-kbd rc-6 sharp xmp\n       Enabled protocols: lirc\n       Extra capabilities: <access denied>\n```\n\nIn this case, LIRC automatically detected /dev/input/event5 as the IR device, which uses the devinput driver. Check if this combination is working by running:\n\n```\n$ mode2 --driver devinput --device /dev/input/event5\n```\n\nNow try pressing buttons on the remote. If there is no output, try different driver and device combinations. Once a working combination has been identified, change driver and device in /etc/lirc/lirc_options.conf appropriately.\n\n"
    },
    {
      "title": "Example",
      "level": 4,
      "content": "An example configuration for a MCE RC6 compatible receiver:\n\n```\n/etc/lirc/lirc_options.conf\n```\n\n```\n[lircd]\nnodaemon        = False\ndriver          = default\ndevice          = /dev/lirc0\noutput          = /var/run/lirc/lircd\npidfile         = /var/run/lirc/lircd.pid\nplugindir       = /usr/lib/lirc/plugins\npermission      = 666\nallow-simulate  = No\nrepeat-max      = 600\n\n[lircmd]\nuinput          = False\nnodaemon        = False\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Project site\n- Upstream documentation\n- Upstream Configuration Guide\n- Remotes database\n- MythTV Wiki:Remotes article\n- Linux Streamzap configuration files\n\n"
    }
  ]
}