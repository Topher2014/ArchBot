{
  "title": "Diretrizes de pacote OCaml",
  "url": "https://wiki.archlinux.org/title/Diretrizes_de_pacote_OCaml",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "32-bit – CLR – CMake – Cross – DKMS – Eclipse – Electron – Fonte – Free Pascal – GNOME – Go – Haskell – Java – KDE – Kernel – Lisp – Meson – MinGW – Node.js – Nonfree – OCaml – Perl – PHP – Python – R – Ruby – Rust – Shell – VCS – Web – Wine\n\nEscrita de PKGBUILDs para softwares escritos em OCaml.\n\n"
    },
    {
      "title": "Nomenclatura de pacote",
      "level": 2,
      "content": "Para bibliotecas, use ocaml-nomemodulo. Para aplicativos, use o nome do programa. Em ambos casos, o nome deve ser totalmente minúsculo.\n\n"
    },
    {
      "title": "Bibliotecas",
      "level": 3,
      "content": "As bibliotecas OCaml devem ser instaladas sob /usr/lib/ocaml. A instalação em /usr/lib/ocaml/site-lib está obsoleto.\n\nAs bibliotecas OCaml devem ser instaladas usando ocaml-findlib. ocaml-findlib inclui metadados de biblioteca no pacote que facilita a gerência fr bibliotecas. Esse é um padrão de fato e muitos softwares OCaml agora precisam dele.\n\nocaml-findlib extrai dados necessários de um arquivo chamado META que deve ser incluído no arquivo de origem. Se este arquivo não estiver incluído, um deve ser obtido do pacote Debian, Ubuntu ou Fedora correspondente, ou criado para o pacote pelo mantenedor. Uma solicitação para incluir o arquivo também deve ser feita para os desenvolvedores upstream do pacote.\n\nA variável OCAMLFIND_DESTDIR deve ser usada ao instalar pacotes com ocaml-findlib. Veja o exemplo de PKGBUILD abaixo para detalhes.\n\n"
    },
    {
      "title": "OASIS",
      "level": 3,
      "content": "Os pacotes OCaml que instalam executáveis usando OASIS ignoram DESTDIR. Essa é uma limitação conhecida do OASIS (issue #493). Uma forma de habilitar funcionalidade do DESTDIR é executar o script configure com o argumento --destdir, dessa forma:\n\n```\nbuild() {\n    cd \"${srcdir}/${srcname}-${pkgver}\"\n    ./configure --prefix /usr --destdir \"$pkgdir\"\n\n    # build commands\n}\n```\n\n"
    },
    {
      "title": "Níveis e bytecode OCaml",
      "level": 2,
      "content": "O OCaml pode executar código em múltiplos \"níveis\", o nível superior interpreta o Código OCaml sem compilar, o nível de bytecode cria bytecode independente de máquina e o nível nativo cria binários de código de máquina (assim como C/C++).\n\nAo compilar Pacotes OCaml, você precisa estar ciente de que o processo de compilação está compilando código de máquina nativo, bytecode ou, como em muitos casos, ambos. Isso cria várias situações que podem causar problemas com as opções de pacote e as dependências corretas.\n\nSe o bytecode for produzido, o PKGBUILD deverá conter o seguinte para proteger o bytecode:\n\n```\noptions=('!strip')\n```\n\nSe o pacote não contiver bytecode e apenas distribuir um binário, então ocaml não é necessário como uma dependência, mas é claro que é necessário como um makedepends desde que o pacote ocaml fornece o OCaml compilador. Se o pacote contiver código nativo e bytecode, ocaml deve ser uma dependência e um makedepends.\n\nO código OCaml é raramente (ou nunca) distribuído apenas como bytecode e quase sempre incluirá código nativo: o único caso em que usar any como o arch é aconselhável é quando apenas código-fonte não compilado é distribuído, geralmente com uma biblioteca, embora muitas bibliotecas ainda distribuam código nativo.\n\nA moral da história aqui é estar ciente do que você está distribuindo, as chances são de que o seu pacote contenha código nativo de máquina e bytecode.\n\n"
    },
    {
      "title": "Exemplo de PKGBUILD usando Dune",
      "level": 2,
      "content": "Dune é um novo sistema de compilação que está se tornando cada vez mais usado por projetos de OCaml.\n\nUma coisa a estar ciente é que um único projeto pode criar vários \"pacotes\" no sentido do OPAM/findlib, cada um com seu próprio diretório em /usr/lib/ocaml/. Veja ocaml-cairo para um exemplo. Para compilações de versão, todos os \"pacotes\" precisam ser listados explicitamente.\n\n```\n# Contributor: Seu nome <seuemail@domínio.com>\npkgname=ocaml-<nome_do_pacote>\npkgver=4.2\npkgrel=1\nlicense=()\narch=('x86_64')\npkgdesc=\"Um pacote OCaml\"\nurl=\"\"\ndepends=('ocaml')\nmakedepends=('dune')\nsource=()\noptions=('!strip')\nsha256sums=()\n\nbuild() {\n  cd \"${srcdir}/${pkgname}-${pkgver}\"\n  # A flag \"-p\" é necessária para compilações de lançamento, veja a página man do Dune. Dune vai reclamar se você esquecer alguns pacotes.\n  dune build -p pacote1,pacote1-extensão,pacote2\n}\n\npackage() {\n  cd \"${srcdir}/${pkgname}-${pkgver}\"\n  DESTDIR=\"${pkgdir}\" dune install --prefix \"/usr\" --libdir \"lib/ocaml\"\n  # Dune instala documentação em /usr/doc, corrija isso.\n  install -dm755 \"${pkgdir}/usr/share/\"\n  mv \"${pkgdir}/usr/doc\" \"${pkgdir}/usr/share/\"\n}\n```\n\n"
    },
    {
      "title": "Exemplo de PKGBUILD usando findlib simples",
      "level": 2,
      "content": "```\n# Contributor: Seu Nome <seuemail@dominio.com.br>\n\npkgname=ocaml-<nome_pacote>\npkgver=4.2\npkgrel=1\nlicense=()\narch=('i686' 'x86_64')\npkgdesc=\"An OCaml Package\"\nurl=\"\"\ndepends=('ocaml')\nmakedepends=('ocaml-findlib')\nsource=()\noptions=('!strip')\nmd5sums=()\n\nOCAMLFIND_DESTDIR=\"${pkgdir}$(ocamlfind printconf destdir)\"\n\nbuild() {\n  cd \"${srcdir}/${pkgname}-${pkgver}\"\n  mkdir -p \"$OCAMLFIND_DESTDIR\"\n  ./configure --prefix=/usr\n  make\n}\n\npackage() {\n  cd \"${srcdir}/${pkgname}-${pkgver}\"\n  env DESTDIR=\"${pkgdir}\" \\\n    OCAMLFIND_DESTDIR=\"$OCAMLFIND_DESTDIR\" \\\n    make install\n}\n```\n\nTenha em mente que muitos pacotes OCaml frequentemente precisarão de parâmetros extras para o make e make install. Lembre-se também de remover a opção !strip e alterar a arquitetura se o pacote não produzir bytecode.\n\n"
    }
  ]
}