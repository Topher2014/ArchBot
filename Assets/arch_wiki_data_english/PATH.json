{
  "title": "PATH",
  "url": "https://wiki.archlinux.org/title/PATH",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Default applications\n- systemd/User#Environment variables\n\nAn environment variable is a named object that contains data used by one or more applications. In simple terms, it is a variable with a name and a value. The value of an environmental variable can for example be the location of all executable files in the file system, the default editor that should be used, or the system locale settings. Users new to Linux may often find this way of managing settings a bit unmanageable. However, environment variables provide a simple way to share configuration settings between multiple applications and processes in Linux.\n\n"
    },
    {
      "title": "Utilities",
      "level": 2,
      "content": "The coreutils package contains the programs printenv and env. To list the current environmental variables with values:\n\n```\n$ printenv\n```\n\nThe env utility can be used to run a command under a modified environment. The following example will launch xterm with the environment variable EDITOR set to vim. This will not affect the global environment variable EDITOR.\n\n```\n$ env EDITOR=vim xterm\n```\n\nThe shell builtin set(1p) allows you to change the values of shell options, set the positional parameters and to display the names and values of shell variables.\n\nEach process stores their environment in the /proc/$PID/environ file. This file contains each key value pair delimited by a nul character (\\x0). A more human readable format can be obtained with sed, e.g. sed 's:\\x0:\\n:g' /proc/$PID/environ.\n\n"
    },
    {
      "title": "Defining variables",
      "level": 2,
      "content": "To avoid needlessly polluting the environment, you should seek to restrict the scope of variables. In fact, graphical sessions and systemd services require you to set variables in certain locations for them to take effect. The scopes of environment variables are broken down into the contexts they affect:\n\n- Global: All programs that any user runs, not including systemd services.\n- By user: All programs that a particular user runs, not including user systemd services (see Systemd/User#Environment variables) or graphical applications (see #Graphical environment).\n\n"
    },
    {
      "title": "Using shell initialization files",
      "level": 4,
      "content": "Most Linux distributions tell you to change or add environment variable definitions in /etc/profile or other locations. Keep in mind that there are also package-specific configuration files containing variable settings such as /etc/locale.conf. Be sure to maintain and manage the environment variables and pay attention to the numerous files that can contain environment variables. In principle, any shell script can be used for initializing environmental variables, but following traditional UNIX conventions, these statements should only be present in some particular files.\n\nThe following files can be used for defining global environment variables on your system, each with different limitations:\n\n- /etc/environment is used by the pam_env module and is shell agnostic so scripting or glob expansion cannot be used. The file only accepts variable=value pairs.\n- /etc/profile initializes variables for login shells only. It does, however, run scripts (e.g. those in /etc/profile.d/) and can be used by all Bourne shell compatible shells.\n- Shell specific configuration files - Global configuration files of your shell, initializes variables and runs scripts. For example Bash#Configuration files (e.g. ~/.bashrc) or Zsh#Startup/Shutdown files (e.g. ~/.zshrc).\n\nThe following Bash helper function can be used to append a number of directories to the PATH environment variable. Add the function at the top of the file where you define your environment (e.g. ~/.environment or ~/.bashrc.\n\nThe function will only add directories that actually exist on the filesystem, and it will avoid creating duplicate entries.\n\n```\nadd_paths() {\n  for d in \"$@\"; do\n    [[ -d \"$d\" &&Â ! \"$PATH\" =~ (^|:)$d(:|$) ]] && PATH=\"$PATH:$d\"\n  done\n}\n\nadd_paths ~/bin ~/scripts\n```\n\nOne method for sharing environment variables between different shells is to create a file without any comments, blank lines, or spaces (bash) that can be read directly by envsubst (inspired by [1]):\n\n```\n.env\n```\n\n```\nEDITOR=vim\nXDG_CACHE_HOME=$HOME/.cache\nXDG_CONFIG_HOME=$HOME/.config\nXDG_DATA_HOME=$HOME/.local/share\nXDG_STATE_HOME=$HOME/.local/state\n```\n\n```\n~/.bashrc\n```\n\n```\nexport $(envsubst < .env)\n```\n\n```\n~/.config/fish/config.fish\n```\n\n```\nset export (envsubst < .env)\n```\n\n"
    },
    {
      "title": "Using pam_env",
      "level": 4,
      "content": "The PAM module pam_env(8) loads the variables to be set in the environment from the following files in order: /etc/security/pam_env.conf and /etc/environment.\n\n- These files are read before other files, in particular before ~/.profile, ~/.bash_profile and ~/.zshenv.\n- The deprecated ~/.pam_environment is not read anymore. See FS#68945.\n\n/etc/environment must consist of simple VARIABLE=value pairs on separate lines, for example:\n\n```\n/etc/environment\n```\n\n```\nEDITOR=nano\n```\n\n/etc/security/pam_env.conf has the following format:\n\n```\n/etc/security/pam_env.conf\n```\n\n```\nVARIABLE [DEFAULT=value] [OVERRIDE=value]\n```\n\n@{HOME} and @{SHELL} are special variables that expand to what is defined in /etc/passwd. The following example illustrates how to expand the HOME environment variable into another variable:\n\n```\n/etc/security/pam_env.conf\n```\n\n```\nXDG_CONFIG_HOME   DEFAULT=@{HOME}/.config\n```\n\nThe format also allows to expand already defined variables in the values of other variables using ${VARIABLE} , like this:\n\n```\n/etc/security/pam_env.conf\n```\n\n```\nGOPATH DEFAULT=${XDG_DATA_HOME}/go\n```\n\nVARIABLE=value pairs are also allowed, but variable expansion is not supported in those pairs. See pam_env.conf(5) for more information.\n\n"
    },
    {
      "title": "Per user",
      "level": 3,
      "content": "You do not always want to define an environment variable globally. For instance, you might want to add /home/my_user/bin to the PATH variable but do not want all other users on your system to have that in their PATH too. Local environment variables can be defined in many different files:\n\n- User configuration files of your shell, for example Bash#Configuration files or Zsh#Startup/Shutdown files. Unless you are restricting the scope of the variables to terminals you open (e.g. command-line applications only), you are looking to modify the login shell.\n- systemd user environment variables are read from ~/.config/environment.d/*.conf.\n\n- Unless you are restricting the scope of the variables to terminals you open (e.g. command-line applications only), you are looking to modify the login shell.\n\nTo add a directory to the PATH for local usage, put following in ~/.bash_profile:\n\n```\nexport PATH=\"${PATH}:/home/my_user/bin\"\n```\n\nTo update the variable, re-login or source the file: $ source ~/.bash_profile.\n\n"
    },
    {
      "title": "Graphical environment",
      "level": 4,
      "content": "If an environment variable only affects graphical applications, you may want to restrict the scope of it by only setting it within the graphical session. In order of decreasing scope:\n\n- #Per Xorg session and #Per Wayland session affect the whole graphical session, certainly including the DE.\n- #Per desktop environment session affects the applications spawned within graphical session, potentially including the DE itself.\n- #Per application affects just a particular graphical application.\n\nSome graphical environments, (e.g. KDE Plasma) support executing shell scripts at login: they can be used to set environment variables. See KDE#Autostart for example.\n\nThe procedure for modifying the environment of the Xorg session depends on how it is started:\n\n- Most display managers source xprofile.\n- startx and SLiM execute xinitrc.\n- XDM executes ~/.xsession; see XDM#Defining the session.\n- LightDM[2] and SDDM[3] additionally source startup scripts for login shells, like ~/.bash_profile for bash or ~/.zprofile and ~/.zlogin for zsh.\n\nThough the end of the script depends on which file it is, and any advanced syntax depends on the shell used, the basic usage is universal:\n\n```\n~/.xprofile, ~/.xinitrc, or ~/.xsession\n```\n\n```\n...\nexport GUI_VAR=value\n...\n```\n\nSince Wayland does not initiate any Xorg related files, GDM and KDE Plasma source systemd user environment variables instead.\n\n```\n~/.config/environment.d/envvars.conf\n```\n\n```\nGUI_VAR=value\n```\n\nNo other display managers supporting Wayland sessions (e.g. SDDM) provide direct support for this yet. However, LightDM and SDDM source startup scripts for login shells on Wayland sessions too.\n\ngreetd also sources /etc/profile and ~/.profile - this behavior is controlled by its source_profile setting, enabled by default.\n\nIf your display manager sources startup scripts like ~/.bash_profile and you want to use environment.d, you can source it like so:\n\n```\n~/.bash_profile\n```\n\n```\n# use systemd-environment-d-generator(8) to generate environment, and export those variables\nset -o allexport\nsource <(/usr/lib/systemd/user-environment-generators/30-systemd-environment-d-generator)\nset +o allexport\n```\n\nTo set environment variables only for a specific application instead of the whole session, edit the application's .desktop file. See Desktop entries#Modify environment variables for instructions.\n\nFor Steam games, you can configure a program's environment by editing its launch options; see Steam#Launch options.\n\n"
    },
    {
      "title": "Per session or shell",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nSometimes only temporary variables are required. One might want to temporarily run executables from a specific directory created without having to type the absolute path to each one, or use the path in a short temporary shell script.\n\nFor example, you can define the PATH variable in your current shell, or use the export command to define it for all shells until you log out of the session. To add a session-specific directory to PATH, issue:\n\n```\n$ export PATH=\"${PATH}:/home/my_user/tmp/usr/bin\"\n```\n\nTo add only a shell-specific directory to PATH, issue:\n\n```\n$ PATH=\"${PATH}:/home/my_user/tmp/usr/bin\"\n```\n\n"
    },
    {
      "title": "Examples",
      "level": 2,
      "content": "The following section lists a number of common environment variables used by a Linux system and describes their values.\n\n- XDG_CURRENT_DESKTOP is a freedesktop.org variable containing a colon separated list of strings that the current desktop environment identifies as [4]. Standardized values for actively developed environments are GNOME, GNOME-Flashback, KDE, LXDE, LXQt, MATE, TDE, Unity, XFCE, EDE, Cinnamon, Pantheon, and DDE [5]. Cinnamon was registered later than the rest of the desktop environments. As a result, some software may still be expecting its pre-registration value X-CINNAMON, such as Qt[6]. Hyprland is informally recognized for Hyprland.\n\n- Cinnamon was registered later than the rest of the desktop environments. As a result, some software may still be expecting its pre-registration value X-CINNAMON, such as Qt[6].\n- Hyprland is informally recognized for Hyprland.\n\n- XDG_SESSION_DESKTOP is similar to XDG_CURRENT_DESKTOP, but only permits a single string. Despite its name, it is not standardized by freedesktop.org.\n\n- DE is a legacy variable indicating the desktop environment being used. There is no central documentation for what possible values are, but xdg-utils provides a reference for many desktop environments.\n\n- DESKTOP_SESSION is another legacy variable, similar to DE but less common. It may be a path to the session's desktop entry, in /usr/share/xsessions/ [7].\n\n- WINDOW_MANAGER is a variable sometimes used to choose the window manager to be used in a desktop environment, as opposed to the other variables here which are set by the already chosen display manager or desktop environment, for other programs to read.\n\n- PATH contains a colon-separated list of directories in which your system looks for executable files. When a regular command (e.g. ls, systemctl or pacman) is interpreted by the shell (e.g. bash or zsh), the shell looks for an executable file with the same name as your command in the listed directories, and executes it. To run executables that are not listed in PATH, a relative or absolute path to the executable must be given, e.g. ./a.out or /bin/ls.\n\n- HOME contains the path to the home directory of the current user. This variable can be used by applications to associate configuration files and such like with the user running it.\n\n- PWD contains the path to the working directory.\n\n- OLDPWD contains the path to the previous working directory, that is, the value of PWD before last cd was executed.\n\n- TERM contains the type of the running terminal, e.g. xterm-256color. It is used by programs running in the terminal that wish to use terminal-specific capabilities.\n\n- MAIL contains the location of incoming email. The traditional setting is /var/spool/mail/$LOGNAME.\n\n- ftp_proxy and http_proxy contains FTP and HTTP proxy server, respectively:\n\n```\nftp_proxy=\"ftp://192.168.0.1:21\"\nhttp_proxy=\"http://192.168.0.1:80\"\n```\n\n- MANPATH contains a colon-separated list of directories in which man searches for the man pages.\n\n- INFODIR contains a colon-separated list of directories in which the info command searches for the info pages, e.g., /usr/share/info:/usr/local/share/info\n\n- TZ can be used to to set a time zone different to the system zone for a user. The zones listed in /usr/share/zoneinfo/ can be used as reference, for example TZ=\":/usr/share/zoneinfo/Pacific/Fiji\". When pointing the TZ variable to a zoneinfo file, it should start with a colon per the GNU manual.\n\n"
    },
    {
      "title": "Default programs",
      "level": 3,
      "content": "- SHELL contains the path to the user's preferred shell. Note that this is not necessarily the shell that is currently running. In the event that it has no value, Bash will automatically set this variable to the user's login shell as defined in /etc/passwd or to /bin/sh if this cannot be determined.\n\n- PAGER contains command to run the program used to list the contents of files, e.g., /bin/less.\n\n- EDITOR contains the command to run the lightweight program used for editing files, e.g., /usr/bin/nano. For example, you can write an interactive switch between gedit under X or nano, in this example:\n\n```\n[ -n \"$DISPLAY\" ] && export EDITOR=gedit || export EDITOR=nano\n```\n\n- VISUAL contains command to run the full-fledged editor that is used for more demanding tasks, such as editing mail (e.g., vi, vim, emacs etc).\n\n- BROWSER contains the path to the web browser. Helpful to set in an interactive shell configuration file so that it may be dynamically altered depending on the availability of a graphic environment, such as X:\n\n```\n[ -n \"$DISPLAY\" ] && export BROWSER=firefox || export BROWSER=links\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Gentoo:Handbook:X86/Working/EnvVar\n- Ubuntu Community Wiki - Environment Variables\n\n"
    }
  ]
}