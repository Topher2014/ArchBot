{
  "title": "Lets encrypt",
  "url": "https://wiki.archlinux.org/title/Lets_encrypt",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Certbot is Electronic Frontier Foundation's ACME client, which is written in Python and provides conveniences like automatic web server configuration and a built-in webserver for the HTTP challenge. Certbot is recommended by Let's Encrypt.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the certbot package.\n\nPlugins are available for automated configuration and installation of the issued certificates in web servers:\n\n- The Nginx plugin can be installed with the certbot-nginx package.\n- The Apache HTTP Server plugin can be installed with the certbot-apache package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Consult the Certbot documentation for more information about creation and usage of certificates.\n\n"
    },
    {
      "title": "Plugins",
      "level": 3,
      "content": "Note: **backup** \n\n"
    },
    {
      "title": "Nginx",
      "level": 4,
      "content": "The plugin certbot-nginx provides an automatic configuration for nginx. This plugin will try to detect the configuration setup for each domain. The plugin adds extra configuration recommended for security, settings for certificate use, and paths to Certbot certificates. See #Managing Nginx server blocks for examples.\n\nFirst time setup of server-blocks:\n\n```\n# certbot --nginx\n```\n\nTo renew certificates:\n\n```\n# certbot renew\n```\n\nTo change certificates without modifying nginx configuration files:\n\n```\n# certbot --nginx certonly\n```\n\nSee Certbot-Nginx on Arch Linux for more information and #Automatic renewal to keep installed certificates valid.\n\nThe following example may be used in all server blocks when managing these files manually:\n\n```\n/etc/nginx/sites-available/example\n```\n\n```\nserver {\n  listen 443 ssl http2;\n  listen [::]:443 ssl http2; # Listen on IPv6\n  ssl_certificate /etc/letsencrypt/live/domain/fullchain.pem; # managed by Certbot\n  ssl_certificate_key /etc/letsencrypt/live/domain/privkey.pem; # managed by Certbot\n  include /etc/letsencrypt/options-ssl-nginx.conf;\n  ..\n}\n```\n\nSee nginx#TLS for more information.\n\nIt is also possible to create a separated configuration file and include it in each server block:\n\n```\n/etc/nginx/conf/001-certbot.conf\n```\n\n```\nssl_certificate /etc/letsencrypt/live/domain/fullchain.pem; # managed by Certbot\nssl_certificate_key /etc/letsencrypt/live/domain/privkey.pem; # managed by Certbot\ninclude /etc/letsencrypt/options-ssl-nginx.conf;\n```\n\n```\n/etc/nginx/sites-available/example\n```\n\n```\nserver {\n  listen 443 ssl http2;\n  listen [::]:443 ssl http2; # Listen on IPv6\n  include conf/001-certbot.conf;\n  ..\n}\n```\n\n"
    },
    {
      "title": "Apache",
      "level": 4,
      "content": "The plugin certbot-apache provides an automatic configuration for the Apache HTTP Server. This plugin will try to detect the configuration setup for each domain. The plugin adds extra configuration recommended for security, settings for certificate use, and paths to Certbot certificates. See #Managing Apache virtual hosts for examples.\n\nFirst time setup of virtual hosts:\n\n```\n# certbot --apache\n```\n\nTo renew certificates:\n\n```\n# certbot renew\n```\n\nTo change certificates without modifying Apache configuration files:\n\n```\n# certbot --apache certonly\n```\n\nSee Certbot-Apache on Arch Linux for more information and #Automatic renewal to keep installed certificates valid.\n\nThe following example may be used in all virtual hosts when managing these files manually:\n\n```\n/etc/httpd/conf/extra/001-certbot.conf\n```\n\n```\n<IfModule mod_ssl.c>\n<VirtualHost *:443>\n\nInclude /etc/letsencrypt/options-ssl-apache.conf\nSSLCertificateFile /etc/letsencrypt/live/'domain'/fullchain.pem\nSSLCertificateKeyFile /etc/letsencrypt/live/'domain'/privkey.pem\n\n</VirtualHost>\n</IfModule>\n```\n\nWhen the VirtualHost above is automatically generated by certbot-apache, it looks like sometimes the 'Include' line may appear after the two 'SSLCertificate' lines. When this is the case, accessing the virtualHost from a browser using http wont work with an error SSL_PROTOCOL_ERROR. If this happens, simply put the Include line above the two SSLCertificates lines and restart httpd.\n\n```\n/etc/httpd/conf/httpd.conf\n```\n\n```\n<IfModule mod_ssl.c>\n  Listen 443\n  </IfModule>\n\n  Include conf/extra/001-certbot.conf\n  ..\n```\n\nSee Apache HTTP Server#TLS for more information.\n\n"
    },
    {
      "title": "Webroot",
      "level": 3,
      "content": "Note: **HTTP on port 80** \n\n- The Webroot method requires HTTP on port 80 for Certbot to validate.\n- The Server Name must match that of its corresponding DNS.\n- Permissions may need to be altered on the host to allow read-access to http://domain.tld/.well-known.\n\nWhen using the webroot method the Certbot client places a challenge response inside /path/to/domain.tld/html/.well-known/acme-challenge/ which is used for validation.\n\nThe use of this method is recommended over a manual install; it offers automatic renewal and easier certificate management. However the usage of #Plugins may be the preferred since it allows automatic configuration and installation.\n\n"
    },
    {
      "title": "Mapping ACME-challenge requests",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nManagement of can be made easier by mapping all HTTP-requests for .well-known/acme-challenge to a single folder, e.g. /var/lib/letsencrypt.\n\nThe path has then to be writable for Cerbot and the web server (e.g. nginx or Apache HTTP Server running as user http):\n\n```\n# mkdir -p /var/lib/letsencrypt/.well-known\n# chgrp http /var/lib/letsencrypt\n# chmod g+s /var/lib/letsencrypt\n```\n\nCreate a file containing the location block and include this inside a server block:\n\n```\n/etc/nginx/conf.d/letsencrypt.conf\n```\n\n```\nlocation ^~ /.well-known/acme-challenge/ {\n  allow all;\n  root /var/lib/letsencrypt/;\n  default_type \"text/plain\";\n  try_files $uri =404;\n}\n```\n\nExample of a server configuration:\n\n```\n/etc/nginx/servers-available/domain.conf\n```\n\n```\nserver {\n  server_name domain.tld\n   ..\n  include conf.d/letsencrypt.conf;\n}\n```\n\nCreate the file /etc/httpd/conf/extra/httpd-acme.conf:\n\n```\n/etc/httpd/conf/extra/httpd-acme.conf\n```\n\n```\nAlias /.well-known/acme-challenge/ \"/var/lib/letsencrypt/.well-known/acme-challenge/\"\n<Directory \"/var/lib/letsencrypt/\">\n    AllowOverride None\n    Options MultiViews SymLinksIfOwnerMatch IncludesNoExec\n    Require method GET POST OPTIONS\n</Directory>\n```\n\nIncluding this in /etc/httpd/conf/httpd.conf:\n\n```\n/etc/httpd/conf/httpd.conf\n```\n\n```\nInclude conf/extra/httpd-acme.conf\n```\n\n"
    },
    {
      "title": "Obtain certificate(s)",
      "level": 4,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nRequest a certificate for domain.tld using /var/lib/letsencrypt/ as public accessible path:\n\n```\n# certbot certonly --email email@example.com --webroot -w /var/lib/letsencrypt/ -d domain.tld\n```\n\nTo add a (sub)domain, include all registered domains used on the current setup:\n\n```\n# certbot certonly --email email@example.com --webroot -w /var/lib/letsencrypt/ -d domain.tld,sub.domain.tld\n```\n\nTo renew (all) the current certificate(s):\n\n```\n# certbot renew\n```\n\nSee #Automatic renewal as alternative approach.\n\n"
    },
    {
      "title": "Manual",
      "level": 3,
      "content": "If there is no plugin for your web server, use the following command:\n\n```\n# certbot certonly --manual\n```\n\nWhen preferring to use DNS challenge (TXT record) use:\n\n```\n# certbot certonly --manual --preferred-challenges dns\n```\n\nThis will automatically verify your domain and create a private key and certificate pair. These are placed in /etc/letsencrypt/archive/your.domain/ and symlinked from /etc/letsencrypt/live/your.domain/.\n\nYou can then manually configure your web server to reference the private key, certificate and full certificate chain in the symlinked directory.\n\n"
    },
    {
      "title": "DNS challenge",
      "level": 3,
      "content": "For servers which are not exposed to public internet, DNS-01 challenge can be used to verify domain ownership\n\nInstall the certbot plugin for your dns provider certbot-dns-*. Below example shows for cloudflare using certbot-dns-cloudflare.\n\nCreate a Credential file\n\n```\n/etc/certbot-cloudflare.creds.ini\n```\n\n```\ndns_cloudflare_api_token = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n```\n\nGet certificate.\n\n```\n# chmod 600 /etc/certbot-cloudflare.creds.ini\n# certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/certbot-cloudflare.creds.ini -d domain.tld\n```\n\ncertbot-renew.service will renew automatically using the above credential file #Automatic renewal. See docs for obtaining api token and other options.\n\n"
    },
    {
      "title": "systemd",
      "level": 4,
      "content": "certbot comes with a systemd certbot-renew.service, which attempts to renew certificates that expire in less than 30 days. If all certificates are not due for renewal, this service does nothing.\n\nIf you do not use a plugin to manage the web server configuration automatically, the web server has to be reloaded manually to reload the certificates each time they are renewed. This can be done by adding --post-hook \"systemctl reload nginx.service\" to the ExecStart command [1]. Of course use httpd.service instead of nginx.service if appropriate. Additional services can be added to the systemctl command as needed, e.g. systemctl reload httpd dovecot postfix.\n\nEnable and start certbot-renew.timer to check for certificate renewal twice a day, including a randomized delay so that everyone's requests for renewal will be spread over the day to lighten the Let's Encrypt server load [2].\n\n"
    },
    {
      "title": "Automatic renewal for wildcard certificates",
      "level": 3,
      "content": "The process is fairly simple. To issue a wildcard certificate, you have to do it via a DNS challenge request, using the ACMEv2 protocol.\n\nWhile issuing a certificate manually is easy, it is not straight forward for automation. The DNS challenge represents a TXT record, given by certbot, which has to be set manually in the domain zone file.\n\nYou will need to update the zone file upon every renew. To avoid doing that manually, you may use RFC 2136 for which certbot has a plugin packaged in certbot-dns-rfc2136. You will also need to configure your DNS server to allow dynamic updates for TXT records.\n\n"
    },
    {
      "title": "Configure BIND for rfc2136",
      "level": 4,
      "content": "Generate a TSIG secret key:\n\n```\n$ tsig-keygen -a HMAC-SHA512 example-key\n```\n\nand add it in the configuration file:\n\n```\n/etc/named.conf\n```\n\n```\n...\nzone \"domain.ltd\" IN {\n        ...\n        // this is for certbot\n        update-policy {\n                grant example-key name _acme-challenge.domain.ltd. txt;\n        };\n        ...\n};\n\nkey \"example-key\" {\n        algorithm hmac-sha512;\n        secret \"a_secret_key\";\n};\n...\n```\n\nRestart named.service.\n\n"
    },
    {
      "title": "Configure certbot for rfc2136",
      "level": 4,
      "content": "Install certbot-dns-rfc2136, then create a configuration file for it.\n\n```\n/etc/letsencrypt/rfc2136.ini\n```\n\n```\ndns_rfc2136_server = IP.ADD.RE.SS\ndns_rfc2136_name = example-key\ndns_rfc2136_secret = INSERT_KEY_WITHOUT_QUOTES\ndns_rfc2136_algorithm = HMAC-SHA512\n```\n\nSince the file contains a copy of the secret key, secure it with chmod by removing the group and others permissions.\n\nTest what we did:\n\n```\n# certbot certonly --dns-rfc2136 --force-renewal --dns-rfc2136-credentials /etc/letsencrypt/rfc2136.ini --server https://acme-v02.api.letsencrypt.org/directory --email example@domain.ltd --agree-tos --no-eff-email -d 'domain.ltd' -d '*.domain.ltd'\n```\n\nIf you pass the validation successfully and receive certificates, then you are good to go with automating certbot. Otherwise, something went wrong and you need to debug your setup. It basically boils down to running certbot renew from now on, see #Automatic renewal.\n\n"
    },
    {
      "title": "Deploying certificates to applications",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\ncertbot saves the certificates under /etc/letsencrypt/live. This directory can only be read by root user. A deploy hook script can be used to copy the certificates to app directory when they are renewed.\n\nExample script to copy certs to app's state directory with correct permissions and restart app service. Create below script with executable permissions.\n\n```\n/etc/letsencrypt/renewal-hooks/deploy/myapp_cert_copy.sh\n```\n\n```\n#!/bin/sh\nset -eu\n\nif [ \"$RENEWED_DOMAINS\" = \"myapp.mydomain.com\" ]\nthen\n\tapp=myapp\n\tappuser=$app\n\tcertpath=\"/var/lib/$app/certs\"\n\n\tmkdir -p \"$certpath\"\n\tchmod 750 \"$certpath\"\n\n\tchown $appuser:$appuser \"$certpath\"\n\tinstall -o \"$appuser\" -g \"$appuser\" -m 444 \"$RENEWED_LINEAGE/fullchain.pem\" -t \"$certpath\"\n\tinstall -o \"$appuser\" -g \"$appuser\" -m 400 \"$RENEWED_LINEAGE/privkey.pem\" -t \"$certpath\"\n\n\tsystemctl restart $app.service\n\techo \"$(date) Renewed and deployed certificates for $app\" >> /var/log/cert-renew.log\nfi\n```\n\nIf certificate was already generated, the deploy script can be run using this command to copy the certs without regenerating new certificates:\n\n```\n$ certbot certonly -d myapp.mydomain.com --run-deploy-hooks --dry-run\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Acme.sh alternative ACME client supporting Let's Encrypt\n- Transport Layer Security#ACME clients\n- EFF's Certbot documentation\n- Let's Encrypt – List of ACME clients\n\n"
    }
  ]
}