{
  "title": "Mask",
  "url": "https://wiki.archlinux.org/title/Mask",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Help:Browsing\n- Help:Style\n\nBecause the vast majority of the ArchWiki contains indications that may need clarification for users new to Arch Linux (or GNU/Linux in general), this rundown of basic procedures was written both to avoid confusion in the assimilation of the articles and to deter repetition in the content itself.\n\n"
    },
    {
      "title": "Organization",
      "level": 2,
      "content": "Most articles on the ArchWiki do not attempt to provide a holistic introduction to a single topic; they are instead written in adherence to the \"Don't Repeat Yourself\" principle, under the assumption that the user will seek out and read any supporting material that they do not yet understand. Where possible, such supporting material is indicated in the article via special formatting, see #Formatting.\n\nBecause of this organization, it may be necessary to examine several related sources in order to fully understand an ArchWiki article. In particular, users who are new to Arch (or GNU/Linux in general) should expect to end up reading a great number of articles even when solving simple problems. It is especially important to study the supporting material before seeking additional help from other users.\n\n"
    },
    {
      "title": "Formatting",
      "level": 2,
      "content": "- link to a section in the current article: #Organization\n- link to another ArchWiki article\n- link to an external web page\n- link to a man page: intro(1)\n- a man page that's only available offline: foo(1)\n- link to a package in the official repositories: foobar\n- link to a package in the AUR: foobarAUR\n\n"
    },
    {
      "title": "Root, regular user or another user",
      "level": 2,
      "content": "Some lines are written like so:\n\n```\n# mkinitcpio -p linux\n```\n\nOthers have a different prefix:\n\n```\n$ makepkg -s\n```\n\nThe numeral or hash sign (#) indicates that the command needs to be run as root, whereas the dollar sign ($) shows that the command should be run as a regular user.\n\nWhen the commands need to run as a specific user, they will be prefixed by the username in square brackets, for example:\n\n```\n[postgres]$ initdb -D /var/lib/postgres/data\n```\n\nThis means you should use a privilege elevation tool, e.g. with sudo:\n\n```\n$ sudo -u postgres initdb -D /var/lib/postgres/data\n```\n\nA notable exception to watch out for:\n\n```\n# This alias makes ls colorize the listing\nalias ls='ls --color=auto'\n```\n\nIn this example, the context surrounding the numeral sign communicates that this is not to be run as a command; it should be edited into a file instead. So in this case, the numeral sign denotes a comment. A comment can be explanatory text that will not be interpreted by the associated program. Bash scripts denotation for comments happens to coincide with the root PS1.\n\nAfter further examination, \"give away\" signs include the uppercase character following the # sign. Usually, Unix commands are not written this way and most of the time they are short abbreviations instead of full-blown English words (e.g., Copy becomes cp).\n\nRegardless, most articles make this easy to discern by notifying the reader:\n\nAppend to ~/path/to/file:\n\n```\n# This alias makes ls colorize the listing\nalias ls='ls --color=auto'\n```\n\n"
    },
    {
      "title": "Append, add, create, edit",
      "level": 2,
      "content": "When prompted to append to, add to, create, or edit one or more files, it is implied that you should use one of the following methods.\n\nTo create or modify multiline files, it is suggested to use a text editor. For example, using the nano command to edit the file /etc/bash.bashrc is:\n\n```\n# nano /etc/bash.bashrc\n```\n\nTo create or overwrite a file from a string, it may be simpler to use output redirection. The following example creates or overwrites the contents of the file /etc/hostname with the text myhostname.\n\n```\n# echo myhostname > /etc/hostname\n```\n\nOutput redirection can also be used to append a string to a file. The following example appends the text [custom-repo] to the file /etc/pacman.conf.\n\n```\n# echo \"[custom-repo]\" >> /etc/pacman.conf\n```\n\nWhen prompted to create directories, use the mkdir command:\n\n```\n# mkdir /mnt/boot\n```\n\n"
    },
    {
      "title": "Make executable",
      "level": 3,
      "content": "After creating a file, if it is meant to be run as a script (whether manually or called by another program), it needs to be set as executable, for example with:\n\n```\n$ chmod +x script\n```\n\nSee chmod. Some applications such as file managers may provide graphical interfaces to do the same.\n\n"
    },
    {
      "title": "Source",
      "level": 2,
      "content": "Some applications, notably command-line shells, use scripts for their configuration: after modifying them, they must be sourced in order for the changes to be applied. In the case of bash, for example, this is done by running (you can also replace source with .):\n\n```\n$ source ~/.bashrc\n```\n\nWhen the wiki suggests modifying such a configuration script, it will not explicitly remind you to source the file, and only in some cases will it point to this section with a reminder link.\n\n"
    },
    {
      "title": "Installation of packages",
      "level": 2,
      "content": "When an article invites you to install some packages in the conventional way, it will not indicate the detailed instructions to do so; instead, it will simply mention the names of the packages to be installed.\n\nThe subsections below give an overview of the generic installation procedures depending on the package type.\n\n"
    },
    {
      "title": "Official packages",
      "level": 3,
      "content": "For packages from the official repositories, you will read something like:\n\nThis means that you have to run:\n\n```\n# pacman -S foobar\n```\n\nThe pacman article contains detailed explanations to deal with package management in Arch Linux proficiently.\n\n"
    },
    {
      "title": "Arch User Repository",
      "level": 3,
      "content": "For packages from the Arch User Repository (AUR), you will read something like:\n\nThis means that in general you have to follow the foobarAUR link, download the PKGBUILD archive, extract it, verify the content and finally run, in the same folder:\n\n```\n$ makepkg -si\n```\n\nThe Arch User Repository article contains all the detailed explanations and best practices to deal with AUR packages.\n\n"
    },
    {
      "title": "Control of systemd units",
      "level": 2,
      "content": "When an article invites to start, enable, etc., some systemd unit (e.g. a service), it will not indicate the detailed instructions to do so, but instead you will read something like:\n\nThis means that you have to run:\n\n```\n# systemctl start example.service\n```\n\nA notable command that does not follow this exact pattern is systemctl daemon-reload which will be called without arguments.\n\nThe systemd#Using units section contains structured list of available actions (like start, enable, enable and start, etc.) with their corresponding systemctl commands.\n\n"
    },
    {
      "title": "System-wide versus user-specific configuration",
      "level": 2,
      "content": "It is important to remember that there are two different kinds of configurations on a GNU/Linux system. System-wide configuration affects all users. Since system-wide settings are generally located in the /etc directory, root privileges are required in order to alter them. For example, to apply a Bash setting that affects all users, /etc/bash.bashrc should be modified.\n\nUser-specific configuration affects only a single user. Dotfiles are used for user-specific configuration. For example, the file ~/.bashrc is the user-specific configuration file. The idea is that each user can define their own settings, such as aliases, functions and other interactive features like the prompt, without affecting other users' preferences.\n\n"
    },
    {
      "title": "Common shell files",
      "level": 3,
      "content": "Bash and other Bourne-compatible shells, such as Zsh, also source files depending on whether the shell is a login shell or an interactive shell. See Bash#Configuration files and Zsh#Startup/Shutdown files for details.\n\n"
    },
    {
      "title": "Pseudo-variables in code examples",
      "level": 2,
      "content": "Some code blocks may contain so-called pseudo-variables, which, as the name says, are not actual variables used in the code. Instead they are generic placeholders and have to be manually replaced with system-specific configuration items before the code may be run or parsed. Common shells such as bash and zsh provide tab-completion to auto-complete parameters for common commands such as systemctl.\n\nIn the articles that comply with Help:Style/Formatting and punctuation, pseudo-variables are formatted in italics. For example:\n\n- Enable the dhcpcd@interface_name.service for the network interface identified from the output of the ip link command.\n\nIn this case interface_name is used as a pseudo-variable placeholder in a systemd template unit. All systemd template units, identifiable by the @ sign, require a system-specific configuration item as argument. See systemd#Using units.\n\n- The command dd if=data_source of=/dev/sdX bs=sector_size count=sector_number seek=partitions_start_sector can be run as root to wipe a partition with the specific parameters.\n\nIn this case the pseudo-variables are used to describe the parameters that must be substituted for them. Details on how to gather them are elaborated on in the section Securely wipe disk#Calculate blocks to wipe manually, which features the command.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nIn case of file examples, pasting pseudo-variables in real configuration files might break the programs that use them.\n\n"
    },
    {
      "title": "Ellipses",
      "level": 3,
      "content": "In most cases, ellipses (...) are not part of the actual file content or code output, and instead represent omitted or optional text that is not relevant for the discussed subject.\n\nFor example HOOKS=\"... encrypt ... filesystems ...\" or:\n\n```\n/etc/X11/xorg.conf.d/50-synaptics.conf\n```\n\n```\nSection \"InputClass\"\n    ...\n    Option      \"CircularScrolling\"          \"on\"\n    Option      \"CircScrollTrigger\"          \"0\"\n    ...\nEndSection\n```\n\nBe aware though that, in a few instances, ellipses may be a meaningful part of the code syntax: attentive users should be able to recognize these cases by the context.\n\n"
    }
  ]
}