{
  "title": "Abs",
  "url": "https://wiki.archlinux.org/title/Abs",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Arch packaging standards\n- Arch User Repository\n- Creating packages\n- Kernel/Arch build system\n- makepkg\n- Official repositories\n- pacman\n- PKGBUILD\n- Patching packages\n\nThe Arch build system (ABS) is a system for building and packaging software from source code. While pacman is the specialized Arch tool for binary package management, the Arch build system is a collection of tools for compiling source into installable .pkg.tar.zst packages.\n\nThe Arch build system can be compared to ports for *BSD, which automates the process of building software from source code. The system uses a port to download, unpack, patch, compile, and install the given software. A port is merely a small directory on the user's computer, named after the corresponding software to be installed, that contains a few files with the instructions for building and installing the software from source. This makes installing software as simple as typing make or make install clean within the port's directory.\n\nThe Arch build system is based on a similar concept. It comprises a collection of git repositories for every package available in Arch Linux. Each repository contains a PKGBUILD file (and sometimes other files), and does not contain the software source nor binary. By running makepkg inside a directory, the software sources are downloaded, the software is compiled, and then packaged within the build directory. Then you can use pacman to install the package.\n\n"
    },
    {
      "title": "Toolchain",
      "level": 2,
      "content": "The Arch build system includes and relies on several components and tools that are used in the process of building packages from source:\n\n"
    },
    {
      "title": "Repository structure",
      "level": 3,
      "content": "Each package has its own source repository in the archlinux/packaging/packages namespace on the Arch Linux GitLab instance. Each repository contains the PKGBUILD and files used in official builds. Also some files which are used by the developers for the build process can be found there.\n\nFor example, the tree for acl looks like this:\n\n```\nacl\n├── keys\n│   └── pgp\n│       ├── 259B3792B3D6D319212CC4DCD5BF9FEB0313653A.asc\n│       ├── 600CD204FBCEA418BD2CA74F154343260542DF34.asc\n│       └── B902B5271325F892AC251AD441633B9FE837F581.asc\n└── PKGBUILD\n```\n\nThe source code for the package is not present in the directory. Instead, the PKGBUILD contains a URL that will download the source code when the package is built.\n\nWhen an official package is built, it is released into one of the official repositories: core, extra, multilib, or some testing repository first. These repositories are binary and not hosted on GitLab, but rather served by mirrors.\n\n"
    },
    {
      "title": "Use cases",
      "level": 2,
      "content": "The Arch build system automates certain tasks related to compilation from source. Its use cases are:\n\n- Any use case that requires you to compile or recompile a package.\n- Build official binary packages for Arch Linux by developers and packagers.\n- Make and install new packages from source of software for which no packages are yet available (see Creating packages).\n- Customize existing packages to fit your needs (e.g. enabling or disabling options, patching).\n- Rebuild your entire system using your compiler flags, \"à la FreeBSD\".\n- Cleanly build and install your own custom kernel (see Kernel compilation).\n- Get kernel modules working with a custom kernel.\n- Easily compile and install a newer, older, beta, or development version of an Arch package by editing the version number in the PKGBUILD.\n\n"
    },
    {
      "title": "Retrieve PKGBUILD source",
      "level": 3,
      "content": "To retrieve the PKGBUILD file required to build a certain package from source, you can either use the pkgctl tool or directly use Git.\n\n"
    },
    {
      "title": "Using the pkgctl tool",
      "level": 4,
      "content": "As a precondition, install the devtools package. pkgctl is a tool to help work with building source files for Arch Linux packages.\n\nTo clone the git repository that contains the latest build files for the package pkgname using pkgctl, the following command is used:\n\n```\n$ pkgctl repo clone pkgname\n```\n\nNote that here, build source files refers to PKGBUILD, possibly with some few other required files, such as keys. That is, the essential files that are required for Arch Linux build system. It does not refer to the source files of the package that were written by the team that authored the package, such as C or Python files.\n\nThis will give you not only the current source build files, but also their previous versions. Furthermore, you can use all other git commands to checkout an older version of the package or to track custom changes.\n\nIf you want to get a specific version of a package you can use something like the following:\n\n```\n$ pkgctl repo clone --switch=\"2:1.19.5-1\" go\n```\n\nDo read pkgctl-repo-clone(1) for more insight, and for the other commands available.\n\n"
    },
    {
      "title": "Using git directly",
      "level": 4,
      "content": "Use the following git command to clone a package:\n\n```\n$ git clone https://gitlab.archlinux.org/archlinux/packaging/packages/pkgname.git\n```\n\nFor example, to copy the Apache build files:\n\n```\n$ git clone https://gitlab.archlinux.org/archlinux/packaging/packages/apache.git\n```\n\n"
    },
    {
      "title": "Build package",
      "level": 3,
      "content": "Configure makepkg for building packages from the PKGBUILDs you have checked out, as explained in makepkg#Configuration.\n\nThen, copy the directory containing the PKGBUILD you wish to modify to a new location. Make the desired modifications there and use makepkg there as described in makepkg#Usage to create and install the new package.\n\n"
    },
    {
      "title": "Preserve modified packages",
      "level": 3,
      "content": "Updating the system with pacman will replace a modified package with the package of the same name from the official repositories. See the following instructions for how to avoid this.\n\nInsert a group array into the PKGBUILD, and add the package to a group called modified.\n\n```\nPKGBUILD\n```\n\n```\ngroups=('modified')\n```\n\nAdd this group to the section IgnoreGroup in /etc/pacman.conf.\n\n```\n/etc/pacman.conf\n```\n\n```\nIgnoreGroup = modified\n```\n\nIf new versions are available in the official repositories during a system update, pacman prints a note that it is skipping this update because it is in the IgnoreGroup section. At this point, the modified package should be rebuilt to avoid partial upgrades.\n\n"
    }
  ]
}