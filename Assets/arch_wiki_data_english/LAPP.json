{
  "title": "LAPP",
  "url": "https://wiki.archlinux.org/title/LAPP",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- PhpPgAdmin\n\nPostgreSQL is an open source, community driven, standard compliant object-relational database system.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the postgresql package. It will also create a system user called postgres.\n\nYou can now switch to the postgres user using a privilege elevation program.\n\n"
    },
    {
      "title": "Initial configuration",
      "level": 2,
      "content": "Before PostgreSQL can function correctly, the database cluster must be initialized:\n\n```\n[postgres]$ initdb -D /var/lib/postgres/data\n```\n\nWhere -D is the default location where the database cluster must be stored (see #Change default data directory if you want to use a different one). initdb accepts a number of extra arguments:\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n- By default, the locale and the encoding for the database cluster are derived from your current environment (using $LANG value). If this is not what you want, you can override the defaults using --locale=locale (where locale is to be chosen amongst the system's available locales) and --encoding=encoding (which must match the chosen locale). (Once the database is up, you can check which values were used with [postgres]$ psql -l.) Note: Using a locale other than C.UTF-8, C, POSIX or ucs_basic can result in a collation version mismatch that will require reindexing if the library providing the locale (glibc or icu) gets updated.\n- If your data directory resides on a file system without data checksumming, you may wish to enable PostgreSQL's built-in checksumming for increased integrity guarantees - add the --data-checksums argument to do so. Read #Enable data checksumming for more information. (Once the database is up, you can check if it is enabled with [postgres]$ psql --tuples-only -c \"SHOW data_checksums\".)\n\n- The trust authentication method is used by default, meaning that anyone on the host can connect as any database user. You can use --auth-local=peer --auth-host=scram-sha-256 for safer authentication methods.\n- The -c/--set option can be used to set any postgresql.conf parameter avoiding the need to manually edit postgresql.conf.\n- For more options, see initdb --help and official documentation.\n\nExample:\n\n```\n[postgres]$ initdb --locale=C.UTF-8 --encoding=UTF8 -D /var/lib/postgres/data --data-checksums\n```\n\nMany lines should now appear on the screen with several ending by ... ok:\n\n```\nThe files belonging to this database system will be owned by user \"postgres\".\nThis user must also own the server process.\n\nThe database cluster will be initialized with locale \"C.UTF-8\".\nThe default text search configuration will be set to \"english\".\n\nData page checksums are enabled.\n\ncreating directory /var/lib/postgres/data ... ok\ncreating subdirectories ... ok\nselecting dynamic shared memory implementation ... posix\nselecting default max_connections ... 100\nselecting default shared_buffers ... 128MB\nselecting default time zone ... UTC\ncreating configuration files ... ok\nrunning bootstrap script ... ok\nperforming post-bootstrap initialization ... ok\nsyncing data to disk ... ok\n\ninitdb: warning: enabling \"trust\" authentication for local connections\ninitdb: hint: You can change this by editing pg_hba.conf or using the option -A, or --auth-local and --auth-host, the next time you run initdb.\n\nSuccess. You can now start the database server using:\n\n    pg_ctl -D /var/lib/postgres/data -l logfile start\n```\n\nIf these are the kind of lines you see, then the process succeeded. Return to the regular user using exit.\n\n- To read more about this initdb warning, see #Restricts access rights to the database superuser by default.\n- If the database resides on a Btrfs file system, you should consider disabling Copy-on-Write for the directory before creating any database.\n- If the database resides on a ZFS file system, you should consult ZFS#Databases before creating any database.\n\nFinally, start and enable the postgresql.service.\n\n"
    },
    {
      "title": "Create your first database/user",
      "level": 2,
      "content": "Become the postgres user. Add a new database role/user using the createuser command:\n\n```\n[postgres]$ createuser --interactive\n```\n\nCreate a new database over which the above user has read/write privileges using the createdb command (execute this command from your login shell if the database user has the same name as your Linux user, otherwise add -O database-username to the following command):\n\n```\n$ createdb myDatabaseName\n```\n\n"
    },
    {
      "title": "Access the database shell",
      "level": 3,
      "content": "Become the postgres user. Start the primary database shell, psql, where you can do all your creation of databases/tables, deletion, set permissions, and run raw SQL commands. Use the -d option to connect to the database you created (without specifying a database, psql will try to access a database that matches your username).\n\n```\n[postgres]$ psql -d myDatabaseName\n```\n\nSome helpful commands:\n\nGet help:\n\n```\n=> \\help\n```\n\nList all databases:\n\n```\n=> \\l\n```\n\nConnect to a particular database:\n\n```\n=> \\c database\n```\n\nList all users and their permission levels:\n\n```\n=> \\du\n```\n\nShow summary information about all tables in the current database:\n\n```\n=> \\dt\n```\n\nExit/quit the psql shell:\n\n```\n=> \\q\n```\n\nor press Ctrl+d.\n\nThere are of course many more meta-commands, but these should help you get started. To see all meta-commands run:\n\n```\n=> \\?\n```\n\n"
    },
    {
      "title": "Optional configuration",
      "level": 2,
      "content": "The PostgreSQL database server configuration file is postgresql.conf. This file is located in the data directory of the server, typically /var/lib/postgres/data. This folder also houses the other main configuration files, including the pg_hba.conf which defines authentication settings, for both local users and other hosts ones.\n\n"
    },
    {
      "title": "Restricts access rights to the database superuser by default",
      "level": 3,
      "content": "The defaults pg_hba.conf allow any local user to connect as any database user, including the database superuser. This is likely not what you want, so in order to restrict global access to the postgres user, change the following line:\n\n```\n/var/lib/postgres/data/pg_hba.conf\n```\n\n```\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# \"local\" is for Unix domain socket connections only\nlocal   all             all                                     trust\n```\n\nTo:\n\n```\n/var/lib/postgres/data/pg_hba.conf\n```\n\n```\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# \"local\" is for Unix domain socket connections only\nlocal   all             postgres                                peer\n```\n\nYou might later add additional lines depending on your needs or software ones.\n\n"
    },
    {
      "title": "Require password for login",
      "level": 3,
      "content": "Edit /var/lib/postgres/data/pg_hba.conf and set the authentication method for each user (or all to affect all users) to scram-sha-256:\n\n```\n/var/lib/postgres/data/pg_hba.conf\n```\n\n```\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# \"local\" is for Unix domain socket connections only\nlocal   all             user                                    scram-sha-256\n```\n\nRestart postgresql.service, and then re-add each user's password using ALTER USER user WITH ENCRYPTED PASSWORD 'password';.\n\n"
    },
    {
      "title": "Configure PostgreSQL to be accessible exclusively through UNIX Sockets",
      "level": 3,
      "content": "When initially creating the cluster, append -c listen_addresses='' to the initdb command.\n\nFor an existing cluster, edit postgresql.conf and in the connections and authentication section set:\n\n```\n/var/lib/postgres/data/postgresql.conf\n```\n\n```\nlisten_addresses = ''\n```\n\nThis will disable network listening completely. After this you should restart postgresql.service for the changes to take effect.\n\n"
    },
    {
      "title": "Configure PostgreSQL to be accessible from remote hosts",
      "level": 3,
      "content": "In the connections and authentications section, set the listen_addresses line to your needs:\n\n```\n/var/lib/postgres/data/postgresql.conf\n```\n\n```\nlisten_addresses = 'localhost,my_local_ip_address'\n```\n\nYou can use '*' to listen on all available addresses.\n\nThen add a line like the following to the authentication config:\n\n```\n/var/lib/postgres/data/pg_hba.conf\n```\n\n```\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n# IPv4 local connections:\nhost    all             all             ip_address/32           scram-sha-256\n```\n\nwhere ip_address is the IP address of the remote client.\n\nSee the documentation for pg_hba.conf.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nAfter this you should restart postgresql.service for the changes to take effect.\n\nFor troubleshooting take a look in the server log file:\n\n```\n# journalctl -u postgresql.service\n```\n\n"
    },
    {
      "title": "Configure PostgreSQL authenticate against PAM",
      "level": 3,
      "content": "PostgreSQL offers a number of authentication methods. If you would like to allow users to authenticate with their system password, additional steps are necessary. First you need to enable PAM for the connection.\n\nFor example, the same configuration as above, but with PAM enabled:\n\n```\n/var/lib/postgres/data/pg_hba.conf\n```\n\n```\n# IPv4 local connections:\nhost   all   all   my_remote_client_ip_address/32   pam\n```\n\nThe PostgreSQL server is however running without root privileges and will not be able to access /etc/shadow. We can work around that by allowing the postgres group to access this file:\n\n```\n# setfacl -m g:postgres:r /etc/shadow\n```\n\n"
    },
    {
      "title": "Change default data directory",
      "level": 3,
      "content": "The default directory where all your newly created databases will be stored is /var/lib/postgres/data. To change this, follow these steps:\n\nCreate the new directory and make the postgres user its owner:\n\n```\n# mkdir -p /pathto/pgroot/data\n# chown -R postgres:postgres /pathto/pgroot\n```\n\nBecome the postgres user, and initialize the new cluster:\n\n```\n[postgres]$ initdb -D /pathto/pgroot/data\n```\n\nEdit postgresql.service to create a drop-in file and override the Environment and PIDFile settings. For example:\n\n```\n/etc/systemd/system/postgresql.service.d/PGROOT.conf\n```\n\n```\n[Service]\nEnvironment=PGROOT=/pathto/pgroot\nPIDFile=/pathto/pgroot/data/postmaster.pid\n```\n\nIf you want to use /home directory for default directory or for tablespaces, add one more line in this file:\n\n```\nProtectHome=false\n```\n\n"
    },
    {
      "title": "Change default encoding of new databases to UTF-8",
      "level": 3,
      "content": "When creating a new database (e.g. with createdb blog) PostgreSQL actually copies a template database. There are two predefined templates: template0 is vanilla, while template1 is meant as an on-site template changeable by the administrator and is used by default. In order to change the encoding of a new database, one of the options is to change on-site template1. To do this, log into PostgreSQL shell (psql) and execute the following:\n\nFirst, we need to drop template1. Templates cannot be dropped, so we first modify it so it is an ordinary database:\n\n```\nUPDATE pg_database SET datistemplate = FALSE WHERE datname = 'template1';\n```\n\nNow we can drop it:\n\n```\nDROP DATABASE template1;\n```\n\nThe next step is to create a new database from template0, with a new default encoding:\n\n```\nCREATE DATABASE template1 WITH TEMPLATE = template0 ENCODING = 'UNICODE';\n```\n\nNow modify template1 so it is actually a template:\n\n```\nUPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template1';\n```\n\nOptionally, if you do not want anyone connecting to this template, set datallowconn to FALSE:\n\n```\nUPDATE pg_database SET datallowconn = FALSE WHERE datname = 'template1';\n```\n\nNow you can create a new database:\n\n```\n[postgres]$ createdb blog\n```\n\nIf you log back in to psql and check the databases, you should see the proper encoding of your new database:\n\n```\n\\l\n```\n\n```\nList of databases\n  Name    |  Owner   | Encoding  | Collation | Ctype |   Access privileges\n-----------+----------+-----------+-----------+-------+----------------------\nblog      | postgres | UTF8      | C         | C     |\npostgres  | postgres | SQL_ASCII | C         | C     |\ntemplate0 | postgres | SQL_ASCII | C         | C     | =c/postgres\n                                                     : postgres=CTc/postgres\ntemplate1 | postgres | UTF8      | C         | C     |\n```\n\n"
    },
    {
      "title": "Enable data checksumming",
      "level": 3,
      "content": "If your database files reside on a file system without checksumming, its data is suspectible to silent data corruption due to bit rot and broken hardware. While those events are rare, you might want to enable PostgreSQL's built-in data checksumming if you care about data integrity. This feature must be enabled on the cluster level, not per-database or per-table.\n\n- There is a minimal performance impact, especially while reading large datasets from disk. In-memory operations are not affected.\n- PostgreSQL is unable to repair corrupt data - it will only abort transactions reading from corrupt pages to prevent further damage or invalid execution results.\n- Checksums cover on-disk data (row) pages only, not metadata or control structures. In-memory pages are not checksummed. Error-corrected storage and ECC memory is still beneficial.\n\n- To enable checksumming during cluster creation, add the --data-checksums argument to initdb.\n- To verify whenever checksumming is enabled, run [postgres]$ psql --tuples-only -c \"SHOW data_checksums\" (which should print off or on).\n- To toggle checksumming on an existing cluster:\n\n1. Stop postgresql.service.\n1. Run [postgres]$ pg_checksums --pgdata /var/lib/postgres/data --enable (or --disable if you no longer want checksumming). Enabling checksums will rewrite all database pages, which will take a while for large database instances.\n1. Start postgresql.service.\n\n"
    },
    {
      "title": "Graphical tools",
      "level": 2,
      "content": "- phpPgAdmin — Web-based administration tool for PostgreSQL.\n\n- pgAdmin-desktop — The desktop user interface for pgAdmin, a comprehensive design and management GUI for PostgreSQL.\n\n- pgAdmin — Comprehensive design and management GUI for PostgreSQL.\n\n- pgModeler — Graphical schema designer for PostgreSQL.\n\n- Postbird — Cross-platform PostgreSQL GUI client, written in JavaScript, runs with Electron.\n\n- rainfrog — Database management TUI for Postgres.\n\n- pgweb — Cross-platform Web client for PostgreSQL databases.\n\nFor tools supporting multiple DBMSs, see List of applications/Documents#Database tools.\n\n"
    },
    {
      "title": "Set up backups",
      "level": 2,
      "content": "It is recommended to set up backups for databases containing valuable data. See the Backup and Restore chapter in the PostgreSQL documentation. There is also a list of backup tools in the PostgreSQL wiki, though it may not be up-to-date or complete. Remember that a backup system cannot be trusted unless you perform a test restore from time to time!\n\n"
    },
    {
      "title": "Upgrading PostgreSQL",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nUpgrading major PostgreSQL versions (e.g. version 14.x to version 15.y) requires some extra maintenance.\n\nGet the currently used database version via\n\n```\n# cat /var/lib/postgres/data/PG_VERSION\n```\n\nTo ensure you do not accidentally upgrade the database to an incompatible version, it is recommended to skip updates to the PostgreSQL packages.\n\nMinor version upgrades are safe to perform. However, if you do an accidental upgrade to a different major version, you might not be able to access any of your data. Always check the PostgreSQL home page to be sure of what steps are required for each upgrade. For a bit about why this is the case, see the versioning policy.\n\nThere are two main ways to upgrade your PostgreSQL database. Read the official documentation for details.\n\n"
    },
    {
      "title": "pg_upgrade",
      "level": 3,
      "content": "The pg_upgrade utility attempts to copy over as much compatible data as possible between clusters and upgrading everything else. It is generally the fastest method to upgrade most instances, although it requires access to binaries for both source and target PostgreSQL versions. Read the pg_upgrade(1) man page to understand what actions it performs. For non-trivial instances (e.g. with streaming replication or log-shipping), read the upstream documentation first.\n\nFor those wishing to use pg_upgrade, a postgresql-old-upgrade package is available that will always run one major version behind the real PostgreSQL package. This can be installed side-by-side with the new version of PostgreSQL. To upgrade from older versions of PostgreSQL there are AUR packages available, e.g. postgresql-12-upgradeAUR. (You must use the pg_upgrade version packaged with the PostgreSQL version you are upgrading to.)\n\nNote that the database cluster directory does not change from version to version, so before running pg_upgrade, it is necessary to rename your existing data directory and migrate into a new directory. The new database cluster must be initialized using the same parameters as the old one.\n\nWhen you are ready to begin the upgrade:\n\n1. While the old database cluster is still online, collect the initdb arguments used to create it. Refer to #Initial configuration for more information.\n1. Stop postgresql.service. Check the unit status to be sure that PostgresSQL was stopped correctly. If it failed, pg_upgrade will fail with The source cluster was not shut down cleanly.\n1. Upgrade postgresql, postgresql-libs, and postgresql-old-upgrade.\n1. Make sure that /var/lib/postgres/olddata does not exist. If you did not delete it after a previous upgrade, do it now.\n1. Rename the old cluster directory, then create a new cluster and temporary working directory: # mv /var/lib/postgres/data /var/lib/postgres/olddata # mkdir /var/lib/postgres/data /var/lib/postgres/tmp # chown postgres:postgres /var/lib/postgres/data /var/lib/postgres/tmp [postgres]$ cd /var/lib/postgres/tmp\n1. Initialize the new cluster using the same initdb arguments as were used for the old cluster: [postgres]$ initdb -D /var/lib/postgres/data --locale=C.UTF-8 --encoding=UTF8 --data-checksums\n1. Upgrade the cluster, replacing PG_VERSION below, with the old PostgreSQL version number (e.g. 15): [postgres]$ pg_upgrade -b /opt/pgsql-PG_VERSION/bin -B /usr/bin -d /var/lib/postgres/olddata -D /var/lib/postgres/data Tip: On file systems that support reflinks (e.g. Btrfs and XFS), append the --clone option to speed up file copying. If necessary, adjust the configuration files of new cluster (e.g. pg_hba.conf and postgresql.conf) to match the old cluster.\n1. Start postgresql.service again.\n1. Optional: Run [postgres]$ vacuumdb --all --analyze-in-stages to recalculate query analyzer statistics, which should improve query performance shortly after the upgrade. (Adding --jobs=NUMBER_OF_CPU_CORES argument may improve this command's performance.)\n1. Optional: Back up the /var/lib/postgres/olddata directory in case you need to restore a previous PostgreSQL version.\n1. Delete the /var/lib/postgres/olddata directory with old cluster data.\n1. Delete the /var/lib/postgres/tmp directory.\n1. If you use pgbackrestAUR, run the stanza-upgrade command.\n\n```\n# mv /var/lib/postgres/data /var/lib/postgres/olddata\n# mkdir /var/lib/postgres/data /var/lib/postgres/tmp\n# chown postgres:postgres /var/lib/postgres/data /var/lib/postgres/tmp\n[postgres]$ cd /var/lib/postgres/tmp\n```\n\n```\n[postgres]$ initdb -D /var/lib/postgres/data --locale=C.UTF-8 --encoding=UTF8 --data-checksums\n```\n\n```\n[postgres]$ pg_upgrade -b /opt/pgsql-PG_VERSION/bin -B /usr/bin -d /var/lib/postgres/olddata -D /var/lib/postgres/data\n```\n\n"
    },
    {
      "title": "Manual dump and reload",
      "level": 3,
      "content": "You could also do something like this (after the upgrade and install of postgresql-old-upgrade).\n\n- Below are the commands for upgrading from PostgreSQL 14. You can find similar commands in /opt/ for your version of PostgreSQL cluster, provided you have matching version of postgresql-old-upgrade package installed.\n- If you had customized your pg_hba.conf file, you may have to temporarily modify it to allow full access to old database cluster from local system. After upgrade is complete set your customization to new database cluster as well and restart postgresql.service.\n\nStop postgresql.service\n\n```\n# mv /var/lib/postgres/data /var/lib/postgres/olddata\n# mkdir /var/lib/postgres/data\n# chown postgres:postgres /var/lib/postgres/data\n[postgres]$ initdb -D /var/lib/postgres/data --locale=C.UTF-8 --encoding=UTF8 --data-checksums\n[postgres]$ /opt/pgsql-14/bin/pg_ctl -D /var/lib/postgres/olddata/ start\n# cp /usr/lib/postgresql/postgis-3.so /opt/pgsql-14/lib/ # Only if postgis installed\n[postgres]$ pg_dumpall -h /tmp -f /tmp/old_backup.sql\n[postgres]$ /opt/pgsql-14/bin/pg_ctl -D /var/lib/postgres/olddata/ stop\n```\n\nStart postgresql.service\n\n```\n[postgres]$ psql -f /tmp/old_backup.sql postgres\n```\n\n"
    },
    {
      "title": "Improve performance of small transactions",
      "level": 3,
      "content": "If you are using PostgresSQL on a local machine for development and it seems slow, you could try turning synchronous_commit off in the configuration. Beware of the caveats, however.\n\n```\n/var/lib/postgres/data/postgresql.conf\n```\n\n```\nsynchronous_commit = off\n```\n\n"
    },
    {
      "title": "PostgreSQL database unable to start after package update when using extensions",
      "level": 3,
      "content": "The cause in this case is mostly the existing package is not compiled for the newer version (and it may be up-to-date), the solution is rebuilding the package either manually or waiting for an update to the extension package.\n\n"
    },
    {
      "title": "Failing to start a PostgreSQL server with the older version of the database while upgrading to the newer version with extensions",
      "level": 3,
      "content": "This is caused because the old version of postgres from the package postgresql-old-upgrade does not have the required extensions (.so files) in its lib directory, the current solution is dirty, and might cause a lot of problems so keep a backup of the database just in case, basically copy the required extension .so files from /usr/lib/postgresql/ to /opt/pgsql-XX/lib/ (remember to replace XX with the major version of postgresql-old-upgrade).\n\nFor example, for timescaledb\n\n```\n# cp /usr/lib/postgresql/timescaledb*.so /opt/pgsql-13/lib/\n```\n\nto know the exact files to copy, check the contant of the package of the extension using :\n\n```\n$ pacman -Ql package_name\n```\n\n"
    },
    {
      "title": "WARNING: database \"postgres\" has a collation version mismatch",
      "level": 3,
      "content": "You might see something like this:\n\n```\nWARNING:  database \"postgres\" has a collation version mismatch\nDETAIL:  The database was created using collation version X.YY, but the operating system provides version X.ZZ.\nHINT:  Rebuild all objects in this database that use the default collation and run ALTER DATABASE postgres REFRESH COLLATION VERSION, or build PostgreSQL with the right library version.\n```\n\nThat means collation provider library (glibc or icu) was updated which might have made some indexes invalid. So that means need to reindex those databases.\n\nYou can do that with:\n\n```\n[postgres]$ psql -c 'REINDEX DATABASE' postgres\n[postgres]$ psql -c 'ALTER DATABASE postgres REFRESH COLLATION VERSION'\n```\n\nRepeat this above for all other databases by replacing postgres with respective DB name.\n\n"
    }
  ]
}