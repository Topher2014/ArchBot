{
  "title": "Pacnew and Pacsave files",
  "url": "https://wiki.archlinux.org/title/Pacnew_and_Pacsave_files",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "When pacman removes a package that has a configuration file, it normally creates a backup copy of that configuration file and appends .pacsave to the name of the file. Likewise, when pacman upgrades a package which includes a new configuration file created by the maintainer differing from the currently installed file, it saves a .pacnew file with the new configuration. pacman provides notice when these files are written.\n\n"
    },
    {
      "title": "Why these files are created",
      "level": 2,
      "content": "A .pacnew file may be created during a package upgrade (pacman -Syu, pacman -Su or pacman -U) to avoid overwriting a file which already exists and was previously modified by the user. When this happens, a message like the following will appear in the output of pacman:\n\n```\nwarning: /etc/pam.d/usermod installed as /etc/pam.d/usermod.pacnew\n```\n\nA .pacsave file may be created during a package removal (pacman -R), or by a package upgrade (the package must be removed first). When the pacman database has a record that a certain file owned by the package should be backed up, it will create a .pacsave file. When this happens pacman outputs a message like the following:\n\n```\nwarning: /etc/pam.d/usermod saved as /etc/pam.d/usermod.pacsave\n```\n\nThese files require manual intervention from the user and it is good practice to handle them right after every package upgrade or removal. If left unhandled, improper configurations can result in improper function of the software or the software being unable to run altogether.\n\n"
    },
    {
      "title": "Package backup files",
      "level": 2,
      "content": "A package's PKGBUILD file specifies which files should be preserved or backed up when the package is upgraded or removed. For example, the PKGBUILD for pulseaudio contains the following line:\n\n```\nbackup=(etc/pulse/{daemon.conf,default.pa,system.pa})\n```\n\nAfter installation, this list can be queried from the pacman database using pacman -Qii package_name.\n\nTo prevent any package from overwriting a certain file, see Pacman#Skip file from being upgraded.\n\n"
    },
    {
      "title": ".pacnew",
      "level": 3,
      "content": "For each of the #Package backup files being upgraded, pacman cross-compares three md5sums generated from the file's contents: one sum for the version originally installed by the package, one for the version currently in the filesystem, and one for the version in the new package. If the version of the file currently in the filesystem has been modified from the version originally installed by the package, pacman cannot know how to merge those changes with the new version of the file. Therefore, instead of overwriting the modified file when upgrading, pacman saves the new version with a .pacnew extension and leaves the modified version untouched.\n\nGoing into further detail, the 3-way MD5 sum comparison results in one of the following outcomes:\n\nRarely, when an upgraded package includes a backup file the previous version did not, the situation is correctly handled as X/Y/Y or X/Y/Z, with X being a non-existant value.\n\n"
    },
    {
      "title": ".pacsave",
      "level": 3,
      "content": "If the user has modified one of the files specified in backup then that file will be renamed with a .pacsave extension and will remain in the filesystem after the rest of the package is removed.\n\n"
    },
    {
      "title": "Locating .pac* files",
      "level": 2,
      "content": "Pacman does not deal with .pacnew files automatically: you must maintain these yourself. A few tools are presented in the next section. To do this manually, you will first need to locate them. When upgrading or removing a large number of packages, updated .pac* files may be missed. To discover whether any .pac* files have been installed, use one of the following:\n\n- To search within /etc where most global configurations are stored: # find /etc -name '*.pacnew' -o -name '*.pacsave' or to search within the entire disk replacing /etc by / in the command above (in which case you may want to selectively skip certain directories to speed up the search).\n- If installed, locate can also be used. First re-index the database: # updatedb Then run: $ locate --existing --regex '.*\\.(pacnew|pacsave)'\n- Use pacman's log to find them: $ grep '\\.pacnew\\|\\.pacsave' /var/log/pacman.log Note that the log does not keep track of the files currently in the filesystem nor the ones that have already been removed; the above command will list all .pac* files that have ever existed on your system. In order to only get the 10 most recent .pac* files, pipe the result to tail.\n\n```\n# find /etc -name '*.pacnew' -o -name '*.pacsave'\n```\n\n```\n# updatedb\n```\n\n```\n$ locate --existing --regex '.*\\.(pacnew|pacsave)'\n```\n\n```\n$ grep '\\.pacnew\\|\\.pacsave' /var/log/pacman.log\n```\n\n"
    },
    {
      "title": "pacdiff",
      "level": 3,
      "content": "pacman-contrib provides the simple pacdiff(8) tool for managing .pac* files.\n\nIt will search for .pacnew, .pacsave and .pacorig files, and will then prompt to take action upon them.\n\nIt uses --pacmandb by default, to search using the backup array information from currently installed packages. If this is not sufficient for your use case, you can specify --find or --locate instead, for a more thorough search.\n\nIt uses vimdiff by default, but you may specify a different tool with DIFFPROG=your_editor pacdiff. See List of applications/Utilities#Comparison, diff, merge for other common comparison tools.\n\n"
    },
    {
      "title": "Third-party utilities",
      "level": 3,
      "content": "A few third-party utilities providing various levels of automation for these tasks are available:\n\n- dotpac — Basic interactive script with ncurses-based text interface and helpful walkthrough. No merging or auto-merging features.\n\n- etc-update — Gentoo's utility, compatible with other distributions including Arch. It provides a simple CLI to view, merge and interactively edit changes. Trivial changes, such as comments, can be merged automatically.\n\n- p3wm — Three-way merge .pacnew files. It can automatically merge trivial changes. If conflicts happen, it will launch vimdiff, meld or kdiff3 to resolve them.\n\n- pacnews-git — A simple script aimed at finding all .pacnew files, then editing them with vimdiff.\n\n- pacfiles-mode — A package for Emacs to manage and merge .pacnew files.\n\n- pacdiff-pacman-hook-git — Pacman hook to run pacdiff automatically.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Forum thread: Dealing with .pacnew files\n\n"
    }
  ]
}