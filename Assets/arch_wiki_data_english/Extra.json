{
  "title": "Extra",
  "url": "https://wiki.archlinux.org/title/Extra",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Arch build system\n- Arch User Repository\n- makepkg\n- Mirrors\n- Official repositories web interface\n- pacman\n- PKGBUILD\n- Unofficial user repositories\n\nA software repository is a storage location from which software packages are retrieved for installation.\n\nArch Linux official repositories contain essential and popular software, readily accessible via pacman. They are maintained by package maintainers.\n\nPackages in the official repositories are constantly upgraded: when a package is upgraded, its old version is removed from the repository. There are no major Arch releases: each package is upgraded as new versions become available from upstream sources. Each repository is always coherent, i.e. the packages that it hosts always have reciprocally compatible versions.\n\n"
    },
    {
      "title": "core",
      "level": 3,
      "content": "This repository can be found in .../core/os/ on your favorite mirror.\n\ncore contains packages for:\n\n- booting Arch Linux\n- connecting to the Internet\n- building packages\n- management and repair of supported file systems\n- the system setup process (e.g. openssh)\n\nas well as dependencies of the above (not necessarily makedepends) and the base meta package.\n\ncore has fairly strict quality requirements. Developers/users need to signoff on updates before package updates are accepted. For packages with low usage, a reasonable exposure is enough: informing people about update, requesting signoffs, keeping in core-testing up to a week depending on the severity of the change, lack of outstanding bug reports, along with the implicit signoff of the package maintainer.\n\n"
    },
    {
      "title": "extra",
      "level": 3,
      "content": "This repository can be found in .../extra/os/ on your favorite mirror.\n\nextra contains all packages that do not fit in core. This repository is jointly maintained by the Package Maintainers and Arch Developers. Examples: Xorg, window managers, web browsers, media players, tools for working with languages such as Python and Ruby, and a lot more.\n\n"
    },
    {
      "title": "multilib",
      "level": 3,
      "content": "This repository can be found in .../multilib/os/ on your favorite mirror.\n\nmultilib contains 32-bit software and libraries that can be used to run and build 32-bit applications on 64-bit installs (e.g. wine, steam, etc).\n\nWith the multilib repository enabled, the 32-bit compatible libraries are located under /usr/lib32/.\n\n"
    },
    {
      "title": "Enabling multilib",
      "level": 4,
      "content": "To enable multilib repository, uncomment the [multilib] section in /etc/pacman.conf:\n\n```\n/etc/pacman.conf\n```\n\n```\n[multilib]\nInclude = /etc/pacman.d/mirrorlist\n```\n\nThen upgrade the system and install the desired multilib packages.\n\n"
    },
    {
      "title": "Disabling multilib",
      "level": 4,
      "content": "Execute the following command to remove all packages that were installed from multilib:\n\n```\n# pacman -R $(comm -12 <(pacman -Qq | sort) <(pacman -Slq multilib | sort))\n```\n\nIf you have conflicts with gcc-libs reinstall the gcc-libs package and the dependencies of the base-devel package (see Pacman/Tips and tricks#Dependencies of a package).\n\nComment out the [multilib] section in /etc/pacman.conf:\n\n```\n/etc/pacman.conf\n```\n\n```\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist\n```\n\nThen upgrade the system.\n\n"
    },
    {
      "title": "Testing repositories",
      "level": 2,
      "content": "The intended purpose of the testing repositories is to provide a staging area for packages to be placed prior to acceptance into the main repositories. Package maintainers (and general users) can then access these testing packages to make sure that there are no problems integrating the new package. Once a package has been tested and no errors are found, the package can then be moved to the primary repositories.\n\nNot all packages need to go through this testing process. New packages go into a testing repository if:\n\n- They are destined for the core repository. Everything in core must go through core-testing.\n- They are expected to break something on update and need to be tested first.\n- They affect many packages (such as perl or python).\n\nThe testing repositories are also usually used for new releases of large collections of packages such as GNOME and KDE.\n\nNote: **must** \n\n- Testing repositories may contain pre-release software versions.\n- Be careful when enabling the testing repositories. Your system may break after performing an update. Only experienced users who know how to deal with potential system breakage should use it.\n- If you enable core-testing, you must also enable extra-testing, and vice versa. If you enable any other testing repository listed in the following subsections, you must also enable both core-testing and extra-testing.\n- Since not all packages in the main repositories have their versions in the testing repositories, the core and extra main repositories should be retained, and the corresponding testing repositories should be in front of the main repository.\n\n"
    },
    {
      "title": "core-testing",
      "level": 3,
      "content": "This repository can be found in .../core-testing/os/ on your favorite mirror.\n\ncore-testing contains packages that are candidates for the core repository.\n\ncore-testing is the only repository that can have name collisions with any of the other official repositories. If enabled, it has to be the first repository listed in your /etc/pacman.conf file.\n\n"
    },
    {
      "title": "extra-testing",
      "level": 3,
      "content": "This repository is similar to the core-testing repository, but for packages that are candidates for the extra repository.\n\n"
    },
    {
      "title": "multilib-testing",
      "level": 3,
      "content": "This repository is similar to the core-testing repository, but for packages that are candidates for the multilib repository.\n\n"
    },
    {
      "title": "gnome-unstable",
      "level": 3,
      "content": "This repository contains testing packages for pre-releases (Alpha, Beta, RC) as well as stable versions of the GNOME desktop environment, prior to their transition to the main extra-testing repository.\n\nTo enable it, add the following lines to /etc/pacman.conf:\n\n```\n/etc/pacman.conf\n```\n\n```\n[gnome-unstable]\nInclude = /etc/pacman.d/mirrorlist\n```\n\nThe gnome-unstable entry should be at the top in the list of repositories (i.e., above the enabled core-testing entry; see warnings above).\n\nPlease report packaging related bugs in Arch's GitLab, while anything else should be reported upstream to GNOME Gitlab.\n\nFor additional assistance and information regarding this repository, please join the Matrix Group.\n\n"
    },
    {
      "title": "kde-unstable",
      "level": 3,
      "content": "This repository contains the latest beta or Release Candidate of KDE Plasma and Applications.\n\nTo enable it, add the following lines to /etc/pacman.conf:\n\n```\n/etc/pacman.conf\n```\n\n```\n[kde-unstable]\nInclude = /etc/pacman.d/mirrorlist\n```\n\nThe kde-unstable entry should be at the top in the list of repositories (i.e., above the enabled core-testing entry; see warnings above).\n\nMake sure you make bug reports if you find any problems.\n\n"
    },
    {
      "title": "Disabling testing repositories",
      "level": 3,
      "content": "If you enabled testing repositories, but later on decided to disable them, you should:\n\n1. Remove (comment out) them from /etc/pacman.conf\n1. Perform a pacman -Syuu to \"rollback\" your updates from these repositories.\n\nThe second item is optional, but keep it in mind if you notice any problems.\n\n"
    },
    {
      "title": "Staging repositories",
      "level": 2,
      "content": "This repository contains broken packages and is used solely by developers during rebuilds of many packages at once. In order to rebuild packages that depend on, for example, a new shared library, the shared library itself must first be built and uploaded to the staging repositories to be made available to other developers. As soon as all dependent packages are rebuilt, the group of packages is then moved to the testing or the main repositories, whichever is more appropriate.\n\nSee the announcement of the introduction of the staging repositories for more historical details.\n\n"
    },
    {
      "title": "Historical background",
      "level": 2,
      "content": "Most of the repository splits are for historical reasons. Originally, when Arch Linux was used by very few users, there was only one repository known as official (now core). At the time, official basically contained Judd Vinet's preferred applications. It was designed to contain one of each \"type\" of program â€” one DE, one major browser, etc.\n\nThere were users back then that did not like Judd's selection, so since the Arch build system is so easy to use, they created packages of their own. These packages went into a repository called unofficial, and were maintained by developers other than Judd. Eventually, the two repositories were both considered equally supported by the developers, so the names official and unofficial no longer reflected their true purpose. They were subsequently renamed to current and extra sometime near the release version 0.5.\n\nShortly after the 2007.8.1 release, current was renamed core in order to prevent confusion over what exactly it contains. The repositories are now more or less equal in the eyes of the developers and the community, but core does have some differences. The main distinction is that packages used for Installation CDs and release snapshots are taken only from core. This repository still gives a complete Linux system, though it may not be the Linux system you want.\n\nSome time around 0.5/0.6, there were a lot of packages that the developers did not want to maintain. Jason Chu set up the \"Trusted User Repositories\", which were unofficial repositories in which trusted users could place packages they had created. There was a staging repository where packages could be promoted into the official repositories by one of the Arch Linux developers, but other than this, the developers and trusted users were more or less distinct.\n\nThis worked for a while, but not when trusted users got bored with their repositories, and not when other users wanted to share their own packages. This led to the development of the AUR. The Trusted Users were conglomerated into a more closely knit group, and they now collectively maintained the community repository. The TUs were still a separate group from the Arch Linux developers, and there was not a lot of communication between them. However, popular packages were still promoted from community to extra on occasion. The AUR also allows all users to submit PKGBUILDs.\n\nAfter a kernel in core broke many user systems, the \"core signoff policy\" was introduced. Since then, all package updates for core need to go through the core-testing repository first, and only after multiple signoffs from other developers or people on the Arch Testing Team are then allowed to move. Over time, it was noticed that various core packages had low usage, and user signoffs or even lack of bug reports became informally accepted as criteria to accept such packages.\n\nIn late 2009/the beginning of 2010, with the advent of some new filesystems and the desire to support them during installation, along with the realization that core was never clearly defined (just \"important packages, handpicked by developers\"), the repository received a more accurate description.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nStarting in 2021, and finalized in late 2023, the \"Trusted Users\" were renamed to \"Package Maintainers\".\n\nIn 2023 after years of prior work the distribution migrated their back-end services to git and in the same run also switched to a new repository layout. In the new layout extra would contain all packages that were previously in community and the testing repositories were split from testing to core-testing and extra-testing, community-testing was removed entirely. From that point on the Package Maintainers were also able to push new packages to extra.\n\n"
    }
  ]
}