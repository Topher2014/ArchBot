{
  "title": "Keyboard Configuration in Xorg",
  "url": "https://wiki.archlinux.org/title/Keyboard_Configuration_in_Xorg",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- X keyboard extension\n- Linux console/Keyboard configuration\n- Extra keyboard keys\n- Xorg\n- Keyboard shortcuts\n\nThis article describes the basics of Xorg keyboard configuration. For advanced topics such as keyboard layout modification or additional key mappings, see X keyboard extension or Extra keyboard keys respectively.\n\nThe Xorg server uses the X keyboard extension (XKB) to define keyboard layouts. Optionally, xmodmap can be used to access the internal keymap table directly, although this is not recommended for complex tasks. Also systemd's localectl can be used to define the keyboard layout for both the Xorg server and the virtual console.\n\n"
    },
    {
      "title": "Viewing keyboard settings",
      "level": 2,
      "content": "You can use the following command to see the actual XKB settings:\n\n```\n$ setxkbmap -print -verbose 10\n```\n\n```\nSetting verbose level to 10\nlocale is C\nApplied rules from evdev:\nmodel:      evdev\nlayout:     us\noptions:    terminate:ctrl_alt_bksp\nTrying to build keymap using the following components:\nkeycodes:   evdev+aliases(qwerty)\ntypes:      complete\ncompat:     complete\nsymbols:    pc+us+inet(evdev)+terminate(ctrl_alt_bksp)\ngeometry:   pc(pc104)\nxkb_keymap {\n        xkb_keycodes  { include \"evdev+aliases(qwerty)\" };\n        xkb_types     { include \"complete\"      };\n        xkb_compat    { include \"complete\"      };\n        xkb_symbols   { include \"pc+us+inet(evdev)+terminate(ctrl_alt_bksp)\"    };\n        xkb_geometry  { include \"pc(pc104)\"     };\n};\n```\n\n"
    },
    {
      "title": "Third party utilities",
      "level": 3,
      "content": "There are some \"unofficial\" utilities which allow to print specific information about the currently used keyboard layout.\n\n- xkb-switch-gitAUR:\n\n```\n$ xkb-switch\n```\n\n```\nus\n```\n\n- xkblayout-state-gitAUR:\n\n```\n$ xkblayout-state print \"%s\"\n```\n\n```\nde\n```\n\n"
    },
    {
      "title": "Setting keyboard layout",
      "level": 2,
      "content": "Keyboard layout in Xorg can be set in multiple ways. Here is an explanation of used options:\n\n- XkbModel selects the keyboard model. This has an influence only for some extra keys your keyboard might have. The safe fallback are pc104 (ANSI) or pc105 (ISO). But for instance laptops usually have some extra keys, and sometimes you can make them work by simply setting a proper model.\n- XkbLayout selects the keyboard layout. Multiple layouts may be specified in a comma-separated list, e.g. if you want to quickly switch between layouts.\n- XkbVariant selects a specific layout variant available for the XkbLayout. For instance, the default sk (Slovak) variant is qwertz, but you can manually specify qwerty, etc.\n- XkbOptions contains some extra options (comma-separated). Used for specifying layout switching, notification LED, compose mode etc. See the #Frequently used XKB options section for examples.\n\nThe layout name is usually a 2-letter country code. To see a full list of keyboard models, layouts, variants and options, along with a short description, open /usr/share/X11/xkb/rules/base.lst. Alternatively, you may use one of the following commands to see a list without a description:\n\n- localectl list-x11-keymap-models\n- localectl list-x11-keymap-layouts\n- localectl list-x11-keymap-variants [layout]\n- localectl list-x11-keymap-options\n\nExamples in the following subsections will have the same effect, they will set pc104 model, cz as primary layout, us as secondary layout, dvorak variant for us layout and the Super+Space combination for switching between layouts. See xkeyboard-config(7) for more detailed information.\n\n"
    },
    {
      "title": "Using X configuration files",
      "level": 3,
      "content": "The syntax of X configuration files is explained in Xorg#Configuration. This method creates system-wide configuration which is persistent across reboots.\n\nHere is an example:\n\n```\n/etc/X11/xorg.conf.d/00-keyboard.conf\n```\n\n```\nSection \"InputClass\"\n        Identifier \"system-keyboard\"\n        MatchIsKeyboard \"on\"\n        Option \"XkbLayout\" \"cz,us\"\n        Option \"XkbModel\" \"pc104\"\n        Option \"XkbVariant\" \",dvorak\"\n        Option \"XkbOptions\" \"grp:win_space_toggle\"\nEndSection\n```\n\n"
    },
    {
      "title": "Using localectl",
      "level": 4,
      "content": "For convenience, the tool localectl may be used instead of manually editing X configuration files. It will save the configuration in /etc/X11/xorg.conf.d/00-keyboard.conf, this file should not be manually edited, because localectl will overwrite the changes on next start.\n\nThe usage is as follows:\n\n```\n# localectl [--no-convert] set-x11-keymap layout [model [variant [options]]]\n```\n\nTo set a model, variant or options, all preceding fields need to be specified, but the preceding fields can be skipped by passing an empty string with \"\". Unless the --no-convert option is passed, the specified keymap is also converted to the closest matching console keymap and applied to the console configuration in vconsole.conf. See localectl(1) for more information.\n\nTo create a /etc/X11/xorg.conf.d/00-keyboard.conf like the above:\n\n```\n# localectl --no-convert set-x11-keymap cz,us pc104 ,dvorak grp:win_space_toggle\n```\n\n"
    },
    {
      "title": "Using setxkbmap",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nsetxkbmap sets the keyboard layout for the current X session only, but can be made persistent in xinitrc or xprofile. This overrides system-wide configuration specified following #Using X configuration files.\n\nThe usage is as follows (see setxkbmap(1)):\n\n```\n$ setxkbmap [-model xkb_model] [-layout xkb_layout] [-variant xkb_variant] [-option xkb_options]\n```\n\nTo change just the layout (-layout is the default flag):\n\n```\n$ setxkbmap xkb_layout\n```\n\nFor multiple customizations:\n\n```\n$ setxkbmap -model pc104 -layout cz,us -variant ,dvorak -option grp:win_space_toggle\n```\n\n"
    },
    {
      "title": "Switching between keyboard layouts",
      "level": 3,
      "content": "To be able to easily switch keyboard layouts, first specify multiple layouts between which you want to switch (the first one is the default). Then specify a key (or key combination), which will be used for switching. For example, to switch between a US and a Swedish layout using the CapsLock key, use us,se as an argument of XkbLayout and grp:caps_toggle as an argument of XkbOptions. The number of XkbLayouts should match that of the XkbVariants — if you want to switch solely between different variants, then duplicate the layout accordingly (e.g. de,de).\n\nThe list of available layouts (and variants) can be found in xkeyboard-config(7) § LAYOUTS. The key combinations available for layout switching are listed in xkeyboard-config(7) § Switching to another layout.\n\nNote that the grp:alts_toggle option is unreliable and unlikely to be fixed; prefer other combinations.\n\n"
    },
    {
      "title": "Switch languages using Alt Shift",
      "level": 4,
      "content": "To set Alt+Shift as a layout shortcut, use grp:alt_shift_toggle in XkbOptions.\n\nHowever, there is a known issue with XKB that causes other shortcuts of the type Alt+Shift+any_key to break. Moreover, XKB may set the right Alt to be AltGr by default in some keyboard layouts, making RAlt+RShift not working for layout switching.\n\nAs a workaround, sxhkd may be used to switch layouts by adding the following to sxhkdrc:\n\n```\nShift_L + Alt_L\n    setxkbmap -query | grep -q 'fr' && setxkbmap us || setxkbmap fr,us\nShift_R + Alt_R\n    setxkbmap -query | grep -q 'fr' && setxkbmap us || setxkbmap fr,us\n```\n\nNote that for some reason, Alt must be pressed before Shift to be detected by sxhkd.\n\n"
    },
    {
      "title": "Terminating Xorg with Ctrl+Alt+Backspace",
      "level": 3,
      "content": "By default, the key combination Ctrl+Alt+Backspace is disabled. You can enable it by passing terminate:ctrl_alt_bksp to XkbOptions. This can also be done by binding a key to Terminate_Server in xmodmap (which undoes any existing XkbOptions setting). In order for either method to work, one also needs to have DontZap set to \"off\" in ServerFlags: since 2004 [2] this is the default.\n\n"
    },
    {
      "title": "Swapping Caps Lock with Left Control",
      "level": 3,
      "content": "To swap Caps Lock with Left Control key, add ctrl:swapcaps to XkbOptions. Run the following command to see similar options along with their descriptions:\n\n```\n$ grep -E \"(ctrl|caps):\" /usr/share/X11/xkb/rules/base.lst\n```\n\n"
    },
    {
      "title": "Enabling mouse keys",
      "level": 3,
      "content": "Mouse keys, not to be confused with the keys of the mouse, is disabled by default and has to be manually enabled by passing keypad:pointerkeys to XkbOptions. This will make the Shift+NumLock shortcut toggle mouse keys.\n\nSee also X keyboard extension#Mouse control for advanced configuration.\n\n"
    },
    {
      "title": "Configuring AltGr",
      "level": 3,
      "content": "The AltGr (Alternate Graphic) key can be used to access additional characters and symbols on a keyboard. It functions as a modifier key similar to Shift but provides access to a third level of key mappings. Note that mapping levels work as follows:\n\n- 1st Level: Default layer of keys (no modifier).\n- 2nd Level: Accessed by pressing the Shift key, providing secondary characters (e.g. capitalization) or symbols (e.g. @ symbol).\n- 3rd Level: Accessed by pressing the AltGr key, allowing access to additional characters or symbols not available on the 1st and 2nd levels.\n\n2nd level characters are usually printed on keyboard keys and are easy to find. On the other hand, to check the characters on additional levels, you can use xmodmap -pk or look up your keyboard mapping on /usr/share/X11/xkb/symbols.\n\n"
    },
    {
      "title": "Configuring compose key",
      "level": 3,
      "content": "Though typically not on traditional keyboards, a Compose key can be configured to an existent key.\n\nThe Compose key begins a keypress sequence that involves (usually two) additional keypresses. Usage is typically either for entering characters in a language that the keyboard was not designed for, or for other less-used characters that are not covered with the AltGr modifier. For example, pressing Compose ' e produces é, or Compose - - - will produce an \"em dash\": —.\n\nThough a few more eccentric keyboards feature a Compose key, its availability is usually through substituting an already existing key to it. For example, to make the Menu key a Compose key use the Desktop environment configuration, or pass compose:menu to XkbOptions (or setxkbmap: setxkbmap -option compose:menu). Allowed key substitutions are defined in /usr/share/X11/xkb/rules/base.lst:\n\n```\n$ grep \"compose:\" /usr/share/X11/xkb/rules/base.lst\n```\n\nIf the desired mapping is not found in that file, an alternative is to use xmodmap to map the desired key to the Multi_key keysym, which acts as a compose key by default (note that xmodmap settings are reset by setxkbmap).\n\n"
    },
    {
      "title": "Key combinations",
      "level": 4,
      "content": "The default combinations for the compose keys depend on the locale configured for the session and are stored in /usr/share/X11/locale/used_locale/Compose, where used_locale is for example en_US.UTF-8.\n\nYou can define your own compose key combinations by copying the default file to ~/.XCompose and editing it. Alternatively, create an empty ~/.XCompose and include the default one using include \"%L\", for example:\n\n```\n~/.XCompose\n```\n\n```\ninclude \"%L\"\n\n<Multi_key> <g> <a> : \"α\"\n<Multi_key> <g> <b> : \"β\"\n<Multi_key> <g> <g> : \"γ\"\n```\n\nThe compose key (denoted as <Multi_key> in the ~/.XCompose file) works with any of the thousands of valid Unicode characters, including those outside the Basic Multilingual Plane. Take a look at the Compose(5) man page, it explains the format of the XCompose files.\n\nHowever, GTK does not use XIM by default and therefore does not follow ~/.XCompose keys. This can be fixed by forcing GTK to use XIM by configure the graphical environment variables GTK_IM_MODULE=xim and/or XMODIFIERS=\"@im=none\".\n\n"
    },
    {
      "title": "Currency sign on other key",
      "level": 3,
      "content": "Most European keyboards have a Euro sign (€) printed on on the 5 key. For example, to access it with Alt+5, use the lv3:ralt_switch and eurosign:5 options.\n\nThe Rupee sign (₹) can be used the same way with rupeesign:4.\n\n"
    },
    {
      "title": "Switching state immediately when Caps Lock is pressed",
      "level": 3,
      "content": "Those who prefer typing capital letters with the Caps Lock key may experience a short delay when Caps Lock state is switched, resulting in two or more capital letters (e.g. THe, ARch LInux). This occurs because Caps Lock is enabled immediately once the Caps Lock key is pressed, but is only disabled upon release of the second key-press. This behaviour stems from typewriters where a Caps Lock function was achieved by physically locking the shifted typebars in place, and the release of a shift key-press was the action that caused the release of the lock.\n\nSome more popular operating systems have removed this behaviour, either voluntarily (as it can be confusing to some) or by mistake, however this is a question of preference. Bug reports have been filed on the Xserver bug tracker, as there is currently no easy way to switch to the behaviour reflected by those other operating systems. For anyone who would like to follow up the issue, bug reports and latest working progress can be found at [3] and [4].\n\n"
    },
    {
      "title": "Workaround",
      "level": 4,
      "content": "First, export your keyboard configurations to a file:\n\n```\n$ xkbcomp -xkb $DISPLAY xkbmap\n```\n\nIn the file xkbmap, locate the Caps Lock section which begins with key <CAPS>:\n\n```\nkey <CAPS> {         [       Caps_Lock ] };\n```\n\nand replace whole section with the following code:\n\n```\nkey <CAPS> {\n    repeat=no,\n    type[group1]=\"ALPHABETIC\",\n    symbols[group1]=[ Caps_Lock, Caps_Lock],\n    actions[group1]=[ LockMods(modifiers=Lock), Private(type=3,data[0]=1,data[1]=3,data[2]=3)]\n};\n```\n\nSave and reload keyboard configurations:\n\n```\n$ xkbcomp -w 0 xkbmap $DISPLAY\n```\n\nConsider making it a service launching after X starts, since reloaded configurations do not survive a system reboot.\n\n"
    },
    {
      "title": "One-click key functions",
      "level": 2,
      "content": "To assign an additional one-click function to a modifier key, you can use xcape. For example it is possible to have CapsLock work as Escape when pressed alone, and as Control when used with another key. First set the Control swapping using setxkbmap as mentioned earlier, and xcape to set the Escape association:\n\n```\n$ xcape -e 'Caps_Lock=Escape'\n```\n\nYou can set multiple associations separated with a semicolon, e.g.: Caps_Lock=Escape;Shift_L=Escape.\n\nIf you hold a key for longer than the timeout value (default 500 ms), xcape will not generate a key event.\n\n"
    },
    {
      "title": "Adjusting typematic delay and rate",
      "level": 2,
      "content": "The typematic delay indicates the amount of time (typically in milliseconds) a key needs to be pressed and held in order for the repeating process to begin. After the repeating process has been triggered, the character will be repeated with a certain frequency (usually given in Hz) specified by the typematic rate. Note that these settings are configured separately for Xorg and for the virtual console.\n\n"
    },
    {
      "title": "Using xset",
      "level": 3,
      "content": "The tool xset, provided by xorg-xset, can be used to set the typematic delay and rate for an active X server, though certain actions during runtime may cause the X server to reset these changes and revert instead to its seat defaults.\n\nUsage:\n\n```\n$ xset r rate delay [rate]\n```\n\nFor example to set a typematic delay to 200ms and a typematic rate to 30Hz, use the following command:\n\n```\n$ xset r rate 200 30\n```\n\nIssuing the command without specifying the delay and rate will reset the typematic values to their respective defaults; a delay of 660ms and a rate of 25Hz:\n\n```\n$ xset r rate\n```\n\n"
    },
    {
      "title": "Using xautocfg",
      "level": 3,
      "content": "xautocfgAUR can apply repeat rate settings for newly connected devices automatically. It watches for X11 events and applies repeat rate configuration to newly connected keyboards.\n\nAdjust the configuration:\n\n```\n~/.config/xautocfg.cfg\n```\n\n```\n[keyboard]\n\n# repeat delay in ms\ndelay = 200\n\n# repeat rate in Hz\nrate = 30\n```\n\nIf graphical-session.target is started by your window manager or desktop environment, enable the systemd/User xautocfg.service. Alternatively, launch xautocfg manually.\n\n"
    },
    {
      "title": "Using AutoRepeat configuration option",
      "level": 3,
      "content": "To persist the configuration system-wide, change the seat defaults with an Xorg configuration file as described in #Using X configuration files, and add a AutoRepeat section entry: [5]\n\nThe parameters for AutoRepeat are delay and interval in milliseconds. If you like 25 Hz rate of xset, the corresponding interval 1000 / 25 = 40 milliseconds.\n\n```\n/etc/X11/xorg.conf.d/00-keyboard.conf\n```\n\n```\nSection \"InputClass\"\n        ...\n        Option \"AutoRepeat\" \"200 40\"\n        ...\nEndSection\n```\n\n"
    },
    {
      "title": "Using XServer startup options",
      "level": 3,
      "content": "Another method of persisting the configuration is to pass the desired settings to the X server on its startup using the following options:\n\n- -ardelay milliseconds - sets the autorepeat delay (length of time in milliseconds that a key must be depressed before autorepeat starts).\n- -arinterval milliseconds - sets the autorepeat interval (length of time in milliseconds that should elapse between autorepeat-generated keystrokes).\n\nSee Xserver(1) for a full list of X server options and refer to your display manager for information about how to pass these options.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Madduck guide on extending XKB (archived at Wayback Machine)\n- How to modify a keyboard layout in Linux - Romano Giannetti's blog\n\n"
    }
  ]
}