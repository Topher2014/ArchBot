{
  "title": ".NET (Polski)",
  "url": "https://wiki.archlinux.org/title/.NET_(Polski)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": ".NET (wcześniej nazywany .NET Core) to framework oprogramowania FOSS firmy Microsoft dla języków C#, Visual Basic i F#. Został zaprojektowany tak, aby był wieloplatformowy, modułowy i odpowiedni dla nowoczesnych aplikacji, w przeciwieństwie do swojego poprzednika, .NET Framework.\n\nKod źródłowy .NET jest dostępny pod adresem dotnet/dotnet w serwisie GitHub.\n\n"
    },
    {
      "title": "Instalacja",
      "level": 2,
      "content": "Jeśli chcesz uruchamiać tylko aplikacje .NET, zainstaluj pakiet dotnet-runtime.\n\nAby tworzyć aplikacje z .NET, zainstaluj również dotnet-sdk.\n\nWreszcie, aby tworzyć dynamiczne strony internetowe, aplikacje i usługi przy użyciu ASP.NET Core, zainstaluj aspnet-runtime.\n\nMicrosoft zaleca używanie Visual Studio Code - IDE opartego na Electronie do tworzenia i debugowania aplikacji .NET.\n\nAby zamiast tego użyć .NET 6.0, należy dodać do powyższego pakietu \"-6.0\", na przykład dotnet-runtime-6.0, dotnet-sdk-6.0 i aspnet-runtime-6.0.\n\n"
    },
    {
      "title": "Różnice w wersjach",
      "level": 3,
      "content": "Zestawy .NET SDK są publikowane w ramach kilku schematów wersji. Tylko wersje SDK 1xx mogą być budowane ze źródeł i będą dostępne w oficjalnych repozytoriach. Jeśli potrzebujesz innej wersji, będziesz potrzebować jednego z pakietów *-bin z AUR.\n\n"
    },
    {
      "title": "Ręczna instalacja wielu wersji",
      "level": 3,
      "content": "Można zainstalować wiele wersji .NET SDK lub środowiska uruchomieniowego obok siebie za pomocą skryptu dotnet-install.sh dostarczonego przez .NET Foundation. Dokumentację skryptu można znaleźć tutaj.\n\nNa przykład, to polecenie zainstaluje najnowszą wersję znalezioną w kanale \"STS\" (Standard Term Support) w /usr/share/dotnet:\n\n```\n# ./dotnet-install.sh --install-dir /usr/share/dotnet -channel STS -version latest\n```\n\nMożesz najpierw przeprowadzić symulację instalacji, używając flagi -Dryrun.\n\nPo zainstalowaniu można zweryfikować dostępne zestawy SDK:\n\n```\n$ dotnet --list-sdks\n```\n\n```\n2.2.108 [/usr/share/dotnet/sdk]\n3.0.103 [/usr/share/dotnet/sdk]\n```\n\n```\n$ dotnet --version\n```\n\n```\n3.0.103\n```\n\n"
    },
    {
      "title": "Usuwanie wersji zainstalowanej ręcznie",
      "level": 3,
      "content": "Możesz chcieć usunąć przestarzałe wersje zainstalowane za pomocą dotnet-install.sh. Zautomatyzowane narzędzie .NET Uninstall Tool nadal nie obsługuje systemu Linux, więc deinstalacja musi zostać przeprowadzona ręcznie.\n\n```\n$ dotnet --list-sdks\n```\n\n```\n5.0.100 [/usr/share/dotnet/sdk]\n5.0.102 [/usr/share/dotnet/sdk]\n```\n\nDezinstalacja sdk:\n\n```\n$ SDK_VERSION=\"5.0.100\"\n$ DOTNET_UNINSTALL_PATH=\"/usr/share/dotnet\"\n# rm -rf $DOTNET_UNINSTALL_PATH/sdk/$SDK_VERSION\n```\n\nZa pomocą dotnet-install.sh instalowany jest również host dotnet i współdzielone pakiety, które mogą wymagać dodatkowego usunięcia w zależności od wydania.\n\nPełna deinstalacja wersji .NET (sdk, host, współdzielone pakiety):\n\n```\n$ SDK_VERSION=\"5.0.100\"\n$ DOTNET_VERSION=\"5.0.0\"\n$ DOTNET_UNINSTALL_PATH=\"/usr/share/dotnet\"\n# rm -rf $DOTNET_UNINSTALL_PATH/sdk/$SDK_VERSION\n# rm -rf $DOTNET_UNINSTALL_PATH/shared/Microsoft.NETCore.App/$DOTNET_VERSION\n# rm -rf $DOTNET_UNINSTALL_PATH/shared/Microsoft.AspNetCore.All/$DOTNET_VERSION\n# rm -rf $DOTNET_UNINSTALL_PATH/shared/Microsoft.AspNetCore.App/$DOTNET_VERSION\n# rm -rf $DOTNET_UNINSTALL_PATH/host/fxr/$DOTNET_VERSION\n```\n\n"
    },
    {
      "title": "Instalacja wielu wersji za pośrednictwem AUR",
      "level": 3,
      "content": "Niektóre pakiety AUR dotnet są przeznaczone do instalacji obok siebie. Potrzebny jest tylko jeden pakiet hosta (dotnet-host-binAUR lub dotnet-host) zawierający narzędzie wiersza poleceń, a obok niego można zainstalować dowolne z dostępnych zestawów SDK i środowisk uruchomieniowych (najnowsze pakiety wszystkich głównych wersji). Lista kompatybilnych pakietów:\n\n- dotnet-host-binAUR, dotnet-runtime-binAUR, aspnet-runtime-binAUR, dotnet-sdk-binAUR\n- dotnet-host-preview-binAUR, dotnet-runtime-preview-binAUR, aspnet-runtime-preview-binAUR, dotnet-sdk-preview-binAUR\n- dotnet-runtime-7.0-binAUR, aspnet-runtime-7.0-binAUR, dotnet-sdk-7.0-binAUR,\n- dotnet-runtime-3.0AUR, aspnet-runtime-3.0AUR, dotnet-sdk-3.0AUR,\n- dotnet-runtime-2.2AUR, aspnet-runtime-2.2AUR, dotnet-sdk-2.2AUR, dotnet-sdk-2.2-vs2017AUR\n- dotnet-runtime-2.1AUR, aspnet-runtime-2.1AUR, dotnet-sdk-2.1AUR\n\n"
    },
    {
      "title": "Instalacja PowerShell Core",
      "level": 3,
      "content": "PowerShell Core można również zainstalować jako narzędzie \"globalne\" [1] [2].\n\n```\n# dotnet tool install --global PowerShell\n```\n\naby zaktualizować do bieżącej wersji\n\n```\n# dotnet tool update --global PowerShell\n```\n\nZobacz także PowerShell.\n\n"
    },
    {
      "title": "Telemetria",
      "level": 2,
      "content": "Kompilacja Microsoft .NET SDK domyślnie zbiera dane telemetryczne. Pakiety AUR .NET SDK (warianty *-bin) są oparte na kompilacjach .NET firmy Microsoft. Składniki środowiska uruchomieniowego .NET nie zbierają danych telemetrycznych w żadnym scenariuszu.\n\nKompilacje społecznościowe (w tym te w Arch; począwszy od .NET 7) nie zbierają danych telemetrycznych, zgodnie ze zmianą w .NET SDK wprowadzoną przez Red Hat.\n\nTelemetria może być wyłączona przez ustawienie zmiennej środowiskowej DOTNET_CLI_TELEMETRY_OPTOUT=1.\n\n"
    },
    {
      "title": "Auto-uzupełnianie",
      "level": 2,
      "content": "Wszystkie programy dotnet, które używają System.CommandLine.Parser do analizowania swoich argumentów, obsługują autouzupełnianie. Włączenie go wymaga jedynie dodania kilku wierszy do pliku .bashrc / .zshrc. / .zshrc, jak opisano w ich dokumentacji. Instrukcje dla samodzielnych plików binarnych znajdują się tutaj.\n\n"
    },
    {
      "title": "It was not possible to find any compatible framework version",
      "level": 3,
      "content": "Tłumaczenie: Nie udało się znaleźć żadnej kompatybilnej wersji frameworka\n\nJeśli pojawi się następujący błąd podczas próby uruchomienia nowo utworzonego projektu, nie trzeba już ustawiać zmiennej DOTNET_ROOT, jak opisano w rozwiązaniach różnych problemów GitHub. Pakiet dotnet Archa (od wersji 3.1) instaluje go w zalecanej przez Microsoft lokalizacji /usr/share/dotnet.\n\n```\n$ dotnet run\n```\n\n```\nIt was not possible to find any compatible framework version\nThe framework 'Microsoft.AspNetCore.App', version '3.1.0' was not found.\n  - No frameworks were found.\n\nYou can resolve the problem by installing the specified framework and/or SDK.\n\nThe specified framework can be found at:\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.AspNetCore.App&framework_version=3.1.0&arch=x64&rid=arch-x64\n```\n\nJest to spowodowane tym, że środowisko uruchomieniowe jest dostarczane jako oddzielny pakiet w Arch. Musisz tylko upewnić się, że masz zainstalowany pakiet aspnet-runtime.\n\n"
    },
    {
      "title": "\"the required library libhostfxr.so could not be found\" error",
      "level": 3,
      "content": "Tłumaczenie: błąd \"nie można znaleźć wymaganej biblioteki libhostfxr.so\"\n\nNiektóre narzędzia dotnet SDK (na przykład libman, dotnet-watch itp.) mogą oczekiwać, że zmienna środowiskowa DOTNET_ROOT jest wstępnie skonfigurowana. Jeśli tak nie jest, można zaobserwować błąd taki jak ten: [3].\n\n```\nA fatal error occurred, the required library libhostfxr.so could not be found.\nIf this is a self-contained application, that library should exist in [/home/my_user/.dotnet/tools/.store/microsoft.web.librarymanager.cli/1.0.172/microsoft.web.librarymanager.cli/1.0.172/tools/netcoreapp2.1/any/].\nIf this is a framework-dependent application, install the runtime in the default location [/usr/share/dotnet] or use the DOTNET_ROOT environment variable to specify the runtime location.\n```\n\nObejściem jest ręczne wyeksportowanie DOTNET_ROOT w powłoce:\n\n```\n~/.bashrc\n```\n\n```\nexport DOTNET_ROOT=/opt/dotnet\n```\n\n"
    },
    {
      "title": "Error MSB4019: The imported project \"/usr/share/dotnet/sdk/.../Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.Common.targets\" was not found. Confirm that the expression in the Import declaration ... is correct, and that the file exists on disk.",
      "level": 3,
      "content": "Tłumaczenie: Błąd MSB4019: Zaimportowany projekt \"/usr/share/dotnet/sdk/.../Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.Common.targets\" nie został znaleziony. Upewnij się, że wyrażenie w deklaracji importu ... jest poprawne, a plik istnieje na dysku.\n\nDzieje się tak po aktualizacji. Aktualnie uruchomiona powłoka / sesja logowania przechowuje zmienne środowiskowe dla wersji dotnet SDK innej niż zainstalowana. Ponowne uruchomienie powłoki lub ponowne zalogowanie powinno to naprawić.\n\n"
    },
    {
      "title": "SDK specified could not be found",
      "level": 3,
      "content": "Tłumaczenie: Nie można znaleźć określonego zestawu SDK.\n\nUważa się, że jest to spowodowane konfliktem między bibliotekami Mono i MSBuild SDK a bibliotekami dotnet. Aby to naprawić, należy ręcznie wyeksportować ścieżkę w powłoce (zastępując numer wersji w razie potrzeby), np:\n\n```\n~/.bashrc\n```\n\n```\nexport MSBuildSDKsPath=$( echo /usr/share/dotnet/sdk/3.*/Sdks );\n```\n\n"
    },
    {
      "title": "polecenie dotnet nadal zainstalowane",
      "level": 3,
      "content": "Zainstalowane pakiety nie odinstalowują dotnet-host, więc odinstaluj dotnet-host.\n\n"
    },
    {
      "title": "Zobacz także",
      "level": 2,
      "content": "- Strona domowa .NET\n- .NET Foundation\n- Przeglądarka API .NET\n\n"
    }
  ]
}