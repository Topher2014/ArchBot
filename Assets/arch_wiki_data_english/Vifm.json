{
  "title": "Vifm",
  "url": "https://wiki.archlinux.org/title/Vifm",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- File manager functionality\n- lf\n- Midnight Commander\n- nnn\n- ranger\n\nFrom the Vifm home page:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the vifm package, or vifm-gitAUR for the development version.\n\n"
    },
    {
      "title": "Help file",
      "level": 2,
      "content": "Basic information about Vifm is given in the help file. You can view it by opening Vifm and typing:\n\n```\n:h\n```\n\nAnother good source of information is vifm(1).\n\n"
    },
    {
      "title": "Customizing Vifm",
      "level": 2,
      "content": "Vifm creates and populates a vifm directory in XDG_CONFIG_HOME containing the following:\n\n- vifmrc — a well commented configuration file that can be edited to suit your working style.\n- vifm-help.txt — the help text\n- vifminfo — bookmarks and trash contents — it is not recommended to edit this file by hand\n- Trash/ directory — self explanatory — see :h vifm-trash in vifm\n- scripts/ directory — see :h vifm-scripts in vifm\n- colors/ directory — color schemes — see :h vifm-colors in vifm Default.vifm — well commented default color scheme — can be copied to create user-created color schemes\n\n- Default.vifm — well commented default color scheme — can be copied to create user-created color schemes\n\nTo get started, read the information available in:\n\n- /usr/share/doc/vifm/\n- /usr/share/vifm/vifm-help.txt or man vifm\n- :h in vifm\n\n"
    },
    {
      "title": "Color schemes",
      "level": 3,
      "content": "The ~/.vifm/colors directory contains the color schemes. The format is outlined in the file and follows vi/vim syntax highlight format. It is basically:\n\n```\nhighlight group cterm=attribute ctermfg=color ctermbg=color\n```\n\nAn example color scheme looks like this:\n\n```\nhighlight Win cterm=none ctermfg=white ctermbg=black\nhighlight Directory cterm=bold ctermfg=cyan ctermbg=none\nhighlight Link cterm=bold ctermfg=yellow ctermbg=none\nhighlight BrokenLink cterm=bold ctermfg=red ctermbg=none\nhighlight Socket cterm=bold ctermfg=magenta ctermbg=none\nhighlight Device cterm=bold ctermfg=red ctermbg=none\nhighlight Fifo cterm=bold ctermfg=cyan ctermbg=none\nhighlight Executable cterm=bold ctermfg=green ctermbg=none\nhighlight Selected cterm=bold ctermfg=magenta ctermbg=none\nhighlight CurrLine cterm=bold ctermfg=none ctermbg=blue\nhighlight TopLine cterm=none ctermfg=black ctermbg=white\nhighlight TopLineSel cterm=bold ctermfg=black ctermbg=none\nhighlight StatusLine cterm=bold ctermfg=black ctermbg=white\nhighlight WildMenu cterm=underline,reverse ctermfg=white ctermbg=black\nhighlight CmdLine cterm=none ctermfg=white ctermbg=black\nhighlight ErrorMsg cterm=none ctermfg=red ctermbg=black\nhighlight Border cterm=none ctermfg=black ctermbg=white\n```\n\nYou can also highlight different file types using regular expressions:\n\n```\nhighlight /^.*\\.(mp3|ogg|oga|flac|m4a)$/ ctermfg=magenta\nhighlight /^.*\\.(jpg|jpeg|png|gif|tiff|webp|bmp|svg|svgz)$/ ctermfg=yellow\nhighlight /^.*\\.(zip|gz|bz2|xz|tar|tgz|tbz2|7z|rar|iso|rpm|deb)$/ ctermfg=red\n```\n\nOther color schemes can be seen here.\n\n"
    },
    {
      "title": "Key mapping",
      "level": 3,
      "content": "As of 0.6.2, you can customize key bindings in Vifm. These can be set from the command mode using the map command, like so:\n\n```\n:map ] :s\n```\n\nHowever, these mappings will not be saved between sessions. To map a key permanently, place them in your vifmrc. More sample mappings can be seen at the end of that file.\n\n"
    },
    {
      "title": "Opening files in Vifm",
      "level": 3,
      "content": "You can assign applications to file types in vifmrc, e.g.:\n\n```\nfiletype *.jpg,*.jpeg,*.png,*.gif feh %f 2>/dev/null &\nfiletype *.md5 md5sum -c %f\n```\n\nSeveral defaults can be found in vifmrc. These can be edited or added following the same format.\n\n"
    },
    {
      "title": "Browse images in current directory with feh",
      "level": 4,
      "content": "```\nfiletype *.jpg,*.jpeg,*.png,*.gif\n       \\ {View in feh}\n       \\ feh -FZ %d --start-at %d/%c 2>/dev/null\n```\n\nThis displays your selected image in feh and enables you to browse all other images in the directory as well, in their default order.\n\n"
    },
    {
      "title": "User commands",
      "level": 3,
      "content": "You can also create custom commands in vifmrc, e.g.:\n\n```\ncommand df df -h %m 2> /dev/null\ncommand diff vim -d %f %F\n```\n\n"
    },
    {
      "title": "Creating symbolic links",
      "level": 4,
      "content": "```\ncommand link ln -s %d/%f %D\n```\n\nWhen you call\n\n```\n:link\n```\n\na link of the selected file is made in the other directory (if you are in split view). It even works with multiple files selected with visual (v) or tag (t).\n\n"
    },
    {
      "title": "Torrent creation",
      "level": 4,
      "content": "Make a .torrent of the current file in the other tab's directory:\n\n```\ncommand mkt mktorrent -p -a [your announce url here] -o %D/%f.torrent %d/%f\n```\n\n"
    },
    {
      "title": "Marks",
      "level": 3,
      "content": "Marks can be set the same way as in vi. To set a mark for current file:\n\n```\nm[a-z][A-Z][0-9]\n```\n\nGo to a file identified by a mark:\n\n```\n'[a-z][A-Z][0-9]\n```\n\nVifm will remember the marks between sessions.\n\n"
    },
    {
      "title": "Previews",
      "level": 3,
      "content": "Provided poppler is installed, putting\n\n```\nfileviewer *.pdf\n  \\ pdftotext %c -\n```\n\ninto vifmrc enables PDF previewing using pdftotext. The %c is a vifm macro for the current file under the cursor. The preview is activated with\n\n```\n:view\n```\n\nNeat image previewing can be achieved using img2txt from libcaca:\n\n```\nfileviewer *.png,*.jpeg,*.jpg\n \\ img2txt %c\n```\n\nPreviewing the contents of tar archives:\n\n```\nfileviewer *.tar,*.tar.gz\n \\ tar -tvf %c\n```\n\nFor previewing HTML documents, suitable programs are text-based browsers including lynx, links or w3m:\n\n```\nfileviewer *.html\n \\ w3m %c\n```\n\nPreviewing office files by converting them to HTML and then rendering that with w3m:\n\n```\nfileviewer *.odt,*.doc,*.docx,*.ods,*.xls,*.xlsx\n \\ libreoffice --convert-to html --outdir /tmp/ %c &>/dev/null && w3m /tmp/%c:r.html\n```\n\nFor printing text instead of previewing the file (for binary files for example):\n\n```\nfileviewer *.exe\n \\ echo Binary file: no preview available. %i\n```\n\n%i is there because %c is implicitly used if no other macro is used. In this case, %i is ignored.\n\nFor handling filetypes not handled by anything else, put fileviewer * <your command> as the last fileviewer option in your configuration file.\n\nFurther useful programs for previews include\n\n- tree for directory previews\n- mp3info for viewing information about mp3 files\n- mediainfo for the mediainfo program (audio and video information)\n- highlight for syntax highlighting\n\n"
    },
    {
      "title": "Using vifmimg",
      "level": 4,
      "content": "It is also possible to clone vifmimg into your ~/.config/vifm directory. Than you need to create an alias to run the vifmrun script, which will prepare everything for the previews:\n\n```\nalias v=\"~/.config/vifm/vifmrun .\"\n```\n\nvifm should start just by typing v in your terminal now.\n\n- It is necessary to install ueberzug otherwise the preview will not work.\n- If you selected a file which starts displaying the preview and you want to switch to the shell, it might happen that the preview does not disappear. In that case you will need to add a new command: command! clear vifmimg clear and add this command to your mappings which are quitting your current vifm runtime, by going into a shell: nmap S :clear If you type S, you will enter your shell and the preview will be removed.\n\n```\ncommand! clear vifmimg clear\n```\n\n```\nnmap S :clear\n```\n\n"
    },
    {
      "title": "Single stroke to access command line",
      "level": 4,
      "content": "```\nnmap ; :\n```\n\n"
    },
    {
      "title": "Faster movement",
      "level": 4,
      "content": "Hold shift to jump five files\n\n```\nnnoremap J 5j\nnnoremap K 5k\n```\n\n"
    },
    {
      "title": "Panel resizing",
      "level": 4,
      "content": "Just type - or _ to resize the panels\n\n```\nnnoremap - <C-w>5<\nnnoremap _ <C-w>5>\n```\n\n"
    },
    {
      "title": "Yanking",
      "level": 4,
      "content": "Yank the parent directory path by typing yd\n\n```\nnnoremap yd :!echo -n %d | xclip -selection clipboard %i<cr>:echo expand('%\"d') \"is yanked to clipboard\"<cr>\n```\n\nYank the absolute path to the selected element by typing yf\n\n```\nnnoremap yf :!echo -n %c:p | xclip -selection clipboard %i<cr>:echo expand('%\"c:p') \"is yanked to clipboard\"<cr>\n```\n\nIn a Wayland environment replace xclip -selection clipboard with wl-copy.\n\n"
    },
    {
      "title": "Non-vim users",
      "level": 3,
      "content": "If you use vi, nvim (Neovim), or another editor, you can add set vicmd=vi, set vicmd=nvim, or equivalent to the bottom of your vifmrc file.\n\n"
    },
    {
      "title": "Total size of selected files",
      "level": 3,
      "content": "To get the total size of selected files change %s to %E in vifmrc, like so:\n\n```\nset statusline=\"  %t%= %A %10u:%-7g %15E %20d  \"\n```\n\n"
    },
    {
      "title": "Use output of external program in status line",
      "level": 3,
      "content": "Here is a status line that calls lsattr, passing it the name of the file currently under the cursor:\n\n```\nset statusline=\"%{system('lsattr -l ' . expand('%c'))}\"\n```\n\n"
    },
    {
      "title": "Print the currently selected file",
      "level": 3,
      "content": "If you want to print a file with your printer, then you can create a command with lp:\n\n```\ncommand! print lp -n 1 -o sides=two-sided-long-edge %f\n```\n\nYou just need to select your file which should be printed and type :print\n\n"
    },
    {
      "title": "Drag and Drop",
      "level": 3,
      "content": "You will need to install dragon-dropAUR and add a new command:\n\n```\ncommand! dragon dragon-drop -a -x %f\n```\n\nIf you want, you can also set a shortcut to this new command:\n\n```\nnmap <C-d> :dragon<CR>\n```\n\nSo if you press Ctrl+d a window for your currently selected file is created so you can drop it somewhere else. If you want to drag multiple files, just select the files with t and press Ctrl+d.\n\nFor more information see expression syntax and available functions.\n\n"
    }
  ]
}