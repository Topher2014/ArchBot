{
  "title": "BeeGFS",
  "url": "https://wiki.archlinux.org/title/BeeGFS",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nRelated articles\n\n- Ceph\n- GlusterFS\n- File Systems\n\nBeeGFS is a scalable network-storage platform with a focus on being distributed, resilient, highly configurable and having good performance and high reliability. BeeGFS is extremely configurable, with administrators being able to control virtually all aspects of the system. A command line interface is used to monitor and control the cluster.\n\nFrom Wikipedia:\n\nFrom BeeGFS.io:\n\n"
    },
    {
      "title": "Terminology",
      "level": 2,
      "content": "Table content:\nNode Type and Description | Packages\nManagement Server (one node) Manages configuration and group membership Hostname or IP address must be known by other nodes at service start time | beegfs-mgmtdAUR\nMetadata Server (at least one node) Stores directory information and allocates file space on storage servers | beegfs-metaAUR\nStorage Server (at least one node) Stores raw file contents | beegfs-storageAUR\nInfluxDB / Grafana based Monitoring Server (optional) Continuous monitoring of servers Live statistics beegfs-admon (Java based administration and monitoring GUI), must not be installed on the same server | beegfs-monAUR\nBeeGFS utilities for administrators beegfs-ctl tool for command-line administration beegfs-fsck tool for file system checking Several small helper scripts such logging and DNS lookup functionality | beegfs-utilsAUR\nBeeGFS Common Common files for all packages Enables support for remote direct memory access rdma-core based on the OpenFabrics IBVerbs API, through libbeegfs-ib. | beegfs-commonAUR\nClient Kernel module to mount the file system Requires userspace helper daemon for logging and hostname resolution | beegfs-clientAUR\n\n- Manages configuration and group membership\n- Hostname or IP address must be known by other nodes at service start time\n\n- Stores directory information and allocates file space on storage servers\n\n- Stores raw file contents\n\n- Continuous monitoring of servers\n- Live statistics\n- beegfs-admon (Java based administration and monitoring GUI), must not be installed on the same server\n\n- beegfs-ctl tool for command-line administration\n- beegfs-fsck tool for file system checking\n- Several small helper scripts such logging and DNS lookup functionality\n\n- Common files for all packages\n- Enables support for remote direct memory access rdma-core based on the OpenFabrics IBVerbs API, through libbeegfs-ib.\n\n- Kernel module to mount the file system\n- Requires userspace helper daemon for logging and hostname resolution\n\nIn addition to the free and open-source packages described here, BeeGFS also offers a number of Enterprise Features and Professional Support, which include:\n\n- High Availability\n- Quota Enforcement\n- Access Control Lists (ACLs)\n- Storage Pools\n- Burst buffer function with BeeOND\n\n"
    },
    {
      "title": "Example cluster deployment",
      "level": 3,
      "content": "The following hardware configuration will be used in this example:\n\nTable content:\nHostname | IP Address | Description\nnode01 | 192.168.0.1 | Management Server and Monitoring (optional) Server\nnode02 | 192.168.0.2 | Metadata Server\nnode03 | 192.168.0.3 | Storage Server\nnode04 | 192.168.0.4 | Client\n\n"
    },
    {
      "title": "NTP client",
      "level": 3,
      "content": "Install and run a time synchronization client on all the nodes. See Time synchronization for details.\n\n"
    },
    {
      "title": "Management server",
      "level": 3,
      "content": "Install it with the package beegfs-mgmtdAUR on the management node 192.168.0.1.\n\nThe management service needs to know where it can store its data. It will only store some node information like connectivity data, so it will not require much storage space and its data access is not performance critical. Thus, this service is typically not running on a dedicated machine.\n\n```\n/etc/beegfs/beegfs-mgmtd\n```\n\n```\nstoreMgmtdDirectory = /mnt/beegfs/beegfs-mgmtd\n```\n\nStart/enable the beegfs-mgmtd@node01.service on the management node.\n\n"
    },
    {
      "title": "Monitoring server",
      "level": 3,
      "content": "Install the package beegfs-monAUR on the management/monitoring node 192.168.0.1, which collects statistics from the system and provides them to the user using a time series database InfluxDB. For visualization of the data beegfs-mon provides predefined Grafana panels that can be used out of the box.\n\nBefore running beegfs-mon, you need to edit the configuration file /etc/beegfs/beegfs-mon.conf. If you have everything installed on the same host, you only need to specify the management host:\n\n```\n/etc/beegfs/beegfs-mon.conf\n```\n\n```\nsysMgmtHost = localhost\n```\n\n```\n/etc/beegfs/beegfs-mon.conf\n```\n\n```\ndbHostName = node04\ndbHostPort = 9096\ndbHostName = beegfs_mon_client\n```\n\nStart/enable the beegfs-mon@node01.service on the management/monitoring node.\n\n"
    },
    {
      "title": "Configuration of default Grafana panels",
      "level": 4,
      "content": "You can use the provided installation script for default InfluxDB and Grafana deployments on the same host.\n\n```\n# cd /etc/beegfs/grafana\n# ./import-dashboards default\n```\n\n"
    },
    {
      "title": "Accessing Grafana panels",
      "level": 4,
      "content": "Access the application on localhost, e.g.: http://127.0.0.1:3000 . Refer to Custom Grafana Panel Configuration for non-default installations and for the Reference to All Metrics monitored.\n\n"
    },
    {
      "title": "Metadata server",
      "level": 3,
      "content": "Install the package beegfs-metaAUR on the metadata server(s), i.e. 192.168.0.2.\n\nThe metadata service needs to know where it can store its data and where the management service is running. Typically, one will have multiple metadata services running on different machines.\n\n```\n/etc/beegfs/beegfs-meta.conf\n```\n\n```\nsysMgmtdHost = node01\nstoreMetaDirectory = /mnt/beegfs/beegfs-meta\n```\n\nStart/enable the beegfs-meta@node02.service on the metadata node.\n\n"
    },
    {
      "title": "Storage server",
      "level": 3,
      "content": "Install the package beegfs-storageAUR on the storage server(s), i.e. 192.168.0.3.\n\nThe storage service needs to know where it can store its data and how to reach the management server. Typically, one will have multiple storage services running on different machines and/or multiple storage targets (e.g. multiple RAID volumes) per storage service.\n\n```\n/etc/beegfs/beegfs-storage.conf\n```\n\n```\nsysMgmtdHost = node01\nstoreStorageDirectory = /mnt/beegfs/beegfs-storage\n```\n\nStart/enable the beegfs-storage@node03.service on the storage node.\n\n"
    },
    {
      "title": "Client",
      "level": 3,
      "content": "Install the package beegfs-clientAUR on the client node, which will build the client Kernel module.\n\nThe client service needs to know where it can reach the management server.\n\n```\n/etc/beegfs/beegfs-client.conf\n```\n\n```\nsysMgmtdHost = node01\n```\n\nThe client service needs to know where it can mount the cluster storage, as well as the location of the client configuration file.\n\n```\n/etc/beegfs/beegfs-mount.conf\n```\n\n```\n/mnt/beegfs/beegfs-mount /etc/beegfs/beegfs-client.conf\n```\n\nLoad the Kernel module and its dependencies.\n\n```\n# modprobe beegfs\n```\n\nStart/enable the beegfs-helperd@node04.service on the client node.\n\nStart/enable the beegfs-client.service on the client node.\n\n"
    },
    {
      "title": "Utilities",
      "level": 3,
      "content": "Install the package beegfs-utilsAUR.\n\n"
    },
    {
      "title": "Check connectivity",
      "level": 4,
      "content": "Check the detected network interfaces and transport protocols from a client node with the following commands:\n\n```\n# beegfs-ctl --listnodes --nodetype=mgmt --nicdetails \n  node01 [ID: 1]\n    Ports: UDP: 8008; TCP: 8008\n    Interfaces: \n    + enp0s31f6[ip addr: 192.168.0.1; type: TCP]\n```\n\n```\n# beegfs-ctl --listnodes --nodetype=meta --nicdetails \n  node02 [ID: 2]\n    Ports: UDP: 8005; TCP: 8005\n    Interfaces: \n    + eno1[ip addr: 192.168.0.2; type: TCP]\n```\n\n```\n# beegfs-ctl --listnodes --nodetype=storage --nicdetails \n  node03 [ID: 3]\n    Ports: UDP: 8003; TCP: 8003\n    Interfaces: \n    + eno1[ip addr: 192.168.0.3; type: TCP]\n```\n\n```\n# beegfs-ctl --listnodes --nodetype=client --nicdetails \n  4E451-5DAEDCBF-node04 [ID: 4]\n    Ports: UDP: 8004; TCP: 0\n    Interfaces: \n    + wlo1[ip addr: 192.168.0.4; type: TCP]\n```\n\n"
    },
    {
      "title": "Server tuning and advanced features",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "InfiniBand Support",
      "level": 3,
      "content": "- Explicitly Install beegfs-commonAUR, which will provide libbeegfs-ib.so shared object libraries.\n- Enable support for RDMA-capable network hardware.\n- Rebuild the client kernel module.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official site Homepage Documentation\n- Official source code GitLab BeeGFS RPM/DEB Package Build Files\n\n- Homepage\n- Documentation\n\n- GitLab BeeGFS\n- RPM/DEB Package Build Files\n\n"
    }
  ]
}