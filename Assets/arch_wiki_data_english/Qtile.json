{
  "title": "Qtile",
  "url": "https://wiki.archlinux.org/title/Qtile",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Comparison of tiling window managers\n- Window manager\n\nFrom the project's website:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install one of the following packages:\n\n- qtile for the latest official release.\n- qtile-gitAUR for the development version.\n\nIn order to run Qtile as a Wayland compositor you will need to install python-pywlroots.\n\n"
    },
    {
      "title": "Xorg",
      "level": 3,
      "content": "To run Qtile as an X11 window manager, run qtile start with xinit.\n\n"
    },
    {
      "title": "Wayland",
      "level": 3,
      "content": "Start Qtile as a Wayland compositor by running qtile start -b wayland.\n\nFor the status of the Wayland development progress of Qtile, see https://github.com/qtile/qtile/discussions/2409.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "As described in Configuration Lookup (or in the alternate documentation), Qtile provides a default configuration file at ~/.config/qtile/config.py that will be used in absence of user-defined ones.\n\nThe default configuration includes the shortcut Super+Enter to open a new terminal (selected from a hardcoded list), and Super+Ctrl+q to quit Qtile.\n\nThe most recent default configuration file can be downloaded from the git repository at libqtile/resources/default_config.py.\n\nSeveral more complete configuration file examples can be found in the qtile-examples repository.\n\nThe configuration is fully done in Python: for a very quick introduction to the language you can read this tutorial.\n\nBefore restarting Qtile you can test your configuration file for syntax errors using the command:\n\n```\n$ python -m py_compile ~/.config/qtile/config.py\n```\n\nIf the command gives no output, your script is correct.\n\nAlternatively, the command:\n\n```\n$ qtile check\n```\n\nwill perform a syntax check followed by additional type checking.\n\n"
    },
    {
      "title": "Groups",
      "level": 3,
      "content": "In Qtile, the workspaces (or views) are called Groups. They can be defined as following:\n\n```\nfrom libqtile.config import Group, Match\n...\ngroups = [\n    Group(\"term\"),\n    Group(\"irc\"),\n    Group(\"web\", matches=[Match(title=[\"Firefox\"])]),\n   ]\n...\n```\n\n"
    },
    {
      "title": "Group Rules",
      "level": 3,
      "content": "The following example shows how you can automatically move applications to workspaces based on properties such as title and wm_class. You might want to use xprop if you are running on X to get these.\n\n```\nfrom libqtile.config import Group, Match\n...\ndef is_text_editor(window):\n    result = \"neovim\" in (window.name or \"\").lower()\n    return result\n\ndef is_terminal(window):\n    result = \"kitty\" in (window.name or \"\").lower() and not is_text_editor(window)\n    return result\n...\ngroups = [\n    Group(name=str(idx), **group)\n    for idx, group in enumerate(\n        [\n            {\n                \"label\": \"term\",\n                # restrict layouts since tiling is handled by kitty\n                \"layouts\": [layout.Max()], \n                \"matches\": [\n                    Match(func=is_terminal),\n                ],\n            },\n            {\n                \"label\": \"browser\",\n                \"matches\": [\n                    Match(role=\"browser\"),\n                ],\n            },\n            {\n                \"label\": \"music\",\n                \"matches\": [\n                    Match(title=\"YouTube Music\"),\n                ],\n            },\n            {\"label\": \"text editor\", \"matches\": [Match(func=is_text_editor)]},\n            {\"label\": \"other\"},\n        ],\n        start=1,\n    )\n]\n...\n```\n\n"
    },
    {
      "title": "Keys",
      "level": 3,
      "content": "You can configure your shortcuts with the Key class. Here is an example of the shortcut Alt+Shift+q to quit the window manager.\n\n```\nfrom libqtile.config import Key\nfrom libqtile.command import lazy\n...\nkeys = [\n    Key(\n        [\"mod1\", \"shift\"], \"q\",\n        lazy.shutdown())\n   ]\n...\n```\n\nYou can find out which modX corresponds to which key with the command Xmodmap.\n\n"
    },
    {
      "title": "Sound",
      "level": 4,
      "content": "You can add shortcuts to easily control the sound volume and state by adding a user to the audio group and using the alsamixer command-line interface, which can be installed through the alsa-utils package.\n\n```\nkeys= [\n    ...\n    # Sound\n    Key([], \"XF86AudioMute\", lazy.spawn(\"amixer -q set Master toggle\")),\n    Key([], \"XF86AudioLowerVolume\", lazy.spawn(\"amixer -c 0 sset Master 1- unmute\")),\n    Key([], \"XF86AudioRaiseVolume\", lazy.spawn(\"amixer -c 0 sset Master 1+ unmute\"))\n   ]\n```\n\n"
    },
    {
      "title": "Language",
      "level": 4,
      "content": "You can add shortcuts to easily switch between keyboard layouts in different languages using setxkbmap for example :\n\n```\nkeys= [\n    ...\n    # Language \n        Key([mod], \"F1\",\n            lazy.spawn(\"setxkbmap us\"), \n            desc= \"Change to US layout\"),\n        Key([mod],\"F2\",\n            lazy.spawn(\"setxkbmap gr\"),\n            desc= \"Change to Greek layout\"),\n       ]\n```\n\n"
    },
    {
      "title": "Screens",
      "level": 3,
      "content": "Create one Screen class for every monitor you have. The bars of Qtile are configured in the Screen class as in the following example:\n\n```\nfrom libqtile.config import Screen\nfrom libqtile import bar, widget\nimport os.path\n...\nscreens = [\n    Screen(\n        wallpaper=os.path.join(os.path.expanduser(\"~\"), \"Photos/Wallpapers/arch_fill.png\"),\n        wallpaper_mode=\"fill\",\n        bottom=bar.Bar([          # add a bar to the bottom of the screen\n            widget.GroupBox(),    # display the current Group\n            widget.WindowName()   # display the name of the window that currently has focus\n            ], 30))\n   ]\n...\n```\n\n"
    },
    {
      "title": "Bars and widgets",
      "level": 4,
      "content": "You can find a list of all the built-in widgets in the official documentation (or in the alternate documentation).\n\nIf you want to add a widget to your bar, just add it like in the example above (for the WindowName widget). For example, if we want to add a battery notification, we can use the Battery widget:\n\n```\nfrom libqtile.config import Screen\nfrom libqtile import bar, widget\n...\nscreens = [\n    Screen(top=bar.Bar([\n        widget.GroupBox(),    # display the current Group\n        widget.Battery()      # display the battery state\n       ], 30))\n   ]\n...\n```\n\n"
    },
    {
      "title": "Using Polybar as the main bar",
      "level": 4,
      "content": "To use Polybar instead of the default bar, you need to delete contents of the screen class:\n\n```\nfrom libqtile.config import Screen\nfrom libqtile import bar, widget\n...\nscreens = [\n    Screen()\n]\n...\n```\n\nTo restart Polybar with Qtile, add Polybar's launching script with spawn command to restart Key in #Keys class, for example:\n\n```\n...\nkeys = [\n    Key([mod, \"control\"], \"r\", lazy.reload_config(), lazy.spawn(\"~/.config/polybar/launch.sh\")),\n]\n...\n```\n\n"
    },
    {
      "title": "Autostart",
      "level": 3,
      "content": "You can autostart applications using hooks, specifically the startup hook. For a list of available hooks see the documentation (or the alternate documentation).\n\nHere is an example where an application starts only once:\n\n```\nimport os\nimport subprocess\n\nfrom libqtile import hook\n\n@hook.subscribe.startup_once\ndef autostart():\n    script = os.path.expanduser(\"~/.config/qtile/autostart.sh\")\n    subprocess.run([script])\n```\n\n"
    },
    {
      "title": "Debugging",
      "level": 2,
      "content": "Qtile writes its log into ~/.local/share/qtile/qtile.log\n\n"
    },
    {
      "title": "xinit",
      "level": 3,
      "content": "Starting Qtile on a different virtual screen can help diagnosing issues:\n\n```\n$ echo \"exec qtile start\" > /tmp/.start_qtile; xinit /tmp/.start_qtile -- :2\n```\n\n"
    },
    {
      "title": "Xephyr",
      "level": 3,
      "content": "Qtile provides a Xephyr development script that can be easily modified to instantiate a system-installed package by replacing:\n\n```\nenv DISPLAY=${XDISPLAY} QTILE_XEPHYR=1 ${PYTHON} \"${HERE}\"/../bin/qtile start -l ${LOG_LEVEL} $@ &\n```\n\nwith\n\n```\nenv DISPLAY=${XDISPLAY} QTILE_XEPHYR=1 qtile start -l ${LOG_LEVEL} $@ &\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Qtile website\n- The official documentation\n- An alternate source of official documentation which can be used while \"docs.qtile.org\" is down, as seen in issue 4295\n- Qtile examples\n- qtile-extras provides additional features to qtile including widget decorations, additional widgets, window border decorations and more.\n\n"
    }
  ]
}