{
  "title": "System76 Darter Pro 6",
  "url": "https://wiki.archlinux.org/title/System76_Darter_Pro_6",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section does not follow the Laptop page guidelines.** This article or section does not follow the Laptop page guidelines.\n\nThis article or section does not follow the Laptop page guidelines.\n\n"
    },
    {
      "title": "Drivers",
      "level": 2,
      "content": "Driver support for the System76 Darter Pro 6 should be included the kernel as of Linux 5.5.\n\nThe system76-firmware package provide firmware updating functionality such as system76-firmware-cli.\n\n"
    },
    {
      "title": "Screen Brightness",
      "level": 2,
      "content": "Works out of the box with the xorg-xbacklight package.\n\n"
    },
    {
      "title": "Keyboard Backlight",
      "level": 2,
      "content": "The keyboard backlight can be controlled programmatically via /sys entries. Specifically,\n\n```\n# sh -c \"echo 255 > /sys/class/leds/system76_acpi::kbd_backlight/brightness\"\n```\n\nwill increase the brightness to its maximum, and\n\n```\n# sh -c \"echo FFA500 > /sys/class/leds/system76_acpi::kbd_backlight/color\"\n```\n\nwill set the color of the backlight via a 6-digit RGB hex code.\n\n"
    },
    {
      "title": "Palm Detection",
      "level": 2,
      "content": "If the touchpad is not sensitive enough to detect your palm, then it is possible to reduce the palm pressure detection threshold using libinput's quirks. The first step is to follow the instructions for debugging touchpad pressure (you will need the python-pyudev and python-libevdev packages installed). Once you run the program, you’ll be able to experiment with different ways to touch the touchpad and see which things are registered as clicks and which are registered as a palm.\n\nOnce you have found the ideal palm pressure threshold, you can make it persistent by creating a libinput quirks file at /etc/libinput/local-overrides.quirks. For example, the following decreases the threshold to 70:\n\n```\n[Touchpad pressure override]\nMatchUdevType=touchpad\nMatchName=*SynPS/2 Synaptics TouchPad\nMatchDMIModalias=dmi:*svnSystem76*pvrdarp6*\nAttrPalmPressureThreshold=70\n```\n\nTo confirm it is working correctly, run\n\n```\n$ libinput quirks list /dev/input/eventXX\n```\n\nwhere XX is the number of the event device. (It should be shown in the output of the libinput measure touchpad-pressure command that you ran above.) The output should look something like this, with no errors:\n\n```\nModelSynapticsSerialTouchpad=1\nAttrPalmPressureThreshold=70\n```\n\nAt this point, you can reboot and the setting should be applied persistently.\n\n"
    },
    {
      "title": "X11",
      "level": 2,
      "content": "Install intel-media-driver for hardware accelerated graphics. Do NOT install xf86-video-intel, and libva-mesa-driver packages.\n\n"
    },
    {
      "title": "Suspend/Resume",
      "level": 2,
      "content": "Occasionally, on Linux 5.4, it was found that the laptop would become unresponsive when resuming from sleep. After about 90 seconds, the laptop would unfreeze itself and resume normal operation. After profiling the kernel with suspendresume, it was found that the culprit was the thunderbolt port. Namely, this error message was found in the output of dmesg:\n\n```\n[  803.725685] thunderbolt 0000:03:00.0: failed to send driver ready to ICM\n```\n\nOne approach to fix this is to disable thunderbolt support on suspend and then re-enable it on resume. This can be done via a systemd hook script.\n\nDrop the following into /usr/lib/systemd/system-sleep/system76-darter-hook-sleep and make it executable:\n\n```\n#!/bin/sh\n\n# This is a systemd hook script that is run whenever\n# suspend/resume takes place. It should be symlinked into\n# /usr/lib/systemd/system-sleep.\n\n# $1 is 'pre' (going to sleep) or 'post' (waking up)\n# $2 is 'suspend', 'hibernate' or 'hybrid-sleep'\ncase \"$1/$2\" in\n  pre/*)\n    if lsmod | grep -q thunderbolt; then\n      rmmod thunderbolt\n    fi\n    ;;\n  post/*)\n    modprobe thunderbolt\n    ;;\nesac\n```\n\nAlternatively, System76 support suggested disabling the corresponding PCI device on suspend and then reloading it on resume. Adapting their Pop!_OS fix for Arch Linux, the above file might look like this instead:\n\n```\n#!/bin/sh\n\n# This is a systemd hook script that is run whenever\n# suspend/resume takes place. It should be symlinked into\n# /usr/lib/systemd/system-sleep.\n\n# $1 is 'pre' (going to sleep) or 'post' (waking up)\n# $2 is 'suspend', 'hibernate' or 'hybrid-sleep'\ncase \"$1/$2\" in\n  pre/*)\n    echo 1 > '/sys/devices/pci0000:00/0000:00:1c.0/remove'\n    ;;\n  post/*)\n    echo 1 > '/sys/devices/pci0000:00/pci_bus/0000:00/bus_rescan'     \n    ;;\nesac\n```\n\nYou may find that /sys/devices/pci0000:00/pci_bus/0000:00/bus_rescan does not exist but /sys/devices/pci0000:00/pci_bus/0000:00/rescan does.\n\n"
    },
    {
      "title": "DisplayPort and HDMI over USB-C",
      "level": 2,
      "content": "For proper operation of DisplayPort / HDMI over USB-C, you need to install the system76-powerAUR package, start/enable com.system76.PowerDaemon.service and add the iomem=relaxed kernel parameter.\n\nOnly HDMI was tested with Plugable UD-CA1A dock. See officially supported docks[dead link 2023-05-06 ⓘ] from System76.\n\n"
    }
  ]
}