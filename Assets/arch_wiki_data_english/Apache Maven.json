{
  "title": "Apache Maven",
  "url": "https://wiki.archlinux.org/title/Apache_Maven",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nNote: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\nMaven is a build automation tool used by Java developers to compile, build and deploy code, documentation and libraries.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install maven.\n\n"
    },
    {
      "title": "Creating a new project",
      "level": 3,
      "content": "Maven provides Archetypes which are project structures which are pulled from Maven repositories.\n\nTo create a new project, you can use the following command:\n\n```\n$ mvn archetype:generate\n```\n\nThis will bring up a interactive prompt within the command line, allowing you to chose which archetype to use to create your project.\n\n"
    },
    {
      "title": "Without interactive prompt",
      "level": 3,
      "content": "You can also create a mvn project without the interactive prompt. Java uses Reverse Domain Name Notation when grouping packages, for example if your domain name is example.com your groupid would be com.example, your artifactId should be the name of your project in all lowercase.\n\n```\n$ mvn -B archetype:generate -DgroupId=com.example  -DartifactId=example -DarchetypeArtifactId=maven-archetype-quickstart\n```\n\nThis will create the entire project layout for you, and gives you a basic pom.xml file to start out with, which can be modified or added to as needed.\n\n"
    },
    {
      "title": "Contributing to an existing maven project",
      "level": 3,
      "content": "Maven should automatically fetch its indexes,\n\n"
    },
    {
      "title": "Creating the maven wrapper",
      "level": 2,
      "content": "Maven allows for the creation of a maven wrapper similar to Gradle, this prevents version mismatch between different developers as the wrapper ensures the same version is used by any developer which is working on the project.\n\nTo create the maven wrapper, use the following command within the root directory of the project:\n\n```\n$ mvn -N wrapper:wrapper -Dmaven=version\n```\n\nReplace version with the desired maven version for the wrapper to use, this is often going to be the latest version of maven, see maven to find the current latest version of maven.\n\n"
    },
    {
      "title": "Creating a Maven repository",
      "level": 3,
      "content": "A lot of developers rely on publicly hosted Maven repositories to deploy their projects to (such as libraries, plugins and archetypes). For a lot of people this would have privacy concerns. Good news, you can host your own. Software which hosts maven repositories are collectively known as Maven Artifact Managers or Maven Repository Managers, however any web server can act as a Maven Repository.\n\nThere are MANY Maven Artifact Managers available:\n\n- Reposilite - Free and open source maven artifact manager, written in Java.\n- Archiva - Open source maven artifact manager, written in Java, provided by the Apache team.\n- Gitea - Open source git server, provides builtin package deployment, supporting Java (Maven).\n- ProGet - Proprietary maven artifact manager, designed for enterprise deployments.\n- JFrog Artifactory - Comes in two editions, see below: Community edition - Open source maven artifact manager, designed for non-commercial use. Pro edition - Proprietary maven artifact manager, designed for commercial use.\n- Sonatype Nexus - Comes in two editions, see below: OSS edition - Open source maven artifact manager, designed for non-commercial use. Pro edition - Proprietary maven artifact manager, designed for commercial use.\n\n- Community edition - Open source maven artifact manager, designed for non-commercial use.\n- Pro edition - Proprietary maven artifact manager, designed for commercial use.\n\n- OSS edition - Open source maven artifact manager, designed for non-commercial use.\n- Pro edition - Proprietary maven artifact manager, designed for commercial use.\n\nAny of the above can be used to self-host your own Maven repository, the proprietary (commercial) products are non-free and require a licence in order to use.\n\n"
    },
    {
      "title": "Using nginx",
      "level": 4,
      "content": "A web server, such as Nginx can be used to host a maven repository. Be aware in the difference in terminology however, this will not be a repository manager, it will just be the repository portion, all management will have to be done manually through command line, or directly editing the structure of the repository. Other web servers may be used, however they must support the WebDAV protocol.\n\nFor this guide we will be using /var/repository as the directory of choice for the storage of the artifacts.\n\nEnsure that the permissions are set correctly:\n\n```\n# chmod 750 /var/repository\n# chown http:http /var/repository\n```\n\nFor this example, we will not allow any user which is not in the \"http\" group to view the contents of the repository. This should be good for most cases, as files will be pushed through maven, and not directly added by you.\n\nNext, ensure you have followed the installation steps within Nginx before continuing with this guide.\n\nNext, add the following configuration for nginx:\n\n```\n/etc/nginx/sites-enabled/maven\n```\n\n```\nserver {\n    listen 80;\n    server_name your.domain.name;\n\n    location / {\n        root /var/repository;\n        create_full_put_path on;\n        autoindex on;\n        dav_methods PUT DELETE MKCOL COPY MOVE;\n        dav_access user:rw group:rw;\n\n        limit_except GET {\n                auth_basic \"Restricted Area\";\n                auth_basic_user_file /etc/nginx/.htpasswd;\n        }\n    }\n}\n```\n\nThe above example does not provide TLS encryption. This is useful for local maven repositories, however if you want to deploy your repository to be accessed by others, you should use TLS encryption (see below configuration).\n\n```\n/etc/nginx/sites-enabled/maven\n```\n\n```\nserver {\n    listen 443 ssl;\n    server_name your.domain.name;\n    \n    ssl_certificate /path/to/your/fullchain;\n    ssl_key /path/to/your/key;\n\n    location / {\n        root /var/repository;\n        create_full_put_path on;\n        autoindex on;\n        dav_methods PUT DELETE MKCOL COPY MOVE;\n        dav_access user:rw group:rw;\n\n        limit_except GET {\n                auth_basic \"Restricted Area\";\n                auth_basic_user_file /etc/nginx/.htpasswd;\n        }\n    }\n}\n```\n\nSet the following values:\n\n- server_name to your hostname you wish to use for your maven repository, if you are running this on a LAN, you can use localhost and the repository will be accessible by entering the local IP of the server into your web browser.\n- ssl_certificate to the path of your fullchain certificate.\n- ssl_certificate_key to the path of your certificate key.\n\nThe limit_except GET section of the nginx configuration prevents unauthorised users from pushing their dependencies to your repository, we will be using BASIC authentication with nginx for this example. BASIC authentication is only secure if HTTPS is used, thus you should not use BASIC auth over HTTP as the password will be leaked.\n\nTo aid in creating the .htpasswd file, we will be using htpasswd(1) provided by the apache package.\n\n```\n# htpasswd -c /etc/nginx/.htpasswd username\n```\n\nYou will then be prompted to enter a password, this password will be saved against the username you specified within the command.\n\nThe user you just created is now authorised to push artifacts to the repository.\n\nNow lets set the permissions for the file:\n\n```\n# chmod 640 .htpasswd\n```\n\nThis will prevent any other users from reading the content of .htpasswd, which would potentially cause a security breach (bare in mind the passwords are hashed, but this should not be relied upon).\n\nNext we need to configure Maven so that it is able to push to the mirror, on the system you would like to push from, and logged in as the user you would like to grant permission to the repository, create and edit the following file $HOME/.m2/settings.xml.\n\nYou will now need the base64 representation of the username and password to add to the HTTP headers for authentication using the following command:\n\n```\n$ echo -n \"username:password\" | base64\n```\n\nThe returned value is your basic authentication token for your repository.\n\nYou must replace username with the username you used when you created .htpasswd and replace password with the password you entered when prompted to create a password. Both the username and password must be separated by \":\".\n\nNow add the following to your maven settings.xml:\n\n```\n$HOME/.m2/settings.xml\n```\n\n```\n<settings>\n  <servers>\n    <server>\n      <id>some-id</id>\n      <configuration>\n        <httpHeaders>\n          <property>\n            <name>Authorization</name>\n            <value>Basic token</value>\n          </property>\n        </httpHeaders>\n      </configuration>\n    </server>\n  </servers>\n</settings>\n```\n\nReplace some-id with the desired id for your repository, this is used to identify the configuration values set within settings.yml for the repository, with the pom.xml within your codebases. Then you need to replace token with the token you created from the base64 command above.\n\nYou should now have permission to push new builds to your repository, once pushed using mvn publish people will be able to pull your artifacts from your repository. (No authentication is needed for pulling of artifacts, only pushing).\n\n"
    }
  ]
}