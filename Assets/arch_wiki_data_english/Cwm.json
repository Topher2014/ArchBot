{
  "title": "Cwm",
  "url": "https://wiki.archlinux.org/title/Cwm",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Window manager\n\ncwm is an X11 window manager with a focus on getting out of your way so you can be productive. It was originally derived from evilwm, but the codebase has since been re-written from scratch.\n\ncwm is developed as part of the OpenBSD base system. A “portable” version which runs on Linux is also available.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install one of the following packages:\n\n- cwmAUR - Latest release.\n- cwm-gitAUR - Latest commit to master.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "cmw is configured by editing ~/.cwmrc. There is no default cwmrc file; all defaults – including the keybinds – are defined in conf.c. cwm(1) lists the default keybinds; cwmrc(5) lists all configuration directives.\n\nYou can remove all default keybinds with unbind-key all and unbind-mouse all though.\n\n"
    },
    {
      "title": "Window groups",
      "level": 3,
      "content": "cwm lacks traditional ‘workspaces’; instead you can assign windows to a group. This is a more flexible approach, as two or more groups can be displayed at the same time, and is similar or identical to the workspace feature of many tiling window managers.\n\nFor example one might put a chat/irc application in group 4, and then assign a key to toggle the visibility of that group (bind-key <k> group-toggle 4) to display that group in addition to whatever other windows/groups might be displayed.\n\nYou can also use bind-key <k> group-only <n> to show only windows from that group, hiding everything else.\n\nThe default for new windows is to not put them in any group, meaning they will always be displayed (what many WMs call ‘sticky’ windows). However by enabling “sticky group mode” with sticky yes windows will be assigned the currently selected group by default. You can also use the autogroup directory to automatically group windows.\n\n"
    },
    {
      "title": "Moving windows",
      "level": 3,
      "content": "There is no action to move windows to pre-defined locations; but you can get around this with xdotool; put this cwm-w-mv script in your PATH:\n\n```\n#!/bin/sh\n# Move a window to the side of a screen.\n\ncase \"$1\" in\n\t\"left\") xdotool getactivewindow windowmove 0 y ;;\n\t\"top\")  xdotool getactivewindow windowmove x 0 ;;\n\n\t\"right\")\n\t\tscreen_width=$(xwininfo -root | grep Width | cut -d: -f2 | tr -d ' ')\n\t\twin_width=$(xdotool getactivewindow  getwindowgeometry --shell | grep WIDTH | cut -d= -f2)\n\t\txdotool getactivewindow windowmove $(( $screen_width - $win_width )) y\n\t\t;;\n\t\"bottom\")\n\t\tscreen_height=$(xwininfo -root | grep Height | cut -d: -f2 | tr -d ' ')\n\t\twin_height=$(xdotool getactivewindow  getwindowgeometry --shell | grep HEIGHT | cut -d= -f2)\n\t\txdotool getactivewindow windowmove x $(( $screen_height - $win_height ))\n\t\t;;\n\t*)\n\t\techo \"Unsupported: \\\"$1\\\"\"\n\t\texit 1\nesac\n```\n\nAnd then bind it in cwm with something like:\n\n```\nbind-key 4-h      cwm-w-mv left   # Move window to side of the screen.\nbind-key 4-j      cwm-w-mv bottom\nbind-key 4-k      cwm-w-mv top\nbind-key 4-l      cwm-w-mv right\nbind-key 4-Left   cwm-w-mv left\nbind-key 4-Down   cwm-w-mv bottom\nbind-key 4-Up     cwm-w-mv top\nbind-key 4-Right  cwm-w-mv right\n```\n\nThis will make Mod4 (‘Windows key’) plus hjkl or the arrow keys move the window to the side.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- OpenBSD source\n- Portable version\n- Example cwmrc: [1]\n- Absolute OpenBSD contains an introduction to cwm.\n\n"
    }
  ]
}