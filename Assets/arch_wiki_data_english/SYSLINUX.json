{
  "title": "SYSLINUX",
  "url": "https://wiki.archlinux.org/title/SYSLINUX",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Arch boot process\n\nSyslinux is a collection of boot loaders capable of booting from drives, CDs, and over the network via PXE.\n\n"
    },
    {
      "title": "Supported file systems",
      "level": 2,
      "content": "Some of the supported file systems are FAT, NTFS, ext2, ext3, ext4, XFS, UFS/FFS, and uncompressed single-device Btrfs.\n\n- As of Syslinux 6.03, some of the features of the supported file systems are not supported by the bootloader. See the full list of file system support for more information. This can be typically worked around by using a separate /boot partition with a universally supported file system such as FAT32.\n- Syslinux does not support FAT file systems with a sector size other than 512 bytes.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the syslinux package.\n\nBIOS booting will also require the gptfdisk package for BIOS/GPT setups and mtools if your /boot partition is FAT-formatted.\n\nUEFI booting requires installing the efibootmgr package.\n\n"
    },
    {
      "title": "Installing the Syslinux boot loader",
      "level": 2,
      "content": "Installing the package is not the same as installing the bootloader. After installing the relevant package(s), the bootloader code itself needs to be installed (to the adequate area, usually the VBR or ESP) so to be able to boot the system; the following sections provide alternative instructions depending on the characteristics of your particular system.\n\n"
    },
    {
      "title": "BIOS systems",
      "level": 3,
      "content": "Syslinux boot process on BIOS happens in stages:\n\n"
    },
    {
      "title": "Automatically",
      "level": 4,
      "content": "After executing the syslinux-install_update script, do not forget to edit /boot/syslinux/syslinux.cfg by following #Configuration and #Kernel parameters.\n\nThe syslinux-install_update script will install the bootloader code (usually to the VBR), copy *.c32 modules to /boot/syslinux/, set the boot flag, install the boot code in the MBR and copy /usr/share/syslinux/syslinux.cfg to /boot/syslinux/syslinux.cfg. It can handle MBR and GPT disks along with software RAID:\n\nIf you use a separate boot partition, make sure that it is mounted. Check with lsblk; if you do not see a /boot mountpoint, mount it before you go any further.\n\nRun syslinux-install_update with flags: -i (install the files), -a (mark the partition active with the boot flag), -m (install the MBR boot code):\n\n```\n# syslinux-install_update -i -a -m\n```\n\nIf this command fails with Syslinux BIOS install failed, the problem is likely that the extlinux binary could not find the partition containing /boot:\n\n```\n# extlinux --install /boot/syslinux/\n```\n\n```\nextlinux: cannot find device for path /boot/syslinux\nextlinux: cannot open device (null)\n```\n\nThis can happen, for example, when upgrading from LILO which, while booting a current custom kernel, turned a kernel command line parameter of say root=/dev/sda1 into its numeric equivalent root=801, as evidenced by /proc/cmdline and the output of the mount command. Remedy the situation by either continuing with the manual install described below while specifying --device=/dev/sda1 to extlinux, or simply by first rebooting into a stock Arch Linux kernel; its use of an initramfs avoids the problem.\n\n- If you rebooted your system now, you would get a Syslinux prompt. To automatically boot your system or get a boot menu, you need to create (edit) the configuration file.\n- If you are on another root directory (e.g. from an install disk) install SYSLINUX by directing to the chroot:\n\n```\n# syslinux-install_update -i -a -m -c /mnt\n```\n\nNow is the time to edit /boot/syslinux/syslinux.cfg by following #Configuration and #Kernel parameters.\n\n"
    },
    {
      "title": "Manually",
      "level": 4,
      "content": "Your boot partition, on which you plan to install Syslinux, must contain a FAT, ext2, ext3, ext4, or Btrfs file system. You do not have to install it on the root directory of a file system, e.g., with device /dev/sda1 mounted on /boot. For example, you can install Syslinux in the syslinux subdirectory:\n\n```\n# mkdir /boot/syslinux\n```\n\nCopy all .c32 files from /usr/lib/syslinux/bios/ to /boot/syslinux/ if you desire to use any menus or configurations other than a basic boot prompt. Do not symlink them.\n\n```\n# cp /usr/lib/syslinux/bios/*.c32 /boot/syslinux/\n```\n\nNow install the bootloader. For FAT, ext2/3/4, or btrfs boot partition use extlinux, where the device has been mounted:\n\n```\n# extlinux --install /boot/syslinux\n```\n\nAlternatively, for a FAT boot partition use syslinux, where the device is unmounted:\n\n```\n# syslinux --directory syslinux --install /dev/sda1\n```\n\nAfter this, proceed to install the Syslinux bootstrap code appropriate for the partition table:\n\n- mbr.bin will be installed for an #MBR partition table, or\n- gptmbr.bin will be installed for a #GUID partition table\n\nas described in the next sections.\n\nSee Master Boot Record for further general information.\n\nFor an MBR partition table, ensure your boot partition is marked as \"active\" in your partition table (the \"boot\" flag is set). Applications capable of doing this include fdisk and parted. It should look like this:\n\n```\n# fdisk -l /dev/sda\n```\n\n```\n[...]\n  Device Boot      Start         End      Blocks   Id  System\n/dev/sda1   *        2048      104447       51200   83  Linux\n/dev/sda2          104448   625142447   312519000   83  Linux\n```\n\nInstall the MBR:\n\n```\n# dd bs=440 count=1 conv=notrunc if=/usr/lib/syslinux/bios/mbr.bin of=/dev/sda\n```\n\nAn alternative MBR which Syslinux provides is: altmbr.bin. This MBR does not scan for bootable partitions; instead, the last byte of the MBR is set to a value indicating which partition to boot from. Here is an example of how altmbr.bin can be copied into position:\n\n```\n# printf '\\x5' | cat /usr/lib/syslinux/bios/altmbr.bin - | dd bs=440 count=1 conv=notrunc iflag=fullblock of=/dev/sda\n```\n\nIn this case, a single byte of value 5 (hexadecimal) is appended to the contents of altmbr.bin and the resulting 440 bytes are written to the MBR on device sda. Syslinux was installed on the first logical partition (/dev/sda5) of the disk.\n\nFor a GPT, ensure that attribute bit 2 \"Legacy BIOS bootable\" is set for the /boot partition. For Parted it can be set using the \"legacy_boot\" flag. Using sgdisk the command to set the attribute is:\n\n```\n# sgdisk /dev/sda --attributes=1:set:2\n```\n\nThis will set the attribute \"legacy BIOS bootable\" on partition 1 of /dev/sda. To check:\n\n```\n# sgdisk /dev/sda --attributes=1:show\n```\n\n```\n1:2:1 (legacy BIOS bootable)\n```\n\nInstall the MBR:\n\n```\n# dd bs=440 count=1 conv=notrunc if=/usr/lib/syslinux/bios/gptmbr.bin of=/dev/sda\n```\n\n"
    },
    {
      "title": "UEFI systems",
      "level": 3,
      "content": "- efi64 denotes x86_64 UEFI systems, for IA32 (32-bit) EFI replace efi64 with efi32 in the below commands.\n- For Syslinux, the kernel and initramfs files need to be in the EFI system partition (aka ESP), as Syslinux does not (currently) have the ability to access files outside its own partition (i.e. outside ESP in this case). For this reason, it is recommended to mount ESP at /boot.\n- The automatic install script /usr/bin/syslinux-install_update does not support UEFI install.\n- The configuration syntax of syslinux.cfg for UEFI is same as that of BIOS.\n\n"
    },
    {
      "title": "Limitations of UEFI Syslinux",
      "level": 4,
      "content": "- Using Tab to edit kernel parameters in UEFI Syslinux menu might lead to garbled display (text on top of one another). Bug report: [2]\n- UEFI Syslinux does not support chainloading other EFI applications like UEFI Shell or Windows Boot Manager. Enhancement request: [3]\n- In some cases, UEFI Syslinux might not boot in some Virtual Machines like QEMU/OVMF or VirtualBox or some VMware products/versions and in some UEFI emulation environments like DUET. A Syslinux contributor has confirmed no such issues present on VMware Workstation 10.0.2 and Syslinux-6.02 or later. Bug reports: [4], [5] and [6]\n- Memdisk is not available for UEFI. Enhancement request: [7]\n- Syslinux uses the deprecated EFI handover protocol for UEFI booting. Officially supported kernels are not affected since they are built with CONFIG_EFI_HANDOVER_PROTOCOL=y. Booting kernels built without it will fail, see FS#77632.\n- Mixed mode booting (booting a x86_64 kernel from IA32 syslinux) may not work.[8]\n- No proper Secure Boot support.[9]\n\n"
    },
    {
      "title": "Deployment",
      "level": 4,
      "content": "Setup Syslinux in the EFI system partition as follows.\n\nCopy Syslinux files to the ESP:\n\n```\n# mkdir -p esp/EFI/syslinux\n# cp -r /usr/lib/syslinux/efi64/* esp/EFI/syslinux\n```\n\nCreate a UEFI boot entry for Syslinux using efibootmgr:\n\n```\n# efibootmgr --create --disk /dev/sdX --part Y --loader /EFI/syslinux/syslinux.efi --label \"Syslinux\" --unicode\n```\n\nwhere /dev/sdXY is the EFI system partition containing the boot loader.\n\nCreate or edit esp/EFI/syslinux/syslinux.cfg by following #Configuration.\n\n- The configuration file for UEFI is esp/EFI/syslinux/syslinux.cfg, not /boot/syslinux/syslinux.cfg. Files in /boot/syslinux/ are BIOS specific and not related to UEFI Syslinux.\n- When booted in BIOS mode, efibootmgr will not be able to set EFI nvram entry for /EFI/syslinux/syslinux.efi. To work around, place resources at the default EFI location: esp/EFI/syslinux/* -> esp/EFI/BOOT/* and esp/EFI/syslinux/syslinux.efi -> esp/EFI/BOOT/bootx64.efi\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nThe Syslinux configuration file, syslinux.cfg, should be created in the same directory where you installed Syslinux. In our case, /boot/syslinux/ for BIOS systems and esp/EFI/syslinux/ for UEFI systems.\n\nThe bootloader will look for either syslinux.cfg (preferred) or extlinux.conf\n\nNote: **0.1 seconds** \n\n- syslinux-install_update creates /boot/syslinux/syslinux.cfg by copying the example configuration file /usr/share/syslinux/syslinux.cfg. If you installed the Syslinux boot loader manually, you will need to copy /usr/share/syslinux/syslinux.cfg to the syslinux directory manually too.\n- Instead of LINUX, the keyword KERNEL can also be used. KERNEL tries to detect the type of the file, while LINUX always expects a Linux kernel.\n- TIMEOUT value is in units of 0.1 seconds.\n\n"
    },
    {
      "title": "Examples",
      "level": 3,
      "content": "- Any configuration file found in the examples needs to be edited to set the proper kernel parameters. See section #Kernel parameters.\n- Please, pay close attention to the paths. The examples may not be suitable for your installation, especially when using UEFI.\n- The following examples assume that the kernel and initrd files are located one directory level up in relation to the location of syslinux.cfg (or, more precisely, one level up from the working directory).\n\n"
    },
    {
      "title": "Boot prompt",
      "level": 4,
      "content": "This is a simple configuration file that will show a boot: prompt and will automatically boot after 5 seconds. If you want to boot directly without seeing a prompt, set PROMPT to 0.\n\nConfiguration:\n\n```\n* BIOS: /boot/syslinux/syslinux.cfg\n* UEFI: esp/EFI/syslinux/syslinux.cfg\n```\n\n```\nPROMPT 1\nTIMEOUT 50\nDEFAULT arch\n\nLABEL arch\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw\n\tINITRD ../initramfs-linux.img\n\nLABEL archfallback\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw\n\tINITRD ../initramfs-linux-fallback.img\n```\n\n"
    },
    {
      "title": "Text boot menu",
      "level": 4,
      "content": "Syslinux also allows you to use a boot menu. To use it, copy the menu and libutil modules to your Syslinux directory:\n\n```\n# cp /usr/lib/syslinux/bios/{menu,libutil}.c32 /boot/syslinux/\n```\n\nSince version 5.00, additional lib*.c32 library modules are frequently needed too. See the Syslinux wiki for the module dependency tree.\n\nConfiguration:\n\n```\n* BIOS: /boot/syslinux/syslinux.cfg\n* UEFI: esp/EFI/syslinux/syslinux.cfg\n```\n\n```\nUI menu.c32\nPROMPT 0\n\nMENU TITLE Boot Menu\nTIMEOUT 50\nDEFAULT arch\n\nLABEL arch\n\tMENU LABEL Arch Linux\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw\n\tINITRD ../initramfs-linux.img\n\nLABEL archfallback\n\tMENU LABEL Arch Linux Fallback\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw\n\tINITRD ../initramfs-linux-fallback.img\n```\n\nFor more details about the menu system, see the Syslinux wiki.\n\n"
    },
    {
      "title": "Graphical boot menu",
      "level": 4,
      "content": "Syslinux also allows you to use a graphical boot menu. To use it, copy the vesamenu COM32 module to your Syslinux folder:\n\n```\n# cp /usr/lib/syslinux/bios/vesamenu.c32 /boot/syslinux/\n```\n\nSince version 5.00, additional lib*.c32 library modules are frequently needed too. See the Syslinux wiki for the module dependency tree.\n\nThis configuration uses the same menu design as the Arch Install CD, its configuration can be found at gitlab.archlinux.org. The Arch Linux background image can be downloaded from there, too. Copy the image to /boot/syslinux/splash.png.\n\nConfiguration:\n\n```\n* BIOS: /boot/syslinux/syslinux.cfg\n* UEFI: esp/EFI/syslinux/syslinux.cfg\n```\n\n```\nUI vesamenu.c32\nDEFAULT arch\nPROMPT 0\nMENU TITLE Boot Menu\nMENU BACKGROUND splash.png\nTIMEOUT 50\n\nMENU WIDTH 78\nMENU MARGIN 4\nMENU ROWS 5\nMENU VSHIFT 10\nMENU TIMEOUTROW 13\nMENU TABMSGROW 11\nMENU CMDLINEROW 11\nMENU HELPMSGROW 16\nMENU HELPMSGENDROW 29\n\n# Refer to https://wiki.syslinux.org/wiki/index.php/Comboot/menu.c32\n\nMENU COLOR border       30;44   #40ffffff #a0000000 std\nMENU COLOR title        1;36;44 #9033ccff #a0000000 std\nMENU COLOR sel          7;37;40 #e0ffffff #20ffffff all\nMENU COLOR unsel        37;44   #50ffffff #a0000000 std\nMENU COLOR help         37;40   #c0ffffff #a0000000 std\nMENU COLOR timeout_msg  37;40   #80ffffff #00000000 std\nMENU COLOR timeout      1;37;40 #c0ffffff #00000000 std\nMENU COLOR msg07        37;40   #90ffffff #a0000000 std\nMENU COLOR tabmsg       31;40   #30ffffff #00000000 std\n\nLABEL arch\n\tMENU LABEL Arch Linux\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw\n\tINITRD ../initramfs-linux.img\n\nLABEL archfallback\n\tMENU LABEL Arch Linux Fallback\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw\n\tINITRD ../initramfs-linux-fallback.img\n```\n\nSince Syslinux 3.84, vesamenu.c32 supports the MENU RESOLUTION $WIDTH $HEIGHT directive. To use it, insert MENU RESOLUTION 1440 900 into your configuration for a 1440x900 resolution. However, the background picture has to have exactly the right resolution, as Syslinux will otherwise refuse to load the menu.\n\nTo center the menu and adjust resolution, use MENU RESOLUTION, MENU HSHIFT $N and MENU VSHIFT $N where $N is a positive number. The default values are both 0 which is the upper-left hand corner of your monitor. Conversely, a negative number starts from the opposite end of the screen (e.g. VHSHIFT -4 would be 4 rows from the bottom of the screen).\n\nTo move the menu to the center, add or edit these values:\n\n```\n* BIOS: /boot/syslinux/syslinux.cfg\n* UEFI: esp/EFI/syslinux/syslinux.cfg\n```\n\n```\nMENU RESOLUTION 800 600 # or whatever your screen resolution is\nMENU WIDTH 78           # width of the menu also required to bring the menu box to size\nMENU VSHIFT 10          # moves menu down\nMENU HSHIFT 10          # moves menu right\n```\n\nVESA standards are commonly a maximum of 25 rows and 80 columns, so going higher than those values might move the menu off the screen, potentially requiring editing from a rescue CD.\n\n"
    },
    {
      "title": "Kernel parameters",
      "level": 3,
      "content": "The kernel parameters are set by using the APPEND directive in syslinux.cfg: for each LABEL entry, a maximum of one APPEND line is accepted (i.e. spanning multiple lines is not valid).\n\nIt is recommended to make the following changes for the \"fallback\" entry as well.\n\nIn the simplest case, the value of the root parameter needs to be replaced; see Persistent block device naming for supported methods.\n\n```\nAPPEND root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw\n```\n\nChange root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx to point to the correct root volume.\n\nIf you use dm-crypt encryption change the APPEND line to use your encrypted volume:\n\n```\nAPPEND root=/dev/mapper/name cryptdevice=UUID=YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY:name rw\n```\n\nIf booting a btrfs subvolume, amend the APPEND line with rootflags=subvol=root_subvolume. For example, where /dev/disk/by-uuid/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx has been mounted as a btrfs subvolume called 'ROOT' (e.g. mount -o noatime,subvol=ROOT /dev/disk/by-uuid/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx /mnt), then the APPEND line would need to be modified as follows:\n\n```\nAPPEND root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw rootflags=subvol=ROOT\n```\n\nA failure to do so will otherwise result in the following error message: ERROR: Root device mounted successfully, but /sbin/init does not exist.\n\n"
    },
    {
      "title": "Auto boot",
      "level": 3,
      "content": "If you do not want to see the Syslinux menu at all, use the #Boot prompt, and set PROMPT to 0 and comment out any UI menu entries. Setting the TIMEOUT variable to 0 might also be a good idea. Make sure there is a DEFAULT set in your syslinux.cfg. Holding either Shift or Alt, or setting either Caps Lock or Scroll Lock, during boot will allow for options other than default to be used. See the upstream wiki for additional alternatives.\n\n"
    },
    {
      "title": "Security",
      "level": 3,
      "content": "Syslinux has two levels of bootloader security: a menu master password, and a per-menu-item password. In syslinux.cfg, use\n\n```\nMENU MASTER PASSWD passwd\n```\n\nto set a master bootloader password, and\n\n```\nMENU PASSWD passwd\n```\n\nwithin a LABEL block to password-protect individual boot items.\n\nThe passwd can be either a cleartext password or hashed: see official documentation.\n\n"
    },
    {
      "title": "Chainloading",
      "level": 3,
      "content": "Syslinux BIOS cannot directly chainload files located on other partitions; however, chain.c32 can boot a partition boot sector (VBR) or another disk's MBR.\n\n"
    },
    {
      "title": "Chainloading a partition's VBR",
      "level": 4,
      "content": "If you want to chainload other operating systems (such as Windows) or boot loaders, copy the chain.c32 module to the Syslinux directory (additional lib*.c32 library modules might be needed too; for details, see the instructions in the previous section). Then create a section in the configuration file:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\n...\nLABEL windows\n\tMENU LABEL Windows\n\tCOM32 chain.c32\n\tAPPEND hd0 3\n...\n```\n\nhd0 3 is the third partition on the first BIOS drive - drives are counted from zero, but partitions are counted from one.\n\n"
    },
    {
      "title": "Chainloading a disk's MBR",
      "level": 4,
      "content": "If you are unsure about which drive your BIOS thinks is \"first\", you can instead use the MBR identifier, or if you are using GPT, the filesystem labels. To use the MBR identifier, run the command\n\n```\n# sfdisk --disk-id /dev/sdb\n```\n\n```\n0xf00f1fd3\n```\n\nreplacing /dev/sdb with the drive you wish to chainload. Using the returned hexadecimal number, 0xf00f1fd3 in this case, the syntax in syslinux.cfg is:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\n...\nLABEL windows\n\tMENU LABEL Windows\n\tCOM32 chain.c32\n\tAPPEND mbr:0xf00f1fd3\n...\n```\n\nFor more details about chainloading, see the Syslinux wiki.\n\n"
    },
    {
      "title": "Chainloading other boot loaders",
      "level": 4,
      "content": "If you have GRUB installed on the same partition, you can chainload it by using:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\n...\nLABEL grub2\n\tMENU LABEL Grub2\n\tCOM32 chain.c32\n\tAPPEND file=../grub/boot.img\n...\n```\n\nAlternatively, it is also possible to load GRUB as a linux kernel by prepending lnxboot.img to core.img. The file lnxboot.img is part of core/grub and can be found in /usr/lib/grub/i386-pc.\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\n...\nLABEL grub2lnx\n\tMENU LABEL Grub2 (lnxboot)\n\tLINUX ../grub/i386-pc/lnxboot.img\n\tINITRD ../grub/i386-pc/core.img\n...\n```\n\nThis may be required for booting from ISO images.\n\n"
    },
    {
      "title": "Chainloading other Linux systems",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nChainloading another bootloader such as Windows' is pretty obvious, as there is a definite bootloader to chain to. But with Syslinux, it is only able to load files residing on the same partition as the configuration file. Thus, if you have another version of Linux on a separate partition, without a shared /boot, it becomes necessary to employ EXTLINUX rather than the other OS's default bootloader (eg. GRUB2). Essentially, EXTLINUX can be installed on the partition superblock/VBR and be called as a separate bootloader right from the MBR installed by Syslinux. EXTLINUX is part of The Syslinux Project and is included with the syslinux package.\n\nThe following instructions assume you have Syslinux installed already. These instructions will also assume that the typical Arch Linux configuration path of /boot/syslinux is being used and the chainloaded system's / is on /dev/sda3.\n\nFrom a booted Linux (likely the partition that Syslinux is set up to boot), mount the other system's root partition to your desired mount point. In this example this will be /mnt. Also, if a separate /boot partition is used on the second operating system, that will also need to be mounted. The example assumes this is /dev/sda2.\n\n```\n# mount /dev/sda3 /mnt\n# mount /dev/sda2 /mnt/boot (only necessary for separate /boot)\n```\n\nInstall EXTLINUX to the partition VBR, and copy necessary *.c32 files\n\n```\n# extlinux -i /mnt/boot/syslinux/ (first create the directory if necessary)\n# cp /usr/lib/syslinux/bios/*.c32 /mnt/boot/syslinux\n```\n\nCreate /mnt/boot/syslinux/syslinux.cfg. You can use the other Linux's bootloader menu file for reference. Below is an example:\n\n```\n/mnt/boot/syslinux/syslinux.cfg on /dev/sda3\n```\n\n```\nTIMEOUT 10\n\nUI menu.c32\n\nLABEL OtherLinux\n\tLINUX /boot/vmlinuz-linux\n\tINITRD /boot/initramfs-linux.img\n\tAPPEND root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw quiet\n\nLABEL MAIN\n\tCOM32 chain.c32\n\tAPPEND hd0 0\n```\n\nAnd then add an entry to your main syslinux.cfg\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nLABEL OtherLinux\n\tCOM32 chain.c32\n\tAPPEND hd0 3\n```\n\nNote that the other Linux entry in <other-OS>/boot/syslinux/syslinux.cfg will need to be edited each time you update this OS's kernel unless it has symlinks to its latest kernel and initrd in /. Since we are booting the kernel directly and not chainloading the other-OS's default bootloader.\n\n"
    },
    {
      "title": "Using memtest",
      "level": 3,
      "content": "Install memtest86+.\n\nUse this LABEL section to launch memtest:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\n...\nLABEL memtest\n\tMENU LABEL Memtest86+\n\tLINUX ../memtest86+/memtest.bin\n...\n```\n\n"
    },
    {
      "title": "HDT",
      "level": 3,
      "content": "HDT (Hardware Detection Tool) displays hardware information. Like before, the .c32 file has to be copied from /boot/syslinux/. Additional lib*.c32 library modules might be needed too. For PCI info, copy /usr/share/hwdata/pci.ids to /boot/syslinux/pci.ids and add the following to your configuration file:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nLABEL hdt\n\tMENU LABEL Hardware Info\n\tCOM32 hdt.c32\n```\n\n"
    },
    {
      "title": "Reboot and power off",
      "level": 3,
      "content": "Use the following sections to reboot or power off your machine:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nLABEL reboot\n\tMENU LABEL Reboot\n\tCOM32 reboot.c32\n\nLABEL poweroff\n\tMENU LABEL Power Off\n\tCOM32 poweroff.c32\n```\n\n"
    },
    {
      "title": "Clear menu",
      "level": 3,
      "content": "To clear the screen when exiting the menu, add the following line:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nMENU CLEAR\n```\n\n"
    },
    {
      "title": "Keyboard layout",
      "level": 3,
      "content": "If you often have to edit your boot command with diverse parameters in the Syslinux boot prompt, then you might want to remap your keyboard layout. This allows you to enter \"=\", \"/\" and other characters easily on a non-US keyboard.\n\nTo create a compatible keymap (e.g. a german one) run:\n\n```\n# keytab-lilo /usr/share/kbd/keymaps/i386/qwerty/us.map.gz /usr/share/kbd/keymaps/i386/qwertz/de.map.gz > /boot/syslinux/de.ktl\n```\n\nNow edit syslinux.cfg and add:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nKBDMAP de.ktl\n```\n\nSee the Syslinux wiki for more details.\n\n"
    },
    {
      "title": "Hiding the menu",
      "level": 3,
      "content": "Use the option:\n\n```\n/boot/syslinux/syslinux.cfg\n```\n\n```\nMENU HIDDEN\n```\n\nto hide the menu while displaying only the timeout. Press any key to bring up the menu.\n\n"
    },
    {
      "title": "PXELINUX",
      "level": 3,
      "content": "PXELINUX is provided by the syslinux package.\n\nFor BIOS clients, copy the lpxelinux.0 and ldlinux.c32 to the boot directory of the client.\n\n```\n# cp /usr/lib/syslinux/bios/lpxelinux.0 \"TFTP_root/boot/\"\n# cp /usr/lib/syslinux/bios/ldlinux.c32 \"TFTP_root/boot/\"\n# mkdir \"TFTP_root/boot/pxelinux.cfg\"\n```\n\nWe also created the pxelinux.cfg directory, which is where PXELINUX searches for configuration files by default. Because we do not want to discriminate between different host MACs, we then create the default configuration.\n\n```\nTFTP_root/boot/pxelinux.cfg/default\n```\n\n```\nDEFAULT linux\n\nLABEL linux\n\tKERNEL vmlinuz-linux\n\tAPPEND initrd=initramfs-linux.img quiet ip=:::::eth0:dhcp nfsroot=10.0.0.1:/arch\n```\n\nOr if you are using NBD, use the following append line:\n\n```\nAPPEND ro initrd=initramfs-linux.img ip=:::::eth0:dhcp nbd_host=10.0.0.1 nbd_port=10809 nbd_name=arch root=/dev/nbd0\n```\n\nPXELINUX uses the same configuration syntax as SYSLINUX; refer to the upstream documentation for more information.\n\nThe kernel and initramfs will be transferred via TFTP, so the paths to those are going to be relative to the TFTP root. Otherwise, the root filesystem is going to be the NFS mount itself, so those are relative to the root of the NFS server.\n\nTo actually load PXELINUX, replace filename \"/grub/i386-pc/core.0\"; in /etc/dhcpd.conf with filename \"/lpxelinux.0\".\n\n"
    },
    {
      "title": "Booting ISO9660 image files with memdisk",
      "level": 3,
      "content": "Syslinux supports booting from ISO images directly using the memdisk module, see Multiboot USB drive#Using Syslinux and memdisk for examples.\n\n"
    },
    {
      "title": "Serial console",
      "level": 3,
      "content": "See Working with the serial console#Syslinux.\n\n"
    },
    {
      "title": "Boot another OS once",
      "level": 3,
      "content": "It is possible to temporarily change the default Syslinux action and boot another label only during the next boot. The following command shows how to boot the archfallback label once:\n\n```\n# extlinux -o archfallback /boot/syslinux\n```\n\nDuring the next boot, the specified label will be booted without any Syslinux prompt showing up. The default Syslinux boot behaviour will be restored on the next reboot.\n\n"
    },
    {
      "title": "Failed to load ldlinux",
      "level": 3,
      "content": "An error message such as \"Failed to load ldlinux.c32\" during the initial boot can be triggered by many diverse reasons. One potential reason could be a change in file system tools or in a file system structure, depending on its own version.\n\n- Other alternative symptoms, instead of this message, could also indicate a problem related to the file system.\n- The message does not necessarily mean that the problem is related to the file system; there are other possible reasons for this type of messages.\n\nSee also [11] (the whole page might be relevant for troubleshooting too).\n\n"
    },
    {
      "title": "Using the Syslinux prompt",
      "level": 3,
      "content": "You can type in the LABEL name of the entry that you want to boot (as per your syslinux.cfg). If you used the example configurations, just type:\n\n```\nboot: arch\n```\n\nIf you get an error that the configuration file could not be loaded, you can pass your needed boot parameters, e.g.:\n\n```\nboot: ../vmlinuz-linux root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw initrd=../initramfs-linux.img\n```\n\nIf you do not have access to boot: in ramfs, and therefore temporarily unable to boot the kernel again,\n\n1. Create a temporary directory, in order to mount your root partition (if it does not exist already): # mkdir -p /new_root\n1. Mount / under /new_root (in case /boot/ is on the same partition, otherwise you will need to mount them both): Note: Busybox cannot mount /boot if it is on its own ext2 partition. # mount /dev/sd[a-z][1-9] /new_root\n1. Edit syslinux.cfg again to suit your needs and save file.\n1. Reboot.\n\n```\n# mkdir -p /new_root\n```\n\n```\n# mount /dev/sd[a-z][1-9] /new_root\n```\n\n"
    },
    {
      "title": "fsck fails on root partition",
      "level": 3,
      "content": "In the case of a badly corrupted root partition (in which the journal is damaged), in the ramfs emergency shell, mount the root file system:\n\n```\n# mount /dev/root partition /new_root\n```\n\nAnd grab the tune2fs binary from the root partition (it is not included in Syslinux):\n\n```\n# cp /new_root/sbin/tune2fs /sbin/\n```\n\nFollow the instructions at ext2fs: no external journal to create a new journal for the root partition.\n\n"
    },
    {
      "title": "No Default or UI found on some computers",
      "level": 3,
      "content": "Certain motherboard manufacturers have less compatibility for booting from USB devices than others. While an ext4 formatted USB drive may boot on a more recent computer, some computers may hang if the boot partition containing the kernel and initrd are not on a FAT16 partition. To prevent an older machine from loading ldlinux and failing to read syslinux.cfg, create a partition (≤ 2 GB) and format to FAT16 using dosfstools:\n\n```\n# mkfs.fat -F 16 /dev/sda1\n```\n\nthen install and configure Syslinux.\n\n"
    },
    {
      "title": "Missing operating system",
      "level": 3,
      "content": "- Check that you have installed gptmbr.bin for GPT and mbr.bin for MBR partition table. A \"Missing operating system\" message comes from mbr.bin while gptmbr.bin would show a \"Missing OS\" message.\n- Check whether the partition that contains /boot has the \"boot\" flag enabled.\n- Check whether the first partition at the boot device starts at sector 1 rather than sector 63 or 2048. Check this with fdisk -l. If it starts at sector 1, you can move the partition(s) with gparted from a rescue disk. Or, if you have a separate boot partition, you can back up /boot with\n\n```\n# cp -a /boot /boot.bak\n```\n\nand then boot up with the Arch install disk. Next, use cfdisk to delete the /boot partition, and recreate it. This time it should begin at the proper sector, 63. Now mount your partitions and chroot into your mounted system, as described in the installation guide. Restore /boot with the command\n\n```\n# cp -a /boot.bak/ /boot/\n```\n\nCheck if /etc/fstab is correct, run:\n\n```\n# syslinux-install_update -iam\n```\n\nand reboot.\n\nYou will also get this error if you are trying to boot from an md RAID 1 array and created the array with a too new version of the metadata that Syslinux does not understand. As of August 2013 by default mdadm will create an array with version 1.2 metadata, but Syslinux does not understand metadata newer than 1.0. If this is the case you will need to recreate your RAID array using the --metadata=1.0 flag to mdadm.\n\n"
    },
    {
      "title": "Windows boots up, ignoring Syslinux",
      "level": 3,
      "content": "Solution: Make sure the partition that contains /boot has the boot flag enabled. Also, make sure the boot flag is not enabled on the Windows partition. See the installation section above.\n\nThe MBR that comes with Syslinux looks for the first active partition that has the boot flag set. The Windows partition was likely found first and had the boot flag set. If you wanted, you could use the MBR that Windows or MS-DOS fdisk provides.\n\n"
    },
    {
      "title": "Menu entries do nothing",
      "level": 3,
      "content": "You select a menu entry and it does nothing, it just \"refreshes\" the menu. This usually means that you have an error in your syslinux.cfg file. Hit Tab to edit your boot parameters. Alternatively, press Esc and type in the LABEL of your boot entry (e.g. arch). Another cause could be that you do not have a kernel installed. Find a way to access your file system (through live CD, etc) and make sure that /mount/vmlinuz-linux exists and does not have a size of 0. If this is the case, reinstall your kernel.\n\n"
    },
    {
      "title": "Cannot remove ldlinux.sys",
      "level": 3,
      "content": "The ldlinux.sys file has the immutable attribute set, which prevents it from being deleted or overwritten. This is because the sector location of the file must not change or else Syslinux has to be reinstalled. To remove it, run:\n\n```\n# chattr -i /boot/syslinux/ldlinux.sys\n# rm /boot/syslinux/ldlinux.sys\n```\n\n"
    },
    {
      "title": "White block in upper left corner when using vesamenu",
      "level": 3,
      "content": "Problem: As of linux-3.0, the modesetting driver tries to keep the current contents of the screen after changing the resolution (at least it does so with my Intel, when having Syslinux in text mode). It seems that this goes wrong when combined with the vesamenu module in Syslinux (the white block is actually an attempt to keep the Syslinux menu, but the driver fails to capture the picture from vesa graphics mode).\n\nIf you have a custom resolution and a vesamenu with early modesetting, try to append the following in syslinux.cfg to remove the white block and continue in graphics mode:\n\n```\nAPPEND root=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx rw 5 vga=current quiet splash\n```\n\n"
    },
    {
      "title": "Chainloading Windows does not work, when it is installed on another drive",
      "level": 3,
      "content": "If Windows is installed on a different drive than Arch and you have trouble chainloading it, try the following configuration:\n\n```\nLABEL Windows\n\tMENU LABEL Windows\n\tCOM32 chain.c32\n\tAPPEND mbr:0xdfc1ba9e swap\n```\n\nReplace the mbr code with the one your Windows drive has (details above), and append swap to the options.\n\n"
    },
    {
      "title": "Read bootloader log",
      "level": 3,
      "content": "In some cases (e.g. bootloader unable to boot kernel) it is highly desirable to get more information from the boot process. Syslinux prints error messages to screen but the boot menu quickly overwrites the text. To avoid losing the log information, disable UI menu in syslinux.cfg and use the default \"command-line\" prompt. It means:\n\n- avoid the UI directive\n- avoid ONTIMEOUT\n- avoid ONERROR\n- avoid MENU CLEAR\n- use a higher TIMEOUT\n- use PROMPT 1\n- use DEFAULT problematic_label\n\nTo get more detailed debug log, recompile the syslinux package with additional CFLAGS:\n\n```\n-DDEBUG_STDIO=1 -DCORE_DEBUG=1\n```\n\n"
    },
    {
      "title": "Btrfs compression",
      "level": 3,
      "content": "Booting from btrfs with compression is not supported.[12] This error will show:\n\n```\nbtrfs: found compressed data, cannot continue!\ninvalid or corrupt kernel image.\n```\n\n"
    },
    {
      "title": "Btrfs multi-device",
      "level": 3,
      "content": "Booting from multiple-device btrfs is not supported.[13] (As of 21-Jul-2016 line 1246 in validate_device_btrfs() in main.c) This head-scratching error will show (assuming you are installing on sda1):\n\n```\n/boot/syslinux is device /dev/sda1\nextlinux: path /boot/syslinux doesn't match device /dev/sda1\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official website\n\n"
    }
  ]
}