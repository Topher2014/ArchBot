{
  "title": "Prosody",
  "url": "https://wiki.archlinux.org/title/Prosody",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "From the official website:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the prosody package.\n\n"
    },
    {
      "title": "Optional dependencies",
      "level": 3,
      "content": "Prosody has optional depedencies that although not strictly required for its operation, provide useful features. These dependencies may also have to be built and installed from the AUR. If you are unfamiliar with how to build and install packages from the AUR please see Arch User Repository#Installing and upgrading packages. As of Prosody 0.12, Lua 5.4 is recommended.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The main configuration file is located at /etc/prosody/prosody.cfg.lua. Information on how to configure Prosody can be found in Prosody's documentation. The syntax of the configuration file can be checked after any changes are made by running:\n\n```\n# luac5.2 -p /etc/prosody/prosody.cfg.lua\n```\n\nNo output means the syntax is correct.\n\n"
    },
    {
      "title": "Authentication",
      "level": 3,
      "content": "The default configuration uses mod_auth_internal_hashed. If you remove the line, it will default to mod_auth_internal_plain.\n\n"
    },
    {
      "title": "Logging",
      "level": 3,
      "content": "The prosody package is pre-configured to log to syslog. Thus, by default, Prosody log messages are available in the systemd journal.\n\n"
    },
    {
      "title": "Operation",
      "level": 2,
      "content": "Start/enable the prosody.service systemd service.\n\nProsody uses the default XMPP ports, 5222 and 5269, for client-to-server and server-to-server communications respectively. Configure your firewall as necessary.\n\nYou can manipulate Prosody users by using the prosodyctl program. To add a user:\n\n```\n# prosodyctl adduser JID\n```\n\nSee prosodyctl(1) for details.\n\n"
    },
    {
      "title": "User registration",
      "level": 4,
      "content": "Prosody supports XMPP's in-band registration standard, which allows users to register with an XMPP client from within their client and change their passwords. While this is convenient for users it does not allow administrators to moderate the registration of new users. As such, the register module is enabled in the default configuration but allow_registration is set to false. This allows existing users to change their passwords from within their client but does not allow new users to register themselves.\n\n"
    },
    {
      "title": "Stream encryption",
      "level": 4,
      "content": "Prosody can utilize TLS certificates to encrypt client-to-server communications (if the proper dependencies are installed). See the relevant sections of prosody.cfg.lua to configure Prosody to utilize these certificates.\n\nTo require encryption for client-to-server communications add the following to your configuration file:\n\n```\n/etc/prosody/prosody.cfg.lua\n```\n\n```\nHost \"*\"\n\n    c2s_require_encryption = true\n```\n\nSimilarly, for server-to-server communications you may do:\n\n```\n/etc/prosody/prosody.cfg.lua\n```\n\n```\nHost \"*\"\n\n    s2s_require_encryption = true\n```\n\nWhile requiring client-to-server encryption is generally a good idea, please keep in mind that some popular XMPP services such as Google Talk/Gmail do not support server-to-server encryption.\n\n"
    },
    {
      "title": "Listing users",
      "level": 3,
      "content": "A simple way to see a list of the registered users is\n\n```\n# ls -l /var/lib/prosody/*/accounts/*\n```\n\nalternatively, you can download the module mod_listusers.lua, and use it as\n\n```\n# prosodyctl mod_listusers\n```\n\n"
    },
    {
      "title": "Removal",
      "level": 2,
      "content": "After normally uninstalling Prosody with pacman, the /etc/prosody and /var/lib/prosody directories may be left on your filesystem, and you may want to remove them if you do not plan on reinstalling Prosody.\n\n"
    },
    {
      "title": "Components",
      "level": 3,
      "content": "Prosody supports XMPP components, which provide extra services to clients. Components are either provided internally by special Prosody modules or externally using the protocol specified in XEP-0114.\n\nNote: **will** \n\nBy default, Prosody will listen for external components. If you do not plan to use any external components with Prosody you can disable this behavior by adding the following your configuration:\n\n```\n/etc/prosody/prosody.cfg.lua\n```\n\n```\ncomponent_ports = {}\n```\n\n"
    },
    {
      "title": "Multi-User Chat",
      "level": 4,
      "content": "A common component used with XMPP servers is Multi-User Chat (MUC), which allows conferences between multiple users. MUC is provided as an internal component with Prosody. To enable MUC add the following to your configuration file:\n\n```\n/etc/prosody/prosody.cfg.lua\n```\n\n```\nComponent \"conference.example.com\" \"muc\"\n```\n\nThis will enable the MUC component on host conference.example.com.\n\n"
    },
    {
      "title": "Prosody modules",
      "level": 3,
      "content": "Prosody Modules is a collection of extra modules not distributed with Prosody. These modules are in various states of development from highly experimental to relatively stable. You should consult a given module's wiki page for more information. An example of an extra module is pastebin, which when loaded will intercept long messages (for example, log file output) and replace them with a link to a pastebin hosted using Prosody's internal HTTP server (provided by the core module, httpserver).\n\nTo use an extra module download its raw file(s) from the source browser (when viewing a file, search for the link \"View raw file\"). Alternatively and likely easier, use Mercurial to clone the entire repository:\n\n$ hg clone https://hg.prosody.im/prosody-modules/ prosody-modules\n\n$ hg clone http://0-8.prosody-modules.googlecode.com/hg/ prosody-modules\n\nNow you can copy the module (and any additional files it needs) to Prosody's module directory at /usr/lib/prosody/modules. To enable the module add it to your modules_enabled list in your prosody.cfg.lua for the host or component you wish to use it for. For example, to use the pastebin module on a MUC component:\n\n```\n/etc/prosody/prosody.cfg.lua\n```\n\n```\nComponent \"conference.example.com\" \"muc\"\n    modules_enabled = { \"pastebin\" }\n```\n\n"
    },
    {
      "title": "Console",
      "level": 3,
      "content": "Note: **not** \n\nThe console module provides a telnet console from which administrative operations and queries can be performed. You can connect to the console by issuing:\n\n$ telnet localhost 5582\n\nYou of course need the telnet program provided by the inetutils package. Use the help command in the console to get usage help.\n\nThe console even allows you to execute Lua commands directly on the server by preceding a command with >. For example to see if a client connection is compressed:\n\n> full_sessions[\"romeo@montague.lit/Resource\"].compressed\n\nWill return true if the connection is compressed or nil if it is not.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "One of Prosody's primary design principles is to be simple to use and configure. However, issues can still arise (and likely will as is the case with any complex software). If you encounter a problem there are a variety of steps you can take to narrow down the cause:\n\n- Check for known issuesLook at the release notes for your Prosody version to see if your issue is listed as a known issue. Also check the issue tracker to see if your issue has already been reported.\n- Check configuration syntaxRun luac5.1 -p /etc/prosody/prosody.cfg.lua to check for any syntax errors in your configuration file. If there is no output your syntax is fine.\n- Check the logErrors are only logged if there is a critical problem so always address those issues. If you think you have a very low level issue (like protocol compatibility between clients and servers with Prosody) then you can enable the very verbose debug level logging.\n- Check permissionsThe Prosody package should add a new prosody user and group to your system and set appropriate permissions, but it is always good to double check. Ensure that /etc/prosody and /var/lib/prosody are owned by the prosody user and that the user has appropriate permissions to read and write to those paths and all contained files.\n- Check listening portsWhen troubleshooting connection issues make sure that Prosody is actually listening for connections. You may do so by running ss -tul and making sure that xmpp-client (port 5222) and xmpp-server (port 5269) are listed.\n- RestartLike most things, it does not hurt to restart prosody.service to see if it resolves an issue.\n\nIf you are unable to resolve your issue yourself there are a variety of resources you can use to seek help. In order of immediacy with which you will likely receive help:\n\n1. XMPP Conference: prosody@conference.prosody.im\n1. Mailing List: prosody-users@googlegroups.com, web interface\n1. Arch Forums (for package issues)\n\n"
    },
    {
      "title": "Development",
      "level": 2,
      "content": "A development packages is maintained for Prosody in the AUR, prosody-hgAUR. prosody-hg tracks the Mercurial repository tip for Prosody and will always contain the latest code as it is checked in. Both packages are built similarly to the stable package.\n\n"
    },
    {
      "title": "Communication",
      "level": 2,
      "content": "- Mailing Lists: prosody-dev, prosody-users\n- Conference: prosody@conference.prosody.im\n- Blog: Prosodical Thoughts\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official documentation\n- Prosodical Thoughts (Blog)\n- Issue Tracker\n- Prosody Modules (Extra Modules)\n\n"
    }
  ]
}