{
  "title": "Network bridge",
  "url": "https://wiki.archlinux.org/title/Network_bridge",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Bridge with netctl\n- Network configuration#Bonding or LAG\n\nA network bridge is a virtual network device that forwards packets between two or more network segments. A bridge behaves like a virtual network switch and works transparently. Other machines in the network do not need to know about its existence. Physical network devices (e.g. eth1) and virtual network devices (e.g. tap0) can be connected to it.\n\n"
    },
    {
      "title": "Creating a bridge",
      "level": 2,
      "content": "There are a number of ways to create a network bridge. This section outlines the steps required to set up a bridge with at least one ethernet interface. This is useful for things like the bridge mode of QEMU, setting a software based access point, etc.\n\nNote: **before** \n\n"
    },
    {
      "title": "With iproute2",
      "level": 3,
      "content": "This section describes the management of a network bridge using the ip tool from the iproute2 package, which is required by the base meta package.\n\nCreate a new bridge and change its state to up:\n\n```\n# ip link add name bridge_name type bridge\n# ip link set dev bridge_name up\n```\n\nTo add an interface (e.g. eth1) into the bridge, its state must be up:\n\n```\n# ip link set eth1 up\n```\n\nAdding the interface into the bridge is done by setting its master to bridge_name:\n\n```\n# ip link set eth1 master bridge_name\n```\n\nTo show the existing bridges and associated interfaces, use the bridge utility (also part of iproute2). See bridge(8) for details.\n\n```\n# bridge link\n```\n\nThis is how to remove an interface from a bridge:\n\n```\n# ip link set eth1 nomaster\n```\n\nThe interface will still be up, so you may also want to bring it down:\n\n```\n# ip link set eth1 down\n```\n\nTo delete a bridge issue the following command:\n\n```\n# ip link delete bridge_name type bridge\n```\n\nThis will automatically remove all interfaces from the bridge. The slave interfaces will still be up, though, so you may also want to bring them down after.\n\n"
    },
    {
      "title": "Adding the main network interface",
      "level": 4,
      "content": "If you are doing this on a remote server, and the plan is to add the main network interface (e.g. eth0) to the bridge, first take note of the current network status:\n\n```\n$ ip address show eth0\n$ ip route show dev eth0\n```\n\nFor this example, this is the relevant info:\n\n- IP address attached to eth0: 10.2.3.4/8\n- Default gateway: 10.0.0.1\n- Bridge name: br0\n\nInitial setup for the bridge:\n\n```\n# ip link add name br0 type bridge\n# ip link set dev br0 up\n# ip address add 10.2.3.4/8 dev br0\n# ip route append default via 10.0.0.1 dev br0\n```\n\nThen, execute these commands in quick succession. It is advisable to put them in a script file and execute the script:\n\n```\n# ip link set eth0 master br0\n# ip address del 10.2.3.4/8 dev eth0\n```\n\nExplanation:\n\n- Once eth0 is added to the bridge, it won't be used for routing anymore. br0 will take its place, so it needs an IP and have the default route attached.\n- We cannot delete the IP address on eth0 before adding the interface to br0, otherwise network connectivity will be lost.\n- However, we need to quickly remove the ip address on eth0, otherwise network connectivity will be lost after a short period.\n- Linux does not allow two default routes on the same routing table. The easy workaround is just to append the new default route.\n- Once the IP address of eth0 is removed, the default route attached to it is automatically removed.\n\n"
    },
    {
      "title": "With bridge-utils",
      "level": 3,
      "content": "This section describes the management of a network bridge using the legacy brctl tool from the bridge-utils package. See brctl(8) for full listing of options.\n\nCreate a new bridge:\n\n```\n# brctl addbr bridge_name\n```\n\nAdd a device to a bridge, for example eth1:\n\n```\n# brctl addif bridge_name eth1\n```\n\nShow current bridges and what interfaces they are connected to:\n\n```\n$ brctl show\n```\n\nSet the bridge device up:\n\n```\n# ip link set dev bridge_name up\n```\n\nDelete a bridge, you need to first set it to down:\n\n```\n# ip link set dev bridge_name down\n# brctl delbr bridge_name\n```\n\nNote: You can also load the module at boot.\n\n```\n# modprobe br_netfilter\n```\n\nYou can also load the module at boot.\n\n"
    },
    {
      "title": "Adding the main network interface",
      "level": 4,
      "content": "First, take note of the current network status:\n\n```\n$ ip address show eth0\n$ ip route show dev eth0\n```\n\nFor this example, this is the relevant info:\n\n- IP address attached to eth0: 10.2.3.4/8\n- Default gateway: 10.0.0.1\n- Bridge name: br0\n\nInitial setup for the bridge:\n\n```\n# brctl addbr br0\n# ip address add 10.2.3.4/8 dev br0\n# ip link set dev br0 up\n```\n\nThen, execute these commands in quick succession. It is advisable to put them in a script file and execute the script:\n\n```\n# brctl addif br0 eth0\n# ip address del 10.2.3.4/8 dev eth0\n```\n\n"
    },
    {
      "title": "With netctl",
      "level": 3,
      "content": "See Bridge with netctl.\n\n"
    },
    {
      "title": "With systemd-networkd",
      "level": 3,
      "content": "See systemd-networkd#Bridge interface.\n\n"
    },
    {
      "title": "With NetworkManager",
      "level": 3,
      "content": "GNOME's Network settings can create bridges, but currently will not auto-connect to them or slave/attached interfaces. Open Network Settings, add a new interface of type Bridge, add a new bridged connection, and select the MAC address of the device to attach to the bridge.\n\nKDE's plasma-nm can create bridges. In order to view, create and modify bridge interfaces open the Connections window either by right clicking the Networks applet in the system tray and selecting Configure Network Connections... or from System Settings > Connections. Click the Configuration button in the lower left corner of the module and enable \"Show virtual connections\". A session restart will be necessary to use the enabled functionality.\n\nnm-connection-editor can create bridges in the same manner as GNOME's Network settings. This page shows these steps with screenshots.\n\nnmcli from networkmanager can create bridges. For example, to create a bridge br0 with STP disabled (to avoid the bridge being advertised on the network) run:\n\n```\n$ nmcli connection add type bridge ifname br0 stp no\n```\n\nMake your Ethernet interface (enp30s0 in this example, see Network configuration#Network interfaces for instructions on finding out the name) into a slave to the bridge:\n\n```\n$ nmcli connection add type bridge-slave ifname enp30s0 master br0\n```\n\nBring the existing connection down (you can acquire the connection name with nmcli connection show --active):\n\n```\n$ nmcli connection down Connection\n```\n\nBring the new bridge up:\n\n```\n$ nmcli connection up bridge-br0\n$ nmcli connection up bridge-slave-enp30s0\n```\n\nIf NetworkManager's default interface for the device you added to the bridge connects automatically, you may want to disable that by clicking the gear next to it in Network Settings, and unchecking Connect automatically under Identity or using the command:\n\n```\n$ nmcli connection modify Connection connection.autoconnect no\n```\n\n"
    },
    {
      "title": "Assigning an IP address",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nWhen the bridge is fully set up, it can be assigned an IP address:\n\n"
    },
    {
      "title": "With iproute2",
      "level": 3,
      "content": "```\n# ip address add dev bridge_name 192.168.66.66/24\n```\n\n"
    },
    {
      "title": "With NetworkManager",
      "level": 3,
      "content": "Give it the desired address:\n\n```\n# nmcli connection modify Connection ipv4.addresses desired_IP\n```\n\nSet up a DNS server (this will also avoid not being able to load any pages after you apply the changes):\n\n```\n# nmcli connection modify Connection ipv4.dns DNS_server\n```\n\nSet the IP address to static:\n\n```\n# nmcli connection modify Connection ipv4.method manual\n```\n\nApply the changes:\n\n```\n# nmcli connection up Connection\n```\n\n"
    },
    {
      "title": "Wireless interface on a bridge",
      "level": 3,
      "content": "To add a wireless interface to a bridge, you first have to assign the wireless interface to an access point or start an access point with hostapd. Otherwise the wireless interface will not be added to the bridge.\n\nSee also Debian:BridgeNetworkConnections#Bridging with a wireless NIC.\n\n"
    },
    {
      "title": "Speeding up traffic destinated to the bridge itself",
      "level": 3,
      "content": "In some situations the bridge not only serves as a bridge box, but also talks to other hosts. Packets that arrive on a bridge port and that are destinated to the bridge box itself will by default enter the iptables INPUT chain with the logical bridge port as input device. These packets will be queued twice by the network code, the first time they are queued after they are received by the network device. The second time after the bridge code examined the destination MAC address and determined it was a locally destinated packet and therefore decided to pass the frame up to the higher protocol stack.[1]\n\nThe way to let locally destinated packets be queued only once is by brouting them in the BROUTING chain of the broute table. Suppose br0 has an IP address and that br0's bridge ports do not have an IP address. Using the following rule should make all locally directed traffic be queued only once:\n\n```\n# ebtables -t broute -A BROUTING -d $MAC_OF_BR0 -p ipv4 -j redirect --redirect-target DROP\n```\n\nThe replies from the bridge will be sent out through the br0 device (assuming your routing table is correct and sends all traffic through br0), so everything keeps working neatly, without the performance loss caused by the packet being queued twice.\n\nThe redirect target is needed because the MAC address of the bridge port is not necessarily equal to the MAC address of the bridge device. The packets destinated to the bridge box will have a destination MAC address equal to that of the bridge br0, so that destination address must be changed to that of the bridge port.\n\n"
    },
    {
      "title": "No networking after bridge configuration",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nIt may help to remove all IP addresses and routes from the interface (e.g. eth1) that was added to the bridge and configure these parameters for the bridge instead.\n\nFirst of all, make sure there is no dhcpcd instance running for eth1, otherwise the deleted addresses may be reassigned.\n\nRemove address and route from the eth1 interface:\n\n```\n# ip addr del address dev eth1\n# ip route del address dev eth1\n```\n\nNow IP address and route for the earlier configured bridge must be set. This is usually done by starting a DHCP client for this interface. Otherwise, consult Network configuration for manual configuration.\n\n"
    },
    {
      "title": "No networking on hosted servers after bridge configuration",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nAs the MAC address of the bridge is not necessarily equal to the MAC address of the networking card usually used by the server, the server provider might drop traffic coming out from the bridge, resulting in a loss of connectivity when bridging e.g. the server ethernet interface. Configuring the bridge to clone the mac address of the ethernet interface might therefore be needed for hosted servers.\n\n"
    },
    {
      "title": "Cannot connect to bridge connection after connecting to usual connection",
      "level": 3,
      "content": "In Network Manager applet, if you have usual ethernet/wireless connection (not a bridge slave connection), and if you first connect to it, and then try to connect to bridged connection (with or without disconnecting from usual connection first), then you are not able to connect to it. For some reason, the bridge slave connection (it is not listed in network applet) is not activated, even when the auto connect checkbox is enabled.\n\nThe workaround is to activate it manually via terminal:\n\n```\nnmcli connection up br1\\ slave\\ 1\n```\n\nThen immediately your bridge connections works.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Bridge appears to not be working on one side of the network",
      "level": 3,
      "content": "See QEMU#Internal networking.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official documentation for iproute2\n- ebtables/iptables interaction on a Linux-based bridge\n\n"
    }
  ]
}