{
  "title": "Kernel-install",
  "url": "https://wiki.archlinux.org/title/Kernel-install",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Unified kernel image\n\nkernel-install(8) is a flexible utility designed to streamline the installation and administration of Linux kernel images on a system. It features a plugin system, allowing for seamless integration with other utilities. These plugins define a range of actions and configurations required during the installation and management of Linux kernel images. Examples of such tasks include configuring boot loader entries, generating Unified kernel images (UKI), or facilitating kernel signing for Secure Boot compliance.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "kernel-install is part of and packaged with systemd. The systemd-ukify optional dependency is also needed for unified kernel images unless a different UKI generator is specified (see #Main configuration).\n\n"
    },
    {
      "title": "Main configuration",
      "level": 3,
      "content": "The main configuration file is /etc/kernel/install.conf. Use it to configure the layout you want to use, i.e. bls for traditional split kernel and initrd images, or uki for Unified kernel images:\n\n```\n/etc/kernel/install.conf\n```\n\n```\nlayout=bls\n```\n\n"
    },
    {
      "title": "Kernel command line",
      "level": 3,
      "content": "Kernel parameters must be set in /etc/kernel/cmdline. They will either be embedded in the UKI, or added to the boot loader configuration, according to the layout used. If /etc/kernel/cmdline doesn't exist, kernel install will use the parameters in /usr/lib/kernel/cmdline or /proc/cmdline, not setting the kernel parameters in /etc/kernel/cmdline could result in kernel-install using the parameters of the current running kernel.\n\n"
    },
    {
      "title": "Plugins",
      "level": 3,
      "content": "To list active plugins used by kernel-install when installing, upgrading, or removing a kernel image, you can use the inspect argument:\n\n```\n# kernel-install inspect\n```\n\n```\n...\nPlugins: /usr/lib/kernel/install.d/50-depmod.install\n         /usr/lib/kernel/install.d/50-mkinitcpio.install\n         /usr/lib/kernel/install.d/60-ukify.install\n         /usr/lib/kernel/install.d/90-loaderentry.install\n         /usr/lib/kernel/install.d/90-uki-copy.install\n...\n```\n\nAvailable plugins are found under /usr/lib/kernel/install.d/:\n\n```\nls /usr/lib/kernel/install.d/\n```\n\n```\n50-depmod.install  50-mkinitcpio.install  60-ukify.install  90-loaderentry.install  90-uki-copy.install  91-sbctl.install\n```\n\nSimilarly named files in /etc/kernel/install.d/ will override the default ones.\n\nFor example, to disable the default sbctl plugin (which automatically signs new UKIs for Secure Boot):\n\n```\n# ln -sf /dev/null /etc/kernel/install.d/91-sbctl.install\n```\n\nYou can also write your own kernel-install plugins, and place them in /etc/kernel/install.d/.\n\n"
    },
    {
      "title": "Unified kernel images",
      "level": 3,
      "content": "See Unified kernel image#kernel-install\n\n"
    },
    {
      "title": "Manually",
      "level": 3,
      "content": "To manually install a kernel from /usr/lib/modules, use the following add command:\n\n```\n# kernel-install add A.B.C-name /usr/lib/modules/A.B.C-name/vmlinuz\n```\n\nTo remove a kernel manually, use the remove command:\n\n```\n# kernel-install remove A.B.C-name\n```\n\n"
    },
    {
      "title": "Automatically",
      "level": 3,
      "content": "To trigger kernel-install and all active plugins automatically when a kernel package is installed or updated, you can install pacman-hook-kernel-installAUR.\n\nIt's worth noting that a similar functionality is already provided by mkinitcpio's pacman hooks. If you intend to switch to kernel-install, these will need to be manually masked:\n\n```\n# ln -s /dev/null /etc/pacman.d/hooks/60-mkinitcpio-remove.hook\n# ln -s /dev/null /etc/pacman.d/hooks/90-mkinitcpio-install.hook\n```\n\nTo revert, simply delete the symlinks created above.\n\n"
    }
  ]
}