{
  "title": "Spotify",
  "url": "https://wiki.archlinux.org/title/Spotify",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Spotify is a digital music streaming service with a freemium business model. This article is mainly about the semi-official, proprietary Spotify for Linux client, which is developed by Spotify's engineers in their spare time and not actively supported by Spotify.[1] Alternatively, there is an online player and a number of open source third-party clients.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install spotify-launcher. This package manages a per-user installation in your home directory, allowing Spotify to update itself independently of pacman (similar to how Spotify self-updates on other operating systems).\n\nIf you prefer to manage Spotify updates with pacman, instead use spotifyAUR which repackages Spotify for Linux. If you need to add and play local files you need to additionally install zenity and ffmpeg4.4.\n\n"
    },
    {
      "title": "Third-party clients",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\n"
    },
    {
      "title": "Premium subscription",
      "level": 4,
      "content": "Note: **require** \n\n- Librespot — An open source client library for Spotify that enables applications to use Spotify's service (streaming) without the official closed-source libspotify.\n\n- Mopidy — An alternative plug-in based implementation of Music Player Daemon, able to stream from Spotify with an extension.\n\n- ncspot — Cross-platform ncurses Spotify client written in Rust, inspired by ncmpc and the likes.\n\n- Psst — Fast and multi-platform Spotify client, made in Rust with a native GUI.\n\n- Spicetify — A Powerful Command-Line tool to customize your Spotify-Client with themes, extensions and more.\n\n- Spot — Gtk/Rust native Spotify client for the GNOME desktop.\n\n- Spotifyd — An open source Spotify client running as a UNIX daemon that supports the Spotify Connect protocol which makes it show up as a device that can be controlled from the official clients.\n\n- spotify-qt — Lightweight Spotify client using Qt written in C++.\n\n- spotify-player — A newer and more feature-rich alternative to spotify-tui.\n\n- spotify-tui — A Spotify client for the terminal written in Rust that has not seen updates since 2021-11-17.\n\n- Tizonia — Command-line cloud music player for Linux with support for Spotify, Google Play Music, YouTube, SoundCloud, Plex servers and Chromecast devices.\n\n"
    },
    {
      "title": "Free subscription",
      "level": 4,
      "content": "- Spotube — Open source Spotify-YouTube client that does not require Premium nor uses Electron: it gets the data from Spotify and plays the audio from YouTube.\n\n"
    },
    {
      "title": "Limit storage size",
      "level": 3,
      "content": "Spotify automatically manages a storage size for caching, however one may want to force the size limit preventing the filesystem from filling up.\n\nAppend storage.size (measured in MB) to /home/user/.config/spotify/prefs, e.g. a storage size of 3072 MB:\n\n```\n~/.config/spotify/prefs\n```\n\n```\nstorage.size=3072\n```\n\n"
    },
    {
      "title": "Global media hotkeys",
      "level": 3,
      "content": "For environments in which controlling Spotify via the keyboard does not work automatically, the official Linux client has support for media keys like XF86AudioPlay. We can use for example xbindkeys to catch the global media keypresses, and then forward them to Spotify using one of the methods below. If you use xbindkeys, ensure that Spotify is restarted after installation and key configuration otherwise the key events will not be properly caught.\n\n"
    },
    {
      "title": "MPRIS",
      "level": 4,
      "content": "The Spotify client implements the MPRIS D-Bus interface which allows external control.\n\n"
    },
    {
      "title": "Disable track notifications",
      "level": 3,
      "content": "After version 0.9.10, track change notifications were enabled by default. They can be quite intrusive. To disable them, launch Spotify with the --ui.track_notifications_enabled=false option or add:\n\n```\n~/.config/spotify/Users/spotify login-user/prefs\n```\n\n```\nui.track_notifications_enabled=false\n```\n\nAlternatively, you can disable track notifications via the client's settings: disable Show desktop notifications when the song changes.\n\n"
    },
    {
      "title": "Show track notifications",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with MPRIS#Playerctl.** This article or section is a candidate for merging with MPRIS#Playerctl.\n\nThis article or section is a candidate for merging with MPRIS#Playerctl.\n\nplayerctl provides a library you can use with python-gobject and a notification daemon such as dunst to show the artist and title in a notification when the track changes.\n\n```\n#!/usr/bin/env python3\n\nimport gi\ngi.require_version('Playerctl', '2.0')\nfrom gi.repository import Playerctl, GLib\nfrom subprocess import Popen\n\nplayer = Playerctl.Player()\n\ndef on_track_change(player, e):\n    track_info = '{artist} - {title}'.format(artist=player.get_artist(), title=player.get_title())\n    Popen(['notify-send', track_info])\n\nplayer.connect('metadata', on_track_change)\n\nGLib.MainLoop().run()\n```\n\n"
    },
    {
      "title": "Skip overplayed radio tracks",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with MPRIS#Playerctl.** This article or section is a candidate for merging with MPRIS#Playerctl.\n\nThis article or section is a candidate for merging with MPRIS#Playerctl.\n\nAnother use of the playerctl library is to skip tracks that are played too much on radio when you do not necessarily want to downvote these tracks because you may want to hear them again later on that station.\n\n```\n#!/usr/bin/env python3\n\nfrom gi.repository import Playerctl, GLib\n\nplayer = Playerctl.Player()\n\nplayed_out = ['Zu Fuss', 'Walk And Talk', 'Neuland']\n\ndef on_track_change(player, e):\n    if player.get_title() in played_out:\n        player.next()\n\nplayer.on('metadata', on_track_change)\n\nGLib.MainLoop().run()\n```\n\n"
    },
    {
      "title": "spotblock",
      "level": 4,
      "content": "spotblock-gitAUR is a resource-efficient ad blocker that runs as a systemd daemon.\n\n"
    },
    {
      "title": "Spotify-AdKiller",
      "level": 4,
      "content": "spotify-adkiller-gitAUR is another alternative to block Spotify ads.\n\n"
    },
    {
      "title": "spotblock-rs",
      "level": 4,
      "content": "spotblock-rsAUR is a fast and light program to mute Spotify ads. It also works with PipeWire.\n\n"
    },
    {
      "title": "Hosts file",
      "level": 4,
      "content": "Note: **This article or section is a candidate for merging with Pi-hole.** This article or section is a candidate for merging with Pi-hole.\n\nThis article or section is a candidate for merging with Pi-hole.\n\nYou may also add the following lines to your hosts file to block ads in Spotify:\n\n```\n/etc/hosts\n```\n\n```\n# Block spotify ads\n127.0.0.1 media-match.com\n127.0.0.1 adclick.g.doublecklick.net\n127.0.0.1 www.googleadservices.com\n127.0.0.1 open.spotify.com\n127.0.0.1 pagead2.googlesyndication.com\n127.0.0.1 desktop.spotify.com\n127.0.0.1 googleads.g.doubleclick.net\n127.0.0.1 pubads.g.doubleclick.net\n127.0.0.1 audio2.spotify.com\n127.0.0.1 www.omaze.com\n127.0.0.1 omaze.com\n127.0.0.1 bounceexchange.com\n# 127.0.0.1 spclient.wg.spotify.com\n127.0.0.1 securepubads.g.doubleclick.net\n127.0.0.1 8.126.154.104.bc.googleusercontent.com\n127.0.0.1 104.154.126.8\n```\n\n"
    },
    {
      "title": "Send commands via SSH",
      "level": 4,
      "content": "If you set up ssh on the server, you can send controls from a client to a remote Spotify instance with\n\n```\n$ ssh user@host yourcommand\n```\n\nwhere yourcommand can be spotifycmd that you installed on the server, or a dbus script for the linux version, as described above.\n\n"
    },
    {
      "title": "Grab the Spotify window via SSH",
      "level": 4,
      "content": "Aside from grabbing the whole desktop with TeamViewer or VNC to remotely control your server, you can also only grab the Spotify Window from the server to your client.\n\nTo do that, you need to configure sshd on your server and install x11vnc on both server and client as well as tigervnc on the client. Then you can use these scripts to grab either the complete dektop or only the Spotify window, which essentially gets you GUI client-like behavior as with MPD.\n\n```\n#!/bin/bash\n# vncget.sh\n\nif [[ $1 == all ]];then\n  ssh -f -t -L 5900:localhost:5900 user@host \"x11vnc -q -display :0 -auth .Xauthority\"\nelse\n  ssh -f -t -L 5900:localhost:5900 user@host \".bin/vncgetspotify.sh\"\nfi\n \nfor i in {1..4}; do\n  sleep 2\n  if vncviewer localhost:0; then break; fi\ndone\n```\n\n```\n#!/bin/bash\n# vncgetspotify.sh\n\nexport DISPLAY=:0\n\nid=$(wmctrl -lx | awk '/spotify.exe.Wine/ {print $1}')\n[[ -z $id ]] && id=$(wmctrl -lx | awk '/spotify.Spotify/ {print $1}')\n\nx11vnc -sid $id -display :0 -auth .Xauthority\n```\n\nYou will need to copy the second script to ~/.bin/vncgetspotify.sh on the server and the first script to any place on your client.\n\nFinally, to grab the spotify window, run on the client:\n\n```\n$ sh vncget.sh\n```\n\nor, for the whole desktop:\n\n```\n$ sh vncget.sh all\n```\n\n"
    },
    {
      "title": "HiDPI Mode",
      "level": 3,
      "content": "As the current Spotify build is not DPI aware, the amount to scale the interface by can be specified using the terminal command:\n\n```\n$ spotify --force-device-scale-factor=X\n```\n\nwhere X is the amount to scale the interface by, e.g 2.\n\nThis change can be added to the spotify.desktop file in order to apply the scaling when launching from the desktop.\n\n- If you use spotify-launcher you can use the config file /etc/spotify-launcher.conf or ~/.config/spotify-launcher.conf to set the flag. See the GitHub page for more info.\n- If you use spotifyAUR you can also put the flag in ~/.config/spotify-flags.conf instead.\n\nTo make sure the file does not get overwritten when the package is updated, copy it to you local applications folder:\n\n```\n$ cp /usr/share/applications/spotify.desktop ~/.local/share/applications/\n```\n\nNow edit ~/.local/share/applications/spotify.desktop and add the --force-device-scale-factor option:\n\n```\nspotify.desktop\n```\n\n```\n[Desktop Entry]\nType=Application\nName=Spotify\nGenericName=Music Player\nIcon=spotify-client\nTryExec=spotify\nExec=spotify --force-device-scale-factor=2 --uri=%U\nTerminal=false\nMimeType=x-scheme-handler/spotify;\nCategories=Audio;Music;Player;AudioVideo;\nStartupWMClass=spotify\n```\n\nYou might need to relaunch your Desktop Manager, before these override changes will be effective.\n\n"
    },
    {
      "title": "Running under Wayland",
      "level": 3,
      "content": "Running Spotify under Xwayland can cause some quirks, especially with mixed screen sizes and orientations. We can pass some flags to get Spotify to run in Wayland mode: --enable-features=UseOzonePlatform --ozone-platform=wayland\n\nThese change can be added to the spotify.desktop file in order to start in Wayland mode when launching from the desktop.\n\n- If you use spotify-launcher you can use the config file /etc/spotify-launcher.conf or ~/.config/spotify-launcher.conf to set the flags. See the GitHub page for more info.\n- If you use spotifyAUR you can put the flags in ~/.config/spotify-flags.conf instead. One flag per line.\n\nSee the previous section #HiDPI Mode for details.\n\n"
    },
    {
      "title": "Disable GPU",
      "level": 3,
      "content": "To prevent Spotify from using your GPU for hardware video acceleration and to reduce VRAM usage, launch Spotify with the --disable-gpu flag.\n\n"
    },
    {
      "title": "Desktop Environment alerts (beeps) mutes Spotify",
      "level": 3,
      "content": "Comment out \"module-role-cork\" in the PulseAudio configuration file so it does not get loaded anymore.\n\nOr unload it temporarily with:\n\n```\n$ pactl unload-module module-role-cork\n```\n\n"
    },
    {
      "title": "Blinking images and improper rendering while using Spotify Linux with DWM",
      "level": 3,
      "content": "Start spotify as a floating window.\n\nYou can add this rule to the rules array in your config.h:\n\n```\n{ \"Spotify\",     NULL,       NULL,        2,         True,     -1 },\n```\n\nThis will tell dwm to start spotify as a floating window associated with the tag \"2\" no matter what window mode you are in. Recompile and install dwm to apply your new settings.\n\n"
    },
    {
      "title": "Broken search, browsing or radio",
      "level": 3,
      "content": "If various tabs like browsing only show a blank screen, the search field does not seem to do anything or the radio page is broken (stuck when starting and unsresponsive to input) you might be using a custom locale.\n\nTry setting the environment variable LC_NUMERIC to en_US.utf8 before starting Spotify.\n\n"
    },
    {
      "title": "Deadlock GUI Thread",
      "level": 3,
      "content": "Can occur under tiling window managers, such as Awesome, when double-clicking new song or playlist. Edit the file ~/.config/spotify/Users/spotify login-user/prefs to add or change the following:\n\n```\nui.track_notifications_enabled=false\n```\n\nRestart Spotify. This will try to disable song notifications which seem to be the cause of the issue (the lack of a notification daemon to receive them makes the UI thread hang). Note that several causes appear to exist for this problem, and this particular fix only applies to select versions of Spotify client, i3 and Awesome, and it may be that additional root causes exist for the Debian and Ubuntu users reporting this issue. Observed with Spotify 0.9.17.1.g9b85d436 and Awesome 3.4.15 and i3-gaps 4.13-2 and Spotify 1.0.64.407.g9bd02c2d.\n\nNote: This issue has multiple causes, so keep track of what you change while researching this. Update this section with additional scenarios and fixes.\n\n"
    },
    {
      "title": "Album art and images are missing, show up as squares",
      "level": 3,
      "content": "Quit Spotify, then open Spotify preferences ~/.config/spotify/prefs\n\nChange @https to @http:\n\n```\nnetwork.proxy.addr=\"your-proxy.com:80@http\"\nnetwork.proxy.mode=2\n```\n\nSee original forum post here.\n\n"
    },
    {
      "title": "Spotify does not detect other devices on local network",
      "level": 3,
      "content": "If a firewall is in place, open ports 57621 for UDP and TCP. If you use a variant of the iptables Simple stateful firewall, the following should do it:\n\n```\niptables -A TCP -p tcp --dport 57621 -j ACCEPT -m comment --comment spotify\niptables -A UDP -p udp --dport 57621 -j ACCEPT -m comment --comment spotify\n```\n\nIt is also possible to restrict the source and destination to the local network.\n\nIf you are using Spotify Connect to play music on a wireless speaker or AVR, your firewall needs to be configured for Spotify's mDNS lookup of those. Sadly, it uses a random unprivileged port [3] which makes these firewall rules rather nasty. Fortunately, you can restrict the rules to source port 1900 or 5353.\n\n```\niptables -A UDP -p udp --sport 1900 --dport 1025:65535 -j ACCEPT -m comment --comment spotify\niptables -A UDP -p udp --sport 5353 --dport 1025:65535 -j ACCEPT -m comment --comment spotify\n```\n\nIf using MusicCast for streaming, you will also need to ensure that IGMP multicast packets are allowed to 224.0.0.22 (with IP options allowed) from the MusicCast speaker/AVR by all firewalls in place (including router firewall).\n\nIf you cannot detect other linux clients, this may be due to a bug in Spotify related to the user name launching the instance. Spotify will not detect other instances having the same $HOME environment variable, even on different machines. To circumvent this, either create a dedicated user, or launch Spotify with a different $HOME. The following is a workaround to use your home directory and still be able to detect other devices:\n\n```\n$ ln -s $HOME ~/.spotify_fakehome_$HOSTNAME\n$ HOME=$HOME/.spotify_fakehome_$HOSTNAME spotify &\n```\n\n"
    },
    {
      "title": "Search Bar text is invisible when using a dark theme",
      "level": 3,
      "content": "The text in the search bar appears to be hardcoded to be white, making it invisible when using a dark Qt theme. To fix this, you will need to make an override.\n\nFirst create a css file somewhere your account has permission to read/write from (such as your home folder). Call it whatever you like (eg. spotify-override.css).\n\nOpen the newly created css file and add the following:\n\n```\nQLineEdit { color: #000 }\n```\n\nSave the file and exit. Next, you need to add the following to the end of your Spotify launcher (substitute the path with the actual path of your css file):\n\n```\n-stylesheet=/home/user/spotify-override.css\n```\n\nSo your full launch path should look something like this:\n\n```\n/usr/share/spotify/spotify-client/spotify -stylesheet=/home/user/spotify-override.css\n```\n\n"
    },
    {
      "title": "Not respecting window manager rules",
      "level": 3,
      "content": "Window manager that try to apply specific rules like starting it on a determined workspace or maximizing it on startup, has no effect, as Spotify does not set the WM_CLASS property before creating the window, violating the ICCCM specifications. One solution is to use spotifywm-gitAUR.\n\n"
    },
    {
      "title": "GUI hangs while the music plays",
      "level": 3,
      "content": "Also the previous and next track buttons act with a delay of 10-40 seconds. Spotify by default tries to send notification about next track, if you do not have a notification-daemon installed, Spotify's GUI hangs.\n\nThe solution is to either disable notifications in the settings or to install a notification daemon from Desktop notifications.\n\n"
    },
    {
      "title": "Spotify occupies the whole screen over system panel and its borders are gone",
      "level": 3,
      "content": "If you have issue with window borders disappearing and the GUI going full-screen but you cannot drag the window or change its size, edit the preferences located by default in:\n\n```\n/home/yourusername/.config/Spotify/Users/yourusername-user/prefs\n```\n\n```\napp.window.position.width=1366\napp.window.position.height=768\n```\n\nClose Spotify, remove both lines shown above, save and run Spotify again.\n\n"
    },
    {
      "title": "Cannot open settings in Wayland",
      "level": 3,
      "content": "When using Wayland, clicking on the 'Settings' button does nothing. Using the keyboard instead will work (arrows and enter). See [4]\n\n"
    },
    {
      "title": "Crashes on startup",
      "level": 3,
      "content": "If you get a crash on startup with the following error message\n\n```\n[NNN:FATAL:gpu_data_manager_impl_private.cc(439)] GPU process isn't usable. Goodbye\n```\n\nTry to run spotify with the -no-zygote flag.\n\n"
    },
    {
      "title": "Spotify has limited or no internet connectivity while using a VPN",
      "level": 3,
      "content": "More recent versions of Spotify (noticed after version ~1.1.10) use NetworkManager's detection of internet connectivity for determining if Spotify is able to play songs or even log in. When using a VPN service, Network Manager can fail to correctly identify internet connectivity, stating \"Limited Connectivity\". See NetworkManager#Checking connectivity for possible solutions.\n\n"
    },
    {
      "title": "Slow or laggy client",
      "level": 3,
      "content": "If Spotify is being unusually slow, common culprits usually are corrupted cache files. Run the following command, after closing your Spotify client:\n\n```\n$ rm -rf ~/.cache/spotify/Browser/* ~/.cache/spotify/Data/* ~/.cache/spotify/Storage/*\n```\n\n- Make sure you only delete the files inside the folders, and not the folders themselves.\n- If that does not resolve the issue, try deleting ~/.config/spotify and reinstalling.\n\n"
    },
    {
      "title": "/usr/lib/libcurl-gnutls.so.4 error",
      "level": 3,
      "content": "If you encounter the error:\n\n```\nspotify: /usr/lib/libcurl-gnutls.so.4: no version information available (required by spotify)\n```\n\nDelete ~/.cache/spotify.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Spotify for Linux — Spotify's homepage for the Linux client\n\n"
    }
  ]
}