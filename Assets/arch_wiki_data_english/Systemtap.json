{
  "title": "Systemtap",
  "url": "https://wiki.archlinux.org/title/Systemtap",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "SystemTap provides free software (GPL) infrastructure to simplify the gathering of information about the running Linux system.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Simply install systemtap or systemtap-gitAUR, all done. Compare it to the most recent upstream release at [1].\n\nConsider also building it from sources at [2], where support for newer kernels or distributions makes first appearance.\n\n"
    },
    {
      "title": "Standard kernel",
      "level": 2,
      "content": "You will need at least the linux-headers package installed.\n\nBecause Arch permanently strips debugging data from its distributed binaries (including the kernel), many normal/fancier systemtap capabilities are simply not available, so many examples at /usr/share/doc/systemtap/examples will not work. However, see stapprobes(3) for the NON-DWARF and AUTO-DWARF probe types for what should still work, for example:\n\n- kernel tracepoints: kernel.trace(\"*\")\n- user-space probes: process(\"...\").function(\"...\") (for programs you build yourself with -g)\n- user-space markers: process(\"...\").mark(\"...\") (if they were configured with the <sys/sdt.h> markers)\n- perfctr-based probes: perf.*\n- non-dwarf kernel probes: kprobe.function(\"...\") and nd_syscall.* tapset (if a /boot/System.map* file is available, see below).\n\n"
    },
    {
      "title": "Kernel rebuild",
      "level": 2,
      "content": "You may consider to build a linux-custom package to run SystemTap, but rebuilding the linux package is easy and efficient.\n\n"
    },
    {
      "title": "Prepare",
      "level": 3,
      "content": "First, follow the steps at Kernel/Arch build system#Getting the ingredients to get the original kernel build files. Then use makepkg --verifysource to get the additional files. By performing the verification, you can safely skip the steps on \"Update checksum\".\n\n"
    },
    {
      "title": "Modify config",
      "level": 3,
      "content": "Edit config.x86_64, turn on these options:\n\n- CONFIG_KPROBES=y\n- CONFIG_KPROBES_SANITY_TEST=n\n- CONFIG_KPROBE_EVENT=y\n- CONFIG_NET_DCCPPROBE=m\n- CONFIG_NET_SCTPPROBE=m\n- CONFIG_NET_TCPPROBE=y\n- CONFIG_DEBUG_INFO=y\n- CONFIG_DEBUG_INFO_REDUCED=n\n- CONFIG_X86_DECODER_SELFTEST=n\n- CONFIG_DEBUG_INFO_VTA=y\n\nBy default only CONFIG_DEBUG_INFO and CONFIG_DEBUG_INFO_REDUCED are not set.\n\nWith the current linux kernel (tested with 3.15.2) you can simply append these lines into config.x86_64:\n\n```\nx86_64\n```\n\n```\necho '\nCONFIG_DEBUG_INFO=y\nCONFIG_DEBUG_INFO_REDUCED=n\n' >> config.x86_64\n```\n\n"
    },
    {
      "title": "Update checksum",
      "level": 3,
      "content": "Run sha256sum config.x86_64 to get a new sha256sum.\n\nIn PKGBUILD file, the sha256sum=('sum-of-first' ... 'sum-of-last') has the same order with source=('first-source' ... 'last-source'), put your new sha256sum in the right place.\n\n"
    },
    {
      "title": "Build and install",
      "level": 3,
      "content": "Optional: It is recommended to set MAKEFLAGS=\"-j16\" in /etc/makepkg.conf to speed up the compilation.\n\nYou will need about 12 GB disk space for this build. Consider using an in-memory tmpfs if you have large DRAM. Run makepkg or makepkg --skipchecksums to compile, then simply sudo pacman -U *.pkg.tar.gz to install the packages. pacman will tell you reinstall, and you should say y.\n\nlinux and linux-headers should be reinstalled, linux-docs does not matter.\n\nVia this method, external modules (e.g. nvidia and virtualbox) do not need to be rebuilt.\n\n"
    },
    {
      "title": "Build custom kernel",
      "level": 2,
      "content": "Please reference this README\n\n"
    },
    {
      "title": "Pass 4 fails when launching",
      "level": 3,
      "content": "If you get the following error message, try into install systemtap-gitAUR\n\n```\n/usr/share/systemtap/runtime/stat.c:214:2: error: 'cpu_possible_map' undeclared (first use in this function)\n```\n\n"
    },
    {
      "title": "System.map is missing",
      "level": 3,
      "content": "You can recover it where you build your linux kernel with DEBUG_INFO enabled\n\n```\n# cp src/linux-3.6/System.map /boot/System.map-3.6.7-1-ARCH\n```\n\nAlternatively,\n\n```\n# cp /proc/kallsyms /boot/System.map-$(uname -r)\n```\n\n"
    },
    {
      "title": "Process return probes not available",
      "level": 3,
      "content": "If you are sure that your kernel configuration is correct, but on launching stap you get both of the following messages:\n\n```\nWARNING: Kernel function symbol table missing [man warning::symbols]\nsemantic error: process return probes not available [man error::inode-uprobes]\n```\n\nthen SystemTap may have failed to verify support for this feature. You can fix this by following the steps in #System.map is missing.\n\n"
    }
  ]
}