{
  "title": "Openssl",
  "url": "https://wiki.archlinux.org/title/Openssl",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Transport Layer Security\n\nOpenSSL is an open-source implementation of the SSL and TLS protocols, designed to be as flexible as possible. It is supported on a variety of platforms, including BSD, Linux, OpenVMS, Solaris and Windows.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "openssl is installed by default on Arch Linux (as a dependency of coreutils).\n\nThere are various OpenSSL library bindings available for developers:\n\n- python-pyopenssl\n- perl-net-ssleay\n- lua-sec, lua52-sec, lua51-sec\n- haskell-hsopenssl\n- haskell-openssl-streams\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "On Arch Linux the OPENSSLDIR is /etc/ssl.\n\nThe OpenSSL configuration file, conventionally placed in /etc/ssl/openssl.cnf, may appear complicated at first. Remember that variables may be expanded in assignments, much like how shell scripts work. For a thorough explanation of the configuration file format, see config(5ssl).\n\n"
    },
    {
      "title": "req section",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with #Generate a certificate signing request.** This article or section is a candidate for merging with #Generate a certificate signing request.\n\nThis article or section is a candidate for merging with #Generate a certificate signing request.\n\nSettings related to generating keys, requests and self-signed certificates.\n\nThe req section is responsible for the DN prompts. A general misconception is the Common Name (CN) prompt, which suggests that it should have the user's proper name as a value. End-user certificates need to have the machine hostname as CN, whereas CA should not have a valid TLD, so that there is no chance that, between the possible combinations of certified end-users' CN and the CA certificate's, there is a match that could be misinterpreted by some software as meaning that the end-user certificate is self-signed. Some CA certificates do not even have a CN, such as Equifax:\n\n```\n$ openssl x509 -subject -noout < /etc/ssl/certs/Equifax_Secure_CA.pem\n```\n\n```\nsubject= /C=US/O=Equifax/OU=Equifax Secure Certificate Authority\n```\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "This sections assumes you have read Transport Layer Security#Obtaining a certificate.\n\n"
    },
    {
      "title": "Generate a Curve25519 private key",
      "level": 3,
      "content": "```\n$ openssl genpkey -algorithm x25519 -out filename\n```\n\n"
    },
    {
      "title": "Generate an ECDSA private key",
      "level": 3,
      "content": "```\n$ openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:P-256 -out filename\n```\n\n"
    },
    {
      "title": "Generate an RSA private key",
      "level": 3,
      "content": "With openssl-genpkey(1ssl), which supersedes genrsa according to openssl(1ssl):\n\n```\n$ openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:keysize -out filename\n```\n\nIf an encrypted key is desired, use the -aes-256-cbc option.\n\n"
    },
    {
      "title": "Generate a certificate signing request",
      "level": 3,
      "content": "Use openssl-req(1ssl):\n\n```\n$ openssl req -new -sha256 -key private_key -out filename\n```\n\n"
    },
    {
      "title": "Show a certificate signing request",
      "level": 3,
      "content": "Certificate signing requests are stored in an encoded format. To view the request in human readable format:\n\n```\n$ openssl req -noout -text -in filename\n```\n\n"
    },
    {
      "title": "Generate a self-signed certificate",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n```\n$ openssl req -key private_key -x509 -new -days days -out filename\n```\n\n"
    },
    {
      "title": "Generate a self-signed certificate with private key in a single command",
      "level": 3,
      "content": "You can combine the above command in OpenSSL into a single command which might be convenient in some cases.\n\nECDSA:\n\n```\n$ openssl req -x509 -newkey ec -pkeyopt 'ec_paramgen_curve:P-256' -days days -keyout key_filename -out cert_filename\n```\n\nRSA:\n\n```\n$ openssl req -x509 -newkey rsa:4096 -days days -keyout key_filename -out cert_filename\n```\n\n"
    },
    {
      "title": "Sign a certificate signing request with a CA certificate",
      "level": 3,
      "content": "```\n$ openssl x509 -req -in cert_req_filename -days days -CA CA_cert -CAkey CA_cert_private_key -CAserial CA_cert_serial_file -out cert_out\n```\n\n"
    },
    {
      "title": "Generate Diffie–Hellman parameters",
      "level": 3,
      "content": "See Diffie–Hellman key exchange for more information.\n\nCurrent best practice is to use one of the standard DH groups from RFC:7919, eg. ffdhe2048.\n\nAlternatively you can generate a random group of your own:\n\n```\n$ openssl dhparam -out filename 2048\n```\n\n"
    },
    {
      "title": "Show certificate information",
      "level": 3,
      "content": "```\n$ openssl x509 -text -in cert_filename\n```\n\n"
    },
    {
      "title": "Show certificate fingerprint",
      "level": 3,
      "content": "```\n$ openssl x509 -noout -in cert_filename -fingerprint -digest\n```\n\n-digest is optional and one of -md5, -sha1, -sha256, or -sha512. See \"-digest\" in x509(1ssl) § Input, Output, and General Purpose Options for when the digest is unspecified.\n\n"
    },
    {
      "title": "Convert certificate format",
      "level": 3,
      "content": "Use openssl x509 to convert certificates from binary (DER) format to PEM format (the text format with BEGIN CERTIFICATE headers)：\n\n```\n$ openssl x509 -inform DER -in myCA.crt -out myCA_pem.crt\n```\n\n"
    },
    {
      "title": "Use third-party providers",
      "level": 3,
      "content": "OpenSSL 3 introduced providers as a new concept for OpenSSL plugability. It is possible to use algorithms not included in OpenSSL without having to recompile it. For example, to test the NIST Post-Quantum Cryptography algorithms, you can install the Open Quantum Safe provider oqsproviderAUR. As an example, you can generate a quantum-safe self-signed certificate with private key using one of the variants of ML-DSA (formerly CRYSTALS-Dilithium):\n\n```\n$ openssl req -provider default -provider oqsprovider -x509 -newkey mldsa65 -days days -keyout key -out cert\n```\n\n"
    },
    {
      "title": "\"bad decrypt\" while decrypting",
      "level": 3,
      "content": "OpenSSL 1.1.0 changed the default digest algorithm for the dgst and enc commands from MD5 to SHA256. [2]\n\nTherefore if a file has been encrypted using OpenSSL 1.0.2 or older, trying to decrypt it with an up to date version may result in an error like:\n\n```\nerror:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:crypto/evp/evp_enc.c:540\n```\n\nSupplying the -md md5 option should solve the issue:\n\n```\n$ openssl enc -d -md md5 -in encrypted -out decrypted\n```\n\n"
    },
    {
      "title": "Python 3.10 and \"ca md too weak\" errors",
      "level": 3,
      "content": "In Python 3.10 by default there is a hardcoded list of allowed OpenSSL ciphers. Some of the less secure, like MD5, have been disabled at the ssl module level, ignoring the system-wide configuration of OpenSSL. It results sometimes in strange errors on older certificates, sometimes even when establishing https connections, like:\n\n```\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='a.kind.of.example.com', port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(398, '[SSL: CA_MD_TOO_WEAK] ca md too weak (_ssl.c:3862)')))\n```\n\nTo make Python follow the system configuration, you may have to rebuild it, adding --with-ssl-default-suites=openssl parameter to ./configure. The issue has been also reported as FS#73549.\n\n"
    },
    {
      "title": "Error setting cipher XXX",
      "level": 3,
      "content": "If you try to use a \"retired\" cipher, you'll get an error of this type:\n\n```\n$ openssl bf -d -in cipher_file -K passphrase\nError setting cipher BF-CBC\n4087A97A8A7F0000:error:0308010C:digital envelope routines:inner_evp_generic_fetch:unsupported:crypto/evp/evp_fetch.c:341:Global default library context, Algorithm (BF-CBC : 12)\n```\n\nSince OpenSSL 3.0, crypto algorithms are supplied through \"providers\". Oldest or least used algorithms belong to the legacy provider. [3]\n\nIf you need to use retired algorithms like DES, RC4, Blowfish, etc., you must add the option -provider legacy in your command line.\n\nHere is a complete example for decoding a Blowfish cipher.\n\n```\n$ openssl bf -d -in cipher_file -provider legacy -provider default -K passphrase\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia page on OpenSSL, with background information.\n- OpenSSL project page.\n- FreeBSD Handbook\n- Step-by-step guide to create a signed SSL certificate\n- OpenSSL Certificate Authority: A guide demonstrating how to act as your own certificate authority.\n- Bulletproof SSL and TLS by Ivan Ristić, a more formal introduction to SSL/TLS\n\n"
    }
  ]
}