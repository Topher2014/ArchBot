{
  "title": "PiHole",
  "url": "https://wiki.archlinux.org/title/PiHole",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- dnsmasq\n- Domain name resolution\n- Linux Containers\n- OpenVPN\n- WireGuard\n\nPi-hole project is a DNS sinkhole that compiles a blocklist of domains from multiple third-party sources. Pi-hole uses pi-hole-ftlAUR (a dnsmasq fork) to seamlessly drop any and all requests for domains in its blocklist. Running it effectively deploys network-wide ad-blocking without the need to configure individual clients. The package comes with an optional web administration interface.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the pi-hole-coreAUR package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n"
    },
    {
      "title": "FTL (Faster Than Light)",
      "level": 3,
      "content": "Pi-hole's FTL is a DNS resolver/forwarder and a database-like wrapper/API that provides long-term storage of requests which users can query through the \"long-term data\" section of the WebGUI. Data are collected and stored in two places:\n\n1. Daily data are stored in RAM and are captured in real-time within /run/log/pihole/pihole.log\n1. Historical data (several days/weeks/months) are stored on the file system /etc/pihole/pihole-FTL.db and written out at a user-specified interval.\n\n- To disable logging, see #Disable query logging.\n- Starting pihole-FTL.service is likely to fail. See #Failed to start Pi-hole FTLDNS engine.\n\npihole-FTL.service is statically enabled; re/start it. For FTL configuration, see upstream documentation.\n\n"
    },
    {
      "title": "FTL Integrated Web interface",
      "level": 4,
      "content": "Pi-hole has a powerful, user-friendly, but completely optional web interface. As well as changing settings, the user can analyse and visualise DNS queries handled by Pi-hole.\n\n"
    },
    {
      "title": "Update hosts file",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nfilesystem ships with an empty /etc/hosts file which is known to prevent Pi-hole from fetching block lists. One must append the following to this file to ensure correct operation, noting that ip.address.of.pihole should be the actual IP address of the machine running Pi-hole (e.g. 192.168.1.250) and myhostname should be the actual hostname of the machine running Pi-hole:\n\n```\n/etc/hosts\n```\n\n```\n127.0.0.1              localhost\nip.address.of.pihole   pi.hole myhostname\n```\n\nFor more, see Issue#1800.\n\n"
    },
    {
      "title": "Making devices use Pi-hole",
      "level": 3,
      "content": "To use Pi-hole, devices within the network should use Pi-hole's IP address as their sole DNS server. To accomplish this, there are generally two methods:\n\n1. In the router's LAN DHCP settings, set Pi-hole's IP address as the only DNS server available for connected devices.\n1. Manually configure each device to use Pi-hole's IP address as their only DNS server.\n\nMore information about making other devices use Pi-hole can be found at upstream documentation.\n\n"
    },
    {
      "title": "Usage",
      "level": 3,
      "content": "Change the computer's network settings so the only DNS server in use is 127.0.0.1.\n\nIf using DHCP to lease IP addresses from an external router, append bind-interfaces to /etc/dnsmasq.conf for DNS queries to resolve.\n\nTest DNS queries independently of network-configured nameserver in /etc/resolv.conf using the drill command of ldns package with drill @127.0.0.1 archlinux.org .\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Both standalone and server versions can be controlled via CLI, but only server version can be controlled via web interface.\n\n"
    },
    {
      "title": "Using web interface",
      "level": 3,
      "content": "Go to pi.hole or <Pi-hole IP address>/admin/ to access web interface.\n\n"
    },
    {
      "title": "Pi-hole DNS management",
      "level": 4,
      "content": "By default Pi-hole uses the Google DNS server. Change which DNS servers Pi-hole uses with:\n\n```\n$ pihole -a setdns ipaddress#port\n```\n\nSpecify multiple DNS servers by separating their addresses with commas.\n\n"
    },
    {
      "title": "Forced update of ad-serving domains list",
      "level": 4,
      "content": "To update the blocked domain list, execute:\n\n```\n$ pihole -g\n```\n\n"
    },
    {
      "title": "Temporarily disable Pi-hole",
      "level": 4,
      "content": "Pi-hole can be paused via CLI by executing:\n\n```\n$ pihole disable [time]\n```\n\nLeaving the value for time blank, the disabling will be permanent until later manual reenabling. time can be expressed in seconds or minutes with syntax #s and #m. For example, to disable Pi-hole for 5 minutes:\n\n```\n$ pihole disable 5m\n```\n\nAt any time, reenable Pi-hole by executing:\n\n```\n$ pihole enable\n```\n\n"
    },
    {
      "title": "Password-protected web interface",
      "level": 3,
      "content": "To password-protect the Pi-hole web interface, run the following command and enter the password:\n\n```\n$ pihole -a -p\n```\n\nTo disable the password protection, set a blank password.\n\n"
    },
    {
      "title": "Cloudflare DoH",
      "level": 3,
      "content": "Pi-hole can be configured to use Cloudflared to achieve DNS over HTTPS functionality.\n\nTo make Cloudflared work with Pi-hole, simply start cloudflared and configure pi-hole to use it as its DNS entry.\n\nUsing the suggested service file for cloudflared, that would be:\n\n```\n# systemctl start cloudflared\n$ pihole -a setdns 127.0.0.1#54\n```\n\nTest that pi-hole is working with:\n\n```\ndrill archlinux.org @127.0.0.1 -p 53\n```\n\n(notice that the port is the one bound to pi-hole, not the one bound to cloudflared).\n\n"
    },
    {
      "title": "Optimise for solid state drives",
      "level": 3,
      "content": "If Pi-hole is running on a solid state drive (SD card, SSD etc..) it is recommended to uncomment the DBINTERVAL value and change it to at least 60.0 to minimize writes to the database:\n\n```\n/etc/pihole/pihole-FTL.conf\n```\n\n```\n...\n\n## Database Interval\n## How often do we store queries in FTL's database -minutes-?\n## See: https://docs.pi-hole.net/ftldns/database/\n## Options: number of minutes\nDBINTERVAL=60.0\n\n...\n```\n\nAfter changes have been performed, restart pihole-FTL.service.\n\n"
    },
    {
      "title": "Disable query logging",
      "level": 3,
      "content": "Both daily and historic data collected by default contain query data that might be considered sensitive.\n\nTo disable the query database for historic data, set privacy level to the maximum Anonymous mode either in the web administration (Settings > Privacy) or in the configuration file /etc/pihole/pihole-FTL.conf by editing the line:\n\n```\nPRIVACYLEVEL=3\n```\n\nTo also disable the logging for daily data, use the following command:\n\n```\n$ pihole logging off\n```\n\n"
    },
    {
      "title": "Use with VPN server",
      "level": 3,
      "content": "Pi-hole can be used by connected VPN clients.\n\n"
    },
    {
      "title": "OpenVPN",
      "level": 4,
      "content": "An OpenVPN server can be configured to advertise a Pi-hole instance to its clients. Add the following two lines to /etc/openvpn/server/server.conf:\n\n```\npush \"redirect-gateway def1 bypass-dhcp\"\npush \"dhcp-option DNS Pi-hole-IP\"\n```\n\nIf it still does not work, try creating a file /etc/dnsmasq.d/00-openvpn.conf with the following content:\n\n```\ninterface=tun0\n```\n\nIt may be necessary to make dnsmasq listen on tun0.\n\n"
    },
    {
      "title": "WireGuard",
      "level": 4,
      "content": "WireGuard clients can be configured to use the Pi-hole DNS server. In the client configuration file, specify the following line:\n\n```\nDNS = Pi-hole-IP\n```\n\nIn order for the DNS to be functional from the VPN, Pi-hole has to listen to all local interfaces:\n\n```\npihole -a -i local\n```\n\nSee more information in WireGuard#Client configuration.\n\n"
    },
    {
      "title": "Nginx instead of Lighttpd",
      "level": 3,
      "content": "This is unofficial, community-supported configuration[dead link 2025-03-15 â“˜]. Make sure that PHP is set up (see #Set up PHP) and lighttpd server is inactive.\n\nInstall nginx-mainline and php-fpm.\n\nModify /etc/nginx/nginx.conf to contain the following in the http section:\n\n```\ngzip            on;\ngzip_min_length 1000;\ngzip_proxied    expired no-cache no-store private auth;\ngzip_types      text/plain application/xml application/json application/javascript application/octet-stream text/css;\ninclude /etc/nginx/conf.d/*.conf;\n```\n\nCopy the package provided default configuration for Pi-hole:\n\n```\n# mkdir /etc/nginx/conf.d\n# cp /usr/share/pihole/configs/nginx.example.conf /etc/nginx/conf.d/pihole.conf\n```\n\nEdit /etc/nginx/conf.d/pihole.conf and change the fastcgi_pass directive to the following:\n\n```\nfastcgi_pass  unix:/run/php-fpm/php-fpm.sock;\n```\n\nOptionally, set VIRTUAL_HOST to the CNAME of Pi-hole if the intention is to run multiple virtual hosts on Nginx.\n\n```\nfastcgi_param VIRTUAL_HOST \"pihole.example.com\";\n```\n\nSince version 7.4 php-fpm is hardened by default and revokes read/write access on /usr (and sub-directories).\n\nCreate an drop-in file for php-fpm with the following content:\n\n```\n/etc/systemd/system/php-fpm.service.d/pihole.conf\n```\n\n```\n[Service]\nReadWritePaths = /srv/http/pihole\nReadWritePaths = /run/pihole-ftl/pihole-FTL.port\nReadWritePaths = /run/log/pihole/pihole.log\nReadWritePaths = /run/log/pihole-ftl/pihole-FTL.log\nReadWritePaths = /etc/pihole\nReadWritePaths = /etc/hosts\nReadWritePaths = /etc/hostname\nReadWritePaths = /etc/dnsmasq.d/01-pihole.conf\nReadWritePaths = /proc/meminfo\nReadWritePaths = /proc/cpuinfo\nReadWritePaths = /sys/class/thermal/thermal_zone0/temp\nReadWritePaths = /tmp\n```\n\nThen start and enable nginx.service and php-fpm.service.\n\n"
    },
    {
      "title": "Additional blocklists",
      "level": 3,
      "content": "Pi-hole was intended to block ads, but it can also be used to block other unwanted content:\n\n1. Tracking domains\n1. Malware domains\n1. Piracy sites\n1. Fake news sites\n1. Phishing sites\n\nNote: **domains** \n\nThere are many sources providing these blocklists. Some examples: firebog.net and oisd.nl.\n\n"
    },
    {
      "title": "Block / Allow custom domain names based on a Regex",
      "level": 3,
      "content": "If you want to add a wildcard domain to the deny-/blacklist, use the following pihole command:\n\n```\n$ /usr/local/bin/pihole --wild yourdomain.com\n```\n\nIf you want to remove the same domain from the deny-/blacklist, just add -d flag to the pihole command:\n\n```\n$ /usr/local/bin/pihole --wild -d yourdomain.com\n```\n\nTo block all domains from a custom Regex, use the following pihole command::\n\n```\n$ pihole --regex \"[a-z]test.com\"\n```\n\nIf you want to remove the same custom Regex from the deny-/blacklist, just add -d flag to the pihole command:\n\n```\n$ pihole --regex -d \"[a-z]test.com\"\n```\n\n"
    },
    {
      "title": "Use Unbound as upstream DNS server",
      "level": 3,
      "content": "By default, Pi-hole forwards requests to upstream DNS servers, which might lead to privacy concerns. See upstream documentation for a guide on setting up Unbound locally to resolve DNS requests.\n\n"
    },
    {
      "title": "Odd behavior in the web interface after an upgrade",
      "level": 3,
      "content": "Some strange/unexplained rendering issues in the web GUI can often be fixed by clearing one's browser cache.\n\n"
    },
    {
      "title": "Data loss on reboot",
      "level": 3,
      "content": "Systems without a RTC such as some ARM devices will likely experience loss of data in the query log upon rebooting. When systems lacking a RTC boot, the time is set after the network and resolver come up. Aspects of Pi-hole can get started before this happens leading to the data loss. An incorrectly set RTC can also cause problems. See: Installation guide#Time and System time.\n\nFor devices lacking a RTC: A hacky work-around for this is to use drop-in files against pihole-FTL.service wherein a delay is built in calling /usr/bin/sleep x in a ExecStartPre statement. Note that the value of \"x\" in the sleep time depends on how long the specific hardware takes to establish the time sync.\n\nIssue#11008 against systemd-timesyncd is currently preventing the use of the time-sync.target to automate this.\n\n"
    },
    {
      "title": "Failed to start Pi-hole FTLDNS engine",
      "level": 3,
      "content": "It might be that systemd-resolved.service already occupied port 53, which is required for pihole-FTL.service. To resolve this, disable the stub listener by creating a drop-in snippet form systemd-resolved's configuration file:\n\n```\n/etc/systemd/resolved.conf.d/pi-hole.conf\n```\n\n```\n[Resolve]\nDNSStubListener=no\n```\n\nThen restart systemd-resolved.service and pihole-FTL.service.\n\nFor more information, see resolved.conf(5).\n\nAlternatively, tell dnsmasq to bind to each interface explicitly, instead of the wildcard 0.0.0.0:53, by uncommenting the line bind-interfaces in /etc/dnsmasq.conf. This will avoid conflicting with systemd-resolved which listens on 127.0.0.53:53.\n\n"
    },
    {
      "title": "DNSMasq package conflict",
      "level": 3,
      "content": "Since Pi-hole-FTL 4.0, a private fork of dnsmasq is integrated in the FTL sub-project. The original dnsmasq package is now conflicting with pi-hole-ftlAUR and will be uninstalled when upgrading from a previous version. It is still possible to use the previous dnsmasq configuration files, just ensure that conf-dir=/etc/dnsmasq.d/,*.conf in the original /etc/dnsmasq.conf is not commented out.\n\n"
    },
    {
      "title": "Unknown status and changes not being saved",
      "level": 3,
      "content": "The issue, as seen in FS#63704, is with systemd-sysusers created user http, which is created in expired state. To fix it, run:\n\n```\n# chage --expiredate -1 http\n```\n\n"
    },
    {
      "title": "Slow loading times",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nIf browsers report \"Resolving host\" or it just takes longer to load pages than usual, ensure that /etc/resolv.conf looks exactly like this:\n\n```\n/etc/resolv.conf\n```\n\n```\nnameserver 127.0.0.1\n```\n\nIf it takes very long to load pages, it can be a problem with lsof call in pihole script (/usr/bin/pihole) called through php. Verify it while loading page with: ps -ef | grep lsof. Kill it and if the page is displayed, replace lsof call in pihole script (there is only one) with:\n\n```\nss -lnp '( sport = 53 )'\n```\n\n"
    },
    {
      "title": "Prevent DNS resolution issues for other virtual hosts",
      "level": 3,
      "content": "By default, the DNS service (pihole-FTL) will be bind to the 0.0.0.0 IP address :\n\n```\n# netstat -ltnp | grep 53\n```\n\n```\ntcp        0      0 0.0.0.0:53              0.0.0.0:*               LISTEN      2196/pihole-FTL\ntcp6       0      0Â :::53                  Â :::*                    LISTEN      2196/pihole-FTL\n```\n\nThis will prevent any other virtual host onto the same machine hosting the pihole instance (such as docker containers) to get DNS resolution.[1][2]\n\nIn order to solve this, you need to create a config file in /etc/dnsmasq.d/ with the following content (where X.X.X.X is the IP address of your pi-hole) :\n\n```\n/etc/dnsmasq.d/99-dns-bind.conf\n```\n\n```\nlisten-address=X.X.X.X\nbind-interfaces\n```\n\nThen, you need to restart the pihole-FTL.service to apply changes.\n\n"
    },
    {
      "title": "Interface not up when pihole starts",
      "level": 3,
      "content": "If after booting domain name resolution does not work, and the journal shows an error message like:\n\n```\npihole-FTL [...] FATAL ERROR in dnsmasq core: unknown interface wlo1\n```\n\nThen it might be that the interface name is wrong, or the interface is not up when pihole tries to run.\n\n1. Check the interface name with ip a. If it is wrong, set PIHOLE_INTERFACE to the correct value in /etc/pihole/setupVars.conf\n1. If the interface is right, it may not be up when pihole is started (even if the systemd service depends on After=network-online.target). Set DELAY_STARTUP in /etc/pihole/pihole-FTL.conf to a value greater than 0 (expressed in seconds).\n\nReboot to verify the issue is fixed.\n\nReference.\n\n"
    },
    {
      "title": "DNS cache evictions greater than zero",
      "level": 3,
      "content": "The cache size should be increased when this number is larger than zero. You can set the cache limit at /etc/dnsmasq.conf by uncommenting or adding the following setting with your desired number.\n\n```\n/etc/dnsmasq.conf\n```\n\n```\ncache-size=12345\n```\n\nAfter changes have been performed restart pihole-FTL.service\n\nNote: A larger cache will consume more memory on your node, leaving less memory available for other caches of your Pi-hole. If you push this number to the extremes, it may even be that your Pi-hole gets short on memory and does not operate as expected.\n\nA larger cache will consume more memory on your node, leaving less memory available for other caches of your Pi-hole. If you push this number to the extremes, it may even be that your Pi-hole gets short on memory and does not operate as expected.\n\nReference.\n\n"
    },
    {
      "title": "Missing web GUI after upgrade to version 6",
      "level": 3,
      "content": "After upgrading from version 5 to 6 you may encounter error 404 Site not found when calling the web GUI. Anyway, the web GUI is probably still reachable at port 8080.\n\nReason: Pi-hole now comes with an own web server!\n\nMost likely you had the previous pi-hole web server lighttpd up and running on port 80 while you were installing pi-hole 6. In that case pi-hole sets 8080 as default listening port. If you also had yet another web server listening on port 8080 during the installation process pi-hole's web GUI gets unavailable completely. See the pi-hole reference documentation.\n\nAfter resolving the interfering web server, you can reset the web GUI's listening port to 80 either in /etc/pihole/pihole.toml at line port = or within the new web GUI at Settings > System > turn on Expert mode in the upper right corner > All settings > Webserver and API > webserver.port.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Pi-hole homepage\n- Pi-hole GitHub page\n- Pi-hole FTL GitHub page\n- Stopping systemd-resolved stub server opening port 53\n- Unbound performance issue\n\n"
    }
  ]
}