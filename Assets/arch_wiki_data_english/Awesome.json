{
  "title": "Awesome",
  "url": "https://wiki.archlinux.org/title/Awesome",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Window manager\n- Comparison of tiling window managers\n- Desktop environment\n- Display manager\n- File manager functionality\n- Xdg-menu\n\nFrom the awesome website:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the awesome package. The development version is awesome-gitAUR, which is considered unstable and may have a different configuration API.\n\n"
    },
    {
      "title": "Starting",
      "level": 2,
      "content": "Run awesome with xinit. To use the included xsession file, see Display manager.\n\n"
    },
    {
      "title": "With GNOME",
      "level": 3,
      "content": "You can set up GNOME to use awesome as the visual interface, but have GNOME work in the background. See awesome-gnomeAUR.\n\n"
    },
    {
      "title": "XFCE",
      "level": 3,
      "content": "See Xfce#Use a different window manager.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The lua based configuration file is at ~/.config/awesome/rc.lua.\n\n"
    },
    {
      "title": "Creating the configuration file",
      "level": 3,
      "content": "First, run the following to create the directory needed in the next step:\n\n```\n$ mkdir -p ~/.config/awesome/\n```\n\nWhenever compiled, awesome will attempt to use whatever custom settings are contained in ~/.config/awesome/rc.lua. This file is not created by default, so we must copy the template file first:\n\n```\n$ cp /etc/xdg/awesome/rc.lua ~/.config/awesome/\n```\n\nThe API for the configuration often changes when awesome updates. So, remember to repeat the command above when you get something strange with awesome, or you want to modify the configuration.\n\nFor more information about configuring awesome, check out the configuration section at awesome docs\n\n"
    },
    {
      "title": "Examples",
      "level": 4,
      "content": "Some good examples of rc.lua would be as follows:\n\n- Awesome screenshot thread\n- Setkeh's Awesome Configuration\n- User configuration that supports different themes, including a status bar\n- Awesome configuration with two modern themes\n\n"
    },
    {
      "title": "Extensions",
      "level": 3,
      "content": "Several extensions are available for awesome:\n\nTable content:\nExtension | Functionality | Version\nRevelation | Bring up a view of all opened clients | Awesome 3.5+\nShifty | Dynamic tagging | Awesome 3.5\nNaughty | Pop-up notifications | Awesome 3.5+\nVicious Obvious Bashets | Additional widgets | Awesome 3.5\n\n- Revelation\n\n- Shifty\n\n- Naughty\n\n- Vicious\n- Obvious\n- Bashets\n\n"
    },
    {
      "title": "Autostart",
      "level": 3,
      "content": "To implement the XDG Autostart specification, install xorg-xrdb and dex and add the following lines to ~/.config/awesome/rc.lua:\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\nawful.spawn.with_shell(\n    'if (xrdb -query | grep -q \"^awesome\\\\.started:\\\\s*true$\"); then exit; fi;' ..\n    'xrdb -merge <<< \"awesome.started:true\";' ..\n    'dex --environment Awesome --autostart --search-paths \"${XDG_CONFIG_HOME:-$HOME/.config}/autostart:${XDG_CONFIG_DIRS:-/etc/xdg}/autostart\";'\n    )\n```\n\nEspecially for daemons without tray icon, systemd user units using an autostart target are an interesting alternative as they can be configured to be kept running, that is, monitored and restarted after an unexpected halt.\n\nFinally, one can also create autorun.sh and insert the following:\n\n```\n~/.config/awesome/autorun.sh\n```\n\n```\n#!/bin/sh\n\nrun() {\n  if ! pgrep -f \"$1\" ;\n  then\n    \"$@\"&\n  fi\n}\n```\n\nThen, make it executable.\n\nTo add programs to autostart, simply append run \"program [some arguments]\" to autorun.sh. The run function checks whether there already is an instance of program with the same arguments and only runs program if there is none. You can check your autorun.sh by running it:\n\n```\n$ ~/.config/awesome/autorun.sh\n```\n\nIf everything is fine, add the following line to your rc.lua:\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\nawful.spawn.with_shell(\"~/.config/awesome/autorun.sh\")\n```\n\n"
    },
    {
      "title": "Changing keyboard layout",
      "level": 3,
      "content": "There are multiple ways to configure keyboard layers.\n\n"
    },
    {
      "title": "setxkbmap Keyboard Layout Method",
      "level": 4,
      "content": "The default configuration of awesome already has the layout widget activated.\n\nTo set multiple layers temporary, run\n\n```\n$ setxkbmap -layout \"us,de\"\n```\n\nClicking on the widget should toggle the layout. If you want a keycombo to change the layout, you may append -option \"grp:alt_shift_toggle\". This for example will let you change the layout by pressing Shift+Alt. So the complete command would be:\n\n```\n$ setxkbmap -layout \"us,de\" -option \"grp:alt_shift_toggle\"\n```\n\nTo setup EN and RU layouts with phonetic variant:\n\n```\n$ setxkbmap -model pc105 -option \"grp:shifts_toggle,compose:sclk\" \"us,ru(phonetic_YAZHERTY)\"\n```\n\nwhere\n\n- Compose key is set to \"Scroll Lock\" and language toggle is set to Left Shift + Right Shift.\n- keyboard is 105 key\n\nIf using LightDM to start session, then add the command above into .xprofile file.\n\n"
    },
    {
      "title": "rc.lua Keyboard Layout Method (from v.4)",
      "level": 4,
      "content": "You can use awesome itself to switch (from v.4). To change the layout by pressing Shift+Alt, add these two lines to globalkeys:\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\n-- {{{ Key bindings\nglobalkeys = gears.table.join(\n    -- ...\n    awful.key({ \"Shift\" }, \"Alt_L\", function () mykeyboardlayout.next_layout(); end),\n    awful.key({ \"Mod1\" }, \"Shift_L\", function () mykeyboardlayout.next_layout(); end)\n)\n```\n\nThis requires you to set up the keyboard layouts you want to be able to switch between either by the setxkbmap command or in X configuration files.\n\nOnce you have found the appropriate command to setup your layouts, add it to #Autostart.\n\n"
    },
    {
      "title": "Xorg Method",
      "level": 4,
      "content": "Alternatively, see Keyboard configuration in Xorg.\n\n"
    },
    {
      "title": "Theming",
      "level": 3,
      "content": "Beautiful is a Lua library that allows you to theme awesome using an external file, it becomes very easy to dynamically change your whole awesome colours and wallpaper without changing your rc.lua.\n\nThe default theme is at /usr/share/awesome/themes/default. Copy it to ~/.config/awesome/themes/default (optionally copy them all) and change rc.lua:\n\n```\n-- beautiful.init(gears.filesystem.get_configuration_dir() .. \"/themes/default/theme.lua\")\nlocal theme_path = string.format(\"%s/.config/awesome/themes/%s/theme.lua\", os.getenv(\"HOME\"), \"default\")\nbeautiful.init(theme_path)\n```\n\nIf you also copied the other themes you can replace \"default\" with e.g. \"sky\", \"gtk\", \"zenburn\" etc to change themes easily and the local copy of the themes can be studied, modified and used for testing. See also [1] for additional theming options. To add a useless gap for example, add\n\n```\nbeautiful.useless_gap = 5\n```\n\nAt the bottom of the theming section in your rc.lua.\n\n"
    },
    {
      "title": "Wallpaper",
      "level": 4,
      "content": "Beautiful can handle your wallpaper, thus you do not need to set it up in your .xinitrc or .xsession files. This allows you to have a specific wallpaper for each theme.\n\nThere are two ways to specify the wallpaper:\n\n- in your theme.lua: -- absolute path theme.wallpaper = \"/path/to/wallpaper.png\" -- relative to your themes directory theme.wallpaper = theme_path .. \"path/to/wallpaper.png\"\n- or in rc.lua, somewhere between beautiful.init and local function set_wallpaper: -- absolute path beautiful.wallpaper = \"/path/to/wallpaper.png\" -- relative to the configuration directory beautiful.wallpaper = awful.util.get_configuration_dir() .. \"path/to/wallpaper.png\"\n\n```\n-- absolute path\ntheme.wallpaper = \"/path/to/wallpaper.png\"\n\n-- relative to your themes directory\ntheme.wallpaper = theme_path .. \"path/to/wallpaper.png\"\n```\n\n```\n-- absolute path\nbeautiful.wallpaper = \"/path/to/wallpaper.png\"\n\n-- relative to the configuration directory\nbeautiful.wallpaper = awful.util.get_configuration_dir() .. \"path/to/wallpaper.png\"\n```\n\nFor a random background image, add [2] to rc.lua (v3.5+). To automatically fetch images from a given directory, use [3] instead.\n\n"
    },
    {
      "title": "Hide / show wibox",
      "level": 3,
      "content": "For awesome 4.0:\n\n```\nawful.key({ modkey }, \"b\",\n          function ()\n              myscreen = awful.screen.focused()\n              myscreen.mywibox.visible = not myscreen.mywibox.visible\n          end,\n          {description = \"toggle statusbar\"}\n),\n```\n\nTo show the wibox (or perform other actions) only while the ModKey is pressed is not possible from within awesome, but there is a python script that does that: autohidewibox.\n\n"
    },
    {
      "title": "Screenshot",
      "level": 3,
      "content": "See Keyboard input to ensure the PrtSc button is assigned correctly. Then install a screen capturing program such as scrot\n\nAdd to the globalkeys array:\n\n```\nawful.key({ }, \"Print\", function () awful.util.spawn(\"scrot -e 'mv $f ~/screenshots/ 2>/dev/null'\", false) end),\n```\n\nThis function saves screenshots inside ~/screenshots/, edit as needed.\n\n"
    },
    {
      "title": "Removing window gaps",
      "level": 3,
      "content": "As of awesome 3.4, it is possible to remove the small gaps between windows; in the awful.rules.rules table there is a properties section, add to it\n\n```\nsize_hints_honor = false\n```\n\n"
    },
    {
      "title": "Transparency",
      "level": 3,
      "content": "See composite manager.\n\nIn awesome 3.5, window transparency can be set dynamically using signals. For example, rc.lua could contain the following:\n\n```\nclient.connect_signal(\"focus\", function(c)\n                              c.border_color = beautiful.border_focus\n                              c.opacity = 1\n                           end)\nclient.connect_signal(\"unfocus\", function(c)\n                                c.border_color = beautiful.border_normal\n                                c.opacity = 0.7\n                             end)\n```\n\n"
    },
    {
      "title": "Conky",
      "level": 4,
      "content": "Note: **This article or section is a candidate for merging with Conky.** This article or section is a candidate for merging with Conky.\n\nThis article or section is a candidate for merging with Conky.\n\nIf using conky, you must set it to create its own window instead of using the desktop. To do so, edit ~/.conkyrc to contain\n\n```\nown_window yes\nown_window_transparent yes\nown_window_type desktop\n```\n\nOtherwise strange behavior may be observed, such as all windows becoming fully transparent. Note also that since conky will be creating a transparent window on your desktop, any actions defined in awesome's rc.lua for the desktop will not work where conky is.\n\n"
    },
    {
      "title": "wiboxes",
      "level": 4,
      "content": "There is built-in pseudo-transparency for wiboxes. To enable it, append 2 hexadecimal digits to the colors in your theme file (e.g. ~/.config/awesome/themes/default/theme.lua, which is usually a copy of /usr/share/awesome/themes/default/theme.lua), like shown here:\n\n```\ntheme.bg_normal = \"#000000AA\"\n```\n\nwhere \"AA\" is the transparency value.\n\nTo change transparency for the actual selected window by pressing Modkey + PgUp/PgDown you can also use transset-dfAUR and the following modification to your rc.lua:\n\n```\nglobalkeys = gears.table.join(\n    -- your keybindings\n    [...]\n    awful.key({ modkey }, \"Next\", function (c)\n        awful.util.spawn(\"transset-df --actual --inc 0.1\")\n    end),\n    awful.key({ modkey }, \"Prior\", function (c)\n        awful.util.spawn(\"transset-df --actual --dec 0.1\")\n    end),\n    -- Your other key bindings\n    [...]\n)\n```\n\n"
    },
    {
      "title": "Widget spacing",
      "level": 3,
      "content": "The default rc.lua places widgets including keyboard layout and clock in a wibox with little spacing. It is possible to add extra spacing between widgets using the spacing property:\n\n```\n{ -- Right widgets\n       layout = wibox.layout.fixed.horizontal,\n       spacing = 10,\n       mykeyboardlayout,\n       ...\n```\n\n"
    },
    {
      "title": "ImageMagick",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with Composite manager.** This article or section is a candidate for merging with Composite manager.\n\nThis article or section is a candidate for merging with Composite manager.\n\nYou may have problems if you set your wallpaper with imagemagick's display command. It does not work well with xcompmgr. Please note that awsetbg may be using display if it does not have any other options. Installing habak, feh, hsetroot or whatever should fix the problem (grep -A 1 wpsetters /usr/bin/awsetbg to see your options).\n\n"
    },
    {
      "title": "Passing content to widgets with awesome-client",
      "level": 3,
      "content": "You can easily send text to an awesome widget. Just create a new widget:\n\n```\nmywidget = widget({ type = \"textbox\", name = \"mywidget\" })\nmywidget.text = \"initial text\"\n```\n\nTo update the text from an external source, use awesome-client:\n\n```\necho -e 'mywidget.text = \"new text\"' | awesome-client\n```\n\nDo not forget to add the widget to your wibox.\n\n"
    },
    {
      "title": "Using a different panel with awesome",
      "level": 3,
      "content": "If you like awesome's lightweightness and functionality but do not like the way its default panel looks, you can install a different panel, for example xfce4-panel.\n\nThen add it to the autorun section of your rc.lua. You may also comment out the section which creates wiboxes for each screen (starting from mywibox[s] = awful.wibox({ position = \"top\", screen = s })) but it is not necessary. Do not forget to check your rc.lua for errors by typing:\n\n```\n$ awesome -k rc.lua\n```\n\nYou should also change your modkey+R keybinding, in order to start some other application launcher instead of built in awesome. See List of applications/Other#Application launchers for examples. Do not forget to add:\n\n```\nproperties = { floating = true } },\n    { rule = { instance = \"$yourapplicationlauncher\" },\n```\n\nto your rc.lua.\n\n"
    },
    {
      "title": "Application directories in menubar",
      "level": 3,
      "content": "awesome includes menubar. By default, pressing Mod+p will open a dmenu-like applications menu at the top of the screen. This menu searches for .desktop files in $XDG_DATA_DIRS/applications/ and $XDG_DATA_HOME/applications/.\n\nYou can extend or replace these directories by modifying menubar.menu_gen.all_menu_dirs:\n\n```\n~/.config/awesome/rc.lua\n```\n\n```\ntable.insert(menubar.menu_gen.all_menu_dirs, \"/path/to/custom/applications/\")\n```\n\nNote that the .desktop files are re-read each time awesome starts, thereby slowing down the startup. If you prefer other means of launching programs, the menubar can be disabled in rc.lua by removing local menubar = require(\"menubar\") and other references to the menubar variable.\n\n"
    },
    {
      "title": "Pop-up menus",
      "level": 3,
      "content": "There is a simple menu by default since awesome 3, simplifying custom menus. [4] If you want a freedesktop.org menu, you could take a look at awesome-freedesktop.\n\nIf you prefer to use an external applications menu when you click on the Awesome icon, or right-click on an empty area of the desktop, you can follow the instructions in Xdg-menu#Awesome. However this menu is not updated when you add or remove programs. So, be sure to run the command to update your menu. It may look something like:\n\n```\n$ xdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu >~/.config/awesome/archmenu.lua\n```\n\n"
    },
    {
      "title": "Titlebars",
      "level": 3,
      "content": "It is easy to enable titlebars in awesome by simply setting the variable titlebars_enabled to true in the configuration file. （in rules area）\n\n```\n{ rule_any = {type = { \"normal\", \"dialog\" }\n     }, properties = { titlebars_enabled = true }\n   },\n```\n\nHowever, you may want to be able to toggle the titlebar on or off. You can do this by simply adding something like this to your key bindings: (in clientkeys of Key bindings. And do not put the code to the end of the clientkeys area)\n\n```\n-- working toggle titlebar\n   awful.key({ modkey, \"Control\" }, \"t\", function (c) awful.titlebar.toggle(c)         end,\n             {description = \"Show/Hide Titlebars\", group=\"client\"}),\n```\n\nThen you may want to initially hide the titlebars. To do that just add this immediately after the title bar is created (inside the \"manage\" signal handler):\n\n```\nawful.titlebar.hide(c)\n```\n\n"
    },
    {
      "title": "Battery notification",
      "level": 3,
      "content": "See this blog post for a simple battery notification to add to rc.lua. Note that it needs naughty for the notifications (installed by default in version 3.5). Other examples are available at awesome wiki.\n\n"
    },
    {
      "title": "Media Controls",
      "level": 3,
      "content": "It is possible to control both volume and media playback via a combination of amixer(1) (available via the alsa-utils package) and playerctl. The following can be added to the relevant key binding section of your rc.lua configuration file:\n\n```\n-- Volume Keys\n   awful.key({}, \"XF86AudioLowerVolume\", function ()\n     awful.util.spawn(\"amixer -q -D pulse sset Master 5%-\", false) end),\n   awful.key({}, \"XF86AudioRaiseVolume\", function ()\n     awful.util.spawn(\"amixer -q -D pulse sset Master 5%+\", false) end),\n   awful.key({}, \"XF86AudioMute\", function ()\n     awful.util.spawn(\"amixer -D pulse set Master 1+ toggle\", false) end),\n   -- Media Keys\n   awful.key({}, \"XF86AudioPlay\", function()\n     awful.util.spawn(\"playerctl play-pause\", false) end),\n   awful.key({}, \"XF86AudioNext\", function()\n     awful.util.spawn(\"playerctl next\", false) end),\n   awful.key({}, \"XF86AudioPrev\", function()\n     awful.util.spawn(\"playerctl previous\", false) end),\n```\n\n"
    },
    {
      "title": "Steam Keyboard",
      "level": 3,
      "content": "The on screen Steam Keyboard that can be activated by the Steam Controller appears to freeze after trying to type one character. This is because the client that is supposed to receive the input has to be focused to receive it and the keyboard will wait until this input is successfully send. Manually focusing another client will send the input to this client and unfreeze the keyboard again until the next character is entered.\n\nThe trick to getting the keyboard to work correctly is to prevent it ever receiving focus. Add the following signal to your configuration (or merge with an existing client focus signal):\n\n```\nclient.connect_signal(\"focus\", function(c)\n    if awful.rules.match(c, { name = \"^Steam Keyboard$\" }) then\n        awful.client.focus.history.previous()\n    end\nend)\n```\n\nThis will return the focus to the last client whenever the keyboard receives focus. As the input to the keyboard is handled by the Steam client and as such does not need focus, inputting text will now work correctly.\n\n"
    },
    {
      "title": "Debugging rc.lua",
      "level": 3,
      "content": "Xephyr allows you to run X nested in another X's client window. This allows you to debug rc.lua without breaking your current desktop. Start by copying rc.lua into a new file (e.g. rc.lua.new), and modify it as needed. Then run new instance of awesome in Xephyr, supplying rc.lua.new as a configuration file like this:\n\n```\n$ Xephyr :1 -ac -br -noreset -screen 1152x720 &\n$ DISPLAY=:1.0 awesome -c ~/.config/awesome/rc.lua.new\n```\n\nThe advantage of this approach is that if you introduce bugs you do not break your current awesome desktop, potentially crashing X applications and losing work. Once you are happy with the new configuration, copy rc.lua.new to rc.lua and restart awesome.\n\n"
    },
    {
      "title": "Automatic reload",
      "level": 4,
      "content": "In addition to the method above, you can use inotify-tools in order to automatically reload the Awesome instance inside Xephyr when updating any configuration file inside the ~/.config/awesome directory:\n\n```\n#!/usr/bin/env bash\n\nXephyr :1 -ac -br -noreset -screen 1920x1080 -dpi 96 &\nsleep 1\nDISPLAY=:1.0 awesome -c ~/.config/awesome/rc.lua.new &\ninstance=$!\n\nwhile inotifywait -r -e close_write ~/.config/awesome; do\n\tkill -s SIGHUP $instance\ndone\n```\n\n"
    },
    {
      "title": "awmtt",
      "level": 4,
      "content": "awmttAUR (Awesome WM Testing Tool) is an easy to use wrapper script around Xephyr. By default, it will use ~/.config/awesome/rc.lua.test. If it cannot find that test file, it will use your actual rc.lua. You can also specify the location of the configuration file you want to test:\n\n```\n$ awmtt start -C ~/.config/awesome/rc.lua.new\n```\n\nWhen you are done testing, close the window with:\n\n```\n$ awmtt stop\n```\n\nOr immediately see the changes you are doing to the configuration file by issuing:\n\n```\n$ awmtt restart\n```\n\n"
    },
    {
      "title": "aawmtt",
      "level": 4,
      "content": "aawmttAUR (Another Awesome WM Testing Tool) is an alternative implementation of awmttAUR, which includes Live-Reload by default. It is similar to awmtt-ng, but includes some fixes for the XOrg Display detection which does not work on some machines with awmtt-ng. It differs from awmtt in that it does not try to run a test file first, but just runs the default config.\n\nTo simply open a Xephyr window with awesome loaded, run:\n\n```\n$ aawmtt\n```\n\nThe output of awesome will now be printed to your terminal and upon changing any files in your configuration folder, awesomewm will be reloaded.\n\nIn case you want to modify the directory that is watched for file changes, or the location of your configuration file, simply run:\n\n```\n$ aawmtt --config \"location_of_config_file\" --watch \"directory_to_watch_for_changes\"\n```\n\nThe directory that is watched for changes defaults to the parent directory of your config file, so by default it would be \"~/.config/awesome\".\n\n"
    },
    {
      "title": "Log Files",
      "level": 3,
      "content": "If you are using LightDM, awesome will log errors to `$HOME/.xsession-errors`. If you use .xinitrc to start awesome, the entry \"Where are logs, error messages or something?\" in the FAQ may be a helpful resource.\n\n"
    },
    {
      "title": "Mod4 key",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with Configuring_keyboard_layouts_in_X.** This article or section is a candidate for merging with Configuring_keyboard_layouts_in_X.\n\nThis article or section is a candidate for merging with Configuring_keyboard_layouts_in_X.\n\nAwesome recommends to remap mod4, which by default should be the Super or \"Windows\" key. If for some reason it is not mapped to mod4, use xmodmap to find out what is. To change the mapping, use xev to find the keycode and name of the key to be mapped. Then add something like the following to ~/.xinitrc\n\n```\nxmodmap -e \"keycode 115 = Super_L\" -e \"add mod4 = Super_L\"\nexec awesome\n```\n\nThe problem in this case is that some xorg installations recognize keycode 115, but incorrectly as the 'Select' key. The above command explictly remaps keycode 115 to the correct 'Super_L' key.\n\nTo remap mod4 with setxkbmap (conflict with xmodmap) see:\n\n```\ntail -50 /usr/share/X11/xkb/rules/evdev\n```\n\nTo set the caps lock key as mod4 add the following to ~/.xinitrc:\n\n```\nsetxkbmap -option caps:hyper\n```\n\n"
    },
    {
      "title": "Fix Java (GUI appears gray only)",
      "level": 3,
      "content": "See Java#Gray window, applications not resizing with WM, menus immediately closing and [5].\n\n"
    },
    {
      "title": "Eclipse: cannot resize/move main window",
      "level": 3,
      "content": "If you get stuck and cannot move or resize the main window (using mod4 + left/right mouse button) edit the workbench.xml and set fullscreen/maximized to false (if set) and reduce the width and height to numbers smaller than your single screen desktop area.\n\nworkbench.xml can be found in eclipse_workspace/.metadata/.plugins/org.eclipse.ui.workbench/. Edit the line:\n\n```\n<window height=\"xx\" maximized=\"true\" width=\"xx\" x=\"xx\" y=\"xx\"\n```\n\n"
    },
    {
      "title": "Netbeans: code-prediction appears on wrong screen",
      "level": 3,
      "content": "If you have two displays and use code-prediction (Ctrl + Space) in Netbeans, the code-predictions might appear on the wrong screen. This fixed it for me:\n\n```\n.config/awesome/rc.lua\n```\n\n```\nawful.rules.rules = {\n        ...\n\t{\n\t\trule_matches = { -- Fix Netbeans\n\t\t\tclass = {\n\t\t\t\t\"sun-awt-X11-XWindowPeer\", \"NetBeans IDE 8.2\"\n\t\t\t},\n\t\t\tname = {\n\t\t\t\t\"win1\"\n\t\t\t}\n\t\t}, properties = { screen = 1 } -- even with screen 1 here, this still works on the seccond screen, too (do not know why).\n\t},\n        ...\n\n}\n```\n\n"
    },
    {
      "title": "IntelliJ: menus appear on incorrect position, some windows do not open",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nSee GitHub issue #2204.\n\nThis fixed it for me:\n\n```\n.config/awesome/rc.lua\n```\n\n```\nclientbuttons_jetbrains = gears.table.join(\n    awful.button({ modkey }, 1, awful.mouse.client.move),\n    awful.button({ modkey }, 3, awful.mouse.client.resize)\n)\n\n...\n\nawful.rules.rules = {\n        ...\n\t{\n            rule = {\n                class = \"jetbrains-.*\",\n            }, properties = { focus = true, buttons = clientbuttons_jetbrains }\n        },\n        {\n            rule = {\n                class = \"jetbrains-.*\",\n                name = \"win.*\"\n            }, properties = { titlebars_enabled = false, focusable = false, focus = true, floating = true, placement = awful.placement.restore }\n        },\n        ...\n}\n```\n\n"
    },
    {
      "title": "scrot: Cannot take a mouse selected screenshot with keyboard shortcuts",
      "level": 3,
      "content": "When using scrot, you may have problems at assigning a keyboard shortcut to the mouse selection option (formally scrot -s). To fix it, add the following line to your rc.lua:\n\n```\nawful.key( { modkey,\t }, <shortcut>, nil, function () awful.spawn(\"scrot -s\") end)\n```\n\nNote that nil is passed to the press argument of awful.key. Instead, the callback function is passed as fourth argument, which is the argument named release.\n\n"
    },
    {
      "title": "YouTube: fullscreen appears in background",
      "level": 3,
      "content": "If YouTube videos appear underneath your web browser when in fullscreen mode, or underneath the panel with controls hidden, add this to rc.lua\n\n```\n{ rule = { instance = \"plugin-container\" },\n  properties = { floating = true } },\n```\n\nWith Chromium add\n\n```\n{ rule = { instance = \"exe\" },\n  properties = { floating = true } },\n```\n\nor:\n\n```\n{ rule = { role = \"_NET_WM_STATE_FULLSCREEN\" },\n  properties = { floating = true } },\n```\n\nSee [6].\n\n"
    },
    {
      "title": "Prevent the mouse scroll wheel from changing tags",
      "level": 3,
      "content": "In your rc.lua, change the Mouse Bindings section to the following:\n\n```\n-- {{{ Mouse bindings\nroot.buttons(gears.table.join(\n    awful.button({ }, 3, function () mymainmenu:toggle() end)\n))\n-- }}}\n```\n\n"
    },
    {
      "title": "Duplicate menu-entries generated by Xdg-menu",
      "level": 3,
      "content": "Xdg-menu will generate duplicate entries if you copy desktop-files from /usr/share/applications to ~/.local/share/applications even though it might be preferable to simply override the originals, for example using a different theme for a specific application. One solution to the problem is to filter the generated output trough awk to remove entries with a name identical to the previous entry.\n\n```\nxdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu | awk -F, '{if (a!=$1) print $a; a=$1}' >~/.config/awesome/archmenu.lua\n```\n\n"
    },
    {
      "title": "Some Shortcuts not Working in Xfce4 overlapping Keys",
      "level": 3,
      "content": "Check your\n\n```\n$ xfce4-keyboard-settings\n```\n\nfor Overlapping keys like \"Super L\" or Key Combinations which should be run by Awesome\n\n"
    },
    {
      "title": "Memory leaks",
      "level": 3,
      "content": "Some users experience memory leaks even without activity. When using a lot of widgets leaks can occur at a rate up to 5 MB/min. To mitigate this you can enforce more frequent garbage collection by adding this to your ~/.config/awesome/rc.lua:\n\n```\n-- Run garbage collector regularly to prevent memory leaks\ngears.timer {\n       timeout = 30,\n       autostart = true,\n       callback = function() collectgarbage() end\n}\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- https://awesomewm.org/apidoc/documentation/90-FAQ.md.html - FAQ\n- https://www.lua.org/pil/ - Programming in Lua (first edition)\n- https://awesomewm.org/ - The official awesome website\n- https://bbs.archlinux.org/viewtopic.php?id=88926 - share your awesome!\n\n"
    }
  ]
}