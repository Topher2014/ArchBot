{
  "title": "PolicyKit",
  "url": "https://wiki.archlinux.org/title/PolicyKit",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Session\n- Sudo\n- Users and groups\n\nFrom polkit homepage:\n\nPolkit is used for controlling system-wide privileges. It provides an organized way for non-privileged processes to communicate with privileged ones. In contrast to systems such as sudo, it does not grant root permission to an entire process, but rather allows a finer level of control of centralized system policy.\n\nPolkit works by delimiting distinct actions, e.g. running GParted, and delimiting users by group or by name, e.g. members of the wheel group. It then defines how – if at all – those users are allowed those actions, e.g. by identifying as members of the group by typing in their passwords.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the polkit package.\n\n"
    },
    {
      "title": "Authentication agents",
      "level": 3,
      "content": "An authentication agent is used to make the user of a session prove that they really are the user (by authenticating as the user) or an administrative user (by authenticating as an administrator). The polkit package contains pkttyagent, a textual authentication agent which is used as a general fallback.\n\nIf you are using a graphical environment, make sure that a graphical authentication agent is installed and autostarted on login (e.g. via xinitrc).\n\nCinnamon, Deepin, Hyprland, GNOME, GNOME Flashback, KDE, LXDE, LXQt, MATE, and Xfce have an authentication agent already. In other desktop environments, you have to choose one of the following implementations:\n\n- hyprpolkitagent, which provides /usr/lib/hyprpolkitagent\n- lxqt-policykit, which provides /usr/bin/lxqt-policykit-agent\n- lxsession or lxsession-gtk3, which provides /usr/bin/lxpolkit\n- mate-polkit, which provides /usr/lib/mate-polkit/polkit-mate-authentication-agent-1\n- polkit-gnome, which provides /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1\n- polkit-kde-agent, which provides /usr/lib/polkit-kde-authentication-agent-1\n- ts-polkitagentAUR, which provides /usr/lib/ts-polkitagent\n- xfce-polkitAUR or xfce-polkit-gitAUR, which provides /usr/lib/xfce-polkit/xfce-polkit\n- pantheon-polkit-agent, which provides /usr/lib/policykit-1-pantheon/io.elementary.desktop.agent-polkit\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Polkit definitions can be divided into two kinds:\n\n- Actions are defined in XML .policy files located in /usr/share/polkit-1/actions. Each action has a set of default permissions attached to it (e.g. you need to identify as an administrator to use the GParted action). The defaults can be overruled but editing the actions files is NOT the correct way.\n- Authorization rules are defined in JavaScript .rules files. They are found in two places: 3rd party packages can use /usr/share/polkit-1/rules.d. /etc/polkit-1/rules.d is for local configuration.\n\n- 3rd party packages can use /usr/share/polkit-1/rules.d.\n- /etc/polkit-1/rules.d is for local configuration.\n\nPolkit operates on top of the existing permissions systems in Linux – group membership, administrator status – it does not replace them. The .rules files designate a subset of users, refer to one (or more) of the actions specified in the actions files, and determine with what restrictions these actions can be taken by those users. As an example, a rules file could overrule the default requirement for all users to authenticate as an admin when using GParted, determining that some specific user does not need to. A different example: A certain user is not allowed to use GParted at all.\n\n"
    },
    {
      "title": "Actions",
      "level": 3,
      "content": "The actions available to you via polkit will depend on the packages you have installed. Some are used in multiple desktop environments (org.freedesktop.*), some are DE-specific (org.gnome.*) and some are specific to a single program (org.gnome.gparted.policy). The command pkaction lists all the actions defined in /usr/share/polkit-1/actions for quick reference.\n\nTo get an idea of what polkit can do, here are a few commonly used groups of actions:\n\n- systemd-logind (org.freedesktop.login1.policy) actions regulated by polkit include powering off, rebooting, suspending and hibernating the system, including when other users may still be logged in.\n- udisks (org.freedesktop.udisks2.policy) actions regulated by polkit include mounting file systems and unlocking encrypted devices.\n- NetworkManager (org.freedesktop.NetworkManager.policy) actions regulated by polkit include turning on and off the network, Wi-Fi or mobile broadband.\n\nEach action is defined in an <action> tag in a .policy file. The org.gnome.gparted.policy contains a single action and looks like this:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE policyconfig PUBLIC\n \"-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN\"\n \"http://www.freedesktop.org/software/polkit/policyconfig-1.dtd\">\n<policyconfig>\n\n  <action id=\"org.gnome.gparted\">\n    <message>Authentication is required to run the GParted Partition Editor</message>\n    <icon_name>gparted</icon_name>\n    <defaults>\n      <allow_any>auth_admin</allow_any>\n      <allow_inactive>auth_admin</allow_inactive>\n      <allow_active>auth_admin</allow_active>\n    </defaults>\n    <annotate key=\"org.freedesktop.policykit.exec.path\">/usr/bin/gparted</annotate>\n    <annotate key=\"org.freedesktop.policykit.exec.allow_gui\">true</annotate>\n  </action>\n\n</policyconfig>\n```\n\nThe attribute id is the actual command sent to D-Bus, the message tag is the explanation to the user when authentication is required and the icon_name is sort of obvious.\n\nThe defaults tag is where the permissions or lack thereof are located. It contains three settings: allow_any, allow_inactive, and allow_active. Both inactive and active here refer to local sessions on local consoles or displays, whereas the allow_any setting is used for all others, including remote sessions (SSH, VNC, etc.).\n\nFor each of these settings the following options are available:\n\n- no: The user is not authorized to carry out the action. There is therefore no need for authentication.\n- yes: The user is authorized to carry out the action without any authentication.\n- auth_self: Authentication is required but the user need not be an administrative user.\n- auth_admin: Authentication as an administrative user is required.\n- auth_self_keep: The same as auth_self but, like sudo, the authorization lasts a few minutes.\n- auth_admin_keep: The same as auth_admin but, like sudo, the authorization lasts a few minutes.\n\nThese are default setting and unless overruled in later configuration will be valid for all users.\n\nSee the polkit(8) man page for a detailed explanation.\n\nAs can be seen from the GParted action, users are required to authenticate as administrators in order to use GParted, regardless of whether the session is active or inactive.\n\n"
    },
    {
      "title": "Authorization rules",
      "level": 3,
      "content": "Authorization rules that overrule the default settings are laid out in a set of directories as described above. For all purposes relating to personal configuration of a single system, only /etc/polkit-1/rules.d should be used.\n\nThe addRule() method is used for adding a function that may be called whenever an authorization check for action and subject is performed. Functions are called in the order they have been added until one of the functions returns a value. Hence, to add an authorization rule that is processed before other rules, put it in a file in /etc/polkit-1/rules.d with a name that sorts before other rules files, for example 00-early-checks.rules.\n\nThe layout of the .rules files is fairly self-explanatory:\n\n```\n/* Allow users in admin group to run GParted without authentication */\npolkit.addRule(function(action, subject) {\n    if (action.id == \"org.gnome.gparted\" &&\n        subject.isInGroup(\"admin\")) {\n        return polkit.Result.YES;\n    }\n});\n```\n\nInside the function, we check for the specified action ID (org.gnome.gparted) and for the user's group (admin), then return a value \"yes\".\n\n"
    },
    {
      "title": "Administrator identities",
      "level": 3,
      "content": "The addAdminRule() method is used for adding a function that may be called whenever administrator authentication is required. The function is used to specify what identities may be used for administrator authentication for the authorization check identified by action and subject. Functions added are called in the order they have been added until one of the functions returns a value.\n\nThe default configuration for administrator identities is contained in the file /usr/share/polkit-1/rules.d/50-default.rules so any changes to that configuration should be made by copying the file to the /etc/polkit-1/rules.d directory and editing that file:\n\n```\n/etc/polkit-1/rules.d/50-default.rules\n```\n\n```\npolkit.addAdminRule(function(action, subject) {\n    return [\"unix-group:wheel\"];\n});\n```\n\nThe only part to edit (once copied) is the return array of the function: as whom should a user authenticate when asked to authenticate as an administrative user? If they are a member of the group designated as admins, they only need enter their own password. If some other user, e.g. root, is the only admin identity, they would need to enter the root password. The format of the user identification is the same as the one used in designating authorities.\n\nThe Arch default is to make all members of the group wheel administrators. A rule like below will have polkit ask for the root password instead of the users password for Admin authentication.\n\n```\n/etc/polkit-1/rules.d/49-rootpw_global.rules\n```\n\n```\n/* Always authenticate Admins by prompting for the root\n * password, similar to the rootpw option in sudo\n */\npolkit.addAdminRule(function(action, subject) {\n    return [\"unix-user:root\"];\n});\n```\n\n"
    },
    {
      "title": "Allow a user to use the org.freedesktop.timedate1.set-timezone action",
      "level": 3,
      "content": "To allow a user named archie to use the org.freedesktop.timedate1.set-timezone action without authentication, create the following polkit rule file as root:\n\n```\n/etc/polkit-1/rules.d/49-allow-archie-set-timezone.rules\n```\n\n```\npolkit.addRule(function(action, subject) {\n    if (action.id == \"org.freedesktop.timedate1.set-timezone\" &&\n        subject.user == \"archie\") {\n        return polkit.Result.YES;\n    }\n});\n```\n\nAfter saving the rule file, the policy should take effect immediately. You can test it by setting the timezone using the timedatectl:\n\n```\n[archie]$ timedatectl set-timezone America/New_York\n```\n\nIf the operation completes without asking for authentication, then the rule works as intended. If the action does not seem to be allowed, ensure there are no conflicting rules with higher precedence (lower number prefixes) in /etc/polkit-1/rules.d/.\n\n"
    },
    {
      "title": "Debugging/logging",
      "level": 3,
      "content": "To enable logging with polkit.log() function, remove --no-debug flag from ExecStart command in /usr/lib/systemd/system/polkit.service file.\n\nThe following rule logs detailed information about any requested access:\n\n```\n/etc/polkit-1/rules.d/00-log-access.rules\n```\n\n```\npolkit.addRule(function(action, subject) {\n    polkit.log(\"action=\" + action);\n    polkit.log(\"subject=\" + subject);\n});\n```\n\nTo manually test rules, use pkcheck:[1]\n\n```\n$ pkcheck -u -p $$ --enable-internal-agent -a action\n```\n\n"
    },
    {
      "title": "Disable suspend and hibernate",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nThe following rule disables suspend and hibernate for all users.\n\n```\n/etc/polkit-1/rules.d/10-disable-suspend.rules\n```\n\n```\npolkit.addRule(function(action, subject) {\n    if (action.id == \"org.freedesktop.login1.suspend\" ||\n        action.id == \"org.freedesktop.login1.suspend-multiple-sessions\" ||\n        action.id == \"org.freedesktop.login1.hibernate\" ||\n        action.id == \"org.freedesktop.login1.hibernate-multiple-sessions\")\n    {\n        return polkit.Result.NO;\n    }\n});\n```\n\n"
    },
    {
      "title": "Bypass password prompt",
      "level": 3,
      "content": "To achieve something similar to the sudo NOPASSWD option and get authorized solely based on user/group identity, you can create custom rules in /etc/polkit-1/rules.d/. This allows you to override password authentication either only for specific actions or globally. See [2] for an example rule set.\n\n"
    },
    {
      "title": "Globally",
      "level": 4,
      "content": "Create the following file as root:\n\n```\n/etc/polkit-1/rules.d/49-nopasswd_global.rules\n```\n\n```\n/* Allow members of the wheel group to execute any actions\n * without password authentication, similar to \"sudo NOPASSWD:\"\n */\npolkit.addRule(function(action, subject) {\n    if (subject.isInGroup(\"wheel\")) {\n        return polkit.Result.YES;\n    }\n});\n```\n\nReplace wheel by any group of your preference.\n\nThis will result in automatic authentication for any action requiring admin rights via Polkit. As such, be careful with the group you choose to give such rights to.\n\nThere is also AUTH_ADMIN_KEEP which allows to keep the authorization for 5 minutes. However, the authorization is per process, hence if a new process asks for an authorization within 5 minutes the new process will ask for the password again anyway. In particular, run0 and pkexec do not keep authorization such as sudo. However, it may be improved (see [3]).\n\n"
    },
    {
      "title": "For specific actions",
      "level": 4,
      "content": "Create the following file as root:\n\n```\n/etc/polkit-1/rules.d/49-nopasswd_limited.rules\n```\n\n```\n/* Allow members of the wheel group to execute the defined actions \n * without password authentication, similar to \"sudo NOPASSWD:\"\n */\npolkit.addRule(function(action, subject) {\n    if ((action.id == \"org.gnome.gparted\" ||\n\t action.id == \"org.libvirt.unix.manage\") &&\n        subject.isInGroup(\"wheel\"))\n    {\n        return polkit.Result.YES;\n    }\n});\n```\n\nThe action.ids selected here are just (working) examples for GParted and Libvirt, but you can replace them by any other of your liking as long as they exist (custom made or supplied by a package), and so can you define any group instead of wheel.\n\nThe || operator is used to delimit actions (logical OR), and && means logical AND and must be kept as the last operator.\n\n"
    },
    {
      "title": "Udisks",
      "level": 4,
      "content": "File managers may ask for a password when trying to mount a storage device, or yield a Not authorized or similar error. See Udisks#Configuration for details.\n\n"
    },
    {
      "title": "Allow management of individual systemd units by regular users",
      "level": 3,
      "content": "By checking for certain values passed to the polkit policy check, you can give specific users or groups the ability to manage specific units. As an example, you might want regular users to start and stop wpa_supplicant:\n\n```\n/etc/polkit-1/rules.d/10-wifimanagement.rules\n```\n\n```\npolkit.addRule(function(action, subject) {\n    if (action.id == \"org.freedesktop.systemd1.manage-units\") {\n        if (action.lookup(\"unit\") == \"wpa_supplicant.service\") {\n            var verb = action.lookup(\"verb\");\n            if (verb == \"start\" || verb == \"stop\" || verb == \"restart\") {\n                return polkit.Result.YES;\n            }\n        }\n    }\n});\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Polkit manual page\n- The Polkit authentication framework (openSUSE Leap Security guide)\n\n"
    }
  ]
}