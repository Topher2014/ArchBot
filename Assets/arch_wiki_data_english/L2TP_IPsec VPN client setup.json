{
  "title": "L2TP/IPsec VPN client setup",
  "url": "https://wiki.archlinux.org/title/L2TP/IPsec_VPN_client_setup",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- strongSwan\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article describes how to configure and use a L2TP/IPsec Virtual Private Network client on Arch Linux. It covers the installation and setup of several needed software packages. L2TP refers to the w:Layer 2 Tunneling Protocol and for w:IPsec, the Openswan implementation is employed.\n\nThis guide is primarily targeted for clients connecting to a Windows Server machine, as it uses some settings that are specific to the Microsoft implementation of L2TP/IPsec. However, it is adaptable with any other common L2TP/IPsec setup. The Openswan wiki features instructions to set up a corresponding L2TP/IPSec Linux server.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "To use with NetworkManager, install the networkmanager-l2tp and strongswan packages.\n\nOtherwise install the xl2tpd and openswanAUR packages.\n\n"
    },
    {
      "title": "NetworkManager",
      "level": 3,
      "content": "Open the NetworkManager UI, then:\n\n1. Go to Network > VPN. Click \"+\"\n1. Select \"Layer 2 Tunneling Protocol (L2TP).\"\n1. You can choose a name for the VPN.\n1. Enter Your VPN Server IP for the Gateway.\n1. Enter Your VPN Username for the User name.\n1. Right-click the ? in the Password field, select Store the password only for this user. (If this option gives you trouble, you might want to use \"Store password for all users\")\n1. Enter Your VPN Password for the Password.\n1. Leave the NT Domain field blank.\n1. Click the IPsec Settings... button.\n1. Check the Enable IPsec tunnel to L2TP host checkbox.\n1. Leave the Gateway ID field blank.\n1. Enter Your VPN IPsec PSK for the Pre-shared key.\n1. OK, then click Add to save the VPN connection information.\n\nNow you should be able to start the VPN, by switching the Toggle-Button on.\n\n"
    },
    {
      "title": "OpenSwan",
      "level": 3,
      "content": "Edit /etc/ipsec.conf to contain the following lines:\n\n```\nconfig setup\n     virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12\n     nat_traversal=yes\n     protostack=netkey            # default is auto, which will try netkey first\n     plutoopts=\"--interface=eth0\" # Replace eth0 with your network interface or use %defaultroute to use default route\n\nconn L2TP-PSK\n     authby=secret\n     pfs=no\n     auto=add\n     keyingtries=3\n     dpddelay=30\n     dpdtimeout=120\n     dpdaction=clear\n     rekey=yes\n     ikelifetime=8h\n     keylife=1h\n     type=transport\n     left=192.168.0.123           # Replace with your local IP address (private, behind NAT IP is okay as well)\n     leftprotoport=17/1701\n     right=68.68.32.79            # Replace with your VPN server's IP\n     rightprotoport=17/1701\n```\n\nThis file contains the basic information to establish a secure IPsec tunnel to the VPN server. It enables NAT Traversal for if your machine is behind a NAT'ing router (most people are), and various other options that are necessary to connect correctly to the remote IPsec server. The next file contains your pre-shared key (PSK) for the server.\n\nCreate the file /etc/ipsec.secrets: It should contain the following line:\n\n```\n192.168.0.123 68.68.32.79Â : PSK \"your_pre_shared_key\"\n```\n\nRemember to replace the local (192.168.0.123) and remote (68.68.32.79) IP addresses with the correct numbers for your location. The pre-shared key will be supplied by the VPN provider and will need to be placed in this file in cleartext form. You may find this file already exists and already have some data, try to back it up and create a new file only with your PSK if you will see Can't authenticate: no preshared key found for ... when enabling connection in next section. Do not forget to set proper permissions (600) for this file or you will get error message We cannot identify ourselves with either end of this connection..\n\nAdd the connection, so it is available to use:\n\n```\n# ipsec auto --add L2TP-PSK\n```\n\nAt this point the IPsec configuration is complete and we can move on to the L2TP configuration.\n\n"
    },
    {
      "title": "Running Openswan in a container",
      "level": 4,
      "content": "Do not forget to add CAP_SYS_MODULE capability and access to host module tree. Example for nspawn:\n\n```\n--bind=/lib/modules --capability=CAP_SYS_MODULE\n```\n\n"
    },
    {
      "title": "xl2tpd",
      "level": 3,
      "content": "Edit /etc/xl2tpd/xl2tpd.conf so it has the following contents:\n\n```\n[lac vpn-connection]\nlns = 68.68.32.79\nppp debug = yes\npppoptfile = /etc/ppp/options.l2tpd.client\nlength bit = yes\n```\n\nThis file configures xl2tpd with the connection name, server IP address (which again, please remember to change to your servers address) and various options that will be passed to pppd once the tunnel is set up.\n\nNow create /etc/ppp/options.l2tpd.client with the following contents:\n\n```\nipcp-accept-local\nipcp-accept-remote\nrefuse-eap\nrequire-mschap-v2\nnoccp\nnoauth\nidle 1800\nmtu 1410\nmru 1410\ndefaultroute\nusepeerdns\ndebug\nconnect-delay 5000\nname your_vpn_username\npassword your_password\n```\n\nPlace your assigned username and password for the VPN server in this file. A lot of these options are for interoperability with Windows Server L2TP servers. If your VPN server uses PAP authentication, replace require-mschap-v2 with require-pap.\n\nThis concludes the configuration of the applicable software suites to connect to a L2TP/IPsec server. To start the connection do the following:\n\nStart openswan.service and xl2tpd.service.\n\n```\n# ipsec auto --up L2TP-PSK\n# echo \"c vpn-connection\" > /var/run/xl2tpd/l2tp-control\n```\n\nAt this point the tunnel is up and you should be able to see the interface for it if you type:\n\n```\n$ ip link\n```\n\nYou should see a pppX device that represents the tunnel. Right now, nothing is going to get routed through it. You need to add some routing rules to make it work right:\n\n"
    },
    {
      "title": "Routing traffic to a single IP address or subnet through the tunnel",
      "level": 3,
      "content": "This is as easy as adding a routing rule to your kernel table:\n\n```\n# ip route add xxx.xxx.xxx.xxx via yyy.yyy.yyy.yyy dev pppX\n```\n\nNote xxx.xxx.xxx.xxx is the specific ip address (e.g. 192.168.3.10) or subnet (e.g. 192.168.3.0/24) that you wish to communicate with through the tunnel device (e.g. ppp0).\n\nNote yyy.yyy.yyy.yyy is \"peer ip\" of your pppX device used to route traffic to tunnel destination xxx.xxx.xxx.xxx.\n\nSee example below for command to identify tunnel device name and peer ip and then add route. :\n\n```\n$ ip address\n```\n\n```\n4: ppp0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1400 qdisc fq_codel state UNKNOWN group default qlen 3\n    link/ppp \n    inet 10.192.168.40 peer 192.0.2.1/32 scope global ppp0\n       valid_lft forever preferred_lft forever\n```\n\n```\n# ip route add 192.168.3.0/24 via 192.0.2.1 dev ppp0\n```\n\n"
    },
    {
      "title": "Routing all traffic through the tunnel",
      "level": 3,
      "content": "This is a lot more complex, but all your traffic will travel through the tunnel. Start by adding a special route for the actual VPN server through your current gateway:\n\n```\n# ip route add 68.68.32.79 via 192.168.1.1 dev eth0\n```\n\nThis will ensure that once the default gateway is changed to the ppp interface that your network stack can still find the VPN server by routing around the tunnel. If you miss this step you will lose connectivity to the Internet and the tunnel will collapse. Now add a default route that routes to the PPP remote end:\n\n```\n# ip route add default via yyy.yyy.yyy.yyy dev pppX\n```\n\nThe remote PPP end can be discovered by following the step in the previous section. Now to ensure that ALL traffic is routing through the tunnel, delete the original default route:\n\n```\n# ip route delete default via 192.168.1.1 dev eth0\n```\n\nTo restore your system to the previous state, you can reboot or reverse all of the above steps.\n\nThe route creation can also be automated by placing a script in /etc/ppp/ip-up.d.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "Issue: journalctl logs VPN connection: failed to connect: 'Could not restart the ipsec service.\n\nSolution Make sure you have strongswan installed\n\nNote: **ipsec verify** \n\nIssue: I get a message from pppd saying \"Failed to authenticate ourselves to peer\" and I have verified my password is correct. What could be wrong?\n\nSolution 1: If you see the following in your /var/log/daemon.log:\n\n```\nDec 20 15:14:03 myhost pppd[26529]: rcvd [CHAP Challenge id=0x1 <some_or_another_hash>, name = \"SonicWALL\"]\nDec 20 15:14:03 myhost pppd[26529]: sent [CHAP Response id=0x1 <some_or_another_hash>, name = \"your_vpn_username\"]\nDec 20 15:14:03 myhost pppd[26529]: rcvd [LCP EchoRep id=0x0 magic=0x45c269c6]\nDec 20 15:14:03 myhost pppd[26529]: rcvd [CHAP Failure id=0x1 \"\"]\nDec 20 15:14:03 myhost pppd[26529]: CHAP authentication failed\nDec 20 15:14:03 myhost pppd[26529]: CHAP authentication failed\nDec 20 15:14:03 myhost pppd[26529]: sent [LCP TermReq id=0x3 \"Failed to authenticate ourselves to peer\"]\nDec 20 15:14:03 myhost pppd[26529]: rcvd [LCP TermReq id=0x2]\nDec 20 15:14:03 myhost pppd[26529]: sent [LCP TermAck id=0x2]\nDec 20 15:14:03 myhost pppd[26529]: rcvd [LCP TermAck id=0x3]\n```\n\nthen you are authenticating against a SonicWALL LNS that does not know how to handle CHAP-style authentication correctly.\n\nThe solution to this is to add the following to your options.l2tp.client file:\n\n```\nrefuse-chap\n```\n\nThis will cause the SonicWALL to default to the next authentication mechanism, namely MSCHAP-v2. This should authenticate successfully, and from this point xl2tpd should successfully construct a tunnel between you and the remote L2TP server.\n\nSolution 2: If you see the following in your journal after running journalctl -ru xl2tpd as root:\n\n```\nvas. 03 12:31:21 myhost pppd[8922]: rcvd [LCP EchoRep id=0x0 magic=<some_or_another_hash>]\nvas. 03 12:31:21 myhost pppd[8922]: rcvd [CHAP Failure id=0x1 \"E=691 R=0 C=<some_or_another_hash> V=3 M=bad username or password\"]\nvas. 03 12:31:21 myhost pppd[8922]: MS-CHAP authentication failed: bad username or password\nvas. 03 12:31:21 myhost pppd[8922]: CHAP authentication failed\n```\n\nTry adding domain name in front of username in your options.l2tpd.client file (note the double backslash), i.e:\n\n```\nâ¦\nname DOMAIN\\\\your_vpn_username\npassword your_password\n```\n\nIssue: cannot initiate connection with ID wildcards (kind=CK_TEMPLATE) after running ipsec auto --ad L2TP-PSK when using Openswan 3.0.0.\n\nDetermine the private IP of the VPN server in the target network behind the VPN, and add the corresponding line to /etc/ipsec.conf:\n\n```\nrightid = private IP of VPN server\n```\n\n"
    },
    {
      "title": "Script start up and shut down",
      "level": 3,
      "content": "You can create some scripts either in your home directory or elsewhere(remember where you put them) to bring up the tunnel then shut it back down.\n\nFirst, a utility script to automatically discover PPP distant ends:\n\n```\ngetip.sh\n```\n\n```\n#!/bin/bash\n\nifconfig $1 | grep \"P-t-P\" | gawk -F: '{print $2}' | gawk '{print $1}'\n```\n\nNext, the script to bring the tunnel up. This will replace the default route, so all traffic will pass via the tunnel:\n\n```\nstartvpn.sh\n```\n\n```\n#!/bin/bash\n\nsystemctl start openswan\nsleep 2                                                   #delay to ensure that IPsec is started before overlaying L2TP\nsystemctl start xl2tpd\nipsec auto --up L2TP-PSK                        \necho \"c vpn-connection\" > /var/run/xl2tpd/l2tp-control     \nsleep 2                                                   #delay again to make that the PPP connection is up.\nPPP_GW_ADD=`./getip.sh ppp0`\n\nip route add 68.68.32.79 via 192.168.1.1 dev eth0\nip route add default via $PPP_GW_ADD\nip route del default via 192.168.1.1\n```\n\nFinally, the shutdown script, it simply reverses the process:\n\n```\nstopvpn.sh\n```\n\n```\n#!/bin/bash\n\nipsec auto --down L2TP-PSK\necho \"d vpn-connection\" > /var/run/xl2tpd/l2tp-control\nsystemctl stop xl2tpd\nsystemctl stop openswan\n\nip route del 68.68.32.79 via 192.168.1.1 dev eth0\nip route add default via 192.168.1.1\n```\n\n"
    },
    {
      "title": "A further script",
      "level": 3,
      "content": "Above script really help me work. And notice the script use fixed ip, and someone like me may change net vpn addr, i would like to put my further script below(not sure how to add attachment, so just raw ):\n\n```\n#!/bin/bash\nif [ $#Â != 1 ]Â ; then\n\techo \"Usage: (sudo) sh $0 {init|start|stop}\" \n\texit 1;\nfi\n\nVPN_ADDR=XXX\nIFACE=wlan0\n\nfunction getIP(){\n\tip addr show $1 | grep \"inet \" | awk '{print $2}' | sed 's:/.*::'       \n}\n\nfunction getGateWay(){\n\tip route show default | awk '/default/ {print $3}'\n}\nfunction getVPNGateWay(){\n\tip route | grep -m 1 \"$VPN_ADDR\" | awk '{print $3}'\n}\n\nGW_ADDR=$(getGateWay)  \n\nfunction init(){\n\tcp ./options.l2tpd.client /etc/ppp/\n\tcp ./ipsec.conf /etc/\n\tcp ./ipsec.secrets /etc/\n\tcp ./xl2tpd.conf /etc/xl2tpd/\n}\n\nfunction start(){\n\tsed -i \"s/^lns =.*/lns = $VPN_ADDR/g\" /etc/xl2tpd/xl2tpd.conf\n\tsed -i \"s/plutoopts=.*/plutoopts=\\\"--interface=$IFACE\\\"/g\" /etc/ipsec.conf\n\tsed -i \"s/left=.*$/left=$(getIP $IFACE)/g\" /etc/ipsec.conf\n\tsed -i \"s/right=.*$/right=$VPN_ADDR/g\" /etc/ipsec.conf\n\tsed -i \"s/^.*: PSK/$(getIP $IFACE) $VPN_ADDRÂ : PSK/g\" /etc/ipsec.secrets\n\tsystemctl start openswan\n\tsleep 2    #delay to ensure that IPsec is started before overlaying L2TP\n\n\tsystemctl start xl2tpd\n\tipsec auto --up L2TP-PSK                        \n\techo \"c vpn-connection\" > /var/run/xl2tpd/l2tp-control     \n\tsleep 2    #delay again to make that the PPP connection is up.\n\n        ip route add $VPN_ADDR via $GW_ADDR dev $IFACE\n        ip route add default via $(getIP ppp0)\n        ip route del default via $GW_ADDR\n}\n\nfunction stop(){\n\tipsec auto --down L2TP-PSK\n\techo \"d vpn-connection\" > /var/run/xl2tpd/l2tp-control\n\tsystemctl stop xl2tpd\n\tsystemctl stop openswan\n\t\n\tVPN_GW=$(getVPNGateWay)\n        ip route del $VPN_ADDR via $VPN_GW dev $IFACE\n        ip route add default via $VPN_GW\n}\n\n$1\nexit 0\n```\n\n"
    },
    {
      "title": "Script to resolve dns names and connect",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nVery useful if you have dynamic IP for the server.\n\n```\n#!/bin/python\n\nfrom os import system\nfrom socket import gethostbyname\nfrom netifaces import ifaddresses, AF_INET\nfrom time import sleep\n\n# netifaces is a library installed with pip, not part of default insatllation of python\n# The script is useful if you have dynamic IP, or need to use a domain for the vpn server\n# gist: https://gist.github.com/physicalit/bf9e27c7ecbc12843cd68e442358616c\n# The template files are identical to the examples from the link above, except they use the sign `<` as placeholder for the server ip\n# can be added to cron, do not forghet to modify your domain and the ip/subnet from the `ip add route ...`\n\nip = gethostbyname('your.domain.tld')\n\nfile_list = ['/etc/xl2tpd/xl2tpd.conf_tmp', '/etc/ipsec.secrets_tmp', '/etc/ipsec.conf_tmp']\n\ndef read_file(file):\n    with open(file, 'r') as f:\n        result = f.readlines()\n        #result = [l.rstrip('\\n') for l in result]  # l.split('_')[0] \n        return result\n\ndef write_ip(ip):\n    for l in file_list:\n        result = [ip.join(e.split('<')) if \"<\" in e else e for e in read_file(l)]\n        with open(l.split('_')[0], 'w') as f:\n            for e in result:\n                f.write(e)\n\nif __name__ == \"__main__\":\n    write_ip(ip)\n    [ system('systemctl restart {}'.format(l)) for l in ['openswan', 'xl2tpd']]\n    vpn = system('ipsec auto --up L2TP-PSK')\n    system('echo \"c vpn-connection\" > /var/run/xl2tpd/l2tp-control')\n    sleep(2) # very important or is not going to see ppp0 interface\n    if not vpn:\n        peer = ifaddresses('ppp0')[AF_INET][0]['peer']\n        route = system('ip route add 192.168.88.0/24 via {0} dev ppp0'.format(peer))\n        if not route:\n            print(\"VPN sucesfully connected. Route created.\")\n        else:\n            print(\"VPN KO\")\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- https://openswan.org/\n- https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients.md#ubuntu-linux\n- https://github.com/xelerance/xl2tpd\n- https://web.archive.org/web/20130129212118/https://strongvpn.com/forum/viewtopic.php?pid=1844 (archive link) â The main source used to write the initial revisions of this article.\n\n"
    }
  ]
}