{
  "title": "Scanner Button Daemon",
  "url": "https://wiki.archlinux.org/title/Scanner_Button_Daemon",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "The majority of the desktop scanners are more or less \"passive\" devices: They might function with a suitable application but are unable to be used by buttons only.\n\nscanbd tries to solve the problem with managing such scanners to make use of the scanner-buttons they have (only when the buttons are supported by sane).\n\n"
    },
    {
      "title": "How does it work?",
      "level": 2,
      "content": "scanbd (the scanner button daemon) opens and polls the scanner and therefore locks the device. So no other application can access the device directly (open the /dev/..., or via libusb, etc).\n\nTo solve this, a second daemon is used (in the so called \"manager-mode\" of scanbd): scanbm is configured as a \"proxy\" to access the scanner and, if another application tries to use the scanner, the polling daemon is ordered to disable polling for the time the other scan-application wants to use the scanner.\n\nTo make this happen, scanbm is configured instead of saned as the network scanning daemon. If a scan request arrives on the sane-port, scanbm stops the polling by sending a dbus-signal to the polling scanbd-daemon. Then it starts the real saned which scans and sends the data back to the requesting application. Afterwards the scanbd-manager scanbm restarts the polling by sending another dbus-signal to scanbd.\n\nDue to the above, the set up of the scanbd requires changes in default configuration of SANE and also definition of own action scripts (defining what should be done when a button on the scanner is pressed).\n\nThere are also alternatives to scanbd, eg. scanbuttond, however these seem to be unmaintained nowadays.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the scanbd-gitAUR package.\n\n"
    },
    {
      "title": "Sane configuration",
      "level": 3,
      "content": "Since scanbd and saned are running on the same machine as the scanner is connected to, we need to have two sets of saned configurations - one in the default location (/etc/sane.d/), which would redirect local applications to a network socket, that systemd is listening on, and another one (e.g. /etc/scanbd/sane.d/), which will be actually used by sane backend to access the attached scanner.\n\nFirst, copy all configuration files from /etc/sane.d/ to /etc/scanbd/sane.d/ (these will be needed later):\n\n```\n# cp -r /etc/sane.d/* /etc/scanbd/sane.d/\n```\n\nModify /etc/sane.d/dll.conf so that it includes only the \"net\" directive (either delete the other directives (printers), or comment them with # symbol):\n\n```\n/etc/sane.d/dll.conf\n```\n\n```\nnet\n```\n\nModify the net-backend configuration file (see scanbd's README.txt for more complicated setups):\n\n```\n/etc/sane.d/net.conf\n```\n\n```\nconnect_timeout = 3\nlocalhost # scanbm is listening on localhost\n```\n\nNow the desktop applications (which use libsane) are forced (by the above dll.conf) to use the net-backend only. This prevents them from using the locally attached scanners directly (and blocking them).\n\nWhenever there is a connection to the standard sane network socket, systemd starts scanbm (\"manager mode\" of scanbd), which in turn tells (the already running) scanbd to stop polling the scanner and then it starts saned with the alternative configuration directory.\n\nThe last step is to modify the alternative configuration of sane in /etc/scanbd/sane.d/dll.conf: just make sure that the \"net\" directive is commented and the corresponding scanner-backends are uncommented:\n\n```\n/etc/scanbd/sane.d/dll.conf\n```\n\n```\n#net\npixma\nepson2\n#... whatever other scanner backend needed ...\n```\n\nNow it is time to start/enable scanbd.service and start scanbm.socket.\n\nYou can check the scanbd.service and scanbm.socket unit status to see if the scanbd service and scanbm socket were started. To increase debugging verbosity, change debug-level = 7 in /etc/scanbd/scanbd.conf and restart the scanbd service.\n\nIf keeping the default user daemon and group scanner in /etc/scanbd/scanbd.conf, make sure you've added daemon to the scanner group, otherwise scanbm won't work.\n\n"
    },
    {
      "title": "scanbd configuration",
      "level": 3,
      "content": "If you are lucky, your scanner might work almost out of the box and you would only want to modify the action scripts, which define what is done when a particular button is pressed.\n\nscanbm listens to scanner's status and on the basis of messages received, it decides what to do. The standard behaviour is defined in /etc/scanbd/scanbd.conf. E.g. the action scan:\n\n```\naction scan {\n        filter = \"^scan.*\"\n        numerical-trigger {\n               from-value = 1\n               to-value   = 0\n               }\n        desc   = \"Scan to file\"\n        script = \"test.script\"\n       }\n```\n\nWhenever the message from the scanner includes word \"scan\" (see reg-exp for more details on filters) and the value changes from 1 to 0, then it runs script /etc/scanbd/test.script.\n\n/etc/scanbd/test.script does not do anything but sends a message to syslog:\n\n```\n/etc/scanbd/test.script\n```\n\n```\n#!/bin/bash\n# look in scanbd.conf for environment variables\n\nlogger -t \"scanbd: $0\" \"Begin of $SCANBD_ACTION for device $SCANBD_DEVICE\"\n\n# printout all env-variables\n/usr/bin/printenv > /tmp/scanbd.script.env\n\nlogger -t \"scanbd: $0\" \"End   of $SCANBD_ACTION for device $SCANBD_DEVICE\"\n```\n\nThere are a few other scripts available in /etc/scanbd/ that actually do something - have a look yourself.\n\nAlso, /etc/scanbd/scanbd.conf has \"include\" directives at the end, which refer to preconfigured button definitions of a few printers.\n\n```\n$ cat /etc/scanbd/scanbd.conf | grep include\\(\n# include(\"scanner.d/myscanner.conf\")\n# include(\"/my/long/path/myscanner.conf\")\ninclude(scanner.d/avision.conf)\ninclude(scanner.d/fujitsu.conf)\ninclude(scanner.d/hp.conf)\ninclude(scanner.d/pixma.conf)\ninclude(scanner.d/snapscan.conf)\n```\n\n"
    }
  ]
}