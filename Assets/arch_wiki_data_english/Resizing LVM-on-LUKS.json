{
  "title": "Resizing LVM-on-LUKS",
  "url": "https://wiki.archlinux.org/title/Resizing_LVM-on-LUKS",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section is a candidate for merging with LVM#Shrinking.** This article or section is a candidate for merging with LVM#Shrinking.\n\nThis article or section is a candidate for merging with LVM#Shrinking.\n\nThis article follows the process of resizing an LVM-on-LUKS-on-GPT partition. You can also use GParted GUI tool to resize LUKS partition, which may be easier and quicker for beginners.\n\n"
    },
    {
      "title": "Method",
      "level": 2,
      "content": "The filesystem we work on will have the following structure:\n\n```\n# lsblk\n```\n\n```\nNAME                MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nsda                   8:0    0 111.8G  0 disk\n├─sda1                8:1    0    99M  0 part  /boot\n└─sda2                8:2    0 111.7G  0 part\n  └─vgroup          254:0    0 111.7G  0 crypt\n    ├─vgroup-lvroot 254:1    0    30G  0 lvm   /\n    └─vgroup-lvhome 254:2    0  81.7G  0 lvm   /home\n```\n\nThe goal is to clear up unused space and create a new partition, sda3, without any data loss. All filesystems are assumed to be ext4.\n\nThe entire process should run from a live USB Arch system to avoid any filesystem corruption.\n\n"
    },
    {
      "title": "Process",
      "level": 2,
      "content": "Note: **Do not** \n\n"
    },
    {
      "title": "Boot and setup",
      "level": 3,
      "content": "Boot into your live USB flash installation media.\n\nDecrypt the LUKS volume:\n\n```\n# cryptsetup luksOpen /dev/sda2 cryptdisk\n```\n\n"
    },
    {
      "title": "Resize filesystem and LVM logical volume",
      "level": 3,
      "content": "Follow these instructions.\n\nYou can run a fsck just to make sure nothing broke:\n\n```\n# e2fsck -f /dev/vgroup/lvhome\n```\n\n"
    },
    {
      "title": "Resize LVM physical Volume",
      "level": 3,
      "content": "To calculate the new LVM physical volume size, use a simple formula: NEW_VOLUME_BYTES = PE_SIZE * PE_COUNT + UNUSABLE_SIZE:\n\n```\npvdisplay /dev/mapper/cryptdisk\n```\n\n```\n...\nPV Size               950.05 GiB / not usable 4.00 MiB\n...\nPE Size               4.00 MiB\n...\nAllocated PE          116303\n...\n```\n\nUsing the formula above: (116303 * 4 MiB + 4 MiB) in Bytes = 487814332416.\n\nResize the volume. Note the \"B\" (Bytes) appended to the end of the value for size. This command is safe since it will exit early if the new size would not fit all the existing extents:\n\n```\n# pvresize --setphysicalvolumesize 487814332416B /dev/mapper/cryptdisk\n```\n\n"
    },
    {
      "title": "Resize LUKS volume",
      "level": 3,
      "content": "To calculate the new LUKS volume size, use a simple formula: NEW_LUKS_SECTOR_COUNT = PV_EXTENT_COUNT * PV_EXTENT_SIZE IN BYTES / LUKS_SECTOR_SIZE\n\n```\n# pvdisplay /dev/mapper/cryptdisk\n```\n\n```\n...\nPV Size               454.31 GiB / not usable 3.00 MiB\n...\nPE Size               4.00 MiB\nTotal PE              116303\n...\n```\n\n```\n# cryptsetup status cryptdisk\n```\n\n```\n...\nsector size:  512\n...\n```\n\n```\n(116303 extents + 1 unusable extent) * 4194304 B/extent / 512 B/sector = 952762368 sectors\n```\n\nResize the LUKS volume:\n\n```\n# cryptsetup -b $NEW_LUKS_SECTOR_COUNT resize cryptdisk\n```\n\n"
    },
    {
      "title": "Resize the partition",
      "level": 3,
      "content": "To calculate the new partition size, use a simple formula: NEW_PARTITION_SECTOR_END = PARTITION_SECTOR_START + (LUKS_SIZE_SECTORS + LUKS_OFFSET_SECTORS) - 1. The - 1 is because parted takes an inclusive sector end parameter.\n\n```\n# cryptsetup status cryptdisk\n```\n\n```\n...\noffset:  4096 sectors\nsize:    952762368 sectors\n```\n\nClose the LUKS volume to resize offline. You will probably need to deactivate LVM volumes on the cryptdisk or it will not close.\n\n```\n# vgchange -a n vgroup\n# cryptsetup close cryptdisk\n```\n\nUse parted to resize the partition:\n\n```\n# parted /dev/sda\n (parted) unit\n Unit?  [compact]? s\n (parted) p\n ...\n  2      8003584s  2000408575s  1992404992s\n```\n\nUsing the formula above returns: 8003584 + (952762368 + 4096) - 1 = 960770047\n\n```\n(parted) resizepart 2 960770047\n Warning: Shrinking a partition can cause data loss, are you sure you want to continue?\n Yes/No? y\n (parted) q\n```\n\nAt this point you can reopen the LUKS volume and remount partitions. You will need to manually reactive the LVM partitions since if you manually deactivated them above.\n\n```\n# cryptsetup luksOpen /dev/sda2 cryptdisk\n# vgchange -a y vgroup\n```\n\n"
    },
    {
      "title": "Enlarge LVM on LUKS",
      "level": 2,
      "content": "Enlarging a LVM-on-LUKS logical partition, for instance after migrating to a larger hard disk, is done in the opposite way - from the outermost to the innermost partition:\n\n```\nprimary partition(LUKS device{volume group[(logical partition1)(logical partition2-->)]})\n```\n\n"
    },
    {
      "title": "Preparation",
      "level": 3,
      "content": "Create a new partition on the new hard disk of wanted size, f.i. by using GNU Parted, and clone the old partition sdX1, containing your LUKS container, into the new partition sdY1:\n\n```\n# dd if=/dev/sdX1 of=/dev/sdY1 bs=4M\n```\n\n"
    },
    {
      "title": "Extending the physical segments of the cryptdevice",
      "level": 3,
      "content": "Now, open the cryptdevice CryptDisk on the new hard disk:\n\n```\n# cryptsetup open /dev/sdY1 CryptDisk\n```\n\nTake a look at your current physical volume. In this example, we have a cryptdevice CryptDisk containing a volume group CryptVolumeGroup of two partitions root and home:\n\n```\n# pvdisplay -m\n```\n\n```\n--- Physical volume ---\n PV Name               /dev/mapper/CryptDisk\n VG Name               CryptVolumeGroup\n PV Size               <118.75 GiB / not usable 3.00 MiB\n Allocatable           yes (but full)\n PE Size               4.00 MiB\n Total PE              30399\n Free PE               0\n Allocated PE          30399\n PV UUID               hu0iA9-i8fv-2SC1-C6ys-LQCz-sptQ-RSOUE5\n\n --- Physical Segments ---\n Physical extent 0 to 6399:\n   Logical volume      /dev/CryptVolumeGroup/root\n   Logical extents     0 to 6399\n Physical extent 6400 to 30398:\n   Logical volume      /dev/CryptVolumeGroup/home\n   Logical extents     0 to 23998\n```\n\nBy taking the total physical extents (PE) times the PE's size, we get the total size of the physical volume (PV), in this case 118.75 GiB. Although pvdisplay does not show the free extents, we can enlarge the PV to use all the available remaining space of the partition:\n\n```\n# pvresize /dev/mapper/CryptDisk\n```\n\nNow we get:\n\n```\n# pvdisplay -m\n```\n\n```\n...\n --- Physical Segments ---\n Physical extent 0 to 6399:\n   Logical volume      /dev/CryptVolumeGroup/root\n   Logical extents     0 to 6399\n Physical extent 6400 to 30398:\n   Logical volume      /dev/CryptVolumeGroup/home\n   Logical extents     0 to 23998\n Physical extent 30399 to 60922:\n   FREE\n```\n\nNote the free extents at the end of the PV. Calculate the size difference by taking the free physical extends times PE size - in that case (60922-30399)*4 MiB = 119.2 GiB.\n\n"
    },
    {
      "title": "Resizing the logical volume",
      "level": 3,
      "content": "Now we are going to resize the second logical volume (LV), in this case containing the /home partition, by the size of the free physical extents minus some safety space:\n\n```\n# lvresize -L +119G /dev/CryptVolumeGroup/home\n```\n\nNote the new size of the second logical volume. Calculate its total size by taking the total logical extends time the PE size - in that case 53438 * 4 MiB = 208.7 GiB:\n\n```\n# pvdisplay -m\n```\n\n```\n...\n --- Physical Segments ---\n Physical extent 0 to 6399:\n   Logical volume      /dev/CryptVolumeGroup/root\n   Logical extents     0 to 6399\n Physical extent 6400 to 59838:\n   Logical volume      /dev/CryptVolumeGroup/home\n   Logical extents     0 to 53438\n Physical extent 59839 to 60922:\n   FREE\n```\n\n"
    },
    {
      "title": "Resizing the encrypted volume",
      "level": 3,
      "content": "Now we are going to resize the encrypted volume itself. By taking in account the total size of the logical volume minus some safety space:\n\n```\n# resize2fs -p /dev/CryptVolumeGroup/Home 208G\n```\n\nExecute e2fsck, if asked. That's it.\n\n"
    }
  ]
}