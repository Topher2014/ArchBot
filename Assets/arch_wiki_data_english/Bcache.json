{
  "title": "Bcache",
  "url": "https://wiki.archlinux.org/title/Bcache",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nRelated articles\n\n- Bcachefs\n- LVM\n\nBcache (block cache) allows one to use an SSD as a read/write cache (in writeback mode) or read cache (writethrough or writearound) for another blockdevice (generally a rotating HDD or array). This article will show how to install Arch using Bcache as the root partition. For an intro to bcache itself, see the bcache homepage. Be sure to read and reference the bcache manual.\n\nBcache needs the backing device to be formatted as a bcache block device. In most cases, blocks to-bcache can do an in-place conversion.\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n- Be sure you back up any important data first.\n- Bcache and btrfs could leave you with a corrupted filesystem. Please visit this post for more information. Btrfs wiki reports that it was fixed in kernels 3.19+ [1].\n\n"
    },
    {
      "title": "Setting up bcached btrfs file systems on an existing system",
      "level": 2,
      "content": "Note: **will not** \n\n"
    },
    {
      "title": "Preparation",
      "level": 3,
      "content": "Install bcache-toolsAUR.\n\nUse fdisk to create the appropriate partitions on the SSD's and hard drives to hold the cache and the backing data.\n\n"
    },
    {
      "title": "Situation: 1 hard drive and 1 read cache SSD",
      "level": 3,
      "content": "- When a single hard drive fails, all data is lost.\n- Do not enable write caching, as that can cause data loss when the SSD fails\n\n```\n+--------------+\n| btrfs /mnt   |\n+--------------+\n| /dev/Bcache0 |\n+--------------+\n| Cache        |\n| /dev/sdk1    |\n+--------------+\n| Data         |\n| /dev/sdv1    |\n+--------------+\n```\n\n1. Format the backing device (This will typically be your mechanical drive). The backing device can be a whole device, a partition or any other standard block device. This will create /dev/bcache0\n\n```\n# make-bcache -B /dev/sdv1\n```\n\n2. Format the cache device (This will typically be your SSD). The cache device can be a whole device, a partition or any other standard block device\n\n```\n# make-bcache -C /dev/sdk1\n```\n\nIn this example the default block and bucket sizes of 512B and 128kB are used. The block size should match the backing devices sector size which will usually be either 512 or 4k. The bucket size should match the erase block size of the caching device with the intent of reducing write amplification. For example, using a HDD with 4k sectors and an SSD with an erase block size of 2MB this command would look like\n\n```\n# make-bcache --block 4k --bucket 2M -C /dev/sdk1\n```\n\n3. Get the uuid of the cache device\n\n```\n# bcache-super-show /dev/sdk1 | grep cset\ncset.uuid\t\tf0e01318-f4fd-4fab-abbb-d76d870503ec\n```\n\n4. Register the cache device against your backing device. Replace the example uuid with the uuid of your cache. Udev rules will take care of this on reboot and will only need to be done once.\n\n```\n# echo f0e01318-f4fd-4fab-abbb-d76d870503ec > /sys/block/bcache0/bcache/attach\n```\n\n5. Create the btrfs filesystem.\n\n```\n# mkfs.btrfs /dev/bcache0\n```\n\n6. mount the filesystem\n\n```\n# mount /dev/bcache0 /mnt\n```\n\n7. If you want to have this partition available during the initcpio (i.e. you require it at some point in the boot process) you need to add 'bcache' to your modules array in /etc/mkinitcpio.conf as well as adding the 'bcache' hook in your list between block and filesystems. You must then regenerate the initramfs.\n\n"
    },
    {
      "title": "Situation: 4 hard drives and 1 read cache SSD",
      "level": 3,
      "content": "- Do not enable write caching, as that can cause data loss when the SSD fails\n\n```\n+-----------------------------------------------------------+\n|                         btrfs /mnt                        |\n+--------------+--------------+--------------+--------------+\n| /dev/Bcache0 | /dev/Bcache1 | /dev/Bcache2 | /dev/Bcache3 |\n+--------------+--------------+--------------+--------------+\n|                           Cache                           |  \n|                         /dev/sdk1                         |\n+--------------+--------------+--------------+--------------+\n| Data         | Data         | Data         | Data         |\n| /dev/sdv1    | /dev/sdw1    | /dev/sdx1    | /dev/sdy1    |\n+--------------+--------------+--------------+--------------+\n```\n\n1. Format the backing devices (These will typically be your mechanical drives). The backing devices can be whole devices, partitions or any other standard block devices. This will create /dev/bcache0, /dev/bcache1, /dev/bcache2 and /dev/bcache3\n\n```\n# make-bcache -B /dev/sdv1\n# make-bcache -B /dev/sdw1\n# make-bcache -B /dev/sdx1\n# make-bcache -B /dev/sdy1\n```\n\n2. Format the cache device (This will typically be your SSD). The cache device can be a whole device, a partition or any other standard block device. Only one cache device can be added to a group of backing devices.\n\n```\n# make-bcache -C /dev/sdk1\n```\n\n3. Get the uuid of the cache device\n\n```\n# bcache-super-show /dev/sdk1 | grep cset\ncset.uuid\t\tf0e01318-f4fd-4fab-abbb-d76d870503ec\n```\n\n4. Register the cache device against your backing devices. Replace the example uuid with the uuid of your cache.\n\n```\n# echo f0e01318-f4fd-4fab-abbb-d76d870503ec > /sys/block/bcache0/bcache/attach\n# echo f0e01318-f4fd-4fab-abbb-d76d870503ec > /sys/block/bcache1/bcache/attach\n# echo f0e01318-f4fd-4fab-abbb-d76d870503ec > /sys/block/bcache2/bcache/attach\n# echo f0e01318-f4fd-4fab-abbb-d76d870503ec > /sys/block/bcache3/bcache/attach\n```\n\n5. Create the btrfs filesystem. Both the data and the metadata is stored twice in the array, so there will be no data loss when a single hard drive fails. The -L argument defines the label of the filesystem.\n\n```\n# mkfs.btrfs -L STORAGE -f -d raid1 -m raid1 /dev/bcache0 /dev/bcache1 /dev/bcache2 /dev/bcache3\n```\n\n6. mount the filesystem\n\n```\n# mount /dev/bcache0 /mnt\n```\n\n"
    },
    {
      "title": "Situation: 3 hard drives and 3 read/write cache SSD's",
      "level": 3,
      "content": "- Each HDD needs its own SSD, to avoid data loss if a SSD in writeback mode fails.\n\n```\n+--------------------------------------------+\n|                  btrfs /mnt                |\n+--------------+--------------+--------------+\n| /dev/Bcache0 | /dev/Bcache1 | /dev/Bcache2 |\n+--------------+--------------+--------------+\n| Cache        | Cache        | Cache        |  \n| /dev/sdk1    | /dev/sdl1    | /dev/sdm1    |\n+--------------+--------------+--------------+\n| Data         | Data         | Data         |\n| /dev/sdv1    | /dev/sdw1    | /dev/sdx1    |\n+--------------+--------------+--------------+\n```\n\n1. Format the backing devices (These will typically be your mechanical drives). The backing devices can be whole devices, partitions or any other standard block devices. This will create /dev/bcache0, /dev/bcache1 and /dev/bcache2.\n\n```\n# make-bcache -B /dev/sdv1\n# make-bcache -B /dev/sdw1\n# make-bcache -B /dev/sdx1\n```\n\n2. Format the cache devices (This will typically be your SSD's). The cache devices can be whole devices, partitions or any other standard block devices. To avoid data loss in case of a failing SSD, each backing device needs its own SSD if it is in writeback mode. Cache SSD's in writethrough and in writearound mode can be shared by multiple backing devices, as they do not cause data loss when they fail.\n\n```\n# make-bcache -C /dev/sdk1\n# make-bcache -C /dev/sdl1\n# make-bcache -C /dev/sdm1\n```\n\n3. Get the uuid of the cache devices\n\n```\n# bcache-super-show /dev/sdk1 | grep cset\ncset.uuid\t\tf0e01318-f4fd-4fab-abbb-d76d870503ec\n# bcache-super-show /dev/sdl1 | grep cset\ncset.uuid\t\t4b05ce02-19f4-4cc6-8ca0-1f765671ceda\n# bcache-super-show /dev/sdm1 | grep cset\ncset.uuid\t\t75ff0598-7624-46f6-bcac-c27a3cf1a09f\n```\n\n4. Register the cache devices against your backing devices. Replace the example uuid's with the uuid's of your caches.\n\n```\n# echo f0e01318-f4fd-4fab-abbb-d76d870503ec > /sys/block/bcache0/bcache/attach\n# echo 4b05ce02-19f4-4cc6-8ca0-1f765671ceda > /sys/block/bcache1/bcache/attach\n# echo 75ff0598-7624-46f6-bcac-c27a3cf1a09f > /sys/block/bcache2/bcache/attach\n```\n\n5. enable writeback mode\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n- Bcache write caching can cause a catastrophic failure of a btrfs filesystem.\n- Btrfs assumes the underlying device executes writes in order, but bcache writeback may violate that assumption, causing the btrfs filesystem using it to collapse.\n- Every layer or write caching adds more risk of losing data in the event of a power loss.\n- Use bcache in writeback mode with btrfs at your own risk.\n\n```\n# echo writeback > /sys/block/bcache0/bcache/cache_mode\n# echo writeback > /sys/block/bcache1/bcache/cache_mode\n# echo writeback > /sys/block/bcache2/bcache/cache_mode\n```\n\n6. Create the btrfs filesystem. Both the data and the metadata is stored twice in the array, so there will be no data loss when a single hard drive fails. The -L argument defines the label of the filesystem.\n\n```\n# mkfs.btrfs -L STORAGE -f -d raid1 -m raid1 /dev/bcache0 /dev/bcache1 /dev/bcache2\n```\n\n7. mount the filesystem\n\n```\n# mount /dev/bcache0 /mnt\n```\n\n"
    },
    {
      "title": "Situation: 5 hard drives and 3 cache SSD's",
      "level": 3,
      "content": "- Each cache device in writeback mode must only be used to cache a single backing drive, to avoid data loss if that SSD fails. Writethrough and writearound SSD's can be shared.\n\n```\n+--------------------------------------------------------------------------+\n|                                btrfs /mnt                                |\n+--------------+--------------+--------------+--------------+--------------+\n| /dev/Bcache0 | /dev/Bcache1 | /dev/Bcache2 | /dev/Bcache3 | /dev/Bcache4 |\n+--------------+--------------+--------------+--------------+--------------+\n| WriteB Cache |     Writethrough or writearound Cache      | WriteB Cache |  \n| /dev/sdk1    |                 /dev/sdl1                  | /dev/sdm1    |\n+--------------+--------------+--------------+--------------+--------------+\n| Data         | Data         | Data         | Data         | Data         |\n| /dev/sdv1    | /dev/sdw1    | /dev/sdx1    | /dev/sdy1    | /dev/sdz1    |\n+--------------+--------------+--------------+--------------+--------------+\n```\n\n1. Format the backing devices (These will typically be your mechanical drives). The backing devices can be whole devices, partitions or any other standard block devices. This will create /dev/bcache0, /dev/bcache1, /dev/bcache2, /dev/bcache3 and /dev/bcache4.\n\n```\n# make-bcache -B /dev/sdv1\n# make-bcache -B /dev/sdw1\n# make-bcache -B /dev/sdx1\n# make-bcache -B /dev/sdy1\n# make-bcache -B /dev/sdz1\n```\n\n2. Format the cache devices (This will typically be your SSD's). The cache devices can be whole devices, partitions or any other standard block devices. To avoid data loss in case of a failing SSD, each backing device needs its own SSD if it is in writeback mode. Cache SSD's in writethrough and in writearound mode can be shared by multiple backing devices, as they do not cause data loss when they fail.\n\n```\n# make-bcache -C /dev/sdk1\n# make-bcache -C /dev/sdl1\n# make-bcache -C /dev/sdm1\n```\n\n3. Get the uuid of the cache devices\n\n```\n# bcache-super-show /dev/sdk1 | grep cset\ncset.uuid\t\tf0e01318-f4fd-4fab-abbb-d76d870503ec\n# bcache-super-show /dev/sdl1 | grep cset\ncset.uuid\t\t4b05ce02-19f4-4cc6-8ca0-1f765671ceda\n# bcache-super-show /dev/sdm1 | grep cset\ncset.uuid\t\t75ff0598-7624-46f6-bcac-c27a3cf1a09f\n```\n\n4. Register the cache devices against your backing devices. Replace the example uuid's with the uuid's of your caches.\n\n```\n# echo f0e01318-f4fd-4fab-abbb-d76d870503ec > /sys/block/bcache0/bcache/attach\n# echo 4b05ce02-19f4-4cc6-8ca0-1f765671ceda > /sys/block/bcache1/bcache/attach\n# echo 4b05ce02-19f4-4cc6-8ca0-1f765671ceda > /sys/block/bcache2/bcache/attach\n# echo 4b05ce02-19f4-4cc6-8ca0-1f765671ceda > /sys/block/bcache3/bcache/attach\n# echo 75ff0598-7624-46f6-bcac-c27a3cf1a09f > /sys/block/bcache4/bcache/attach\n```\n\n5. enable writeback mode on non-shared caches\n\n```\n# echo writeback > /sys/block/bcache0/bcache/cache_mode\n# echo writeback > /sys/block/bcache4/bcache/cache_mode\n```\n\n6. Create the btrfs filesystem. Both the data and the metadata is stored twice in the array, so there will be no data loss when a single hard drive fails. The -L argument defines the label of the filesystem.\n\n```\n# mkfs.btrfs -L STORAGE -f -d raid1 -m raid1 /dev/bcache0 /dev/bcache1 /dev/bcache2 /dev/bcache3 /dev/bcache4\n```\n\n7. mount the filesystem\n\n```\n# mount /dev/bcache0 /mnt\n```\n\n"
    },
    {
      "title": "Bcache management",
      "level": 3,
      "content": "1. Check that everything has been correctly setup\n\n```\n# cat /sys/block/bcache0/bcache/state\n```\n\nThe output can be:\n\n- no cache: this means you have not attached a caching device to your backing bcache device\n- clean: this means everything is ok. The cache is clean.\n- dirty: this means everything is setup fine and that you have enabled writeback and that the cache is dirty.\n- inconsistent: you are in trouble because the backing device is not in sync with the caching device\n\nYou can have a /dev/bcache0 device associated with a backing device with no caching device attached. This means that all I/O (read/write) are passed directly to the backing device (pass-through mode)\n\n2. See what caching mode is in use\n\n```\n# cat /sys/block/bcache0/bcache/cache_mode\n```\n\n```\n[writethrough] writeback writearound none\n```\n\nIn the above example, the writethrough mode is enabled.\n\n3. Show info about a bcached device:\n\n```\n# bcache-super-show /dev/sdXY\n```\n\n4. Stop the backing device:\n\n```\n# echo 1 > /sys/block/sdX/sdX[Y]/bcache/stop\n```\n\n5. Detach a caching device:\n\n```\n# echo 1 > /sys/block/sdX/sdX[Y]/bcache/detach\n```\n\n6. Safely remove the cache device\n\n```\n# echo cache-set-uuid > /sys/block/bcache0/bcache/detach\n```\n\n7. Release attached devices\n\n```\n# echo 1 > /sys/fs/bcache/cache-set-uuid/stop\n```\n\n"
    },
    {
      "title": "Installation to a bcache device",
      "level": 2,
      "content": "1. Boot on the install disk (2013.08.01 minimum).\n\n2. Install the bcache-toolsAUR.\n\n3. Partition your HDD\n\ngrub cannot handle bcache, so you will need at least 2 partitions (boot and one for the bcache backing device). If you are doing UEFI, you will need an EFI system partition (ESP) as well. E.g.:\n\n```\n1            2048         2099199   1024.0 MiB  EF00  EFI system partition\n   2         2099200         4196351   1024.0 MiB  EA00  arch_boot\n   3         4196352       499998719   236.4 GiB   8300  bcache_backing\n```\n\n4. Configure your HDD as a bcache backing device.\n\n```\n# make-bcache -B /dev/sda3\n```\n\n- When preparing any boot disk it is important to know the ramifications of any decision you may make. Please review and review again the documentation for your chosen boot-loader/-manager and consider seriously how it might relate to bcache.\n- If all associated disks are partitioned at once as below bcache will automatically attach \"-B backing stores\" to the \"-C ssd cache\" and step 5 is unnecessary.\n\n```\n# make-bcache -B /dev/sd? /dev/sd? -C /dev/sd?\n```\n\nYou now have a /dev/bcache0 device.\n\n5. Configure your SSD\n\nFormat the SSD as a caching device and link it to the backing device\n\n```\n# make-bcache -C /dev/sdb\n# echo /dev/sdb > /sys/fs/bcache/register \n# echo UUID__from_previous_command > /sys/block/bcache0/bcache/attach\n```\n\n6. Format the bcache device. Use LVM or btrfs subvolumes if you want to divide up the /dev/bcache0 device how you like (ex for separate /, /home, /var, etc):\n\n```\n# mkfs.btrfs /dev/bcache0\n# mount /dev/bcache0 /mnt/\n# btrfs subvolume create /mnt/root\n# btrfs subvolume create /mnt/home\n# umount /mnt\n```\n\nYou can even setup LUKS on it if you want using e.g. cryptsetup. Referencing the bcache device in the 'cryptdevice' kernel option will work fine, for instance.\n\n7. Prepare the installation mount point:\n\n```\n# mkfs.ext4 /dev/sda2\n# mkfs.fat -F 32 /dev/sda1\n```\n\nNow install arch-install-scripts package. Then:\n\n```\n# mount /dev/bcache0 -o subvol=root,compress=lzo /mnt/\n# mount --mkdir /dev/bcache0 -o subvol=home,compress=lzo /mnt/home\n# mount --mkdir /dev/sda2 /mnt/boot\n# mount --mkdir /dev/sda1 /mnt/efi\n```\n\n8. Install the system as per the Installation guide as normal except this:\n\nBefore you edit /etc/mkinitcpio.conf and run mkinitcpio -p linux:\n\n- Install bcache-toolsAUR.\n- Edit /etc/mkinitcpio.conf: add the \"bcache\" module add the \"bcache\" hook between block and filesystem hooks\n\n- add the \"bcache\" module\n- add the \"bcache\" hook between block and filesystem hooks\n\n"
    },
    {
      "title": "Accessing from the install disk",
      "level": 2,
      "content": "This is how to access a bcache partition from the install disk that was present before the install disk was booted. Boot the install disk and install bcache-toolsAUR from the AUR, just as in the previous section. Then, add the module to the kernel:\n\n```\n# modprobe bcache\n```\n\nYour device will not appear immediately at /dev/bcache*. To force the kernel to find it, tell it to reread the partition table:\n\n```\n# partprobe\n```\n\nNow, /dev/bcache* should be present, and you can carry on mounting, reformatting, etc. from here.\n\nTo start the cache without having to configure the internet and install bcache-toolsAUR, load the kernel module just as before—it is included in the mainline kernel. Then start the cache by registering all of the slave devices:\n\n```\n# echo /dev/sdX > /sys/fs/bcache/register\n# echo /dev/sdY > /sys/fs/bcache/register\n# ...\n```\n\nThe bcache device will appear right after the last required slave device is registered.\n\nA writethrough backing device can be started without having to register any caches. This can be done if there are a lot of them and you are in a hurry, or if some of the caches are inaccessible for some reason. Register the device, as above, then start it:\n\n```\n# echo 1 > /sys/block/sdX/bcache/running\n```\n\nBcache has not actually detached any caches, and will still add any cache devices if they are registered. This command will \"work\" on writeback backing devices, but there will be massive data corruption. Only do this if the missing cache is totally unrecoverable.\n\n"
    },
    {
      "title": "Configuring",
      "level": 2,
      "content": "There are many options that can be configured (such as cache mode, cache flush interval, sequential write heuristic, etc.) This is currently done by writing to files in /sys. See the bcache user documentation.\n\nChanging the cache mode is done by echoing one of writethrough, writeback, writearound or none to /sys/block/bcache[0-9]/bcache/cache_mode.\n\nNote that some changes to /sys are temporary, and will revert back after a reboot (It seems that at least cache_mode does not need this workaround). To set custom configurations at boot create a .conf file in /etc/tmpfiles.d. To set, in a persistent fashion, the sequential cutoff for bcache0 to 1 MB and write back you could create a file /etc/tmpfiles.d/my-bcache.conf with the contents:\n\n```\nw /sys/block/bcache0/bcache/sequential_cutoff - - - - 1M\nw /sys/block/bcache0/bcache/cache_mode        - - - - writeback\n```\n\n"
    },
    {
      "title": "Situation: Prevent all write access to a HDD",
      "level": 3,
      "content": "- When the hard drive or the SSD fails, all data is lost.\n- Consider using BTRFS RAID to prevent data loss when a SSD / HDD fails.\n\nIn this situation the goal is to keep the HDD idle as long as possible. This is achieved by absorbing all writes with the SSD. The hard drive is only activated when the SSD is full, or when something is read that's not on the SSD.\n\nEnable the writeback cache mode:\n\n```\n# echo writeback > /sys/block/bcache0/bcache/cache_mode\n```\n\nLet bcache completely sync with the hard drive.\n\n```\n# echo 0 > /sys/block/bcache0/bcache/writeback_percent\n```\n\nDon't let sequential IO bypass the cache:\n\n```\n# echo 0 > /sys/block/bcache0/bcache/sequential_cutoff\n```\n\nLet bcache wait a week after the previous sync is done:\n\n```\n# echo $((7*24*60*60)) > /sys/block/bcache0/bcache/writeback_delay\n```\n\nDon't let bcache go around the cache when there's read / write congestion\n\n```\n# echo 0 > /sys/fs/bcache/<cache set>/congested_read_threshold_us\n# echo 0 > /sys/fs/bcache/<cache set>/congested_write_threshold_us\n```\n\nPut the HDD to sleep after 20 minutes:\n\n```\n# hdparm -S 240  /dev/$(cat /sys/block/bcache0/bcache/backing_dev_name)\n/dev/sdh1:\nsetting standby to 240 (20 minutes)\n```\n\n```\nFirst use lsblk to get the device names of the HDD and SSD. In this example /dev/sdh1 is the HDD, /dev/sdc1 is the SSD:\n```\n\n```\n# lsblk -M -s\nbcache0   254:0    0 931.5G  0 disk \n   ├─sdc1      8:33   0 111.8G  0 part \n   │ └─sdc     8:32   0 111.8G  0 disk \n   └─sdh1      8:113  0 931.5G  0 part \n     └─sdh     8:112  0 931.5G  0 disk\n```\n\nNow Dstat can be used to monitor disk access to the members of the bcache set.\n\n```\n$ dstat -D sdc1,sdh1\n```\n\n"
    },
    {
      "title": "Resize backing device",
      "level": 3,
      "content": "It is possible to resize the backing device so long as you do not move the partition start. This process is described in the mailing list. Here is an example using btrfs volume directly on bcache0. For LVM containers or for other filesystems, procedure will differ.\n\n"
    },
    {
      "title": "Example of growing",
      "level": 4,
      "content": "In this example, I grow the filesystem by 4GB.\n\n1. Reboot to a live CD/USB Drive (need not be bcache enabled) and use fdisk, gdisk, parted, or your other favorite tool to delete the backing partition and recreate it with the same start and a total size 4G larger.\n\n2. Reboot to your normal install. Your filesystem will be currently mounted. That is fine. Issue the command to resize the partition to its maximum. For btrfs, that is\n\n```\n# btrfs filesystem resize max /\n```\n\nFor ext3/4, that is:\n\n```\n# resize2fs /dev/bcache0\n```\n\n"
    },
    {
      "title": "Example of shrinking",
      "level": 4,
      "content": "In this example, I shrink the filesystem by 4GB.\n\n1. Disable writeback cache (switch to writethrough cache) and wait for the disk to flush.\n\n```\n# echo writethrough > /sys/block/bcache0/bcache/cache_mode\n$ watch cat /sys/block/bcache0/bcache/state\n```\n\nwait until state reports \"clean\". This might take a while.\n\nI suggest to use\n\n```\n# echo 0 > /sys/block/bcache0/bcache/writeback_percent\n```\n\nThis will flush the dirty data of the cache to the backing device in less a minute.\n\nRevert back the value after with\n\n```\n# echo 10 > /sys/block/bcache0/bcache/writeback_percent\n```\n\n2. Shrink the mounted filesystem by something more than the desired amount, to ensure we do not accidentally clip it later. For btrfs, that is:\n\n```\n# btrfs filesystem resize -5G /\n```\n\nFor ext3/4 you can use resize2fs, but only if the partition is unmounted\n\n```\n$ df -h /home\n```\n\n```\n/dev/bcache0    290G   20G   270G   1% /home\n```\n\n```\n# umount /home\n# resize2fs /dev/bcache0 283G\n```\n\n3. Reboot to a LiveCD/USB drive (does not need to support bcache) and use fdisk, gdisk, parted, or your other favorite tool to delete the backing partition and recreate it with the same start and a total size 4G smaller.\n\n4. Reboot to your normal install. Your filesystem will be currently mounted. That is fine. Issue the command to resize the partition to its maximum (that is, the size we shrunk the actual partition to in step 3). For btrfs, that is:\n\n```\n# btrfs filesystem resize max /\n```\n\nFor ext3/4, that is:\n\n```\n# resize2fs /dev/bcache0\n```\n\n5. Re-enable writeback cache if you want that enabled:\n\n```\n# echo writeback > /sys/block/bcache0/bcache/cache_mode\n```\n\n"
    },
    {
      "title": "/dev/bcache device does not exist on bootup",
      "level": 3,
      "content": "If you are sent to a busy box shell with an error:\n\n```\nERROR: Unable to find root device 'UUID=b6b2d82b-f87e-44d5-bbc5-c51dd7aace15'.\nYou are being dropped to a recovery shell\n    Type 'exit' to try and continue booting\n```\n\nThis might happen if the backing device is configured for \"writeback\" mode (default is writearound). When in \"writeback\" mode, the /dev/bcache0 device is not started until the cache device is both registered and attached. Registering is something that needs to happen every bootup, but attaching should only have to be done once.\n\nTo continue booting, try one of the following:\n\n- Register both the backing device and the caching device\n\n```\n# echo /dev/sda3 > /sys/fs/bcache/register\n# echo /dev/sdb > /sys/fs/bcache/register\n```\n\nIf the /dev/bcache0 device now exists, type exit and continue booting. You will need to fix your initcpio to ensure devices are registered before mounting the root device.\n\n- An error of \"sh: echo: write error: Invalid argument\" means the device was already registered or is not recognized as either a bcache backing device or cache. If using the udev rule on boot it should only attempt to register a device if it finds a bcache superblock\n- This can also happen if using udev's 69-bcache.rules in Installation's step 7 and blkid and bcache-probe \"disagree\" due to rogue superblocks. See bcache's wiki for a possible explanation/resolution.\n\n- Re-attach the cache to the backing device:\n\nIf the cache device was registered, a folder with the UUID of the cache should exist in /sys/fs/bcache. Use that UUID when following the example below:\n\n```\n# ls /sys/fs/bcache/\n```\n\n```\nb6b2d82b-f87e-44d5-bbc5-c51dd7aace15     register     register_quiet\n```\n\n```\n# echo b6b2d82b-f87e-44d5-bbc5-c51dd7aace15 > /sys/block/sda/sda3/bcache/attach\n```\n\nIf the /dev/bcache0 device now exists, type exit and continue booting. You should not have to do this again. If it persists, ask on the bcache mailing list.\n\n- Invalidate the cache and force the backing device to run without it. You might want to check some stats, such as \"dirty_data\" so you have some idea of how much data will be lost.\n\n```\n# cat /sys/block/sda/sda3/bcache/dirty_data\n```\n\n```\n-3.9M\n```\n\ndirty data is data in the cache that has not been written to the backing device. If you force the backing device to run, this data will be lost, even if you later re-attach the cache.\n\n```\n# cat /sys/block/sda/sda3/bcache/running\n```\n\n```\n0\n```\n\n```\n# echo 1 > /sys/block/sda/sda3/bcache/running\n```\n\nThe /dev/bcache0 device will now exist. Type exit and continue booting. You might want to unregister the cache device and run make-bcache again. An fsck on /dev/bcache0 would also be wise. See the bcache documentation.\n\n"
    },
    {
      "title": "/sys/fs/bcache/ does not exist",
      "level": 3,
      "content": "The kernel you booted is not bcache enabled, or you the bcache module is not loaded\n\n"
    },
    {
      "title": "write error: Invalid argument when trying to attach a device due to mismatched block parameter",
      "level": 3,
      "content": "Given bash: echo: write error: Invalid argument when trying to attach a device, and the actual error is shown with dmesg:\n\n```\nbcache: bch_cached_dev_attach() Couldn't attach sdc: block size less than set's block size\n```\n\nThis happens because the --block 4k parameter was not set on either device and defaults can mismatch.\n\nCreating both the backing and caching device in one command automatically solves the issue, but when using separate commands the block size parameter sometimes needs to be set manually on both devices.\n\n"
    },
    {
      "title": "Device or resource busy",
      "level": 3,
      "content": "When a device is in use as a bcache backing device, it can not be formatted nor partitioned:\n\n```\n# make-bcache -C /dev/sdb1\nCan't open dev /dev/sdb1: Device or resource busy\n```\n\n```\n# fdisk /dev/sdb\n\nWelcome to fdisk (util-linux 2.37.2).\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command.\n\nThis disk is currently in use - repartitioning is probably a bad idea.\nIt's recommended to umount all file systems, and swapoff all swap\npartitions on this disk.\n\n\nCommand (m for help): q\n```\n\nTo fix this, first run this command to confirm the disk is actually used as a bcache backing device:\n\n```\n# bcache-super-show /dev/sdb1\nsb.magic\t\tok\nsb.first_sector\t\t8 [match]\nsb.csum\t\t\tA3D2B8610F6C5E35 [match]\nsb.version\t\t1 [backing device]\n\ndev.label\t\t(empty)\ndev.uuid\t\t5a868788-65a2-4564-b4b7-c1817d0b6080\ndev.sectors_per_block\t1\ndev.sectors_per_bucket\t1024\ndev.data.first_sector\t16\ndev.data.cache_mode\t1 [writeback]\ndev.data.cache_state\t2 [dirty]\n\ncset.uuid\t\t42dcb651-6b53-4b65-bc49-9b1ca0acc5b1\n```\n\nThen stop the backing device. This will also remove the corresponding /dev/bcache device.\n\n```\n# echo 1 > /sys/class/block/sdb1/bcache/stop\n```\n\n```\n# dmesg\n[ 3171.263577] bcache: bcache_device_free() bcache0 stopped\n```\n\nNow the device can be partitioned:\n\n```\n# fdisk /dev/sdb\n\nWelcome to fdisk (util-linux 2.37.2).\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command.\n\n\nCommand (m for help): q\n```\n\nWhen fdisk exits, the kernel scans the drive again, notices it's a bcache backing device, and uses the drive as a backing device.\n\n```\n# dmesg\n[ 3190.643270]  sdb: sdb1\n[ 3190.833029] bcache: register_bdev() registered backing device sdb1\n```\n\nThis creates the directory bcache under /sys/class/block/sdb1/\n\n```\n# ls /sys/class/block/sdb1/\nalignment_offset  bcache  dev  discard_alignment  holders  inflight  partition\tpower  ro  size  start\tstat  subsystem  uevent\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Bcache Homepage\n- Bcache Manual\n\n"
    }
  ]
}