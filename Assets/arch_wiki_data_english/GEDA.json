{
  "title": "GEDA",
  "url": "https://wiki.archlinux.org/title/GEDA",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nThe gEDA project has produced and continues working on a full GPL'd suite and toolkit of Electronic Design Automation tools. These tools are used for electrical circuit design, schematic capture, simulation, prototyping, and production. Currently, the gEDA project offers a mature suite of free software applications for electronics design, including schematic capture, attribute management, bill of materials (BOM) generation, netlisting into over 20 netlist formats, analog and digital simulation, and printed circuit board (PCB) layout.\n\nThe gEDA project was started because of the lack of free EDA tools for POSIX systems with the primary purpose of advancing the state of free hardware or open source hardware. The suite is mainly being developed on the GNU/Linux platform with some development effort going into making sure the tools run on other platforms as well.\n\n(Source: gEDA homepage)\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Installing geda-gafAUR will give you the schematic editor and attribute editor. It may also be necessary to install ttf-dejavu and ttf-liberation to get the correct font scaling.\n\nInstalling pcbAUR will give you the PCB editor.\n\n"
    },
    {
      "title": "Create schematic symbol",
      "level": 3,
      "content": "You can create new as you are creating schematics themselves. Open an empty file\n\n```\n$ gschem mysymbol.sym\n```\n\nand add pins with ap and attributes with aa. Check the geda wiki for details. After you are done, do not forget to translate your symbol to absolute zero with et. If you do not, your symbol will probably be outside of your viewport once you are going to place it in your schematic.\n\nSave the symbol with fs and check it with\n\n```\n$ gsymcheck -vv mysymbol.sym\n```\n\n"
    },
    {
      "title": "Schematic search path",
      "level": 4,
      "content": "Do not forget to place your symbol within the search path of gschem. It may also be helpful to extend this path to a folder in your own project by creating a file named\n\n```\ngafrc\n```\n\nin the project folder with the following content\n\n```\n(component-library \"./symbols\")\n```\n\nand then copy all symbols required by the project into a subfolder called \"symbols\".\n\n"
    },
    {
      "title": "Create schematic",
      "level": 3,
      "content": "Run schematic editor:\n\n```\n$ gschem\n```\n\nSee also:\n\nFAQ page\n\n"
    },
    {
      "title": "Create and route PCB",
      "level": 3,
      "content": "Once you have reached a point of your schematic where you want to start routing the PCB (you can do this in an iterative fashion), it is time to create a gsch2pcb project. Add the following lines to a newly created file, called firstpcb.prj:\n\n```\nschematics firstpcb.sch\nempty-footprint nofootprint\noutput-name firstpcb\n```\n\nThis project will read from firstpcb.sch, ignore any parts having a footprint called 'nofootprint' and the output files will start be:\n\n- The PCB: firstpcb.pcb\n- The netlist: firstpcb.net\n- Pin name commands: firstpcb.cmd\n- ...\n\nIf you opted for a local symbols directory, you should include it here. Also you probably want a local footprint directory, too. So add these lines to the prj file:\n\n```\nelements-dir footprints\nelements-dir symbols\n```\n\nNow execute gsch2pcb with this project file:\n\n```\n$ gsch2pcb -f firstpcb.prj\n```\n\ngsch2pcb will tell you what to do next or if there were any errors.\n\n"
    }
  ]
}