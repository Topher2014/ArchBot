{
  "title": "FluidSynth",
  "url": "https://wiki.archlinux.org/title/FluidSynth",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "FluidSynth is a real-time software synthesizer based on the SoundFont 2 specifications. It is optionally used by gst-plugins-bad.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the fluidsynth package.\n\nA SoundFont is also needed. See MIDI#List of SoundFonts for a list of SoundFonts.\n\nRemember to either modify the default SOUND_FONT or redirect that location to a shared sound font with a symlink.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "There are two ways to use FluidSynth. Either as a MIDI player OR as a daemon which provides an ALSA MIDI input and outputs synthesized audio via PipeWire , PulseAudio , JACK, ALSA , etc.\n\n"
    },
    {
      "title": "Standalone mode",
      "level": 3,
      "content": "You can simply use fluidsynth to play MIDI files:\n\n```\n$ fluidsynth -a alsa -m alsa_seq -l -i /usr/share/soundfonts/FluidR3_GM.sf2 example.mid\n```\n\nassuming than you installed soundfont-fluid.\n\nThere are many other options to FluidSynth; see fluidsynth(1) or use -h to get help.\n\nOne may wish to use PipeWire or PulseAudio instead of alsa as the argument to the -a option.\n\n```\nln -s FluidR3_GM.sf2 /usr/share/soundfonts/default.sf2\n```\n\n"
    },
    {
      "title": "Daemon mode",
      "level": 3,
      "content": "$ fluidsynth --help | grep -A2 audio-driver enumerates valid output devices, E.G. alsa, file, jack, oss, pipewire, portaudio, pulseaudio, sdl3\n\n"
    },
    {
      "title": "Common Configuration",
      "level": 4,
      "content": "/etc/conf.d/fluidsynth - System wide defaults, such as a default SOUND_FONT, audio rate, output device.\n\n~/.config/fluidsynth - Per user over-rides for the above, it's safe to copy the template from the system wide configuration and customize.\n\n"
    },
    {
      "title": "PipeWire / PulseAudio / JACK",
      "level": 4,
      "content": "Software defined audio running as the desktop user. (NOT root!) Likely what's in use on your system.\n\nConfigure the system wide or user specific options, to include the audio-driver, midi-driver, and sample-rate respectively:\n\nOTHER_OPTS='-a pipewire -m alsa_seq -r 48000'\n\nAdditional arguments might be required:\n\n- --audio-bufsize=128 documentation suggests the default might be 64, my system required 128 to work reliably\n- --gain=1.0 A float value to adjust the volume (in case you don't want to use PipeWire / PulseAudio / etc to do that)\n- --audio-bufcount=???\n- fluidsynth --help Any other options\n\nStart and enable the service for all users # systemctl --global enable fluidsynth.service ; systemctl --global start fluidsynth.service OR just the current logged in (not root) user # systemctl --user enable fluidsynth.service ; systemctl --user start fluidsynth.service\n\n"
    },
    {
      "title": "ALSA / OSS",
      "level": 4,
      "content": "ALSA or OSS should offer the lowest latency, however multiple audio clients (E.G. any other audio application, PipeWire , PulseAudio , JACK, etc) require hardware mixing or alsa 'dmix' as the first audio client (to provide software mixing in ALSA). Additionally the rest of the audio stack on a modern system will already be routed (and volume mixed) via PipeWire (usually) or PulseAudio (on new / updated installs likely a PipeWire compatibility interface).\n\nIf you want fluidsynth to run as an ALSA sequencer client, edit /etc/conf.d/fluidsynth and add your SoundFont along with any other changes you would like to make. For e.g., Fluid:\n\n```\nSOUND_FONT=/usr/share/soundfonts/FluidR3_GM.sf2\nOTHER_OPTS='-a alsa -m alsa_seq -r 48000'\n```\n\nAfter that, you can systemctl start/enable fluidsynth.service.\n\n"
    },
    {
      "title": "Command line test",
      "level": 4,
      "content": "The following will give you an output software MIDI port (in addition of hardware MIDI ports on your system, if any):\n\n```\n$ aconnect -o\n```\n\n```\nclient 128: 'FLUID Synth (5117)' [type=user]\n   0 'Synth input port (5117:0)'\n```\n\nAn example of usage for this is aplaymidi:\n\n```\n$ aplaymidi -p128:0 example.mid\n```\n\n"
    },
    {
      "title": "SDL_Mixer",
      "level": 3,
      "content": "To use fluidsynth with programs that use SDL_Mixer, you need to specify the soundfont as:\n\n```\n$ SDL_SOUNDFONTS=/usr/share/soundfonts/FluidR3_GM.sf2 ./program\n```\n\n"
    },
    {
      "title": "Convert MIDI to MP3/OGG",
      "level": 3,
      "content": "Requires soundfont-fluid or any other SoundFont of your choice.\n\n/usr/share/soundfonts is the default location of FluidR3_GM\n\nSimple command lines to convert midi to mp3:\n\n```\n$ fluidsynth -l -T raw -F - /usr/share/soundfonts/FluidR3_GM.sf2 example.mid | twolame -b 256 -r - example.mp3\n```\n\nRequires twolame.\n\nSimple command lines to convert midi to ogg:\n\n```\n$ fluidsynth -nli -r 48000 -o synth.cpu-cores=2 -T oga -F example.ogg /usr/share/soundfonts/FluidR3_GM.sf2 example.MID\n```\n\nHere is a little script to convert multiple midi files to ogg in parallel:\n\n```\n#!/bin/bash\nmaxjobs=$(grep processor /proc/cpuinfo | wc -l)\nmidi2ogg() {\n\tname=$(echo $@ | sed -r s/[.][mM][iI][dD][iI]?$//g | sed s/^[.][/]//g)\n\tfor arg; do \n\tfluidsynth -nli -r 48000 -o synth.cpu-cores=$maxjobs -F \"/dev/shm/$name.raw\" /usr/share/soundfonts/FluidR3_GM.sf2 \"$@\"\n\toggenc -r -B 16 -C 2 -R 48000 \"/dev/shm/$name.raw\" -o \"$name.ogg\"\n\trm \"/dev/shm/$name.raw\"\n\t## Uncomment for replaygain tagging\n\t#vorbisgain -f \"$name.ogg\" \n\tdone\n}\nexport -f midi2ogg\nfind . -regex '.*[.][mM][iI][dD][iI]?$' -print0 | xargs -0 -n 1 -P $maxjobs bash -c 'midi2ogg \"$@\"' --\n```\n\n"
    },
    {
      "title": "Conflicting with PulseAudio",
      "level": 3,
      "content": "If your fluidsynth application is set to use alsa as driver, the sound card will be accessed directly and PulseAudio and applications using PulseAudio will not be able to work properly. You can modify the configuration file /etc/conf.d/fluidsynth and change the driver to pulseaudio, then restart fluidsynth and PulseAudio:\n\n```\n/etc/conf.d/fluidsynth\n```\n\n```\nOTHER_OPTS='-a pulseaudio -m alsa_seq -r 48000'\n```\n\n"
    },
    {
      "title": "No MIDI sound / Not the lowest/first MIDI device",
      "level": 3,
      "content": "```\n$ aconnect -o\n```\n\n```\nclient 14: 'Midi Through' [type=kernel]\n    0 'Midi Through Port-0'\nclient 128: 'FLUID Synth (5117)' [type=user]\n    0 'Synth input port (5117:0)'\n```\n\nWINE / Proton (wine + steam patches) and many other programs will grab the first MIDI device as their default output. While many have methods to configure a non-default / specific MIDI device, and while the snd_seq_dummy module can be useful for professionals who need to duplex MIDI output to multiple devices. Rather than configuring ports=0 (load it but offer nothing?)\n\nYou'll need a root terminal. Open a terminal emulator and $ sudo -i\n\nRemove the module right now.\n\n# rmmod snd_seq_dummy\n\nThen prevent it from being reloaded automatically.\n\n# echo \"blacklist snd_seq_dummy\" >> /etc/modprobe.d/blascklist_dummy_midi.conf\n\n"
    },
    {
      "title": "Stuck 'key' (constant sound)",
      "level": 3,
      "content": "If alsa / oss and running as a root service drop the --user argument\n\nsystemctl --user stop fluidsynth.service ; killall -9 fluidsynth ; systemctl --user start fluidsynth.service\n\n"
    }
  ]
}