{
  "title": "HTTP tunneling",
  "url": "https://wiki.archlinux.org/title/HTTP_tunneling",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "In networking, tunneling is using a protocol of higher level (in our case HTTP) to transport a lower level protocol (in our case TCP).\n\n"
    },
    {
      "title": "Using corkscrew and HTTP CONNECT",
      "level": 3,
      "content": "To open the connection to the server running the SSH daemon, we will use the HTTP CONNECT method which allows a client to connect to a server through an HTTP proxy by sending an HTTP CONNECT request to this proxy.\n\nFor this, we will use corkscrew, a tool for tunneling SSH through HTTP proxies available as corkscrew.\n\nOpening an SSH connection is pretty simple:\n\n```\n$ ssh user@server -o \"ProxyCommand corkscrew proxy_ip_or_domain_name proxy_port destination_ip_or_domain_name destination_port\"\n```\n\nbut that just opens a shell. What we want is a SOCKS tunnel, so we do this:\n\n```\n$ ssh -ND port user@server -o \"ProxyCommand corkscrew proxy_ip_or_domain_name proxy_port destination_ip_or_domain_name destination_port\"\n```\n\nwhich creates a SOCKS proxy on localhost:$port.\n\n"
    },
    {
      "title": "Tunneling Git",
      "level": 4,
      "content": "Restrictive corporate firewalls typically block the port that git uses. However, git can be made to tunnel through HTTP proxies using utilities such as corkscrew. When git sees the environment variable GIT_PROXY_COMMAND set, it will run the command in $GIT_PROXY_COMMAND and use the program's stdin and stdout, instead of a network socket.\n\nCreate a script:\n\n```\ncorkscrewtunnel.sh\n```\n\n```\n#!/bin/bash\ncorkscrew proxyhost proxyport \"$@\"\n```\n\nSet GIT_PROXY_COMMAND\n\n```\nexport GIT_PROXY_COMMAND=/path/to/corkscrewtunnel.sh\n```\n\nNow, git should be able to tunnel successfully through the HTTP proxy.\n\n"
    },
    {
      "title": "Using httptunnel",
      "level": 3,
      "content": "httptunnel, available as httptunnel, creates a bidirectional virtual data connection tunneled in HTTP requests. The HTTP requests can be sent via an HTTP proxy if so desired. This can be useful for users behind restrictive firewalls. If WWW access is allowed through a HTTP proxy, it is possible to use httptunnel and, say, telnet or PPP to connect to a computer outside the firewall.\n\nOne limitation of httptunnel is it explicitly can not handle HTTPS.[1]\n\nIf you already have a web server listening on port 80, you are probably going to want to create a virtual host and tell your web server to proxy request to the hts server. This is not covered here.\n\nIf you do not have any web server listening on port 80, you can do:\n\n- on the server:\n\n```\nhts --forward-port localhost:22 80\n```\n\n- on the client:\n\n```\nhtc --forward-port 8888 example.net:80\nssh -ND user@localhost -p 8888\n```\n\nYou can now use localhost:8888 as a SOCKS proxy.\n\n"
    },
    {
      "title": "Using proxytunnel",
      "level": 3,
      "content": "ProxyTunnel is:\n\nThe proxy connection is used to tunnel another protocol, for example SSH through a HTTPS connection. It can be installed with the proxytunnel package.\n\nAn example for using it with OpenSSH, to eventually connect to mybox.athome.nl, is having the following content:\n\n```\n$HOME/.ssh/config\n```\n\n```\nHost foobar\n\tProtocolKeepAlives 30\n\tProxyCommand /path/to/proxytunnel -p proxy.customer.com:8080 -u user -s password -d mybox.athome.nl:443\n```\n\n"
    },
    {
      "title": "Using openbsd-netcat",
      "level": 3,
      "content": "Install the openbsd-netcat package.\n\nTo open a connection using the OpenBSD netcat version:\n\n```\n$ ssh user@final_server -o \"ProxyCommand=nc -X connect -x some_proxy:proxy_port %h %p\"\n```\n\nThe OpenBSD netcat also supports SOCKS tunneling. See nc(1) ยง X for more on the -X option.\n\n"
    },
    {
      "title": "Using the tunnel",
      "level": 2,
      "content": "See Proxy server#Using a SOCKS proxy.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Background, and usage examples, for ProxyTunnel, by one of the authors.\n- Tunneling SSH over HTTPS with Apache 2.4 and virtual hosts using ProxyTunnel.\n\n"
    }
  ]
}