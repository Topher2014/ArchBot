{
  "title": "Diaspora",
  "url": "https://wiki.archlinux.org/title/Diaspora",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Mastodon\n\nDiaspora is the privacy aware, personally controlled, do-it-all, open source social network.\n\n"
    },
    {
      "title": "Prerequisites",
      "level": 2,
      "content": "- Since Diaspora can run on MySQL and PostgreSQL you need to decide which one you want to use. Install one of them and set it up.\n- Diaspora starts a so called appserver, on port 3000 by default, which serves the dynamic contents. You need a reverse proxy to handle the static content and that forwards requests it cannot handle to the appserver. Typical tools for that are Apache HTTP Server or Nginx.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install diaspora-mysqlAUR or diaspora-postgresqlAUR.\n\nNow edit /etc/webapps/diaspora/database.yml and fill out the needed values. Then edit /etc/webapps/diaspora/diaspora.toml and change at least the url setting to the URL your installation will be reachable under (the one served by your reverse proxy). You can change the port the appserver will listen on under the server section. By default Diaspora requires a SSL setup, you can disable that with the require_ssl setting.\n\nEnsure your database is running and then switch to the diaspora user:\n\n```\n$ su - diaspora\n```\n\nCreate the database and initialize the schema:\n\n```\n$ bin/bundle exec rake db:create db:migrate\n```\n\nIf the user you specified in the database.yml file cannot create databases leave the db:create out and create a database named diaspora_production by hand.\n\nYou can now switch back to your regular user and start diaspora.service.\n\nThe static content your reverse proxy needs to serve will be available under /usr/share/webapps/diaspora/public/.\n\n"
    },
    {
      "title": "Updating",
      "level": 2,
      "content": "Updating is very analogous. Obtain the newest version of the package and build it, just like in the installation instructions. Watch for .pacnew files and review the changes. Also read the changelog over at Diaspora. Then again ensure the database is running and switch to the diaspora user:\n\n```\n$ su - diaspora\n```\n\nAnd update the database schema:\n\n```\n$ RAILS_ENV=production bin/bundle exec rake db:migrate\n```\n\nExit and restart diaspora systemd service.\n\nIf you notice missing icons or layout issues after restarting the service, switch to the diaspora user again and run:\n\n```\n$ RAILS_ENV=production bin/bundle exec rake assets:precompile\n```\n\nOnce more, exit and restart diaspora systemd service.\n\n"
    },
    {
      "title": "Add yourself as an admin",
      "level": 2,
      "content": "Switch to the diaspora user and start the Rails console:\n\n```\n$ su - diaspora\n$ bin/bundle exec rails console production\n```\n\nThen run the following command, replacing user with your username (only lowercase characters):\n\n```\nRole.add_admin User.where(username: \"user\").first.person\n```\n\nYou can exit the Rails console by pressing Ctrl+d.\n\n"
    },
    {
      "title": "GDM login screen with Diaspora",
      "level": 3,
      "content": "GDM will insert the user diaspora in its login window because it currently considers the id range 500-1000 as normal users while Arch considers this range for system users as defined in /etc/login.defs. GDM does that probably to keep legacy normal users working. To exclude this user from the login window, add this 'Exclude' line in your /etc/gdm/custom.conf file:\n\n```\n[greeter]\nExclude=diaspora\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- https://github.com/diaspora/diaspora\n\n"
    }
  ]
}