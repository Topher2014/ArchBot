{
  "title": "Sudoers",
  "url": "https://wiki.archlinux.org/title/Sudoers",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Users and groups\n- su\n- doas\n\nSudo allows a system administrator to delegate authority to give certain users—or groups of users—the ability to run commands as root or another user while providing an audit trail of the commands and their arguments.\n\nSudo is an alternative to su for running commands as root. Unlike su, which launches a root shell that allows all further commands root access, sudo instead grants temporary privilege elevation to a single command. By enabling root privileges only when needed, sudo usage reduces the likelihood that a typo or a bug in an invoked command will ruin the system.\n\nSudo can also be used to run commands as other users; additionally, sudo logs all commands and failed access attempts to the journal for security auditing.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the sudo package.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "To begin using sudo as a non-privileged user, it must be properly configured. See #Configuration.\n\nTo use sudo, simply prefix a command and its arguments with sudo and a space:\n\n```\n$ sudo cmd\n```\n\nFor example, to use pacman:\n\n```\n$ sudo pacman -Syu\n```\n\nSee sudo(8) for more information.\n\n"
    },
    {
      "title": "Login shell",
      "level": 3,
      "content": "You cannot run every command as an other user simply by prepending sudo. In particular when using a redirection and command substitution, you must use a login shell, which can be easily accessed with sudo -iu user (one can omit -u user if the desired user is root).\n\nIn the following example command substitution would work in a full shell, but fails with prepending sudo:\n\n```\n$ sudo wpa_supplicant -B -i interface -c <(wpa_passphrase MYSSID passphrase)\n```\n\n```\nSuccessfully initialized wpa_supplicant\nFailed to open config file '/dev/fd/63', error: No such file or directory\nFailed to read or parse configuration '/dev/fd/63'\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Defaults skeleton",
      "level": 3,
      "content": "sudoers(5) § SUDOERS OPTIONS lists all the options that can be used with the Defaults command in the /etc/sudoers file.\n\nSee [1] for a list of options (parsed from the version 1.8.7 source code) in a format optimized for sudoers.\n\nSee sudoers(5) for more information, such as configuring the password timeout.\n\n"
    },
    {
      "title": "View current settings",
      "level": 3,
      "content": "Run sudo -ll to print out the current sudo configuration, or sudo -lU user for a specific user.\n\n"
    },
    {
      "title": "Using visudo",
      "level": 3,
      "content": "The configuration file for sudo is /etc/sudoers. It should always be edited with the visudo(8) command. visudo locks the sudoers file, saves edits to a temporary file, and checks it for syntax errors before copying it to /etc/sudoers.\n\nNote: **Always** \n\n- It is imperative that sudoers be free of syntax errors! Any error makes sudo unusable. Always edit it with visudo to prevent errors.\n- visudo(8) warns that configuring visudo to honor the user environment variables for their editor of choice may be a security hole, since it allows the user with visudo privileges to run arbitrary commands as root without logging simply by setting that variable to something else.\n\nThe default editor for visudo is vi. The sudo package is compiled with --with-env-editor and honors the use of the SUDO_EDITOR, VISUAL and EDITOR variables. EDITOR is not used when VISUAL is set.\n\nTo establish nano as the visudo editor for the duration of the current shell session, export EDITOR=nano; to use a different editor just once simply set the variable before calling visudo:\n\n```\n# EDITOR=nano visudo\n```\n\nAlternatively you may edit a copy of the /etc/sudoers file and check it using visudo -c /copy/of/sudoers. This might come in handy in case you want to circumvent locking the file with visudo.\n\nTo change the editor permanently, see Environment variables#Per user. To change the editor of choice permanently system-wide only for visudo, add the following to /etc/sudoers (assuming nano is your preferred editor):\n\n```\n# Set default EDITOR to restricted version of nano, and do not allow visudo to use EDITOR/VISUAL.\nDefaults      editor=/usr/bin/rnano, !env_editor\n```\n\n"
    },
    {
      "title": "Example entries",
      "level": 3,
      "content": "To allow a user to gain full root privileges when they precede a command with sudo, add the following line:\n\n```\nUSER_NAME   ALL=(ALL:ALL) ALL\n```\n\nTo allow a user to run all commands as any user but only on the machine with hostname HOST_NAME:\n\n```\nUSER_NAME   HOST_NAME=(ALL:ALL) ALL\n```\n\nTo allow members of group wheel sudo access:\n\n```\n%wheel      ALL=(ALL:ALL) ALL\n```\n\nTo disable asking for a password for user USER_NAME:\n\n```\nDefaults:USER_NAME      !authenticate\n```\n\nEnable explicitly defined commands only for user USER_NAME on host HOST_NAME:\n\n```\nUSER_NAME HOST_NAME=/usr/bin/halt,/usr/bin/poweroff,/usr/bin/reboot,/usr/bin/pacman -Syu\n```\n\nEnable explicitly defined commands only for user USER_NAME on host HOST_NAME without password:\n\n```\nUSER_NAME HOST_NAME= NOPASSWD: /usr/bin/halt,/usr/bin/poweroff,/usr/bin/reboot,/usr/bin/pacman -Syu\n```\n\nA detailed sudoers example is available at /usr/share/doc/sudo/examples/sudoers. Otherwise, see the sudoers(5) for detailed information.\n\n"
    },
    {
      "title": "Sudoers default file permissions",
      "level": 3,
      "content": "The owner and group for the sudoers file must both be 0. The file permissions must be set to 0440. These permissions are set by default, but if you accidentally change them, they should be changed back immediately or sudo will fail.\n\n```\n# chown -c root:root /etc/sudoers\n# chmod -c 0440 /etc/sudoers\n```\n\n"
    },
    {
      "title": "Disable password prompt timeout",
      "level": 3,
      "content": "A common annoyance is a long-running process that runs on a background terminal somewhere that runs with normal permissions and elevates only when needed. This leads to a sudo password prompt which goes unnoticed and times out, at which point the process dies and the work done is lost or, at best, cached. Common advice is to enable passwordless sudo, or extend the timeout of sudo remembering a password. Both of these have negative security implications. The prompt timeout can also be disabled and since that does not serve any reasonable security purpose it should be the solution here:\n\n```\nDefaults passwd_timeout=0\n```\n\n"
    },
    {
      "title": "Bash completion",
      "level": 3,
      "content": "Note: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\nFor fully-fledged bash completion to be available for the sudo command, install package bash-completion. If, for some reason, this package can not be installed, an alternative offering reduced auto completion features for sudo command is to add the following to your .bashrc:\n\n```\ncomplete -cf sudo\n```\n\n"
    },
    {
      "title": "Passing aliases",
      "level": 3,
      "content": "The following is only relevant if the bash completion is not available (either full or reduced as described above): Aliases in Zsh and Bash are normally only expanded for the first word in a command. This means that your aliases will not normally get expanded when running the sudo command. One way to make the next word expand is to make an alias for sudo ending with a space. Add the following to your shell's configuration file:\n\n```\nalias sudo='sudo '\n```\n\nzshmisc(1) § ALIASING describes how this works:\n\nAs well as bash(1) § ALIASES:\n\n"
    },
    {
      "title": "Add terminal bell to the password prompt",
      "level": 3,
      "content": "To draw attention to a sudo prompt in a background terminal, users can simply make it echo a bell character:\n\n```\nDefaults passprompt=\"^G[sudo] password for %p: \"\n```\n\nNote the ^G is a literal bell character. E.g. in vim, insert using the sequence Ctrl+v Ctrl+g. If Ctrl+v is mapped, e.g. for pasting, one can usually use Ctrl+q instead. In nano, Alt+v Ctrl+g.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nAnother option is to set the SUDO_PROMPT environment variable. For example, add the following to your shell configuration file:\n\n```\nexport SUDO_PROMPT=$'\\a[sudo] password for %p: '\n```\n\n"
    },
    {
      "title": "Disable per-terminal sudo",
      "level": 3,
      "content": "If you are annoyed by sudo's defaults that require you to enter your password every time you open a new terminal, set timestamp_type to global:\n\n```\nDefaults timestamp_type=global\n```\n\n"
    },
    {
      "title": "Reduce the number of times you have to type a password",
      "level": 3,
      "content": "If you are annoyed that you have to re-enter your password every 5 minutes (default), you can change this by setting a longer value for timestamp_timeout (in minutes):\n\n```\nDefaults timestamp_timeout=10\n```\n\nIf you are using sudo commands in a long script and you do not want to wait for user input when the timeout expires, it is possible to refresh the timeout by separately running sudo -v in a loop (whereas sudo -K revokes it immediately).\n\n"
    },
    {
      "title": "Environment variables",
      "level": 3,
      "content": "If you have a lot of environment variables, or you export your proxy settings via export http_proxy=\"...\", when using sudo these variables do not get passed to the root account unless you run sudo with the -E/--preserve-env option.\n\n```\n$ sudo -E pacman -Syu\n```\n\nThe recommended way of preserving environment variables is to append them to env_keep:\n\n```\n/etc/sudoers\n```\n\n```\nDefaults env_keep += \"ftp_proxy http_proxy https_proxy no_proxy\"\n```\n\n"
    },
    {
      "title": "Root password",
      "level": 3,
      "content": "Users can configure sudo to ask for the root password instead of the user password by adding targetpw (target user, defaults to root) or rootpw to the Defaults line in /etc/sudoers:\n\n```\nDefaults targetpw\n```\n\nTo prevent exposing your root password to users, you can restrict this to a specific group:\n\n```\nDefaults:%wheel targetpw\n%wheel ALL=(ALL) ALL\n```\n\n"
    },
    {
      "title": "Disable root login",
      "level": 3,
      "content": "Users may wish to disable the root login. Without root, attackers must first guess a user name configured as a sudoer as well as the user password. See for example OpenSSH#Deny.\n\n- Be careful, you may lock yourself out by disabling root login. Sudo is not automatically installed and its default configuration allows neither passwordless root access nor root access with your own password. Ensure a user is properly configured as a sudoer before disabling the root account!\n- If you have changed your sudoers file to use rootpw as default, then do not disable root login with any of the following commands!\n- If you are already locked out, see Password recovery for help.\n\nThe account can be locked via passwd:\n\n```\n# passwd -l root\n```\n\nA similar command unlocks root.\n\n```\n$ sudo passwd -u root\n```\n\nAlternatively, edit /etc/shadow and replace the root's encrypted password with !*:\n\n```\nroot:!*:12345::::::\n```\n\nTo enable root login again:\n\n```\n$ sudo passwd root\n```\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nIn case of system emergency, the recovery prompt is going to ask you for a root password, making it impossible to log into recovery shell. To automatically unlock the root account in case of emergency add SYSTEMD_SULOGIN_FORCE=1 environment variable to rescue.service using a drop-in file:\n\n```\n/etc/systemd/system/rescue.service.d/SYSTEMD_SULOGIN_FORCE.conf\n```\n\n```\n[Service]\nEnvironment=SYSTEMD_SULOGIN_FORCE=1\n```\n\n"
    },
    {
      "title": "kdesu",
      "level": 4,
      "content": "kdesu may be used under KDE to launch GUI applications with root privileges. It is possible that by default kdesu will try to use su even if the root account is disabled. Fortunately one can tell kdesu to use sudo instead of su. Create/edit the file ~/.config/kdesurc:\n\n```\n[super-user-command]\nsuper-user-command=sudo\n```\n\nor use the following command:\n\n```\n$ kwriteconfig6 --file kdesurc --group super-user-command --key super-user-command sudo\n```\n\n"
    },
    {
      "title": "Harden with sudo example",
      "level": 3,
      "content": "Let us say you create 3 users: admin, devel, and archie. The user \"admin\" is used for journalctl, systemctl, mount, kill, and iptables; \"devel\" is used for installing packages, and editing configuration files; and \"archie\" is the user you log in with. To let \"archie\" reboot, shutdown, and use netctl we would do the following:\n\nEdit /etc/pam.d/su and /etc/pam.d/su-l. Require user be in the wheel group, but do not put anyone in it.\n\n```\n#%PAM-1.0\nauth            sufficient      pam_rootok.so\n# Uncomment the following line to implicitly trust users in the \"wheel\" group.\n#auth           sufficient      pam_wheel.so trust use_uid\n# Uncomment the following line to require a user to be in the \"wheel\" group.\nauth            required        pam_wheel.so use_uid\nauth            required        pam_unix.so\naccount         required        pam_unix.so\nsession         required        pam_unix.so\n```\n\nLimit SSH login to the 'ssh' group. Only \"archie\" will be part of this group.\n\n```\n# groupadd -r ssh\n# gpasswd -a archie ssh\n# echo 'AllowGroups ssh' >> /etc/ssh/sshd_config\n```\n\nRestart sshd.service.\n\nAdd users to other groups.\n\n```\n# for g in power network ;do ;gpasswd -a archie $g ;done\n# for g in network power storage ;do ;gpasswd -a admin $g ;done\n```\n\nSet permissions on configs so devel can edit them.\n\n```\n# chown -R devel:root /etc/{http,openvpn,cups,zsh,vim,screenrc}\n```\n\n```\nCmnd_Alias  POWER       =   /usr/bin/shutdown -h now, /usr/bin/halt, /usr/bin/poweroff, /usr/bin/reboot\nCmnd_Alias  STORAGE     =   /usr/bin/mount -o nosuid\\,nodev\\,noexec, /usr/bin/umount\nCmnd_Alias  SYSTEMD     =   /usr/bin/journalctl, /usr/bin/systemctl\nCmnd_Alias  KILL        =   /usr/bin/kill, /usr/bin/killall\nCmnd_Alias  PKGMAN      =   /usr/bin/pacman\nCmnd_Alias  NETWORK     =   /usr/bin/netctl\nCmnd_Alias  FIREWALL    =   /usr/bin/iptables, /usr/bin/ip6tables\nCmnd_Alias  SHELL       =   /usr/bin/zsh, /usr/bin/bash\n%power      ALL         =   (root)  NOPASSWD: POWER\n%network    ALL         =   (root)  NETWORK\n%storage    ALL         =   (root)  STORAGE\nroot        ALL         =   (ALL)   ALL\nadmin       ALL         =   (root)  SYSTEMD, KILL, FIREWALL\ndevel\t    ALL         =   (root)  PKGMAN\narchie\t    ALL         =   (devel) SHELL, (admin) SHELL\n```\n\nWith this setup, you will almost never need to login as the root user.\n\n\"archie\" can connect to their home Wi-Fi.\n\n```\n$ sudo netctl start home\n$ sudo poweroff\n```\n\n\"archie\" can not use netctl as any other user.\n\n```\n$ sudo -u admin -- netctl start home\n```\n\nWhen \"archie\" needs to use journalctl or kill run away process they can switch to that user.\n\n```\n$ sudo -i -u devel\n$ sudo -i -u admin\n```\n\nBut \"archie\" cannot switch to the root user.\n\n```\n$ sudo -i -u root\n```\n\nIf \"archie\" want to start a gnu-screen session as admin they can do it like this:\n\n```\n$ sudo -i -u admin\n[admin]$ chown admin:tty `echo $TTY`\n[admin]$ screen\n```\n\n"
    },
    {
      "title": "Configure sudo using drop-in files in /etc/sudoers.d",
      "level": 3,
      "content": "sudo parses files contained in the directory /etc/sudoers.d/. This means that instead of editing /etc/sudoers, you can change settings in standalone files and drop them in that directory. This has two advantages:\n\n- There is no need to edit a sudoers.pacnew file;\n- If there is a problem with a new entry, you can remove the offending file instead of editing /etc/sudoers (but see the warning below).\n\nThe format for entries in these drop-in files is the same as for /etc/sudoers itself. To edit them directly, use visudo -f /etc/sudoers.d/somefile. See sudoers(5) § Including other files from within sudoers for details.\n\nThe files in /etc/sudoers.d/ directory are parsed in lexicographical order, file names containing . or ~ are skipped. To avoid sorting problems, the file names should begin with two digits, e.g. 01_foo.\n\n"
    },
    {
      "title": "Editing files",
      "level": 3,
      "content": "sudo provides the sudoedit command (equivalent to sudo -e). This is useful for editing files which can be edited by root only while still running the editor as a normal user, and using that user’s configuration.\n\nTo edit a file, set SUDO_EDITOR to the name of the editor and pass the file name to sudoedit. For example:\n\n```\n$ SUDO_EDITOR=vim sudoedit /etc/file\n```\n\nSee #Using visudo and sudo(8) § e for ways to set the editor, but beware of possible security issues.\n\nIf multiple names are passed to sudo, all files are opened in the editor in a single invocation. A feature useful for merging files:\n\n```\n$ SUDO_EDITOR=vimdiff sudoedit /etc/file /etc/file.pacnew\n```\n\n"
    },
    {
      "title": "Enable insults",
      "level": 3,
      "content": "Users can enable the insults easter egg in sudo by adding the following line in the sudoers file with visudo.\n\n```\n/etc/sudoers\n```\n\n```\nDefaults insults\n```\n\nUpon entering an incorrect password, this will replace Sorry, try again. message with humorous insults.\n\n"
    },
    {
      "title": "Enable password input feedback",
      "level": 3,
      "content": "By default, there is no visual feedback when you input a password. That is done on purpose for extra security. However, if you wish to have visual input, you can enable it by adding this line:\n\n```\n/etc/sudoers\n```\n\n```\nDefaults pwfeedback\n```\n\n"
    },
    {
      "title": "Colored password prompt",
      "level": 3,
      "content": "To customize the password prompt with colors and/or bold fonts, set the SUDO_PROMPT environment variable in your shell initialization file and use tput(1).\n\nFor example, to set the password prompt to display Password: in bold red, use this:\n\n```\nexport SUDO_PROMPT=\"$(tput setaf 1 bold)Password:$(tput sgr0) \"\n```\n\nOr use different colors with the default message like so:\n\n```\nexport SUDO_PROMPT=\"$(tput setab 1 setaf 7 bold)[sudo]$(tput sgr0) $(tput setaf 6)password for$(tput sgr0) $(tput setaf 5)%p$(tput sgr0): \"\n```\n\nSee more on Color output in console and Bash/Prompt customization\n\n"
    },
    {
      "title": "Using U2F",
      "level": 3,
      "content": "U2F is great to use with sudo, as it can effectively eliminate the risk of shoulder surfing in public areas while still giving you conscious control to approve the prompt with a simple physical touch.\n\nSee Universal 2nd Factor#Passwordless sudo.\n\n"
    },
    {
      "title": "Write to protected files",
      "level": 3,
      "content": "When using sudo, you may want to write to protected files. Using tee allows such a separation:\n\n```\n$ input stream | sudo tee --option protected_file_1 protected_file_2...\n```\n\nwhen a simple >/>> would not have worked.\n\n"
    },
    {
      "title": "In Vim",
      "level": 4,
      "content": "A similar concept is useful when you forgot to start Vim with sudo when editing a file owned by an other user. In this case you can do the following inside Vim to save the file:\n\n```\n:w !sudo tee %\n```\n\nYou can add this to your ~/.vimrc to make this trick easy-to-use with :w!! mapping in command mode:\n\n```\n~/.vimrc\n```\n\n```\n\" Allow saving of files as sudo when I forgot to start vim using sudo\n cmap w!! w !sudo tee > /dev/null %\n```\n\nThe > /dev/null part explicitly throws away the standard output since we do not need to pass anything to another piped command.\n\nMore detailed explanation of how and why this works can be found in How does the vim “write with sudo” trick work? article on StackOverflow.\n\n"
    },
    {
      "title": "SSH problem without TTY",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with #Configuration.** This article or section is a candidate for merging with #Configuration.\n\nThis article or section is a candidate for merging with #Configuration.\n\nSSH does not allocate a tty by default when running a remote command. Without an allocated tty, sudo cannot prevent the password from being displayed. You can use ssh's -t option to force it to allocate a tty.\n\nThe Defaults option requiretty only allows the user to run sudo if they have a tty.\n\n```\n# Disable \"ssh hostname sudo <cmd>\", because it will show the password in clear text. You have to run \"ssh -t hostname sudo <cmd>\".\n#\n#Defaults    requiretty\n```\n\n"
    },
    {
      "title": "Permissive umask",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with #Configuration.** This article or section is a candidate for merging with #Configuration.\n\nThis article or section is a candidate for merging with #Configuration.\n\nSudo will union the user's umask value with its own umask (which defaults to 0022). This prevents sudo from creating files with more open permissions than the user's umask allows. While this is a sane default if no custom umask is in use, this can lead to situations where a utility run by sudo may create files with different permissions than if run by root directly. If errors arise from this, sudo provides a means to fix the umask, even if the desired umask is more permissive than the umask that the user has specified. Adding this (using visudo) will override sudo's default behavior:\n\n```\nDefaults umask = 0022\nDefaults umask_override\n```\n\nThis sets sudo's umask to root's default umask (0022) and overrides the default behavior, always using the indicated umask regardless of what umask the user as set.\n\n"
    }
  ]
}