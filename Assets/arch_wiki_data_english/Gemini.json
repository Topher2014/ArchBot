{
  "title": "Gemini",
  "url": "https://wiki.archlinux.org/title/Gemini",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Gemini is a new, collaboratively designed internet protocol, which explores the space inbetween gopher and the web, striving to address (perceived) limitations of one while avoiding the (undeniable) pitfalls of the other.\n\n"
    },
    {
      "title": "agate server",
      "level": 2,
      "content": "agate is a simple server for the Gemini hypertext protocol, written in Rust. Agate has very few features, and can only serve static files. It uses async I/O, and should be quite efficient even when running on low-end hardware and serving many concurrent requests.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "Install the agateAUR package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 3,
      "content": "Generate a self-signed TLS certificate and private key. For example, if you have OpenSSL 1.1 installed, you can use a command like the following. (Replace the hostname example.com with the address of your Gemini server.)\n\n```\n$ openssl req -x509 -newkey rsa:4096 -keyout key.rsa -out cert.pem \\\n     -days 3650 -nodes -subj \"/CN=example.com\"\n```\n\nRun the server. You can use the following arguments to specify the locations of the content directory, certificate and key files, IP address and port to listen on, host name to expect in request URLs, and default language code(s) to include in the MIME type for for text/gemini files: (Again replace the hostname example.com with the address of your Gemini server.)\n\n```\n$ agate --content path/to/content/ \\\n       --key key.rsa \\\n       --cert cert.pem \\\n       --addr [::]:1965 \\\n       --addr 0.0.0.0:1965 \\\n       --hostname example.com \\\n       --lang en-US\n```\n\n"
    },
    {
      "title": "Terminal clients",
      "level": 3,
      "content": "- amfora (Go), a \"fancy\" terminal client.\n- asuka-gitAUR (Rust), an NCurses-based terminal client.\n- av-98AUR (Python), a terminal client derived from the popular VF-1 Gopher client.\n- bombadillo-gitAUR (Go), a combined Gopher and Gemini terminal client with vim-inspired key mappings.\n- Elpher (Emacs), a combined Gopher and Gemini client for the popular text editor / operating system.\n\n"
    },
    {
      "title": "Graphical clients",
      "level": 3,
      "content": "- castorAUR (Rust, GTK), one of the earliest GUI clients, supporting Gemini, Gopher and finger.\n- kristallAUR (C++, Qt), a combined Gopher and Gemini GUI client.\n- lagrangeAUR (C, SDL), a beautiful tabbed GUI client with prebuilt binaries for Windows and MacOS.\n\n"
    },
    {
      "title": "Web proxies",
      "level": 2,
      "content": "You can use one of the web proxies below to explore Geminispace from your web browser.\n\n- Mozz.us portal\n- geminize (Firefox extension)\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Project Gemini\n- Awesome Gemini\n- Gemini clients and servers and software in general\n\n"
    }
  ]
}