{
  "title": "GNUnet",
  "url": "https://wiki.archlinux.org/title/GNUnet",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Tor\n- I2P\n- Freenet\n\nGNUnet is a framework for secure and anonymous peer-to-peer networking that does not use any centralized or otherwise trusted services. Currently, the framework offers censorship-resistant file-sharing, messaging, VPN, GNS (a decentralized version of DNS), and much more.\n\nSee also https://gnunet.org/en/use.html and Wikipedia:GNUnet.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install one of the following:\n\n- gnunetAUR Latest version\n- gnunet-gitAUR Latest commit to master\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The default GNUnet configuration is a multi-user configuration. This means that the system services are run by the gnunet system user, while users that belong to the gnunet group are allowed to interface with the daemon – to search and download a file for example.\n\nBefore using GNUnet you must therefore make sure to add your user to the gnunet group to gain the necessary permissions.\n\nThe default configuration should work out of the box in most cases. For changing the system configuration please refer to /etc/gnunet.conf, while for changing the current user configuration please refer to ~/.config/gnunet.conf.\n\nSee Configuration Handbook in the manual for further insight. See also #Launching the daemon as current user in a multi-user setup.\n\n"
    },
    {
      "title": "Entering the GNUnet network",
      "level": 3,
      "content": "Start and possibly enable the gnunet system service. Some operations will require the gnunet user service to be started as well.\n\n"
    },
    {
      "title": "Checking the network",
      "level": 3,
      "content": "You can check the current state of the network by launching the gnunet-peerinfo command as normal user.\n\n```\n$ gnunet-peerinfo\n```\n\nTo know your peer identity launch:\n\n```\n$ gnunet-peerinfo -s\n```\n\nTo list the peers you are directly connected with (these are called \"neighbours\"), launch:\n\n```\n$ gnunet-core\n```\n\n"
    },
    {
      "title": "File sharing",
      "level": 3,
      "content": "By default the file sharing service runs per user, which means that both the system and user gnunet services need to be started. If you want to change this option and run the file sharing per machine, edit /etc/gnunet.conf accordingly:\n\n```\n[fs]\n...\nRUN_PER_USER = NO\n...\nUNIXPATH = $GNUNET_RUNTIME_DIR/gnunet-service-fs.sock\n...\n```\n\n"
    },
    {
      "title": "Searching for a file",
      "level": 4,
      "content": "Use gnunet-search to search for a file using keywords (these are not necessarily related to the file's name). For example, to search for files that have been indexed under the “commons” keyword, launch:\n\n```\n$ gnunet-search --timeout='10 s' 'commons'\n```\n\nWithout specifying a timeout (10 seconds in the example above) gnunet-search runs forever, waiting for the user to press CTRL-C.\n\nThe gnunet-search command has a --printf option for manipulating the printed output, somewhat similar to the -printf option of the find utility. Please type man gnunet-search for more details.\n\nUse the -o option of gnunet-search to save search results as a \"GNUnet directories\" (.gnd files) – you might also want to suppress the printed output in this case (the -s option).\n\nFor instance, to search for three seconds and save the results yielded by the “commons” keyword into a file named three-seconds-commons.gnd, launch:\n\n```\n$ gnunet-search -s -t 3s -o three-seconds-commons.gnd 'commons'\n```\n\nIf later you want to inspect the content of three-seconds-commons.gnd you can launch\n\n```\n$ gnunet-directory three-seconds-commons.gnd\n```\n\n"
    },
    {
      "title": "Downloading",
      "level": 4,
      "content": "The output of gnunet-search is by default a list of gnunet-download commands that you can directly copy and launch as normal user.\n\nFor example, using the output generated by gnunet-search 'commons',\n\n```\n$ gnunet-search 'commons'\n```\n\n```\n#1:\ngnunet-download -o \"Liotard (2017)_ Fablab - a new space for commons based peer production.pdf\" gnunet://fs/chk/C6369DRQ3S8RYK1FD5VDE666W2HVEJ5G5GJRX29BH6ZM08CBRWS7FY9326RBJ4G0N8V1RJ2N802KBYZT7RJT2EDK1J9JR2DXK5MTVM0.4SXJCK9NT5XGCZ0YAJ0ETXJJGY3P2SMNZ0Q94N775YEX9SXS2RW5FWRFK4GMBTP668Z3R8QZZ4WSHW1KG1AVQ5VFC1VF5T3WF57GT58.336423\n\n#2:\ngnunet-download -o \"Rose, Carol (1986)_ The Comedy of the Commons_ Commerce, Custom, and inherently Public Property.pdf\" gnunet://fs/chk/TQK3A2C279EJQ50B1TQWFNTPMGQZJJ4JXYTF2D88D03H038TB7SVVSRBT74FMYPNZ47YZSV096PVVZH0TQ3B8KBVBV2H8GN9VAASTJR.CQ7M7843MGPZCV8M26NKH6EB5MBGZAXRWCF39YS668WM6F22D214GSXNTJ4RYGE7XF68VPZM4C19XR48TT4J8WH8S2E00C96Q8K6790.1593230\n\n#3:\ngnunet-download -o \"Hardin, Garett (1968)_ Tragedy of the Commons.pdf\" gnunet://fs/chk/Y1FD7D123CEGWDW544YDEP15YA5E7ZD2XRSJBNP0847A5JXMMZEZ0XACGRG42BBBTGKZ0ZCBW0A9T6196Z5N26HA6SP1T8GDAT5H5SG.RN38G25DMYG3TBQJEGWDZT2B84N1JYYJZ8VRJ8HG2G1A4EFD4GH5TZXB0RXV7QEMZBSKWCCEF736FXNH6C5BYKG9DSTV99ETFGC93R0.1520328\n\n...\n```\n\nyou can launch,\n\n```\n$ gnunet-download -o \"Hardin, Garett (1968)_ Tragedy of the Commons.pdf\" gnunet://fs/chk/Y1FD7D123CEGWDW544YDEP15YA5E7ZD2XRSJBNP0847A5JXMMZEZ0XACGRG42BBBTGKZ0ZCBW0A9T6196Z5N26HA6SP1T8GDAT5H5SG.RN38G25DMYG3TBQJEGWDZT2B84N1JYYJZ8VRJ8HG2G1A4EFD4GH5TZXB0RXV7QEMZBSKWCCEF736FXNH6C5BYKG9DSTV99ETFGC93R0.1520328\n```\n\nwhich will download Hardin, Garett (1968)_ Tragedy of the Commons.pdf in the current directory.\n\nA module, named gnunet-fuseAUR, has been developed to mount remote directories from the GNUnet network. With gnunet-fuse, directories that have been published on the GNUnet network can be mounted as read-only file systems and accessed using normal file operations. In contrast to downloading the directory recursively via gnunet-download, this has the advantage that files are downloaded on-demand. Only those files (or directories) that you access will be downloaded. For more information please install the module and type man gnunet-fuse.\n\n"
    },
    {
      "title": "Uploading",
      "level": 4,
      "content": "Publishing a file on the GNUnet file-sharing network involves choosing keywords that can be later used by other people to search for the file.\n\nKeywords are not strictly required, but they are recommended. This is because GNUnet does not allow searching by filename, but by keywords. The libextractor library, which is a dependency of GNUnet, can automatically extract keywords from a file, but you may wish to enter keywords of your own.\n\nIn the following example, we use the keywords \"commons\" and \"state\" to publish a file named ostrom.pdf.\n\n```\n$ gnunet-publish -k 'commons' -k 'state' ostrom.pdf\n```\n\n```\nPublishing `/srv/filesharing/gnunet/ostrom.pdf' done.\nURI is `gnunet://fs/chk/M57S...\n```\n\nGNUnet users can now find the file by using the gnunet-search command.\n\n```\n$ gnunet-search 'commons'\n```\n\n```\n#1:\ngnunet-download -o \"ostrom.pdf\" gnunet://fs/chk/M57S...\n```\n\nTo list all the files that are currently published launch gnunet-fs -i. If later you want to stop sharing a file you can use gnunet-unindex filename (in our example, gnunet-unindex 'ostrom.pdf').\n\nOnce a file is published it is not possible to retrieve the keywords whereby the file was indexed (i.e., reverse search). It is always possible however to add further keywords to it.\n\nPlease note that it might take some time (up to some hours) till your peers can see your freshly uploaded files.\n\nNote: **not** \n\nThe gnunet-publish command offers an option – -n or equivalently --noindex – to publish a file without indexing it. When used, GNUnet will perform a full insertion and store the entire file in encrypted form in the GNUnet database.\n\nThis option has been created with the purpose of avoiding that who takes physical access to a computer running GNUnet finds out which files are currently being published, in case of censored files in countries with strong censorship. Files published with the --noindex option will appear as chunks downloaded from the network, and as such cannot be unpublished/unindexed (they have never been indexed in the first place); however it is always possible to specify a low content priority during publication (--prio) and tell GNUnet that the content that is going to be published is allowed to get lost easily when the database gets full.\n\nFor further information, please read the chapter on file-sharing in the handbook. See also https://gnunet.org/en/use.html#filesharing.\n\n- When you modify a file, the URI of the file changes. Therefore, GNUnet considers this to be a completely different file and the indexed file will be considered missing. Therefore, make sure that the original file is unindexed first (using the gnunet-unindex command), modify the file, and then index the new file to make it accessible through the network.\n- If you want to remove a file from your filesystem, then you should unindex it first.\n- If you know in advance that a published file will likely need to be updated more or less frequently, see #Publishing updatable files\n\n"
    },
    {
      "title": "Downloading + sharing",
      "level": 4,
      "content": "GNUnet file-sharing network is a DHT (see Wikipedia:Distributed hash table). As peers in the DHT, users store chunks of various files on their disk, even from files they do not download or have downloaded. Which files are stored depends on the DHT distance metric / algorithm.\n\nTechnically unless a file has been completely downloaded only parts of it are stored. These are stored in a cache (typically under /var/lib/gnunet/.local/share/gnunet). If a DHT query finds its way to a peer for one of the cached parts, the peer will provide it. The database used to store the file-sharing blocks is kept finite (below a configurable quota), and all the cached parts can expire to make space for newer files.\n\nIf someone shares a file in the GNUnet network the distributed chunks of that file will remain in the network's cache for a while, and the file will remain available even if who shared it goes offline. But if the original publisher goes missing and nobody else shared the file explicitly (with gnunet-publish), the file will eventually become unavailable as the peer caches expire or the peers go offline.\n\nThe only way to ensure that a file persists in the GNUnet network is then to re-publish it explicitly after downloading it (with gnunet-publish) and let the machine that publishes the file visit the network regularly.\n\nPublishing a file after downloading will always generate the same URI whereby the file was downloaded (gnunet://fs/chk/Y1FD... in the example below), independently of the keywords chosen for re-publishing it:\n\n```\n$ gnunet-download -o 'Hardin, Garett (1968)_ Tragedy of the Commons.pdf' gnunet://fs/chk/Y1FD...\n```\n\n```\n100% [============================================================]\nDownloading `Hardin, Garett (1968)_ Tragedy of the Commons.pdf' done (160 b/s).\n```\n\n```\n$ gnunet-publish -k 'tragedy' 'Hardin, Garett (1968)_ Tragedy of the Commons.pdf'\n```\n\n```\nPublishing `/srv/filesharing/gnunet/Hardin, Garett (1968)_ Tragedy of the Commons.pdf' done.\nURI is `gnunet://fs/chk/Y1FD...\n```\n\n"
    },
    {
      "title": "VPN",
      "level": 3,
      "content": "GNUnet provides a VPN, which can be used to share your Internet connection (yes, this may be dangerous, just as running a Tor exit node), or to provide access to services on your host (this should be less dangerous, as long as those services are secure).\n\nFor information on how to set up a VPN with GNUnet, see https://gnunet.org/en/use.html#vpn.\n\n"
    },
    {
      "title": "The GNU Name Service (GNS)",
      "level": 3,
      "content": "The GNU Name Service (GNS) is a fully decentralized alternative to the Domain Name System (DNS) that should not suffer the same major security flaws as the latter (see Wikipedia:Domain Name System#Security issues).\n\nFor information on how to use GNS, see https://gnunet.org/en/use.html#gns_cli and https://gnunet.org/en/use.html#gns_browser.\n\n"
    },
    {
      "title": "Chatting with other GNUnet users",
      "level": 3,
      "content": "To chat with GNUnet users the gnunet-messenger utility is available, for which the gnunet.service user unit needs to be started (possibly along with the gnunet.service system unit – see #Launching the daemon as current user in a multi-user setup). For instance, to enter the “miscellanea” room using “alice” as nickname, launch\n\n```\n$ gnunet-messenger -e alice -r miscellanea\n```\n\n```\n* Welcome to the messenger, 'alice'!\n* You try to open a room...\n* You joined the room.\n[EHDA8T] * 'anonymous' opened the room on: 2ABN944E16FTWFMOKTMQ5JMPQ233YSPBKC47XR2DHSPQCQ8GYK80\n[EHDA8T] * 'anonymous' gets renamed to 'alice'\n█\n```\n\n"
    },
    {
      "title": "GNUnet GTK",
      "level": 3,
      "content": "GNUnet GTK is a collection of graphical interfaces for the GNUnet framework. It ships the following GTK applications:\n\n- gnunet-conversation-gtk\n- gnunet-fs-gtk\n- gnunet-namestore-gtk\n- gnunet-peerinfo-gtk\n- gnunet-setup\n- gnunet-statistics-gtk\n\nTo install GNUnet GTK download the gnunet-gtkAUR package.\n\n"
    },
    {
      "title": "Messenger GTK",
      "level": 3,
      "content": "Currently several graphical user interfaces for chatting on the GNUnet network are being developed. One of these is Messenger GTK (messenger-gtkAUR, or messenger-gtk-gitAUR for the development version), a mobile-friendly GTK graphical user interface for chatting with GNUnet users. For chatting via command line, see Messenger CLI (messenger-cliAUR or messenger-cli-gitAUR for the development version).\n\n"
    },
    {
      "title": "Web User Interface",
      "level": 3,
      "content": "A Web interface for GNUnet exists and is available as gnunet-webui-gitAUR.\n\n"
    },
    {
      "title": "re:claimID",
      "level": 3,
      "content": "re:claimID is a decentralized Identity Provider (IdP) service built on top of the GNU Name System. It allows users to securely share personal information with websites using standardized protocols (OpenID Connect).\n\nFor users re:claimID offers an extension for Firefox and an extension for Chromium for managing re:claimID identities in the web browser (the gnunetAUR package needs to be installed).\n\nAfter having installed the extension it will be possible to add a new identity to the local re:claimID instance and add some attributes to it by visiting https://ui.reclaim/ (the link will not work without the extension installed).\n\nFor more information, please refer to the manual.\n\n"
    },
    {
      "title": "GNU Taler",
      "level": 3,
      "content": "GNU Taler is a microtransaction and electronic payment system built on top of GNUnet. Differently than other distributed payment systems Taler is not based on a blockchain, but on blind signatures instead.\n\nFor more information please consult the official documentation. See also packages syncAUR, taler-exchangeAUR, taler-mdbAUR, taler-merchantAUR and taler-twisterAUR.\n\n"
    },
    {
      "title": "GNU Anastasis",
      "level": 3,
      "content": "GNU Anastasis is a protocol and implementation that allows users to securely deposit core secrets with an open set of escrow providers and to recover these secrets if their original copies are lost. Anastasis is available on AUR (anastasisAUR and anastasis-gtkAUR). For more information please consult https://www.gnu.org/software/anastasis/ and https://anastasis.lu/.\n\n"
    },
    {
      "title": "GNUnet fails to publish files",
      "level": 3,
      "content": "A common mistake for who does not understand how the GNUnet services work is that of trying to publish files located in the home directory (or in its subdirectories) when the file sharing service is not running for the current user. The problem is that the gnunet system user (which runs the GNUnet system service) has normally no access to the home directories of other users.\n\nAn easy solution is to create a shared directory, where only users that belong to the gnunet group have write permissions, and use it to place the files that will be published. For instance, /srv/filesharing/gnunet could be a good choice:\n\n```\n# install -dm775 -g gnunet -o gnunet /srv/filesharing/gnunet\n```\n\nEach user belonging to the gnunet group can then create a link to it in their home directory,\n\n```\n$ ln -s /srv/filesharing/gnunet ~/Publishing\n```\n\nwhich can be dereferenced by gnunet-publish:\n\n```\n$ (cd ~/Publishing && gnunet-publish -k commons ostrom.pdf) && gnunet-fs -i\n```\n\n```\n/srv/filesharing/gnunet/ostrom.pdf\n```\n\nIf you prefer to run the file sharing service as current user, edit /etc/gnunet.conf accordingly:\n\n```\n[fs]\n...\nRUN_PER_USER = YES\n...\nUNIXPATH = $GNUNET_USER_RUNTIME_DIR/gnunet-service-fs.sock\n...\n```\n\n"
    },
    {
      "title": "Low bandwidth",
      "level": 3,
      "content": "It is recommended for file-sharing that you increase GNUnet's bandwidth restrictions from the actually pretty low defaults. The example below sets the WAN and LAN limits to unlimited.\n\n```\n$ gnunet-config -s ats -o WAN_QUOTA_IN -V unlimited\n$ gnunet-config -s ats -o WAN_QUOTA_OUT -V unlimited\n$ gnunet-config -s ats -o LAN_QUOTA_IN -V unlimited\n$ gnunet-config -s ats -o LAN_QUOTA_OUT -V unlimited\n```\n\n"
    },
    {
      "title": "/var/lib/gnunet/ grows too big",
      "level": 3,
      "content": "GNUnet's cache is kept finite and cannot grow forever. However the quota reserved for it by default is not small (currently 5 GB). To reduce this number, you must assign your preferred value to the QUOTA key in the datastore section of /etc/gnunet.conf.\n\n```\n/etc/gnunet.conf\n```\n\n```\n...\n\n[datastore]\n...\nQUOTA = 2 GB\n...\n```\n\n"
    },
    {
      "title": "/var/lib/gnunet/ is left after uninstall",
      "level": 3,
      "content": "The /var/lib/gnunet/ directory is the home directory of the gnunet system user, which is left after uninstalling GNUnet. If you are sure that you are never going to use GNUnet ever again, launch:\n\n```\n# userdel -r gnunet\n# groupdel gnunetdns\n```\n\n"
    },
    {
      "title": "The network is too static",
      "level": 3,
      "content": "By default GNUnet bootstraps itself using a hostlist file downloaded from internet (plain https) every time it connects to the network. If you want to instruct it to learn and memorize host lists provided by other peers you need to add the -e option to the OPTIONS key under hostlist in /etc/gnunet.conf. Further options are also available.\n\n```\n/etc/gnunet.conf\n```\n\n```\n...\n\n[hostlist]\n...\n# Options:\n# -p : provide a hostlist as a hostlist servers\n# -b : bootstrap using configured hostlist servers\n# -e : enable learning advertised hostlists\n# -a : advertise hostlist to other servers\nOPTIONS = -b -e -a -p\n...\n```\n\n"
    },
    {
      "title": "Launching the daemon as current user in a multi-user setup",
      "level": 3,
      "content": "After a fresh install the user configuration file is missing. In a multi-user setup this is almost only used (if needed) to start and stop the gnunet.service user unit while the system daemon is running, hence it is generally enough to create a minimal configuration file containing only:\n\n```\n~/.config/gnunet.conf\n```\n\n```\n[arm]\nSTART_SYSTEM_SERVICES = NO\nSTART_USER_SERVICES = YES\n```\n\nWithout setting START_SYSTEM_SERVICES to NO, launching the daemon as current user while the system daemon is running will result in duplicate processes.\n\nSee The Multi-User Setup, in the manual for further insight.\n\n"
    },
    {
      "title": "A button for switching GNUnet on and off",
      "level": 3,
      "content": "If you use GNOME you might want to install the Systemd Manager shell extension (gnome-shell-extension-systemd-managerAUR) and add GNUnet to it:\n\n```\n$ dconf write /org/gnome/shell/extensions/systemd-manager/systemd \\\n\t'['\\''{\"name\":\"GNUnet system service\",\"service\":\"gnunet.service\",\"type\":\"system\"}'\\'', '\\''{\"name\":\"GNUnet user service\",\"service\":\"gnunet.service\",\"type\":\"user\"}'\\'']'\n```\n\n(After installing the extension you might need to restart the session.)\n\n"
    },
    {
      "title": "Single-user setup",
      "level": 3,
      "content": "The GNUnet peer can be started also from the current user without running the gnunet system service. For a single-user setup make sure that START_SYSTEM_SERVICES and START_USER_SERVICES are set to YES in ~/.config/gnunet.conf:\n\n```\n~/.config/gnunet.conf\n```\n\n```\n[arm]\nSTART_SYSTEM_SERVICES = YES\nSTART_USER_SERVICES = YES\n```\n\nTo start the peer as current user, start the gnunet.service user unit. To stop a peer which is running as current user, stop the gnunet.service user unit.\n\nFor further information, please refer to the chapter on the single-user setup in the handbook.\n\n"
    },
    {
      "title": "Publishing updatable files",
      "level": 3,
      "content": "It is possible to publish \"updatable\" files (i.e., files for which you might want to release a different version in the future, advertising that it is the same file – just updated – and not a different one). To release an updatable file you need to create an ego and use it to sign the file. This is the only way to assure that a malicious party cannot supply counterfeited updates.\n\nTo create an ego the gnunet-identity utility is available, for which the gnunet.service user unit needs to be started (possibly along with the gnunet.service system unit – see #Launching the daemon as current user in a multi-user setup). For instance, to create an ego named \"caroline\", start the gnunet user unit and launch:\n\n```\n$ gnunet-identity -C caroline\n```\n\nNow that you have created an ego, you need to specify a string that identifies the current release of the file (the -t option), and already now the string that will identify your planned next version (the -N option) – you will have to remember the latter. Any content is possible for both strings.\n\n```\n$ gnunet-publish -P caroline -t 'diary version 1' -N 'diary version 2' -k 'diary' until-2020/my_diary.md\n```\n\n```\nPublishing `/srv/filesharing/gnunet/until-2020/my_diary.md' done.\nURI is `gnunet://fs/chk/AF26...'.\n\nNamespace URI is `gnunet://fs/sks/V3TK.../diary version 1'.\n```\n\nWhen an update will be ready, you will have to use the same string that you had previously chosen for it (\"diary version 2\" in our example), possibly accompanying it with another name for a further update (if applicable):\n\n```\n$ gnunet-publish -P caroline -t 'diary version 2' -N 'diary version 3' -k 'diary' until-2021/my_diary.md\n```\n\n```\nPublishing `/srv/filesharing/gnunet/until-2021/my_diary.md' done.\nURI is `gnunet://fs/chk/5Y7V...'.\n\nNamespace URI is `gnunet://fs/sks/V3TK.../diary version 2'.\n```\n\nIf you decide that an update will be the last one, omit the -N option (will not allow any future updates).\n\nNote that an update with GNUnet will not make the old content unavailable, GNUnet merely allows the publisher to point users to more recent versions.\n\n"
    },
    {
      "title": "Launching and stopping GNUnet without systemd",
      "level": 3,
      "content": "GNUnet comes with an own daemon management system, the Automatic Restart Manager (limited to the GNUnet services).\n\nTo start the system services manually without systemd launch the gnunet-arm utility as gnunet user:\n\n```\n[gnunet]$ gnunet-arm -c /etc/gnunet.conf -s\n```\n\nTo end the system services manually without systemd, launch:\n\n```\n[gnunet]$ gnunet-arm -c /etc/gnunet.conf -e\n```\n\nTo start the user services manually without systemd, launch the gnunet-arm utility as current user:\n\n```\n$ gnunet-arm -c ~/.config/gnunet.conf -s\n```\n\nTo end the user services manually without systemd, launch:\n\n```\n$ gnunet-arm -c ~/.config/gnunet.conf -e\n```\n\n"
    }
  ]
}