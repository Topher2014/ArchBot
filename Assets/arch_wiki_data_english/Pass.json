{
  "title": "Pass",
  "url": "https://wiki.archlinux.org/title/Pass",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "From the official website:\n\npass is a simple password manager for the command line. pass is a shell script that makes use of existing tools like GnuPG, tree and Git.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the pass package.\n\nAn optional Qt GUI is available via the qtpass package.\n\n"
    },
    {
      "title": "Basic usage",
      "level": 2,
      "content": "To initialize the password store:\n\n```\n$ pass init gpg-id_or_email\n```\n\nTo create a new password, first provide a descriptive hierarchical name. In this example, this is archlinux.org/wiki/username:\n\n```\n$ pass insert archlinux.org/wiki/username\n```\n\nTo get a view of the password store do the following. Note the example output which shows the hierarchy we just created:\n\n```\n$ pass\n```\n\n```\nPassword Store\n└── archlinux.org\n    └── wiki\n        └── username\n```\n\nTo generate a new random password for the above example, do the following, where n is the desired password length as a number:\n\n```\n$ pass generate archlinux.org/wiki/username n\n```\n\nTo retrieve a password, enter the gpg passphrase at the following prompt, again using the example name from above:\n\n```\n$ pass archlinux.org/wiki/username\n```\n\nUsers of Xorg with xclip installed can retrieve the password directly onto the clipboard temporarily (e.g., to paste into web forms). In a Wayland session, should use wl-clipboard instead. To do so, do the following (again with the same example hierarchical name from above):\n\n```\n$ pass -c archlinux.org/wiki/username\n```\n\npass comes with a dmenu wrapper to enable easy searching/copying. To use it, install the optional dependency dmenu and run:\n\n```\n$ passmenu\n```\n\nThen selecting an entry will copy its password to the clipboard. See dmenu(1) for customization options such as case-insensitivity. You may want to set this to a systemwide keybinding in order to easily access passwords from any application.\n\n"
    },
    {
      "title": "Data organization",
      "level": 2,
      "content": "By default, the credential file created with pass insert will only contain your password. However, it may not be enough since several applications ask for detail data like username, url, etc. You can edit an existing file the way you want with command pass edit password_name. Below is the preferred organizational scheme provided by pass-project page. When using the option -c or --clip with this scheme, only the password will be copied.\n\n```\nYwrZSNH35z164ym9pI\nURL: *.amazon.com/*\nUsername: AmazonianChicken@example.com\nSecret Question 1: What is your childhood best friend's most bizarre superhero fantasy? Oh god, Amazon, it's too awful to say...\nPhone Support PIN #: 84719\n```\n\n"
    },
    {
      "title": "Migrating to pass",
      "level": 2,
      "content": "There are multiple scripts listed on the pass-project page to import passwords from other programs\n\n"
    },
    {
      "title": "Extensions",
      "level": 2,
      "content": "Since version 1.7, pass supports extensions developed by the community. These extensions extend the features of pass with the support of new commands.\n\n- pass-tomb — Manage the whole tree of your password store encrypted inside a tomb.\n\n- pass-otp — Support for one-time-password (OTP) tokens.\n\n- pass-import — A generic importer tool from other password managers.\n\n- pass-update — An easy flow for updating passwords.\n\n- pass-audit — An extension for auditing a password repository.\n\n- pass-coffin — A password store extension to hide data inside a signed and encrypted coffin\n\n- pass-tessen — An Xorg/Wayland compatible command line fuzzy selection tool with copy and paste.\n\n- tessen — A bash script for Wayland extending compatibility to dmenu type applications such as rofi and fuzzel.\n\n"
    },
    {
      "title": "Advanced usage",
      "level": 2,
      "content": "Environment variables can be used to alter where pass looks to do store and git operations via:\n\n```\nPASSWORD_STORE_DIR=/path/to/store\n```\n\nFor more information on how this can be used to support multiple pass repositories see this link. The following pw() example alias sends the second line of the named database to the clipboard before sending the first line five seconds thereafter and finally an OTP code five seconds after that. Assuming that a password occupies the first line and a username the second line and an OTP URI exists anywhere in the named database, the net effect is passing username > password > otp code for consecutive primary pasting into available (e.g. browser) entry fields:\n\n```\npw() {\nexport PASSWORD_STORE_CLIP_TIME=8\nexport PASSWORD_STORE_X_SELECTION=primary\npass -c2 $1; sleep 5; pass -c $1; sleep 5; pass otp -c $1; exit\n}\n```\n\n"
    },
    {
      "title": "Multiple pass contexts (e.g. teaming)",
      "level": 2,
      "content": "One can use aliases to set up different pass contexts, which helps when collaborating with different teams. We have gotten this working in bash as follows:\n\nAdd aliases to your ~/.bashrc:\n\n```\nalias passred=\"PASSWORD_STORE_DIR=~/.pass/red pass\"\nalias passblue=\"PASSWORD_STORE_DIR=~/.pass/blue pass\"\n```\n\nAdd these for bash-completion to your ~/.bash_completion and make sure bash-completion is installed:\n\n```\nsource /usr/share/bash-completion/completions/pass\n_passred(){\n    PASSWORD_STORE_DIR=~/.pass/red/ _pass\n}\ncomplete -o filenames -o nospace -F _passred passred\n_passblue(){\n    PASSWORD_STORE_DIR=~/.pass/blue/ _pass\n}\ncomplete -o filenames -o nospace -F _passblue passblue\n```\n\nOr for zsh (source: /usr/share/zsh/site-functions/_pass)\n\n```\ncompdef _pass passred\nzstyle ':completion::complete:passred::' prefix \"$HOME/.pass/red\"\npassred() {\n  PASSWORD_STORE_DIR=$HOME/.pass/red pass $@\n}\ncompdef _pass passblue\nzstyle ':completion::complete:passblue::' prefix \"$HOME/.pass/blue\"\npassblue() {\n  PASSWORD_STORE_DIR=$HOME/.pass/blue pass $@\n}\n```\n\nNow you can initialize into ~/.pass/red and ~/.pass/blue and have two pass contexts with the passred and passblue aliases. You can generalize this further into as many contexts as you like.\n\n"
    },
    {
      "title": "Git helper usage",
      "level": 3,
      "content": "You can use pass as a credentials helper for git. Install the pass-git-helperAUR. Details are described in the github README file.\n\n"
    },
    {
      "title": "git configuration",
      "level": 4,
      "content": "Configure pass-git-helper as a git credentials helper by calling:\n\n```\n$ git config --global credential.helper /usr/bin/pass-git-helper\n```\n\n"
    },
    {
      "title": "Mapping file",
      "level": 4,
      "content": "Create the file ~/.config/pass-git-helper/git-pass-mapping.ini. It is used to map git remote hosts to your pass database. The format is something like this:\n\n```\n[github.com]\ntarget=dev/github\n\n[*.fooo-bar.*]\ntarget=dev/fooo-bar\n```\n\nYou can use wildcards in the host part, as shown in the example.\n\n"
    },
    {
      "title": "Password store layout",
      "level": 4,
      "content": "As usual with pass, the helper assumes that the password is contained in the first line of the passwordstore entry. Additionally, if a second line is present, this line is interpreted as the username.\n\nFor this to work, you have to use pass insert --multiline to create a multi line password store entry.\n\n"
    },
    {
      "title": "Central Git server for pass in combination with GnuPG (SSH example)",
      "level": 3,
      "content": "You are able to setup a password management system by setting up a central Git server for pass. This allows you to synchronize your central password repository through multiple client environments.\n\n"
    },
    {
      "title": "Install a bare Git repository for pass on the server",
      "level": 4,
      "content": "On the server run git init --bare ~/.password-store to create a bare repository you can push to.\n\n"
    },
    {
      "title": "Import authorized public SSH keys",
      "level": 4,
      "content": "See SSH keys#Copying the public key to the remote server\n\n"
    },
    {
      "title": "On the client",
      "level": 4,
      "content": "This section assumes you have configured GnuPG and have a key pair to encrypt passwords. On your local client ensure you have a local password store on the client, then enable management of local changes through Git, add your remote Git repository, and push your local pass history.\n\nCreate a local password store:\n\n```\n$ pass init gpg_key_id\n```\n\nEnable management of local changes through Git:\n\n```\n$ pass git init\n```\n\nAdd the remote git repository as 'origin':\n\n```\n$ pass git remote add origin user@server:~/.password-store\n```\n\nPush your local pass history:\n\n```\n$ pass git push -u --all\n```\n\nNow you can use the standard Git commands, prefixed by pass. For example: pass git push, or pass git pull. pass will automatically create commits when you use it to modify your password store.\n\n"
    },
    {
      "title": "Encryption failed: Unusable public key",
      "level": 3,
      "content": "The following error can occur when attempting to insert a new entry:\n\n```\n$ pass insert archlinux.org/wiki/username\n```\n\n```\nEnter password for archlinux.org/wiki/username:\nRetype password for archlinux.org/wiki/username:\ngpg: XXXXXXXXX: There is no assurance this key belongs to the named user\ngpg: [stdin]: encryption failed: Unusable public key\nPassword encryption aborted.\n```\n\nThis occurs if the trust level of the GnuPG key is set to anything other than \"ultimate\". Edit the key used for pass to set its trust level to \"ultimate\":\n\n```\n$ gpg --edit-key your_key_id\n```\n\n```\n> trust\n> 5\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- A more comprehensive pass tutorial\n- pass home page\n- List of Compatible clients and possibilities for migration to pass\n\n"
    }
  ]
}