{
  "title": "Ros",
  "url": "https://wiki.archlinux.org/title/Ros",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nROS is an open-source, meta-operating system for your robot. It provides the services you would expect from an operating system, including hardware abstraction, low-level device control, implementation of commonly-used functionality, message-passing between processes, and package management.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "You can install ros-noetic-desktop-fullAUR. It is also available through an unofficial user repository: Unofficial user repositories#arch4edu.\n\n"
    },
    {
      "title": "catkin_make in Melodic",
      "level": 3,
      "content": "As specified by the ROS wiki, the first catkin_make command in a clean workspace should be:\n\n```\n$ catkin_make -DPYTHON_EXECUTABLE=/usr/bin/python3 -DBOOST_ROOT=/opt/boost1.69 -DBoost_NO_SYSTEM_PATHS=TRUE\n```\n\nSubsequent builds should be done with just\n\n```\n$ catkin_make\n```\n\n"
    },
    {
      "title": "Using Catkin/ROS with an IDE",
      "level": 4,
      "content": "To make CLionAUR support ROS packages, you can change the Exec parameter of its desktop file as follows.\n\n```\n~/.local/share/applications/jetbrains-clion.desktop\n```\n\n```\nExec=bash -i -c \"source /home/user/catkin_ws/devel/setup.sh;/opt/clion/bin/clion.sh\" %f\n```\n\nHowever, /home/user/catkin_ws must be exchanged with your Catkin workspace. You can now open a Catkin project without cmake complaining about missing packages, hopefully. If desired or needed you can use Python 3 by adding -DPYTHON_EXECUTABLE=/usr/bin/python3 to the CMake options which can be found in the settings.\n\n"
    },
    {
      "title": "catkin build in Melodic",
      "level": 3,
      "content": "For configuring the systems using the catkin build environment, one have to configure the catkin workspace as usual and run:\n\n```\n$ catkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DBOOST_ROOT=/opt/boost1.69 -DBoost_NO_SYSTEM_PATHS=TRUE\n```\n\nAfterwards, use catkin build as normal. Please remember to reconfigure your catkin whenever you delete the configuration files (i.e. the catkin_ws directory)\n\n"
    },
    {
      "title": "Rebuild when shared libraries are updated",
      "level": 3,
      "content": "When you update a library that ROS depends on (e.g. Boost), all packages that link to it must be rebuilt. Most AUR helpers will not detect this situation. The following script will generate a list of all packages that are linked to missing so files:\n\nhttps://seangreenslade.com/h/snippets/ros-find-outofdate.py\n\n(Note that the script requires pyalpm to be installed.)\n\n"
    },
    {
      "title": "Building using AUR",
      "level": 4,
      "content": "ros2-ironAUR package aims to provide an easy way to install ROS 2 on Arch Linux. After installing the package, you need to configure your environment (i.e. source) in order to use ROS 2 â€” See #Usage Examples.\n\n"
    },
    {
      "title": "Distrobox",
      "level": 4,
      "content": "Distrobox allows to use any Linux distribution inside your terminal [1], including Ubuntu, which in turn allows to run ROS2 natively. Distrobox is available in the official repository as distrobox, and relies on Docker or Podman containers.\n\nOnce Ubuntu is up and running, install ROS by reading the official installation guide.\n\nAlthough ROS2 packages run fine on Wayland, graphical applications such as gazebo or rviz2 do not. To make them work, set the environment variable QT_QPA_PLATFORM to xcb. You can later test the result with:\n\n```\nrviz2\n```\n\n"
    },
    {
      "title": "Usage Examples",
      "level": 4,
      "content": "First source the workspace, or change the directory to where you installed as before.\n\nIf you are using zsh, change source /opt/ros2/foxy/setup.bash to source /opt/ros2/foxy/setup.zsh\n\n```\n$ source /opt/ros2/foxy/setup.bash\n```\n\nA tip to source workspace is adding a function like this your shell startup file, like .bashrc, .zshrc.\n\n```\nros2_on(){\n     export ROS_DOMAIN_ID=42\n     export ROS_VERSION=2\n     export ROS_PYTHON_VERSION=3\n     export ROS_DISTRO=foxy\n     source /opt/ros2/foxy/setup.bash\n}\n```\n\nRemember to make any applicable changes, namely changing the ROS_DISTRO variable to the distrobution you have installed.\n\nYou can change ROS_DOMAIN_ID to your favourite number, or the number you are actually using.\n\nFunctionality comparable to roscore, rosnode, rostopic, rosmsg, rospack, rosrun and rosservice is available via ros2:\n\n```\n$ ros2 -h\nusage: ros2 [-h] Call `ros2 <command> -h` for more detailed usage. ... \n\nros2 is an extensible command-line tool for ROS 2.\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nCommands:\n  daemon    Various daemon related sub-commands\n  msg       Various msg related sub-commands\n  node      Various node related sub-commands\n  pkg       Various package related sub-commands\n  run       Run a package specific executable\n  security  Various security related sub-commands\n  service   Various service related sub-commands\n  srv       Various srv related sub-commands\n  topic     Various topic related sub-commands\n\n  Call `ros2 <command> -h` for more detailed usage.\n```\n\nA typical \"Hello World\" example starts with running a publisher node:\n\n```\n$ ros2 topic pub /chatter 'std_msgs/String' \"data: 'Hello World'\"\n```\n\nThen, in another terminal, you can run a subscriber (Do not forget to source the workspace in every new terminal):\n\n```\n$ ros2 topic echo /chatter\n```\n\nList existing nodes:\n\n```\n$ ros2 node list\npublisher_std_msgs_String\n```\n\nList topics:\n\n```\n$ ros2 topic list\n/chatter\n```\n\nROS 2's version of rviz is\n\n```\n$ rviz2\n```\n\n"
    }
  ]
}