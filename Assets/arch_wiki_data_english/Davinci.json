{
  "title": "Davinci",
  "url": "https://wiki.archlinux.org/title/Davinci",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- OpenCL\n\nDavinci Resolve is a proprietary video editing, color grading, color correction, visual effects, motion graphics and audio post-production application.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Both a limited free version and a paid (Studio) version are offered.\n\nFor the free version, install davinci-resolveAUR or davinci-resolve-betaAUR.\n\nFor the Studio version, install davinci-resolve-studioAUR or davinci-resolve-studio-betaAUR.\n\nTo run DaVinci Resolve, it is required to use suitable OpenGL and OpenCL drivers. Open-source OpenCL drivers are supported via Mesa (Rusticl) for AMD cards and Intel cards. The NixOS wiki has a compatibility matrix of supported AMD GPUs for Davinci Resolve.\n\nTable content:\nGPU vendor | OpenGL driver | Open Source | Documentation | Tested driver version | Works with DaVinci Resolve | Tested DR version | Notes\nAMD | mesa | Yes | AMDGPU | 23.0.2-2 | Yes | 18.1.4-1 | On pre-Vega GPUs, if using opencl-amd and mesa, DR crashes, see this bug report. You can instead use rocm with ROC_ENABLE_PRE_VEGA=1 or use opencl-amd with progl. Tested with Radeon RX 580. Tested with Radeon PRO W6600.\namdgpu-pro-oglpAUR | No | AMDGPU PRO | 21.10_1247438-1 | Yes | 17.1.1 | This is required if using ORCA legacy OpenCL driver. Requires running Resolve with the progl wrapper script. See documentation and the driver github for usage.\nIntel | mesa | Yes | Intel graphics | 23.1.6 | Yes | 18.5.1 | Works without issues.\nNVIDIA | mesa | Yes | Nouveau |  | No |  | \nnvidia-utils | No | NVIDIA | 460.32.03-1 | Yes | 17.0b6-1 | Tested on optimus laptop using nvidia-xrun.\n\nTested with Radeon RX 580.\n\nTested with Radeon PRO W6600.\n\nTable content:\nGPU Vendor | OpenCL driver | Open Source | Tested driver version | Works with DR | Tested DR version | Comment\nNeutral | opencl-rusticl-mesa | Yes | 1:23.3.2-2 | Yes | 18.6.4-1 | This only works if opencl-clover-mesa is not installed, otherwise DR will use Clover instead of rusticl. Some kernel versions have an issue with ROCm, but 6.1 LTS and 6.10.2 work. Tested with RX 6800M.\nmesa-tkg-git | Yes | 24.0.0_devel.180705.fdbb5d58983-1 | Yes | 18.6 | DR works with rusticl now that MR 21305 has been merged (commit 0a072bb3). Tested with RX 7600 using RUSTICL_ENABLE=radeonsi.\nAMD | opencl-amdAUR | Mixed pro and open components | 1:5.6.0-2 | Yes | 18.5b | There is no currently AUR package with only repackaged rocm drivers from Ubuntu (this opencl-amd packages both rocm and orca). On GFX8 (RX 580 and others), the ORCA legacy driver is used by default, which itself currently requires the AMDGPU-PRO OpenGL drivers to work (see above). Tested with Radeon Pro W6600 (works, even with mesa) Tested with Radeon RX 580 (works, currently only with progl). Tested with Radeon RX 5700 XT (with mesa) Addresses crashing (encounted with rocm-opencl-runtime package) when attempting to perform color correction on the color page. Tested with Radeon 7900XT.\nrocm-opencl-runtime | Yes | 5.4.3-1 | Yes | 18.1.4-1 | For GPUs older than GFX9/Vega use variable ROC_ENABLE_PRE_VEGA=1; works with Mesa OpenGL Tested with Radeon Pro W6600 Tested with AMD RX580. Color correction may result in crashing (did for Radeon )7900XT), consider using opencl-amd 5.6.0-2.\nopencl-legacy-amdgpu-proAUR | No | 22.10.1_1401426-1 | Yes, for GPUs older than Vega | 17.4.6-2 | Note that this is simply the opencl-amdAUR package without the ROCm drivers. Requires the AMDGPU-PRO OpenGL drivers to work. Tested with Radeon RX580.\nIntel | intel-compute-runtime | Yes | custom | Yes | 18.5.1 | Works with patches, described in this issue.\nmesa with the cl-gl sharing MR applied | Yes | 23.3.0 with MR applied | Yes | 18.6 | Works with RUSTICL_ENABLE=iris exported as an environment variable\nbeignetAUR | Yes | 1.3.2+12+gfc5f430c-2 | No |  | Core dumped\nintel-openclAUR | No | 5.0.r63503-2 | No |  | Core dumped\nintel-opencl-runtimeAUR | No | 1:18.1.0.013-2 | No |  | Core dumped\nNvidia | opencl-nvidia | No | 460.32.03-1 | Yes |  | Suitable, but working on cuda instead?\n\nTested with RX 6800M.\n\nTested with RX 7600 using RUSTICL_ENABLE=radeonsi.\n\nTested with Radeon Pro W6600 (works, even with mesa)\n\nTested with Radeon RX 580 (works, currently only with progl).\n\nTested with Radeon RX 5700 XT (with mesa)\n\nAddresses crashing (encounted with rocm-opencl-runtime package) when attempting to perform color correction on the color page. Tested with Radeon 7900XT.\n\nTested with Radeon Pro W6600\n\nTested with AMD RX580. Color correction may result in crashing (did for Radeon )7900XT), consider using opencl-amd 5.6.0-2.\n\nRequires the AMDGPU-PRO OpenGL drivers to work.\n\nTested with Radeon RX580.\n\n"
    },
    {
      "title": "DaVinci Resolve Checker",
      "level": 3,
      "content": "You can run davinci-resolve-checker script, which will tell you if your configuration is suitable for running DR (doesn't work for Intel iGPUs - says OpenCL driver is unsupported, though you can make it work). In good configurations it should output:\n\n```\nAll seems good. You should be able to run DaVinci Resolve successfully.\n```\n\n"
    },
    {
      "title": "BlackMagic Design Cards",
      "level": 3,
      "content": "If using DeckLink, UltraStudio or Intensity cards for video capture and playback, install Desktop Video Software with decklinkAUR package.\n\n"
    },
    {
      "title": "Decrease installation time",
      "level": 3,
      "content": "Compression of the Davinci Resolve package takes a significant amount of time because the binary is quite large. You can instruct makepkg to use a different compression algorithm, which in this case disables compression altogether, speeding up the process tremendously.\n\n```\nPKGEXT='.pkg.tar'\n```\n\n"
    },
    {
      "title": "Using application in portable way",
      "level": 3,
      "content": "There may be reasons you may want to not install davinci resolve package to the system. For example, you do not want such big package to take space in system partition. Or you want to quickly switch between different versions of application: free and studio, current and previous versions. To do this, just unpack the contents of the needed versions package in the directory you want, and directly run the opt/resolve/bin/resolve from that directory.\n\n"
    },
    {
      "title": "Automating with scripts",
      "level": 3,
      "content": "DR supports scripting. Free version support launching the scripts only from within dr itself, while with Studio version you can also invoke scripts externally. To allow it, go to Preferences -> System -> General -> External scripting using. You can choose: None (similarly to Free version, only from within dr), Local (allow invokes from local host), and Network (allow invokes from remote host).\n\nThe documentation can be found in Help -> Documentation -> Developer.\n\n"
    },
    {
      "title": "Remap keyboard modifiers used with mouse wheel for scroll and zoom",
      "level": 3,
      "content": "The application uses very strange bindings of keyboard modifiers for zooming and scrolling timeline. Original behavior is the following:\n\n- shift + wheel = height of tracks\n- ctrl + wheel = scroll timeline\n- alt + wheel = zoom timeline\n- no modifiers + wheel = vertical scroll\n\nIt is impossible to remap this from application, see [2].\n\nA workaround (working in X11 and Wayland) is to use evsieve. Replace /dev/input/event3 and /dev/input/event5 with your keyboard and mouse events in the following command:\n\n```\n# evsieve --input /dev/input/event3 grab --input /dev/input/event5 grab \\\n    --hook   key:leftalt:1 toggle=alt:2 \\\n    --hook   key:leftalt:0 toggle=alt:1 \\\n    --hook   key:leftctrl:1 toggle=ctrl:2 \\\n    --hook   key:leftctrl:0 toggle=ctrl:1 \\\n    --toggle rel:wheel @alt-up @alt-down id=alt \\\n    --map    yield rel:wheel@alt-down key:leftalt:0 key:leftctrl:1 key:leftctrl:2 rel:wheel key:leftctrl:0 key:leftalt:1 \\\n    --toggle rel:wheel @ctrl-up @ctrl-down id=ctrl \\\n    --map    yield rel:wheel@ctrl-down key:leftctrl:0 key:leftalt:1 key:leftalt:2 rel:wheel key:leftalt:0 key:leftctrl:1 \\\n    --block  rel:wheel_hi_res \\\n    --print  @alt-down @alt-up @ctrl-down @ctrl-up \\\n    --output create-link=/dev/input/by-id/merged-virtual-KM name=\"merged virtual KM\"\n```\n\nAnother workaround (working in X11 (and Xwayland), is worse and sometimes skips events) of this problem, you can use IMWheel utility. It can remap modifiers only for the application described by regular expression.\n\nUse the following config:\n\n```\n~/.imwheelrc\n```\n\n```\n\"^resolve\"\n\n    # just wheel for scroll\n    None, Up, Control_L|Button4\n    None, Down, Control_L|Button5\n\n    # crtl wheel for zoom\n    Control_L, Up,   Alt_L|Button4\n    Control_L, Down, Alt_L|Button5\n\n    # alt wheel for track height\n    Alt_L, Up,   Shift_L|Button4\n    Alt_L, Down, Shift_L|Button5\n```\n\nAlternatively, use the following blocks:\n\n```\n~/.imwheelrc\n```\n\n```\n\"^resolve\"\n\n     # just wheel for zoom\n     None, Up,   Alt_L|Button4\n     None, Down, Alt_L|Button5\n\n     # shift wheel for scroll\n     Shift_L, Up, Control_L|Button4\n     Shift_L, Down, Control_L|Button5\n```\n\n"
    },
    {
      "title": "Prevent prompt returning before full exit",
      "level": 3,
      "content": "When you exit application, the terminal prompt is returned to you, but suddenly the terminal is polluted with \"Socket disconnected\" message. To prevent this, pipe output of main process via cat. See here for explanation.\n\n"
    },
    {
      "title": "Logs",
      "level": 3,
      "content": "DaVinci Resolve creates the log file ~/.local/share/DaVinciResolve/logs/ResolveDebug.txt at every launch. Inspecting it can help diagnose problems.\n\n"
    },
    {
      "title": "Application window misses title bar",
      "level": 3,
      "content": "There is a workaround for KDE - a window rule to force enable title bar. See [3]\n\nYou can manually create a file describing needed window rule:\n\n```\nDaVinci_Resolve_main_window_always_with_titlebar_and_frame.kwinrule\n```\n\n```\n[DaVinci Resolve main window always with titlebar and frame]\nDescription=DaVinci Resolve main window always with titlebar and frame\nclientmachinematch=0\nnoborder=false\nnoborderrule=2\ntitlematch=0\ntypes=1\nwmclass=resolve\nwmclasscomplete=false\nwmclassmatch=1\n```\n\nThen go to System Settings > Window Management > Window Rules and import this file.\n\n"
    },
    {
      "title": "MP4, H.264, H.265 and AAC Support",
      "level": 3,
      "content": "It's a misconception that DaVinci Resolve free does not support the MP4 container type. It is more accurate to say DaVinci Resolve free does not support decoding or encoding H.264 and H.265 video, regardless of the container type.\n\nFor example, an MP4 containing an AV1 video stream and MP3 or PCM audio stream, can be decoded by DaVinci Resolve free.\n\nNeither DaVinci Resolve free or Studio versions support decoding or encoding of AAC audio streams.\n\nTable content:\nRelease | MP4 | H.264 | H.265 | AAC | Tested Version | Notes\nFree | Yes | No | No | No | 18.6.6-2 | MP4 supported provided supported codecs are being used (eg: AV1 and PCM). AV1 only on Nvidia, maybe even for decoding, according to codecs document.\nStudio | Yes | Yes | Yes | No | 18.6.6-2 | \n\n"
    },
    {
      "title": "Workaround for DaVinci Resolve Free",
      "level": 4,
      "content": "If your MP4's video is H.264 or H.265, but audio is MP3 or PCM, you need only transcode your video to a supported codec, as the audio is already supported.\n\n```\n$ ffmpeg -i input.mp4 -c:v dnxhd -profile:v dnxhr_hq -pix_fmt yuv422p -c:a copy output.mov\n```\n\nIf your MP4's video is H.264 or H.265, and the audio is AAC, you need to transcode both your video and audio to a supported codec.\n\n```\n$ ffmpeg -i input.mp4 -c:v dnxhd -profile:v dnxhr_hq -pix_fmt yuv422p -c:a alac output.mov\n```\n\nIf your MP4's video is AV1, but the audio is AAC, transcode just the audio to a supported codec:\n\n```\n$ ffmpeg -i input.mp4 -c:v copy -c:a pcm_s32le output.mp4\n```\n\nIf your space is limited, you could use this option (still x4..5 increase in file size) - but bear in mind, this is a lossy format so you could possibly get compression artefacts at later stages - for example, due to color correction - and lose your work :\n\n```\n$ ffmpeg -i input.mp4 -c:v mpeg4 -q:v 2 -c:a alac output.mp4\n```\n\nYou could also use alac codec for initial recording in OBS, and then copy audio with \"-c:a copy\" as ffmpeg parameter, to avoid encoding.\n\nYou can automate this task using incron. It will automatically convert files appeared in specified folder. See setup example on this article. Another alternative is to write a resolve script for that purpose. See documentation for Resolve Scripting (linked in the see also section) for more information.\n\n"
    },
    {
      "title": "Workaround for DaVinci Resolve Studio",
      "level": 4,
      "content": "Both H.264 and H.265 video is supported by Studio, but AAC audio is not. You can transcode the audio from the unsupported AAC format, into a supported lossless format without destructively re-compressing the video, or separating the audio from the video.\n\nIn #See also section, note a link to a PDF containing an official list of supported codecs.\n\nTo transcode audio into Apple Lossless Audio Codec (-c:a alac). This is a good option if you prefer using MOV containers.\n\n```\n$ ffmpeg -i input.mp4 -c:v copy -c:a alac output.mov\n```\n\nFLAC offers just a minor compression advantage over ALAC. To transcode into FLAC, you will need to use the MKV container.\n\n```\n$ ffmpeg -i input.mp4 -c:v copy -c:a flac -compression_level 12 output.mkv\n```\n\nThere's probably no real advantage to using PCM, except that MP4, MOV and MKV containers all support it, if that's important to you.\n\n```\n$ ffmpeg -i input.mp4 -c:v copy -c:a pcm_s32le output.mov\n```\n\n"
    },
    {
      "title": "HiDPI",
      "level": 3,
      "content": "To enable compatibility with high-resolution displays, set the following environment variables accordingly:[4]\n\n```\nQT_DEVICE_PIXEL_RATIO=2\nQT_AUTO_SCREEN_SCALE_FACTOR=true\n```\n\nYou can change UI scaling in settings: Preferences (ctrl + ,) > User tab > UI settings > UI Display Scale.\n\n"
    },
    {
      "title": "Wine version",
      "level": 3,
      "content": "Some plugins are available for Windows, but not available for Linux, so you may want to use Davinci Resolve via wine. Also, wine version could potentially workaround the linux-only problem of mp4 format issues. Wine 6.5 brings OpenCL 1.2 support, which is required for DR. Unfortunately, there was no success to start DR via wine. See test results here. In 17.4.1 DR cannot see the list of available gpus (wine 6.21). Probably, need some hack to make wine present gpus to applications. In dr 18.5b1 with wine 8.7-1 I get the rocm error (5.4.3-1) that is filed here.\n\n"
    },
    {
      "title": "Wrong OpenCL Version",
      "level": 3,
      "content": "If the application simply is not starting, even after showing installer and \"tour\" successfully your OpenCL Version may not match your NVIDIA driver. If you have installed nvidia-440xx make sure to install opencl-nvidia-440xx as well. A possible error message:\n\n```\n~/.local/share/DaVinciResolve/logs/LogArchive/ResolveDebug_C1.txt\n```\n\n```\n...\nOpenCL error -1001: 'Unspecified Error', GPUPropertiesUtilUnix.cpp:338\n...\n```\n\n"
    },
    {
      "title": "Get back to Onboarding screen",
      "level": 3,
      "content": "If you are experimenting with driver installation, you may want to start from the welcome tour and onboarding screen, which checks your system and graphics card. You can achieve that by removing configs directory:\n\n```\nrm -r $HOME/.local/share/DaVinciResolve/configs\n```\n\n"
    },
    {
      "title": "Full screen preview function missing",
      "level": 3,
      "content": "This function is only available in the studio version. It is in menu Workspace > Video Clean Feed.\n\n"
    },
    {
      "title": "No audio during video preview",
      "level": 3,
      "content": "DaVinci interfaces the ALSA directly, so if you use PulseAudio you need to install pulseaudio-alsa or pipewire-alsa. Alternatively you can redirect it to use PulseAudio yourself by creating asound.conf in /etc/ with the following content:\n\n```\n/etc/asound.conf\n```\n\n```\npcm.!default pulse\nctl.!default pulse\n```\n\n"
    },
    {
      "title": "Error code 999 on Intel/NVIDIA hybrid graphics card",
      "level": 3,
      "content": "\"The GPU failed to perform image processing because of an error. Error Code: 999.\"\n\nIf the NVIDIA GPU is used in on-demand mode, you have to explicitly demand it. To enable set the following environment variables:\n\n```\n__NV_PRIME_RENDER_OFFLOAD=1\n__GLX_VENDOR_LIBRARY_NAME=nvidia\n```\n\n"
    },
    {
      "title": "Silent crash related to libcrypto.so.1.0.0",
      "level": 3,
      "content": "DaVinci Resolve is not starting in graphical mode. In the console, this error is thrown:\n\n```\n$ /opt/resolve/bin/resolve \nbin/resolve: error while loading shared libraries: libcrypt.so.1: cannot open shared object file: No such file or directory\n```\n\nYou need to install libxcrypt-compat.\n\n"
    },
    {
      "title": "Missing Workflow Integrations menu",
      "level": 3,
      "content": "In DR Studio for Windows and Mac OS there is Workspace -> Workflow Integrations menu. Workflow Integration plugins are written in JavaScript (electron applications). As noted in documentation (you can reach it in Help -> Documentation -> Developer), Linux currently is not supported (checked in 17.4.3). They say Integration Scripts are supported in Linux, this is most probably a mistake, because they did not provided a path where to put them and still the menu is missing (it is that same Workspace -> Workflow Integrations).\n\n"
    },
    {
      "title": "Python 3.6 not found",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nWhen going to Workspace -> Console -> Py3 the error window appears saying \"Python 3.6 not found\".\n\nOne solution is the following (from this question):\n\n```\nenv PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 3.6.11\nsudo ln -s $HOME/.pyenv/versions/3.6.11/lib/python3.6 /usr/local/lib/python3.6\nsudo ln -s $HOME/.pyenv/versions/3.6.11/lib/libpython3.so /usr/local/lib/libpython3.6.so\n```\n\nIn DR 18 they say that all python 3 versions are supported.\n\n"
    },
    {
      "title": "Kill hanged process",
      "level": 3,
      "content": "If dr hanged, fails to release a terminal when you press ctrl + c (to send sigint), and when its window is not shown and you cannot open dr again (it is saying another instance is already running), you can still fix it. Open task manager (ctrl + esc in KDE), then search for process named \"GUI\", then kill it (send signal 9). Now you can start dr normally.\n\n"
    },
    {
      "title": "Use Dolphin instead of Qt File Picker",
      "level": 3,
      "content": "Unfortunately, DR does not support XDG desktop portals yet. See [5] for feature request. As a workaround, you can use Andrew Shark's script Import Media via Dolphin.\n\n"
    },
    {
      "title": "Unable to start (onetbb/log4cxx)",
      "level": 3,
      "content": "The switch to onetbb is causing a hang with the following message:\n\n```\n/opt/resolve/bin/resolve\n```\n\n```\n...\nActCCMessage Already in Table: Code= c005, Mode= 13, Level=  1, CmdKey= -1, Option= 0\nActCCMessage Already in Table: Code= c006, Mode= 13, Level=  1, CmdKey= -1, Option= 0\nActCCMessage Already in Table: Code= c007, Mode= 13, Level=  1, CmdKey= -1, Option= 0\nActCCMessage Already in Table: Code= 2282, Mode=  0, Level=  0, CmdKey= 8, Option= 0\nPnlMsgActionStringAdapter Already in Table: Code= 615e, Mode=  0, Level=  0, CmdKey= -1, Option= 0\nlog4cxx: No appender could be found for logger (BtCommon).\nlog4cxx: Please initialize the log4cxx system properly.\n...\n```\n\nOne suggested workaround is to temporarily rename /opt/intel/oneapi/compiler/2023.0.0/linux/lib/libOpenCL.so to something else.\n\nSee the tbb is replaced by onetbb and resolve cannot start on linux forum post for further discussion.\n\n"
    },
    {
      "title": "Unable to start (libpango/glib)",
      "level": 3,
      "content": "Due to the way Resolve handles libraries, starting the software may fail if the system libraries differ too much from the ones resolve ships.\n\n```\n/opt/resolve/bin/resolve: symbol lookup error: /usr/lib64/libpango-1.0.so.0: undefined symbol: g_string_free_and_steal\n```\n\nTo circumvent it you can force Resolve to use the systems' version instead:\n\n```\n$ LD_PRELOAD=\"/usr/lib64/libglib-2.0.so\" /opt/resolve/bin/resolve\n```\n\nResolve may fail to launch on the first try, but it will work on subsequent attempts.\n\nIt may be resulted in a new error:\n\n```\n/opt/resolve/bin/resolve: symbol lookup error: /usr/lib/libgdk_pixbuf-2.0.so.0: undefined symbol: g_task_set_static_name\n```\n\nAs of 2024-05-23, the fix for that `g_task_set_static_name` error is (source for solution in Arch forum):\n\n```\n$ LD_PRELOAD=\"/usr/lib/libgio-2.0.so /usr/lib/libgmodule-2.0.so\" /opt/resolve/bin/resolve\n```\n\nAnother workaround is to remove a few libs from Resolve's directory. This way Resolve will be forced to use system libs, not the ones packaged with it. See also the AUR comments for the packages and the PKGBUILD itself for more information on this trick.\n\n```\n/opt/resolve/libs/libglib-2.0.so*\n/opt/resolve/libs/libgio-2.0.so*\n/opt/resolve/libs/libgmodule-2.0.so*\n```\n\n"
    },
    {
      "title": "Unable to start (wayland)",
      "level": 3,
      "content": "In a wayland session, environment variable QT_QPA_PLATFORM=wayland may be already set to enable other QT programs to launch with Wayland support. However, DaVinci Resolve will fail to launch with the following error:\n\n```\nqt.qpa.plugin: Could not find the Qt platform plugin \"wayland\" in \"\"\nThis application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.\n```\n\nDaVinci Resolve can instead be forced to use X11 when launched with:\n\n```\nQT_QPA_PLATFORM=xcb /opt/resolve/bin/resolve\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Post on Davinci Resolve forum with tested configurations.\n- PDF with list of Supported Formats and Codecs for DaVinci Resolve 19\n- Here you can check if BMD released a document for a newer version, see in the Latest Support Notes column. Also, it lists the whats new notes for each release.\n- ResolveDevDoc - unofficial documentation for scripting. Formatted with readthedocs and is prettier to read and search than in original txt file.\n- pydavinci - a reworked resolve scripting api\n\n"
    }
  ]
}