{
  "title": "Rsnapshot",
  "url": "https://wiki.archlinux.org/title/Rsnapshot",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Rsnapshot is an open source utility that provides incremental back ups.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the rsnapshot package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "In the install process, the configuration file is created. It is recommended you make a back up of this file in case you need to reconfigure the file again.\n\n```\n# cp /etc/rsnapshot.conf /etc/rsnapshot.conf.default\n```\n\nThe /etc/rsnapshot.conf file is well commented and much of it should be fairly self-explanatory. For a full reference of all the various options, please consult rsnapshot(1).\n\n"
    },
    {
      "title": "Root Directory",
      "level": 3,
      "content": "Choose the directory where you want to store the file system back ups, in this case I will store the back ups in /mnt/backups/\n\n```\n/etc/rsnapshot.conf\n```\n\n```\n# All snapshots will be stored under this root directory.\n#\nsnapshot_root   /mnt/backups/\n```\n\n"
    },
    {
      "title": "External program dependencies",
      "level": 3,
      "content": "Uncomment the lines referring to the UNIX commands cp, du, ssh (if you want to do remote back ups) and rsnapshot-diff, etc. This section of the file should look like this:\n\n```\n/etc/rsnapshot.conf\n```\n\n```\n# LINUX USERS:   Be sure to uncomment \"cmd_cp\". This gives you extra features.\n# EVERYONE ELSE: Leave \"cmd_cp\" commented out for compatibility.\n#\n# See the README file or the man page for more details.\n#\ncmd_cp          /usr/bin/cp\n\n# uncomment this to use the rm program instead of the built-in perl routine.\n#\ncmd_rm          /usr/bin/rm\n\n# rsync must be enabled for anything to work. This is the only command that\n# must be enabled.\n#\ncmd_rsync       /usr/bin/rsync\n\n# Uncomment this to enable remote ssh backups over rsync.\n#\ncmd_ssh /usr/bin/ssh\n\n# Comment this out to disable syslog support.\n#\ncmd_logger      /usr/bin/logger\n\n# Uncomment this to specify the path to \"du\" for disk usage checks.\n# If you have an older version of \"du\", you may also want to check the\n# \"du_args\" parameter below.\n#\ncmd_du          /usr/bin/du\n\n# Uncomment this to specify the path to rsnapshot-diff.\n#\ncmd_rsnapshot_diff      /usr/bin/rsnapshot-diff\n\n# Specify the path to a script (and any optional arguments) to run right\n# before rsnapshot syncs files\n#\n#cmd_preexec    /path/to/preexec/script\n\n# Specify the path to a script (and any optional arguments) to run right\n# after rsnapshot syncs files\n#\n#cmd_postexec   /path/to/postexec/script\n```\n\n"
    },
    {
      "title": "Retain Previous Backups",
      "level": 3,
      "content": "Rsnapshot allows named backup levels that retain a given number of previous backups.\n\nWhen configuring these, note that the first in the list will be the only one that actually backs up files from the file system AND rotates its own previous backups. The rest will ONLY rotate previous backups, creating its newest backup from the oldest backup created by the previous item on the list. So, the order these are listed in the configuration file are very important.\n\nReplace the default \"BACKUP LEVELS / INTERVALS\" section in the rsnapshot configuration file:\n\n```\n/etc/rsnapshot.conf\n```\n\n```\nretain  hourly  24\nretain  daily   7\nretain  weekly  4\nretain  monthly 12\n```\n\n- When rsnapshot hourly is called, a new backup will be created from the file system, and saved in <snapshot_root>/hourly.0/. The rest of the retained backups will continue to get incremented each time the command is run. So eventually, what was <snapshot_root>/hourly.0, will become <snapshot_root>/hourly.23/. Then the next time the command is run, this will be deleted.\n\n- When rsnapshot daily is called, it will create <snapshot_root>/daily.0/ from the <snapshot_root>/hourly.23/ backup if it exists. Otherwise, rotation works the same way.\n\n- Likewise, when rsnapshot weekly is called, it will create <snapshot_root>/weekly.0/ from the <snapshot_root>/daily.6/ backup if it exists. The pattern follows the same for each additional retain level that is configured.\n\nUsing the above config, you could call:\n\nrsnapshot hourly every hour\n\nrsnapshot daily every day\n\nrsnapshot weekly every week\n\nrsnapshot monthly every month\n\nThis would give you a robust 12 months of backups while minimizing the space taken up by older snapshots.\n\nIf you just wanted to run this same config, but only backup daily, you would need to comment out the hourly backup level. Otherwise calling rsnapshot daily would never actually backup any files since it is not the first on the list.\n\n"
    },
    {
      "title": "Back up",
      "level": 3,
      "content": "This is the section where you tell rsnapshot which files you actually want to back up. You put a backup parameter first, followed by the full path to the directory or network path you are backing up. The third column is the relative path you want to back up to inside the snapshot root.\n\n```\n/etc/rsnapshot.conf\n```\n\n```\n###############################\n### BACKUP POINTS / SCRIPTS ###\n###############################\n\n# LOCALHOST\nbackup  /home/          localhost/\n```\n\nIn this example, backup tells us it is a backup point. /home/ is the full path to the directory we want to take snapshots of, and localhost/ is a directory inside the snapshot_root we are going to put them in. Using the word localhost as the destination directory is just a convention. You might also choose to use the server's fully qualified domain name instead of localhost. If you are taking snapshots of several machines on one dedicated backup server, it is a good idea to use their various hostnames as directories to keep track of which files came from which server.\n\n"
    },
    {
      "title": "Remote Systems",
      "level": 3,
      "content": "In addition to full paths on the local filesystem, you can also backup remote systems using rsync over ssh. If you have ssh installed and enabled - via the cmd_ssh parameter - you can specify a path like:\n\n```\n/etc/rsnapshot.conf\n```\n\n```\n###############################\n### BACKUP POINTS / SCRIPTS ###\n###############################\n\n# example.com\nbackup      root@example.com:/etc/     example.com/\n```\n\nThis behaves fundamentally the same way, but you must take a few extra things into account:\n\n- The ssh daemon must be running on example.com\n\n- You must have access to the account you specify the remote machine, in this case the root user on example.com.\n\n- You must have key-based logins enabled for the root user at example.com, without passphrases. If you wanted to perform backups as another user, you could specify the other user instead of root for the source (i.e. user@domain.com). Please note that allowing remote logins with no passphrase is a security risk that may or may not be acceptable in your situation. Make sure you guard access to the backup server very carefully! For more information on how to set this up, please consult the ssh man page, or a tutorial on using ssh public and private keys. You will find that the key based logins are better in many ways, not just for rsnapshot but for convenience and security in general. One thing you can do to mitigate the potential damage from a backup server breach is to create alternate users on the client machines with uid and gid set to 0, but with a more restrictive shell such as scponly.\n\n- This backup occurs over the network, so it may be slower. Since this uses rsync, this is most noticeable during the first backup. Depending on how much your data changes, subsequent backups should go much, much faster since rsync only sends the differences between files.\n\n"
    },
    {
      "title": "Extra Scripts",
      "level": 3,
      "content": "There is an extra backup_script line. With this parameter, the second column is the full path to an executable backup script, and the third column is the local path you want to store it in (just like with the backup parameter). For example:\n\n```\n/etc/rsnapshot.conf\n```\n\n```\nbackup_script      /usr/local/bin/backup_mysql.sh       localhost/mysql/\n```\n\nIn this example, rsnapshot will run the script /usr/local/bin/backup_mysql.sh in a temp directory, then sync the results into the localhost/mysql/ directory under the snapshot root.\n\nYour backup script simply needs to dump out the contents of whatever it does into its current working directory. It can create as many files and/or directories as necessary, but it should not put its files in any pre-determined path. The reason for this is that rsnapshot creates a temp directory, changes to that directory, runs the backup script, and then syncs the contents of the temp directory to the local path you specified in the third column. A typical backup script would be one that archives the contents of a database. It might look like this:\n\n```\nbackup_mysql.sh\n```\n\n```\n#!/bin/sh\n\n/usr/bin/mysqldump -uroot mydatabase > mydatabase.sql\n/bin/chmod 644 mydatabase.sql\n```\n\n- Make sure the destination path you specify is unique. The backup script will completely overwrite anything in the destination path, so if you tried to specify the same destination twice, you would be left with only the files from the last script. Fortunately, rsnapshot will try to prevent you from doing this when it reads the configuration file.\n- Please remember that these backup scripts will be invoked as the user running rsnapshot. In our example, this is root. Make sure your backup scripts are owned by root, and not writable by anyone else. If you fail to do this, anyone with write access to these backup scripts will be able to put commands in them that will be run as the root user. If they are malicious, they could take over your server.\n\n"
    },
    {
      "title": "Testing the configuration",
      "level": 3,
      "content": "When you have made all your changes, you should verify that the configuration file is syntactically valid, and that all the supporting programs are where you think they are. To do this, run rsnapshot with the configtest argument:\n\n```\n# rsnapshot configtest\n```\n\nIf all is well, it should say Syntax OK. If there is a problem, it should tell you exactly what it is. Make sure your configuration file is using tabs and not spaces, etc.\n\nThe final step to test your configuration is to run rsnapshot in test mode. This will print out a verbose list of the things it will do, without actually doing them. To do a test run, run this command:\n\n```\n# rsnapshot -t hourly\n```\n\nThis tells rsnapshot to simulate an \"hourly\" backup. It should print out the commands it will perform when it runs for real.\n\n"
    },
    {
      "title": "Automation",
      "level": 2,
      "content": "Now that you have your configuration file set up, it is time to set up rsnapshot to be run automatically.\n\nFirst create a service file:\n\n```\n/etc/systemd/system/rsnapshot@.service\n```\n\n```\n[Unit]\nDescription=rsnapshot (%I) backup\n\n[Service]\nType=oneshot\nNice=19\nIOSchedulingClass=idle\nExecStart=/usr/bin/rsnapshot %I\n```\n\nThen create a timer unit for each interval you want the service to run (i.e. hourly, daily, weekly, montly):\n\n```\n/etc/systemd/system/rsnapshot-interval.timer\n```\n\n```\n[Unit]\nDescription=rsnapshot hourly backup\n\n[Timer]\nOnCalendar=\nPersistent=true\nUnit=rsnapshot@interval.service\n\n[Install]\nWantedBy=timers.target\n```\n\nYou can verify your OnCalendar entries are valid and do what you expect (especially if you want to change the above) with:\n\n```\n# systemd-analyze calendar \"Mon *-*-* 04:30:00\"\n```\n\nThen finally, enable/start them and verify that the resulting unit status looks good, and that the timers are scheduled as expected:\n\n```\n# systemctl list-timers rsnapshot*\n```\n\nNow you can wait for the first timer to trigger, or if you want to start one immediately you can do it manually.\n\n"
    },
    {
      "title": "External Drives",
      "level": 3,
      "content": "If the destination drive is in an external enclosure connected via USB or eSATA, it may not have mounted during boot or may otherwise be unmounted at the time rsnapshot is scheduled to begin. If rsnapshot is configured to write to a path that always exists, e.g. /.snapshots, the data will be backed up on whichever hard drive is mounted as the root directory rather than the desired external drive.\n\nTo remedy this situation one must configure rsnapshot to depend upon the disk being mounted to the expected mount point. There are two actions required: alter /etc/fstab and /etc/systemd/system/rsnapshot@.service.\n\nSystemd will read the /etc/fstab file and create unit files for all of the mount points therein. For this setup we need to add one, optionally two, configuration options to the mount point. At the end of the options column for the desired mount point add x-systemd.automount and, if you want the mount point to unmount after inactivity, x-systemd.idle-timeout=10m. The value 10m can be changed to any value you wish. See systemd.automount(5) and systemd.mount(5) for additional details about the options available.\n\nAn example mount point:\n\n```\n/etc/fstab\n```\n\n```\n# /dev/sdd1\nUUID=2848e78d-b05a-4477-a5f0-38f35411c269 /mnt/backups ext4 noauto,nofail,noexec,nouser,nosuid,rw,async,x-systemd.device-timeout=200ms,x-systemd.automount,x-systemd.idle-timeout=10m 0 2\n```\n\nAfter changing /etc/fstab, run a daemon-reload so systemd picks up the changes made. Check that the mount and automount units look correct:\n\n```\n# systemctl show mnt-backups.mount\n```\n\n```\nWhere=/.snapshots\nWhat=/dev/sdd1\nOptions=rw,nosuid,noexec,relatime,x-systemd.automount\nType=ext4\nTimeoutUSec=1h\n...\n```\n\n```\n# systemctl show mnt-backups.automount\n```\n\n```\nWhere=/mnt/backups\nDirectoryMode=0755\n...\n```\n\nFinally, edit /etc/systemd/system/rsnapshot@.service and add the following line in the \"[Unit]\" section:\n\n```\n/etc/systemd/system/rsnapshot@.service\n```\n\n```\n[Unit]\nRequires=mnt-backups.mount\nAfter=mnt-backups.mount\n```\n\nTo ensure everything is configured properly check that the rsnapshot service units now require the mount point:\n\n```\n# systemctl show rsnapshot@daily.service | grep 'Requires='\n```\n\n```\nRequires=sysinit.target system-rsnapshot.slice mnt-backups.mount\n```\n\n"
    },
    {
      "title": "How it works",
      "level": 2,
      "content": "We have a snapshot root under which all backups are stored. In this example, this is the directory /mnt/backups/. Within this directory, other directories are created for the various intervals that have been defined. In the beginning it will be empty, but once rsnapshot has been running for a week, it should look something like this:\n\n```\n[root@localhost]# ls -l /mnt/backups/\ndrwxr-xr-x    7 root     root         4096 Dec 28 00:00 daily.0\ndrwxr-xr-x    7 root     root         4096 Dec 27 00:00 daily.1\ndrwxr-xr-x    7 root     root         4096 Dec 26 00:00 daily.2\ndrwxr-xr-x    7 root     root         4096 Dec 25 00:00 daily.3\ndrwxr-xr-x    7 root     root         4096 Dec 24 00:00 daily.4\ndrwxr-xr-x    7 root     root         4096 Dec 23 00:00 daily.5\ndrwxr-xr-x    7 root     root         4096 Dec 22 00:00 daily.6\ndrwxr-xr-x    7 root     root         4096 Dec 29 00:00 hourly.0\ndrwxr-xr-x    7 root     root         4096 Dec 28 20:00 hourly.1\ndrwxr-xr-x    7 root     root         4096 Dec 28 16:00 hourly.2\ndrwxr-xr-x    7 root     root         4096 Dec 28 12:00 hourly.3\ndrwxr-xr-x    7 root     root         4096 Dec 28 08:00 hourly.4\ndrwxr-xr-x    7 root     root         4096 Dec 28 04:00 hourly.5\n```\n\nInside each of these directories is a full backup of that point in time. The destination directory paths you specified under the backup and backup_script parameters get stuck directly under these directories. In the example:\n\n```\nbackup          /etc/           localhost/\n```\n\nThe /etc/ directory will initially get backed up into /mnt/backups/hourly.0/localhost/etc/\n\nEach subsequent time rsnapshot is run with the hourly command, it will rotate the hourly.X directories, and then copy the contents of the hourly.0 directory (using hard links) into hourly.1.\n\nWhen rsnapshot daily is run, it will rotate all the daily.X directories, then copy the contents of hourly.5 into daily.0.\n\nhourly.0 will always contain the most recent snapshot, and daily.6 will always contain a snapshot from a week ago. Unless the files change between snapshots, the full backups are really just multiple hard links to the same files. Thus, if your /etc/passwd file does not change in a week, hourly.0/localhost/etc/passwd and daily.6/localhost/etc/passwd will literally be the same exact file. This is how rsnapshot can be so efficient on space. If the file changes at any point, the next backup will unlink the hard link in hourly.0, and replace it with a brand new file. This will now take double the disk space it did before, but it is still considerably less than it would be to have full unique copies of this file 13 times over.\n\nRemember that if you are using different intervals than the ones in this example, the first interval listed is the one that gets updates directly from the main filesystem. All subsequently listed intervals pull from the previous intervals. For example, if you had weekly, monthly, and yearly intervals defined (in that order), the weekly ones would get updated directly from the filesystem, the monthly ones would get updated from weekly, and the yearly ones would get updated from monthly.\n\n"
    }
  ]
}