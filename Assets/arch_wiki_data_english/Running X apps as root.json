{
  "title": "Running X apps as root",
  "url": "https://wiki.archlinux.org/title/Running_X_apps_as_root",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Avoid running graphical applications as root if possible, see #Circumvent running graphical applications as root.\n\n"
    },
    {
      "title": "sudoedit",
      "level": 3,
      "content": "To edit files as root, use sudoedit.\n\n"
    },
    {
      "title": "GVFS",
      "level": 3,
      "content": "Access to privileged files and directories is possible through GVFS by specifying the admin backend in the URI scheme[1][2], e.g.:\n\n```\n$ nautilus admin:///root/\n```\n\nor\n\n```\n$ gedit admin:///etc/fstab\n```\n\n"
    },
    {
      "title": "Xorg",
      "level": 2,
      "content": "By default, and for security reasons, root will be unable to connect to a non-root user's X server. There are multiple ways of allowing root to do so however, if necessary.\n\nThe proper, recommended way to run GUI applications under X with elevated privileges is to create a Polkit policy, as shown in this forum post. This should however \"only be used for legacy programs\", as pkexec(1) reminds. Applications should rather \"defer the privileged operations to an auditable, self-contained, minimal piece of code that gets executed after doing a privilege escalation, and gets dropped when not needed\"[3]. This may be the object of a bug report to the upstream project.\n\n"
    },
    {
      "title": "Punctual methods",
      "level": 3,
      "content": "These methods wrap the application in an elevation framework and drop the acquired privileges once it exits:\n\n- kdesu(1) (from kde-cli-tools)\n\n```\n$ kdesu application\n```\n\n- sudo (must be properly configured)\n\n```\n$ sudo application\n```\n\n- suxAUR (wrapper around su which will transfer your X credentials)\n\n```\n$ sux root application\n```\n\n"
    },
    {
      "title": "Alternate methods",
      "level": 3,
      "content": "These methods will allow root to connect to a non-root user's X server, but present varying levels of security risks, especially if you run ssh. If you are behind a firewall, you may consider them to be safe enough for your requirements.\n\n"
    },
    {
      "title": "Xhost",
      "level": 4,
      "content": "Xhost can be used to temporarily allow root access.\n\n"
    },
    {
      "title": "Permanently allow root access",
      "level": 4,
      "content": "```\nsession         optional        pam_xauth.so\n```\n\nto both /etc/pam.d/su and /etc/pam.d/su-l. Then switch to your root user using su or su -.\n\nAdd the following line to /etc/profile:\n\n```\n/etc/profile\n```\n\n```\nexport XAUTHORITY=/home/username/.Xauthority\n```\n\nThis will permanently allow root to connect to a non-root user's X server.\n\nOr, merely specify a particular app:\n\n```\n# XAUTHORITY=/home/username/.Xauthority appname\n```\n\nwhere appname is the name of the particular app. (e.g. kwrite)\n\n"
    },
    {
      "title": "Wayland",
      "level": 2,
      "content": "Trying to run a graphical application as root via su, sudo or pkexec in a Wayland session (e.g. GParted or Gedit), will fail with an error similar to this:\n\n```\n# gedit\n```\n\n```\nNo protocol specified\nUnable to init server: Could not connect: Connection refused\n\n(gedit:2349): Gtk-WARNING **: cannot open display: :0\n```\n\nBefore Wayland, running GUI applications with elevated privileges could be properly implemented by creating a Polkit policy, or more dangerously done by running the command in a terminal by prepending the command with sudo; but under (X)Wayland this does not work anymore as the default has been made to only allow the user who started the X server to connect clients to it (see the bug report and the upstream commits it refers to).\n\nAvoid running graphical applications as root if possible, see #Circumvent running graphical applications as root.\n\nA more versatile though more insecure workaround allows any graphical application to be run as root #Using xhost.\n\n"
    },
    {
      "title": "Using xhost",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nA more versatile —though much less secure— workaround is to use xhost to temporarily allow the root user to access the local user's X session[4]. To do so, execute the following command as the current (unprivileged) user:\n\n```\n$ xhost si:localuser:root\n```\n\nTo remove this access after the application has been closed:\n\n```\n$ xhost -si:localuser:root\n```\n\n"
    },
    {
      "title": "Using sudo -E",
      "level": 3,
      "content": "You can launch an application with:\n\n```\n$ sudo -E program\n```\n\nwhich preserves environment variables like WAYLAND_DISPLAY.\n\nIf you want the HOME environment variable to be set to the target user, use:\n\n```\n$ sudo -EH program\n```\n\nSee sudo(8).\n\n"
    },
    {
      "title": "Using pkexec",
      "level": 3,
      "content": "You can launch GUI an application with:\n\n```\n$ pkexec env WAYLAND_DISPLAY=\"$XDG_RUNTIME_DIR/$WAYLAND_DISPLAY\" XDG_RUNTIME_DIR=/run/user/0 program\n```\n\nwhich preserves the environment variable WAYLAND_DISPLAY.\n\n"
    }
  ]
}