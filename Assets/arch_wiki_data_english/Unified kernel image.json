{
  "title": "Unified kernel image",
  "url": "https://wiki.archlinux.org/title/Unified_kernel_image",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "A unified kernel image (UKI) is a single executable which can be booted directly from UEFI firmware, or automatically sourced by boot loaders with little or no configuration. It is the combination of a UEFI boot stub program like systemd-stub(7), a Linux kernel image, an initrd, and further resources in a single UEFI PE file.\n\nThis file, and therefore all these elements can then easily be signed for use with Secure Boot.\n\n"
    },
    {
      "title": "Preparing a unified kernel image",
      "level": 2,
      "content": "There are several ways to generate a UKI image and install it to the proper place (the esp/Linux directory). Currently several tools compete for doing this functionality, so choose one of the following based on your needs and your likings.\n\n- You only need to perform one of the subsections.\n- It is possible to place the UKI in the fallback boot path esp/EFI/BOOT/BOOTx64.EFI (or BOOTIA32.EFI for 32-bit IA32 UEFI). Using the fallback boot path avoids need to explicitly create a UEFI boot entry in the NVRAM.\n\n"
    },
    {
      "title": "mkinitcpio",
      "level": 3,
      "content": "mkinitcpio will assemble the UKI itself unless systemd-ukify is installed. In which case, UKI creation will be offloaded to ukify unless this is explicitly disabled with the --no-ukify option.\n\n"
    },
    {
      "title": "Kernel command line",
      "level": 4,
      "content": "mkinitcpio supports reading kernel parameters from command line files in the /etc/cmdline.d directory. Mkinitcpio will concatenate the contents of all files with a .conf extension in this directory and use them to generate the kernel command line. Any lines in the command line file that start with a # character are treated as comments and ignored by mkinitcpio. Take care to remove entries pointing to microcode and initramfs.\n\nFor example:\n\n```\n/etc/cmdline.d/root.conf\n```\n\n```\nroot=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw\n```\n\nNote: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nNote: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\n- If your root file system is on a non-default Btrfs subvolume, make sure to set necessary mount flags in rootflags. For example, if your system subvolume ID is 256, you should add rootflags=subvolid=256 to the kernel command line. See Btrfs#Mounting subvolume as root.\n- It is not necessary to copy all flags in /etc/fstab since rootflags is only used during boot. systemd-remount-fs.service(8) will read /etc/fstab, remount and apply flags listed there automatically after boot.\n\n```\n/etc/cmdline.d/security.conf\n```\n\n```\n# enable apparmor\nlsm=landlock,lockdown,yama,integrity,apparmor,bpf audit=1 audit_backlog_limit=256\n```\n\nAlternatively, /etc/kernel/cmdline can be used to configure the kernel command line.\n\nFor example:\n\n```\n/etc/kernel/cmdline\n```\n\n```\nroot=UUID=0a3407de-014b-458b-b5c1-848e92a327a3 rw quiet bgrt_disable\n```\n\n- The root= parameter may be omitted if the root partition is automounted by systemd.\n- The bgrt_disable parameter tells Linux to not display the OEM logo after loading the ACPI tables.\n\n"
    },
    {
      "title": ".preset file",
      "level": 4,
      "content": "Next, modify /etc/mkinitcpio.d/linux.preset, or the preset that you are using, as follows, with the appropriate mount point of the EFI system partition:\n\n- Un-comment (i.e. remove #) the PRESET_uki= parameter for each item in PRESETS=,\n- Optionally, comment out PRESET_image= to avoid storing a redundant initramfs-*.img file,\n- Optionally, add or un-comment the --splash parameter to each PRESET_options= line for which you want to add a splash image.\n\nHere is a working example linux.preset for the linux kernel and the Arch splash screen.\n\n```\n/etc/mkinitcpio.d/linux.preset\n```\n\n```\n# mkinitcpio preset file for the 'linux' package\n\n#ALL_config=\"/etc/mkinitcpio.conf\"\nALL_kver=\"/boot/vmlinuz-linux\"\n\nPRESETS=('default' 'fallback')\n\n#default_config=\"/etc/mkinitcpio.conf\"\n#default_image=\"/boot/initramfs-linux.img\"\ndefault_uki=\"esp/EFI/Linux/arch-linux.efi\"\ndefault_options=\"--splash=/usr/share/systemd/bootctl/splash-arch.bmp\"\n\n#fallback_config=\"/etc/mkinitcpio.conf\"\n#fallback_image=\"/boot/initramfs-linux-fallback.img\"\nfallback_uki=\"esp/EFI/Linux/arch-linux-fallback.efi\"\nfallback_options=\"-S autodetect\"\n```\n\n- If all you want to do is boot from the unified kernel images, you can mount the ESP to /efi and only those need to reside on the ESP partition.\n- You can append --cmdline /etc/kernel/fallback_cmdline to fallback_options to use a different cmdline than above for the fallback image (e.g. without quiet).\n- To omit embedding the kernel command line, add --no-cmdline to PRESET_options=. Kernel parameters will need to be passed via the boot loader.\n\n"
    },
    {
      "title": "pacman hook",
      "level": 4,
      "content": "Updates to systemd-stub (part of systemd), microcode (both intel-ucode and amd-ucode), and linux kernel will automatically trigger a UKI rebuild. But you may want to review other pacman hooks in the /etc/pacman.d/hooks/ directory, such as the one for the NVIDIA driver.\n\n"
    },
    {
      "title": "Building the UKIs",
      "level": 4,
      "content": "Finally, make sure that the directory for the UKIs exists and regenerate the initramfs. For example, for the linux preset:\n\n```\n# mkdir -p esp/EFI/Linux\n# mkinitcpio -p linux\n```\n\nOptionally, remove any leftover initramfs-*.img from /boot or /efi.\n\n"
    },
    {
      "title": "kernel-install",
      "level": 3,
      "content": "Kernel-install is another alternative that is part of systemd and requires systemd-ukify to build unified kernel images. Make sure kernel-install is properly set up.\n\nTo generate UKIs, install systemd-ukify and set the kernel-install layout to uki:\n\n```\n/etc/kernel/install.conf\n```\n\n```\nlayout=uki\n```\n\nAny configuration for #ukify must be done in /etc/kernel/uki.conf in order to be used by kernel-install, e.g.\n\n```\n/etc/kernel/uki.conf\n```\n\n```\n[UKI]\nSplash=/usr/share/systemd/bootctl/splash-arch.bmp\n```\n\nNote: **not** \n\nAlternatively, for mkinitcpio to generate the UKI, set it as the default uki_generator:\n\n```\n/etc/kernel/install.conf\n```\n\n```\nlayout=uki\nuki_generator=mkinitcpio\n```\n\nIn that case, systemd-ukify is not necessary. You can also set a different initrd_generator, see kernel-install(8).\n\nReinstall the kernel packages that you use in order for the change to take effect.\n\n"
    },
    {
      "title": "dracut",
      "level": 3,
      "content": "See dracut#Unified kernel image and dracut#Generate a new initramfs on kernel upgrade.\n\n"
    },
    {
      "title": "ukify",
      "level": 3,
      "content": "Install the systemd-ukify package. To use the automatic signing functions, additionally install sbsigntools. Since ukify cannot generate an initramfs on its own, if required, it must be generated using, e.g., dracut, mkinitcpio or booster.\n\nA minimal working example can look something like this:\n\n```\n# ukify build --linux=/boot/vmlinuz-linux \\\n              --initrd=/boot/initramfs-linux.img \\\n              --cmdline=\"quiet rw\"\n```\n\nNote: **first** \n\n- To skip having to copy over the resulting EFI executable to the EFI System Partition, use the --output=esp/EFI/Linux/filename.efi command line option to ukify.\n- When specifying the --cmdline option, one can specify a file name to read the kernel parameters from (e.g. /etc/kernel/cmdline by adding the @ symbol before the file name, like --cmdline=@/path/to/cmdline.\n\nFor further information, see ukify(1).\n\n"
    },
    {
      "title": "Manually",
      "level": 3,
      "content": "Put the kernel command line you want to use in a file, and create the bundle file using objcopy(1).\n\nFor microcode, first concatenate the microcode file and your initrd, as follows:\n\n```\n$ cat esp/cpu_manufacturer-ucode.img esp/initramfs-linux.img > /tmp/combined_initrd.img\n```\n\nWhen building the unified kernel image, pass in /tmp/combined_initrd.img as the initrd. This file can be removed afterwards.\n\n```\n$ align=\"$(objdump -p /usr/lib/systemd/boot/efi/linuxx64.efi.stub | awk '{ if ($1 == \"SectionAlignment\"){print $2} }')\"\n$ align=$((16#$align))\n$ osrel_offs=\"$(objdump -h \"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" | awk 'NF==7 {size=strtonum(\"0x\"$3); offset=strtonum(\"0x\"$4)} END {print size + offset}')\"\n$ osrel_offs=$((osrel_offs + \"$align\" - osrel_offs % \"$align\"))\n$ cmdline_offs=$((osrel_offs + $(stat -Lc%s \"/usr/lib/os-release\")))\n$ cmdline_offs=$((cmdline_offs + \"$align\" - cmdline_offs % \"$align\"))\n$ splash_offs=$((cmdline_offs + $(stat -Lc%s \"/etc/kernel/cmdline\")))\n$ splash_offs=$((splash_offs + \"$align\" - splash_offs % \"$align\"))\n$ initrd_offs=$((splash_offs + $(stat -Lc%s \"/usr/share/systemd/bootctl/splash-arch.bmp\")))\n$ initrd_offs=$((initrd_offs + \"$align\" - initrd_offs % \"$align\"))\n$ linux_offs=$((initrd_offs + $(stat -Lc%s \"initrd-file\")))\n$ linux_offs=$((linux_offs + \"$align\" - linux_offs % \"$align\"))\n\n$ objcopy \\\n    --add-section .osrel=\"/usr/lib/os-release\" --change-section-vma .osrel=$(printf 0x%x $osrel_offs) \\\n    --add-section .cmdline=\"/etc/kernel/cmdline\" \\\n    --change-section-vma .cmdline=$(printf 0x%x $cmdline_offs) \\\n    --add-section .splash=\"/usr/share/systemd/bootctl/splash-arch.bmp\" \\\n    --change-section-vma .splash=$(printf 0x%x $splash_offs) \\\n    --add-section .initrd=\"initrd-file\" \\\n    --change-section-vma .initrd=$(printf 0x%x $initrd_offs) \\\n    --add-section .linux=\"vmlinuz-file\" \\\n    --change-section-vma .linux=$(printf 0x%x $linux_offs) \\\n    \"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" \"linux.efi\"\n```\n\nA few things to note:\n\n- The offsets are dynamically calculated so no sections overlap, as recommended in [1].\n- The sections are aligned to what the SectionAlignment field of the PE stub indicates (usually 0x1000).\n- The kernel image must be in the last section, to prevent in-place decompression from overwriting the sections that follow, as stated in [2].\n\nAfter creating the image, copy it to the EFI system partition:\n\n```\n# cp linux.efi esp/EFI/Linux/\n```\n\n"
    },
    {
      "title": "sbctl",
      "level": 3,
      "content": "sbctl provides a kernel-install script, a mkinitcpio post-hook, and pacman hooks to sign updated binaries.\n\n"
    },
    {
      "title": "mkinitcpio",
      "level": 3,
      "content": "By using a mkinitcpio post hook, the generated unified kernel images can be signed for Secure Boot. Create the following file and make it executable:\n\n```\n/etc/initcpio/post/uki-sbsign\n```\n\n```\n#!/usr/bin/env bash\n\nuki=\"$3\"\n[[ -n \"$uki\" ]] || exit 0\n\nkeypairs=(/path/to/db.key /path/to/db.crt)\n\nfor (( i=0; i<${#keypairs[@]}; i+=2 )); do\n    key=\"${keypairs[$i]}\" cert=\"${keypairs[(( i + 1 ))]}\"\n    if ! sbverify --cert \"$cert\" \"$uki\" &>/dev/null; then\n        sbsign --key \"$key\" --cert \"$cert\" --output \"$uki\" \"$uki\"\n    fi\ndone\n```\n\nReplace /path/to/db.key and /path/to/db.crt with the paths to the key pair you want to use for signing the image.\n\n"
    },
    {
      "title": "ukify",
      "level": 3,
      "content": "Install sbsigntools and specify --secureboot-private-key and --secureboot-certificate in /etc/kernel/uki.conf.\n\n"
    },
    {
      "title": "Limine",
      "level": 3,
      "content": "Limine does not automatically detect unified kernel images (UKIs). However, limine.conf can be manually configured to load them.\n\nExample 1: Booting a UKI from the default EFI system partition\n\nIf a UKI file is stored in esp/EFI/Linux/, add the following configuration to limine.conf:\n\n```\nlimine.conf\n```\n\n```\n/Arch Linux\n  protocol: efi\n  path: boot():/EFI/Linux/arch-linux.efi\n```\n\nExample 2: Booting a UKI from another partition\n\nIf a UKI file is located on a different FAT32 partition, use guid(PARTUUID) with the PARTUUID instead:\n\n```\nlimine.conf\n```\n\n```\n/Arch Linux\n  protocol: efi\n  path: guid(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx):/EFI/Linux/arch-linux.efi\n```\n\nFor more details about supported paths and configuration options, see the Limine Paths documentation.\n\n"
    },
    {
      "title": "systemd-boot",
      "level": 3,
      "content": "systemd-boot searches in esp/EFI/Linux/ for unified kernel images, and there is no further configuration needed. See sd-boot(7) § FILES\n\n"
    },
    {
      "title": "rEFInd",
      "level": 3,
      "content": "rEFInd will autodetect unified kernel images on your EFI system partition, and is capable of loading them. They can also be manually specified in refind.conf, by default located at:\n\n```\nesp/EFI/refind/refind.conf\n```\n\n```\nmenuentry \"Arch Linux\" {\n    icon \\EFI\\refind\\icons\\os_arch.png\n    ostype Linux\n    loader \\EFI\\Linux\\arch-linux.efi\n}\n```\n\nKeep in mind that no kernel parameters from esp/EFI/refind_linux.conf will be passed when booting this way. If the UKI was generated without a .cmdline section, specify the kernel parameters in the menu entry with an options line.\n\n"
    },
    {
      "title": "GRUB",
      "level": 3,
      "content": "GRUB can chainload UKIs as described in GRUB#Chainloading a unified kernel image.\n\n"
    },
    {
      "title": "Directly from UEFI",
      "level": 3,
      "content": "efibootmgr can be used to create a UEFI boot entry for the .efi file:\n\n```\n# efibootmgr --create --disk /dev/sdX --part partition_number --label \"Arch Linux\" --loader '\\EFI\\Linux\\arch-linux.efi' --unicode\n```\n\nSee efibootmgr(8) for an explanation of the options.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- All Systems Go! talk on UKIs\n- Unified kernel image specification\n- mkinitcpio v31 and UEFI stubs\n\n"
    }
  ]
}