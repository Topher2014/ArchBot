{
  "title": "Acpi hotkeys",
  "url": "https://wiki.archlinux.org/title/Acpi_hotkeys",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- ACPI modules\n- DSDT\n\nacpid2 is a flexible and extensible daemon for delivering ACPI events. When an event occurs, it executes programs to handle the event. These events are triggered by certain actions, such as:\n\n- Pressing special keys, including the Power/Sleep/Suspend button\n- Closing a notebook lid\n- (Un)Plugging an AC power adapter from a notebook\n- (Un)Plugging phone jack etc.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the acpid package. Then start/enable acpid.service.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "acpid comes with a number of predefined actions for triggered events, such as what should happen when you press the Power button on your machine. By default, these actions are defined in /etc/acpi/handler.sh, which is executed after any ACPI events are detected (as determined by /etc/acpi/events/anything).\n\n"
    },
    {
      "title": "Determine the event",
      "level": 3,
      "content": "Unfortunately, not every computer labels ACPI events in the same way. For example, the Sleep button may be identified on one machine as SLPB and on another as SBTN.\n\nTo determine how your buttons or Fn shortcuts are recognized, run the following command:\n\n```\n# journalctl -f\n```\n\nNow press the Power button and/or Sleep button (e.g. Fn+Esc) on your machine. The result should look something this:\n\n```\nlogger: ACPI action undefined: PBTN\nlogger: ACPI action undefined: SBTN\n```\n\nIf that does not work, run:\n\n```\n# acpi_listen\n```\n\nor with openbsd-netcat:\n\n```\n$ netcat -U /var/run/acpid.socket\n```\n\nThen press the power button and you will see something like this:\n\n```\nbutton/power PBTN 00000000 00000b31\n```\n\nThe output of acpi_listen is sent to /etc/acpi/handler.sh as $1, $2 , $3 & $4 parameters. Example:\n\n```\n$1 button/power\n$2 PBTN\n$3 00000000\n$4 00000b31\n```\n\n"
    },
    {
      "title": "Define event action",
      "level": 3,
      "content": "The following is a brief example of one such action. In this case, when the Sleep button is pressed, acpid runs the command echo -n mem >/sys/power/state which should place the computer into a sleep (suspend) state:\n\n```\nbutton/sleep)\n    case \"$2\" in\n        SLPB) echo -n mem >/sys/power/state ;;\n        *)    logger \"ACPI action undefined: $2\" ;;\n    esac\n    ;;\n```\n\nThe event may be different on different machines. For example if Sleep button is actually recognized as SBTN, rather than the SLPB label specified in the default /etc/acpi/handler.sh. In order for Sleep function to work properly on this machine, we would need to replace SLPB) with SBTN).\n\nUsing this information as a base, you can easily customize the /etc/acpi/handler.sh file to execute a variety of commands depending on which event is triggered. See the #Tips and tricks section below for other commonly used commands.\n\n"
    },
    {
      "title": "Alternative configuration",
      "level": 3,
      "content": "By default, all ACPI events are passed through the /etc/acpi/handler.sh script. This is due to the ruleset outlined in /etc/acpi/events/anything:\n\n```\n# Pass all events to our one handler script\nevent=.*\naction=/etc/acpi/handler.sh %e\n```\n\nWhile this works just fine as it is, some users may prefer to define event rules and actions in their own self-contained scripts. The following is an example of how to use an individual event file and corresponding action script:\n\nAs root, create the following files:\n\n```\n/etc/acpi/events/sleep-button\n```\n\n```\nevent=button/sleep.*\naction=/etc/acpi/actions/sleep-button.sh %e\n```\n\n```\n/etc/acpi/actions/sleep-button.sh\n```\n\n```\n#!/bin/sh\ncase \"$3\" in\n    SLPB) echo -n mem >/sys/power/state ;;\n    *)    logger \"ACPI action undefined: $3\" ;;\nesac\n```\n\nMake the script executable, and reload the acpid.service to get acpid to recognize the changes to these files.\n\nUsing this method, it is easy to create any number of individual event/action scripts.\n\n"
    },
    {
      "title": "Example events",
      "level": 3,
      "content": "The following are examples of events that can be used in the /etc/acpi/handler.sh script. These examples should be modified so that they apply your specific environment e.g. changing the event variable names interpreted by acpi_listen.\n\nTo set the laptop screen brightness when plugged in power or not (the numbers might need to be adjusted, see /sys/class/backlight/acpi_video0/max_brightness):\n\n```\nac_adapter)\n    case \"$2\" in\n        AC*|AD*)\n            case \"$4\" in\n                00000000)\n                    echo -n 50 > /sys/class/backlight/acpi_video0/brightness\n                    ;;\n                00000001)\n                    echo -n 100 > /sys/class/backlight/acpi_video0/brightness\n                    ;;\n            esac\n```\n\n"
    },
    {
      "title": "Enabling volume control",
      "level": 3,
      "content": "Find out the acpi identity of the volume buttons (see above) and substitute it for the acpi events in the files below.\n\n```\n/etc/acpi/events/vol-d\n```\n\n```\nevent=button/volumedown\naction=amixer set Master 5-\n```\n\n```\n/etc/acpi/events/vol-m\n```\n\n```\nevent=button/mute\naction=amixer set Master toggle\n```\n\n```\n/etc/acpi/events/vol-u\n```\n\n```\nevent=button/volumeup\naction=amixer set Master 5+\n```\n\n```\n# sudo -u user XDG_RUNTIME_DIR=/run/user/user_id pactl\n```\n\nSee also [2].\n\n"
    },
    {
      "title": "Enabling backlight control",
      "level": 3,
      "content": "Similar to volume control, acpid also enables you to control screen backlight. To achieve this you write some handler, like this:\n\n```\n/etc/acpi/handlers/bl\n```\n\n```\n#!/bin/sh\nbl_dev=/sys/class/backlight/acpi_video0\nstep=1\n\ncase $1 in\n  -) echo $(($(< $bl_dev/brightness) - $step)) >$bl_dev/brightness;;\n  +) echo $(($(< $bl_dev/brightness) + $step)) >$bl_dev/brightness;;\nesac\n```\n\nThe event in acpi_listen should be something like:\n\n```\nvideo/brightnessdown BRTDN 00000087 00000000\nvideo/brightnessup BRTUP 00000086 00000000\n```\n\nConnect them to ACPI events:\n\n```\n/etc/acpi/events/bl_d\n```\n\n```\nevent=video/brightnessdown.*\naction=/etc/acpi/handlers/bl -\n```\n\n```\n/etc/acpi/events/bl_u\n```\n\n```\nevent=video/brightnessup.*\naction=/etc/acpi/handlers/bl +\n```\n\n"
    },
    {
      "title": "Enabling Wi-Fi toggle",
      "level": 3,
      "content": "You can also create a simple wireless-power switch by pressing the WLAN button. Example of event:\n\n```\n/etc/acpi/events/wlan\n```\n\n```\nevent=button/wlan\naction=/etc/acpi/handlers/wlan\n```\n\nand its handler:\n\n```\n/etc/acpi/handlers/wlan\n```\n\n```\n#!/bin/sh\nrf=/sys/class/rfkill/rfkill0\n\ncase $(< $rf/state) in\n  0) echo 1 >$rf/state;;\n  1) echo 0 >$rf/state;;\nesac\n```\n\n"
    },
    {
      "title": "Disabling ordinary key events",
      "level": 3,
      "content": "Since b336c96 acpid generates events for some ordinary key presses, such as arrow keys. This results in event/handler spam, visible in system logs or top. Events for these buttons can be dropped in the configuration file:\n\n```\n/etc/acpi/events/buttons\n```\n\n```\nevent=button/(up|down|left|right|kpenter)\naction=<drop>\n```\n\n"
    },
    {
      "title": "Getting user name of the current display",
      "level": 3,
      "content": "To run commands depending on Xorg, defining the X display as well as the MIT magic cookie file (via XAUTHORITY) is required. Latter is a security credential providing read and write access to the X server, display, and any input devices (see xauth(1)).\n\nSee [3] for an example function when using xinitrc.\n\n- If the LCD backlight is not turned off when the lid is closed, you may do so manually by running getXuser xset dpms force off and getXuser xset dpms force on respectively on lid close and lid open events. Should the display be blanked, but the backlight left on, instead use vbetool with vbetool dpms off and vbetool dpms on. See also XScreenSaver#Configuration.\n- When using who or w, make sure /run/utmp is created at boot-time. See utmp(5) for details.\n\n"
    },
    {
      "title": "Connect to acpid socket",
      "level": 4,
      "content": "In addition to rule files, acpid accepts connections on a UNIX domain socket, by default /var/run/acpid.socket. User applications may connect to this socket.\n\n```\n#!/bin/bash\ncoproc acpi_listen\ntrap 'kill $COPROC_PID' EXIT\n\nwhile read -u \"${COPROC[0]}\" -a event; do\n    handler.sh \"${event[@]}\"\ndone\n```\n\nWhere handler.sh can be a script similar to /etc/acpi/handler.sh.\n\n"
    },
    {
      "title": "Disable keyboard and touchpad while laptop lid is closed under Wayland",
      "level": 3,
      "content": "This example uses inhibited property of input device drivers as a replacement for xinput which does not work under Wayland.\n\n```\nbutton/lid)\n\t\tif echo \"$3\" | grep -iq \"open\"; then\n\t\t\techo 'LID opened'\n\t\t\tdisabled=0\n\t\tfi\n\t\tif echo \"$3\" | grep -iq \"close\"; then\n\t\t\techo 'LID closed'\n\t\t\tdisabled=1\n\t\tfi\n\t\tfind /sys/devices/platform/i8042/serio* -prune -type d | while IFS= read -r serionumber; do\n\t\t\tfind $serionumber/input/* -prune -type d | while IFS= read -r inputdevicepath; do\n\t\t\t\tif grep -q -i -e \"keyboard\" -e \"touchpad\" $inputdevicepath/name; then\n\t\t\t\t\tlogger \"found $(cat $inputdevicepath/name) and set to $disabled\"\n\t\t\t\t\techo $disabled > $inputdevicepath/inhibited\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\t;;\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- acpid homepage\n- Gentoo:ACPI#Configuration\n\n"
    }
  ]
}