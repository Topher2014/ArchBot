{
  "title": "Firefox privacy",
  "url": "https://wiki.archlinux.org/title/Firefox_privacy",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Firefox\n- Tor\n- Browser extensions\n- Browser Plugins\n- Firefox/Tweaks\n- Firefox/Profile on RAM\n\nThis article overviews how to configure Firefox to enhance security and privacy.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The following are privacy-focused tweaks to prevent browser fingerprinting and tracking.\n\n"
    },
    {
      "title": "Tracking protection",
      "level": 3,
      "content": "Firefox gained an option for Enhanced Tracking Protection. It can be enabled in different levels via the GUI Settings > Privacy & Security, or by setting about:config:\n\n- privacy.trackingprotection.enabled true\n\nApart from privacy benefits, enabling tracking protection may also reduce load time by 44%.\n\nNote that this is not a replacement for ad blocking extensions such as uBlock Origin and it may or may not work with Firefox forks. If you are already running such an ad blocker with the correct lists, tracking protection might be redundant.\n\n"
    },
    {
      "title": "Anti-fingerprinting",
      "level": 3,
      "content": "The Firefox tracking protection blocks a list of known \"fingerprinters\" when your privacy settings are set to Standard (the default) or Strict. Fingerprinting Protection is a different, experimental feature under heavy development in Firefox.\n\nMozilla has started an anti-fingerprinting project in Firefox, as part of a project to upstream features from Tor Browser. Many of these anti-fingerprinting features are enabled by this setting in the about:config:\n\n- privacy.resistFingerprinting true\n\nFor more information see: Firefox's protection against fingerprinting.\n\n"
    },
    {
      "title": "Change browser time zone",
      "level": 3,
      "content": "The time zone of your system can be used in browser fingerprinting. To set Firefox's time zone to UTC launch it as:\n\n```\n$ TZ=UTC firefox\n```\n\nOr, set a script to launch the above (for example, at /usr/local/bin/firefox).\n\n"
    },
    {
      "title": "Change user agent and platform",
      "level": 3,
      "content": "You can override Firefox's user agent with the general.useragent.override preference in about:config.\n\nThe value for the key is your browser's user agent. Select a known common one.\n\n- The value Mozilla/5.0 (Windows NT 10.0; rv:102.0) Gecko/20100101 Firefox/102.0 is used as the user agent for the Tor browser, thus being very common.\n- The #Anti-fingerprinting option also enables the Tor browser user agent and changes your browser platform automatically.\n\nTo change the platform for firefox, add the following string key in about:config:\n\n```\ngeneral.platform.override\n```\n\nSelect a known common platform that corresponds with your user agent.\n\n"
    },
    {
      "title": "WebRTC exposes LAN IP address",
      "level": 3,
      "content": "To prevent websites from getting your local IP address via WebRTC's peer-to-peer (and JavaScript), open about:config and set:\n\n- media.peerconnection.ice.default_address_only to true\n- media.peerconnection.enabled to false. (only if you want to completely disable WebRTC)\n\nYou can use this WebRTC test page and WebRTC IP Leak VPN / Tor IP Test to confirm that your internal/external IP address is no longer leaked.\n\n"
    },
    {
      "title": "Disable HTTP referer",
      "level": 3,
      "content": "HTTP referer is an optional HTTP header field that identifies the address of the previous webpage from which a link to the currently requested page was followed.\n\nSet network.http.sendRefererHeader to 0 or 1, depending on your preferences.\n\n"
    },
    {
      "title": "Disable connection tests",
      "level": 3,
      "content": "By default Firefox attempts to connect to Amazon and/or Akamai servers at regular intervals, to test your connection. For example a hotel, restaurant or other business might require you to enter a password to access the internet. If such a Captive portal exists and is blocking traffic this feature blocks all other connection attempts. This may leak your usage habits.\n\nTo disable Captive Portal testing, in about:config set:\n\n- network.captive-portal-service.enabled to false\n\n"
    },
    {
      "title": "Disable telemetry",
      "level": 3,
      "content": "Set toolkit.telemetry.enabled to false and/or disable it under Preferences > Privacy & Security > Firefox Data Collection and Use.\n\n"
    },
    {
      "title": "Enable \"Do Not Track\" header",
      "level": 3,
      "content": "Set privacy.donottrackheader.enabled to true or toggle it in Preferences > Privacy & Security > Tracking Protection\n\n"
    },
    {
      "title": "Disable/enforce 'Trusted Recursive Resolver'",
      "level": 3,
      "content": "Firefox 60 introduced a feature called Trusted Recursive Resolver (TRR). It circumvents DNS servers configured in your system, instead sending all DNS requests over HTTPS to Cloudflare servers. While this is significantly more secure (as \"classic\" DNS requests are sent in plain text over the network, and everyone along the way can snoop on these), this also makes all your DNS requests readable by Cloudflare, providing TRR servers.\n\n- If you trust DNS servers you have configured yourself more than Cloudflare's, you can disable TRR in about:config by setting network.trr.mode (integer, create it if it does not exist) to 5. (A value of 0 means disabled by default, and might be overridden by future updates - a value of 5 is disabled by choice and will not be overridden.)\n- If you trust Cloudflare DNS servers and would prefer extra privacy (thanks to encrypted DNS requests), you can enforce TRR by setting network.trr.mode to 3 (which completely disables classic DNS requests) or 2 (uses TRR by default, falls back to classic DNS requests if that fails). Keep in mind that if you are using any intranet websites or trying to access computers in your local networks by their hostnames, enabling TRR may break name resolving in such cases.\n- If you want to encrypt your DNS requests but not use Cloudflare servers, you can point to a new DNS over HTTPS server by setting network.trr.uri to your resolver URL. A list of currently available resolvers can be found in the curl wiki, along with other configuration options for TRR.\n\n"
    },
    {
      "title": "Encrypted Client Hello",
      "level": 3,
      "content": "To enable Encrypted Client Hello (ECH) (formerly encrypted Server Name Indicator (eSNI)), so that nobody listening on the wire can see the server name you made a TLS connection to, set:\n\n- network.dns.echconfig.enabled to true\n- network.dns.http3_echconfig.enabled to true\n\nYou may also need to set network.trr.mode to 2 or 3.\n\n"
    },
    {
      "title": "Disable geolocation",
      "level": 3,
      "content": "Set geo.enabled to false in about:config.\n\n"
    },
    {
      "title": "Disable 'Safe Browsing' service",
      "level": 3,
      "content": "Safe Browsing offers phishing protection and malware checks, however it may send user information (e.g. URL, file hashes, etc.) to third parties like Google.\n\nTo disable the Safe Browsing service, in about:config set:\n\n- browser.safebrowsing.malware.enabled to false\n- browser.safebrowsing.phishing.enabled to false\n\nIn addition disable download checking, by setting browser.safebrowsing.downloads.enabled to false.\n\n"
    },
    {
      "title": "Disable WebGL",
      "level": 3,
      "content": "WebGL is a potential security risk.[1] Set webgl.disabled to true in about:config if you want to disable it.\n\n"
    },
    {
      "title": "Extensions",
      "level": 2,
      "content": "See Browser extensions#Privacy.\n\n"
    },
    {
      "title": "Disable WebAssembly (and JavaScript)",
      "level": 3,
      "content": "WebAssembly, also known as Wasm, is a relatively new language. Unlike JavaScript, Wasm executes pre-compiled code natively in browsers for high-performance simulations and applications. It has been criticized for hiding pathways for malware and as with JavaScript, can be used to track users. Tor Browser blocks both JavaScript and Wasm.\n\nSee NoScript in Browser extensions#Privacy to block JavaScript the way Tor Browser does, which enables quick access when needed. To disable Wasm, in about:config set:\n\n- javascript.options.wasm to false\n- javascript.options.wasm_baselinejit to false\n- javascript.options.wasm_ionjit to false\n\n"
    },
    {
      "title": "Remove system-wide hidden extensions",
      "level": 3,
      "content": "Some extensions are hidden and installed by default in /usr/lib/firefox/browser/features. Many can be safely removed via rm extension-name.xpi. They might not be enabled by default and may have a menu option for enabling or disabling. Note that any files removed will return upon update of the firefox package. To keep these extensions removed, add the directories to NoExtract in /etc/pacman.conf. Some extensions include:\n\n- doh-rollout@mozilla.org.xpi - DoH Roll-Out (do not remove if you chose to use #Disable/enforce 'Trusted Recursive Resolver' above).\n- screenshots@mozilla.org.xpi - Firefox Screenshots.\n- webcompat-reporter@mozilla.org.xpi - For reporting sites that are compromised in Firefox, so Mozilla can improve Firefox or patch the site dynamically using the webcompat@mozilla.org.xpi extension.\n- All combined user and system extensions are listed in about:support. See [2] for a full list of system extensions including README files describing their functions.\n\nFirefox installations to paths such as the default release installed to /opt have system extensions installed at /firefox/firefox/browser/features.\n\n"
    },
    {
      "title": "Web search over Searx",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nPrivacy can be boosted by reducing the amount of information you give to a single entity. For example, sending each new web search via a different, randomly selected proxy makes it near impossible for a single search engine to build a profile of you. We can do this using public instances (or sites) of Searx. Searx is an AGPL-3.0, open-source site-builder, that produces site, known as an 'instances'. Each public 'instance' can act as a middle-man between you and a myriad of different search engines.\n\nFrom this list of public instances and others, bookmark as many Searx sites as you wish (if JavaScript is disabled you will need to enable it temporarily to load the list). For fast access to these bookmarks, consider adding SX1, SX2 ... SX(n) to the bookmark's Name field, with (n) being the number of searx instances you bookmark.\n\nAfter this bookmarking, simply typing sx, a number and Enter in the URL bar will load an instance.\n\n- If you have a web server and available bandwidth, consider running a public Searx instance to help others improve their privacy (more info).\n- For increased privacy, use Searx instances with Tor Browser, which uses onion-routing to provide a degree of anonymity.\n- You can improve your privacy further by running a private instance of Searx locally. Install the searxng-gitAUR package.\n\nSee https://www.privacyguides.org/en/search-engines/ for other options.\n\n"
    },
    {
      "title": "Watch videos over Invidious",
      "level": 2,
      "content": "Invidious instances act as an alternative front-end to YouTube. They are websites built from open-source code. It has typically been difficult to limit the amount of information a user sent to YouTube (Google) in order to access content.\n\nBenefits of using Invidious include:\n\n- Videos are accessible without running scripts. YouTube forces users to run scripts.\n- Videos can be saved for future viewing, or for viewing by others, including when offline. This reduces feedback sent to Google about when content is viewed or re-viewed.\n- An optional audio-only mode that reduces bandwidth usage. When combined with a browser like Tor, using fewer data packets on a more lightweight website is likely to improve your anonymity.\n- Invidious is a free and open-source interface that makes setting up an independent, private, video-hosting service easier. As such there are website that exist that are using Invidious to serve their own content or content removed from YouTube. Therefore it may help limit the profile-building capabilities of YouTube into the future (see note).\n\nBookmark as many functioning invidious instances from the following lists as possible (here, here, here[dead link 2024-01-13 ⓘ]). Note that some of these instances may be hosted by Cloudflare.\n\nYou can change any YouTube video URL to an Invidious one by simply replacing the youtube.com part with the domain of the instance you want to use.\n\n"
    },
    {
      "title": "Enterprise policies",
      "level": 2,
      "content": "Network and system-wide policies may be established through the use of enterprise policies which both supplements and overrides user configuration preferences. For example, there is no documented user preference to disable the checking of updates for beta channel releases. However, there exists an enterprise policy which can be effectively deployed as a workaround. Single and/or multiple policies may be administered through policies.json as follows:\n\n- Disable application updates\n- Force-enable hardware acceleration\n\n```\n{\n \"policies\": {\n  \"DisableAppUpdate\": true,\n  \"HardwareAcceleration\": true\n }\n}\n```\n\nVerify that Enterprise Policies is set to Active in about:support and review release-specific policies in about:policies.\n\n"
    },
    {
      "title": "prefs.js",
      "level": 3,
      "content": "Files which constitute a Firefox profile can be stripped of certain metadata. For example, a typical prefs.js contains strings which identify the client and/or the user.\n\n```\nuser_pref(\"app.normandy.user_id\", \"6f469186-12b8-50fb-bdf2-209ebc482c263\");\nuser_pref(\"security.sandbox.content.tempDirSuffix\", \"2a02902b-f25c-a9df-17bb-501350287f27\");\nuser_pref(\"toolkit.telemetry.cachedClientID\", \"22e251b4-0791-44f5-91ec-a44d77255f4a\");\n```\n\nThere are multiple approaches by which these strings can be reset with the caveat that a master prefs.js must first be created without such identifiers and synced into a working profile. The simplest solution is close Firefox before copying its prefs.js to a separate location:\n\n```\n$ cp ~/.mozilla/firefox/example.default-release/prefs.js ~/prefs.sanitized.js\n```\n\nStrip out any and all identfier strings and date codes by either setting them to 0 or removing the entries outright from the copied prefs.js. Sync the now sanitized prefs.js to the working profile as required:\n\n```\n$ rsync -v ~/.prefs.sanitized.js ~/.mozilla/firefox/example.default-release/prefs.js\n```\n\nA secondary privacy effect is also incurred which can be witnessed by examining the string results between a sanitized prefs.js versus a working prefs.js at Fingerprint JS API Demo.\n\n"
    },
    {
      "title": "extensions.json",
      "level": 3,
      "content": "Assuming that extensions are installed, the extensions.json file lists all profile extensions and their settings. Of note is the location of the user home directory where the .mozilla and extensions folder exist by default. Unwanted background updates may be disabled by setting applyBackgroundUpdates to the appropriate 0 value. Of minor note are installDate and updateDate. Bubblewrap can effectively mask the username and location of the home directory at which time the extensions.json file may be sanitized and modified to point to the sandboxed HOME location.\n\n```\n{\"schemaVersion\":31,\"addons\":[{\"id\":\"uBlock0@raymondhill.net\",\"syncGUID\":\"{0}\",\"version\":\"0\",\"type\":\"extension\",\"optionsURL\":\"dashboard.html\",\"optionsType\":3,\"optionsBrowserStyle\":true,\"visible\":true,\"active\":true,\"userDisabled\":false,\"appDisabled\":false,\"embedderDisabled\":false,\"installDate\":0,\"updateDate\":0,\"applyBackgroundUpdates\":0,\"path\":\"/home/r/.mozilla/firefox/example.default-release/extensions/uBlock0@raymondhill.net.xpi\",\"skinnable\":false,\"softDisabled\":false,\"foreignInstall\":true,\"strictCompatibility\":true}}\n```\n\nRemoval of similar metadata from addonStartup.json.lz4 and search.json.mozlz4 can also be accomplished. mozlz4 is a command-line tool which provides compression/decompression support for Mozilla (non-standard) LZ4 files.\n\n"
    },
    {
      "title": "Removal of subsystems",
      "level": 2,
      "content": "Telemetry related to crash reporting may be disabled by removing the following:\n\n```\n/usr/lib/firefox/crashreporter\n/usr/lib/firefox/minidump-analyzer\n/usr/lib/firefox/pingsender\n```\n\nThose deleted files will be back after upgrading the package, add them to NoExtract for persistence.\n\nFor those who have opted to install Firefox manually from official Mozilla sources, the updater system may be disabled by removing updater in the firefox directory.\n\n"
    },
    {
      "title": "Editing the contents of omni.ja",
      "level": 2,
      "content": "The file /usr/lib/firefox/omni.ja contains most of the default configuration settings used by Firefox. As an example, starting from Firefox 73, network calls to firefox.settings.services.mozilla.com and/or content-signature-2.cdn.mozilla.net cannot be blocked by extensions or by setting preference URLs to \"\");. Aside from using a DNS sinkhole or firewalling resolved IP blocks, one solution is to grep(1) through the extracted contents of omni.ja before removing all references to firefox.settings.services.mozilla.com and/or cdn.mozilla.net. Extraneous modules such as unused dictionaries and hyphenation files can also be removed in order to reduce the size of omni.ja for both security and performance reasons.\n\nTo repack/rezip, use the command zip -0DXqr omni.ja * and make sure that your working directory is the root directory of the files from the omni.ja file.\n\n"
    },
    {
      "title": "Hardened user.js templates",
      "level": 2,
      "content": "Several active projects maintain comprehensive hardened Firefox configurations in the form of a user.js config that can be dropped to Firefox profile directory:\n\n- arkenfox/user.js (arkenfox-user.jsAUR)\n- pyllyukko/user.js\n- ffprofile.com (github) - online user.js generator. You select which features you want to enable and disable and in the end you get a download link for a zip-file with your profile template. You can for example disable some functions, which send data to Mozilla and Google, or disable several annoying Firefox functions like Mozilla Hello or the Pocket integration.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Brainfucksec's firefox hardening guide - A well maintained firefox guide to harden your firefox.\n- Privacy Guides - A community-maintained resource for keeping online privacy.\n- privacytools.io Firefox Privacy Add-ons\n- prism-break.org Web Browser Addons\n- MozillaWiki:Privacy/Privacy Task Force/firefox about config privacy tweeks - a wiki page maintained by Mozilla with descriptions of privacy specific settings.\n- How to stop Firefox from making automatic connections - Is an annotated list of corresponding Firefox functionality and settings to disable it case-by-case.\n- Search Engine Comparison - Web page for comparing popular search engines across some privacy-centric data points.\n\n"
    }
  ]
}