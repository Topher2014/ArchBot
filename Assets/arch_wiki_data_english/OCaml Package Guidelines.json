{
  "title": "OCaml Package Guidelines",
  "url": "https://wiki.archlinux.org/title/OCaml_Package_Guidelines",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "32-bit – CLR – CMake – Cross – DKMS – Eclipse – Electron – Font – Free Pascal – GNOME – Go – Haskell – Java – KDE – Kernel modules – Lisp – Meson – MinGW – Node.js – Nonfree – OCaml – Perl – PHP – Python – R – Ruby – Rust - Security – Shell – VCS – Web – Wine\n\nWriting PKGBUILDs for software written in OCaml.\n\n"
    },
    {
      "title": "Package naming",
      "level": 2,
      "content": "For libraries, use ocaml-modulename. For applications, use the program name. In either case, the name should be entirely lowercase.\n\n"
    },
    {
      "title": "Libraries",
      "level": 3,
      "content": "OCaml libraries should be installed under /usr/lib/ocaml. Installation in /usr/lib/ocaml/site-lib is deprecated.\n\nOCaml libraries should be installed using ocaml-findlib. ocaml-findlib includes library metadata in the package that makes it easy to manage libraries. It is a de-facto standard and a lot of OCaml software now requires it.\n\nocaml-findlib extracts necessary data from a file named META that should be included in the source archive. If this file is not included, one should either be obtained from the corresponding Debian, Ubuntu, or Fedora package, or created for the package by the maintainer. A request to include the file should also be made to the upstream developers of the package.\n\nThe OCAMLFIND_DESTDIR variable should be used when installing packages with ocaml-findlib. See the example PKGBUILD below for details.\n\n"
    },
    {
      "title": "OASIS",
      "level": 3,
      "content": "OCaml packages that install executables using OASIS ignore DESTDIR. This is a known limitation of OASIS (issue #493). One way to enable DESTDIR-like functionality is to run the configure script with the --destdir argument, like so:\n\n```\nbuild() {\n    cd \"${srcname}-${pkgver}\"\n    ./configure --prefix /usr --destdir \"$pkgdir\"\n\n    # build commands\n}\n```\n\n"
    },
    {
      "title": "OCaml bytecode and levels",
      "level": 2,
      "content": "OCaml can run code on multiple \"levels\", the top level interprets OCaml Code without compiling, the bytecode level creates machine independent bytecode and the native level creates machine code binaries (just like C/C++).\n\nWhen building OCaml Packages you need to be aware if the build process is compiling native machine code, bytecode, or as in many cases both. This creates a number of situations which can cause problems with package options and the right dependencies.\n\nIf bytecode is produced at all then the PKGBUILD must contain the following to protect the bytecode:\n\n```\noptions=('!strip')\n```\n\nIf the package does not contain bytecode and only distributes a binary, then ocaml is not needed as a dependency, but it of course is required as a makedepends since the ocaml package provides the OCaml compiler. If the package contains both native code and bytecode then ocaml should be a dependency and a makedepends.\n\nOCaml code is rarely (if ever) distributed as bytecode only and will almost always include native code: the only case where using any as the arch is advisable is when only un-compiled source code is distributed, usually with a library, though many libraries still distribute native code.\n\nThe moral of the story here is to be aware of what it is you are distributing, chances are your package contains both native machine code and bytecode.\n\n"
    },
    {
      "title": "Example PKGBUILD using Dune",
      "level": 2,
      "content": "Dune is a new build system that is becoming more and more used by OCaml projects.\n\nOne thing to be aware is that a single project can build several \"packages\" in the OPAM/findlib sense, each with its own directory in /usr/lib/ocaml/. See ocaml-cairo for an example. For release builds, all \"packages\" have to be explicitly listed.\n\n```\n# Contributor: Your Name <youremail@domain.com>\n\npkgname=ocaml-<package name>\npkgver=4.2\npkgrel=1\nlicense=()\narch=('x86_64')\npkgdesc=\"An OCaml Package\"\nurl=\"\"\ndepends=('ocaml')\nmakedepends=('dune')\nsource=()\noptions=('!strip')\nsha256sums=()\n\nbuild() {\n  cd \"${pkgname}-${pkgver}\"\n  # The \"-p\" flag is necessary for release builds, see the Dune manpage. Dune will complain if you forget some packages.\n  dune build -p package1,package1-extension,package2\n}\n\npackage() {\n  cd \"${pkgname}-${pkgver}\"\n  DESTDIR=\"${pkgdir}\" dune install --prefix \"/usr\" --libdir \"/usr/lib/ocaml\" --docdir \"/usr/share/doc\"\n}\n```\n\n"
    },
    {
      "title": "Example PKGBUILD using plain findlib",
      "level": 2,
      "content": "```\n# Contributor: Your Name <youremail@domain.com>\n\npkgname=ocaml-<package name>\npkgver=4.2\npkgrel=1\nlicense=()\narch=('x86_64')\npkgdesc=\"An OCaml Package\"\nurl=\"\"\ndepends=('ocaml')\nmakedepends=('ocaml-findlib')\nsource=()\noptions=('!strip')\nmd5sums=()\n\nOCAMLFIND_DESTDIR=\"${pkgdir}$(ocamlfind printconf destdir)\"\n\nbuild() {\n  cd \"${pkgname}-${pkgver}\"\n  mkdir -p \"$OCAMLFIND_DESTDIR\"\n  ./configure --prefix=/usr\n  make\n}\n\npackage() {\n  cd \"${pkgname}-${pkgver}\"\n  env DESTDIR=\"${pkgdir}\" \\\n    OCAMLFIND_DESTDIR=\"$OCAMLFIND_DESTDIR\" \\\n    make install\n}\n```\n\nKeep in mind that many OCaml Packages will often need extra parameters passed to make and make install. Also remember to remove the !strip option and change the architecture if the package does not produce bytecode.\n\n"
    }
  ]
}