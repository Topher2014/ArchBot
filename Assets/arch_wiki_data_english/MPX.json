{
  "title": "MPX",
  "url": "https://wiki.archlinux.org/title/MPX",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Xorg servers starting from version 1.7 have a feature called \"multi-pointer\". Basically it allows to have multiple mouse cursors (each with its own keyboard focus) on the screen and control them with separate physical input devices. It can be used as a crude multiseat solution.\n\n"
    },
    {
      "title": "Master and slave devices",
      "level": 3,
      "content": "With the introduction of XInput2, input devices are organised in a two-level hierarchy:\n\n- Master devices, which correspond to cursors on the screen\n- Slave devices, which correspond to physical input devices\n\nMaster devices come in pairs, one for pointer and one for keyboard. Each master device can have a number of slave devices attached, so that cursor of a master device can be controlled by all slave devices attached to it.\n\n"
    },
    {
      "title": "Client pointer",
      "level": 3,
      "content": "When an application grabs input (e.g. a fullscreen game), it grabs a master device that is set as its client pointer. By default, the client pointer is set to \"Virtual core pointer\", but it can be set to a different one with a \"xinput\" utility.\n\n"
    },
    {
      "title": "configuration file",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "xinput utility",
      "level": 3,
      "content": "More pointers can be added with xinput CLI utility. Here is how to do it:\n\nCreate a new pair of master devices named \"name pointer\" and \"name keyboard\":\n\n```\nxinput create-master [name]\n```\n\nFind out names and ids of existing slave devices:\n\n```\nxinput list\n```\n\nReattach slave devices to newly created master devices:\n\n```\nxinput reattach [slave device name or id] [master device name or id]\n```\n\nFor example, say we create a device called \"Auxiliary\" (use remove-master to reverse this):\n\n```\nxinput create-master Auxiliary\n```\n\nWhen we list the xinput devices you should see something like this:\n\n```\nVirtual core pointer\n  >Virtual Core XTEST pointer\n  >[probably your main mouse]\nVirtual core keyboard\n  >Virtual Core XTEST pointer\n  >[probably your main keyboard]\n  >[other function buttons]\nAuxiliary pointer\n  >auxiliary XTEST pointer\nAuxiliary keyboard\n  >auxiliary XTEST keyboard\n```\n\nWhat you then want to do is simply attach your secondary mouse and keyboard to the respective auxiliary positions. The XTEST devices are irrelevant here. I found the easiest way to determine whats what was to just unplug stuff and type \"xinput list\" again.\n\nTo attach devices, you type:\n\n```\nxinput reattach [device id #] \"Auxiliary pointer\"\n```\n\nand then do so for your keyboard as well!\n\nIf the support from the DE/WM is bad for multi-pointer, it would be a good idea to make use of set-cp if the master devices is added to be used by only one window, window id can be found from xprop or similar tools.\n\n```\nxinput set-cp [window id] [master device name or id]\n```\n\nShamelessly stolen from Antonio Ospite at ao2.it\n\n"
    },
    {
      "title": "Flicker",
      "level": 3,
      "content": "The Compton compositor can cause the cursors to flicker and should be disabled.\n\n"
    },
    {
      "title": "Software support",
      "level": 2,
      "content": "It is possible to use multi-pointer with software that does not explicitly support it, but with limited functionality. Applications which do not support it will not distinguish between multiple pointers and will interpret all actions as if done by single master device pair.\n\n"
    },
    {
      "title": "Window managers",
      "level": 3,
      "content": "In window managers multi-pointer support could mean:\n\n- recognizing multiple focuses\n- setting the client pointer of a focused window to the pointer that \"focused\" it\n- letting move and resize windows simultaneously\n\nAs of 24 December 2016, only multicursor-wm (development stops around 2011) supports multi-pointer.\n\nAs of 2020-06-01, Dwm works but not so well, there are focus issues when auto-focus on hover is set in config.h such that the keyboard focus jumps between application easily. set-cp can be used to aid this behavior.\n\n"
    },
    {
      "title": "Desktop managers",
      "level": 3,
      "content": "Desktop manager should also be able to provide the same support as Window managers.\n\nAs of 2021-01-14, Plasma works quite well such that some applications is able to handle the focus correctly but the tools that it came with such as Application Runner (kickoff) and krunner does not accept input from second master devices.\n\n"
    },
    {
      "title": "Useful links",
      "level": 2,
      "content": "- Xorg wiki article\n- Xorg multiseat. A how-to for a more complicated multi-user environment. Requires 2 different xorg sessions and graphics cards!!\n- Article from Suckless DWM\n\n"
    }
  ]
}