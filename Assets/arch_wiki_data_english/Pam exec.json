{
  "title": "Pam exec",
  "url": "https://wiki.archlinux.org/title/Pam_exec",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- pam_mount\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nIt is possible to configure PAM and systemd to automatically mount a dm-crypt encrypted home partition when its owner logs in, and to unmount it when they log out.\n\nThis tutorial assumes you have already created your encrypted partition, as described in Dm-crypt/Encrypting a non-root file system.\n\n- You need to use the same password for your user account and for LUKS.\n- In all the examples, replace username with your username, 1000 with your user ID and PARTITION with the name of your encrypted partition's device.\n\n"
    },
    {
      "title": "Unlocking at login",
      "level": 2,
      "content": "pam_exec can be used to unlock the device at login. Edit /etc/pam.d/system-login and add the line below emphasized in bold after auth include system-auth:\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n```\n/etc/pam.d/system-login\n```\n\n```\n...\n\nauth       include    system-auth\nauth       optional   pam_exec.so expose_authtok /etc/pam_cryptsetup.sh\n\n...\n```\n\nThen create the mentioned script.\n\n```\n/etc/pam_cryptsetup.sh\n```\n\n```\n#!/bin/sh\n\nCRYPT_USER=\"username\"\nPARTITION=\"/dev/sdXY\"\nNAME=\"home-$CRYPT_USER\"\n\nif [ \"$PAM_USER\" = \"$CRYPT_USER\" ] &&Â ! [ -e \"/dev/mapper/$NAME\" ]; then\n    /usr/bin/cryptsetup open \"$PARTITION\" \"$NAME\"\nfi\n```\n\nMake the script executable.\n\n"
    },
    {
      "title": "Mounting and unmounting automatically",
      "level": 2,
      "content": "systemd-logind maintains user@1000.service for as long as at least one session is active for the user. It is started automatically after a first successful login and stopped after a logout from the last session. Hence, we can create and enable a systemd.mount(5) unit for the mapped volume and connect it to user@1000.service in order to make it mount and unmount automatically:\n\n```\n/etc/systemd/system/home-username.mount\n```\n\n```\n[Unit]\nRequires=user@1000.service\nBefore=user@1000.service\n\n[Mount]\nWhere=/home/username\nWhat=/dev/mapper/home-username\nType=btrfs\nOptions=defaults,relatime,compress=zstd\n\n[Install]\nRequiredBy=user@1000.service\n```\n\n"
    },
    {
      "title": "Locking after unmounting",
      "level": 2,
      "content": "After unmounting, the device will still be unlocked, and it will be possible to mount it without re-entering password (shutting down or rebooting will lock the partition because the key is wiped from RAM, but unmounting alone will not). You can create and enable a service that starts when the device gets unlocked (BindsTo=dev-mapper-home\\x2dusername.device) and dies after the device gets unmounted (Requires,Before=home-username.mount), locking the device in the process (ExecStop=cryptsetup close):\n\n```\n/etc/systemd/system/cryptsetup-username.service\n```\n\n```\n[Unit]\nDefaultDependencies=no\nBindsTo=dev-PARTITION.device\nAfter=dev-PARTITION.device\nBindsTo=dev-mapper-home\\x2dusername.device\nRequires=home-username.mount\nBefore=home-username.mount\nConflicts=umount.target\nBefore=umount.target\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nTimeoutSec=0\nExecStop=/usr/bin/cryptsetup close home-username\n\n[Install]\nRequiredBy=dev-mapper-home\\x2dusername.device\n```\n\n"
    }
  ]
}