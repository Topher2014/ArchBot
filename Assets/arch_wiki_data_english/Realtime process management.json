{
  "title": "Realtime process management",
  "url": "https://wiki.archlinux.org/title/Realtime_process_management",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nRelated articles\n\n- cgroups\n- Performance\n\nThis article provides information on prioritizing process threads in real time, as opposed to at startup only. It shows how you can control CPU, memory, and other resource utilization of individual processes, or all processes run by a particular group.\n\nWhile many recent processors are powerful enough to play a dozen video or audio streams simultaneously, it is still possible that another thread hijacks the processor for half a second to complete another task. This results in short interrupts in audio or video streams. It is also possible that video/audio streams get out of sync. While this is annoying for a casual music listener; for a content producer, composer or video editor this issue is much more serious as it interrupts their workflow.\n\nThe solution is to run time-sensitive processes in realtime. In linux, this means changing the process to a realtime scheduler, like SCHED_RR or SCHED_FIFO. See sched(7) for descriptions of these schedulers.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "On Arch Linux, system, group and user-wide configuration can be achieved using PAM and systemd.\n\nThe realtime package group provides additional tools to modify the realtime scheduling policies of IRQs and processes.\n\n"
    },
    {
      "title": "Configuring PAM",
      "level": 3,
      "content": "The /etc/security/limits.conf file provides configuration for the pam_limits PAM module, which sets limits on system resources (see limits.conf(5)).\n\nThere are two types of resource limits that pam_limits provides: hard limits and soft limits. Hard limits are set by root and enforced by the kernel, while soft limits may be configured by the user within the range allowed by the hard limits.\n\nInstalling the package realtime-privileges and adding the user to the realtime group, provides reasonable default values (e.g. relevant for Professional audio).\n\n"
    },
    {
      "title": "Configuring systemd services",
      "level": 3,
      "content": "Processes spawned by systemd system services need to specifically set up equivalents to limits.conf. Further information can be found in the sections systemd.exec(5) § CREDENTIALS and systemd.exec(5) § PROCESS PROPERTIES in systemd.exec(5).\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "To run in realtime, a process running in the realtime group must set LIMIT_RTPRIO to any value above 0, then change to a realtime scheduler, like SCHED_FIFO or SCHED_RR. Here is an example:\n\n```\n#include <assert.h>\n#include <sys/resource.h>\n#include <sched.h>\n\nvoid realtime()\n{\n    struct rlimit rl;\n    assert(getrlimit(RLIMIT_RTPRIO, &rl) == 0);\n    assert(rl.rlim_max != 0);\n    rl.rlim_cur = rl.rlim_max;\n    assert(setrlimit(RLIMIT_RTPRIO, &rl) == 0);\n\n    assert(sched_setscheduler(0, SCHED_FIFO, &(struct sched_param){\n            .sched_priority = rl.rlim_cur\n        }) != -1);\n}\n```\n\nAgain, LIMIT_RTPRIO must be above 0 for the process to be able to change its scheduler. This is why realtime-privileges raises the rtprio limit to 98 for all processes in the realtime group. See sched(7) for more.\n\n"
    },
    {
      "title": "Using schedtool",
      "level": 3,
      "content": "To do this automatically, or in case you are running somebody else's software, you can use schedtool. Here is an example of starting ls -al in realtime under the SCHED_FIFO scheduler:\n\n```\n$ schedtool -F -p 98 -e ls -al\n```\n\nThis shouldn't normally be required. Applications that need to run in realtime, like jack2, normally set their schedulers all on their own.\n\n"
    },
    {
      "title": "Hard and soft realtime",
      "level": 2,
      "content": "Realtime is a synonym for a process which has the capability to run in time without being interrupted by any other process. However, cycles can occasionally be dropped despite this. Low power supply or a process with higher priority could be a potential cause. To solve this problem, there is a scaling of realtime quality. This article deals with soft realtime. Hard realtime is usually not so much desired as it is needed. An example could be made for car's ABS (anti-lock braking system). This can not be \"rendered\" and there is no second chance.\n\n"
    },
    {
      "title": "Power is nothing without control",
      "level": 2,
      "content": "The realtime-lsm module granted the right to get higher capabilities to users belonging to a certain UID. The rlimit way works similar, but it can be controlled graduated finer. There is a new functionality in PAM which can be used to control the capabilities on a per user or a per group level. In the current version (0.80-2) these values are not set correctly out of the box and still create problems. With PAM you can grant realtime priority to a certain user or to a certain user group. PAM's concept makes it imaginable that there will be ways in the future to grant rights on a per application level; however, this is not yet possible.\n\n"
    },
    {
      "title": "PAM-enabled login",
      "level": 3,
      "content": "See Start X at login.\n\nFor your system to use PAM limits settings you have to use a pam-enabled login method/manager. Nearly all graphical login managers are pam-enabled, and it now appears that the default Arch login is pam-enabled as well. You can confirm this by searching /etc/pam.d:\n\n```\n$ grep pam_limits.so /etc/pam.d/*\n```\n\nIf you get nothing, you are whacked. But you will, as long as you have a login manager (and now PolicyKit). We want an output like this one:\n\n```\n/etc/pam.d/crond:session   required    pam_limits.so\n/etc/pam.d/login:session\t\trequired\tpam_limits.so\n/etc/pam.d/polkit-1:session         required        pam_limits.so\n/etc/pam.d/system-auth:session   required  pam_limits.so\n/etc/pam.d/system-services:session   required    pam_limits.so\n```\n\nSo we see that login, PolicyKit, and the others all require the pam_limits.so module. This is a good thing, and means PAM limits will be enforced.\n\n"
    },
    {
      "title": "Console/autologin",
      "level": 3,
      "content": "See: Automatically log in some user to a virtual console on startup\n\nIf you prefer to not have a graphical login, you still have a way. You need to edit the pam configuration for su (from coreutils):\n\n```\n/etc/pam.d/su\n```\n\n```\n...\n session              required        pam_limits.so\n```\n\nSee this forums post.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- getrlimit(2)\n- https://docs.kernel.org/scheduler/sched-design-CFS.html\n- https://docs.kernel.org/block/ioprio.html\n- IO Benchmarking: How, why and with what\n- SYSSTAT utilities home page\n\n"
    }
  ]
}