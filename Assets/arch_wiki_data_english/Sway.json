{
  "title": "Sway",
  "url": "https://wiki.archlinux.org/title/Sway",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Window manager\n\nSway (contracted from SirCmpwn's Wayland compositor [1]) is a compositor for Wayland designed to be fully compatible with i3. According to the official website:\n\nIf you are interested in eye-candy, swayfxAUR exists as a fork of sway with popular eye-candy effects.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Sway can be installed with the sway package. The development version can be installed using sway-gitAUR. It is advisable to always update wlroots when you update sway, due to tight dependencies.\n\nYou may also install swaylock, swayidle, and swaybg to lock your screen, set up an idle manager, and set wallpapers, respectively. Additionally, AUR provides development versions of these packages under the names swaylock-gitAUR, swayidle-gitAUR, and swaybg-gitAUR. These packages offer the latest features and updates from the Git repositories of their respective projects.\n\nThe default application launcher is wmenu and the default terminal emulator is foot. Before starting sway it is advisable to either install them or set a new launcher and terminal in the configuration. For other Wayland-compatible versions of some useful i3 packages you can look at the migration guide on the Sway wiki.\n\n"
    },
    {
      "title": "Starting",
      "level": 2,
      "content": "Before Sway can be started, it needs access to your hardware devices such as your keyboard, mouse, and graphics card. The collection of these hardware devices is called a seat, as mentioned in sd-login(3).\n\nOn Arch Linux, Sway can get access to your seat using either\n\n- systemd-logind(8) and polkit, or\n- seatd, which will be installed alongside Sway as a dependency of wlroots\n\nIf polkit is already installed on your system, Sway should automatically get access to your seat.\n\nAlternatively, if polkit is not installed on your system and you want to use seatd instead, add yourself to the seat user group and enable/start seatd.service, re-log and pick one of the following methods to start Sway.\n\n"
    },
    {
      "title": "Manually",
      "level": 3,
      "content": "To start Sway, simply type sway in the Linux console.\n\n"
    },
    {
      "title": "Automatically on TTY login",
      "level": 3,
      "content": "Similarly to X, Sway can be started by adding the following to your shell initialization file (see Command-line shell#Login shell):\n\n```\nif [ -z \"$WAYLAND_DISPLAY\" ] && [ -n \"$XDG_VTNR\" ] && [ \"$XDG_VTNR\" -eq 1 ]Â ; then\n    exec sway\nfi\n```\n\nFor more details, see Xinit#Autostart X at login\n\n"
    },
    {
      "title": "From a display manager",
      "level": 3,
      "content": "The sway session is located at /usr/share/wayland-sessions/sway.desktop. It is automatically recognized by modern display managers like GDM and SDDM.\n\nIt is also possible to start sway as a systemd user service through the display manager.\n\nAlso you can use text-based session manager, see Display manager#Console.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "If you already use i3, you may copy your i3 configuration to ~/.config/sway/config and it should work out of the box. Otherwise, copy the sample configuration file located at /etc/sway/config to ~/.config/sway/config. See sway(5) for information on the configuration.\n\n"
    },
    {
      "title": "Keymap",
      "level": 3,
      "content": "By default, sway starts with the US QWERTY keymap. To configure per-input:\n\n```\n~/.config/sway/config\n```\n\n```\ninput * {\n    xkb_layout \"us,de,ru\"\n    xkb_variant \"colemak,,typewriter\"\n    xkb_options \"grp:win_space_toggle\"\n}\n\ninput <identifier> xkb_model \"pc101\"\n```\n\nMore details are available in xkeyboard-config(7) and sway-input(5).\n\nThe keymap can also be configured using environment variables (XKB_DEFAULT_LAYOUT, XKB_DEFAULT_VARIANT, etc.) when starting sway. The configuration options take precedence over environment variables.\n\n"
    },
    {
      "title": "Typematic delay and rate",
      "level": 3,
      "content": "To change typematic delay and rate, you can add the following lines to your input section:\n\n```\n~/.config/sway/config\n```\n\n```\ninput <identifier> repeat_delay 300\ninput <identifier> repeat_rate 30\n```\n\n"
    },
    {
      "title": "Statusbar",
      "level": 3,
      "content": "Sway ships with a default status bar in the form of swaybar which runs in a pure Wayland environment. swaybar can call a shell script or other program to show information in the status bar. See sway-bar(5) and swaybar-protocol(7) for details.\n\nInstalling i3status is an option to obtain a practical, default status bar under Wayland. All you have to do is add the following snippet at the end of your sway config:\n\n```\n~/.config/sway/config\n```\n\n```\nbar {\n    status_command i3status\n}\n```\n\nIf you want to enable colored output for i3status, you need to adjust the following part in the i3status configuration:\n\n```\n~/.config/i3status/config\n```\n\n```\ngeneral {\n    colors = true\n    interval = 5\n}\n```\n\n"
    },
    {
      "title": "Outputs",
      "level": 3,
      "content": "The output command in sway allows for the detailed configuration of different display outputs. This includes settings for wallpaper, scale factor, position, and more. You can combine multiple output commands into one line, as needed.\n\n```\n~/.config/sway/config\n```\n\n```\noutput HDMI-A-1 mode 1920x1080 pos 1920 0 bg ~/wallpaper.png stretch\n```\n\nOutputs can be specifically addressed by employing their designated output names, by universally matching all outputs with \"*\", or through utilizing the distinct names of the displays (a string consisting of the make, model and serial). For example:\n\n```\n~/.config/sway/config\n```\n\n```\noutput \"Some Company ABC123 0x00000000\" pos 1920 0\n```\n\nYou can get a list of output names and additional information using the command:\n\n```\n$ swaymsg -t get_outputs\n```\n\nFor a deeper dive into configurations and additional options, consult sway-output(5).\n\n"
    },
    {
      "title": "Wallpaper",
      "level": 4,
      "content": "The displaying of a wallpaper in sway is handled by a dedicated program. The simplest example is swaybg, which sway can manage directly. swaybg must be installed if needed in order to run the output ... bg command.\n\nThe following line, which can be included anywhere in sway's configuration file, sets a background image on all displays:\n\n```\n~/.config/sway/config\n```\n\n```\noutput \"*\" bg /path/to/image fill\n```\n\nOf course /path/to/image should be replaced with the path to an existing image file.\n\nSolid colors may be set as follows:\n\n```\noutput * bg #000000 solid_color\n```\n\nSee the Sway wiki for additional tools and utilities for wallpaper management.\n\n"
    },
    {
      "title": "HiDPI",
      "level": 4,
      "content": "Sway automatically applies integer scaling by default. If the following conditions hold: [3]\n\n- The screen provides valid physical dimension information via EDID.\n- Both dimensions have a ratio of (resolution dimension in pixels) / (physical dimension in inches) (DPI) of at least 192.\n- The screen resolution has a height of at least 1200px.\n\nthen Sway will use 2x scaling. Some devices, such as the Framework Laptop 16, have a DPI that is close to (but not quite) 192. In these cases, you may want to manually configure fractional scaling.\n\nSet your displays scale factor with the output command in your configuration file. The scale factor can be fractional, but it is usually 2 for HiDPI screens.\n\n```\n~/.config/sway/config\n```\n\n```\noutput <name> scale <factor>\n```\n\nYou can find your display name with the following command:\n\n```\n$ swaymsg -t get_outputs\n```\n\n"
    },
    {
      "title": "Input devices",
      "level": 3,
      "content": "It is possible to tweak specific input device configurations. For example, to enable tap-to-click and natural scrolling for all touchpads:\n\n```\n~/.config/sway/config\n```\n\n```\ninput type:touchpad {\n    tap enabled\n    natural_scroll enabled\n}\n```\n\nTo set the configuration for a particular touchpad, use swaymsg -t get_inputs to obtain a device identifier and use it instead of type:touchpad.\n\nMore documentation and options like acceleration profiles or disabling input entirely can be found in sway-input(5).\n\nIf you use a graphics tablet, see Graphics tablet#Sway.\n\n"
    },
    {
      "title": "Touch display mapping",
      "level": 4,
      "content": "Touch input targets for touch displays used in a multi-display environment can be mapped to only that touch display.\n\n```\n~/.config/sway/config\n```\n\n```\nset $display1       \"Dell Inc. DELL P2414H VHVTW542165L\"\nset $display2       \"Dell Inc. DELL P2418HT MYDM775F152L\"\nset $display2-touch \"8146:24835:Melfas_LGD_AIT_Touch_Controller\"\n\ninput $display2-touch map_to_output $display2\n```\n\n"
    },
    {
      "title": "Custom keybindings",
      "level": 3,
      "content": "Special keys on your keyboard can be used to execute commands, for example to control volume, monitor brightness or media players:\n\n```\n~/.config/sway/config\n```\n\n```\nbindsym XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5%\nbindsym XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5%\nbindsym XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle\nbindsym XF86AudioMicMute exec pactl set-source-mute @DEFAULT_SOURCE@ toggle\nbindsym XF86MonBrightnessDown exec brightnessctl set 5%-\nbindsym XF86MonBrightnessUp exec brightnessctl set 5%+\nbindsym XF86AudioPlay exec playerctl play-pause\nbindsym XF86AudioNext exec playerctl next\nbindsym XF86AudioPrev exec playerctl previous\nbindsym XF86Search exec bemenu-run\n```\n\nFor details and alternative utilities, see:\n\n- PulseAudio#Keyboard volume control,\n- WirePlumber#Keyboard volume control,\n- ALSA#Keyboard volume control,\n- Backlight#Backlight utilities,\n- MPRIS.\n\nTo allow a keybinding to be executed while the lockscreen is active add the --locked parameter to bindsym.\n\n```\nbindsym --locked XF86AudioPlay exec playerctl play-pause\n```\n\n"
    },
    {
      "title": "Graphical indicator bars",
      "level": 4,
      "content": "It is often desirable to have the current level of some percentage-valued setting, such as brightness or volume, be indicated by a graphical bar when it is adjusted. A good option for providing this facility in Sway is wob (alternatively wob-gitAUR), which provides a subset of the functionality of the popular X tool xobAUR but as a native Wayland utility implementing the layer-shell protocol. See the project website for usage examples.\n\n"
    },
    {
      "title": "Overview of workspaces",
      "level": 4,
      "content": "If you are using a lot of workspaces with a lot of windows and cannot follow what is where any more, then sovAUR can come in handy. It is an overlay that shows schemas for all workspaces to make navigation in sway easier. It shows program names, window titles, supports multi-output setup. See the project page for more information.\n\n"
    },
    {
      "title": "Idle",
      "level": 3,
      "content": "Sway has a dedicated idle management daemon named swayidle to handle idling sessions. There are different ways to start and parameterize the daemon. The simplest is to use the configuration of sway itself. swayidle accepts a multitude of arguments to configure events like timeout (a.k.a. idling), resume (not idle anymore, after a timeout), before-sleep etc. See swayidle(1) for more details and further explanations of the events. Each event can then be assigned an action. To assign multiple actions to an event simply repeat the trigger.\n\nThe following instructs swayidle to lock the screen after 30 minutes and turn it off five seconds after:\n\n```\n~/.config/sway/config\n```\n\n```\nexec swayidle -w \\\n\ttimeout 1800 'swaylock -f' \\\n\ttimeout 1805 'swaymsg \"output * power off\"' \\\n\t\tresume 'swaymsg \"output * power on\"'\n```\n\nTo turn off a locked screen much sooner e.g. after 10 seconds, grep the process list for your locking manager and execute swaymsg \"output * power off\" accordingly like so:\n\n```\ntimeout 10 'if pgrep -x swaylock; then swaymsg \"output * power off\"; fi' resume 'if pgrep -x swaylock; then swaymsg \"output * power on\"; fi'\n```\n\nIn order to lock the screen before suspending and pause any playing media, append the following instruction to the swayidle command:\n\n```\nbefore-sleep 'playerctl pause; swaylock'\n```\n\nIf you do not want swaylock to trigger while videos are playing in Firefox, Chrome or VLC, you can use idlehack-gitAUR to listen for dbus screensaver inhibit requests and invoke swayidle-inhibit. Programs like Firefox, Chrome and VLC emit these events to prevent the system from going idle.\n\n"
    },
    {
      "title": "Floating windows",
      "level": 3,
      "content": "To enable floating windows or window assignments, open the application and then use the app_id, the class, the instance and the title attributes to enable floating windows/window assignments. The following command will list the properties of all the open windows.\n\n```\n$ swaymsg -t get_tree\n```\n\nTo get only the app_id's of all open windows use:\n\n```\n$ swaymsg -t get_tree | grep \"app_id\"\n```\n\nTo get the app_id of the focused window use:\n\n```\n$ swaymsg -t get_tree | jq -r '..|try select(.focused == true)'\n```\n\nX11 windows do not have an app_id property. However, you can use attributes like class, window_type, window_role and/or the instance to match them. You can search the output of swaymsg -t get_tree and create fine grained rules for your windows.\n\n```\n~/.config/sway/config\n```\n\n```\nfor_window [app_id=\"galculator\"] floating enable\nfor_window [window_type=\"dialog\"] floating enable\nfor_window [window_role=\"dialog\"] floating enable\nassign [class=\"firefox\"] -> 3\nassign [class=\"^Urxvt$\" instance=\"^htop$\"] -> 9\n```\n\nThis is similar to using xorg-xprop to find the class or wm_name attributes in X11.\n\nWhen using multiple monitors, the floating scratchpad window can get too large, covering more than one monitor. This command centers and resizes the floating window to 80% of the current monitor's size:\n\n```\n$ swaymsg move position center; swaymsg resize set 80ppt 80ppt\n```\n\n"
    },
    {
      "title": "Clipboard",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with Clipboard.** This article or section is a candidate for merging with Clipboard.\n\nThis article or section is a candidate for merging with Clipboard.\n\nBy default, the clipboard is emptied whenever a window is closed. This can be a surprising default behaviour.\n\nA \"clipboard manager\" must be installed to make the clipboard's content shared amongst windows.\n\nOne example of a clipboard manager, designed for Wayland, is clipman, which can be installed from clipmanAUR or clipman-gitAUR.\n\nTo start clipman with Sway, add the following line to your configuration file:\n\n```\n~/.config/sway/config\n```\n\n```\nexec wl-paste -t text --watch clipman store --no-persist\n```\n\n"
    },
    {
      "title": "Xresources",
      "level": 3,
      "content": "Copy ~/.Xresources to ~/.Xdefaults to use them in Sway.\n\n"
    },
    {
      "title": "Xwayland",
      "level": 3,
      "content": "See Wayland#Xwayland for details and an overview of available packages.\n\nThe use of Xwayland is enabled by default.\n\nIf you would like to disable Xwayland entirely and run a \"pure\" Wayland session, set the following to deactivate the use of Xwayland:\n\n```\n~/.config/sway/config\n```\n\n```\nxwayland disable\n```\n\nIf you would like to be able to tell at a glance which windows are using Xwayland, set the following:\n\n```\n~/.config/sway/config\n```\n\n```\nfor_window [shell=\"xwayland\"] title_format \"[XWayland] %title\"\n```\n\n"
    },
    {
      "title": "Use another wlroots renderer",
      "level": 3,
      "content": "To use another renderer such as vulkan, see Wayland#Use another renderer for wlroots based compositor.\n\n"
    },
    {
      "title": "Autostart",
      "level": 3,
      "content": "See i3#Autostart, adjusting the configuration file name for sway.\n\n"
    },
    {
      "title": "Initially enable CapsLock/NumLock",
      "level": 3,
      "content": "By default, sway initially disables the CapsLock and NumLock keys on startup. To instead enable them on startup, set the xkb_capslock and/or xkb_numlock input configurations to enable for your keyboards. For example, to do so on all keyboards, add the following lines to your sway configuration:\n\n```\n~/.config/sway/config\n```\n\n```\ninput type:keyboard xkb_capslock enabled\ninput type:keyboard xkb_numlock enabled\n```\n\nIn either case, the CapsLock and NumLock keys may be toggled by pressing the relevant keys on a keyboard.\n\n"
    },
    {
      "title": "Current keyboard layout",
      "level": 3,
      "content": "The current keyboard layout can be retrieved as follows, where kbd_identifier needs to be replaced with your keyboard's identifier:\n\n```\n$ swaymsg -t get_inputs | jq -r '.[] | select(.identifier == \"kbd_identifier\") | .xkb_active_layout_name'\n```\n\n"
    },
    {
      "title": "Compose key",
      "level": 3,
      "content": "To set up PrintScreen as the compose key:\n\n```\n$ swaymsg 'input * xkb_options compose:prsc'\n```\n\nThe available key combinations can be looked up as shown in Xorg/Keyboard configuration#Configuring compose key. The combinations for the compose key can also be configured in the XCompose file. Applications need to be restarted for this change to take effect.\n\n"
    },
    {
      "title": "Backlight toggle",
      "level": 3,
      "content": "To turn off (and on) your displays with a key (e.g. Pause) bind the following script in your Sway config:\n\n```\n#!/bin/sh\nread lcd < /tmp/lcd\n    if [ \"$lcd\" -eq \"0\" ]; then\n        swaymsg \"output * power on\"\n        echo 1 > /tmp/lcd\n    else\n        swaymsg \"output * power off\"\n        echo 0 > /tmp/lcd\n    fi\n```\n\nOr you can use the toggle option directly, but you need to specify an output explicitly if you have multiple monitors:\n\n```\n$ swaymsg \"output output_name power toggle\"\n```\n\n"
    },
    {
      "title": "Screen capture and screen sharing",
      "level": 3,
      "content": "See Screen capture#Wayland.\n\n"
    },
    {
      "title": "Color temperature adjustment",
      "level": 3,
      "content": "See Backlight#Wayland.\n\n"
    },
    {
      "title": "Color profile",
      "level": 3,
      "content": "It is possible to use a color profile by adding the following line to your config file:\n\n```\n~/.config/sway/config\n```\n\n```\noutput * color_profile icc /path/to/your/color_profile.icc\n```\n\n"
    },
    {
      "title": "Control swaynag with the keyboard",
      "level": 3,
      "content": "Swaynag, the default warning/prompt program shipped with sway, only supports user interaction with the mouse. A helper program such as swaynagmodeAUR may be used to enable interaction via keyboard shortcuts.\n\nSwaynagmode works by first launching swaynag, then listening for signals which trigger actions such as selecting the next button, dismissing the prompt, or accepting the selected button. These signals are sent by launching another instance of the swaynagmode script itself with a control argument, such as swaynagmode --select right or swaynagmode --confirm.\n\nSwaynagmode by default triggers the sway mode nag upon initialization, followed by default on exit. This makes it easy to define keybindings in your sway configuration:\n\n```\n~/.config/sway/config\n```\n\n```\nset $nag exec swaynagmode\nmode \"nag\" {\n  bindsym {\n    Ctrl+d    mode \"default\"\n\n    Ctrl+c    $nag --exit\n    q         $nag --exit\n    Escape    $nag --exit\n\n    Return    $nag --confirm\n\n    Tab       $nag --select prev\n    Shift+Tab $nag --select next\n\n    Left      $nag --select next\n    Right     $nag --select prev\n\n    Up        $nag --select next\n    Down      $nag --select prev\n  }\n}\n```\n\nNote that, beginning in sway version 1.2, mode names are case-sensitive.\n\nYou can configure sway to use swaynagmode with the configuration command swaynag_command swaynagmode.\n\n"
    },
    {
      "title": "Change cursor theme and size",
      "level": 3,
      "content": "To set the cursor theme and size:\n\n```\n~/.config/sway/config\n```\n\n```\nseat seat0 xcursor_theme my_cursor_theme my_cursor_size\n```\n\nWhere my_cursor_theme can be set to or replaced by a specific value like default, Adwaita or Simple-and-Soft, and my_cursor_size a value like 48.\n\nYou can inspect their values with echo $XCURSOR_SIZE and echo $XCURSOR_THEME.\n\nNote that you need to restart the application to see the changes.\n\n"
    },
    {
      "title": "Manage Sway-specific daemons with systemd",
      "level": 3,
      "content": "Systemd provides a graphical-session.target which is a user unit which is active whenever any graphical session is running, whether Xorg or Wayland. User services which should run in all graphical environments can be bound to that target. It also allows for a window-manager-specific target to be bound to graphical-session.target to start and stop services which should run only under that window manager. See systemd.special(7)\n\nUsers may want to start some services/daemons (such as swayidle or kanshi) only when the current window manager is Sway, and they may also want these services to stop when Sway stops. Additionally, users who are running systemd-oomd.service(8) may want to have the services be in separate cgroups so that a single memory-hungry service does not take down the whole Sway session (see the Fedora bug report).\n\nSome or all of this functionality is provided by Arch Sway packages. For example, both sway and sway-gitAUR provide a 50-systemd-user.conf drop-in file (see #Configuration).\n\nIf you intend to provide functionality using the roll-your-own method described below or by using a specialist package such as sway-systemd-gitAUR, sway-services-gitAUR or uwsm, you should consider removing files that provide the same functionality.\n\nThis functionality can be provided on a roll-your-own basis by creating a sway-session.target and let those daemons/services wanted by sway-session.target. This systemd target should be a user target (see systemd/User). For example:\n\n```\n~/.config/systemd/user/sway-session.target\n```\n\n```\n[Unit]\nDescription=Sway compositor session\nDocumentation=man:systemd.special\nBindsTo=graphical-session.target\nWants=graphical-session-pre.target\nAfter=graphical-session-pre.target\n```\n\nThen, add the following line to Sway's configuration file (for example, append the line to ~/.config/sway/config, or add a new file to /etc/sway/config.d/):\n\n```\n~/.config/sway/config\n```\n\n```\n...\n...\n...\nexec_always systemctl --user start sway-session.target\n```\n\nWith the above line in the configuration file, whenever Sway starts, it also activates sway-session.target.\n\nFinally, link the desired services to sway-session.target. You can find an example at kanshi#Manage kanshi with systemd.\n\nWhen this user unit is enabled, it is only activated when Sway is running and deactivated when Sway stops.\n\nThe creation of the sway-session.target file and the importing of the environment can also be accomplished by installing sway-systemd-gitAUR. In addition to separating services into cgroups, sway-systemd also places each GUI application in its own cgroup. This enables imposition of per-cgroup resource constraints on individual application. See the sway-systemd README. Alternatively, a more comprehensive solution is provided by uwsm.\n\n"
    },
    {
      "title": "Change screen resolution after start",
      "level": 3,
      "content": "You can use the graphical programs wdisplaysAUR, swayrandr-gitAUR or the terminal program wlr-randr to change the resolution, rotate and arrange displays or set the scaling factor.\n\n"
    },
    {
      "title": "Create headless outputs",
      "level": 3,
      "content": "Create outputs not related to a physical video interface, HEADLESS-1, HEADLESS-2, etc.:\n\n```\n$ swaymsg create_output\n```\n\nPrint a description of the new output:\n\n```\n$ swaymsg -pt get_outputs | grep -A 10 HEADLESS\n```\n\nConfigure the new output with the output command, for example:\n\n```\n~/.config/sway/config\n```\n\n```\noutput HEADLESS-1 {\npos 1920,0\nmode 1280x720@75Hz\n}\n```\n\n"
    },
    {
      "title": "Change modifier to CapsLock and keep Super",
      "level": 3,
      "content": "To change the modifier key to CapsLock and keep the Super key functional on a US keyboard layout, create ~/.config/xkb/symbols/custom with contents\n\n```\n~/.config/xkb/symbols/custom\n```\n\n```\nxkb_symbols \"basic\" {\n    include \"us\"\n    name[Group1]= \"English (US Custom)\";\n    key <CAPS> { [ Hyper_L ] };\n    modifier_map Mod4 { Hyper_L };\n    key <LWIN> { [ Super_L ] };\n    modifier_map Mod5 { Super_L };\n};\n```\n\nFor other languages, edit the second and third lines. Then include this keyboard layout in your sway config near the top of the file:\n\n```\n~/.config/sway/config\n```\n\n```\ninput * xkb_layout custom\nset $mod Mod4\nset $super Mod5\n```\n\n"
    },
    {
      "title": "Access headless Sway session remotely using VNC",
      "level": 3,
      "content": "The following code can, for example, be run over SSH to start a headless Sway session and access it remotely over VNC.\n\nwayvnc is a VNC server for wlroots-based Wayland compositors and can serve a headless Sway session.\n\nStart a headless Sway session by setting WLR_BACKENDS to headless and (optionally) WLR_LIBINPUT_NO_DEVICES to 1 (see the FAQ of wayvnc):\n\n```\n$ WLR_BACKENDS=headless WLR_LIBINPUT_NO_DEVICES=1 sway\n```\n\nNow, run wayvnc to serve the VNC server:\n\n```\n$ WAYLAND_DISPLAY=wayland-1 wayvnc\n```\n\nNote: **no encryption** \n\n"
    },
    {
      "title": "Application launchers",
      "level": 3,
      "content": "dmenu, and rofi function relatively well in Sway, but all run under Xwayland and suffer from the same issue where they can become unresponsive if the cursor is moved to a native Wayland window. The reason for this issue is that Wayland clients/windows do not have access to input devices unless they have focus of the screen. The Xwayland server is itself a client to the Wayland compositor, so one of its Xwayland clients must have focus for it to access user input. However, once one of its clients has focus, it can gather input and make it available to all Xwayland clients through the X11 protocol. Hence, moving the cursor to an Xwayland window and pressing Escape should fix the issue, and sometimes running pkill does too.\n\nbemenu is a native Wayland dmenu replacement. Both can optionally be combined with j4-dmenu-desktop to provide a Wayland-native combination for launching desktop files (as i3-dmenu-desktop does). For example:\n\n```\nj4-dmenu-desktop --dmenu='bemenu -i --nb \"#3f3f3f\" --nf \"#dcdccc\" --fn \"pango:DejaVu Sans Mono 12\"' --term='termite'\n```\n\nYou may need to set BEMENU_BACKEND environment variable to \"wayland\" if you choose not to disable Xwayland.\n\nYou can also build your own with a floating terminal and fzf as discussed in a GitHub issue.\n\nAlso krunner binary provided by plasma-workspace package can serve as launcher, offering both Xwayland and native Wayland support.\n\nrofi-wayland is a fork of rofi that works in Wayland and also has an -x11 flag if you need to launch it in an X11 session.\n\nwofi is a command launcher, that provides some of the same features as rofi but running under Wayland. wofi lacks some features from rofi like an SSH mode and a window-switching mode. It is based on wlroots library and use GTK3 for rendering. It works pretty well with sway.\n\nfuzzel is an application launcher for wlroots based Wayland compositors, similar to rofi's drun mode.\n\n"
    },
    {
      "title": "Virtualization",
      "level": 3,
      "content": "Sway works with both VirtualBox and VMware ESXi.\n\nFor Sway to work in QEMU, QEMU must be started with -vga qxl. See also QEMU#qxl.\n\n"
    },
    {
      "title": "Unable to start Sway from tty",
      "level": 4,
      "content": "For ESXi, you need to enable 3D support under the Hardware Configuration > Video card settings. See also VMware#Enable 3D graphics on Intel, Optimus and AMD.\n\n"
    },
    {
      "title": "No visible cursor",
      "level": 4,
      "content": "When using certain graphics drivers (e.g. the VMSVGA graphics controller or the proprietary NVIDIA driver), the cursor is invisible. This can be fixed by using software cursors as discussed in [4]:\n\n```\n$ export WLR_NO_HARDWARE_CURSORS=1\n```\n\n"
    },
    {
      "title": "Sway socket not detected",
      "level": 3,
      "content": "Using a swaymsg argument, such as swaymsg -t get_outputs, will sometimes return the message:\n\n```\nsway socket not detected.\nERROR: Unable to connect to\n```\n\nwhen run inside a terminal multiplexer (such as GNU Screen or tmux). This means swaymsg could not connect to the socket provided in your SWAYSOCK.\n\nTo view what the current value of SWAYSOCK is, type:\n\n```\n$ env | grep -F \"SWAYSOCK\"\n```\n\n```\nSWAYSOCK=/run/user/1000/sway-ipc.1000.4981.sock\n```\n\nTo work around this problem, you may try attaching to a socket based on the running sway process:\n\n```\n$ export SWAYSOCK=/run/user/$(id -u)/sway-ipc.$(id -u).$(pgrep -x sway).sock\n```\n\nTo avoid this error, run the command outside of a multiplexer.\n\n"
    },
    {
      "title": "Failed to connect to a Wayland server",
      "level": 3,
      "content": "Tmux creates local environment variables for each session (to see them type: tmux show-environment). Therefore, if you re-attach to a previous tmux session with tmux-resurrect or tmux-continuum, or your tmux server runs before sway starts, the environment variables are outdated.\n\nYou can use update-environment to instruct tmux to update them whenever you attach to the session by adding the following to your .tmux.conf:\n\n```\nset-option -g update-environment \"DISPLAY WAYLAND_DISPLAY SWAYSOCK SSH_AUTH_SOCK\"\n```\n\n"
    },
    {
      "title": "Unable to retrieve socket path",
      "level": 3,
      "content": "Requesting messages from swaymsg -t on a tty may return the following message:\n\n```\nUnable to retrieve socket path\n```\n\nSWAYSOCK environment variable is set after launching Sway, therefore a workaround to this error is to request swaymsg -t [message] in a terminal inside Sway.\n\n"
    },
    {
      "title": "Keybindings and keyboard layouts",
      "level": 3,
      "content": "By default, if you are using more than one keyboard layout, e.g. input * xkb_layout \"us,ru\", bindings may become broken when you switch on some secondary layout.\n\nThanks to https://github.com/swaywm/sway/pull/3058, all you need is to add --to-code key to sensitive bindsym lines like this:\n\n```\nbindsym --to-code {\n  $mod+$left focus left\n  $mod+$down focus down\n  $mod+$up focus up\n  $mod+$right focus right\n}\n```\n\nAlternatively you can create a variable set $mybind bindsym --to-code and then replace all instances of bindsym with $mybind like so: $mybind $mod+w thing\n\n"
    },
    {
      "title": "Java applications",
      "level": 3,
      "content": "Some Java-based applications will display blank screen when opened, for example any JetBrains editor such as IntelliJ, CLion, or PyCharm. To mitigate this, the application can be started with the _JAVA_AWT_WM_NONREPARENTING environment variable set to 1.\n\nIf you start the application from a launcher like rofi or dmenu, you might want to modify the application desktop entry as shown in Desktop entries#Modify environment variables.\n\nSome issues with Java applications have been fixed in OpenJDK 11 and Sway 1.5. However, certain applications require additional configuration to use newer versions of OpenJDK, in the case of Android Studio you must set STUDIO_JDK=/usr/lib/jvm/java-11-openjdk/. [5]\n\nThe JRE has a hardcoded list of known window managers in which Sway is not present. If you experience grey panels, mislocated menus, or improperly resized windows, see Java#Impersonate another window manager.\n\n"
    },
    {
      "title": "Scroll on border",
      "level": 3,
      "content": "If using the mouse scroll wheel on an application's border crashes sway, you could use border none for the app_id (e.g. Firefox).\n\n"
    },
    {
      "title": "Program cannot open display",
      "level": 3,
      "content": "If a program crashes on start with the error message \"cannot open display\", it is likely that the program you are using is an X11 program. You can use the Xwayland compatibility layer to run X11 programs under Wayland, see #Xwayland for details.\n\n"
    },
    {
      "title": "Mouse not working in WINE applications",
      "level": 3,
      "content": "When running programs, WINE expects a primary monitor to be set, which can cause issues (such as clicks not registering) as Wayland has no concept of a primary monitor. Instead, you can specify a primary monitor for Xwayland to use via xrandr by adding this line to your Sway configuration:\n\n```\n~/.config/sway/config\n```\n\n```\n...\nexec_always xrandr --output XWAYLAND0 --primary\n...\n```\n\nFor this to work your display position offset needs to be 0,0 because of a bug [6] in sway.\n\nNote that XWAYLAND0 (or any XWAYLAND display name) may not represent your monitor, and may be susceptible to change in different sessions. Instead, you can specify the first XWAYLAND display using this line instead:\n\n```\nexec_always xrandr --output $(xrandr | grep -m 1 XWAYLAND | awk '{print $1;}') --primary\n```\n\nYou may need to adjust these lines to suit your needs. You can find out which displays are mapped to what names by using the xrandr command with no arguments.\n\n"
    },
    {
      "title": "Flickering in games with NVIDIA GPUs",
      "level": 3,
      "content": "Although proprietary graphics drivers like NVIDIA are officially not supported, it is possible to use them, even for gaming. If you choose to do so, you may encounter flickering on the upper half of the screen, which can be worked around by replacing wlroots with wlroots-nvidiaAUR, or manually compiling your own version with the patch.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- GitHub project\n- Sway user-maintained wiki\n- Website\n- Announcing the release of sway 1.0\n\n"
    }
  ]
}