{
  "title": "NetBeans",
  "url": "https://wiki.archlinux.org/title/NetBeans",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Netbeans is an integrated development environment (IDE) for developing with Java, JavaScript, PHP, Python, Ruby, Groovy, C, C++, Scala, Clojure, and other languages.\n\nFrom Wikipedia:Netbeans:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the netbeans package. This is an old version (1 year at the time of editing).\n\nThe latest current version is available in the AUR: Install the netbeans-binAUR package.\n\n"
    },
    {
      "title": "Preserving configuration changes",
      "level": 3,
      "content": "- Settings in local version of netbeans.conf override the same settings in the global copy of the file.\n- Command-line options override settings in either of the configuration files.\n\nAnother alternative is to use a pacman hook that modifies the system-wide configuration file. For example:\n\n```\n/etc/pacman.d/hooks/10-netbeans.hook\n```\n\n```\n[Trigger]\nType = Path\nOperation = Install\nOperation = Upgrade\nTarget = usr/etc/netbeans.conf\n\n[Action]\nDescription = Updating netbeans.conf\nWhen = PostTransaction\nExec = /usr/bin/sed -i -E 's/netbeans_default_options=\"(.*)\"/netbeans_default_options=\"\\1 -J-Dawt.useSystemAAFontSettings=on -J-Dswing.aatext=true --fontsize 15\"/g' /usr/etc/netbeans.conf\n```\n\n"
    },
    {
      "title": "Font antialiasing in Netbeans",
      "level": 3,
      "content": "As Netbeans is written in Java, the font rendering is managed by Java itself and also by Netbeans. Modifying the font antialiasing parameters can thus happen at two levels:\n\n- Java.\n- In the Netbeans configuration. If the file is missing, you may need to create it.\n\n```\n~/.netbeans/version/etc/netbeans.conf\n```\n\n```\n[...]\nnetbeans_default_options=\"[...]-J-Dswing.aatext=TRUE -J-Dawt.useSystemAAFontSettings=on\"\n[...]\n```\n\n"
    },
    {
      "title": "Look and feel",
      "level": 3,
      "content": "To change Netbeans's look and feel, go to Tools > Options > Appearance > Look and Feel.\n\nTo add a dark look and feel to the GUI but also to the colorschemes used in the code, you can install one of the following certified extensions from the plugin directory which can be reached from Tools > Plugins > Available Plugins:\n\n- Dark Look And Feel Themes\n- Darcula LAF for NetBeans: which, as of January 2017, better integrates with current desktop environments and mimic the default Darcula look and feel from used in IntelliJ IDEA or Android Studio.\n\n"
    },
    {
      "title": "Integrate with the Apache Tomcat Servlet Container",
      "level": 3,
      "content": "It is possible to debug web applications running on Tomcat from within Netbeans, using stock Arch packages for both Netbeans and Tomcat.\n\n- First install your desired version of Tomcat (see Tomcat).\n- While you can modify the configuration files in /etc/tomcatn to work with Netbeans debugging, it is recommended you create local copies and use those instead. That way, you still can run Tomcat as an ongoing system service, while debuggging with a different instance: Pick a location for the local configuration files, such as ~/.tomcatn and create that directory. Copy /etc/tomcatn/ to ~/.tomcatn/conf, e.g. cp -r /etc/tomcatn ~/.tomcatn/conf and chown -R $(id -un):$(id -gn) ~/.tomcatn, both with root privileges\n- Clean up the Tomcat users and permission file, so Netbeans can insert what it needs. Edit the tomcat user file without any user and role information in it:\n\n- Pick a location for the local configuration files, such as ~/.tomcatn and create that directory.\n- Copy /etc/tomcatn/ to ~/.tomcatn/conf, e.g. cp -r /etc/tomcatn ~/.tomcatn/conf and chown -R $(id -un):$(id -gn) ~/.tomcatn, both with root privileges\n\n```\n~/.tomcatn/conf/tomcat-users.xml\n```\n\n```\n<?xml version='1.0' encoding='utf-8'?>\n<tomcat-users xmlns=\"http://tomcat.apache.org/xml\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n              xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\"\n              version=\"1.0\">\n</tomcat-users>\n```\n\n- Make the \"manager\" app accessible from your local configuration: mkdir ~/.tomcatn/webapps and ln -s /var/lib/tomcatn/webapps/manager ~/.tomcatn/webapps/manager\n- Provide a temp directory: mkdir ~/.tomcatn/temp\n- If needed, change the port at which Tomcat runs by editing ~/.tomcatn/conf/server.xml.\n- Have Tomcat write its logs somewhere else than /var/log/tomcatn\n- Unfortunately, Netbeans refuses to continue unless it can read /etc/tomcatn/server.xml, so temporarily give the file 644 permissions. Change the permissions back later.\n\nThen, in Netbeans:\n\n- Go to Tools > Servers > Add Server and select Apache Tomcat. Click Next.\n- In Server location, specify /usr/share/tomcatn.\n- Check Use Private Configuration Folder (Catalina Base) and specify the full path to directory ~/.tomcatn. This must be the full path, as Netbeans does not recognize the meaning of ~.\n- Finally, pick a username and password. Check Create user if it does not exist. This will configure Netbeans, but also add the user information to the tomcat-users.xml file.\n\nNote that this local instance of Tomcat will write its logs to ~/.tomcatn/logs, not /var/log/tomcatn.\n\n"
    },
    {
      "title": "Integrate Netbeans with GNOME-Keyring",
      "level": 3,
      "content": "Install libgnome-keyring.\n\n"
    },
    {
      "title": "Maven problems with small tmpfs",
      "level": 3,
      "content": "If your system has a small tmpfs partition, you will have problems unpacking the maven index (will continue downloading again after failing to unpack). To fix this issue, append the following pieces of information in the Netbeans configuration file accordingly:\n\n```\n~/.netbeans/version/etc/netbeans.conf\n```\n\n```\n[...]\nnetbeans_default_options=\"[...]-J-client -J-Xss2m -J-Xms32m -J-XX:PermSize=32m -J-Dapple.laf.useScreenMenuBar=true -J-Dapple.awt.graphics.UseQuartz=true -J-Dsun.java2d.noddraw=true -J-Dsun.java2d.dpiaware=true -J-Dsun.zip.disableMemoryMapping=true -J-Djava.io.tmpdir=/path/to/tmp/dir\"\n[...]\n```\n\n"
    },
    {
      "title": "Wrong Directory for JDK/JRE",
      "level": 3,
      "content": "It might be that after installation, netbeans_jdkhome is set incorrectly:\n\n```\n/usr/share/netbeans/etc/netbeans.conf\n```\n\n```\n[...]\nnetbeans_jdkhome=\"/home/aur/aur-netbeans-cpp/pkg/netbeans-cpp/usr/share/netbeans/bin/jre\" (example)\n[...]\n```\n\nJust comment out this line; netbeans will find the proper path on startup. Since netbeans.conf might be overwritten during an update, this procedure might need to be done again after an update, or you put netbeans_jdkhome into the configuration file in your home directory (see above).\n\n"
    },
    {
      "title": "Plugin installation fails due to lack of unpack200",
      "level": 3,
      "content": "The unpack200 plugin was removed in JDK version 14, causing plugin installation in Netbeans to fail. As a workaround, one can set netbeans_jdkhome in /usr/share/netbeans/etc/netbeans.conf to an earlier JDK version. After plugin installation, you can return to the default JDK, but this will have to be repeated for each plugin update.\n\n"
    }
  ]
}