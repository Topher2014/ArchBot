{
  "title": "WPA supplicant",
  "url": "https://wiki.archlinux.org/title/WPA_supplicant",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Network configuration\n- Wireless network configuration\n- iwd\n\nwpa_supplicant is a cross-platform supplicant with support for WPA, WPA2 and WPA3 (IEEE 802.11i). It is suitable for desktops, laptops and embedded systems. It is the IEEE 802.1X/WPA component that is used in the client stations. It implements key negotiation with a WPA authenticator and it controls the roaming and IEEE 802.11 authentication/association of the wireless driver.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the wpa_supplicant package, which includes the main program wpa_supplicant, the passphrase tool wpa_passphrase, and the text front-end wpa_cli.\n\nOptionally, also install the official wpa_supplicant_guiAUR which provides wpa_gui, a graphical front-end for wpa_supplicant, or wpa-cuteAUR which is a fork from an earlier version of wpa_gui with a couple of fixes and improvements.\n\n"
    },
    {
      "title": "Overview",
      "level": 2,
      "content": "The first step to connect to an encrypted wireless network is having wpa_supplicant obtain authentication from a WPA authenticator. In order to do this, wpa_supplicant must be configured so that it will be able to submit the correct credentials to the authenticator.\n\nOnce you are authenticated you need to assign an IP address, see Network configuration#IP addresses.\n\n"
    },
    {
      "title": "Connecting with wpa_cli",
      "level": 2,
      "content": "This connection method allows scanning for available networks, making use of wpa_cli, a command line tool which can be used to configure wpa_supplicant. See wpa_cli(8) for details.\n\nIn order to use wpa_cli, a control interface must be specified for wpa_supplicant, and it must be given the rights to update the configuration. Do this by creating a minimal configuration file:\n\n```\n/etc/wpa_supplicant/wpa_supplicant.conf\n```\n\n```\nctrl_interface=/run/wpa_supplicant\nupdate_config=1\n```\n\nNow start wpa_supplicant with:\n\n```\n# wpa_supplicant -B -i interface -c /etc/wpa_supplicant/wpa_supplicant.conf\n```\n\nAt this point run:\n\n```\n# wpa_cli\n```\n\nThis will present an interactive prompt (>), which has tab completion and descriptions of completed commands. There is also a help command.\n\n- The default location of the control socket is /var/run/wpa_supplicant/. A custom path can be set manually with the -p option to match the wpa_supplicant configuration.\n- It is possible to specify the interface to be configured with the -i option; otherwise, the first found wireless interface managed by wpa_supplicant will be used.\n\nUse the scan and scan_results commands to see the available networks:\n\n```\n> scan\nOK\n<3>CTRL-EVENT-SCAN-RESULTS\n> scan_results\nbssid / frequency / signal level / flags / ssid\n00:00:00:00:00:00 2462 -49 [WPA2-PSK-CCMP][ESS] MYSSID\n11:11:11:11:11:11 2437 -64 [WPA2-PSK-CCMP][ESS] ANOTHERSSID\n```\n\nTo associate with MYSSID, add the network, set the credentials and enable it:\n\n```\n> add_network\n0\n> set_network 0 ssid \"MYSSID\"\n> set_network 0 psk \"passphrase\"\n> enable_network 0\n<2>CTRL-EVENT-CONNECTED - Connection to 00:00:00:00:00:00 completed (reauth) [id=0 id_str=]\n```\n\nIf the SSID does not have password authentication, you must explicitly configure the network as keyless by replacing the command set_network 0 psk \"passphrase\" with set_network 0 key_mgmt NONE.\n\n- Multiple network configurations can be added. Each network is indexed numerically, so the first network will have index 0.\n- If no connection can be established, some information will be printed, and periodic attempts will be made. As part of the periodic attempts, a user prompt will also be given periodically. Issuing the disable_network 0 command will stop the periodic attempts and return to a steady user prompt.\n- If a passphrase is given to set_network, the PSK will be computed from the quoted \"passphrase\" string. Alternatively, you can use the wpa_passphrase command and enter the PSK directly by passing it to psk without quotes.\n\nFinally save this network in the configuration file and quit wpa_cli:\n\n```\n> save_config\nOK\n> quit\n```\n\nOnce association is complete, you must obtain an IP address. See Network configuration#Network management for details.\n\n"
    },
    {
      "title": "Connecting with wpa_passphrase",
      "level": 2,
      "content": "This connection method allows quickly connecting to a network whose SSID is already known, making use of wpa_passphrase, a command line tool which generates the minimal configuration needed by wpa_supplicant. For example:\n\n```\n$ wpa_passphrase MYSSID passphrase\n```\n\n```\nnetwork={\n    ssid=\"MYSSID\"\n    #psk=\"passphrase\"\n    psk=59e0d07fa4c7741797a4e394f38a5c321e3bed51d54ad5fcbd3f84bc7415d73d\n}\n```\n\nThis means that wpa_supplicant can be associated with wpa_passphrase and started with:\n\n```\n# wpa_supplicant -B -i interface -c <(wpa_passphrase MYSSID passphrase)\n```\n\n- The previous command requires a root shell.\n- Use quotes, if the input contains spaces. For example: \"secret passphrase\".\n- To discover your wireless network interface name, see Network configuration#Listing network interfaces.\n- Some unusually complex passphrases may require input from a file, e.g. wpa_passphrase MYSSID < passphrase.txt, or here strings, e.g. wpa_passphrase MYSSID <<< \"passphrase\".\n- Alternatively, when using special characters in the passphrase, rather than escaping them, simply invoke wpa_passphrase without specifying the passphrase. It will then prompt for it to be entered in the standard input where users can paste it even if it contains special characters.\n\nFinally, you should obtain an IP address, see Network configuration#IP addresses.\n\n"
    },
    {
      "title": "Advanced usage",
      "level": 2,
      "content": "For networks of varying complexity, possibly employing extensive use of EAP, it will be useful to maintain a customised configuration file. For an overview of the configuration with examples, refer to wpa_supplicant.conf(5); for details on all the supported configuration parameters, refer to the example file /usr/share/doc/wpa_supplicant/wpa_supplicant.conf.[1]\n\n"
    },
    {
      "title": "Configuration",
      "level": 3,
      "content": "As explained in #Connecting with wpa_passphrase, a basic configuration file can be generated with:\n\n```\n# wpa_passphrase MYSSID passphrase > /etc/wpa_supplicant/example.conf\n```\n\nThis will only create a network section. A configuration file with also the ability of #Connecting with wpa_cli and some other common options may look like:\n\n```\n/etc/wpa_supplicant/example.conf\n```\n\n```\n# Giving configuration update rights to wpa_cli\nctrl_interface=/run/wpa_supplicant\nctrl_interface_group=wheel\nupdate_config=1\n\n# AP scanning\nap_scan=1\n\n# ISO/IEC alpha2 country code in which the device is operating\ncountry=US\n\n# network section generated by wpa_passphrase\nnetwork={\n    ssid=\"MYSSID\"\n    psk=59e0d07fa4c7741797a4e394f38a5c321e3bed51d54ad5fcbd3f84bc7415d73d\n}\n```\n\nIf security is not a concern, the passphrase can also be defined in clear text in the network section by enclosing it in quotes:\n\n```\npsk=\"passphrase\"\n```\n\nIf the network does not have a passphrase, e.g. a public Wi-Fi:\n\n```\nnetwork={\n   ssid=\"MYSSID\"\n   key_mgmt=NONE\n}\n```\n\nTo connect to a WPA-Enterprise network, see #802.1x/radius.\n\nFurther network blocks may be added manually, or using wpa_cli as illustrated in #Connecting with wpa_cli. In order to use wpa_cli, a control interface must be set with the ctrl_interface option. Setting ctrl_interface_group=wheel allows users belonging to such group to execute wpa_cli. This setting can be used to enable users without root access (or equivalent via sudo etc) to connect to wireless networks. Also add update_config=1 so that changes made with wpa_cli to example.conf can be saved. Note that any user that is a member of the ctrl_interface_group group will be able to make changes to the file if this is turned on.\n\nfast_reauth=1 and ap_scan=1 are the wpa_supplicant options active globally at the time of writing. Whether you need them, or other global options too for that matter, depends on the type of network to connect to. If you need other global options, simply copy them over to the file from /usr/share/doc/wpa_supplicant/wpa_supplicant.conf.\n\nAlternatively, wpa_cli set can be used to see options' status or set new ones. Multiple network blocks may be appended to this configuration: the supplicant will handle association to and roaming between all of them. The strongest signal defined with a network block usually is connected to by default, one may define priority= to influence behaviour. For example to auto-connect to any unsecured network as a fallback with the lowest priority:\n\n```\nnetwork={\n   key_mgmt=NONE\n   priority=-999\n}\n```\n\nOnce you have finished the configuration file, you can optionally use it as a system-wide or per-interface default configuration by naming it according to the paths listed in #At boot (systemd). This also applies if you use additional network manager tools, which may rely on the paths (for example Dhcpcd#10-wpa_supplicant).\n\n"
    },
    {
      "title": "Manual",
      "level": 4,
      "content": "First start wpa_supplicant command, whose most commonly used arguments are:\n\n- -B - Fork into background.\n- -c filename - Path to configuration file.\n- -i interface - Interface to listen on.\n- -D driver - Optionally specify the driver to be used. For a list of supported drivers see the output of wpa_supplicant -h. nl80211 is the current standard, but not all wireless chip's modules support it. wext is currently deprecated, but still widely supported.\n\n- nl80211 is the current standard, but not all wireless chip's modules support it.\n- wext is currently deprecated, but still widely supported.\n\nSee wpa_supplicant(8) for the full argument list. For example:\n\n```\n# wpa_supplicant -B -i interface -c /etc/wpa_supplicant/example.conf\n```\n\nfollowed by a method to obtain an ip address manually as indicated in the #Overview, for example:\n\n```\n# dhcpcd interface\n```\n\n- dhcpcd has a hook that can launch wpa_supplicant implicitly, see dhcpcd#10-wpa_supplicant.\n- While testing arguments/configuration it may be helpful to launch wpa_supplicant in the foreground (i.e. without the -B option) for better debugging messages.\n\n"
    },
    {
      "title": "At boot (systemd)",
      "level": 4,
      "content": "The wpa_supplicant package provides multiple systemd service files:\n\n- wpa_supplicant.service - uses D-Bus, recommended for NetworkManager users.\n- wpa_supplicant@interface.service - accepts the interface name as an argument and starts the wpa_supplicant daemon for this interface. It reads a /etc/wpa_supplicant/wpa_supplicant-interface.conf configuration file. Useful when using systemd-networkd.\n- wpa_supplicant-nl80211@interface.service - also interface specific, but explicitly forces the nl80211 driver (see below). The configuration file path is /etc/wpa_supplicant/wpa_supplicant-nl80211-interface.conf.\n- wpa_supplicant-wired@interface.service - also interface specific, uses the wired driver. The configuration file path is /etc/wpa_supplicant/wpa_supplicant-wired-interface.conf.\n\nTo enable wireless at boot, enable an instance of one of the above services on a particular wireless interface. For example, enable the wpa_supplicant@interface systemd unit.\n\nNow choose and enable an instance of a service to obtain an ip address for the particular interface as indicated in the #Overview. For example, enable the dhcpcd@interface systemd unit.\n\nTo connect a wired adapter using 802.1x/radius you will need to specify some configurations and enable the necessary service for the adapter. This is useful for headless servers using systemd-networkd.\n\nYou may need to specify the wired driver with the -D wired command line option (see #Manual) if the default driver does not support your adapter.\n\nReplace adapter with the wired adapter you wish to connect, and adapt the settings to match your 802.1x/radius requirements.\n\n```\n/etc/wpa_supplicant/wpa_supplicant-wired-adapter.conf\n```\n\n```\nctrl_interface=/run/wpa_supplicant\nap_scan=0\nnetwork={\n  key_mgmt=IEEE8021X\n  eap=PEAP\n  identity=\"user_name\"\n  password=\"user_password\"\n  phase2=\"autheap=MSCHAPV2\"\n}\n```\n\nSince this file is storing a plaintext password, chown it to root:root and chmod it to 600.\n\nTo use the hash instead of the plaintext password, you can use the hash keyword:\n\n```\npassword=hash:hash_of_plaintext_password\n```\n\nTo hash your password:\n\n```\n$ iconv -t utf16le | openssl dgst -md4 -provider legacy\n```\n\nAfter invoking the command above, provide your plain password and then press Ctrl+d.\n\nBefore running the wpa_supplicant-wired@adapter.service service, make sure to set the device down:\n\n```\n# ip link set adapter down\n```\n\n"
    },
    {
      "title": "wpa_cli action script",
      "level": 3,
      "content": "wpa_cli can run in daemon mode and execute a specified script based on events from wpa_supplicant. Two events are supported: CONNECTED and DISCONNECTED. Some environment variables are available to the script, see wpa_cli(8) for details.\n\nThe following example will use notify-send to notify the user about the events:\n\n```\n#!/bin/sh\n\ncase \"$2\" in\n    CONNECTED)\n        notify-send \"WPA supplicant: connection established\";\n        ;;\n    DISCONNECTED)\n        notify-send \"WPA supplicant: connection lost\";\n        ;;\nesac\n```\n\nRemember to make the script executable, then use the -a flag to pass the script path to wpa_cli:\n\n```\n$ wpa_cli -a /path/to/script\n```\n\n"
    },
    {
      "title": "Roaming",
      "level": 3,
      "content": "When connected to a wireless network with multiple access points, wpa_supplicant is typically responsible for roaming between access points. Choosing a new access point requires wpa_supplicant to perform a scan of available networks, which causes a brief interruption in connectivity to the current access point while the wireless radio scans other frequencies. After a scan, if wpa_supplicant detects a closer access point (BSSID) in the current network (SSID), in terms of signal strength (RSSI), it will re-associate to the closer access point.\n\nThe default configuration of wpa_supplicant has relatively timid roaming: it will rescan only when the association to the current access point is lost. This means that, if a client moves far away from its current access point, but not far enough to completely lose signal, the client will keep using the weak signal instead of roaming to a closer access point.\n\nTo make wpa_supplicant more aggressive about roaming, set the bgscan parameter in the configuration file, such as:\n\n```\nbgscan=\"simple:30:-70:3600\"\n```\n\nThe above example will cause wpa_supplicant to scan every 30 seconds when the signal is weak (below -70), and every 3600 seconds otherwise. bgscan can be specified either in specific network blocks or globally for all networks.\n\n"
    },
    {
      "title": "Debugging connection failures",
      "level": 3,
      "content": "In order to determine why you are unable to connect to an access point you can run wpa_supplicant with the -d flag for debug messages, wait a couple seconds then look for lines that list SSIDs and the reason they were not connected to. For example:\n\n```\n# wpa_supplicant -i wlan0 -c /etc/wpa_supplicant/example.conf -d\n```\n\n```\nwlan0: Selecting BSS from priority group 0\nwlan0: 0: d2:93:5b:b7:5d:d2 ssid= wpa_ie_len=26 rsn_ie_len=24 caps=0x511 level=-54 freq=5180\nwlan0:    skip - SSID not known\nwlan0: 1: f2:93:5b:b7:5d:d2 ssid= wpa_ie_len=26 rsn_ie_len=24 caps=0x511 level=-54 freq=5180\nwlan0:    skip - SSID not known\nwlan0: 2: b2:93:5b:b7:5d:d2 ssid= wpa_ie_len=26 rsn_ie_len=24 caps=0x511 level=-54 freq=5180\nwlan0:    skip - SSID not known\nwlan0: 3: b0:93:5b:b7:5d:d2 ssid='Access Point 1' wpa_ie_len=0 rsn_ie_len=20 caps=0x511 level=-55 freq=5180  wps\nwlan0:    skip - SSID mismatch\nwlan0: 4: c4:13:e2:33:42:20 ssid='\\x00\\x00\\x00\\x00' wpa_ie_len=22 rsn_ie_len=0 caps=0x111 level=-69 freq=5260\nwlan0:    skip - SSID mismatch\nwlan0: 5: c4:13:e2:33:42:24 ssid='Home' wpa_ie_len=0 rsn_ie_len=26 caps=0x1111 level=-69 freq=5260\nwlan0:    skip RSN IE - no mgmt frame protection enabled but AP requires it\nwlan0:    reject due to mismatch with WPA/WPA2\n...\n```\n\nIn this case we are trying to connect to an access point with the SSID home. The reason the connection fails is skip RSN IE - no mgmt frame protection enabled but AP requires it, so we need to add ieee80211w=2 to our configuration file.\n\n"
    },
    {
      "title": "nl80211 driver not supported on some hardware",
      "level": 3,
      "content": "On some (especially old) hardware, wpa_supplicant may fail with the following error:\n\n```\nSuccessfully initialized wpa_supplicant\nnl80211: Driver does not support authentication/association or connect commands\nwlan0: Failed to initialize driver interface\n```\n\nThis indicates that the standard nl80211 driver does not support the given hardware. The deprecated wext driver might still support the device:\n\n```\n# wpa_supplicant -B -i wlan0 -D wext -c /etc/wpa_supplicant/example.conf\n```\n\nIf the command works to connect, and the user wishes to use systemd to manage the wireless connection, it is necessary to edit the wpa_supplicant@.service unit provided by the package and modify the ExecStart line accordingly:\n\n```\n/etc/systemd/system/wpa_supplicant@.service.d/wext.conf\n```\n\n```\n[Service]\nExecStart=\nExecStart=/usr/bin/wpa_supplicant -c/etc/wpa_supplicant/wpa_supplicant-%I.conf -i%I -Dnl80211,wext\n```\n\n"
    },
    {
      "title": "Problem with mounted network shares (cifs) and shutdown",
      "level": 3,
      "content": "When you use wireless to connect to network shares you might have the problem that the shutdown takes a very long time. That is because systemd runs against a 3 minute timeout. The reason is that WPA supplicant is shut down too early, i.e. before systemd tries to unmount the share(s). A bug report suggests a work-around by editing the wpa_supplicant@.service as follows:\n\n```\n/etc/systemd/system/wpa_supplicant.service.d/override.conf\n```\n\n```\n[Unit]\nAfter=dbus.service\n```\n\n"
    },
    {
      "title": "Password-related problems",
      "level": 3,
      "content": "wpa_supplicant may not work properly if directly passed via stdin particularly long or complex passphrases which include special characters. This may lead to errors such as failed 4-way WPA handshake, PSK may be wrong when launching wpa_supplicant.\n\nIn order to solve this try using here strings wpa_passphrase <MYSSID> <<< \"<passphrase>\" or passing a file to the -c flag instead:\n\n```\n# wpa_supplicant -i <interface> -c /etc/wpa_supplicant/example.conf\n```\n\nIn some instances it was found that storing the passphrase cleartext in the psk key of the wpa_supplicant.conf network block gave positive results (see [2]). However, this approach is rather insecure. Using wpa_cli to create this file instead of manually writing it gives the best results most of the time and therefore is the recommended way to proceed.\n\n"
    },
    {
      "title": "Problems with Eduroam",
      "level": 3,
      "content": "If the institution the user studies or works at did not upgrade their network tunnel's encryption to at least TLS 1.2 yet and still uses TLS 1.0 or 1.1 for network traffic encryption in their Eduroam Wi-Fi infrastructure, OpenSSL 3.x throws an \"unsupported protocol\" error and the client machine's Wi-Fi backend (either wpa_supplicant or iwd) refuses to establish a connection any further. Fortunately, an easy workaround exists for OpenSSL's TLS 1.0 and 1.1 deprecation without making the client computer's whole Wi-Fi connection stack globally vulnerable to attacks, although it only works with NetworkManager.\n\nConsult NetworkManager#WPA Enterprise connections fail to authenticate with OpenSSL \"unsupported protocol\" error for the solution.\n\nConnman users can visit the ConnMan#Connecting to eduroam (802.1X) article for their own version of the fix.\n\n"
    },
    {
      "title": "Connections to pure WPA3-SAE access points",
      "level": 3,
      "content": "Make sure to define the following within the network block of the configuration to enable connections to pure WPA3 access points:\n\n```\nssid=\"network SSID\"\nkey_mgmt=SAE\nsae_password=\"the.literal.wifi.password\"\nieee80211w=2\n```\n\nAdditionally, Intel Wi-Fi 6 cards may need sae_pwe=1 in the main (non network) section of the config file.\n\n"
    },
    {
      "title": "Connections to mixed WPA2-PSK/WPA3-SAE access points",
      "level": 3,
      "content": "Mixed WPA2-PSK/WPA3-SAE access points will require an alternative setting for key_mgmt as shown below:\n\n```\nssid=\"network SSID\"\nkey_mgmt=WPA-PSK-SHA256\npsk=xxx\nieee80211w=2\n```\n\n"
    },
    {
      "title": "Hardware 802.11w support",
      "level": 3,
      "content": "You can check for hardware support of MFP/PMF (Management Frame Protection / Protected Management Frames) on the interface client by running:\n\n```\n$ iw phy phy0 info | grep 00-0f-ac:6\n```\n\nMost Wi-Fi devices support this standard introduced in 2009, except some limited (aka non x86_64 related) or old hardware.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- wpa_supplicant home\n- wpa_supplicant README - contains full documentation of project, including wpa_cli commands not listed in manpage.\n- wpa_cli usage examples\n- wpa_supplicant(8)\n- wpa_supplicant.conf(5)\n- wpa_cli(8)\n- Kernel.org wpa_supplicant documentation\n\n"
    }
  ]
}