{
  "title": "EXWM",
  "url": "https://wiki.archlinux.org/title/EXWM",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Window manager\n\nEXWM is a window manager based on Emacs.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Make sure you have emacs installed. You will also need xorg-xinit.\n\nInstall EXWM from within Emacs: M-x package-install RET exwm RET.\n\nEdit xinitrc and add:\n\n```\nexec emacs\n```\n\nIn your emacs init file, add:\n\n```\n(require 'exwm)\n(require 'exwm-config)\n(exwm-config-example)\n```\n\nto use the default settings. If you want to use your own settings, use (exwm-enable) instead of (exwm-config-example) (and you do not need to (require 'exwm-config)).\n\nIt is also possible to start emacs in server mode and to start EXWM from commandline. See https://github.com/ch11ng/exwm/issues/284.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "EXWM is a full X window manager, so Emacs manages X windows such as your browser, vlc, etc. You may use all the normal Emacs window commands to control window placement. In X windows (i.e. not \"normal\" Emacs buffers), some commands are caught by EXWM and not passed through to the program. These keys are store in exwm-input-prefix-keys. Alternatively, you can set global commands by customizing exwm-input-global-keys. If you would rather set exwm-input-global-keys in elisp rather than using the customization feature, be aware that you may have to restart EXWM (and set exwm-input-global-keys before enabling exwm). Alternatively, you could try using the cset macro from the \"or emacs\" blog[dead link 2025-04-05 â“˜], which should work for redefining exwm-input-global-keys without restarting EXWM. To use s-& as a keyboard shortcut to launch a program (e.g. firefox), you can do:\n\n```\n(setq exwm-input-global-keys `(,(kbd \"s-&\") .\n                               (lambda (command)\n                                 (interactive (list (read-shell-command \"$ \")))\n                                 (start-process-shell-command command nil command))))\n```\n\n"
    },
    {
      "title": "Multi-monitor",
      "level": 3,
      "content": "EXWM can handle multi-monitor through the (optional) exwm-randr package. You will need to install xrandr and enable exwm-randr in your emacs configuration file before calling (exwm-enable). You will need to adjust the values of \"DP-1\" and \"DP-2\" to the values your computer uses; call xrandr at the command line with no arguments to see available outputs.\n\n```\n(require 'exwm-randr)\n(setq exwm-randr-workspace-output-plist '(1 \"DP-1\"))\n(add-hook 'exwm-randr-screen-change-hook\n          (lambda ()\n            (start-process-shell-command\n             \"xrandr\" nil \"xrandr --output DP-1 --right-of DP-2 --auto\")))\n```\n\n"
    },
    {
      "title": "System tray",
      "level": 3,
      "content": "EXWM supports a system tray, but it is not enabled by default. To enable it, put the following before (exwm-enable) in your dotemacs file:\n\n```\n(require 'exwm-systemtray)\n(exwm-systemtray-mode 1)\n```\n\nYou may need to adjust the height afterwards; this can be adjusted with the exwm-systemtray-height variable.\n\n"
    },
    {
      "title": "Embedding within LXDE",
      "level": 2,
      "content": "EXWM can be used in place of openbox, allowing you to still use LXDE session management tools.\n\nBefore doing this, make sure you have your init file for emacs already set up to run EXWM (see above)\n\nlxsession uses the window manager defined in ~/.config/lxsession/LXDE/desktop.conf (Openbox by default). If this file does not exist, it searches in /etc/xdg/lxsession/LXDE/desktop.conf instead.\n\nReplace openbox-lxde in either file with emacs:\n\n```\n[Session]\nwindow_manager=emacs\n```\n\n"
    },
    {
      "title": "lxsession-logout",
      "level": 3,
      "content": "You can create the following function within emacs to log out, shutdown, or reboot cleanly from within a LXDE session:\n\n```\n(defun exwm-logout ()\n  (interactive)\n  (recentf-save-list)\n  (save-some-buffers)\n  (start-process-shell-command \"logout\" nil \"lxsession-logout\"))\n```\n\nThis stores your recentf history to disk, prompts you to save, discard, or diff changes within unsaved buffers, then launches the logout manager. You can bind this function to any key within emacs.\n\n"
    },
    {
      "title": "Screen tearing in Firefox",
      "level": 3,
      "content": "You may experience screen tearing in some programs, particularly Firefox. You can try:\n\n- turning off smooth scrolling in Preferences > Advanced > Use Smooth Scrolling.\n- installing (and activating) Compton or another composite manager: Xorg#Composite.\n\n"
    },
    {
      "title": "Confusing Buffer Names",
      "level": 3,
      "content": "You may see the buffer names being named '*EXWM*'. This makes it confusing while switching between buffers .EXWM allows the buffers to name themself . To allow buffers to name themself put the following in your dotemacs .\n\n```\n;; Make buffer name more meaningful\n(add-hook 'exwm-update-class-hook\n          (lambda ()\n          (exwm-workspace-rename-buffer exwm-class-name)))\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- EXWM wiki\n\n"
    }
  ]
}