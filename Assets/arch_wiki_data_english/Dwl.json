{
  "title": "Dwl",
  "url": "https://wiki.archlinux.org/title/Dwl",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Window manager\n- Wayland\n\ndwl is the wlroots-based fork of the suckless window manager dwm created for Wayland users.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "dwl can be installed with the dwlAUR or dwl-gitAUR packages. Make any required configuration changes before building and installing, see makepkg.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "dwl is configured at compile-time by editing some of its source files, specifically config.h. For detailed information on these settings, see the included, well-commented config.def.h\n\nThe official website has a number of patches that can add extra functionality to dwl. These patches primarily make changes to the dwl.c file but also make changes to the config.h file where appropriate. For information on applying patches, see the Patching packages article.\n\n"
    },
    {
      "title": "Enable XWayland",
      "level": 3,
      "content": "To build dwl with XWayland enabled, install xorg-xwayland and uncomment the following lines in the config.mk file:\n\n```\n# Uncomment to build XWayland support\nXWAYLAND = -DXWAYLAND\nXLIBS = xcb xcb-icccm\n```\n\n"
    },
    {
      "title": "Starting",
      "level": 2,
      "content": "Select Dwl from the menu in a display manager of choice.\n\nYou can also autostart a command using the -s flag. This command will have information about selected layouts, current window title, app-id, and tags written to it's stdin by dwl. You can use this to populate your status bar. If your command does not consume the data sent by dwl, append <&- to it like this:\n\n```\ndwl -s 'sh /path/to/autostart.sh <&-'\n```\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "See the dwl tutorial for information on basic dwl usage.\n\n"
    },
    {
      "title": "WebRTC screen sharing",
      "level": 3,
      "content": "install xdg-desktop-portal-wlr and xdg-desktop-portal-gtk\n\nthen in ~/.config/xdg-desktop-portal/\n\n```\nportals.conf\n```\n\n```\n[preferred]\ndefault=gtk\norg.freedesktop.impl.portal.Screenshot=wlr\norg.freedesktop.impl.portal.ScreenCast=wlr\n```\n\nthen restart\n\n```\nyou change a setting or update the dwl code base.\n```\n\n"
    },
    {
      "title": "Floating layout for some windows",
      "level": 3,
      "content": "For some windows, such as preferences dialogs, it does not make sense for these windows to be tiled - they should be free-floating instead. For example, to make Firefox's preferences dialog float, add the following to your rules array in config.h:\n\n```\n{ \"Firefox\",     NULL,       \"Firefox Preferences\",        1 << 8,         True,     -1 },\n```\n\n"
    },
    {
      "title": "Taking screenshots",
      "level": 3,
      "content": "Install the grim package. Next create two scripts:\n\n```\n/path/to/scripts/screenshot.sh\n```\n\n```\n#!/bin/sh\nmkdir -p /path/to/pics && grim /path/to/pics/%m-%d-%Y-%H%M%S.png\n```\n\nfor making screenshots and\n\n```\n/path/to/scripts/screenshotsel.sh\n```\n\n```\n#!/bin/sh\nmkdir -p /path/to/pics && grim /path/to/pics/%m-%d-%Y-%H%M%S.png --select --line mode=edge\n```\n\nfor making screenshots with a selection box. Give them executable permissions. In config.h add the following:\n\n```\nstatic const Key keys[] = {\n       ...\n       \n       { 0,         XKB_Print, spawn, SHCMD(\"/path/to/scripts/screenshot.sh\") },\n       { ShiftMask, XKB_Print, spawn, SHCMD(\"/path/to/scripts/screenshotsel.sh\") },\n       \n       ...\n};\n```\n\nThis maps taking screenshots to the print key and taking screenshots with a selection box to the shift + print keys.\n\n"
    },
    {
      "title": "Adjusting volume",
      "level": 4,
      "content": "Install the pipewire package. Now in config.h we may add commands for mute and volume increase/decrease.\n\n```\nstatic const char *up_vol[]   = { \"pactl\", \"set-sink-volume\", \"@DEFAULT_SINK@\", \"+10%\",   NULL };\nstatic const char *down_vol[] = { \"pactl\", \"set-sink-volume\", \"@DEFAULT_SINK@\", \"-10%\",   NULL };\nstatic const char *mute_vol[] = { \"pactl\", \"set-sink-mute\",   \"@DEFAULT_SINK@\", \"toggle\", NULL };\n...\n\nstatic const Key keys[] = {\n       ...\n       \n       { 0, XF86XK_AudioMute,        spawn, {.v = mute_vol } },\n       { 0, XF86XK_AudioLowerVolume, spawn, {.v = down_vol } },\n       { 0, XF86XK_AudioRaiseVolume, spawn, {.v = up_vol } },\n       \n       ... \n};\n```\n\n"
    },
    {
      "title": "Autostart",
      "level": 3,
      "content": "A patch is available. It runs autostart array in your config.h\n\n"
    },
    {
      "title": "Fixing misbehaving Java applications",
      "level": 3,
      "content": "See Java#Gray window, applications not resizing with WM, menus immediately closing.\n\n"
    },
    {
      "title": "Fixing gaps around terminal windows",
      "level": 3,
      "content": "If there are empty gaps of desktop space outside terminal windows, it is likely due to the terminal's font size. Either adjust the size until finding the ideal scale that closes the gap, or toggle resizehints to 0 in config.h.\n\nThis will cause dwl to ignore resize requests from all client windows, not just terminals. The downside to this workaround is that some terminals may suffer redraw anomalies, such as ghost lines and premature line wraps, among others.\n\nAlternatively, if you use the st terminal emulator, you can apply the anysize patch and recompile st.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- dwl's official website\n\n"
    }
  ]
}