{
  "title": "RubyonRails",
  "url": "https://wiki.archlinux.org/title/RubyonRails",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Ruby on Rails, often shortened to Rails or RoR, is an open source web application framework for the Ruby programming language. It is intended to be used with an Agile development methodology that is used by web developers for rapid development.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Ruby on Rails requires Ruby to be installed, so read that article first for installation instructions. The nodejs package is also required if using uglifier (Ruby wrapper for UglifyJS JavaScript compressor, optional) The Rails framework is linked to a version of Ruby (or the system Ruby installation). Ruby version(s) installed can be from system or from rbenv or from rvm (Ruby Version Manager).\n\n"
    },
    {
      "title": "RubyGems",
      "level": 3,
      "content": "The following command will install Rails for the current user:\n\n```\n$ gem install rails\n```\n\nBuilding the documentation takes a while. If you want to skip it, append --no-document to the install command.\n\n```\n$ gem install rails --no-document\n```\n\ngem is a package manager for Ruby modules, somewhat like pacman is to Arch Linux. To update your gems, simply run:\n\n```\n$ gem update\n```\n\n"
    },
    {
      "title": "Pacman",
      "level": 3,
      "content": "Install the ruby-railsAUR package. Alternatively, see Ruby#Managing RubyGems using pacman.\n\n"
    },
    {
      "title": "Quarry binary repository",
      "level": 3,
      "content": "Install ruby-rails from the unofficial quarry repository.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Rails is bundled with a basic HTTP server called Puma. You can create a test application to test it. First, create an application with the rails command:\n\n```\n$ rails new testapp_name\n```\n\nThis creates a new folder inside your current working directory.\n\n```\n$ cd testapp_name\n```\n\nNext start the web server. It listens on port 3000 by default:\n\n```\n$ rails server\n```\n\nNow visit the testapp_name website on your local machine by opening http://localhost:3000 in your browser\n\nA test-page should be shown greeting you \"Welcome aboard\".\n\n"
    },
    {
      "title": "Thin",
      "level": 3,
      "content": "Thin is a fast and very simple Ruby web server.\n\nFirst install thin gem:\n\n```\n$ gem install thin\n```\n\nThen start it using:\n\n```\n$ thin start\n```\n\n"
    },
    {
      "title": "Unicorn",
      "level": 3,
      "content": "Unicorn is an application server that cannot talk directly to clients. Instead, a web server must sit between clients and Unicorn, proxying requests as needed. Unicorn is loosely based on Mongrel. It is used by Github, and it uses an architecture that tries hard to find the best child for handling a request. Explanation of differences between Unicorn and Mongrel.\n\nInstall the Unicorn gem:\n\n```\n# gem install unicorn\n```\n\nThen create a configuration file for your application in /etc/unicorn/. For example; here is a configuration example based on this tutorial for Redmine:\n\n```\n/etc/unicorn/redmine.ru\n```\n\n```\nworking_directory \"/srv/http/redmine\"\npid \"/tmp/redmine.pid\"\n\npreload_app true\ntimeout 60\nworker_processes 4\nlisten 4000\nstderr_path('/var/log/unicorn.log')\n\nGC.respond_to?(:copy_on_write_friendly=) and GC.copy_on_write_friendly = true\n\nafter_fork do |server, worker|\n\t#start the worker on port 4000, 4001, 4002 etc...\n\taddr = \"0.0.0.0:#{4000 + worker.nr}\"\n\t# infinite tries to start the worker\n\tserver.listen(addr, :tries => -1, :delay => -1, :backlog => 128)\n\n\t#Drop privileges if running as root\n\tworker.user('nobody', 'nobody') if Process.euid == 0\nend\n```\n\nStart it using:\n\n```\n# /usr/bin/unicorn -D -E production -c /etc/unicorn/redmine.ru\n```\n\n"
    },
    {
      "title": "Systemd service",
      "level": 4,
      "content": "Put the following contents in /etc/systemd/system/unicorn.service:\n\n```\n/etc/systemd/system/unicorn.service\n```\n\n```\n[Unit]\nDescription=Unicorn application server\nAfter=network.target\n\n[Service]\nType=forking\nUser=redmine\nExecStart=/usr/bin/unicorn -D -E production -c /etc/unicorn/redmine.ru\n\n[Install]\nWantedBy=multi-user.target\n```\n\nYou can now easily start and stop unicorn using systemctl\n\n"
    },
    {
      "title": "Nginx Configuration",
      "level": 4,
      "content": "After setting up Nginx, configure unicorn as an upstream server using something like this (Warning: this is a stripped example. It probably does not work without additional configuration):\n\n```\nhttp {\n\tupstream unicorn {\n\t\tserver 127.0.0.1:4000 fail_timeout=0;\n\t\tserver 127.0.0.1:4001 fail_timeout=0;\n\t\tserver 127.0.0.1:4002 fail_timeout=0;\n\t\tserver 127.0.0.1:4003 fail_timeout=0;\n\t}\n\n\tserver {\n\t\tlisten\t\t80 default;\n\t\tserver_name\tYOURHOSTNAMEHERE;\n\n\t\tlocation / {\n\t\t\troot\t\t\t/srv/http/redmine/public;\n\t\t\tproxy_set_header\tX-Forwarded-For $proxy_add_x_forwarded_for;\n\t\t\tproxy_set_header Host   $http_host;\n\t\t\tproxy_redirect\t\toff;\n\t\t\tproxy_pass\t\thttp://unicorn;\n\t\t}\n\t}\n}\n```\n\n"
    },
    {
      "title": "Apache/Nginx (using Phusion Passenger)",
      "level": 3,
      "content": "Phusion Passenger is a module available for Nginx and Apache HTTP Server, that greatly simplifies setting up a Rails server environment. Nginx does not support modules as Apache and has to be compiled with mod_rails in order to support Passenger; let Passenger compile it for you. As for Apache, let Passenger set up the module for you.\n\nTwo differents choices (one or the other, not both in same time):\n\n1. Install the passenger package.\n1. Installing the 'passenger' gem from any version of ruby (user setting): # gem install passenger\n\n```\n# gem install passenger\n```\n\nIf you are aiming to use Apache HTTP Server, install the mod_passenger package (if passenger is not installed from gem), and run:\n\n```\n# passenger-install-apache2-module\n```\n\nIn case a rails application is deployed with a sub-URI, like http://example.com/yourapplication[dead link 2023-05-06 â“˜], some additional configuration is required, see the Passenger documentation.\n\nFor Nginx, install the nginx-mod-passenger package (if passenger is not installed from gem), and run:\n\n```\n# passenger-install-nginx-module\n```\n\nThe installer will provide you with any additional information regarding the installation (such as installing additional libraries).\n\nTo serve an application with Nginx, configure it as follows:\n\n```\nserver {\n    server_name app.example.org;\n    root path_to_app/public; # Be sure to point to 'public' folder!\n    passenger_enabled on;\n    rails_env development; # Rails environment.\n}\n```\n\n"
    },
    {
      "title": "Puma (with Nginx as reverse proxy server)",
      "level": 3,
      "content": "Puma (Github Page) is a simple, fast, threaded, and highly concurrent HTTP 1.1 server for Ruby/Rack applications, and is considered the replacement for Webrick and Mongrel. It was designed to be the go-to server for Rubinius, but also works well with JRuby and MRI. The reverse proxy server would act as a load balancer that routes all external requests to a pool of web apps.\n\nFor a webserver it is better to use a server user and group, check Users and groups#Example adding a user, below use rails as user name and server as group name, also my_app as rails app name.\n\nStart by copying your app to /var/www/my_app. And set new ownership with\n\n```\n# cd /var/www/\n# chown -R rails:server my_app\n```\n\nand permission for user with\n\n```\n# chmod -R 775 my_app\n```\n\nThen add puma gem in the Gemfile and install with\n\n```\n$ cd my_app \n$ bundle install\n```\n\nAlso install nginx.\n\nUnder your app folder, create sockets, pid and log folder with\n\n```\n$ mkdir -p shared/pids shared/sockets shared/log\n```\n\nBackup nginx.conf with\n\n```\n# cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup\n```\n\nThen create a new nginx.conf file with your favorite editor, copy codes below and modify as you like:\n\n```\n#user html;\nworker_processes  1; # this may connect with the worker numbers puma can use.\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n\tupstream app {\n\t    # Path to Puma SOCK file, as defined previously\n \t    server unix:/var/www/my_app/shared/sockets/puma.sock;\n\t}\n\n\tserver {\n\t    listen 80;\n\t    server_name localhost; # or your server name\n\n\t    root /var/www/my_app/public;\n\n\t    try_files $uri/index.html $uri @app;\n\n\t    location @app {\n\t\tproxy_pass http://app;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header Host $http_host;\n\t\tproxy_redirect off;\n\t    }\n\n\t    error_page 500 502 503 504 /500.html;\n\t    client_max_body_size 4G;\n\t    keepalive_timeout 10;\n\t}\n}\n```\n\nStart the nginx service.\n\nThere are several ways to start puma server, two ways are recommended below:\n\nIn common create file config/puma.rb, copy codes below and modify as you like:\n\n```\n# Change to match your CPU core count\n# You can check available worker numbers with $ grep -c processor /proc/cpuinfo\n# also see the comment in the nginx.conf\nworkers 2\n\n# Min and Max threads per worker\n#threads 1, 6\n\napp_dir = File.expand_path(\"../..\", __FILE__)\nshared_dir = \"#{app_dir}/shared\"\n\n# Default to production\n#rails_env = ENV['RAILS_ENV'] || \"production\"\n#environment rails_env\n\n# Set up socket location\nbind \"unix://#{shared_dir}/sockets/puma.sock\"\n\n# Logging\n#stdout_redirect \"#{shared_dir}/log/puma.stdout.log\", \"#{shared_dir}/log/puma.stderr.log\", true\n\n# Set master PID and state locations\npidfile \"#{shared_dir}/pids/puma.pid\"\n#state_path \"#{shared_dir}/pids/puma.state\"\n#activate_control_app\n\n#on_worker_boot do\n#  require \"active_record\"\n#  ActiveRecord::Base.connection.disconnect! rescue ActiveRecord::ConnectionNotEstablished\n#  ActiveRecord::Base.establish_connection(YAML.load_file(\"#{app_dir}/config/database.yml\")[rails_env])\n#end\n```\n\n"
    },
    {
      "title": "Option A: With configuration file",
      "level": 4,
      "content": "Start server with\n\n```\n$ bundle exec puma -C config/puma.rb\n```\n\nYou can also run it in background with parameter -d and check with\n\n```\n$ pgrep puma\n```\n\nwhen you want to kill it.\n\nIf you want to keep it after you log out, you can use\n\n```\n$ nohup bundle exec puma -C config/puma.rb &\n```\n\nBut if the system reboot, the process will still get lost.\n\n"
    },
    {
      "title": "Option 2: by systemd",
      "level": 4,
      "content": "Create a new systemd unit:\n\n```\n~/.config/systemd/user/puma.service\n```\n\n```\n[Unit]\nDescription=Puma application server\nAfter=network.target\n\n[Service]\nWorkingDirectory=/var/www/my_app\n#Environment=RAILS_ENV=production\nPIDFile=/var/www/my_app/shared/pids/puma.pid\nExecStart=/home/rails/.gem/ruby/2.2.0/bin/bundle exec \\\n\t /home/rails/.gem/ruby/2.2.0/bin/puma \\\n\t -C /var/www/my_app/config/puma.rb\n\n[Install]\nWantedBy=default.target\n```\n\nThen start the puma.service user unit.\n\nTo enable puma system-widely, create:\n\n```\n/etc/systemd/system/puma.service\n```\n\n```\n[Unit]\nDescription=Puma application server\nAfter=network.target\n\n[Service]\nWorkingDirectory=/var/www/my_app\n#Environment=RAILS_ENV=production\nUser=rails\nPIDFile=/var/www/my_app/shared/pids/puma.pid\nExecStart=/home/rails/.gem/ruby/2.2.0/bin/bundle exec \\\n\t /home/rails/.gem/ruby/2.2.0/bin/puma \\\n\t -C /var/www/my_app/config/puma.rb\n\n[Install]\nWantedBy=multi-user.target\n```\n\nFor further reading take a look at #References. Also, for easily deploying app in production mode, you can try capistrano\n\n"
    },
    {
      "title": "Databases",
      "level": 2,
      "content": "Most web applications will need to interact with some sort of database. ActiveRecord (the ORM used by Rails to provide database abstraction) supports several database vendors, the most popular of which are MySQL, SQLite, and PostgreSQL. And then you will have next to configure the file \"config/database.yml\" for Rails application web site able to connect on your database.\n\n"
    },
    {
      "title": "SQLite",
      "level": 3,
      "content": "SQLite is the default lightweight database for Ruby on Rails. To enable SQLite, simply install sqlite.\n\n"
    },
    {
      "title": "PostgreSQL",
      "level": 3,
      "content": "Install postgresql.\n\nInstall for Rails:\n\n```\n# gem install pg\n```\n\nOr add the gem inside your Gemfile of your project, then use bundle.\n\ncreate a new Rails web site:\n\n```\n# rails new my_web_site -d postgresql\n```\n\n"
    },
    {
      "title": "MySQL",
      "level": 3,
      "content": "First, install and configure a MySQL server. Please refer to MariaDB on how to do this.\n\nA gem with some native extensions is required, probably best installed as root:\n\n```\n# gem install mysql\n```\n\nYou can generate a rails application configured for MySQL by using the -d parameter:\n\n```\n$ rails new testapp_name -d mysql\n```\n\n"
    },
    {
      "title": "Database Access Configuration",
      "level": 3,
      "content": "What ever Database (MySQL or Postgresql or SQlite (the default one) you use, you then need to edit config/database.yml. Rails uses different databases for development, testing, production and other environments. Here is an example development configuration for MySQL running on localhost:\n\n```\ndefault:\n   adapter: mysql (or postgresql or sqlite)\n   username: my_user_name_access\n   password: my_secret_password\n```\n\nFor safety reasons, it is a good practice to not directly put password (who will be no more secret) as clear text in a text file. Instead you can replace \"my_secret_password' by \"'<%= ENV[\"MYSQL_PASSWD\"] %>'\" where MYSQL_PASSWD can be an environment variable exported from the user environment the server use (~/.profile or ~/.bashrc or ~/.zshrc depend of your choice and utility). Surrounding <%= ENV.... %> by \"'\" searve in case of your password has some special chars like # or !, etc...\n\n"
    },
    {
      "title": "Create the databases from Rails",
      "level": 3,
      "content": "Note that you do not have to actually create the database using MySQL or Postgresql or Sqlite, as this can be done via Rails directly with:\n\nFor rails-4.X version:\n\n```\n# rake db:create\n```\n\nFor rails-5.X version:\n\n```\n# rails db:create\n```\n\nIf no errors are shown, then your database has been created and Rails can talk to your database.\n\n"
    },
    {
      "title": "The Perfect Rails Setup",
      "level": 2,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nPhusion Passenger running multiple Ruby versions.\n\n- Arch Linux: A simple, lightweight distribution. ;)\n- Nginx: A fast and lightweight web server with a strong focus on high concurrency, performance and low memory usage.\n- Passenger (a.k.a. mod_rails or mod_rack): Supports both Apache and Nginx web servers. It makes deployment of Ruby web applications, such as those built on Ruby on Rails web framework, a breeze.\n- Ruby Version Manager (RVM): A command-line tool which allows you to easily install, manage, and work with multiple Ruby environments from interpreters to sets of gems. RVM lets you deploy each project with its own completely self-contained and dedicated environment â€”from the specific version of ruby, all the way down to the precise set of required gems to run your applicationâ€”.\n- SQLite: The default lightweight database for Ruby on Rails.\n\n"
    },
    {
      "title": "Step 0: SQLite",
      "level": 3,
      "content": "Install sqlite.\n\n"
    },
    {
      "title": "Step 1: RVM",
      "level": 3,
      "content": "Make a multi-user RVM installation as specified here.\n\nIn the 'adding users to the rvm group' step, do\n\n```\n# usermod -a -G rvm http\n# usermod -a -G rvm nobody\n```\n\nhttp and nobody are the users related to Nginx and Passenger, respectively.\n\n"
    },
    {
      "title": "Step 2: Rubies",
      "level": 3,
      "content": "Once you have a working RVM installation in your hands, it is time to install the latest Ruby interpreter\n\n```\n$ rvm install 2.0.0\n```\n\n"
    },
    {
      "title": "Step 3: Nginx with Passenger support",
      "level": 3,
      "content": "Run the following to allow passenger install nginx:\n\n```\n$ rvm use 2.0.0 \n$ gem install passenger\n$ rvmsudo passenger-install-nginx-module\n```\n\nThe passenger gem will be put into the default gemset.\n\nThis will download the sources of Nginx, compile and install it for you. It will guide you through all the process. Note that the default location for Nginx will be /opt/nginx.\n\nAfter completion, add the following two lines into the 'http block' at /opt/nginx/conf/nginx.conf that look like:\n\n```\nhttp { \n  ...\n  passenger_root /usr/local/rvm/gems/ruby-2.0.0-p353/gems/passenger-3.0.9;\n  passenger_ruby /usr/local/rvm/wrappers/ruby-2.0.0-p353/ruby;\n  ...\n}\n```\n\n"
    },
    {
      "title": "Step 4: Gemsets and Apps",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nFor each Rails application you should have a gemset. Suppose that you want to try RefineryCMS against BrowserCMS, two open-source Content Management Systems based on Rails.\n\nInstall RefineryCMS first:\n\n```\n$ rvm use 2.0.0@refinery --create\n$ gem install rails -v 4.0.1\n$ gem install passenger\n$ gem install refinerycms refinerycms-i18n sqlite3\n```\n\nDeploy a RefineryCMS instance called refineria:\n\n```\n$ cd /srv/http/\n$ rvmsudo refinerycms refineria\n```\n\nInstall BrowserCMS in a different gemset:\n\n```\n$ rvm use 2.0.0@browser --create\n$ gem install rails -v 4.0.1\n$ gem install passenger\n$ gem install browsercms sqlite3\n```\n\nDeploy a BrowserCMS instance called navegador:\n\n```\n$ cd /srv/http/\n$ rvmsudo browsercms demo navegador\n$ cd /srv/http/navegador\n$ rvmsudo rake db:install\n```\n\n"
    },
    {
      "title": "Passenger for Nginx and Passenger Standalone",
      "level": 3,
      "content": "Observe that the passenger gem was installed three times and with different intentions; in the environments\n\n- 2.0.0 => for Nginx,\n- 2.0.0@refinery => Standalone\n- 2.0.0@browser => Standalone\n\nThe strategy is to combine Passenger for Nginx with Passenger Standalone. One must first identify the Ruby environment (interpreter plus gemset) that one uses the most; in this setup the Ruby interpreter and the default gemset were selected. One then proceeds with setting up Passenger for Nginx to use that environment (step 3).\n\n- Applications within the chosen environment can be served as in Apache/Nginx (using Phusion Passenger), page up in this article.\n- All applications that are to use a different Ruby version and/or gemset can be served separately through Passenger Standalone and hook into the main web server via a reverse proxy configuration (step 6).\n\n"
    },
    {
      "title": "Step 5: .rvmrc files and ownerships",
      "level": 3,
      "content": "This step is crucial for the correct behaviour of the setup. RVM seeks for .rvmrc files when changing folders; if it finds one, it reads it. In these files normally one stores a line like\n\n```\nrvm <ruby_version>@<gemset_name>\n```\n\nso the specified environment is set at the entrance of applications' root folder.\n\nCreate /srv/http/refineria/.rvmrc doing\n\n```\n# echo \"rvm ree@refinery\" > /srv/http/refineria/.rvmrc\n```\n\n, and /srv/http/navegador/.rvmrc with\n\n```\n# echo \"rvm 2.0.0@browser\" > /srv/http/navegador/.rvmrc\n```\n\nYou have to enter to both application root folders now, because every first time that RVM finds a .rvmrc it asks you if you trust the given file, consequently you must validate the two files you have just created.\n\nThese files aid the programs involved to find the correct gems.\n\nApart, if applications' files and folders are not owned by the right user you will face database write-access problems. The use of rvmsudo produces root-owned archives when generated by Rails; in the other hand, nobody is the user for Passenger â€”if you have not changed itâ€”: who will use and should posses them. Fix this doing\n\n```\n# chown -R nobody.nobody /srv/http/refineria /srv/http/navegador\n```\n\n"
    },
    {
      "title": "Step 6: Reverse proxies",
      "level": 3,
      "content": "You have to start the Passenger Standalone web servers for your applications. So, do\n\n```\n$ cd /srv/http/refineria\n$ rvmsudo passenger start --socket tmp/sockets/passenger.socket -d\n```\n\nand\n\n```\n$ cd /srv/http/navegador\n$ rvmsudo passenger start --socket tmp/sockets/passenger.socket -d\n```\n\n. The first time that you run a Passenger Standalone it will perform a minor installation.\n\nNote that you are using unix domain sockets instead of the commonly-used TCP sockets; it turns out that unix domain are significantly faster than TCP sockets.\n\n```\nrvmsudo passenger start -a 127.0.0.1 -p 3000 -d\n```\n\n"
    },
    {
      "title": "Launch Passenger Standalone daemons at system start-up",
      "level": 4,
      "content": "Do you have a script? Please post it here.\n\nThe systemd script below was made for a Typo blog I host at /srv/http/typo. It is located at /etc/systemd/system/passenger_typo.service. I set the Environment= tags (see \"man systemd.exec\") from the output of \"rvm env\". The only exception was PATH=, which I had to combine from my regular PATH and the output of rvm env.\n\nNote: If you do not set the \"WorkingDirectory=\" variable to your application folder, passenger will fail to find your app and will subsequently shut itself down.\n\n```\n[Unit]\nDescription=Passenger Standalone Script for Typo\nAfter=network.target\n\n[Service]\nType=forking\nWorkingDirectory=/srv/http/typo\nPIDFile=/srv/http/typo/tmp/pids/passenger.pid\n\nEnvironment=PATH=/usr/local/rvm/gems/ruby-2.0.0-p0@typo/bin:/usr/local/rvm/gems/ruby-2.0.0-p0@global/bin:/usr/local/rvm/rubies/ruby-2.0.0-p0/bin:/usr/local/rvm/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/bin/core_perl\nEnvironment=rvm_env_string=ruby-2.0.0-p0@typo\nEnvironment=rvm_path=/usr/local/rvm\nEnvironment=rvm_ruby_string=ruby-2.0.0-p0\nEnvironment=rvm_gemset_name=typo\nEnvironment=RUBY_VERSION=ruby-2.0.0-p0\nEnvironment=GEM_HOME=/usr/local/rvm/gems/ruby-2.0.0-p0@typo\nEnvironment=GEM_PATH=/usr/local/rvm/gems/ruby-2.0.0-p0@typo:/usr/local/rvm/gems/ruby-2.0.0-p0@global\nEnvironment=MY_RUBY_HOME=/usr/local/rvm/rubies/ruby-2.0.0-p0\nEnvironment=IRBRC=/usr/local/rvm/rubies/ruby-2.0.0-p0/.irbrc\n\nExecStart=/bin/bash -c \"rvmsudo passenger start --socket /srv/http/typo/tmp/sockets/passenger.socket -d\"\n\n[Install]\nWantedBy=multi-user.target\n```\n\n"
    },
    {
      "title": "With subdomains",
      "level": 4,
      "content": "Once again edit /opt/nginx/conf/nginx.conf to include some vital instructions:\n\n```\n## RefineryCMS ##\n\nserver {\n    server_name refinery.domain.com;\n    root /srv/http/refineria/public;\n    location / {\n        proxy_pass http://unix:/srv/http/refineria/tmp/sockets/passenger.socket;\n        proxy_set_header Host $host;\n    }\n}\n\n## BrowserCMS ##\n\nserver {\n    server_name browser.domain.com;\n    root /srv/http/navegador/public;\n    location / {\n        proxy_pass http://unix:/srv/http/navegador/tmp/sockets/passenger.socket;\n        proxy_set_header Host $host;\n    }\n}\n```\n\n```\nproxy_pass http://127.0.0.1:3000;\n```\n\n"
    },
    {
      "title": "Without subdomains",
      "level": 4,
      "content": "If you for some reason do not want to host each application on its own subdomain but rather in a url like: site.com/railsapp then you could do something like this in your config:\n\n```\nserver {\n    server_name site.com;\n    #Base for the html files etc\n    root /srv/http/;\n\n    #First application you want hosted under domain site.com/railsapp\n    location /railsapp {\n        root /srv/http/railsapp/public;\n        #you may need to change passenger_base_uri to be the uri you want to point at, ie:\n        #passenger_base_uri /railsapp;\n        #but probably only if you are using the other solution with passenger phusion\n        proxy_pass http://unix:/srv/http/railsapp/tmp/sockets/passenger.socket;\n        proxy_set_header Host $host;\n    }\n\n    #Second application you want hosted under domain site.com/anotherapp\n    location /anotherapp {\n        root /srv/http/anotherapp/public;\n        #same thing about the passenger_base_uri here, but with value /anotherapp instead\n        proxy_pass http://unix:/srv/http/anotherapp/tmp/sockets/passenger.socket;\n        proxy_set_header Host $host;\n    }\n}\n```\n\nAt this point you are in conditions to start the nginx service and to access both CMSs through refinery.domain.com and browser.domain.com.\n\n"
    },
    {
      "title": "References",
      "level": 3,
      "content": "- Using RVM rubies with Phusion Passenger\n- https://blog.phusion.nl/2010/09/21/phusion-passenger-running-multiple-ruby-versions[dead link 2023-07-30 â“˜]\n- How to Setup Rails App With Puma and NGINX\n- https://www.digitalocean.com/community/tutorials/how-to-deploy-a-rails-app-with-puma-and-nginx-on-ubuntu-14-04\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Ruby\n- Nginx\n- LAMP\n- MySQL\n\n"
    },
    {
      "title": "References",
      "level": 2,
      "content": "- Official site\n\n"
    }
  ]
}