{
  "title": "Thunderbolt",
  "url": "https://wiki.archlinux.org/title/Thunderbolt",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- External GPU\n\nThunderbolt 3 works out of the box with recent Linux kernel versions [1]. The Linux kernel, starting with version 4.13, supports Thunderbolt Security as well.\n\n"
    },
    {
      "title": "Obtain firmware updates",
      "level": 2,
      "content": "Manufacturers often release firmware updates for Thunderbolt ports and devices to function properly, visit https://thunderbolttechnology.net/updates for more details how to obtain upgrades for certain vendors.\n\n"
    },
    {
      "title": "User device authorization",
      "level": 2,
      "content": "Modern Thunderbolt devices implement security modes that require user authorization when connecting devices - this is to protect from malicious devices performing DMA attacks or otherwise interfering with the hardware (see Thunderstrike 2).\n\nThe modes currently supported on Linux are:\n\n- none - No security, all devices are connected and initialized by default. In BIOS settings this is typically called Legacy mode.\n- user - User authorization is required every time a device is connected. In BIOS settings this is typically called Unique ID.\n- secure - User authorization is required, but the device is then remembered and does not require re-authorization. In BIOS settings this is typically called One time saved key.\n- dponly - DisplayPort functionality only, no other devices are allowed. In BIOS settings this is typically called Display Port Only.\n\nThe security level is normally configured at firmware level; it is recommended to set it to at least secure. The state of this setting can be queried with:\n\n```\n$ cat /sys/bus/thunderbolt/devices/domain0/security\n```\n\n"
    },
    {
      "title": "Graphical front-ends",
      "level": 3,
      "content": "- GNOME has native support for authorizing devices from the UI since version 3.30\n- Plasma integration is available from this git repository and from plasma-thunderbolt package\n\n"
    },
    {
      "title": "Automatically connect any device",
      "level": 3,
      "content": "Users who just want to connect any device without any sort of manual work can create a udev rule as in 99-removable.rules:\n\n```\n/etc/udev/rules.d/99-removable.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"thunderbolt\", ATTR{authorized}==\"0\", ATTR{authorized}=\"1\"\n```\n\n"
    },
    {
      "title": "Forcing power",
      "level": 3,
      "content": "Many OEMs include a method that can be used to force the power of a Thunderbolt controller to an On state. If supported by the machine this will be exposed by the WMI bus with a sysfs attribute called force_power [2].\n\nForcing power may especially be useful when a connected device loses connection or the controller that switches itself off.\n\nTo force the power to be on/off, write 1 or 0 to this attribute, e.g. to force power:\n\n```\n# echo 1 > /sys/bus/wmi/devices/86CCFD48-205E-4A77-9C48-2021CBEDE341/force_power\n```\n\n"
    },
    {
      "title": "PCI buses are not registered",
      "level": 3,
      "content": "Sometimes when connecting a Thunderbolt device PCI buses might not be registered. This is apparent by having screens working while USB devices fail to register on your computer. This can be solved by issuing a PCI rescan:\n\n```\n# echo 1 > /sys/bus/pci/rescan\n```\n\n"
    },
    {
      "title": "Automatic PCI bus rescan",
      "level": 4,
      "content": "For persistent issues with PCI buses not being registered, an automatic rescan can be configured using udev rules. This will trigger a rescan whenever a Thunderbolt device is connected.\n\nCreate the PCI rescan bash script:\n\n```\n/usr/local/bin/thunderbolt-rescan.sh\n```\n\n```\n#!/bin/bash\necho 1 > /sys/bus/pci/rescan\n```\n\nMake it executable:\n\n```\n# chmod +x /usr/local/bin/thunderbolt-rescan.sh\n```\n\nFollowing up with a udev rule that triggers on thunderbolt connection:\n\n```\n/etc/udev/rules.d/98-thunderbolt-rescan.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"thunderbolt\", RUN+=\"/usr/local/bin/thunderbolt-rescan.sh\"\n```\n\n"
    },
    {
      "title": "Increasing hot-plug bus size and memory",
      "level": 3,
      "content": "Some motherboards' firmware does not report enough bus and memory sizes to the kernel, causing drivers loading to fail. Add the following to kernel command line to manually set the size.\n\n```\npci=hpbussize=0x33,hpmemsize=256M\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Linux kernel user's and administrator's guide on Thunderbolt\n- bolt repository\n- Introducing bolt: Thunderbolt 3 security levels for GNU/Linux\n- Thunderbolt Support in GNOME\n- tbtadm\n\n"
    }
  ]
}