{
  "title": "MantisBT",
  "url": "https://wiki.archlinux.org/title/MantisBT",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "MantisBT (Mantis Bug Tracker) is a bug tracker written in PHP. For a list of features, visit its website.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the mantisbtAUR package.\n\nChoose your favorite web server and/or application server (such as UWSGI) for making the application available.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "mantisbt has a decent administration guide, that can be followed for setting it up.\n\nAll configuration is exposed in /etc/webapps/mantisbt/config_inc.php.\n\n- Setup a compatible DBMS and use the 'Database Configuration' section to connect mantisbt with it.\n- The 'Anonymous Access / Signup' section needs special attention, if you are not planning on disabling CAPTCHAs for new signups (see #PHP extensions and #TTF fonts).\n- If you want to use SMTP you can set it up in the 'Email Configuration' section. mantisbt defaults to a phpmailer setup, which has the downside of not reaching mail servers that use grey listing.\n\nIn any case, you will need to meet some requirements for mantisbt to work properly:\n\n"
    },
    {
      "title": "PHP extensions",
      "level": 3,
      "content": "- mysqli (if you are using MySQL/MariaDB)\n- gd (if you plan on using CAPTCHA for user signup)\n\n"
    },
    {
      "title": "TTF fonts",
      "level": 3,
      "content": "- make sure to install a TrueTypeFont, that you would like to use for the creation of CAPTCHAs\n- setup the paths and names of the fonts, you would like to use:\n\n```\n/etc/webapps/mantisbt/config_inc.php\n```\n\n```\n# trailing slash is important!\n$g_system_font_folder = '/usr/share/fonts/TTF/';\n\n# here DroidSans.ttf from the package ttf-droid is used for illustration\n$g_font_per_captcha = 'DroidSans.ttf';\n```\n\n"
    },
    {
      "title": "nginx + uwsgi",
      "level": 4,
      "content": "This example shows a basic setup using a subdomain for the bug tracker, with some handson redirects. The below mentioned file needs of course to be sourced within /etc/nginx/nginx.conf. For a subfolder-based setup for mantisbt, some modifications are needed.\n\n```\n/etc/nginx/nginx.conf\n```\n\n```\nserver {\n  listen 80;\n  listen [::]:80;\n  server_name bugs.mydomain.org www.mydomain.org;\n  return 301 https://bugs.mydomain.org$request_uri;\n}\nserver {\n  listen 443 ssl;\n  listen [::]:443 ssl;\n  server_name www.bugs.mydomain.org;\n  return 301 https://bugs.mydomain.org$request_uri;\n}\nserver {\n  listen 443 ssl;\n  listen [::]:443 ssl;\n  server_name bugs.mydomain.org;\n  include tls.conf;\n  root /usr/share/webapps/mantisbt;\n  access_log /var/log/nginx/access.bugs.mydomain.log;\n  error_log /var/log/nginx/error.bugs.mydomain.log;\n  include letsencrypt-challenge.conf;\n\n  location ~ ^/(admin|core|doc|lang) {\n    deny all;\n  }\n\n  location / {\n    index index.php;\n    try_files $uri $uri/ @mantisbt;\n  }\n\n  location @mantisbt {\n    include uwsgi_params;\n    uwsgi_modifier1 14;\n    uwsgi_pass unix:/run/uwsgi/mantisbt.sock;\n  }\n\n  location ~  \\.php?$ {\n    include uwsgi_params;\n    uwsgi_modifier1 14;\n    uwsgi_pass unix:/run/uwsgi/mantisbt.sock;\n  }\n\n  # Deny serving files beginning with a dot, but allow letsencrypt acme-challenge\n  location ~ /\\.(?!well-known/acme-challenge) {\n    access_log off;\n    log_not_found off;\n    deny all;\n  }\n}\n```\n\nUWSGI can be used to achieve a resource preserving setup with dedicated PHP settings.\n\n```\n/etc/uwsgi/mantisbt.ini\n```\n\n```\n[uwsgi]\nprocname-master = mantisbt\nplugins = php\nmaster = true\nsocket = /run/uwsgi/%n.sock\nuid = http\ngid = http\nprocesses = 10\ncheaper = 2\ncheaper-step = 1\nidle = 600\ndie-on-idle = true\n\nphp-allowed-ext = .php\nphp-docroot = /usr/share/webapps/mantisbt\nphp-index = index.php\nphp-set = date.timezone=Europe/Berlin\nphp-set = open_basedir=/tmp/:/usr/share/fonts/TTF:/usr/share/webapps/mantisbt:/usr/share/webapps/mantisbt/core:/etc/webapps/mantisbt\nphp-set = session.save_path=/tmp\nphp-set = session.gc_maxlifetime  21600\nphp-set = session.gc_divisor      500\nphp-set = session.gc_probability  1\nphp-set = post_max_size=64M\nphp-set = upload_max_filesize=64M\nphp-set = always_populate_raw_post_data=-1\nphp-set = extension=curl\nphp-set = extension=gd\nphp-set = extension=imagick\nphp-set = extension=intl\nphp-set = extension=mysqli\n```\n\nIf your (modified) versions of these files are in place, you should restart your nginx and start/enable a uwsgi socket for mantisbt using systemd.\n\n"
    },
    {
      "title": "Database",
      "level": 3,
      "content": "After making the application available, go to /admin/install.php with a web browser to setup the database. Follow the instructions on that page and let mantisbt generate the tables.\n\n```\n/etc/nginx/nginx.conf\n```\n\n```\nlocation ~ ^/(core|doc|lang) {\n    deny all;\n  }\n```\n\n"
    },
    {
      "title": "Administrator",
      "level": 3,
      "content": "The initial account generated by mantisbt is called administrator and has the password root.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "mantisbt should be all setup now. The administrator user is able to create new projects and give user rights to signed up users.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official website\n- Official wiki\n- Official documentation\n- Official bug tracker\n- Official forums\n- MantisBT on github\n\n"
    }
  ]
}