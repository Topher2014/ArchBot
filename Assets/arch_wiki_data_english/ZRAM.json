{
  "title": "ZRAM",
  "url": "https://wiki.archlinux.org/title/ZRAM",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Swap\n- zswap\n\nzram, formerly called compcache, is a Linux kernel module for creating a compressed block device in RAM, i.e. a RAM disk with on-the-fly disk compression. The block device created with zram can then be used for swap or as a general-purpose RAM disk. The two most common uses for zram are for the storage of temporary files (/tmp) and as a swap device. Initially, zram had only the latter function, hence the original name \"compcache\" (\"compressed cache\").\n\n"
    },
    {
      "title": "Usage as swap",
      "level": 2,
      "content": "Initially the created zram block device does not reserve or use any RAM. Only as files need or want to be swapped out, they will be compressed and moved into the zram block device. The zram block device will then dynamically grow or shrink as required.\n\nEven when assuming that zstd only achieves a conservative 1:2 compression ratio (real world data shows a common ratio of 1:3), zram will offer the advantage of being able to store more content in RAM than without memory compression.\n\n- When configuring zram, the size of the zram device controls the maximum uncompressed amount of data it can store, not the maximum compressed size. You can configure the zram's size to be equal to or even greater than your system's physical RAM capacity, as long as the compressed size on physical RAM will not exceed your system's physical RAM capacity.\n- If the related zswap kernel feature remains enabled, it will prevent zram from being used effectively. This is because zswap functions as a swap cache in front of zram, intercepting and compressing evicted memory pages before they can reach zram. Despite the output of zramctl(8), most of zswap is unused in this circumstance. Therefore, it's recommended to permanently disable zswap using the kernel parameter or sysfs setting before starting.\n- Hibernating to swap on zram is not supported, even when zram is configured with a backing device on permanent storage. logind will protect against trying to hibernate to a swap space on zram.\n\nA simple size to start with is half of the total system memory.\n\n"
    },
    {
      "title": "Manually",
      "level": 3,
      "content": "To set up one zstd compressed zram device with half the system memory capacity and a higher-than-normal priority (only for the current session):\n\n```\n# modprobe zram\n# zramctl /dev/zram0 --algorithm zstd --size \"$(($(grep -Po 'MemTotal:\\s*\\K\\d+' /proc/meminfo)/2))KiB\"\n# mkswap -U clear /dev/zram0\n# swapon --discard --priority 100 /dev/zram0\n```\n\nTo disable it again, either reboot or run:\n\n```\n# swapoff /dev/zram0\n# modprobe -r zram\n```\n\nA detailed explanation of all steps, options and potential problems is provided in the official documentation of the zram module.\n\nFor a permanent solution, use a method from one of the following sections.\n\n"
    },
    {
      "title": "Using a udev rule",
      "level": 3,
      "content": "The example below describes how to set up swap on zram automatically at boot with a single udev rule. No extra package should be needed to make this work.\n\nExplicitly load the module at boot:\n\n```\n/etc/modules-load.d/zram.conf\n```\n\n```\nzram\n```\n\nCreate the following udev rule adjusting the disksize attribute as necessary:\n\n```\n/etc/udev/rules.d/99-zram.rules\n```\n\n```\nACTION==\"add\", KERNEL==\"zram0\", ATTR{initstate}==\"0\", ATTR{comp_algorithm}=\"zstd\", ATTR{disksize}=\"4G\", RUN=\"/usr/bin/mkswap -U clear %N\", TAG+=\"systemd\"\n```\n\nAdd /dev/zram to your fstab with a higher than default priority:\n\n```\n/etc/fstab\n```\n\n```\n/dev/zram0 none swap defaults,discard,pri=100 0 0\n```\n\n"
    },
    {
      "title": "Using zram-generator",
      "level": 3,
      "content": "zram-generator provides systemd-zram-setup@zramN.service units to automatically initialize zram devices without users needing to enable/start the template or its instances. See zram-generator(8).\n\nTo use it, install zram-generator, and create /etc/systemd/zram-generator.conf with the following:\n\n```\n/etc/systemd/zram-generator.conf\n```\n\n```\n[zram0]\nzram-size = min(ram / 2, 4096)\ncompression-algorithm = zstd\n```\n\nzram-size is the size (in MiB) of zram device, you can use ram to represent the total memory.\n\ncompression-algorithm specifies the algorithm used to compress in zram device. cat /sys/block/zram0/comp_algorithm gives the available compression algorithm (as well as the current one included in brackets). See zram-generator.conf(5).\n\nThen run daemon-reload, start your configured systemd-zram-setup@zramN.service instance (N matching the numerical instance-ID, in the example it is systemd-zram-setup@zram0.service).\n\nYou can check the swap status of your configured /dev/zramN device(s) by reading the unit status of your systemd-zram-setup@zramN.service instance(s), by using zramctl(8), or by using swapon(8).\n\n"
    },
    {
      "title": "Using zramswap",
      "level": 3,
      "content": "zramswapAUR provides an automated script for setting up a swap with a higher priority and a default size of 20% of the RAM size of your system. To do this automatically on every boot, enable zramswap.service.\n\n"
    },
    {
      "title": "Checking zram statistics",
      "level": 3,
      "content": "Use zramctl(8). Example:\n\n```\n$ zramctl\n```\n\n```\nNAME       ALGORITHM DISKSIZE  DATA  COMPR  TOTAL STREAMS MOUNTPOINT\n/dev/zram0 zstd           32G  1.9G 318.6M 424.9M      16 [SWAP]\n```\n\n- DISKSIZE = 32G: this zram device will store up to 32 GiB of uncompressed data.\n- DATA = 1.9G: currently, 1.9 GiB (uncompressed) of data is being stored in this zram device\n- COMPR = 318.6M: the 1.9 GiB uncompressed data was compressed to 318.6 MiB\n- TOTAL = 424.9M: including metadata, the 1.9 GiB of uncompressed data is using up 424.9 MiB of physical RAM\n\n"
    },
    {
      "title": "Multiple zram devices",
      "level": 3,
      "content": "By default, loading the zram module creates a single /dev/zram0 device.\n\nIf you need more than one /dev/zram device, specify the amount using the num_devices kernel module parameter or add them as needed afterwards.\n\n"
    },
    {
      "title": "Optimizing swap on zram",
      "level": 3,
      "content": "Since zram behaves differently than disk swap, we can configure the system's swap to take full potential of the zram advantages:\n\n```\n/etc/sysctl.d/99-vm-zram-parameters.conf\n```\n\n```\nvm.swappiness = 180\nvm.watermark_boost_factor = 0\nvm.watermark_scale_factor = 125\nvm.page-cluster = 0\n```\n\nExplanation of the configuration:\n\nThese values are what Pop!_OS uses. That Pop!_OS GitHub pull request also links to some testing done by users on r/Fedora, which determined that vm.page-cluster = 0 is ideal. They also found a high swappiness value to be ideal, which matches what is suggested by the kernel docs:\n\nOn a system with a hard drive, random I/O against the in-memory device would be orders of magnitude faster than I/O against the filesystem, so swappiness should be ~200. Even on a system with a fast SSD, a high swappiness value may be ideal.\n\n"
    },
    {
      "title": "Enabling a backing device for a zram block",
      "level": 3,
      "content": "zram can be configured to push incompressible pages to a specified block device:\n\nTo add a backing device manually:\n\n```\n# echo /dev/sdX > /sys/block/zram0/backing_dev\n```\n\nTo add a backing device to your zram block device using zram-generator, update /etc/systemd/zram-generator.conf with the following under your [zramX] device you want the backing device added to:\n\n```\n/etc/systemd/zram-generator.conf\n```\n\n```\nwriteback-device=/dev/disk/by-partuuid/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n```\n\nIncompressible pages can then be pushed to the block device by executing:\n\n```\n# echo huge > /sys/block/zramX/writeback\n```\n\n"
    },
    {
      "title": "Using zram for non-swap purposes",
      "level": 3,
      "content": "zram can also be used as a generic RAM-backed block device, e.g. a /dev/ram with less physical memory usage, but slightly lower performance. However there are some caveats:\n\n- There is no partition table support (no automatic creation of /dev/zramxpy).\n- The block size is fixed to 4 kiB.\n\nThe obvious way around this is to stack a loop device on-top the zram, using losetup, specifying the desired block size using the -b option and the -P option to process partition tables and automatic creation of the partition loop devices.\n\n```\n# zramctl -f -s NG\n```\n\n```\n/dev/zramx\n```\n\nCopy the disk image to the new /dev/zramx, then create a loop device. If the disk image has a partition table, the block size of the loop device must match the block size used by the partition table, which is typically 512 or 4096 bytes.\n\n```\n# losetup -f -b 512 -P /dev/zramx\n```\n\n```\n# ls /dev/loop*\n```\n\n```\n/dev/loop0 /dev/loop0p1 /dev/loop0p2\n```\n\n```\n# mount /dev/loop0p1 /mnt/boot\n# mount /dev/loop0p2 /mnt/root\n```\n\n- The zram device numbering depends on pre-existing zram devices and its size should be enough to hold the disk image.\n- The output from ls /dev/loop* depends on the contents of the disk image.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:zram\n- https://github.com/pop-os/default-settings/pull/163\n- https://www.reddit.com/r/pop_os/comments/znh9n6/help_test_a_zram_optimization_for_pop_os/\n\n"
    }
  ]
}