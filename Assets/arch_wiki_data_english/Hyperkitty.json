{
  "title": "Hyperkitty",
  "url": "https://wiki.archlinux.org/title/Hyperkitty",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Hyperkitty is a Django based archiver and archive interface for Mailman.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "To use Hyperkitty, a working web server setup is required (e.g. using Apache HTTP Server to forward to the WSGI directly, or using Nginx forwarding requests to an application server such as UWSGI).\n\nInstall the hyperkitty package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The web application is configured in /etc/webapps/hyperkitty/settings_local.py (which is included by the default configuration in /usr/share/webapps/hyperkitty/settings.py).\n\nChange the default secret for the application:\n\n```\n/etc/webapps/hyperkitty/settings_local.py\n```\n\n```\nSECRET_KEY = 'something-very-secret'\n```\n\nMake sure to disable debugging when running in production:\n\n```\n/etc/webapps/hyperkitty/settings_local.py\n```\n\n```\nDEBUG = False\n```\n\nAdd a valid email configuration (so that the Django application can verify subscribers):\n\n```\n/etc/webapps/hyperkitty/settings_local.py\n```\n\n```\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'localhost'\nEMAIL_PORT = 25\nEMAIL_HOST_USER = username\nEMAIL_HOST_PASSWORD = password\n```\n\nTo connect with a running mailman instance's REST API, configuration options have to be added to hyperkitty's configuration.\n\n```\n/etc/webapps/hyperkitty/settings_local.py\n```\n\n```\nMAILMAN_REST_API_URL = 'http://localhost:8001'\nMAILMAN_REST_API_USER = 'rest_admin'\nMAILMAN_REST_API_PASS = 'rest_admin_password'\n```\n\nTo configure the archive integration with a mailman instance first setup the integration with hyperkitty on mailman's side and then configure hyperkitty to accept those connections:\n\n```\n/etc/webapps/hyperkitty/settings_local.py\n```\n\n```\nMAILMAN_ARCHIVER_KEY = 'SecretArchiverAPIKey'\nMAILMAN_ARCHIVER_FROM = ('127.0.0.1', '::1')\n```\n\nThe valid hosts or domain names for the application need to be defined:\n\n```\n/etc/webapps/hyperkitty/settings_local.py\n```\n\n```\nALLOWED_HOSTS = [\n    'localhost',\n    'lists.example.com'\n]\n```\n\n"
    },
    {
      "title": "Hosting",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n- Hyperkitty needs to be run as its own user and group (i.e. hyperkitty). It is using /etc/webapps/hyperkitty/, /var/lib/hyperkitty/ and /run/hyperkitty/ for configurations, static caches and (potentially) sockets, respectively.\n- As the static files are by default served from a top-level static/ directory, which will conflict with postorius on the same (sub)domain, it is advisable to set the STATIC_URL variable in /etc/webapps/hyperkitty/settings_local.py to something unique (e.g. '/hyperkitty_static/').\n\n"
    },
    {
      "title": "Nginx and uWSGI",
      "level": 3,
      "content": "Hyperkitty comes with a working uWSGI configuration file in /etc/uwsgi/hyperkitty.ini.\n\nInstall nginx and uwsgi-plugin-python, create a per-application socket for uWSGI (see UWSGI#Accessibility of uWSGI socket for reference) and activate the uwsgi-secure@hyperkitty.socket unit.\n\nFor a local test setup, serving Hyperkitty at http://localhost/hyperkitty/ add the following Nginx configuration to your setup:\n\n```\n/etc/nginx/hyperkitty.conf\n```\n\n```\nserver {\n  listen 80;\n  server_name localhost;\n  charset utf-8;\n  client_max_body_size 75M;\n  root /usr/share/webapps/hyperkitty;\n  access_log /var/log/nginx/access.hyperkitty.log;\n  error_log /var/log/nginx/error.hyperkitty.log;\n\n  location /hyperkitty_static {\n    alias /var/lib/hyperkitty/static;\n  }\n\n  location ~^/(hyperkitty|user-profile)/(.*)$ {\n    include /etc/nginx/uwsgi_params;\n    uwsgi_pass unix:/run/hyperkitty/hyperkitty.sock;\n  }\n}\n```\n\n"
    },
    {
      "title": "Setup",
      "level": 2,
      "content": "After first installation make sure to generate a database:\n\n```\n[hyperkitty]$ django-admin migrate --pythonpath /usr/share/webapps/hyperkitty/ --settings settings\n```\n\nAfterwards, the static data for the application needs to be collected:\n\n```\n[hyperkitty]$ django-admin collectstatic --pythonpath /usr/share/webapps/hyperkitty/ --settings settings\n```\n\nTo compress the data, run the following:\n\n```\n[hyperkitty]$ django-admin compress --pythonpath /usr/share/webapps/hyperkitty/ --settings settings\n```\n\nEnable and start the hyperkitty-qcluster.service systemd service for required asynchronous operations on the web application.\n\nPopulate the database with default data (when setting up for the first time):\n\n```\n[hyperkitty]$ django-admin loaddata --pythonpath /usr/share/webapps/hyperkitty/ --settings settings first_start\n```\n\nCreate a superuser account for the Django application:\n\n```\n[hyperkitty]$ django-admin createsuperuser --pythonpath /usr/share/webapps/hyperkitty --settings settings\n```\n\nLog in to the admin interface of the Django application at http://localhost/hyperkitty/admin to be able to add more Sites besides the default example.com or to add additional Mail domains.\n\n"
    },
    {
      "title": "Importing mailman2 archives",
      "level": 3,
      "content": "Hyperkitty can import archives from mailman < 3.0.\n\n```\n[hyperkitty]$ django-admin hyperkitty_import --pythonpath /usr/share/webapps/hyperkitty --settings settings -l ADDRESS mbox_file [mbox_file ...]\n```\n\nHere ADDRESS is the fully-qualified list name (e.g. list@example.com) and the mbox_file argument represents existing archives (in mbox format) to import (usually found in /var/lib/mailman/archives/private/LIST_NAME.mbox/LIST_NAME.mbox).\n\nAfterwards the full-text search index can be updated manually:\n\n```\n[hyperkitty]$ django-admin update_index_one_list --pythonpath /usr/share/webapps/hyperkitty --settings settings ADDRESS\n```\n\n"
    },
    {
      "title": "Content-Security-Policy Header",
      "level": 3,
      "content": "It is possible to define a Content-Security-Policy HTTP response header for HyperKitty. This allows content and resources only from specified locations.\n\nWhen using nginx add the following to the server directive in which HyperKitty is setup in:\n\n```\n/etc/nginx/hyperkitty.conf\n```\n\n```\n[..]\nadd_header Content-Security-Policy \"default-src 'self'; connect-src 'self'; img-src 'self' https://secure.gravatar.com; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'\";\n[..]\n```\n\n"
    },
    {
      "title": "Disabling Gravatar support",
      "level": 3,
      "content": "The builtin Gravatar support can be disabled in the configuration:\n\n```\n/etc/webapps/hyperkitty/settings_local.py\n```\n\n```\nHYPERKITTY_ENABLE_GRAVATAR = False\n```\n\nThis option was introduced in Hyperkitty 1.3.4. In earlier versions, use this instead:\n\n```\n/etc/webapps/hyperkitty/settings_local.py\n```\n\n```\nGRAVATAR_SECURE_URL = ''\n```\n\n"
    },
    {
      "title": "Saving mail attachments to disk",
      "level": 3,
      "content": "By default Hyperkitty stores mail attachments in its database. However, it can be configured to save the attachments to disk instead:\n\n```\n/etc/webapps/hyperkitty/settings_local.py\n```\n\n```\nHYPERKITTY_ATTACHMENT_FOLDER = /var/lib/hyperkitty/data/attachments\n```\n\n"
    },
    {
      "title": "Template customization",
      "level": 3,
      "content": "Using Django's TEMPLATES-DIRS capabilities, it is possible to override the following templates to change the looks of the application:\n\n- hyperkitty/headers.html: the content will appear before the </head> tag\n- hyperkitty/top.html: the content will appear before the <body> tag\n- hyperkitty/bottom.html: the content will appear before the </body> tag\n\n"
    },
    {
      "title": "Xapian search backend",
      "level": 3,
      "content": "Hyperkitty can make use of a Xapian based search backend. Install the python-xapian-haystack package and configure the backend:\n\n```\n/etc/webapps/hyperkitty/settings_local.py\n```\n\n```\nHAYSTACK_CONNECTIONS = {\n    'default': {\n        'ENGINE': 'xapian_backend.XapianEngine',\n        'PATH': \"/var/lib/hyperkitty/data/xapian_index\",\n    },\n}\n```\n\nMake sure to create the search index for all lists afterwards. Run the following command as the hyperkitty user (e.g. using sudo or su):\n\n```\n[hyperkitty]$ django-admin update_index --pythonpath /usr/share/webapps/hyperkitty --settings settings\n```\n\n"
    },
    {
      "title": "SMTP AUTH extension not supported by server",
      "level": 3,
      "content": "If upon first login with the admin user a SMTNotSupportedError is thrown (logged to /var/log/hyperkitty/hyperkitty.log), make sure to verify the EMAIL_* settings in /etc/webapps/hyperkitty/settings_local.py.\n\nBy default e.g. EMAIL_USE_TLS is set to False which might trigger a failed login via SMTP.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Hyperkitty Documentation - The upstream documentation\n- Mailman Suite Documentation - The (high level) upstream documentation for the entire Mailman Suite (Mailman, Hyperkitty and Postorius)\n\n"
    }
  ]
}