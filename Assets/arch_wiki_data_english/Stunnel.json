{
  "title": "Stunnel",
  "url": "https://wiki.archlinux.org/title/Stunnel",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Transport Layer Security\n\nstunnel (“Secure Tunnel”) is a\n\nCan tunnel only TCP packets. Its FAQ has some work around for UDP. WireGuard also has UDP capabilities.\n\nAuthentication can also be used by the server to allow access only to approved clients.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the stunnel package.\n\nDepending on your usage, you might also edit the provided systemd units to better handle dependencies. In order for the stunnel to start up automatically at system boot you must enable it.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The main configuration file is read from /etc/stunnel/stunnel.conf. It is an ini-style file. It is composed from a global section, followed by one, or more, service sections.\n\nA client is one to accept non TLS encrypted data. Stunnel will TLS encrypts its data and connects to the stunnel server. The stunnel server accepts TLS encrypted data and extracts it. It then connects to where the data should be sent to.\n\nThe default debug value is notice, which is very verbose. After verifying correct operation, it is worth explicitly setting lower value in the configuration file.\n\n```\n/etc/stunnel/stunnel.conf\n```\n\n```\ndebug = err\n```\n\nFor better security, it is advised to explicitly set an appropriate uid and gid, other then root, for the global section and the per service sections. The configuration tokens setuid and setgid are available for this purpose.\n\n"
    },
    {
      "title": "Byte order mark (BOM)",
      "level": 3,
      "content": "The configuration file should have a UTF-8 byte order mark (BOM), at the beginning of the file. A BOM is the unicode character U+FEFF. Its UTF-8 representation is the (hexadecimal) byte sequence 0xEF, 0xBB, 0xBF. Creating a file with these bytes at its beginning can be done by\n\n```\n# echo -e '\\xef\\xbb\\xbf; BOM composed of non printable characters. It is here, before the semicolon!' > /etc/stunnel/stunnel.conf\n```\n\nTo test if those bytes appear, one can use\n\n```\n% od --address-radix=n --format=x1c --read-bytes=8 /etc/stunnel/stunnel.conf\n  ef  bb  bf  3b  20  42  4f  4d\n 357 273 277   ;       B   O   M\n```\n\nNote that when printing the file to the screen, such as with cat, or when editing the file with a text editor, the BOM bytes are usually not displayed. They should be there, though. Which is why you might want to verify that they are still there after editing is completed with the above od, or similar, command.\n\n"
    },
    {
      "title": "Authentication",
      "level": 3,
      "content": "At least one of the client and the server, and optionally both, should be authenticated. Either a pre shared secret, or a key and certificate pair, can be used for authentication. A pre shared secret has to be transferred to all involved machines a priory by other means, such as SCP and SFTP. When such transfer is acceptable, pre shared key is the fastest method. Its speed might help mitigating attacks. A simple configuration for a single server with a single client that are using a pre shared secret is:\n\nClient:\n\n```\n/etc/stunnel/stunnel.conf\n```\n\n```\n; BOM composed of non printable characters. It is here, before the semicolon!\nsetuid = stunnel\nsetgid = stunnel\n\n[trivial client]\nclient     = yes\naccept     = 127.0.0.1:src_port\nconnect    = server_host:server_port\ndebug      = 3\nPSKsecrets = /etc/stunnel/psk.txt\nsetuid     = stunnel\nsetgid     = stunnel\n```\n\nServer:\n\n```\n/etc/stunnel/stunnel.conf\n```\n\n```\n; BOM composed of non printable characters. It is here, before the semicolon!\nsetuid = stunnel\nsetgid = stunnel\n\n[trivial server]\naccept     = server_port\nconnect    = dst_port\nciphers    = PSK\ndebug      = 3\nPSKsecrets = /etc/stunnel/psk.txt\nsetuid     = stunnel\nsetgid     = stunnel\n```\n\nwhere /etc/stunnel/psk.txt could be created on one machine by\n\n```\n# openssl rand -base64 -out /etc/stunnel/psk.txt 180\n# sed --in-place --null-data 's/\\n//g;1s/^/psk:/' /etc/stunnel/psk.txt\n# chmod 640 /etc/stunnel/psk.txt\n```\n\nand copied to the other machine by secure means before starting stunnel. The permissions for each psk.txt file should be set appropriately, neither world-readable nor world-writable. The psk string from the sed command is just a random name for the sake of the example. Do read stunnel(8).\n\n"
    },
    {
      "title": "Encrypting NFSv4 with Stunnel TLS",
      "level": 3,
      "content": "Note: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\nSee Encrypting NFSv4 with Stunnel TLS\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:stunnel\n- Debian:Pan#SSL encryption\n- Paranoid Penguin - Rehabilitating Clear-Text Network Applications with Stunnel\n- How To Set Up an SSL Tunnel Using Stunnel on Ubuntu\n\n"
    }
  ]
}