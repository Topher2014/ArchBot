{
  "title": "Makepkg-optimize",
  "url": "https://wiki.archlinux.org/title/Makepkg-optimize",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- DeveloperWiki:Building in a clean chroot\n- Arch User Repository\n\nmakepkg-optimizeAUR is a collection of supplemental tidy, buildenv, and executable scripts for pacman which provide macros for several kinds of optimization in the build() and package() stages.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install makepkg-optimizeAUR and, to make available optimizations requiring them, install backends: openmp, upx, optipng, svgo, and polly.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "makepkg-optimizeAUR generates a redundant configuration file, /etc/makepkg-optimize.conf, from your current makepkg.conf(5) configuration.\n\nThis file lists supplementary COMPILE FLAGS, BUILD ENVIRONMENT options, GLOBAL PACKAGE OPTIONS, PACKAGE OUTPUT options, and COMPRESSION DEFAULTS, all of which are disabled by default.\n\n"
    },
    {
      "title": "Build an optimized package",
      "level": 2,
      "content": "After selecting your preferred optimizations, pass the configuration file when building:\n\n```\n$ makepkg -c --config /etc/makepkg-optimize.conf\n```\n\n"
    },
    {
      "title": "Build an optimized package in a clean chroot",
      "level": 2,
      "content": "Alternatively, makepkg-optimize can be used to build optimized packages within a chroot.\n\n"
    },
    {
      "title": "Chroot setup",
      "level": 3,
      "content": "After setting up a chroot, a few additional steps are needed.\n\n"
    },
    {
      "title": "Install makepkg-optimize and backends",
      "level": 4,
      "content": "First, install some of the backends for the optimization macros to the base chroot:\n\n```\n$ arch-nspawn \"$CHROOT\"/root pacman -S openmp upx optipng polly\n```\n\nThen download and build makepkg-optimizeAUR and svgo.\n\nTo install them in the base chroot, copy their package files into it and install them, e.g.:\n\n```\n# cp svgo-1.2.2-2-any.pkg.tar.xz \"$CHROOT\"/root/root/\n$ arch-nspawn \"$CHROOT\"/root pacman -U /root/svgo-1.2.2-2-any.pkg.tar.xz\n```\n\n"
    },
    {
      "title": "Build a package",
      "level": 4,
      "content": "First, edit $CHROOT/root/etc/makepkg-optimize.conf and select your preferred optimizations.\n\nWhen building, pass the configuration file to makepkg:\n\n```\n$ makechrootpkg -c -r \"$CHROOT\" -- -c --config /etc/makepkg-optimize.conf\n```\n\nThe pgo option for BUILDENV enables either generation or application of profiles, depending on if this is the first or second build of the package with this flag enabled. Clean chroot building complicates this because the software is run outside of the chroot to generate profiles, but the profiles need to be applied from inside the chroot when recompiling later. The solution is to bridge the three filesystems with a bind mounted folder.\n\nCreate and bind a folder to store profiles:\n\n```\n# mkdir -m 777 {\"$CHROOT\"/{root,\"$USER\"},}/mnt/pgo\n# mount -o bind {,\"$CHROOT\"/root}/mnt/pgo\n# mount -o bind \"$CHROOT\"/{root,\"$USER\"}/mnt/pgo\n```\n\n```\n#PGODEST\n/full/path/to/$CHROOT/$USER/mnt/pgo/ /mnt/pgo/ none bind,x-gvfs-hide 0 0\n/mnt/pgo/ /full/path/to/$CHROOT/root/mnt/pgo/ none bind,x-gvfs-hide 0 0\n```\n\nEdit $CHROOT/root/etc/makepkg-optimize.conf and set PROFDEST=/mnt/pgo.\n\nBuild, then install the package and test-run its executables.\n\nAfter thoroughly utilizing the software, close it, then rebuild and reinstall its package.\n\n"
    }
  ]
}