{
  "title": "Luakit",
  "url": "https://wiki.archlinux.org/title/Luakit",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Luakit is an extremely fast, lightweight and flexible web browser using the webkit engine. It is customizable through lua scripts and fully usable with keyboard shortcuts. It uses GTK 3 and WebKit2GTK.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the luakit package or luakit-gitAUR for the development version as the official website recommends.\n\n"
    },
    {
      "title": "Basic usage",
      "level": 2,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nPress : to access the command prompt. You can do nearly everything from there. Use Tab to autocomplete commands.\n\nUse the :help command to get information on the available keyboard shortcuts and what they do. (To see how the action for a particular keyboard shortcut is implemented in Lua, click anywhere in its help text.)\n\nTo quit, use the :quit command, or press Shift+z followed by Shift+q. You can also close the browser while remembering the session (i.e. restoring the tabs) by using the :writequit command instead, or pressing Shift+z twice.\n\n"
    },
    {
      "title": "Browsing",
      "level": 3,
      "content": "- Press o to open a prompt with the :open command and enter the URI you want. Press Shift+o to edit the current URI.\n- If it is not a recognized URI, Luakit will use the default search engine. See #Custom search engines.\n- Specify which search engine to use by prefixing the entry with the appropriate keywork (e.g. :open google foobar will search foobar on Google).\n- Use common shortcuts to navigate. For emacs and vim aficionados, some of their regular shortcuts are provided. You can use the mouse as well.\n- Use f to display the index of all visible links. Enter the appropriate number or a part of the string to open the link.\n- Use Shift+f instead to open link in a new tab.\n- Press Ctrl+t to open a new tab, Ctrl+w to close it. Press t to prompt for an URI to be opened in a new tab, and Shift+t to edit the current URI in a new tab.\n- Press w to prompt for an URI to be opened in a new window, and Shift+w to edit the current URI in a new window.\n- Switch from one tab to another by pressing g followed by t or Shift+t, or use Ctrl+PageUp and Ctrl+PageDown.\n- You can switch to a specific tab with Alt+number.\n- Use Shift+h to go back in the browser history.\n- Use Shift+l to go forward in the browser history.\n- Reorder the tabs with < and >.\n- Reload the page with r, stop the loading with Ctrl+c.\n- Re-open last closed tab with u.\n- Open downloads page by pressing g followed by d (or Shift+d for a new tab).\n- Copy URI to primary selection with y.\n- View page source code with :viewsource. Return to normal view with :viewsource!.\n- View image source by pressing ; followed by i (or Shift+i for new tab).\n- Inspect elements with :inspect. Repeat to open in a new window. Disable inspector with :inspect!.\n\n"
    },
    {
      "title": "Input fields",
      "level": 3,
      "content": "Many webpages have editable elements like dropdown lists, checkboxes, text fields and so on. While they work perfectly with the mouse, you may encounter some troubles using the follow commands. In such a case, pressing the arrow keys may help. Alternatively, the g i shortcut can be used to focus input.\n\n"
    },
    {
      "title": "Bookmarks",
      "level": 3,
      "content": "If enabled (default configuration), bookmarks can be used from within Luakit.\n\n- The :bookmarks command opens the bookmarks page. (Shortcut: g followed by b, or Shift+b for a new tab).\n- The :bookmark [URI [tags]] command adds the URI specified (or the current tab's URI, if omitted) to the bookmarks by specified tags. Starting from version 2012-09-13-r1, bookmarks page will be opened (new tab) in new bookmark editing mode before saving. (Shortcut: Shift+b).\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Configuration is done in ~/.config/luakit/userconf.lua. It is not necessary anymore to copy and modify rc.lua. Some settings can also be modified with the :settings command, unless you set them in userconf.lua with:\n\n```\n~/.config/luakit/userconf.lua\n```\n\n```\nlocal settings = require \"settings\"\nsettings.example = \"some value\"\n```\n\n"
    },
    {
      "title": "Key bindings",
      "level": 3,
      "content": "Most bindings will require some knowledge of Luakit, but you can at least do simple things rebinding:\n\n```\n~/.config/luakit/userconf.lua\n```\n\n```\nlocal modes = require \"modes\"\n\n-- Creates new bindings from old ones.\nmodes.remap_binds(\"normal\", -- This is the mode in which the bindings are active.\n  {\n  --  new     old     removes the old binding (defaults to false)\n     {\"O\",    \"t\",    true},\n  -- define as many as you wish\n    {\"Control-=\", \"zi\"},\n    ...\n  })\n```\n\nTo bind keys to commands, you can use the following template:\n\n```\n~/.config/luakit/userconf.lua\n```\n\n```\nmodes.add_binds(\"normal\", {\n-- {\"<key>\",\n--  \"<description>\",\n--  function (w) w:enter_cmd(\"<command>\") end}\n  {\"O\", \"Open URL in a new tab.\",\n   function (w) w:enter_cmd(\":tabopen \") end},\n   ...\n})\n```\n\nFor inspiration, see /usr/share/luakit/lib/binds.lua, where the default bindings are defined.\n\n"
    },
    {
      "title": "Homepage",
      "level": 3,
      "content": "Set your homepage as follows:\n\n```\n~/.config/luakit/userconf.lua\n```\n\n```\nsettings.window.home_page = \"www.example.com\"\n```\n\n"
    },
    {
      "title": "Custom search engines",
      "level": 3,
      "content": "To search with the default search engine, press o and type the phrases. To search with a different engine, type its name after o and then the phrases.\n\nYou can virtually add any search engine you want. Make a search on the website you want and copy paste the URI to the Luakit configuration by replacing the searched terms with an %s. Example:\n\n```\n~/.config/luakit/userconf.lua\n```\n\n```\nlocal engines = settings.window.search_engines\nengines.aur          = \"https://aur.archlinux.org/packages?K=%s\"\nengines.aw           = \"https://wiki.archlinux.org/index.php/Special:Search?fulltext=Search&search=%s\"\nengines.googleseceng = \"https://www.google.com/search?name=f&hl=en&q=%s\"\n```\n\nThe variable is used as a keyword for the :open command in Luakit.\n\nSet the default search engine by using this same keyword:\n\n```\n~/.config/luakit/userconf.lua\n```\n\n```\nengines.default = engines.aur\n```\n\nInstead of strings, you can defined search engines as functions that return a string. For instance, here is a Wikipedia search engine that lets you specify a language (defaulting to English):\n\n```\n~/.config/luakit/userconf.lua\n```\n\n```\nengines.wikipedia = function (arg)\n  local l, s = arg:match(\"^(%a%a):%s*(.+)\")\n  if l then\n    return \"https://\" .. l .. \".wikipedia.org/wiki/Special:Search?search=\" .. s\n  else\n    return \"https://en.wikipedia.org/wiki/Special:Search?search=\" .. arg\n  end\nend,\n```\n\nIf called as :open wikipedia arch linux, this will open the Arch Linux page on the English Wikipedia; with :open wikipedia fr: arch linux, this will use the French Wikipedia instead.\n\n"
    },
    {
      "title": "Download location",
      "level": 3,
      "content": "To specify download location:\n\n```\n~/.config/luakit/userconf.lua\n```\n\n```\nrequire \"downloads\"\ndownloads.default_dir = os.getenv(\"HOME\") .. \"/mydir\"\n```\n\nDefault location is $XDG_DOWNLOAD_DIR if it exists, $HOME/downloads otherwise.\n\n"
    },
    {
      "title": "Adblock",
      "level": 3,
      "content": "Adblock is loaded by default, but you need to:\n\n- Fetch an adblock-compatible list, like Easylist, and save it to ~/.local/share/luakit/adblock.\n- Restart Luakit to load the extension.\n- Use :adblock-list-enable number command within Luakit to turn Adblock's list(s) you downloaded on Adblock itself becomes enabled on startup.\n\nFull info on enabled lists and AdBlock state can be found using :adblock or g Shift+a at luakit://adblock/ internal page, if the adblock_chrome module is enabled, which is not a mandatory part.\n\nNote: **normal** \n\n"
    },
    {
      "title": "Sync",
      "level": 4,
      "content": "Starting from version 2012.09.13, Luakit bookmarks are stored in an SQLite database: ~/.local/share/luakit/bookmarks.db.\n\nYou can put a symbolic link in place of the default file to store your bookmarks anywhere on your machine. This way if your are using a cloud sync application like Dropbox, you can keep your bookmarks synchronized between your different computers.\n\n"
    },
    {
      "title": "Converting plain text bookmarks to SQLite format",
      "level": 4,
      "content": "Bookmarks were stored in a simple plain text file: ~/.local/share/luakit/bookmarks. Each line is a bookmark. It is composed of 2 fields, the link and the group which are separated by a tab character.\n\nTo use bookmarks with the latest Luakit release, the file must be converted. A sample Lua script will do that:\n\n```\nbookmarks_plain_to_sqlite.lua\n```\n\n```\nlocal usage = [[Usage: luakit -c bookmarks_plain_to_sqlite.lua [bookmark plaintext path] [bookmark db path]\n]]\n\nlocal old_db_path, new_db_path = unpack(uris)\n\nif not old_db_path or not new_db_path then\n   io.stdout:write(usage)\n   luakit.quit(1)\nend\n\n-- One-pass file read into 'data' var.\nold_db = assert(io.open(old_db_path, \"r\"))\nlocal data = old_db:read(\"*all\")\nassert(old_db:close())\n\n-- Init new_db, otherwise sqlite queries will fail.\nnew_db = sqlite3{ filename = new_db_path }\nnew_db:exec(\"CREATE TABLE IF NOT EXISTS bookmarks (id INTEGER PRIMARY KEY, uri TEXT NOT NULL, title TEXT NOT NULL, desc TEXT NOT NULL, tags TEXT NOT NULL, created INTEGER, modified INTEGER )\")\n\n-- Fill\nlocal url,tag\n\nfor line in data:gmatch(\"[^\\n]*\\n?\") do\n\n   if string.len(line) > 1 then\n\n      print (\"[\"..line..\"]\")\n\n      -- Get url and tag (if present) from first line.\n      _, _, url, tag = string.find(line, \"([^\\n\\t]+)\\t*([^\\n]*)\\n?\")\n\n      -- Optional yet convenient output.\n      io.write(url)\n      io.write(\"\\t\")\n      io.write(tag)\n      io.write(\"\\n\")\n\n      -- DB insertion. Nothing will be overwritten. If URL and/or tag already exists, then a double is created.\n      new_db:exec(\"INSERT INTO bookmarks VALUES (NULL, ?, ?, ?, ?, ?, ?)\",\n                  {\n                     url, \"\", \"\", tag or \"\",\n                     os.time(), os.time()\n                  })\n      end\nend\n\nprint(\"Import finished.\")\nprint(\"\\nVacuuming database...\")\nnew_db:exec \"VACUUM\"\nprint(\"Vacuum done.\")\n\nluakit.quit(0)\n```\n\nAs stated at beginning of the script, it must be ran with Luakit:\n\n```\n$ luakit -c bookmarks_plain_to_sqlite.lua path/to/plaintext/bookmark path/to/db\n```\n\nThe old plaintext bookmarks will be left unchanged. If the DB bookmarks do not exist, the file will be created. If it exists, do not worry, none of the previous bookmarks will be touched. However, this behaviour implies that you might get some doubles.\n\n"
    },
    {
      "title": "Import from Firefox",
      "level": 4,
      "content": "To import bookmarks from Firefox, first they must be exported to an HTML file using its bookmarks manager. After that the XML file can be converted to a Luakit format.\n\nThe following one-line awk command will do that:\n\n```\n$ cat bookmarks.html | awk '\n{gsub(/\\\"/,\" \")}\n/<\\/H3>/{FS=\">\";gsub(/</,\">\");og=g;g=$(NF-2);FS=\" \"}\n/<DL>/{x++;if(x>= 3)gl[x-3]=g}\n/<\\/DL>/{x--;if(x==2)g=og\"2\"}\n/HREF/{gsub(/</,\" \");gsub(/>/,\" \");if(g!=\"\"){if(og!=g){printf \"\\n\";og=g};printf \"%s\\t\",$4;if(x>=3){for(i=0;i<=x-4;i++){printf \"%s-\",gl[i]}printf \"%s\\n\",gl[x-3]}else{printf \"\\n\"}}}'\n```\n\nThe more readable version of the script:\n\n```\nff2lk.awk\n```\n\n```\n# Notes: 'folders' for Firefox bookmarks mean 'groups' for Luakit.\n\n# Put spaces where it is needed to delimit words properly.\n{gsub(/\\\"/,\" \")}\n\n# Since the folder name may have spaces, delimiter must be \">\" here.\n/<\\/H3>/ {\n    FS=\">\"\n    gsub(/</,\">\")\n    oldgroup=group\n    group=$(NF-2)\n    FS=\" \"\n}\n\n# Each time a <DL> is encountered, it means we step into a subfolder.\n# 'count' is the depth level.\n# Base level starts at 2 (Firefox fault).\n# 'groupline' is an array of all parent folders.\n/<DL>/ {\n    count++\n    if ( count >= 3 )\n        groupline[count-3]=group\n}\n\n# On </DL>, we step out.\n# If if return to the base level (i.e. not in a folder), then we give 'group' a fake name different\n# from 'oldgroup' to make sure a line will be skipped (see below).\n/<\\/DL>/ {\n    count--\n    if( count == 2 )\n        group=oldgroup\"ROOT\"\n}\n\n# The bookmark name.\n# If oldgroup is different than group, (i.e. folder changed) then we skip a line.\n# If we are in a folder, then we print the group name, i.e. all parents plus the current folder\n# separated by an hyphen.\n/HREF/ {\n    gsub(/</,\" \")\n    gsub(/>/,\" \")\n    if (group != \"\")\n    {\n        if(oldgroup != group)\n        {\n            printf \"\\n\"\n            oldgroup=group\n        }\n        printf \"%s\\t\",$4\n        if ( count >= 3 )\n        {\n            for ( i=0 ; i <= count-4 ; i++ )\n            {printf \"%s-\" , groupline[i]}\n            printf \"%s\" , groupline[count-3]\n        }\n        printf \"\\n\"\n    }\n}\n```\n\nRun it with\n\n```\n$ awk -f ff2lk.awk bookmarks.html >> bookmarks\n```\n\nThen convert the generated plain text bookmarks to the SQLite format as described at #Converting plain text bookmarks to SQLite format.\n\n"
    },
    {
      "title": "Export bookmarks",
      "level": 4,
      "content": "The following script let you export Luakit bookmarks from its SQLite format to a plain text file. The resulting file may be suitable for other web browsers, or may be easily parsed by import scripts.\n\n```\nbookmarks_sqlite_to_plain.lua\n```\n\n```\n-- USER CONFIG\n\nlocal sep = \" \"\n\n-- END OF USER CONFIG\n\nlocal usage = [[Usage: luakit -c bookmarks_sqlite_to_plain.lua [bookmark db path] [bookmark plain path]\n\nDB scheme is\n\n    bookmarks (\n        id INTEGER PRIMARY KEY,\n        uri TEXT NOT NULL,\n        title TEXT NOT NULL,\n        desc TEXT NOT NULL,\n        tags TEXT NOT NULL,\n        created INTEGER,\n        modified INTEGER\n    );\n]]\n\nlocal old_db_path, new_db_path = unpack(uris)\n\nif not old_db_path or not new_db_path then\n   io.stdout:write(usage)\n   luakit.quit(1)\nend\n\n-- One-pass file read into 'data' var.\nnew_db = assert(io.open(new_db_path, \"w\"))\n\n-- Open old_db\nold_db = sqlite3{ filename = old_db_path }\n\n-- Load all db values to a string variable.\nlocal rows = old_db:exec [[ SELECT * FROM bookmarks ]]\n\n-- Iterate over all entries.\n-- Note: it could be faster to use one single concatenation for all entries, but\n-- it would be much more code and not so flexible. It is desirable to focus on\n-- clarity. After all, only a few hundred lines are handled.\nfor _, b in ipairs(rows) do\n\n   -- Change %q for %s to remove double quotes if needed.\n   -- You can toggle the desired fields with comments.\n   local outputstr =\n      string.format(\"%q%s\", b.uri or \"\", sep) ..\n      string.format(\"%q%s\", b.title or \"\", sep) ..\n      string.format(\"%q%s\", b.desc or \"\", sep) ..\n      string.format(\"%q%s- \", b.tags or \"\", sep) ..\n      ((b.created or \"\" ) .. sep) ..\n      ((b.modified or \"\" ) .. sep) ..\n      \"\\n\"\n\n   -- Write entry to file.\n   new_db:write(outputstr)\nend\n\n\nprint(\"Export done.\")\n\nassert(new_db:close())\n\nluakit.quit(0)\n```\n\nAs stated at beginning of the script, it must be ran with Luakit:\n\n```\n$ luakit -c bookmarks_plain_to_sqlite.lua path/to/plaintext/bookmarks path/to/database\n```\n\n"
    },
    {
      "title": "Tor",
      "level": 3,
      "content": "Once Tor has been setup, simply run:\n\n```\n$ torsocks luakit --nounique\n```\n\n"
    },
    {
      "title": "Custom CSS",
      "level": 3,
      "content": "Locate the styles sub-directory within luakit's data storage directory. Normally, this is located at ~/.local/share/luakit/styles/. Create the directory if it does not already exist. Move any CSS rules to a new file within that directory. The filename must end in .css. Make sure you specify which sites your stylesheet should apply to. The way to do this is to use @-moz-document rules. The Stylish wiki page Applying styles to specific sites may be helpful. Run :styles-reload to detect new stylesheet files and reload any changes to existing stylesheet files; it is not necessary to restart luakit.\n\nTo open the styles menu, run the command :styles-list. Here you can enable/disable stylesheets, open stylesheets in your text editor, and view which stylesheets are active.\n\nIf a stylesheet is disabled for all pages, its state will be listed as \"Disabled\". If a stylesheet is enabled for all pages, but does not apply to the current page, its state will be listed as \"Enabled\". If a stylesheet is enbaled for all pages _and_ it applies to the current page, its state will be listed as \"Active\".\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Home page\n- Cheatsheet\n\n"
    }
  ]
}