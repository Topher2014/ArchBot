{
  "title": "Distrobox",
  "url": "https://wiki.archlinux.org/title/Distrobox",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Linux Containers\n- Podman\n- Buildah\n- Toolbox\n\nDistrobox is a container wrapping layer that allows the user to install containerised versions of Linux that are different to the host while providing tight integration with the host allowing the use of binaries designed for one distribution to run on another.\n\nDistrobox itself is not a container manager and relies on Podman or Docker to create containers.\n\nFrom the Distrobox documentation:\n\n"
    },
    {
      "title": "Security implications",
      "level": 2,
      "content": "The main goal of Distrobox is not focused on sandboxing the containers from the host. Due to the tight integration nature of the project, complete isolation is not possible as containers running inside Distrobox will have full access to your home folder and application directories.\n\nIt is recommended to use Podman over Docker since by default Docker will run containers as root and rootful containers will have unrestricted access to your hosts filesystem. Rootless Docker is currently not working though is being worked on.\n\nWhile full sandboxing is not possible, Distrobox offers some isolation features through its unsharing mode. See #Unsharing mode for details.\n\n"
    },
    {
      "title": "With root access",
      "level": 3,
      "content": "First follow the page for either Podman or Docker and make sure you are able to install and run a Hello World container.\n\nInstall either distrobox or distrobox-gitAUR\n\n"
    },
    {
      "title": "Without root access/Immutable filesystem",
      "level": 3,
      "content": "It is possible to install Distrobox into your home folder if you don't have root access to the system or if you are using an immutable distro. Doing so requires the use of a curl-to-sh pipe which is an unsupported installation method due to it posing a security risk.\n\nYou can find instructions on the Distrobox documentation page\n\n"
    },
    {
      "title": "Uninstalling",
      "level": 4,
      "content": "Distrobox provides an uninstallation script for rootless installs, this script is only required if you installed rootless, if you installed via Pacman then you should uninstall in the usual way.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "- Throughout the following section name is a variable and can be whatever you want. In all cases replace name with the actual name you choose\n- For the full list of supported options in any sub category use --help, for example to see all creation options use distrobox create --help\n- A full list of supported distros along with their image names can be found at https://distrobox.it/compatibility/#containers-distros\n- For more advanced usage techniques please see the Distrobox Documentation page at https://distrobox.it/usage/usage/\n\nTo create a new container run the following:\n\n```\n$ distrobox create -n name\n```\n\nTo list installed containers run the following:\n\n```\n$ distrobox list\n```\n\nTo interact with an installed container run the following:\n\n```\n$ distrobox enter name\n```\n\nor you can send a command directly to a container with:\n\n```\n$ distrobox enter name -- command-to-execute\n```\n\nTo stop a running container run the following:\n\n```\n$ distrobox stop name\n```\n\nTo delete a container run the following:\n\n```\n$ distrobox rm name\n```\n\nTo install a specific distro into a container run the following (in this example it is Ubuntu):\n\n```\n$ distrobox create --image ubuntu:22.04\n```\n\nInstallations can be fully customised as follows (in this example it is a container called test running Gentoo with root access):\n\n```\n$ distrobox create -i docker.io/gentoo/stage3:latest -n test --root\n```\n\nIf you need your container to have root access to the host then it is recommended that you use the --root flag over sudo distrobox.\n\n"
    },
    {
      "title": "Unsharing mode",
      "level": 3,
      "content": "Distrobox allows users to partially isolate certain system aspects through its unshare feature. By default, the following components are shared between host and container:\n\ndevsysfs, ipc, netns, process, $HOME and Application access.\n\nYou can choose to unshare some of these components by using the commands listed below when creating a new container:\n\nTable content:\nShare | Command | Usage\ndevsysfs | --unshare-devsysfs | Do not share host devices and sysfs dirs from host.\nipc | --unshare-ipc | Do not share the ipc namespace with host.\nnetns | --unshare-netns | Do not share the network namespace with host.\nprocess | --unshare-process | Do not share the process namespace with host.\nAll | --unshare-all | Activate all unshare flags.\n\nNote that unsharing $HOME and Application access is not possible, as these are mandatory for Distrobox's core functionality.\n\nNote: **not constitute a full security sandbox** \n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "It is possible to configure Distrobox in two ways, either with a configuration file or by using environment variables.\n\n"
    },
    {
      "title": "Configuration file",
      "level": 3,
      "content": "Distrobox checks the following locations for config files, from least important to most important:\n\n- /usr/share/distrobox/distrobox.conf\n- /usr/etc/distrobox/distrobox.conf\n- /etc/distrobox/distrobox.conf\n- ~/.config/distrobox/distrobox.conf\n- ~/.distroboxrc\n\nAn example config file is as follows:\n\n```\ncontainer_always_pull=\"1\"\ncontainer_generate_entry=0\ncontainer_manager=\"docker\"\ncontainer_image_default=\"registry.opensuse.org/opensuse/toolbox:latest\"\ncontainer_name_default=\"test-name-1\"\ncontainer_user_custom_home=\"$HOME/.local/share/container-home-test\"\ncontainer_init_hook=\"~/.local/distrobox/a_custom_default_init_hook.sh\"\ncontainer_pre_init_hook=\"~/a_custom_default_pre_init_hook.sh\"\nnon_interactive=\"1\"\nskip_workdir=\"0\"\n```\n\n"
    },
    {
      "title": "Environment variables",
      "level": 3,
      "content": "The following variables are available and should be set using per user variables:\n\n```\nDBX_CONTAINER_ALWAYS_PULL\nDBX_CONTAINER_CUSTOM_HOME\nDBX_CONTAINER_IMAGE\nDBX_CONTAINER_MANAGER\nDBX_CONTAINER_NAME\nDBX_CONTAINER_ENTRY\nDBX_NON_INTERACTIVE\nDBX_SKIP_WORKDIR\n```\n\n"
    },
    {
      "title": "Run graphical apps",
      "level": 3,
      "content": "When running graphical apps, you should first install the mesa-dri-drivers GPU drivers in Fedora, mesa in Arch, or the equivalent Mesa package for the distro.\n\nIf you encounter an authorization error, see Toolbox#X11 applications not starting for the fix.\n\nYou can run apps installed inside the Distrobox from the outside using distrobox enter -- appname or integrate them with your desktop by running distrobox-export inside the container.\n\n"
    },
    {
      "title": "Use systemd inside the container",
      "level": 3,
      "content": "Run the following commands inside the container to make the host systemd accessible inside the container:\n\n```\n# ln -s /run/host/run/systemd/system /run/systemd\n# mkdir -p /run/dbus\n# ln -s /run/host/run/dbus/system_bus_socket /run/dbus\n```\n\n"
    },
    {
      "title": "Execute commands on the host",
      "level": 3,
      "content": "It is possible to run a command on the host, while inside the container using distrobox-host-exec command. This command requires flatpak to be installed, otherwise it will not work, without an obvious error message [1].\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Project GitHub page\n- Project documentation page\n\n"
    }
  ]
}