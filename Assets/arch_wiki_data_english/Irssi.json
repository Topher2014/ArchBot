{
  "title": "Irssi",
  "url": "https://wiki.archlinux.org/title/Irssi",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Arch IRC channels\n- /irssi-otr\n\nIrssi is a modular, ncurses based IRC (Internet Relay Chat) client. It also supports SILC and ICB protocols via plugins.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the irssi package.\n\nSeveral scripts are available in the AUR under irssi-script, and in the Irssi script repository.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "For a detailed introduction see the official documentation.\n\nA terminal multiplexer such as tmux or GNU Screen is recommended. It allows the user to easily disconnect and reconnect to a session, and scripts such as nicklist.pl depend on a secondary window. To start irssi, run:\n\n```\n$ irssi\n```\n\nSee also irssi(1).\n\n"
    },
    {
      "title": "Commands",
      "level": 3,
      "content": "Irssi commands start with a slash and are case-insensitive. Tab completion is supported. You can find out about them with the built-in /help pages, which are also available online.\n\nTable content:\nCommand | Description\n/help | List all commands or describe a given command.\n/network | Manage your IRC networks.\n/server | Manage your IRC servers.\n/connect | Connect to a server or network.\n/disconnect | Closes the current connection to a server.\nALT+(1-0,q-p,etc) | Changes the currently active window. Ctrl+n cycles to the next window, Ctrl+p to the previous window.\n/window | Manage your irssi windows.\n/layout | Save or delete your window configuration.\n/statusbar | Manage the statusbars.\n/set | View or change settings.\n/alias | Manage your aliases.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Irssi installs its default configuration to /etc/irssi.conf, and copies it to ~/.irssi/config if not present. The default configuration contains several servers, chatnets, and channels. You can start irssi with an alternate configuration file using the --config flag.\n\n- You can use /save to save your current configuration to the configuration file.\n- You can save the location of your currently opened windows by entering /layout save\n\n"
    },
    {
      "title": "Authenticating with SASL",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nIrssi supports the Simple Authentication and Security Layer (SASL).\n\nYou can add a network with SASL mechanism as follows:\n\n```\n/SERVER ADD -ssl -ssl_verify -ssl_capath /etc/ssl/certs -network liberachat -port 6697 irc.libera.chat\n/NETWORK ADD -sasl_mechanism plain -sasl_username username -sasl_password password liberachat\n```\n\n- Make sure to use the correct capitalization for the network name.\n- First command line is for adding server with #TLS Connection\n- If you have an existing network, then type second command line only.\n- If your password contains $, you have to prefix it with another $ for irssi to properly parse it.\n\nRestart Irssi, connect network and look for SASL authentication succeeded.\n\n"
    },
    {
      "title": "Automatically connect to #archlinux on startup",
      "level": 3,
      "content": "Start Irssi and then type the following in it:\n\n```\n/server add -auto -network liberachat irc.libera.chat\n```\n\nliberachat can be substituted for any preferred word, such as the common abbreviation lc.\n\nEnsure SASL is configured correctly. You may use NickServ manually with -autosendcmd instead of SASL, but this causes a race condition when automatically joining channels. If desired, authenticate using SSL certificates, instead of passwords with NickServ.\n\n```\n/channel add -auto #archlinux liberachat\n/channel add -auto #archlinux-offtopic liberachat\n```\n\n"
    },
    {
      "title": "TLS Connection",
      "level": 3,
      "content": "Libera.chat uses port 6697 for SSL/TLS connections (not 6667). To connect to Libera.chat IRC network via TLS you have to setup a new connection. Start irssi and run:\n\n```\n/server add -auto -tls -tls_verify -network liberachat -port 6697 irc.libera.chat\n```\n\nSave your new settings with:\n\n```\n/save\n```\n\nIf everything works you will see the \"Z\" mode set. It should look like this: \"Mode change (+Zi) for user your-nick\"\n\n"
    },
    {
      "title": "Client certificates",
      "level": 4,
      "content": "Libera Chat and OFTC support authentication using TLS certificates, providing an alternative to passwords. Follow their own guides on using CertFP: Libera.chat, OFTC. The instructions below are for a more general case and may not reflect practices suggested by these IRC networks.\n\nTo create a password-less certificate that is valid for 730 days (when requested to enter details like state or even Common Name (CN), you can fill anything you want):\n\n```\n$ openssl req -newkey rsa:4096 -days 730 -x509 -keyout irssi.key -out irssi.crt -nodes \n$ cat irssi.crt irssi.key > ~/.irssi/irssi.pem\n$ chmod 600 ~/.irssi/irssi.pem\n$ rm irssi.crt irssi.key\n```\n\nNext, find out the corresponding fingerprint:\n\n```\n$ openssl x509 -sha512 -fingerprint -noout -in ~/.irssi/irssi.pem | sed -e 's/^.*=//;s/://g;y/ABCDEF/abcdef/'\n```\n\nThis will write the SHA512 fingerprint to stdout. If you need the SHA1 fingerprint, replace -sha512 with -sha1. The sed command is there to format the fingerprint correctly by removing unwanted text and characters.\n\nCopy the fingerprint string as you will register it in Irssi shortly.\n\nIn irssi, disconnect from the network and add the client certificate and keys. Omit the -ssl_pass option if your certificate was built without a password:\n\n```\n/disconnect liberachat\n/server add -ssl_cert ~/.irssi/irssi.pem  -ssl_pass irssi.pem_password -network liberachat irc.libera.chat 6697\n```\n\nNow connect (not /reconnect) and register your fingerprint\n\n```\n/connect liberachat\n/msg NickServ identify YOUR_PASSWORD\n/msg NickServ cert add YOUR_FINGERPRINT\n```\n\nAt this point, you can remove your password from the configuration file (if you saved it in there) and save your configuration with:\n\n```\n/save\n```\n\n"
    },
    {
      "title": "Automatic logging",
      "level": 3,
      "content": "```\n/SET autolog ON\n/save\n```\n\n"
    },
    {
      "title": "Hide joins, parts, and quits",
      "level": 3,
      "content": "In order to ignore showing of joining, leaving and quiting of users for all channels type the following in irssi:\n\n```\n/ignore * joins parts quits\n```\n\nSee smartfilter to restrict join messages to active users.\n\n"
    },
    {
      "title": "Mouse scrolling",
      "level": 3,
      "content": "To enable the mouse, type the following in irssi:\n\n```\n/run scriptassist\n/script install mouse.pl\n```\n\nYou may need to install perl-lwp-protocol-https for the above to work.\n\nTo permanently enable it at startup:\n\n```\n/script autorun mouse.pl\n```\n\nIf the above does not work, you can manually load scripts from ~/.irssi/scripts or ~/.irssi/scripts/autorun with the following:\n\n```\n/script load mouse.pl\n```\n\n"
    },
    {
      "title": "HTTP Proxy",
      "level": 3,
      "content": "To use irssi behind a HTTP proxy, the following commands are required:\n\n```\n/SET use_proxy ON\n/SET proxy_address <Proxy host address>\n/SET proxy_port <Proxy port>\n/SET -clear proxy_string\n/SET proxy_string_after conn %s %d\n/EVAL SET proxy_string CONNECT %s:%d HTTP/1.0\\n\\n\n```\n\nirssi should then alter its configuration file correspondingly; if the proxy is not required, just set use_proxy to OFF.\n\nShould the proxy require a password, try:\n\n```\n/SET proxy_password your_pass\n```\n\nOtherwise:\n\n```\n/SET -clear proxy_password\n```\n\n"
    },
    {
      "title": "Irssi with nicklist in tmux",
      "level": 3,
      "content": "The irssi plugin 'nicklist' offers to add a pane listing the users on the channel currently viewed. It has two methods to do this:\n\n- screen, which simply adds the list to the right of irssi, but brings the disadvantage that the entire window gets redrawn every time irssi prints a line.\n\n- fifo, which like the name suggests writes the list into a fifo that can then be continuously read with e. g. cat ~/.irssi/nicklistfifo.\n\nnicklist will use the more efficient fifo with:\n\n```\n/NICKLIST FIFO\n```\n\nThis fifo can be used in a tmux window split vertically with irssi in its left pane and the cat from above in a small one in its right. Since the pane is dependent on its creating tmux session's geometry, a subsequent session with a different one needs to recreate it (which also implies a switch in irssi windows to refill the fifo).\n\nE.g., the following script first checks for a running irssi, presumed to have been run by a previous execution of itself. Unless found it creates a new tmux session, a window named after and running irssi and then the pane with cat. If however irssi was found it merely attaches to the session and recreates the cat pane.\n\n```\n#!/bin/sh\n\nT3=$(pgrep -u \"$USER\" -x irssi)\n\nirssi_nickpane() {\n    tmux setw main-pane-width $(( $(tput cols) - 21));\n    tmux splitw -v \"cat ~/.irssi/nicklistfifo\";\n    tmux selectl main-vertical;\n    tmux selectw -t irssi;\n    tmux selectp -t 0;\n}\n\nirssi_repair() {\n    tmux selectw -t irssi\n    [ \"$(tmux lsp | wc -l)\" -gt 1 ] && tmux killp -a -t 0\n    irssi_nickpane\n}\n\nif [ -z \"$T3\" ]; then\n    tmux new-session -d -s main;\n    tmux new-window -t main -n irssi irssi;\n    irssi_nickpane ;\nfi\n    tmux attach-session -d -t main;\n    irssi_repair ;\nexit 0\n```\n\n"
    },
    {
      "title": "Virtual hostname (vhost)",
      "level": 3,
      "content": "A vhost can be used to change your hostname when connected to an IRC-server, commonly viewed when joining/parting or doing a whois. This is most commonly done on a server that has a static IP address. Without a vhost it would commonly look like so when doing a 'whois':\n\n```\nnick@123.456.78.90.isp.com\n```\n\nThe result of a successful vhost could be like so if you have the domain example.com available:\n\n```\nnick@example.com\n```\n\nKeep in mind that not every IRC-server supports the use of vhost. This might be individually set between the servers and not the network, so if you are experiencing issues with one server try another on the same network.\n\n"
    },
    {
      "title": "Required preconfigurations",
      "level": 4,
      "content": "Irssi supports using a vhost as long as the required configurations has been set. This includes especially that your host supports reverse DNS lookup (rDNS) using pointer record (PTR). Additionally you should add an appropriate line to your /etc/hosts file.\n\nTo see if this is working, test with the host(1) DNS lookup utility included in bind like so (where ip is a normal IPv4 address):\n\n```\n$ host ip\n```\n\nIf this returns something in the lines of this then you know that your rDNS is working.\n\n```\nip.in-addr.arpa domain name pointer example.com\n```\n\n"
    },
    {
      "title": "Enabling the vhost",
      "level": 4,
      "content": "There are a couple of ways to connect to a server with a given hostname. One is using the 'server' command with a -host argument like so:\n\n```\n/server -host example.com irc.libera.chat\n```\n\nAnother way would be to set your hostname (vhost) with the 'set' command which will save your hostname to ~/.irssi/config:\n\n```\n/set hostname example.com\n/save\n/server irc.libera.chat\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official website\n- Official Irssi script repository\n- Setting up Irssi\n- Guide to efficiently using Irssi and screen by Matt Sparks\n- IRC notifications with dzen2 by Jason Ryan\n- Irssi’s /channel, /network, /server and /connect – What it means by Aaron Toponce\n- awesome Wiki Irssi tips (Wayback Machine)\n- irssi systemd unit GitHub gist\n\n"
    }
  ]
}