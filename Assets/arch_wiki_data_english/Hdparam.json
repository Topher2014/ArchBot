{
  "title": "Hdparam",
  "url": "https://wiki.archlinux.org/title/Hdparam",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Securely wipe disk#hdparm\n\nhdparm and sdparm are command line utilities to set and view hardware parameters of hard disk drives. hdparm can also be used as a simple benchmarking tool.\n\nOriginally, hdparm was created for IDE disks and sdparm for SCSI disks. Since approximately 2010 onward, storage device interfaces are an enhanced mixture of both IDE and SCSI, hdparm and sdparm complement each other.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the hdparm package. For use with SCSI devices, install the sdparm package.\n\n"
    },
    {
      "title": "Disk info",
      "level": 3,
      "content": "To get information about hard disks, run the following:\n\n```\n# hdparm -I /dev/sda\n```\n\n"
    },
    {
      "title": "Benchmarking",
      "level": 3,
      "content": "hdparm can be used for Benchmarking#hdparm.\n\n"
    },
    {
      "title": "Power management configuration",
      "level": 3,
      "content": "Modern hard drives support numerous power management features. The most common ones are summarized in the following table. See hdparm(8) for the complete list.\n\nTable content:\nParameter | Description\n-B | Set the Advanced Power Management feature. Possible values are between 1 and 255, low values mean more aggressive power management and higher values mean better performance. Values from 1 to 127 permit spin-down, whereas values from 128 to 254 do not. A value of 255 completely disables the feature.\n-S | Set the standby (spindown) timeout for the drive. The timeout specifies how long to wait in idle (with no disk activity) before turning off the motor to save power. The value of 0 disables spindown, the values from 1 to 240 specify multiples of 5 seconds and values from 241 to 251 specify multiples of 30 minutes.\n-M | Set the Automatic Acoustic Management feature. Most modern hard disk drives have the ability to speed down the head movements to reduce their noise output. The possible value depends on the disk, some disks may not support this feature.\n\n- When passing both -B and -S parameters, APM values less than 128 might cause the drive to spin down before the -S timeout value. See [1].\n- Current values of -S cannot be queried.\n\nTo query current value of -B, pass the parameter without a value:\n\n```\n# hdparm -B /dev/sda\n```\n\nTo apply different value, for example set APM to 127:\n\n```\n# hdparm -B 127 /dev/sda\n```\n\n"
    },
    {
      "title": "Write cache",
      "level": 3,
      "content": "Write caching is the process of temporarily caching files in the drive's embedded memory before writing them to the disk, which is essentially a performance boost. Write cache is a feature provided by most hard drives, and it is enabled by default in most cases. To check if that's the case, run:\n\n```\n# hdparm -W /dev/sdX\n```\n\nIf it is disabled, one may enable it with:\n\n```\n# hdparm -W 1 /dev/sdX\n```\n\nConversely, to disable it, use:\n\n```\n# hdparm -W 0 /dev/sdX\n```\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nFor an example of forcing disk write caches to be persistently disabled on a machine, we can create a local script /usr/local/sbin/write-cache-disabler that uses hdparm and lsblk(8) to periodically probe all attached disks and apply the desired setting. This will disable write caches on boot when the service is first ran, and can catch within 30 seconds any infrequent cases that re-enable the write cache, i.e. disk additions and system suspensions.\n\n```\n/usr/local/sbin/write-cache-disabler\n```\n\n```\n#!/bin/sh\nset -e\n\nwhile true; do\n        lsblk --raw --scsi --paths -o name \\\n        | tail --lines='+2' \\\n        | (while read -r name; do \n                hdparm -W \"$name\" \\\n                | (grep --fixed-strings --quiet -e '1 (on)' \\\n                   && hdparm -W 0 \"$name\" \\\n                   || true)\n        done)\n        sleep 30\ndone\n```\n\nMake sure the script is executable with chmod u+x /usr/local/sbin/write-cache-disabler. We can then run this daemon under systemd by creating a local unit:\n\n```\n/etc/systemd/system/write-cache-disabler.service\n```\n\n```\n[Unit]\nDescription=Write cache disabler daemon\n\n[Service]\nType=simple\nExecStart=/usr/local/sbin/write-cache-disabler\n\n[Install]\nWantedBy=multi-user.target\n```\n\nEnable write-cache-disabler.service to start it at boot.\n\n"
    },
    {
      "title": "Power off a hard disk drive",
      "level": 3,
      "content": "A typical usage case, where such a feature is looked for, is with disks connected to a cheap external USB/SATA/FireWire enclosure, or bridge. If it does not properly issue a stop command to the drive when turning off the power switch, the drive is forced to do an emergency head retract. Regularly doing that will, sooner or later, break the drive. One solution is, after one is sure the data has been written to the media, to run a command to power off the drive:\n\n```\n# hdparm -Y /dev/sdX\n```\n\n1. The data was actually written to the media. It is also advised to wait some time so that the drive will become idle.\n1. The device, /dev/sdX in the example, is the one you want to power off.\n\n"
    },
    {
      "title": "Querying the status of the disk without waking it up",
      "level": 3,
      "content": "Invoking hdparm with the query option is known to wake-up some drives. In this case, consider smartctl provided by smartmontools to query the device which will not wake up a sleeping disk. For example:\n\n```\n# smartctl -i -n standby /dev/sda\n```\n\n```\nsmartctl 6.5 2016-05-07 r4318 [x86_64-linux-4.10.13-1-ARCH] (local build)\nCopyright (C) 2002-16, Bruce Allen, Christian Franke, www.smartmontools.org\n\nDevice is in STANDBY mode, exit(2)\n```\n\n"
    },
    {
      "title": "Persistent configuration using udev rule",
      "level": 3,
      "content": "To make the setting persistent across reboot, one can use a udev rule:\n\n```\n/etc/udev/rules.d/69-hdparm.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"block\", KERNEL==\"sda\", RUN+=\"/usr/bin/hdparm -B 254 -S 0 /dev/sda\"\n```\n\nBecause a disk device can be assigned randomly to a changing /dev/sdX, the disk can also be identified by its serial as explained in Udev#Identifying a disk by its serial.\n\nSystems with multiple hard drives can apply the rule in a flexible way according to some criteria. For example, to apply power-saving settings to all rotational drives (hard disk with rotational head, excluding in particular solid state drives), use the following rule:\n\n```\n/etc/udev/rules.d/69-hdparm.rules\n```\n\n```\nACTION==\"add|change\", KERNEL==\"sd[a-z]\", ATTRS{queue/rotational}==\"1\", RUN+=\"/usr/bin/hdparm -B 127 /dev/%k\"\n```\n\n"
    },
    {
      "title": "Reapplying configuration after wakeup",
      "level": 3,
      "content": "If the configuration is lost after system suspension/hibernation, it can be reapplied using systemd-sleep.\n\nPut a script into /usr/lib/systemd/system-sleep/ and make it executable:\n\n```\n/usr/lib/systemd/system-sleep/hdparm\n```\n\n```\n#!/bin/sh\n\ncase $1 in post)\n        /usr/bin/hdparm -B 254 -S 0 /dev/sda\n       Â ;;\nesac\n```\n\n"
    },
    {
      "title": "Putting a drive to sleep directly after boot",
      "level": 3,
      "content": "A device which is rarely needed can be put to sleep directly at the end of the boot process. This does not work with the above udev rule because it happens too early. In order to issue the command when the boot is completed, just create a systemd service and enable it:\n\n```\n/etc/systemd/system/hdparm.service\n```\n\n```\n[Unit]\nDescription=hdparm sleep\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/hdparm -q -S 120 -y /dev/sdb\n\n[Install]\nWantedBy=multi-user.target\n```\n\n"
    },
    {
      "title": "Working with unsupported hardware",
      "level": 3,
      "content": "Some drives do not support spin down via hdparm. A diagnostic error message similar to the following is a good indication this is the case:\n\n```\n# hdparm -S 240 /dev/sda\n```\n\n```\n/dev/sda:\nsetting standby to 240 (20 minutes)\nHDIO_DRIVE_CMD(setidle) failed: Invalid argument\n```\n\nFor some other drives, the hdparm command is acknowledged but the drive do not respect the parameters (either APM or spin down timer). This was observed with a Toshiba P300 (model HDWD120) HDD.\n\nSuch drives can be spun down using hd-idleAUR which ships with a systemd service. One need to edit /etc/conf.d/hd-idle and the HD_IDLE_OPTS value, then start and enable hd-idle.service.\n\nExample using a 10 min idle time for /dev/sda and a 1 min idle time for /dev/disk/by-uuid/01CF0AC9AA5EAF70:\n\n```\nHD_IDLE_OPTS=\"-i 0 -a /dev/sda -i 600 -a /dev/disk/by-uuid/01CF0AC9AA5EAF70 -i 60\"\n```\n\nthe leading -i 0 parameter indicates that hd-idle is disabled on other drives.\n\n"
    },
    {
      "title": "Power management for Western Digital Green drives",
      "level": 3,
      "content": "Western Digital Green hard drives have a special idle3 timer which controls how long the drive waits before positioning its heads in their park position and entering a low power consumption state. The factory default is aggressively set to 8 seconds, which can result in thousands of head load/unload cycles in a short period of time and eventually premature failure, not to mention the performance impact of the drive often having to wake-up before doing routine I/O. Western Digital issued a statement, claiming that Linux is not optimized for low power storage devices and advising to reduce logging frequency. There are different ways to amend the idle3 state:\n\n1. Western Digital supplies a DOS utility wdidle3.exe for download for tweaking this setting. This utility is designed to upgrade only the firmware of the following hard drives: WD1000FYPS, WD7500AYPS, WD7501AYPS but is known to be able to change the idle3 timer of other Green models as well.\n1. hdparm features a reverse-engineered implementation behind the -J flag, which is not as complete as the original official program, even though it seems to work on at least a few drives. A setting of 30 seconds is recommended for Linux use. Specify a value of zero (0) to disable the WD idle3 timer completely (not recommended):# hdparm -J 30 --please-destroy-my-drive /dev/sda See #Persistent configuration using udev rule to automatically use this parameter on supported hard drives.\n1. Another unofficial utility is provided by the idle3-tools package. A raw idle3 value is passed as a parameter of the idle3ctl command. The correspondence between this value and the timeout in seconds is provided in the bottom table within idle3ctl(8). The following command sets the timer to 30 seconds:# idle3ctl -s 129 /dev/sdc The following completely disables the timer (not recommended):# idle3ctl -d /dev/sdc\n\n```\n# hdparm -J 30 --please-destroy-my-drive /dev/sda\n```\n\n```\n# idle3ctl -s 129 /dev/sdc\n```\n\n```\n# idle3ctl -d /dev/sdc\n```\n\n- A full power cycle is required for any change to take effect regardless of which program above is used. It means the drive needs to be powered OFF and then ON, a simple reboot does not suffice.\n- Some Western Digital Green drives are also known to have a different interpretation of hdparm's standby timeout parameter, -S 1 resulting in a 10 min timer rather than 5 sec.\n- The power consumption of a Green drive is typically around 5.3W during read/write, 4.7W in idle mode and 0.7W in standby mode.\n\n"
    },
    {
      "title": "APM level reset after suspend",
      "level": 3,
      "content": "The APM level may get reset after a suspend requiring it to be re-executed after each resume. This can be automated with the following systemd unit (adapted from a forum thread):\n\n```\n/etc/systemd/system/apm.service\n```\n\n```\n[Unit]\nDescription=Local system resume actions\nAfter=suspend.target hybrid-sleep.target hibernate.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/hdparm -B 254 /dev/sda\n\n[Install]\nWantedBy=sleep.target\n```\n\nAlternatively, create a hook in /usr/lib/systemd/system-sleep.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- https://sourceforge.net/projects/hdparm/ - hdparm on SourceForge\n\n"
    }
  ]
}