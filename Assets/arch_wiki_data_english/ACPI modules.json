{
  "title": "ACPI modules",
  "url": "https://wiki.archlinux.org/title/ACPI_modules",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- acpid\n- DSDT\n\nFrom uefi.org:\n\nACPI modules are kernel modules for different ACPI parts. They enable special ACPI functions or add information to /proc or /sys. These information can be parsed by acpid for events or other monitoring applications.\n\n"
    },
    {
      "title": "Which modules are available?",
      "level": 2,
      "content": "This is a small list and summary of ACPI kernel modules:\n\n- ac (power connector status)\n- asus-laptop (useful on ASUS/medion laptops)\n- battery (battery status)\n- bay (bay status)\n- button (catch button events, like LID or POWER BUTTON)\n- container (container status)\n- dock (docking station status)\n- fan (fan status)\n- i2c_ec (EC SMBus driver)\n- thinkpad_acpi (useful on Lenovo ThinkPad laptops)\n- processor (processor status)\n- sbs (smart battery status)\n- thermal (status of thermal sensors)\n- toshiba_acpi (useful for Toshiba laptops)\n- video (status of video devices)\n\nA complete list for your running kernel can be obtained with the following command:\n\n```\n$ ls -l /usr/lib/modules/$(uname -r)/kernel/drivers/acpi\n```\n\n```\ntotal 112\n-rw-r--r-- 1 root root  2808 Aug 29 23:58 ac.ko.gz\n-rw-r--r-- 1 root root  3021 Aug 29 23:58 acpi_ipmi.ko.gz\n-rw-r--r-- 1 root root  3354 Aug 29 23:58 acpi_memhotplug.ko.gz\n-rw-r--r-- 1 root root  4628 Aug 29 23:58 acpi_pad.ko.gz\ndrwxr-xr-x 2 root root  4096 Aug 29 23:59 apei\n-rw-r--r-- 1 root root  7120 Aug 29 23:58 battery.ko.gz\n-rw-r--r-- 1 root root  3700 Aug 29 23:58 button.ko.gz\n-rw-r--r-- 1 root root  2181 Aug 29 23:58 container.ko.gz\n-rw-r--r-- 1 root root  1525 Aug 29 23:58 custom_method.ko.gz\n-rw-r--r-- 1 root root  1909 Aug 29 23:58 ec_sys.ko.gz\n-rw-r--r-- 1 root root  2001 Aug 29 23:58 fan.ko.gz\n-rw-r--r-- 1 root root  1532 Aug 29 23:58 hed.ko.gz\n-rw-r--r-- 1 root root  3241 Aug 29 23:58 pci_slot.ko.gz\n-rw-r--r-- 1 root root 17742 Aug 29 23:58 processor.ko.gz\n-rw-r--r-- 1 root root  3073 Aug 29 23:58 sbshc.ko.gz\n-rw-r--r-- 1 root root  7098 Aug 29 23:58 sbs.ko.gz\n-rw-r--r-- 1 root root  6311 Aug 29 23:58 thermal.ko.gz\n-rw-r--r-- 1 root root  8891 Aug 29 23:58 video.ko.gz\n```\n\n"
    },
    {
      "title": "How to select the correct ones",
      "level": 2,
      "content": "You have to try yourself which module works for your machine using modprobe yourmodule, then check if the module is supported on your hardware by using dmesg. It may help to add a grep text search to narrow your results:\n\n```\n# dmesg | grep -i acpi\n```\n\n```\n[    0.000000] ACPI: LAPIC (acpi_id[0x00] lapic_id[0x00] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x01] lapic_id[0x04] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x02] lapic_id[0x01] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x03] lapic_id[0x05] enabled)\n[    0.000000] ACPI: LAPIC_NMI (acpi_id[0x00] high edge lint[0x1])\n[    0.000000] ACPI: LAPIC_NMI (acpi_id[0x01] high edge lint[0x1])\n[    0.000000] ACPI: LAPIC_NMI (acpi_id[0x02] high edge lint[0x1])\n[    0.000000] ACPI: LAPIC_NMI (acpi_id[0x03] high edge lint[0x1])\n[    5.066752] ACPI: acpi_idle yielding to intel_idle\n[    5.438998] acpi device:04: registered as cooling_device4\n```\n\nYou can load the module at boot to make the change permanent for the working ones.\n\n"
    },
    {
      "title": "Getting information",
      "level": 2,
      "content": "To read out battery information, you can simply install the package acpi and run acpi -i.\n\nUsing /proc to store ACPI information has been discouraged and deprecated since Linux 2.6.24. The same data is available in /sys now, and interested parties can (should) subscribe to ACPI events from the kernel via netlink. For example, for battery:\n\n```\n/sys/class/power_supply/BAT0/\n```\n\n"
    },
    {
      "title": "DSDT fix",
      "level": 3,
      "content": "If problems with power management persist despite having loaded the proper modules, a Linux-unfriendly DSDT might be the cause.\n\n"
    },
    {
      "title": "ACPI fix for notebooks",
      "level": 3,
      "content": "Sometimes you see \"ACPI: EC: input buffer is not empty, aborting transaction\". This is a problem with ACPI, more specifically an incompatibility of the BIOS. There may be four ways to solve this issue:\n\n- If available, flash BIOS.\n- Use acpi=off as kernel parameter, however this will kill all ACPI functionality like battery charging and power saving.\n- In some cases disabling DPMS has been reported to solve the issue [2]. However, screen brightness may no longer be fully controllable: $ xset dpms force off\n- Build a custom kernel with patches of bugs.launchpad.net.\n\n```\n$ xset dpms force off\n```\n\n"
    },
    {
      "title": "Boot-looping",
      "level": 3,
      "content": "Some notebooks or motherboard may have boot issues, such as powering off during the transition from boot loader to OS due to bad ACPI firmware implementation. The following steps provide several kernel parameters, to be tested in order:\n\n1. Set acpi=off. If you are able to successfully boot: Dump the ACPI table and check for strings similar to \"Windows XXXX\". Find the most recent ones: # acpidump -b && for i in *; do echo $i:; strings -a $i | grep -i windows; done Set acpi_osi=\"Windows XXXX\".\n1. Boot looping issues may be due to unstable C-States: Disable ACPI C-State driver by using processor.max_cstate=0 If you are using Intel processors, set intel_idle.max_cstate=2 to limit C-State to C1E. Higher C-State may work, your mileage may vary. Disable MWAIT instruction and fallback to ACPI C-State driver with idle=nomwait. Verify your changes by using cpupower: $ cpupower idle-info\n\n1. Dump the ACPI table and check for strings similar to \"Windows XXXX\". Find the most recent ones: # acpidump -b && for i in *; do echo $i:; strings -a $i | grep -i windows; done\n1. Set acpi_osi=\"Windows XXXX\".\n\n```\n# acpidump -b && for i in *; do echo $i:; strings -a $i | grep -i windows; done\n```\n\n1. Disable ACPI C-State driver by using processor.max_cstate=0\n1. If you are using Intel processors, set intel_idle.max_cstate=2 to limit C-State to C1E. Higher C-State may work, your mileage may vary.\n1. Disable MWAIT instruction and fallback to ACPI C-State driver with idle=nomwait. Verify your changes by using cpupower: $ cpupower idle-info\n\n```\n$ cpupower idle-info\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:Advanced Configuration and Power Interface\n- https://unix.stackexchange.com/questions/609985/acpi-os-name-and-acpi-osi-semantics\n\n"
    }
  ]
}