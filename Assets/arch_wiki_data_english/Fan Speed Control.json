{
  "title": "Fan Speed Control",
  "url": "https://wiki.archlinux.org/title/Fan_Speed_Control",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- lm_sensors\n- Undervolting CPU\n- CPU frequency scaling\n\nFan control can bring various benefits to your system, such as quieter working system and power saving by completely stopping fans on low CPU load.\n\n"
    },
    {
      "title": "Fancontrol (lm-sensors)",
      "level": 2,
      "content": "fancontrol is a part of lm_sensors, which can be used to control the speed of CPU/case fans. It is most suitable for desktops and laptops, where fan controls are available via sysfs(5).\n\nSupport for newer motherboards may not yet be in the Linux kernel. Check the lm-sensors devices (archive) table to see if experimental drivers are available for such motherboards.\n\n"
    },
    {
      "title": "lm-sensors",
      "level": 3,
      "content": "The first thing to do is to run\n\n```\n# sensors-detect\n```\n\nThis will detect all of the sensors present and they will be used for fancontrol. After that, run the following to check if it detected the sensors correctly:\n\n```\n$ sensors\n```\n\n```\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:      +29.0°C  (high = +76.0°C, crit = +100.0°C)\n...\nit8718-isa-0290\nAdapter: ISA adapter\nVcc:         +1.14 V  (min =  +0.00 V, max =  +4.08 V)\nVTT:         +2.08 V  (min =  +0.00 V, max =  +4.08 V)\n+3.3V:       +3.33 V  (min =  +0.00 V, max =  +4.08 V)\nNB Vcore:    +0.03 V  (min =  +0.00 V, max =  +4.08 V)\nVDRAM:       +2.13 V  (min =  +0.00 V, max =  +4.08 V)\nfan1:        690 RPM  (min =   10 RPM)\ntemp1:       +37.5°C  (low  = +129.5°C, high = +129.5°C)  sensor = thermistor\ntemp2:       +25.0°C  (low  = +127.0°C, high = +127.0°C)  sensor = thermal diode\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 3,
      "content": "Once the sensors are properly configured, use pwmconfig(8) to test and configure fan speed control. Following the guide should create /etc/fancontrol, a customized configuration file. In the guide, the default answers are in parenthesis if you press enter without typing anything. Enter y for yes, n for no.\n\n```\n# pwmconfig\n```\n\n"
    },
    {
      "title": "Tweaking",
      "level": 4,
      "content": "Some users may want to manually tweak the configuration file after running pwmconfig with root privileges, usually to fix something. For manually tweaking the /etc/fancontrol configuration file, see fancontrol(8) for the variable definitions.\n\nUsers will probably encounter the hwmon path issues as noted above in #Fancontrol (lm-sensors). See #Device paths have changed in /etc/fancontrol for more information.\n\n"
    },
    {
      "title": "Running Fancontrol",
      "level": 3,
      "content": "Try to run fancontrol:\n\n```\n# fancontrol\n```\n\nA properly configured setup will not output errors and will take control of the system fans. Users should hear system fans starting shortly after executing this command. fancontrol can also be run by starting/enabling fancontrol.service.\n\nFor an unofficial GUI, install fancontrol-guiAUR or fancontrol-kcmAUR[broken link: package not found].\n\n"
    },
    {
      "title": "Fancontrol stops working after suspend–wake cycles",
      "level": 3,
      "content": "Unfortunately, fancontrol does not work after suspending. As per the filed bug, you will have to restart fancontrol after suspending. This can be achieved automatically by a systemd hook.\n\n"
    },
    {
      "title": "NBFC",
      "level": 2,
      "content": "NBFC (NoteBook Fan Control) is a cross-platform fan control solution for notebooks, written in C# and works under Mono runtime. It comes with a powerful configuration system, which allows to adjust it to many different notebook models, including some of the latest ones.\n\nThere is another lightweight implementation of NBFC, written in C, named NBFC-Linux. It does not depend on the Mono framework. It can be installed as nbfc-linuxAUR or nbfc-linux-gitAUR.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "NBFC can be installed as nbfcAUR or nbfc-gitAUR. Also start/enable nbfc.service.\n\n"
    },
    {
      "title": "Configuration",
      "level": 3,
      "content": "NBFC comes with pre-made profiles. You can find them in /opt/nbfc/Configs/ directory. When applying them, use the exact profile name without a file extension (e.g. some profile.xml becomes \"some profile\").\n\nCheck if there is anything NBFC can recommend:\n\n```\n$ nbfc config -r\n```\n\nIf there is at least one model, try to apply this profile and see how fan speeds are being handled. For example:\n\n```\n$ nbfc config -a \"Asus Zenbook UX430UA\"\n```\n\nNote: If above solution did not help, try appending ec_sys.write_support=1 to kernel parameters.\n\n```\n# mv /opt/nbfc/Plugins/StagWare.Plugins.ECSysLinux.dll /opt/nbfc/Plugins/StagWare.Plugins.ECSysLinux.dll.old\n```\n\nIf above solution did not help, try appending ec_sys.write_support=1 to kernel parameters.\n\nIf there are no recommended models, go to NBFC git repository or /opt/nbfc/Configs/ and check if there are any similar models available from the same manufacturer. For example, on Asus Zenbook UX430UQ, the configuration Asus Zenbook UX430UA did not work well (fans completelly stopped all the time), but Asus Zenbook UX410UQ worked fantastically.\n\nRun nbfc to see all options. More information about configuration is available at upstream wiki.\n\n"
    },
    {
      "title": "Dell laptops",
      "level": 2,
      "content": "i8kutils is a daemon to configure fan speed according to CPU temperatures on some Dell Inspiron and Latitude laptops. It uses the /proc/i8k interface provided by the i8k driver (an alias for dell_smm_hwmon). Results will vary depending on the exact model of laptop.\n\nIf fancontrol will not work on your system, use the ignore_dmi=1 kernel module parameter to load dell_smm_hwmon.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "i8kutilsAUR is the main package to control fan speed. Additionally, you might want to install these:\n\n- acpi — must be installed to use i8kmon.\n- tcl — must be installed in order to run i8kmon as a background service (using the --daemon option).\n- tk — must be installed together with tcl to run as X11 desktop applet.\n- dell-bios-fan-control-gitAUR — recommended if your BIOS overrides fan control.\n\n"
    },
    {
      "title": "Configuration",
      "level": 3,
      "content": "The temperature points at which the fan changes speed can be adjusted in the configuration file /etc/i8kutils/i8kmon.conf. Only three fans speeds are supported (high, low, and off). Look for a section similar to the following:\n\n```\nset config(0)  {{0 0}  -1  55  -1  55}\nset config(1)  {{1 1}  45  75  45  75}\nset config(2)  {{2 2}  65 128  65 128}\n```\n\nThis example starts the fan at low speed when the CPU temperature reaches 55 °C, switching to high speed at 75 °C. The fan will switch back to low speed once the temperature drops to 65 °C, and turns off completely at 45 °C.\n\n"
    },
    {
      "title": "Installation as a service",
      "level": 3,
      "content": "i8kmon can be started automatically by starting/enabling i8kmon.service.\n\n"
    },
    {
      "title": "BIOS overriding fan control",
      "level": 3,
      "content": "Some newer laptops have BIOS fan control in place which will override the OS level fan control. To test if this the case, run i8kmon with verbose mode in a command line, make sure the CPU is idle, then see if the fan is turned off or turned down accordingly.\n\nIf the BIOS fan control is in place, you can try using dell-bios-fan-control-gitAUR:\n\nTo enable BIOS fan control:\n\n```\n# dell-bios-fan-control 1\n```\n\nTo disable BIOS fan control:\n\n```\n# dell-bios-fan-control 0\n```\n\nBIOS fan control can be automatically disabled by starting/enabling dell-bios-fan-control.service.\n\n"
    },
    {
      "title": "ThinkPad laptops",
      "level": 2,
      "content": "Some fan control daemons include simpfand-gitAUR and thinkfanAUR (recommended).\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "Install thinkfanAUR or thinkfan-gitAUR. Optionally, but recommended, install lm_sensors. If needed, a GUI is available with thinkfan-uiAUR. Then have a look at the files:\n\n```\n# pacman -Ql thinkfan\n```\n\nNote that the thinkfan package installs /usr/lib/modprobe.d/thinkpad_acpi.conf, which contains the following kernel module parameter:\n\n```\noptions thinkpad_acpi fan_control=1\n```\n\nSo fan control is enabled by default.\n\nNow, load the module:\n\n```\n# modprobe thinkpad_acpi\n# cat /proc/acpi/ibm/fan\n```\n\nYou should see that the fan level is \"auto\" by default, but you can echo a level command to the same file to control the fan speed manually:\n\n```\n# echo level 1 > /proc/acpi/ibm/fan\n```\n\nTable content:\nLevel | Effect\n0 | off\n2 | low speed\n4 | medium speed\n7 | maximum speed\nauto | default - automatic, the fan RPM is controlled by the BIOS\nfull-speed / disengaged | the maximum fan speed; here the controller does not monitor the fan speed\n\nThe thinkfan daemon will do this automatically.\n\n\"7\" is not the same as \"disengaged\". \"7\" is the maximum regulated speed (corresponds to \"full-speed\"). disengaged is the maximum unregulated speed. See ThinkWiki for more details.\n\nFinally, enable the thinkfan.service.\n\nTo configure the temperature thresholds, you will need to copy the example configuration file (/usr/share/doc/thinkfan/examples/thinkfan.yaml) to /etc/thinkfan.conf, and modify to taste. This file specifies which sensors to read, and which interface to use to control the fan. Some systems have /proc/acpi/ibm/fan and /proc/acpi/ibm/thermal available; on others, you will need to specify something like:\n\n```\nhwmon: /sys/devices/virtual/thermal/thermal_zone0/temp\n```\n\nto use generic hwmon sensors instead of thinkpad-specific ones.\n\nA configuration example can be found in Gentoo:Fan speed control/thinkfan#Configuration.\n\n"
    },
    {
      "title": "Running",
      "level": 3,
      "content": "You can test your configuration first by running thinkfan manually (as root):\n\n```\n# thinkfan -n\n```\n\nand see how it reacts to the load level of whatever other programs you have running.\n\nWhen you have it configured correctly, start/enable thinkfan.service.\n\n"
    },
    {
      "title": "Lenovo Legions laptops",
      "level": 2,
      "content": "The tool Lenovo Legion Linux allows to change the fan curves that are stored in the embedded controller. It consists of a kernel module that must be compiled and loaded. Currently, there is no package, but it must be compiled and installed from source.\n\nThen the fan curve can be set via the hwmon interface. This can be done with the provided script or the Python GUI.\n\n"
    },
    {
      "title": "ASUS laptops",
      "level": 2,
      "content": "This topic will cover drivers configuration on ASUS laptops for Fancontrol (lm-sensors).\n\n"
    },
    {
      "title": "Kernel modules",
      "level": 3,
      "content": "In configuration files, we are going to use full paths to sysfs files (e.g. /sys/devices/platform/asus-nb-wmi/hwmon/hwmon[[:print:]]*/pwm1). This is because hwmon1 might change to any other number after reboot. Fancontrol (lm-sensors) is written in Bash, so using these paths in configuration file is completely acceptable. You can find complete /etc/fancontrol configuration file examples at ASUS N550JV#Fan control.\n\n"
    },
    {
      "title": "asus-nb-wmi",
      "level": 4,
      "content": "asus-nb-wmi is a kernel module, which is included in the Linux kernel and is loaded automatically on ASUS laptops. It will only allow to control a single fan and if there is a second fan you will not have any controls over it. Note that blacklisting this module will prevent keyboard backlight to work.\n\nBelow are the commands to control it. Check if you have any controls over your fan:\n\n```\n# echo 255 > /sys/devices/platform/asus-nb-wmi/hwmon/hwmon[[:print:]]*/pwm1           # Full fan speed (Value: 255)\n# echo 0 > /sys/devices/platform/asus-nb-wmi/hwmon/hwmon[[:print:]]*/pwm1             # Fan is stopped (Value: 0)\n# echo 2 > /sys/devices/platform/asus-nb-wmi/hwmon/hwmon[[:print:]]*/pwm1_enable      # Change fan mode to automatic\n# echo 1 > /sys/devices/platform/asus-nb-wmi/hwmon/hwmon[[:print:]]*/pwm1_enable      # Change fan mode to manual\n# echo 0 > /sys/devices/platform/asus-nb-wmi/hwmon/hwmon[[:print:]]*/pwm1_enable      # Change fan mode to full speed\n```\n\nIf you were able to modify fan speed with above commands, then continue with #Generate configuration file with pwmconfig.\n\n"
    },
    {
      "title": "asus_fan",
      "level": 4,
      "content": "asus_fan is a kernel module, which allows to control both fans on some older ASUS laptops. It does not work with the most recent models.\n\nInstall the DKMS asus-fan-dkms-gitAUR kernel module, providing asus_fan:\n\n```\n# modprobe asus_fan\n```\n\nCheck if you have any control over both fans:\n\n```\n# echo 255 > /sys/devices/platform/asus_fan/hwmon/hwmon[[:print:]]*/pwm1          # Full CPU fan speed (Value: 255)\n# echo 0 > /sys/devices/platform/asus_fan/hwmon/hwmon[[:print:]]*/pwm1            # CPU fan is stopped (Value: 0)\n# echo 255 > /sys/devices/platform/asus_fan/hwmon/hwmon[[:print:]]*/pwm2          # Full GFX fan speed (Value: 255)\n# echo 0 > /sys/devices/platform/asus_fan/hwmon/hwmon[[:print:]]*/pwm2            # GFX fan is stopped (Value: 0)\n# echo 2 > /sys/devices/platform/asus_fan/hwmon/hwmon[[:print:]]*/pwm1_enable     # Change CPU fan mode to automatic\n# echo 1 > /sys/devices/platform/asus_fan/hwmon/hwmon[[:print:]]*/pwm1_enable     # Change CPU fan mode to manual\n# echo 2 > /sys/devices/platform/asus_fan/hwmon/hwmon[[:print:]]*/pwm2_enable     # Change GFX fan mode to automatic\n# echo 1 > /sys/devices/platform/asus_fan/hwmon/hwmon[[:print:]]*/pwm2_enable     # Change GFX fan mode to manual\n# cat /sys/devices/platform/asus_fan/hwmon/hwmon[[:print:]]*/temp1_input          # Display GFX temperature (will always be 0 when GFX is disabled/unused)\n```\n\nIf everything works, you can load the module at boot to automate this step.\n\n"
    },
    {
      "title": "Generate configuration file with pwmconfig",
      "level": 3,
      "content": "If you get an error There are no working fan sensors, all readings are 0 while generating configuration file with pwmconfig, open first console and execute:\n\n```\n# watch -n 1 \"echo 2 > /sys/devices/platform/kernel_module/hwmon/hwmon[[:print:]]*/pwm1_enable\"\n```\n\nIf you use asus_fan kernel module and have 2nd fan, in second console:\n\n```\n# watch -n 1 \"echo 2 > /sys/devices/platform/kernel_module/hwmon/hwmon[[:print:]]*/pwm2_enable\"\n```\n\nAnd finally, in the third console:\n\n```\n# pwmconfig\n```\n\nOnce you are done and the configuration file is generated, you should stop the first and second consoles. Continue with #Fancontrol (lm-sensors). After the configuration file is generated, you might need to manually replace PWM values with full sysfs paths as they are used in these steps, because hwmon number values might change after reboot.\n\n"
    },
    {
      "title": "Alternative method using EC registers",
      "level": 3,
      "content": "If the above methods do not work for you, an alternative method is to directly write to certain registers in the embedded controller (EC). Using the EC-Probe tool, you can set the fan mode to one of the three fan speed modes, provided your model offers such feature in Windows.\n\nIn ASUS FX504GD model setting the fan speed to one of the three modes uses these register values:\n\n```\n# ec_probe write 0x5e 0x80 # silent mode\n# ec_probe write 0x5e 0x40 # balance mode\n# ec_probe write 0x5e 0xC0 # performance mode\n```\n\nHere we write to register 0x5e that is responsible in setting the fan speed mode.\n\nIf these values do not work for you, run the ec-probe tool in monitor mode in Windows and try to identify which register in the EC changes value when switching through fan speed modes.\n\n"
    },
    {
      "title": "Setting thermal throttle policy",
      "level": 3,
      "content": "Instead of manually controlling fan speed using asus-nb-wmi, it is also possible to set the thermal throttling policy to have a more or less aggressive fan control policy. Possible values are 0 (default), 1 (overboost), and 2 (silent).\n\n```\n# echo number > /sys/devices/platform/asus-nb-wmi/hwmon/hwmon[[:print:]]*/throttle_thermal_policy\n```\n\n"
    },
    {
      "title": "Fan control modes on certain TUF series laptops",
      "level": 3,
      "content": "On certain ASUS TUF series laptops, performance and fan control modes can be changed using Fn+F5. The current mode can be viewed by running the following command:\n\n```\n$ cat /sys/devices/platform/asus-nb-wmi/fan_boost_mode\n```\n\nYou can view the value changing as you use press Fn+F5. 0 is \"Normal Mode\", 1 is \"Performance Mode\", 2 is most likely \"Silent Mode\".[3] It is also possible to write these values into the fan_boost_mode file as root and have the desired effect.\n\nThis was tested on the ASUS TUF FX504GE and ASUS TUF FX504GD models and found to be working.\n\nYou can use tuf-fan-boost-notification-gitAUR to get notifications every time the FanSpeed mode gets changed.\n\n"
    },
    {
      "title": "AMDGPU sysfs fan control",
      "level": 2,
      "content": "AMDGPU kernel driver offers fan control for graphics cards via hwmon in sysfs.\n\n"
    },
    {
      "title": "Manual fan control",
      "level": 3,
      "content": "To switch to manual fan control from automatic, run\n\n```\n# echo \"1\" > /sys/class/drm/card0/device/hwmon/hwmon0/pwm1_enable\n```\n\nSet up fan speed to e.g. 50% (100% are 255 PWM cycles, thus calculate desired fan speed percentage by multiplying its value by 2.55):\n\n```\n# echo \"128\" > /sys/class/drm/card0/device/hwmon/hwmon0/pwm1\n```\n\nTo reset to automatic fan control, run\n\n```\n# echo \"2\" > /sys/class/drm/card0/device/hwmon/hwmon0/pwm1_enable\n```\n\n"
    },
    {
      "title": "Fan curves control",
      "level": 3,
      "content": "Newer AMD graphical cards such as RDNA3 graphical cards do not support manual fan control due to firmware limitations [4]. For these cases AMD provides a fan_curve sysfs api for controlling the fan curves, for more information on it see [5].\n\n"
    },
    {
      "title": "amdgpu-fan",
      "level": 3,
      "content": "The amdgpu-fanAUR package is an automated fan controller for AMDGPU-enabled video cards written in Python. It uses a \"speed-matrix\" to match the frequency of the fans with the temperature of the GPU, for example:\n\n```\nspeed_matrix:  # -[temp(*C), speed(0-100%)]\n- [0, 0]\n- [40, 30]\n- [60, 50]\n- [80, 100]\n```\n\nLaunch the fan control service by starting/enabling amdgpu-fan.service.\n\n"
    },
    {
      "title": "amdfand-bin",
      "level": 3,
      "content": "Then amdfand-binAUR package is a native alternative to amdgpu-fanAUR. Launch the fan control service by starting/enabling amdfand.service.\n\nFor this tool there are also GUI clients available: amdguid-glow-binAUR (Xorg) and amdguid-wayland-binAUR (Wayland). Before starting the client you need to enable/start amdgui-helper.service.\n\n"
    },
    {
      "title": "fancurve script",
      "level": 3,
      "content": "Not just fan controls are offered via hwmon in sysfs, but also GPU temperature reading:\n\n```\n# cat /sys/class/drm/card0/device/hwmon/hwmon0/temp1_input\n```\n\nThis outputs GPU temperature in °C + three zeroes, e.g. 33000 for 33°C.\n\nThe bash script amdgpu-fancontrol by grmat offers a fully automatic fan control by using the described sysfs hwmon functionality. It also allows to comfortably adjust the fancurve's temperature/PWM cycles assignments and a hysteresis by offering abstracted configuration fields at the top of the script.\n\nFor safety reasons, the script sets fan control again to auto when shutting down. This may cause spinning up of fans, which can be worked around at cost of security by setting set_fanmode 1 in the section function reset_on_fail.\n\n"
    },
    {
      "title": "Setting up fancurve script",
      "level": 4,
      "content": "To start the script, it is recommend to do so via systemd init system. This way the script's verbose output can be read via journalctl/systemctl status. For this purpose, a .service unit file is already included in the GitHub repository.\n\nIt may also be required to restart the script via a root-resume.service after hibernation in order to make it automatically function properly again:\n\n```\n/etc/systemd/system/root-resume.service\n```\n\n```\n[Unit]\nDescription=Local system resume actions\nAfter=suspend.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/systemctl restart amdgpu-fancontrol.service\n\n[Install]\nWantedBy=suspend.target\n```\n\n"
    },
    {
      "title": "Others",
      "level": 2,
      "content": "- fan2go-gitAUR — An alternative to Fancontrol independent of device-paths.\n- MControlCenter — Fan control application for MSI laptops.\n- fw-ectool-gitAUR — Fan configuration for Framework Laptops.\n- CoolerControlAUR — A fan control daemon with GUI for sysfs and liquidctl devices.\n- controlfans-gitAUR — Simple GUI written in Qt to configure FAN PWM via HWMON interface. You could use it to setup the kernel auto point for every FAN who support it.\n\n"
    },
    {
      "title": "Increase the fan divisor for sensors",
      "level": 3,
      "content": "If sensors does not output the CPU fan RPM, it may be necessary to change the fan divisor.\n\nThe first line of the sensors output is the chipset used by the motherboard for readings of temperatures and voltages.\n\nCreate a file in /etc/sensors.d/:\n\n```\n/etc/sensors.d/fan-speed-control.conf\n```\n\n```\nchip \"coretemp-isa-*\"\nset fanX_div 4\n```\n\nReplacing coretemp-isa- with name of the chipset and X with the number of the CPU fan to change.\n\nSave the file, and run as root:\n\n```\n# sensors -s\n```\n\nwhich will reload the configuration files.\n\nRun sensors again, and check if there is an RPM readout. If not, increase the divisor to 8, 16, or 32. Your mileage may vary.\n\n"
    },
    {
      "title": "Device paths have changed in /etc/fancontrol",
      "level": 3,
      "content": "The enumerated hwmon symlinks located in /sys/class/hwmon/ might vary in order because the kernel modules do not load in a consistent order per boot. Because of this, it may cause fancontrol to not function correctly. The error is \"Configuration appears to be outdated, please run pwmconfig again\". Upstream bug.\n\n"
    },
    {
      "title": "Solution",
      "level": 4,
      "content": "In /etc/conf.d/lm_sensors, there are 2 arrays that list all of the modules detected when you execute sensors-detect. These get loaded in by fancontrol. If the file does not exist, run sensors-detect as root, accepting the defaults. Open (or create) /etc/modules-load.d/modules.conf. Get all of the modules listed from the 2 variables in /etc/conf.d/lm_sensors and place them into the /etc/modules-load.d/modules.conf file, one module per line. Specifying them like this should make a defined order for the modules to load in, which should make the hwmon paths stay where they are and not change orders for every boot. If this does not work, I highly recommend finding another program to control your fans. If you cannot find any, then you could try using the alternative solution below.\n\n"
    },
    {
      "title": "Alternative solution: absolute paths",
      "level": 4,
      "content": "Using absolute file paths in fancontrol does not work by default, as its helper script pwmconfig is programmed to only use the hwmon paths to get the files. The way it does this is that it detects whether the hwmon path that is provided in its configuration file /etc/fancontrol did not change, and uses the variables DEVNAME and DEVPATH to determine such change. If your hwmon paths keep changing, this will prevent fancontrol from running no matter what you do. However, one can circumvent this problem. Open /usr/bin/fancontrol, and comment out this part of the script:\n\n```\nif ! ValidateDevices \"$DEVPATH\" \"$DEVNAME\"\n then\n     echo \"Configuration appears to be outdated, please run pwmconfig again\" >&2\n     exit 1\n fi\n```\n\n- Doing this may make fancontrol write into files you gave it in the configuration file, no matter what the file is. This can corrupt files if you provide the wrong path. Be sure that you are using the correct path for your files.\n- Another thing to note is that while doing this workaround, using pwmconfig to create your script again will overwrite all of your absolute paths that you have configured. Therefore, it is better to manually change the old paths to the new paths if it is needed instead of using pwmconfig.\n\nCommenting this out should effectively ignore the hwmon validation checks. You can also ignore the variables DEVNAME and DEVPATH in the configuration file as well. After this, replace all of the hwmon paths in the other variables with its absolute path. To make it easier, rerun pwmconfig with root privileges to refresh the hwmon devices. The hwmon paths in the configuration file should now point to the correct absolute paths. For each hwmon path, run the following command (where N is the enumeration of the hwmon path):\n\n```\n$ readlink -f /sys/class/hwmon/hwmonN/device\n```\n\nThis will give you the absolute path of the device.\n\nFor example, an /etc/fancontrol file lists FCTEMPS as this:\n\n```\nFCTEMPS=hwmon2/pwm1=hwmon3/temp1_input\n```\n\nExecuting readlink -f /sys/class/hwmon/hwmon3/device can, for example, output /sys/devices/platform/coretemp.0/. cd into this directory. If you see a /hwmon/hwmonN/ directory, you have to do this in your fancontrol configuration file to replace the hwmonN path. From the previous example:\n\n```\n# BEFORE\nFCTEMPS=hwmon2/pwm1=hwmon3/temp1_input\n# AFTER\nFCTEMPS=hwmon2/pwm1=/sys/devices/platform/coretemp.0/hwmon/[[:print:]]*/temp1_input\n```\n\nEssentially, you must replace the hwmon path with the absolute path, concatenated with /hwmon/[[:print:]]*/ so that bash can catch the random enumerated hwmon name.\n\nIf you do not see the /hwmon/hwmonN/ directory, then you do not have to worry about this. This means that the temperature files are in the root of the device directory. Just replace hwmonN/ with the absolute file path. For example:\n\n```\n# BEFORE\nFCTEMPS=hwmon2/pwm1=hwmon3/temp1_input\n# AFTER\nFCTEMPS=hwmon2/pwm1=/sys/devices/platform/coretemp.0/temp1_input\n```\n\nAfter replacing all of paths, fancontrol should work fine.\n\n"
    }
  ]
}