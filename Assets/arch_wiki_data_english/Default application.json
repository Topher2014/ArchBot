{
  "title": "Default application",
  "url": "https://wiki.archlinux.org/title/Default_application",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nPrograms implement default application associations in different ways. While command-line programs traditionally use environment variables, graphical applications tend to use XDG MIME Applications through either the GIO API, the Qt API, or by executing /usr/bin/xdg-open, which is part of xdg-utils. Because xdg-open and XDG MIME Applications are quite complex, various alternative resource openers were developed. The following table lists example applications for each method.\n\nTable content:\nMethod | Uses XDG | Application examples | Checking association\nGIO's GAppInfo | Yes | Firefox, GNOME Files, PCManFM, Thunar, Thunderbird, Telegram | gio mime mimetype\n/usr/bin/xdg-open | By default | Chromium (Open downloaded file) | xdg-mime query default mimetype\nCustom | Usually not | mc, ranger | –\nEnvironment variables | No | man, sudoedit, systemctl | –\nD-Bus's FileManager1 | org.freedesktop.FileManager1 | Firefox (Open containing folder), Zotero (Show file), Telegram (Show in folder) | –\n\nMany desktop environments and graphical file managers provide a GUI for configuring default applications.\n\n"
    },
    {
      "title": "Background information",
      "level": 2,
      "content": "Programs sometimes need to open a file or a URI in the user's preferred application. To open a file in the user's preferred application the filetype needs to be detected (usually using filename extensions or magic numbers mapped to MIME types) and there needs to be an application associated with the filetype.\n\nHeirloom UNIX programs used mime.types for MIME type detection and mailcap for application association.\n\n"
    },
    {
      "title": "Resource openers",
      "level": 2,
      "content": "- XDG MIME Apps: implements the XDG MIME Applications specification\n- RegEx rules: allows MIME types to be associated with applications using regular expressions\n- URI support: allows arbitrary URI schemes to be associated with applications\n\nTable content:\nName | Package | XDG MIME Apps | RegEx rules | URI support\nxdg-open | xdg-utils | Yes | No | Yes\ngio(1) | glib2 | Yes | – | Yes\nmimeopen(1p) | perl-file-mimeinfo | Yes | No | No\nmimeo | mimeoAUR | Yes | Yes | Yes\nmimi | mimiAUR, mimi-gitAUR | No | No | partly\nbusking | busking-gitAUR | No | Yes | Yes\nrifle(1) | ranger | No | Yes | No\nhandlr | handlr-regex | Yes | Yes | Yes\nclifm | clifmAUR | No | Yes | partly\nmimejs-git | mimejs-gitAUR | No | No | Yes\n\n"
    },
    {
      "title": "xdg-open",
      "level": 3,
      "content": "xdg-open (part of xdg-utils) implements XDG MIME Applications and is used by many programs.\n\nBecause of the complexity of the xdg-utils version of xdg-open, it can be difficult to debug when the wrong default application is being opened. Because of this, there are many alternatives that attempt to improve upon it. Several of these alternatives replace the /usr/bin/xdg-open executable, thus changing the default application behavior of most applications. Others simply provide an alternative method of choosing default applications.\n\n"
    },
    {
      "title": "perl-file-mimeinfo",
      "level": 3,
      "content": "perl-file-mimeinfo provides the tools mimeopen(1p) and mimetype(1p). These have a slightly nicer interface than their xdg-utils equivalents:\n\n```\n# determine a file's MIME type\n$ mimetype photo.jpeg\nphoto.jpeg: image/jpeg\n\n# choose the default application for this file\n$ mimeopen -d photo.jpeg\nPlease choose an application\n\n    1) Feh (feh)\n    2) GNU Image Manipulation Program (gimp)\n    3) Pinta (pinta)\n\nuse application #\n\n# open a file with its default application\n$ mimeopen -n photo.jpeg\n```\n\nMost importantly, xdg-utils programs will actually call file instead of mimetype for MIME type detection if it does not detect your desktop environment. This is important because file does not follow the XDG standard.\n\n"
    },
    {
      "title": "mimeo",
      "level": 3,
      "content": "mimeoAUR provides the tool mimeo, which unifies the functionality of xdg-open and xdg-mime.\n\nIn the following example we see how to associate SVG files with Inkscape:\n\n```\n# determine a file's MIME type\n$ mimeo --mimetype Svg_example2.svg\nSvg_example2.svg\n image/svg+xml\n\n# determine desktop file associated with executable \"inkscape\"\n$ mimeo --app2desk inkscape\ninkscape\n org.inkscape.Inkscape.desktop\n \n# find desktop file path\n$ mimeo --finddesk org.inkscape.Inkscape.desktop\n/usr/share/applications/org.inkscape.Inkscape.desktop\n\n# choose the default application for this MIME type\n$ mimeo --prefer image/svg+xml org.inkscape.Inkscape.desktop\n\n# check association\n$ mimeo --mime2desk image/svg+xml\nimage/svg+xml\n org.inkscape.Inkscape.desktop\n \n# open a file with its default application\n$ mimeo Svg_example2.svg\n```\n\nOne can also find the path to the mimeapps.list file:\n\n```\n$ mimeo --mimeapps-list\n/home/user/.config/mimeapps.list\n```\n\nHowever a big difference with xdg-utils is that mimeo also supports custom \"association files\" that allow for more complex associations. For example, passing specific command line arguments based on a regular expression match:\n\n```\n# open youtube links in VLC without opening a new instance\nvlc --one-instance --playlist-enqueue %U\n  ^https?://(www.)?youtube.com/watch\\?.*v=\n```\n\nxdg-utils-mimeoAUR patches xdg-utils so that xdg-open falls back to mimeo if no desktop environment is detected.\n\n"
    },
    {
      "title": "handlr",
      "level": 3,
      "content": "handlr-regex, written in Rust, provides the functionality of xdg-open and xdg-mime with a streamlined interface. handlr-regex is a fork of handlrAUR with regex support.\n\nCompared to xdg-utils, it includes:\n\n- setting associations by extension, removing the need to look up or remember mime types\n- validation for mime types and extensions\n- removal of invalid entries from mimeapps.list\n- intelligent detection of mime types from file content in case filename is ambiguous\n- autocompletion of mimes, extensions, and desktop entries\n- setting arbitrary commands as handlers based on regular expressions\n\n```\n# The following two are identical\nhandlr set .png feh.desktop\nhandlr set image/png feh.desktop\n\n# List default apps\nhandlr list\n\n# Get the handler for a mime/extension\n$ handlr get .png --json\n{\"handler\":\"pqiv.desktop\",\"name\":\"pqiv\",\"cmd\":\"/usr/bin/pqiv\"}\n\n# Launch a handler with optional path/URL\nhandlr launch x-scheme-handler/https\nhandlr launch x-scheme-handler/https -- https://google.ca\n```\n\nTo use handlr as a replacement for xdg-open, shadow it with following script:\n\n```\n#!/usr/bin/bash\nhandlr open \"$@\"\n```\n\n"
    },
    {
      "title": "clifm",
      "level": 3,
      "content": "Lira, clifm's built-in resource opener, can be used as a standalone resource opener via the --open command line option. The configuration file (~/.config/clifm/profiles/PROFILE_NAME/mimelist.clifm) supports regular expressions for both MIME types and file names (or file extensions). A few examples:\n\n```\n# Open a regular file\nclifm --open /etc/hosts\n\n# Open a directory\nclifm --open /media/data\n\n# Open an URL (via the application associated to the text/http MIME type in the configuration file)\nclifm --open www.archlinux.org\n```\n\n"
    },
    {
      "title": "Minimalist replacements",
      "level": 3,
      "content": "The following packages conflict with and provide xdg-utils because they provide their own /usr/bin/xdg-open script.\n\nIf you want to use one of these resource openers while still being able to use xdg-utils, install them manually in a PATH directory before /usr/bin.\n\n- mimiAUR, mimi-gitAUR - 130-line Bash script, can change command arguments for each MIME type\n- busking-gitAUR - 80-line Perl script similar to mimi but also supports regex rules\n\n"
    }
  ]
}