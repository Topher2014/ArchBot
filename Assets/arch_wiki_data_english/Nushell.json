{
  "title": "Nushell",
  "url": "https://wiki.archlinux.org/title/Nushell",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "nushell is a new type of shell. It has native support for structured and typed data, such as arrays, tables, records, numeric/boolean types, etc., and offers syntax and built-ins that make it easy to query, filter, sort, transform, convert, and otherwise manipulate various data types in a shell-like workflow, and supports taking input and producing output in many builtin or user-defined formats.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the nushell package. You can then start nushell by running:\n\n```\n$ nu\n```\n\n"
    },
    {
      "title": "Structured data support",
      "level": 3,
      "content": "Built-ins in nushell understand and output complex data types. For example, the ls builtin outputs an array of items representing files, which have attributes like name, size, type (file, dir, symlink, etc.), modified, etc.\n\nIn addition, many built-ins are offered for querying and manipulating data, as data - not as text like in traditional shell, while still having a shell-like workflow. For example, the where builtin can filter the contents of an array or table:\n\n```\n$ ls | where type == file | where size > 10mb\n```\n\nSince it filters data received via its \"stdin\" and produces it via its \"stdout\", multiple filters can be chained like above. Another example:\n\n```\n$ ls | where type == file | get size | sum\n```\n\nThe get builtin can be used access an attribute from an object. In this example, we are feeding it an array of objects via stdin, so it fetches the size property of each element in the array, which produces an array of numeric values. Finally, we feed that array to sum which calculates their sum.\n\n"
    },
    {
      "title": "Output",
      "level": 3,
      "content": "nushell has extremely versatile output features. Right out of the box, it boasts a modern look with colors, ASCII art, and detailed error messages.\n\n"
    },
    {
      "title": "Output as text",
      "level": 4,
      "content": "By default, the output of commands like ls (which as we said produces an array of structured objects) is displayed as a colorized ASCII table with enumerated rows, where each file is a row and each attribute is a column. Example:\n\n```\n/usr/lib> ls | where name =~ \".*(alsa|pulse|pipewire).*\" | first 10\n╭───┬────────────────────────────┬─────────┬──────────┬──────────────╮\n│ # │            name            │  type   │   size   │   modified   │\n├───┼────────────────────────────┼─────────┼──────────┼──────────────┤\n│ 0 │ alsa-lib                   │ dir     │   4.1 KB │ 2 days ago   │\n│ 1 │ alsa-topology              │ dir     │   4.1 KB │ 3 months ago │\n│ 2 │ libdrumstick-alsa.so       │ symlink │     22 B │ 7 months ago │\n│ 3 │ libdrumstick-alsa.so.2     │ symlink │     26 B │ 7 months ago │\n│ 4 │ libdrumstick-alsa.so.2.7.2 │ file    │ 335.3 KB │ 7 months ago │\n│ 5 │ libgvncpulse-1.0.so        │ symlink │     21 B │ 9 months ago │\n│ 6 │ libgvncpulse-1.0.so.0      │ symlink │     25 B │ 9 months ago │\n│ 7 │ libgvncpulse-1.0.so.0.0.1  │ file    │  14.1 KB │ 9 months ago │\n│ 8 │ libpipewire-0.3.so         │ symlink │     20 B │ 2 weeks ago  │\n│ 9 │ libpipewire-0.3.so.0       │ symlink │     26 B │ 2 weeks ago  │\n╰───┴────────────────────────────┴─────────┴──────────┴──────────────╯\n```\n\n"
    },
    {
      "title": "Output in data formats",
      "level": 4,
      "content": "Data can also be output in any various data formats, including JSON, YAML, TOML, HTML, XML, SQL, CSV, Markdown tables, and others. The user can also define their own custom viewers to support arbitrary data types.\n\nTo output data in a given format, simply pipe the data to to FORMAT:\n\n```\n/usr/lib> ls | where name =~ \".*alsa.*\" | first 3 | to yaml\n- name: alsa-lib\n  type: dir\n  size: 4096\n  modified: 2023-05-03 16:04:35.544273606\n- name: alsa-topology\n  type: dir\n  size: 4096\n  modified: 2023-01-13 19:29:45.179245376\n- name: libdrumstick-alsa.so\n  type: symlink\n  size: 22\n  modified: 2022-10-02 13:28:57\n```\n\nTo save the output of a command in a file, pipe it to the save builtin:\n\n```\n> ls | to json | save my-file.json\n```\n\nIf the output file already exists, save will refuse to overwrite it. You can force overwriting files using the -f switch.\n\nNote that nushell defaults to producing pretty-printed JSON. To output JSON without pretty-printing, use to json --raw.\n\nSee to --help for a list of supported formats.\n\n"
    },
    {
      "title": "Error output",
      "level": 4,
      "content": "nushell prints colorized and detailed error messages that pinpoint the exact source of the error and suggest solutions. Example error message:\n\n```\n> ls -a --never-gonna-give-you-up /tmp\nError: nu::parser::unknown_flag\n\n × The `ls` command doesn't have flag `never-gonna-give-you-up`.\n   ╭─[entry #24:1:1]\n 1 │ ls -a --never-gonna-give-you-up /tmp\n   ·       ────────────┬────────────\n   ·                   ╰── unknown flag\n   ╰────\n  help: Available flags: --help(-h), --all(-a), --long(-l),\n        --short-names(-s), --full-paths(-f), --du(-d), --directory(-D),\n        --mime-type(-m). Use `--help` for more information.\n```\n\n"
    },
    {
      "title": "Input from data files",
      "level": 4,
      "content": "nushell has native support for reading data in various formats, including JSON, YAML, TOML, SQL, HTML/XML, and others, allowing the user to utilize its powerful data querying and manipulation capabilities on data read from any file format. The user can also add support for new formats by adding plugins.\n\nData is read from files using the open builtin. For example, assuming we have a file movies.yaml with the following contents:\n\n```\n- movie: Matrix\n  genre: Action\n- movie: Lord of the Rings\n  genre: [Action, Fantasy]\n- movie: Independence Day\n  genre: [Action, Sci-Fi]\n```\n\nThen executing open movies.yaml would produce the following output:\n\n```\n╭───┬───────────────────┬─────────────────╮\n│ # │       movie       │      genre      │\n├───┼───────────────────┼─────────────────┤\n│ 0 │ Matrix            │ Action          │\n│ 1 │ Lord of the Rings │ ╭───┬─────────╮ │\n│   │                   │ │ 0 │ Action  │ │\n│   │                   │ │ 1 │ Fantasy │ │\n│   │                   │ ╰───┴─────────╯ │\n│ 1 │ Independence Day  │ ╭───┬─────────╮ │\n│   │                   │ │ 0 │ Action  │ │\n│   │                   │ │ 1 │ Sci-Fi  │ │\n│   │                   │ ╰───┴─────────╯ │\n╰───┴───────────────────┴─────────────────╯\n```\n\n"
    },
    {
      "title": "Input from external programs",
      "level": 4,
      "content": "For external programs, which typically produce their output as plain text, nushell offers the ability to parse their output and convert it into a structured datatype, so that the user can utilize nushell's full native data processing capabilities even on arbitrary output generated by agnostic programs.\n\nParsing external program output can be easily performed using the parse builtin. One typical workflow is using the -r switch, which tells parse to use a regular expression for extracting fields out of each line of text in the input. For example, to parse the output of pacman's -Si command, one might do something like this:\n\n```\n> pacman -Si rclone | parse -r '(?P<name>.*\\w) +: (?P<value>.+)'\n╭────┬────────────────┬─────────────────────────────────────────────────╮\n│  # │      name      │                    value                        │\n├────┼────────────────┼─────────────────────────────────────────────────┤\n│  0 │ Repository     │ extra                                           │\n│  1 │ Name           │ rclone                                          │\n│  2 │ Version        │ 1.62.2-1                                        │\n│  3 │ Description    │ Sync files to and from Google Drive, S3, Swift, │\n│    │                │ Cloudfiles, Dropbox and Google Cloud Storage    │\n│  4 │ Architecture   │ x86_64                                          │\n│  5 │ URL            │ https://rclone.org/                             │\n│  6 │ Licenses       │ MIT                                             │\n│  7 │ Groups         │ None                                            │\n│  8 │ Provides       │ None                                            │\n│  9 │ Depends On     │ glibc                                           │\n│ 10 │ Optional Deps  │ fuse2: for rclone mount                         │\n│ 11 │ Conflicts With │ None                                            │\n│ 12 │ Replaces       │ None                                            │\n│ 13 │ Download Size  │ 18.12 MiB                                       │\n│ 14 │ Installed Size │ 75.93 MiB                                       │\n│ 15 │ Packager       │ Morten Linderud <foxboron@archlinux.org>        │\n│ 16 │ Build Date     │ Sun 02 Apr 2023 14:09:44 EEST                   │\n│ 17 │ Validated By   │ MD5 Sum  SHA-256 Sum  Signature                 │\n╰────┴────────────────┴─────────────────────────────────────────────────╯\n```\n\nnushell uses a Perl-like regular expression syntax, which is provided by the Regex crate (of the Rust programming language). The syntax is described in the crate's documentation.\n\nAnother way, which does not require regular expression knowledge, is by omitting the -r switch and providing parse with a template string. However, depending on the case, it may necessitate extra steps for pre- and post-processsing the results. For example:\n\n```\n> pacman -Si just | lines | parse '{field} : {value}' | str trim\n```\n\nHere we performed the same task as the above, but with three differences. Aside from using a template string rather than regular expression (i.e. without the -r switch), the first notable difference is that when parse is given a template strings, it acts on the entirety of its input rather than on each line in it. So in order to parse the input on a per-line basis, we must first split it into an array of lines using the lines builtin.\n\nThe second difference is that template strings do not automatically trim surplus whitespace, which results in the matched fields containing all extra whitespace surrounding them, so we had to post-process the output with str trim, which conveniently acts on all fields for all items in the provided array.\n\n"
    },
    {
      "title": "Conversion",
      "level": 4,
      "content": "The combination of its open and save builtins allow it to be easily used to convert data files across any supported formats. For example:\n\nThe data can then be freely manipulated or converted by piping it to other commands. For example:\n\n```\n> open movies.yaml | first 2 | to json --raw\n[{\"movie\": \"Matrix\",\"genre\": \"Action\"},{\"movie\": \"Lord of the Rings\",\"genre\":[\"Action\",\"Fantasy\"]}]\n> open movies.yaml | first 2 | to json --raw | save movies.json\n> cat movies.json\n(same output as above)\n```\n\n"
    },
    {
      "title": "Comparison with traditional shells",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nnushell is not a POSIX shell, and has significant differences from traditional/POSIX-compatible shells in various ways, including its syntax, supported builtins, the way builtins work, the command-line options they accept, the type of data they consume and produce, and so on.\n\n"
    },
    {
      "title": "Syntax",
      "level": 3,
      "content": "Redirecting output to a file cannot be done using > like in other shells. Instead, you must use the save builtin. If the output in question happens to be a complex data structure (like the output of its builtin ls), then you must first serialize it into a textual representation using the to builtin.\n\nSo rather than:\n\n```\nls > file.txt\n```\n\nYou must use:\n\n```\nls | to yaml | save file.yaml\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- nushell's Project Homepage.\n\n- Nushell's Introductory Book, which goes in detail about its features and facets.\n\n- Nushell's Command Reference\n\n- Nushell's Cookbook, containing examples about how to perform tasks from various categories in nushell.\n\n"
    }
  ]
}