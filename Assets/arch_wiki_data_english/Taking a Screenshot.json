{
  "title": "Taking a Screenshot",
  "url": "https://wiki.archlinux.org/title/Taking_a_Screenshot",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Desktop environment\n- Key binding\n- List of applications\n\nThis article lists and describes screenshot and screencast software.\n\n"
    },
    {
      "title": "Application list",
      "level": 4,
      "content": "- CoreShot — C-Suite screen capture utility for Xorg.\n\n- Escrotum — Screen capture tool using PyGTK, inspired by scrot, and can be used as its replacement.\n\n- Flameshot — Qt-based software for interactive screenshot taking.\n\n- GNOME Screenshot — Screenshot tool for the GNOME desktop environment.\n\n- grim — Grab images from a Wayland compositor.\n\n- gscreenshot — GTK frontend for multiple screenshot backends including scrot, ImageMagick, PIL, imlib2, and grim; with delays, selection, and copy-to-clipboard functionality.\n\n- HotShots — Application for capturing screens and saving them in a variety of image formats as well as adding annotations and graphical data (arrows, lines, texts, ...).\n\n- imgur-screenshot — Take screenshot selection, upload to imgur + more cool things.\n\n- ksnip — Qt-based cross-platform screenshot tool that provides many annotation features, basic image manipulation and remote destination (ftp, imgur, script).\n\n- Lightscreen — Simple tool to automate the tedious process of saving and cataloging screenshots, it operates as a hidden background process that is invoked with one (or multiple) hotkeys and then saves a screenshot file to disk according to the user's preferences.\n\n- LXImage-Qt — Qt port of LXImage image viewer and screenshot tool (run with lximage-qt --screenshot).\n\n- maim — Simple command line utility that takes screenshots meant to replace scrot and performs better than scrot in many ways.\n\n- MATE Screenshot — Screenshot tool for the MATE desktop.\n\n- menyoki — Command line screenshot and screencast tool with support for image manipulation operations.\n\n- mss — An xrandr-aware screenshots Python module with a minimal CLI.\n\n- Pantheon Screenshot — Screenshot tool designed for elementary OS.\n\n- ScreenCloud — Take a screenshot of the entire screen or to select an area and then uploading the screenshot to imgur+auth with plugins and system tray.\n\n- ScreenGrab — Qt application designed to quickly take screenshots (inactive development).\n\n- scrot — Simple command-line screenshot utility for X.\n\n- Shotgun — Minimal X screenshot utility written in Rust (according to the author, it is twice as fast as maim).\n\n- Shutter — Rich screenshot and editing program (supports delay).\n\n- Spectacle — KDE application for screen capture, capable of capturing images of the whole desktop, a single window, a section of a window, a selected rectangular region or a freehand region; part of kde-graphics.\n\n- Xfce4-screenshooter — Application and Xfce panel plugin to take screenshots about the entire screen, the active window or a selected region; part of xfce4-goodies.\n\n- xwd — X Window dump utility.\n\n"
    },
    {
      "title": "Usage",
      "level": 4,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nmaim is aimed to be an improved scrot.\n\nSave the full screen to file:\n\n```\n$ maim filename\n```\n\nPrompt for selection and save to file:\n\n```\n$ maim --select filename\n```\n\nSave the active window to file, assuming xdotool is installed:\n\n```\n$ maim --window $(xdotool getactivewindow) filename\n```\n\nPrompt for selection, save without cursor, and store it to clipboard, assuming xclip is installed:\n\n```\n$ maim -s | xclip -selection clipboard -t image/png -i\n```\n\nscrot enables taking screenshots from the CLI and offers features such as a user-definable time delay. Unless instructed otherwise, it saves the file in the current working directory.\n\n```\n$ scrot -t 20 -d 5\n```\n\nThe above command saves a dated .png file, along with a thumbnail (20% of original), for Web posting. It provides a 5 second delay before capturing in this instance.\n\nYou can also use standard date and time formatting when saving to a file. e.g.,\n\n```\n$ scrot ~/screenshots/%Y-%m-%d-%T-screenshot.png\n```\n\nsaves the screenshot in a filename with the current year, month, date, hours, minutes, and seconds to a folder in your home directory called \"screenshots\"\n\nSee scrot(1) for more information.\n\n"
    },
    {
      "title": "Budgie",
      "level": 4,
      "content": "Budgie ships with its own screenshot utility called BudgieScreenshot.\n\nIt allows capturing the whole screen using PrintScreen, the active window or a selected area. See Keyboard Shortcuts for the shortcut to a specific action.\n\n"
    },
    {
      "title": "Cinnamon",
      "level": 4,
      "content": "The default installation of Cinnamon does not provide a screenshot utility. Installing gnome-screenshot will enable screenshots through the Menu > Accessories > Screenshot or by pressing PrintScreen.\n\n"
    },
    {
      "title": "GNOME",
      "level": 4,
      "content": "GNOME users can press PrintScreen or click the camera icon in the system menu. You can also optionally install gnome-screenshot and open it via Apps > Accessories > Take Screenshot.\n\nGNOME features built-in screen recording with the Ctrl+Shift+Alt+r key combination. A red circle is displayed in the bottom right corner of the screen when the recording is in progress. After the recording is finished, a file named Screencast from %d%u-%c.webm is saved in the Videos directory. In order to use the screencast feature the gst-plugin-pipewire and gst-plugins-good packages need to be installed.\n\n"
    },
    {
      "title": "KDE",
      "level": 4,
      "content": "If you use KDE, you might want to use Spectacle.\n\nSpectacle is provided by the spectacle package.\n\n"
    },
    {
      "title": "Xfce",
      "level": 4,
      "content": "If you use Xfce you can install xfce4-screenshooter and then add a keyboard binding:\n\nXfce Menu > Settings > Keyboard > Application Shortcuts\n\nIf you want to skip the Screenshot prompt, type $ xfce4-screenshooter -h in terminal for the options.\n\n"
    },
    {
      "title": "Other desktop environments or window managers",
      "level": 4,
      "content": "Note: **This article or section is a candidate for merging with ImageMagick#Screenshot taking.** This article or section is a candidate for merging with ImageMagick#Screenshot taking.\n\nThis article or section is a candidate for merging with ImageMagick#Screenshot taking.\n\nFor other desktop environments such as LXDE or window managers such as Openbox and Compiz, one can add the above commands to the hotkey to take the screenshot. For example:\n\n```\n$ import -window root ~/Pictures/$(date '+%Y%m%d-%H%M%S').png\n```\n\nNote that import is part of the imagemagick package. Adding the above command to the PrintScreen key to Compiz allows to take the screenshot to the Pictures folder according to date and time.\n\nNotice that the rc.xml file in Openbox does not understand commas; so, in order to bind that command to the PrintScreen key in Openbox, you need to add the following to the keyboard section of your rc.xml file:\n\n```\nrc.xml\n```\n\n```\n<!-- Screenshot -->\n    <keybind key=\"Print\">\n      <action name=\"Execute\">\n        <command>sh -c \"import -window root ~/Pictures/$(date '+%Y%m%d-%H%M%S').png\"</command>\n      </action>\n    </keybind>\n```\n\nIf the PrintScreen above does not work, see Keyboard input and use different keysym or keycode.\n\n"
    },
    {
      "title": "ImageMagick/GraphicsMagick",
      "level": 4,
      "content": "See ImageMagick#Screenshot taking.\n\n"
    },
    {
      "title": "GIMP",
      "level": 4,
      "content": "You also can take screenshots with GIMP (File > Create > Screenshot...).\n\n"
    },
    {
      "title": "imlib2",
      "level": 4,
      "content": "imlib2 provides a binary imlib2_grab to take screenshots. To take a screenshot of the full screen, type:\n\n```\n$ imlib2_grab screenshot.png\n```\n\n"
    },
    {
      "title": "FFmpeg",
      "level": 4,
      "content": "See FFmpeg#Screen capture.\n\n"
    },
    {
      "title": "Screencast software",
      "level": 2,
      "content": "See also FFmpeg#Screen capture and Wikipedia:Comparison of screencasting software.\n\nScreencast utilities allow you to create a video of your desktop or individual windows.\n\n- Deepin Screen Recorder — Screen recorder application for Deepin desktop.\n\n- FFcast — FFmpeg-based screencast tool written in Bash.\n\n- GPU Screen Recorder — Screen recorder that captures your screen on the GPU only to vastly improve performance, comparable to NVIDIA ShadowPlay and supports live streaming and replay buffer as well.\n\n- Green Recorder — Simple yet functional desktop recorder for Linux systems.\n\n- Kazam — Screencasting program with design in mind that handles multiscreen setups.\n\n- Kooha — Simple screen recorder with a minimal GTK interface.\n\n- menyoki — Screen capture and perform ImageOps on the command line (X11 only, Wayland planned).\n\n- Open Broadcaster Software — Video recording and live streaming application.\n\n- obs-gnome-screencastAUR – plugin for GNOME screencast feature, supports Wayland\n\n- Peek — Simple screencast tool that produces GIF, APNG, WebM or MP4 animations (no longer under development as of 2023-01).\n\n- RecApp — User friendly screencaster written in GTK using free GStreamer modules and not dependent on FFmpeg (no longer under development).\n\n- RecordMyDesktop — Easy to use utility with a CLI interface that records your desktop into the Ogg format (inactive development).\n\n- screencast — Command line interface to record an X11 desktop using FFmpeg, having support for offline recording and live streaming.\n\n- Screencast — Simple screencast recorder designed for elementary OS.\n\n- SimpleScreenRecorder — Feature-rich screen recorder written in C++/Qt5 that supports X11 and OpenGL.\n\n- Spectacle — KDE application for screen capture, capable of capturing video (without sound) of the whole desktop, a single screen or a single window on Wayland; part of kde-graphics (works only with kwin activated, so cannot be used with other window managers).\n\n- VokoScreen — Powerful screencast GUI tool using GStreamer, supporting numerous codec, capture video and sound, from internal or external (micro, webcam) and screen/window/view sources, zoom and highlight of mouse region+buttons but with limited Wayland support.\n\n- Wayfarer — GTK4 screen recorder for Wayland with Pipewire as well as Xorg.\n\n"
    },
    {
      "title": "Wayland",
      "level": 2,
      "content": "Capturing the screen on Wlroots-based compositor can be done using grim or grimshot (from sway-contrib), for screenshots and wf-recorder (or wf-recorder-gitAUR) for video; wlrobs-hgAUR is an obs-studio plugin that allows you to screen capture on wlroots-based compositors. Optionally, slurp can be used to select the part of the screen to capture. If your GPU supports vaapi encoding, wl-screenrec-gitAUR can be a more efficient alternative to wf-recorder.\n\nTake a screenshot of the whole screen:\n\n```\n$ grim screenshot.png\n```\n\nTake a screenshot of current window in Sway:\n\n```\n$ swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | \"\\(.x),\\(.y) \\(.width)x\\(.height)\"' | grim -g - screenshot.png\n```\n\nTake a screenshot of current window in Hyprland:\n\n```\n$ hyprctl -j activewindow | jq -r '\"\\(.at[0]),\\(.at[1]) \\(.size[0])x\\(.size[1])\"' | grim -g - screenshot.png\n```\n\nTake a screenshot of a part of the screen:\n\n```\n$ slurp | grim -g - screenshot.png\n```\n\nTake a screenshot of a part of the screen and put the output into the clipboard using wl-clipboard:\n\n```\n$ slurp | grim -g - - | wl-copy\n```\n\nTake a screenshot of a part of the screen, save to a file, and put the output into the clipboard using wl-clipboard:\n\n```\n$ slurp | grim -g - - | tee ~/Pictures/$(date +%s).png | wl-copy\n```\n\nCapture a video of the whole screen:\n\n```\n$ wf-recorder -f recording.mp4\n```\n\nCapture a video of a part of the screen:\n\n```\n$ wf-recorder -g \"$(slurp)\"\n```\n\n- slurpshot is an interactive screenshot taking script using bemenu.\n- To use a post-capture screenshot editing and drawing tool such as swappy: grim -g \"$(slurp)\" - | swappy -f -\n\n- screenshot.sh GUI Screenshot Tool for Wayland Using zenity, grim and slurp\n\nAdditionally, some programs mentioned above work under Wayland (e.g. ksnip, green-recorderAUR).\n\n"
    },
    {
      "title": "Via GNOME screencast",
      "level": 4,
      "content": "green-recorderAUR, obs-gnome-screencastAUR and obs-studio support screen recording on Wayland using GNOME screencast feature.\n\n"
    },
    {
      "title": "Via Hyprland",
      "level": 4,
      "content": "The Hyprland window manager allows screen casting and recording with OBS (including selection of individual windows and workspaces) when used with xdg-desktop-portal-hyprland [1].\n\n"
    },
    {
      "title": "Via a virtual webcam video feed",
      "level": 4,
      "content": "See v4l2loopback#Casting Wayland using wf-recorder.\n\n- This method has been tested with zoomAUR (desktop client running under xorg-xwayland) and BigBlueButton under chromium (under firefox the resolution is really low); skypeforlinux-binAUR detects the virtual video device VirtualVideoDevice, but outputs a blank screen.\n- The example uses wf-recorder but you can use whatever software, just feed the output to the virtual device.\n\nInstall wf-recorder (or wf-recorder-gitAUR) and v4l2loopback-dkms. Load the v4l2loopback kernel module with the following parameters:\n\n```\n# modprobe v4l2loopback exclusive_caps=1 card_label=VirtualVideoDevice\n```\n\nVerify that a new virtual video device VirtualVideoDevice has been created:\n\n```\n$ v4l2-ctl --list-devices\n```\n\n```\n...\nVirtualVideoDevice (platform:v4l2loopback-000):\n\t/dev/video2\n...\n```\n\nStart recording the screen with wf-recorder and feed the output to the new virtual video device VirtualVideoDevice created by v4l2loopback:\n\n```\n$ wf-recorder --muxer=v4l2 --codec=rawvideo --file=/dev/video2 -x yuv420p\n```\n\nThe yuv420p colour space is required for the video output to be compatible with Zoom [2].\n\nYou can now select the above virtual video device as your \"webcam\" in video calling/video conferencing applications (the device is called VirtualVideoDevice). You can use ffplay (part of ffmpeg), mpv, or gst-launch (part of gstreamer) to verify that the virtual video device indeed outputs your screenshare:\n\n```\n$ ffplay /dev/video2\n```\n\n```\n$ mpv av://v4l2:/dev/video2\n```\n\n```\n$ gst-launch-1.0 -v v4l2src device=/dev/video2 ! glimagesink\n```\n\nIf Firefox is unable to read the video stream and prints a message like \"AbortError: Starting video failed\", try preloading v4l2compat.so:\n\n```\n$ LD_PRELOAD=/usr/lib/v4l1compat.so firefox\n```\n\nAs explained above, wf-recorder is able to record only a portion of the screen by first selecting a region with slurp. To use this functionality for sharing a specific region/application window through a virtual video device, start recording the screen with the following modified command:\n\n```\n$ wf-recorder -g \"$(slurp)\" --muxer=v4l2 --codec=rawvideo --file=/dev/video2 -x yuv420p\n```\n\nAfter selecting a region of the screen, you will be able to access the video feed through the virtual video device /dev/video2 as above.\n\n"
    },
    {
      "title": "Via the WebRTC protocol",
      "level": 4,
      "content": "See PipeWire#WebRTC screen sharing.\n\nChromium and Firefox should now be able to access the screenshare. You can verify this through Mozilla's getUserMedia / getDisplayMedia Test Page.\n\n"
    },
    {
      "title": "Screencast Wayland windows with X11 applications",
      "level": 3,
      "content": "You can share native Wayland windows (or the whole screen/workspace) to the X11 application. For this you need to use xwaylandvideobridgeAUR. See Fixing Wayland: Xwayland screen casting for details.\n\n"
    },
    {
      "title": "Capture with ANSI codes",
      "level": 3,
      "content": "You can use the script(1) command, part of the util-linux package. Just run script and from that moment, all the output is going to be saved to the typescript file, including the ANSI codes.\n\nOnce you are done, just run exit and the typescript would ready. The resulting file can be converted to HTML using the ansi2htmlAUR package (not to be confused with ansi2html from python-ansi2html).\n\nTo convert the typescript file to typescript.html, do the following:\n\n```\n$ ansi2html --bg=dark < typescript > typescript.html\n```\n\nActually, some commands can be piped directly to ansi2html:\n\n```\n$ ls --color|ansi2html --bg=dark >output.html\n```\n\nThat does not work on every single case, so in those cases, using script is mandatory.\n\n"
    },
    {
      "title": "Framebuffer",
      "level": 3,
      "content": "Install a framebuffer and use fbgrab or fbdumpAUR to take a screenshot.\n\n"
    },
    {
      "title": "Screenshot",
      "level": 4,
      "content": "If you merely want to capture the text in the console and not an actual image, you can use setterm, which is part of the util-linux package. The following command will dump the textual contents of virtual console 1 to a file screen.dump in the current directory:\n\n```\n# setterm -dump 1 -file screen.dump\n```\n\nRoot permission is needed because the contents of /dev/vcs1 need to be read.\n\n"
    },
    {
      "title": "Screencast of console",
      "level": 4,
      "content": "asciinema allows to record a whole terminal session activity, which is saved in a file in its own (open) format. This file can be played with the same tool or an HTML5 version of the tool, and can be shared on the asciinema.org official web site of the application, or on any own hosted HTML version.\n\nUsage: asciinema(1) or asciinema --help.\n\n- asciinema rec output.cast records the session, Ctrl+\\ can pause/resume it, Ctrl-d/exit of the session will stop it. Name of output file is optional.\n\nInteresting arguments for recording:\n\n- -c command if you just want to record a specific command action/output\n- -i 1.2 record for 1.2 seconds only\n- -t \"beautiful title\" add a title to the terminalcast\n\nOther functions than recording:\n\n- asciinema play file.cast play an asciinmea record file\n- asciinema upload file.cast upload the file on asciinema.org for sharing\n- asciinema auth manage recordings on asciinema.org account\n\n"
    },
    {
      "title": "Screenshot uses old screen state",
      "level": 3,
      "content": "See KDE#Spectacle screenshot uses old screen state.\n\n"
    },
    {
      "title": "NVIDIA clipping background",
      "level": 3,
      "content": "If the nvidia proprietary driver is in use and the screen recording is experiencing background clipping, enable the ForceCompositionPipeline setting. See NVIDIA/Troubleshooting#Avoid screen tearing for details.\n\n"
    }
  ]
}