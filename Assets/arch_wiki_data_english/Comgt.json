{
  "title": "Comgt",
  "url": "https://wiki.archlinux.org/title/Comgt",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nRelated articles\n\n- Category:Modems\n\nA number of mobile phone carriers around the world offer internet access via mobile broadband (e.g. LTE, UMTS, EDGE, GSM, etc.).\n\nThis article focuses on mobile broadband modems in the format of portable USB devices and mini PCIe cards. For standalone mobile broadband routers, simply connect to them using an interface they provide (e.g. Ethernet or Wi-Fi).\n\n"
    },
    {
      "title": "Device identification",
      "level": 2,
      "content": "Install usbutils.\n\nExamine the output of:\n\n```\n$ lsusb\n```\n\nand\n\n```\n$ lspci -nn\n```\n\nwhich will show the vendor and product IDs of the device. Note that some devices will show two different product IDs at different times as explained below.\n\n"
    },
    {
      "title": "From mass storage mode",
      "level": 3,
      "content": "Often these devices will have two modes (1) USB flash memory storage (2) USB modem. The first mode, sometimes known as ZeroCD, is often used to deliver an internet communications program for another operating system and is generally of no interest to Linux users. Additionally some have a slot into which the user can insert an additional flash memory card.\n\nA useful utility for switching these devices into modem mode is usb_modeswitch. It ships with udev rules /usr/lib/udev/rules.d/40-usb_modeswitch.rules that contain entries for many devices, which it will switch to modem mode upon insertion.\n\nWhen a device is switched, its product ID may change to a different value. The vendor ID will remain unchanged. This can be seen in the output of lsusb.\n\nSome devices are supported in the USB serial kernel module called option (named after the \"Option\" devices, but not limited to just those) and may be used without usb_modeswitch.\n\n"
    },
    {
      "title": "From router mode",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nDepending on the device, it may expose an Ethernet network interface or provide Wi-Fi. In that case you will need to have the interface up. If the device has a DHCP server, you can use a DHCP client to match it. Otherwise, you will have to have some knowledge about the network the device expects. Such information might be obtained from its behavior in another OS. Or by searching the web. Or from the drivers, and other information, stored in the initial USB flash memory storage (ZeroCD). Some Huawei HiLink devices, for example, sometime operate at 192.168.8.0/24, with a gateway at 192.168.8.1. They also might have a web interface at http://192.168.8.1.\n\n"
    },
    {
      "title": "Modem mode",
      "level": 2,
      "content": "In general, at this point you should note if mode switching left you with additional /dev/ttyUSB* serial device and a ww* network interface. You can do that with journalctl or by shell commands such as:\n\n```\n$ ls /dev/ttyUSB*\n$ ip link\n```\n\n"
    },
    {
      "title": "Remove the PIN",
      "level": 3,
      "content": "First of all use your SIM card in a normal phone and disable the PIN request if present. If the SIM card asks the PIN wvdial will not work.\n\nFailing that, you can use mmcli (provided by modemmanager) or AT commands, to unlock the SIM card.\n\n"
    },
    {
      "title": "Using mmcli",
      "level": 4,
      "content": "First, list the modems and find the modem's index:\n\n```\n$ mmcli -L\n```\n\nLook for /org/freedesktop/ModemManager1/Modem/MODEM_INDEX.\n\nFind the SIM card index:\n\n```\n$ mmcli -m MODEM_INDEX\n```\n\nJust as with the modem index, look for primary sim path: /org/freedesktop/ModemManager1/SIM/SIM_INDEX.\n\nUnlock the SIM card:\n\n```\n$ mmcli --sim=SIM_INDEX --pin=PIN\n```\n\nRemove the requirement for PIN:\n\n```\n$ mmcli --sim=SIM_INDEX --pin=PIN --disable-pin\n```\n\n"
    },
    {
      "title": "Using AT commands",
      "level": 4,
      "content": "Follow the instructions in https://unix.stackexchange.com/a/313878.\n\n"
    },
    {
      "title": "Connection",
      "level": 3,
      "content": "To connect to the mobile network, use one of the following methods.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "ModemManager",
      "level": 4,
      "content": "ModemManager is a system daemon which controls WWAN devices and connections.\n\nInstall the modemmanager and usb_modeswitch packages.\n\nStart and enable ModemManager.service.\n\nUse mmcli(1) to communicate with the modem.\n\nThe simplest way to establish a connection is to use mmcli's --simple-connect option.\n\nFirst, list the modems and find the modem's index:\n\n```\n$ mmcli -L\n```\n\nLook for /org/freedesktop/ModemManager1/Modem/MODEM_INDEX.\n\nNext connect to the mobile network. For example:\n\n```\n$ mmcli -m MODEM_INDEX --simple-connect=\"apn=internet.myisp.example\"\n```\n\nReplace internet.myisp.example with your ISP's provided APN. If a user name and password is required, set them accordingly:\n\n```\n$ mmcli -m MODEM_INDEX --simple-connect=\"apn=internet.myisp.example,user=user_name,password=password\"\n```\n\n- IP connectivity on broadband networks is subtly different from wireless or wired LAN networks. For LTE modems, ModemManager documentation provides a good explanation that might be helpful for troubleshooting.\n- ModemManager only establishes a connection between the modem and the mobile network. Once connected, ModemManager will request to use a specific IP setup method in the connected bearer: either ppp (so the user should launch pppd on the reported serial port), or static (so the user should manually configure IP settings on the reported network interface), or dhcp (so the user should run a DHCP client on the reported network interface. Instead of all this manual setup, it's suggested to use NetworkManager.\n- The network interface name will start with ww, e.g. wwp0s20u8i2.\n- ModemManager does not save modem configuration, i.e. it does not have anything like connection profiles. The modem will need to be configured each time it is attached. If persistent configuration is desired, use NetworkManager.\n\nTo disconnect from the mobile network run:\n\n```\n$ mmcli -m MODEM_INDEX --simple-disconnect\n```\n\nSee also mmcli(1) § EXAMPLES.\n\n"
    },
    {
      "title": "NetworkManager",
      "level": 4,
      "content": "NetworkManager uses ModemManager to work with mobile broadband modems. See NetworkManager#Mobile broadband support.\n\n"
    },
    {
      "title": "libmbim",
      "level": 4,
      "content": "Install libmbim. To bring up the modem you can use mbim-network which is a wrapper for mbimcli calls. First create a profile for mbim-network.\n\n```\n/etc/mbim-network.conf\n```\n\n```\nAPN=apn=internet.myisp.example\n```\n\nNow connect to the network with:\n\n```\n# mbim-network /dev/cdc-wdmX start\n```\n\nThen follow Network configuration to bring up the ww* interface and get an IP address using DHCP.\n\n"
    },
    {
      "title": "pppd",
      "level": 4,
      "content": "pppd can be used to configure 3g connections. Step by step instruction is available on 3G and GPRS modems with pppd. Optionally, pppconfigAUR can be used to simplify the pppd configuration using dialog interface.\n\n"
    },
    {
      "title": "wvdial",
      "level": 4,
      "content": "See main article: wvdial\n\n"
    },
    {
      "title": "netctl",
      "level": 4,
      "content": "Netctl can be used to establish a connection using a USB modem. An example configuration file provided by netctl is located at /etc/netctl/examples/mobile_ppp. Minimally you will probably have to specify\n\n```\n/etc/netctl/mobile_ppp\n```\n\n```\nInterface=cdc-wdmX\nConnection=mobile_ppp\nAccessPointName=apn=internet.myisp.example\n```\n\nSee the netctl article and netctl.profile(5) for more information.\n\n"
    },
    {
      "title": "Disable mode switching",
      "level": 3,
      "content": "Some ways to disable usb_modeswitch from operating on a device before the device was inserted, for example to be able to read the initial flash memory (ZeroCD), are:\n\n"
    },
    {
      "title": "By the configuration file",
      "level": 4,
      "content": "```\n/etc/usb_modeswitch.conf\n```\n\n```\nDisableSwitching=1\n```\n\n"
    },
    {
      "title": "With a udev rule",
      "level": 4,
      "content": "Masking the udev rule the package is using can be achieved with\n\n```\n# ln -s /dev/null /etc/udev/rules.d/40-usb_modeswitch.rules\n```\n\n"
    },
    {
      "title": "AT commands",
      "level": 3,
      "content": "There are some useful commands:\n\n- AT^U2DIAG=0 - the device is only Modem\n- AT^U2DIAG=1 - device is in modem mode + CD ROM\n- AT^U2DIAG=255 - the device in modem mode + CD ROM + Card Reader\n- AT^U2DIAG=256 - the device in modem mode + Card Reader\n- AT+CPIN=PIN-CODE - enter PIN-code\n- AT+CUSD=1,PDU-encoded-USSD-code,15 - USSD request, result can be found (probably) in /dev/ttyUSB2.\n\nEncode *100# to PDU format:\n\n```\n$ perl -e '@a=split(//,unpack(\"b*\",\"*100#\")); for ($i=7; $i < $#a; $i+=8) { $a[$i]=\"\" } print uc(unpack(\"H*\", pack(\"b*\", join(\"\", @a)))).\"\\n\"'\n```\n\nDecode AA180C3602 from PDU format:\n\n```\n$ perl -e '@a=split(//,unpack(\"b*\", pack(\"H*\",\"AA180C3602\"))); for ($i=6; $i < $#a; $i+=7) {$a[$i].=\"0\" } print pack(\"b*\", join(\"\", @a)).\"\"'\n```\n\nAnswer decoding (this example is balance response: 151.25):\n\n```\n$ perl -e 'print pack(\"H*\", \"003100350031002C003200350020044004430431002E0020\");'\n```\n\nSome operators return USSD result in PDU encoding, so you should check proper decoding method.\n\n- AT+CSQ - get signal quality (AT+CSQ=?)\n- AT+GMI - get manufacturer\n- AT+GMM - get model\n- AT+GMR - get revision\n- AT+GMN - get IMEI\n- AT+COPS? - get operator info\n- AT^CARDLOCK=\"NCK-code\" - unlock modem. NCK-code should be calculated by IMEI. After that modem can work with any GSM-provider.\n- AT^SYSCFG=mode, order, band, roaming, domain - System Config\n\nMode:\n\n- 2 Automatic search\n- 13 2G ONLY\n- 14 3G ONLY\n- 16 No change\n\nOrder:\n\n- 0 Automatic search\n- 1 2G first, then 3G\n- 2 3G first, then 2G\n- 3 No change\n\nBand:\n\n- 80 GSM DCS systems\n- 100 Extended GSM 900\n- 200 Primary GSM 900\n- 200000 GSM PCS\n- 400000 WCDMA IMT 2000\n- 3FFFFFFF Any band\n- 40000000 No change of band\n\nRoaming:\n\n- 0 Not supported\n- 1 Roaming is supported\n- 2 No change\n\nDomain:\n\n- 0 CS_ONLY\n- 1 PS_ONLY\n- 2 CS_PS\n- 3 ANY\n- 4 No change\n\n"
    },
    {
      "title": "Monitor used bandwidth",
      "level": 3,
      "content": "Frequently a 3G connection obtained via a mobile phone operator comes with restricted bandwidth, so that you are only allowed to use a certain bandwidth per time (e.g. 1GB per month). While it is quite straight-forward to know which type of network applications are pretty bandwidth extensive (e.g. video streaming, gaming, torrent, etc.), it may be difficult to keep an overview about overall consumed bandwidth.\n\nA number of tools are available to help with that. Two console tools are vnstat, which allows to keep track of bandwith over time, and iftop to monitor bandwidth of individual sessions.\n\nThe internal web server found in some devices, such as some Huawei HiLink, might also show information about bandwidth usage.\n\n"
    },
    {
      "title": "With dedicated software",
      "level": 4,
      "content": "This was tested on a Huawei EM770W (GTM382E) 3g card integrated into an Acer Aspire AS3810TG laptop. Install gnokiiAUR, then:\n\n```\n$ mkdir -p $XDG_CONFIG_HOME/gnokii\n```\n\nUsually the configuration directory is ~/.config/gnokii.\n\n```\n$ cp /etc/gnokiirc ~/.config/gnokii/config\n```\n\nEdit ~/.config/gnokii/config as follows:\n\n```\nport = /dev/ttyUSB0\n```\n\nYou may have to use a different port depending on your configuration, for example /dev/ttyUSB1 or something else:\n\n```\nmodel = AT\nconnection = serial\n```\n\nYou need to be part of the uucp group to use /dev/ttyUSB0.\n\nThen launch gnokii:\n\n```\n$ xgnokii\n```\n\nClick on the \"SMS\" icon button, a window opens up. Then click: \"messages->activate sms reading\". Your messages will show up in the window.\n\nCommand line script:\n\nA small command line script using gnokii to read SMS on your SIM card (not phone memory) without having to start a GUI:\n\n```\n$ gnokii --getsms SM 0 end 2>&1|grep Text -A1 -B3|grep -v Text\n```\n\nWhat it does:\n\n```\ngnokii # invoke gnokii\n--getsms SM 0 end # read SMS from SM-memory location (=SIM card) starting at 0 and reading all occupied memory locations (\"end\")\n2>&1 # connect STDERR to STDOUT to make sure the output from the --getsms command can be piped to grep\n|grep Text # pipe output from gnokii to grep, anchoring at output containing \"Text\"\n-A1 -B3 # print one line after the matched pattern and three lines before the matched pattern\n|grep -v Text # grep result to another grep to exclude the \"Text\" line (-v for inverting the pattern)\n```\n\nGranted this does not work very well if your SMS contains the word \"Text\", but you may adapt the script to your liking.\n\nAnother option is to use mmcli, you can use simple bash script like this one[dead link 2024-10-12 ⓘ] that is also used to write messages or this one below:\n\n```\n#!/bin/sh\n#get modem number\nMODEMNO=$(mmcli -L | grep -o \"Modem/[0-9]\" | grep -o [0-9]$)\n#list all SMS messages, and select this with highest id (usually newest one)\nSMSNO=$(mmcli -m ${MODEMNO} --messaging-list-sms | awk '/received/{split($1, ar, /\\//); print ar[6]; exit}')\n#read message with highest id\nmmcli -m ${MODEMNO} -s ${SMSNO}\n```\n\n"
    },
    {
      "title": "With email like web interface",
      "level": 4,
      "content": "Some Devices, such as some Huawei HiLink, include an email like web interface for SMS. It is included in the device internal web server, which is used for other purposes too.\n\n"
    },
    {
      "title": "Writing SMS",
      "level": 3,
      "content": "```\n#!/bin/sh\n#get modem number\nMODEMNO=$(mmcli -L | grep -o \"Modem/[0-9]\" | grep -o [0-9]$)\n#create sms in modem and get number\nSMSNO=$(mmcli -m ${MODEMNO} --messaging-create-sms=\"text='$1',number=+$2\" |  grep -o [0-9]*$)\n#send message\nmmcli -s ${SMSNO} --send\n# delete all sent messages\nfor i in $(mmcli -m ${MODEMNO} --messaging-list-sms | grep \" (sent)\" | cut -f5 -d' ') ; do\n    mmcli -m ${MODEMNO} --messaging-delete-sms=$i\ndone\n```\n\nYou may need give permission by creating file with content like\n\n```\n/etc/polkit-1/rules.d/49-nopasswd_mmcli.rules\n```\n\n```\npolkit.addRule(function(action, subject) {\n    if (action.id == \"org.freedesktop.ModemManager1.Messaging\" &&\n        subject.isInGroup(\"uucp\"))\n    {\n        return polkit.Result.YES;\n    }\n});\n```\n\n"
    },
    {
      "title": "Commands to restart the device",
      "level": 3,
      "content": "Unplugging, and plugging, the device is sometimes used to restart the USB device. The following describes how to do that from the shell. Doing that from the shell might be useful, if, for example, the plug is at the rear side of the PC. The method described is not just for USB modems. It should be good for many other USB devices.\n\nThe important part is that the requirements are for the USB bus, and the port, the device is attached to. There could be one, or more, sub ports too. Suppose I obtained bus 2 and port 4, without sub ports, for my device from the output of lsusb -t. This information is also recorded in the journal. With\n\n```\n$ cat /sys/bus/usb/drivers/usb/2-4/product\n```\n\nI can verify it is the intended device.\n\nThe following sequence will restart the device:\n\n```\n# echo 2-4 > /sys/bus/usb/drivers/usb/unbind\n# sleep 10\n# echo 2-4 > /sys/bus/usb/drivers/usb/bind\n```\n\nSome more comments are at, for example, https://askubuntu.com/questions/1036341/unplug-and-plug-in-again-a-usb-device-in-the-terminal.\n\n"
    },
    {
      "title": "Connection halts after few minutes running",
      "level": 3,
      "content": "This problem commonly occurs on some modems which locked by a mobile operator. You can successfully connect to the internet but after few minutes connection halts and your modem reboots. That happens because an operator built a some checks into modem firmware so a modem checks if a branded software is running on your pc, but usually that software is Windows-only, and obviously you do not use it. Fix (it works on ZTE-mf190 at least) is simple - send this command through serial port (use minicom or similar soft):\n\n```\nAT+ZCDRUN=E\\r\\n\n```\n\nThis command will delete a NODOWNLOAD.FLG file in the modem's filesystem - it will disable such checks.\n\nAnother possibility for such disconnections is to help the customer save bandwidth, which might be expensive. With Huawei HiLink devices with a web interface, there might be an option there to set a longer period of inactivity before the connection hangs up.\n\n"
    },
    {
      "title": "Low connection speed",
      "level": 3,
      "content": "Someone claims that the connection speed under Linux is lower than Windows [3]. This is a short summary for possible solutions which are not fully verified.\n\nIn most of conditions, the low speed is caused by bad receiver signals and too many people in cell. But you still could use the following method to try to improve the connection speed:\n\n- QoS parameter can be set with the AT+CGEQMIN and AT+CGEQREQ commands. It should also be possible to decrease and limit the connection speed. Add the following Init command in /etc/wvdial.conf:\n\n```\nInit6 = AT+CGEQMIN=1,4,64,640,64,640\nInit7 = AT+CGEQREQ=1,4,64,640,64,640\n```\n\n- Baud parameter in /etc/wvdial.conf could be used to increase the connection speed:\n\n```\nBaud = 460800\n```\n\nIt is advisable to see the baud rate set by the official modem application for Windows (possibly 9600 on Vista).\n\n"
    },
    {
      "title": "Fix image quality",
      "level": 3,
      "content": "If you are getting low quality images while browsing the web over a mobile broadband connection with the hints shift+r improves the quality of this image and shift+a improves the quality of all images on this page, follow these instructions:\n\nInstall tinyproxy.\n\nEdit /etc/tinyproxy/tinyproxy.conf and insert the following two lines:\n\n```\nAddHeader \"Pragma\" \"No-Cache\"\nAddHeader \"Cache-Control\" \"No-Cache\"\n```\n\nStart tinyproxy.service\n\nConfigure your browser to use localhost:8888 as a proxy server and you are all done. This is especially useful if you are using, for example, Google Chrome which, unlike Firefox, does not allow you to modify the Pragma and Cache-Control headers.\n\n"
    },
    {
      "title": "ModemManager does not recognize the modem",
      "level": 3,
      "content": "In case ModemManager does not recognize the modem, check the unit status of ModemManager.service. If you get error messages such as Couldn't check support for device and not supported by any plugin, you may have to whitelist your device using the ModemManager filter rules.\n\n"
    },
    {
      "title": "FCC locking",
      "level": 3,
      "content": "The FCC lock is a software lock integrated in WWAN modules shipped by several different laptop manufacturers like Lenovo, Dell, or HP. This lock prevents the WWAN module from being put online until some specific unlock procedure (usually a magic command sent to the module) is performed.\n\nSince release 1.18.4, the ModemManager daemon no longer automatically performs the FCC unlock procedure [4].\n\nModemManager will keep on providing support for the known FCC unlock procedures, but no longer automatically: the user must install and select the FCC unlock procedure needed in the specific laptop being used. This applies to: EM7355, MC8805, MC7355, EM7455, SDX55, EM120.\n\nThe modemmanager package ships several scripts installed under /usr/share/ModemManager/fcc-unlock.available.d and named as vid:pid with either the PCI or USB vendor and product IDs. However, they are not used if they are not in the /etc/ModemManager directory.\n\nFor each device the vid:pid can be found in the brackets at the end of the line:\n\n```\n# lspci -nn\n```\n\nTo enable unlock script for the device it must be symlinked like so:\n\n```\n# ln -sft /etc/ModemManager/fcc-unlock.d /usr/share/ModemManager/fcc-unlock.available.d/vid:pid\n```\n\nFor a Quectel EM120 modem that would be:\n\n```\n# ln -sft /etc/ModemManager/fcc-unlock.d /usr/share/ModemManager/fcc-unlock.available.d/1eac:1001\n```\n\nSee the ModemManager documentation for more information.\n\n"
    },
    {
      "title": "NetworkManager: Device not available / rfkill block",
      "level": 3,
      "content": "If NetworkManager persists on that the device (e.g. /dev/cdc-wdm0) is not available while ModemManager can use it, it could either be, that the device is blocked using a hardware switch, by rfkill or just NetworkManager believes that.\n\nCheck rfkill with:\n\n```\n# rfkill\nID TYPE      DEVICE                   SOFT      HARD\n 0 bluetooth tpacpi_bluetooth_sw unblocked unblocked\n 1 wwan      tpacpi_wwan_sw      unblocked unblocked\n 2 wlan      phy0                unblocked unblocked\n 8 bluetooth hci0                unblocked unblocked\n```\n\nThe wwan device should be listed as unblocked for both SOFT & HARD. If it is HARD blocked, a hardware switch blocks the device. If it is SOFT blocked, unblock it using:\n\n```\n# rfkill unblock wwan\n```\n\nIf NetworkManager still declares the device not available, it could be that NetworkManager is not synced with rfkill. Check that using:\n\n```\n$ nmcli radio\nWIFI-HW  WIFI     WWAN-HW  WWAN\nenabled  enabled  enabled  enabled\n```\n\nIf WWAN is listed as disabled, enable it using:\n\n```\n$ nmcli radio wwan on\n```\n\n"
    },
    {
      "title": "ModemManager connects successfully but the interface does not show any IP address",
      "level": 3,
      "content": "This has been reported to happen on some LTE modems with buggy or incompatible firmware versions. In this scenario, when inspecting the bearer with:\n\n```\n$ mmcli -m [your modem index] -b 1\n```\n\nIt can be seen how the IPv4 configuration section shows no IP address, and may show dhcp as the method despite the associated interface (e.g. wwan0) not being dhcp-capable. In this cases, the modem firmware is not behaving correctly and it should be upgraded.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:Mobile broadband modem\n- Wikipedia:Wireless WAN\n- Wikipedia:Mobile broadband\n\n"
    }
  ]
}