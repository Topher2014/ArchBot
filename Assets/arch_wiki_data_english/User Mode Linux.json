{
  "title": "User Mode Linux",
  "url": "https://wiki.archlinux.org/title/User_Mode_Linux",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nUser-mode-Linux (UML) is a method to run Linux inside Linux as a normal process. Please check [1] for in-depth information what UML is and how it works.\n\n"
    },
    {
      "title": "Why use UML?",
      "level": 2,
      "content": "Running UML is a safe way to run multiple instances of (Arch-)Linux at the same time. The single processes are separated from each other, which makes it secure to run, for example, a testing instance and a production instance on the same machine. If something goes wrong inside the testing instance, it does not interfere with the host Linux or the productive instance.\n\n"
    },
    {
      "title": "HOWTO",
      "level": 2,
      "content": "There are three methods:\n\n- Use hostfs with vde2 network (all UMLs use same file system)\n- Use rootfs with tap network (require build image)\n- Use Marionnet\n\n"
    },
    {
      "title": "Setup by hostfs + vde2",
      "level": 3,
      "content": "Hostfs means use the host's file system in read-only mode.\n\n"
    },
    {
      "title": "Required packages",
      "level": 4,
      "content": "- linux-usermodeAUR\n- Utility packages: vde2 screen start-stop-daemonAUR rsyslogAUR\n\n"
    },
    {
      "title": "Launch script",
      "level": 4,
      "content": "- download https://pastebin.com/qDE0D7Lk script as 2vm.bash\n- use normal user to launch 2vm.bash (there are two VMs named as 'C1' & 'C2')\n- modify the 2vm.bash to fit your requirements\n\n"
    },
    {
      "title": "Required packages",
      "level": 4,
      "content": "- linux-usermodeAUR\n- Utility packages: vde2 uml_utilitiesAUR\n\n"
    },
    {
      "title": "Build rootfs image",
      "level": 4,
      "content": "1.) First you have to create a single, big file into which you will install Arch Linux. This command creates a single 1 GiB file, only containing zeros, which should be enough for a basic Arch Linux installation.\n\n```\ndd if=/dev/zero of=rootfs bs=1M count=1024\n```\n\nor\n\n```\nfallocate -l 1GiB ./rootfs\n```\n\n2.) After the build process you have to format the root file system image:\n\n```\nmke2fs -F rootfs\n```\n\n3.) After formatting the file, you have to mount it. Executing the following command as root does the job (you have also to load the loop module with modprobe):\n\n```\nmount -o loop rootfs /mnt\n```\n\n4.) Now the installation of the basic system may start:\n\n```\nmkdir -p /mnt/var/lib/pacman\npacman -Sy base -r /mnt\ncd /mnt/dev\nmknod --mode=660 ubd0 b 98 0\nchown root:disk ubd0\n```\n\n5.) Before the system can be booted with user-mode-Linux, some files inside the Arch basic system have to be customised. Add this line to /mnt/etc/fstab:\n\n```\n/dev/ubd0 / ext2 defaults 0 0\n```\n\n6.) Now unmount the file system.\n\n```\numount /mnt\n```\n\n7.) Next step is to set up networking. Therefore, you create a so called tun device (Please visit the UML how-to for further information about tun/tap), and give it an IP address. The following lines load the necessary tun module, create a tun/tap device that is readable by the users group, and sets it up with the given IP address. For security, you should consider creating a certain UML group with read permissions for the network device.\n\n```\nmodprobe tun\nip tuntap add tap0 mode tap group users\nchown root:users /dev/net/tun\nip addr add 192.168.0.100/24 dev tap0\n```\n\n8.) Now you can boot the image.\n\nTo use the network, you have to announce the proper device to the UML kernel. (Mind that the user running the UML command needs enough rights to access the tun device!)\n\n```\nvmlinux ubd0=rootfs eth0=tuntap,,,192.168.0.100\n```\n\nThe options to eth0 (,,,) mean:\n\n```\neth0=transportmode,tuntap device,MAC address,hostip\n```\n\nWhere transportmode is 'tuntap' in this example; the tuntap device is the device configured above; MAC address is the MAC address that the eth0 device in the UML system should get; hostip is the ip adress that the tuntap device in the host system gets. This should be an unused ip address of your hosts local network. The device and MAC address are optional and \"guessed\" if not supplied.\n\nExample:\n\n```\neth0=tuntap,tap0,3f:2a:bb:00:00:00,192.168.0.100\n```\n\nOther important options are mem for specifying the amount of RAM the guest system should be able to use (defaults to only 16MB); con to configure the virtual terminals and ubdb, ubdc, … for mounting additional filesystems.\n\nHeadless example:\n\n```\nvmlinux ubd0=rootfs eth0=tuntap,,,192.168.0.100 mem=128M con=pty\n```\n\n9) If you are not presented with a login prompt but see something like Virtual console 1 assigned device '/dev/pts/4, open the virtual console in another terminal with screen and press enter:\n\n```\nscreen /dev/pts/4\n```\n\n10) In the UML system you can configure the network manually:\n\n```\nip link set dev eth0 up\nip addr add 192.168.0.200/24  broadcast + dev eth0\nip route add default via 192.168.0.100\necho 'nameserver 1.1.1.1' > /etc/resolv.conf\n```\n\nGateway it the address you specified in 8; the local address should be another unused address from your network.\n\n"
    },
    {
      "title": "Marionnet",
      "level": 3,
      "content": "Marionnet is a free application for virtual networks. For use, you must install uml_utilitiesAUR, and see https://bugs.launchpad.net/marionnet/+bug/1580349.\n\n"
    },
    {
      "title": "Management console",
      "level": 3,
      "content": "With {[ic|uml_mconsole}} you can manage running UML systems:\n\n```\numl_mconsole socket-name\n```\n\nYou can see the socket-names – also called UMID – of your UML systems in the folder ~/.uml/:\n\n```\n$ ls -l ~/.uml/\ndrwxr-xr-x 1 michi users 16 11. Apr 19:52 I0KaOj\ndrwxr-xr-x 1 michi users 16 11. Apr 19:14 LrPv03\ndrwxr-xr-x 1 michi users 16 11. Apr 19:31 o8X27c\n```\n\nYou can also specify it on start with the umid option.\n\nWith uml_mconsole you can among others reboot/halt the system, add/remove storage devices or send special key combinations (sysrq, Ctrl-alt-del) to the system.\n\n"
    }
  ]
}