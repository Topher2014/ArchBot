{
  "title": "Webdav",
  "url": "https://wiki.archlinux.org/title/Webdav",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Davfs2\n\nWebDAV (Web Distributed Authoring and Versioning) is an extension of HTTP/1.1 and therefore can be considered to be a protocol. It contains a set of concepts and accompanying extension methods to allow read and write across the HTTP/1.1 protocol. Instead of using NFS or SMB, WebDAV offers file transfers via HTTP.\n\nThe goal of this article is to setup a simple WebDAV configuration using a web server.\n\n"
    },
    {
      "title": "Apache",
      "level": 3,
      "content": "Install the Apache HTTP Server.\n\nUncomment the modules for DAV and auth_digest:\n\n```\nLoadModule dav_module modules/mod_dav.so\nLoadModule dav_fs_module modules/mod_dav_fs.so\nLoadModule dav_lock_module modules/mod_dav_lock.so\nLoadModule auth_digest_module modules/mod_auth_digest.so\n```\n\nUncomment the include line for conf/extra/httpd-dav.conf:\n\n```\n# Distributed authoring and versioning (WebDAV)\nInclude conf/extra/httpd-dav.conf\n```\n\nCheck the following line in /etc/httpd/conf/extra/httpd-dav.conf:\n\n```\nDAVLockDB /etc/httpd/var/DavLock\n```\n\nMake sure you add it outside of any other directives, for instance right under the DocumentRoot definition.\n\nIf you want a clean setup consider a /srv/dav structure instead of /etc/httpd/uploads, but that's what i found at the default.\n\nNext, check the aliases (also outside of any directives) in /etc/httpd/conf/extra/httpd-dav.conf:\n\n```\nDavLockDB \"/etc/httpd/var/DavLock\"\n\nAlias /uploads \"/etc/httpd/uploads\"\n\n<Directory \"/etc/httpd/uploads\">\n    Dav On\n\n    AuthType Digest\n    AuthName DAV-upload\n    # You can use the htdigest program to create the password database:\n    #   htdigest -c \"/etc/httpd/user.passwd\" DAV-upload admin\n    AuthUserFile \"/etc/httpd/user.passwd\"\n    AuthDigestProvider file\n\n    # Allow universal read-access, but writes are restricted\n    # to the admin user.\n    <RequireAny>\n        # require that these methods are used (PROPFIND allows directory listing) ...\n        Require method GET POST OPTIONS PROPFIND\n        # or that the user is admin (f.e. PUT is required to write a file, MKCOL for folders)\n        Require user admin\n        \n        # -- Notes ---\n        # more info on methods in the webdav rfc: http://www.webdav.org/specs/rfc4918.html\n        # POST treated as PUT: https://datatracker.ietf.org/doc/html/rfc5995\n       \n        \n    </RequireAny>\n</Directory>\n```\n\nCreate the directory:\n\n```\n# mkdir -p /etc/httpd/var\n```\n\nCheck the permissions of DavLockDB's directory and ensure it is writable by the webserver user http:\n\n```\n# chown -R http:http /etc/httpd/var\n# mkdir -p /etc/httpd/uploads\n# chown -R http:http /etc/httpd/uploads\n```\n\n"
    },
    {
      "title": "nginx",
      "level": 3,
      "content": "Install nginx-mainline (the mainline variant of nginx) and nginx-mainline-mod-dav-extAUR.\n\nAt the top of your /etc/nginx/nginx.conf and outside any blocks, add:\n\n```\nload_module /usr/lib/nginx/modules/ngx_http_dav_ext_module.so;\n```\n\nAdd a new location for WebDAV to your server block, for example:\n\n```\nlocation /dav {\n    root   /srv/http;\n\n    dav_methods PUT DELETE MKCOL COPY MOVE;\n    dav_ext_methods PROPFIND OPTIONS;\n\n    # Adjust as desired:\n    dav_access user:rw group:rw all:r;\n    client_max_body_size 0;\n    create_full_put_path on;\n    client_body_temp_path /srv/client-temp;\n    autoindex on;\n\n    allow 192.168.178.0/24;\n    deny all;\n}\n```\n\nThe above example requires the directories /srv/http/dav and /srv/client-temp to exist.\n\nYou may want to use bind mounts to make other directories accessible via WebDAV.\n\n"
    },
    {
      "title": "rclone",
      "level": 3,
      "content": "Install the rclone package. It supports exporting a remote or local directory using webdav.\n\nTo serve the contents of /srv/http with no authentication:\n\n```\n$ rclone serve webdav /srv/http\n```\n\n"
    },
    {
      "title": "Caddy",
      "level": 3,
      "content": "Install the caddy-webdav-gitAUR package, or use xcaddy-binAUR and build Caddy with the WebDAV module:\n\n```\n$ xcaddy build --with github.com/mholt/caddy-webdav\n```\n\nTo serve the contents of /srv/webdav on the path dav using port 80, add the following to your Caddyfile:\n\n```\n:80 {\n    rewrite /dav /dav/\n    webdav /dav/* {\n       root /srv/webdav\n       prefix /dav\n    }\n    file_server\n}\n```\n\nThen run Caddy:\n\n```\n$ caddy run\n```\n\n"
    },
    {
      "title": "Cadaver",
      "level": 3,
      "content": "Install the cadaver package.\n\nAfter installation, test the WebDAV server:\n\n```\n$ cadaver http://localhost/dav\ndav:/dav/> mkcol test\nCreating `test': succeeded.\ndav:/dav/> ls\nListing collection `/dav/': succeeded.\nColl: test\n```\n\n"
    },
    {
      "title": "Dolphin",
      "level": 3,
      "content": "To create a permanent WebDAV folder in Dolphin select Network in the remotes section of the places sidebar, then press the Add Network Folder button. The network folder wizard will appear. Select WebFolder (webdav), and fill in the subsequent form.\n\nAlternately just click the path bar and then enter the url with webdav:// protocol specifier.\n\n"
    },
    {
      "title": "Nautilus",
      "level": 3,
      "content": "Install the gvfs and gvfs-dnssd packages.\n\nIn Nautilus choose \"connect to server\" and enter the address with dav:// or davs:// protocol specified:\n\n```\ndav://127.0.0.1/dav\n```\n\n"
    },
    {
      "title": "rclone",
      "level": 3,
      "content": "rclone is a command line tool that lets you sync to/from, or mount (with many caching options), remote file systems including WebDAV.\n\n"
    },
    {
      "title": "Thunar",
      "level": 3,
      "content": "Install the gvfs and gvfs-dnssd packages.\n\nIn Thunar press Ctrl+l and enter the address with dav or davs protocol specified:\n\n```\ndavs://webdav.yandex.ru\n```\n\n"
    },
    {
      "title": "Authentication",
      "level": 2,
      "content": "There are numerous different protocols you can use:\n\n- plain\n- digest\n- others\n\n"
    },
    {
      "title": "Apache",
      "level": 3,
      "content": "Using htdigest(1) (remove the -c option if the file exists):\n\n```\n# htdigest -c /etc/httpd/conf/passwd WebDAV username\n```\n\nUsing plain htpasswd(1) (remove the -c option if the file exists):\n\n```\n# htpasswd -c /etc/httpd/conf/passwd username\n```\n\nNext, httpd.conf must be edited to enable authentication. One method would be to require the user foo for everything:\n\n```\n<Directory \"/home/httpd/html/dav\">\n  DAV On\n  AllowOverride None\n  Options Indexes FollowSymLinks\n  AuthType Digest # substitute \"Basic\" for \"Digest\" if you used htpasswd above\n  AuthName \"WebDAV\"\n  AuthUserFile /etc/httpd/conf/passwd\n  Require user foo\n</Directory>\n```\n\nIf you want to permit everybody to read, you could use this in your httpd.conf\n\n```\n<Directory \"/home/httpd/html/dav\">\n  DAV On\n  AllowOverride None\n  Options Indexes FollowSymLinks\n  AuthType Digest # substitute \"Basic\" for \"Digest\" if you used htpasswd above\n  AuthName \"WebDAV\"\n  AuthUserFile /etc/httpd/conf/passwd\n  Require all granted\n  <LimitExcept GET HEAD OPTIONS PROPFIND>\n    Require user foo\n  </LimitExcept>\n</Directory>\n```\n\nDo not forget to restart httpd.service after making changes.\n\n"
    },
    {
      "title": "Some file explorers cannot edit directories in nginx WebDAV",
      "level": 3,
      "content": "nginx WebDAV requires a directory path ends with a slash (/), but some file explorers does not append a / at the end of the path.\n\nThis can be worked-around, by either removing the corresponding checking code and recompile it, or by appending the following code in a nginx server block to add / at the end of a request, if needed:\n\n```\n# The configuration was based on: https://nworm.icu/post/nginx-webdav-dolphin-deken/\n# if the request method is MKCOL or is to a directory, add / at the end of the request if it was missing \nif ($request_method = MKCOL) {\n    rewrite ^(.*[^/])$ $1/ break; \n}\nif (-d $request_filename) { \n    rewrite ^(.*[^/])$ $1/ break; \n}\n\n# if the request method is copy or move a directory, add / at the end of the request if it was missing\nset $is_copy_or_move 0;\nset $is_dir 0;\nif (-d $request_filename) { \n    set $is_dir 1; \n}\nif ($request_method = COPY) {\n    set $is_copy_or_move 1;\n}\nif ($request_method = MOVE) {\n    set $is_copy_or_move 1;\n}\nset $is_rewrite \"${is_dir}${is_copy_or_move}\";\nif ($is_rewrite = 11) {\n    rewrite ^(.*[^/])$ $1/ break;\n}\n```\n\n"
    }
  ]
}