{
  "title": "Ps2pdf",
  "url": "https://wiki.archlinux.org/title/Ps2pdf",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "This article covers software to view, edit and convert PDF, PostScript (PS), DjVu (déjà vu) and XPS files.\n\n"
    },
    {
      "title": "Engines",
      "level": 2,
      "content": "- DjVuLibre — Suite to create, manipulate and view DjVu documents.\n\n- Ghostscript — Interpreter for PostScript and PDF. Provides the gs(1) command-line interface, see also /usr/share/doc/ghostscript/*/Use.htm (online), along with many wrapper scripts like ps2pdf and pdf2ps.\n\n- libgxps — GObject based library for handling and rendering XPS documents.\n\n- libspectre — Small library for rendering Postscript documents.\n\n- Mupdf — MuPDF is a lightweight PDF, XPS, and EPUB viewer, consisting of a software library, command line tools, and viewers.\n\n- Poppler — PDF rendering library based on Xpdf. For CJK (Chinese, Japanese, Korean) support with Poppler, install poppler-data.\n\n"
    },
    {
      "title": "Framebuffer",
      "level": 3,
      "content": "- fbgs — Poor man's PostScript/pdf viewer for the linux framebuffer console.\n\n- fbpdf — Small framebuffer PDF and DjVu viewer based on MuPDF, with Vim keybindings and written in C\n\n- jfbview — Framebuffer PDF and image viewer. Features include Vim-like controls, zoom-to-fit, a TOC (outline) view and fast multi-threaded rendering.\n\n"
    },
    {
      "title": "Graphical",
      "level": 3,
      "content": "- apvlv — Lightweight document viewer with Vim keybindings using GTK libraries. Supports PDF, DjVu, EPUB, HTML and TXT.\n\n- Atril — Simple multi-page document viewer for MATE. Supports DjVu, DVI, EPS, EPUB, PDF, PostScript, TIFF, XPS and Comicbook.\n\n- CorePDF — Simple lightweight PDF viewer based on Qt and poppler. Part of C-Suite.\n\n- Deepin Document Viewer — A simple PDF and DjVu reader, supporting bookmarks, highlights and annotations.\n\n- DjView — Viewer for DjVu documents.\n\n- Emacs — See also pdf-tools for improved pdf support (emacs-pdf-tools-gitAUR) and the djvu package for djvu support.\n\n- ePDFView — Lightweight PDF document viewer using the Poppler and GTK libraries. Development stopped.\n\n- Foxit Reader — Small, fast (compared to Acrobat) proprietary PDF viewer. Releases (outside of security updates) are discontinued for Linux (November 2020).\n\n- GNOME Document Viewer — Document viewer for GNOME using GTK. Supports DjVu, DVI, EPS, PDF, PostScript, TIFF, XPS and Comicbook. Part of gnome.\n\n- gv — Graphical user interface for the Ghostscript interpreter that allows to view and navigate through PostScript and PDF documents.\n\n- llpp — Very fast PDF reader based off of MuPDF, that supports continuous page scrolling, bookmarking, and text search through the whole document.\n\n- MuPDF — Very fast EPUB, FictionBook, PDF, XPS and Comicbook viewer written in portable C. Features CJK font support and vim-like bindings.\n\n- Okular — Universal document viewer for KDE. Supports CHM, Comicbook, DjVu, DVI, EPUB, FictionBook, Mobipocket, ODT, PDF, Plucker, PostScript, TIFF and XPS. Part of kde-graphics.\n\n- Papers — Document viewer for GNOME using GTK. Supports DjVu, PDF, TIFF and Comicbook.\n\n- pdfpc — Presenter console with multi-monitor support for PDF files.\n\n- qpdfview — Tabbed document viewer. It uses Poppler for PDF support, libspectre for PS support, DjVuLibre for DjVu support, CUPS for printing support and the Qt toolkit for its interface.\n\n- Sioyek — Lightweight PDF viewer based on MuPDF with features designed for viewing research papers and technical books, e.g., marking, bookmarking, highlighting, searchable command palette, jumping to references, and more.\n\n- Xpdf — Viewer that can decode LZW and read encrypted PDFs.\n\n- Xreader — Document viewer part of the X-Apps Project. Supports DjVu, DVI, EPUB, PDF, PostScript, TIFF, XPS, Comicbook.\n\n- Zathura — Highly customizable and functional document viewer (plugin based). Supports PDF, DjVu, PostScript and Comicbook.\n\n"
    },
    {
      "title": "Comparison",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nTable content:\nName | PDF | PostScript | DjVu | XPS | PDF forms | PDF Annotation | Non-rectangle selection | License | Wayland native\nAdobe Reader | Custom | – | – | – | Yes | – | Yes | proprietary | –\napvlv | Poppler | – | DjVuLibre | – | No | – | No (not by default, at least) | GPLv2 | –\nAtril | Poppler | libspectre | DjVuLibre | libgxps | Yes | – | – | GPLv2 | Yes\nDjView | – | – | DjVuLibre | – | – | – | – | GPLv2 | –\nEmacs | Ghostscript1 | DjVuLibre1 | – | No | Yes | Yes | GPLv3 | –\nEmacs pdf-tools | Poppler | – | – | – | – | Yes | Yes | GPLv3 | –\nePDFView | Poppler | – | – | – | No | – | – | GPLv2 | –\nFoxit Reader | Custom | – | – | – | Yes | Yes | Yes | proprietary | –\nGNOME Document Viewer | Poppler | libspectre | DjVuLibre | libgxps | Yes | Yes | Yes | GPLv2 | Yes\ngv | Ghostscript | – | – | No | – | – | GPLv3 | –\nllpp | libmupdf | – | – | libmupdf | Yes | – | – | GPLv3 | –\nMuPDF | Custom | – | – | Custom | Yes (mupdf-gl) | Yes (mupdf-gl) | Yes (mupdf-gl) | AGPLv3 | No\nOkular | Poppler | libspectre | DjVuLibre | Custom | Yes | Yes | Yes | GPL, LGPL | Yes\nPDF4QT | Custom | – | – | – | No | Yes | Yes | LGPLv3 | Yes\npdfpc | Poppler | – | – | – | No | – | – | GPLv2 | –\nqpdfview | Poppler | libspectre1 | DjVuLibre1 | – | Yes | Yes | – | GPLv2 | Yes (lacks scaling support)\nXpdf | Custom | – | – | – | No | – | – | GPLv3 | Yes\nXreader | Poppler | libspectre1 | DjVuLibre1 | libgxps1 | Yes | Yes | Yes | GPLv2 | –\nZathura | libmupdf1 / Poppler1 | libspectre1 | DjVuLibre1 | libmupdf1 | No | No | Yes | zlib | Yes\n\n1. Optional dependency needs to be installed\n\n"
    },
    {
      "title": "PDF forms",
      "level": 4,
      "content": "The PDF forms column in the above table refers to AcroForms support. If you do not need your input to be directly extractable from the PDF, you can also use the applications in #Graphical PDF editing to put text on top of a PDF. PDF forms can be created with LibreOffice Writer (View > Toolbars > Form Controls) and the advanced PDF editors.\n\nThe proprietary and deprecated XFA format for forms is not fully supported by Poppler[1][2] and only supported by Adobe Reader and Master PDF Editor.\n\nAlternatively, web browsers such as Firefox or Chromium feature a built-in PDF viewer capable of filling out forms.\n\n"
    },
    {
      "title": "Editors that can import PDF files",
      "level": 3,
      "content": "- Scribus can import and export PDF; text is imported as polygons.[3]\n- LibreOffice Draw can import and export PDF; text is imported as text; embedded fonts are substituted.[4][5]\n- Inkscape can import and export PDF; text is imported as cloned glyphs or text; with the latter embedded fonts are substituted.\n- Graphics editors like GIMP and krita can also import and export PDFs at the cost of rasterization.\n\n"
    },
    {
      "title": "Basic editors",
      "level": 3,
      "content": "- flpsed — A PostScript and PDF annotator, only supports text boxes.\n\n- HandyOutliner for DjVu / PDF — Make easier and faster the process of creating bookmarks for DjVu and PDF documents.\n\n- jPDF Tweak — Java Swing application that can combine, split, rotate, reorder, watermark, encrypt, sign, and otherwise tweak PDF files.\n\n- Paper Clip — PDF document metadata editor to edit the title, author, keywords and more details.\n\n- PDF Arranger — Helps merge or split pdf documents and rotate, crop and rearrange pages. It is a maintained fork of PDF-Shuffler.\n\n- PDF Chain — GTK front-end for PDFtk, written in C++, supporting concatenation, burst, watermarks, attaching files and more.\n\n- PdfJumbler — Simple tool to rearrange, merge, delete and rotate pages in PDF files.\n\n- PDF Mix Tool — Qt front-end for PoDoFo, written in C++, supports splitting, merging, rotating and mixing PDF files.\n\n- PDFsam — Open source application, written in Java, supports merging, splitting and rotating.\n\n- PDF Slicer — Simple application to extract, merge, rotate and reorder pages of PDF documents.\n\n- PDF Tricks — Simple, efficient application for small manipulations in PDF files using Ghostscript.\n\n"
    },
    {
      "title": "Cropping tools",
      "level": 3,
      "content": "- briss — Java GUI to crop pages of PDF documents to one or more regions selected.\n\n- krop — Simple graphical tool to crop the pages of PDF files.\n\n- pdfCropMargins — Automatically crops the margins of PDF files.\n\n- PdfHandoutCrop — Tool to crop pdf handout with multiple pages per sheet.\n\n"
    },
    {
      "title": "Advanced editors",
      "level": 3,
      "content": "- Master PDF Editor — Functional proprietary PDF editor. Latest version free for non-commercial use. The -free package is outdated but lacks a watermark.\n\n- PDF Studio — All-in-one proprietary PDF editor similar to Adobe Acrobat.\n\n- PDF4QT — Open source PDF editor.\n\n"
    },
    {
      "title": "Comparison of advanced editors",
      "level": 4,
      "content": "Table content:\nName | Cost (USD, lifetime) | Page Labels | Form Designer | Content Editing (Text and Images) | Optimize PDFs | Digitally Sign PDFs | License\nMaster PDF Editor | 85.34 | No | Yes | Yes | Yes | Yes | proprietary\nQoppa PDF Studio Standard | 99 | Yes | No | No | No | No | proprietary\nQoppa PDF Studio Pro | 139 | Yes | Yes | Yes | Yes | Yes | proprietary\n\n"
    },
    {
      "title": "PDF tools",
      "level": 2,
      "content": "See also Ghostscript.\n\n- Camelot — Camelot: PDF Table Extraction for Humans.\n\n- Coherent PDF — Proprietary non-free command line tools to manipulate PDF files including merge, encrypt, decrypt, scale, crop, rotate, bookmarks, stamp, logos, page numbers.\n\n- DiffPDF — Compare the text or the visual appearance of each page in two PDF files.\n\n- mupdf-tools — Tools developed as part of MuPDF, contains mutool(1) and muraster.\n\n- pdfcpu — Command-line tool to create and modify PDFs.\n\n- pdf_extbook — Extract bookmarked PDF pages.\n\n- pdfgrep — Commandline utility to search text in PDF files.\n\n- pdfjam — Can be used to n-up, join, rotate and flip PDFs and arrange them into a format suitable for book binding.\n\n- pdfminer.six — Community maintained fork of pdfminer, a text extraction tool for PDF documents.\n\n- pdf2svg — Convert PDF files to SVG files.\n\n- PDFtk — Simple tool for doing everyday things with PDF documents.\n\n- QPDF — Content-preserving PDF transformation system.\n\n- Stapler — Light alternative to PDFtk using the PyPDF2 library.\n\n- Tabula — Tabula is a tool for liberating data tables trapped inside PDF files.\n\n- Vector Slicer — Export multi-page PDFs from an SVG.\n\n- verapdf — A purpose-built, open source, file-format validator covering all PDF/A and PDF/UA parts and conformance levels.\n\n"
    },
    {
      "title": "Create a PDF from images",
      "level": 3,
      "content": "With GraphicsMagick:\n\n```\n$ gm convert 1.jpg 2.jpg 3.jpg out.pdf\n```\n\nWith ImageMagick:\n\n```\n$ magick 1.jpg 2.jpg 3.jpg out.pdf\n```\n\nNote that ImageMagick's output is lossy. For lossless PDF creation from jpeg, use img2pdf.\n\n"
    },
    {
      "title": "Concatenate PDFs",
      "level": 3,
      "content": "With Ghostscript:\n\n```\n$ gs -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=out.pdf -dBATCH 1.pdf 2.pdf 3.pdf\n```\n\nWith PDFtk:\n\n```\n$ pdftk 1.pdf 2.pdf 3.pdf cat output out.pdf\n```\n\nWith Poppler:\n\n```\n$ pdfunite 1.pdf 2.pdf 3.pdf out.pdf\n```\n\nWith QPDF:\n\n```\n$ qpdf --empty --pages 1.pdf 2.pdf 3.pdf -- out.pdf\n```\n\n"
    },
    {
      "title": "Extract text from PDF",
      "level": 3,
      "content": "With Poppler and maintaining the layout:\n\n```\n$ pdftotext -layout in.pdf out.txt\n```\n\nSee also pdftotext(1).\n\nWith calibre:\n\n```\n$ ebook-convert in.pdf out.txt\n```\n\nResults vary between applications, depending on the PDF file.\n\n"
    },
    {
      "title": "Decrypt a PDF",
      "level": 3,
      "content": "This section lists commands to decrypt a PDF to an unencrypted file. Note that most PDF viewers also support encrypted PDFs.\n\nWith PDFtk:\n\n```\n$ pdftk in.pdf input_pw password output out.pdf\n```\n\nWith Poppler to PostScript:\n\n```\n$ pdftops -upw password in.pdf out.ps\n```\n\nWith QPDF:\n\n```\n$ qpdf --decrypt --password=password in.pdf out.pdf\n```\n\n"
    },
    {
      "title": "Encrypt a PDF",
      "level": 3,
      "content": "The user password is used for encryption, the owner password to restrict operations once the document is decrypted, for more information, see Wikipedia:PDF#Encryption and signatures.\n\nWith PDFtk:\n\n```\n$ pdftk in.pdf output out.pdf user_pw password\n```\n\nWith PoDoFo:\n\n```\n$ podofoencrypt -u user_password -o owner_password in.pdf out.pdf\n```\n\nWith QPDF:\n\n```\n$ qpdf --encrypt user_password owner_password key_length -- in.pdf out.pdf\n```\n\nwhere key_length can be 40, 128 or 256.\n\n"
    },
    {
      "title": "Extract images from a PDF",
      "level": 3,
      "content": "With poppler, saving images as JPEG:\n\n```\n$ pdfimages infile.pdf -j outfileroot\n```\n\n"
    },
    {
      "title": "Extract page range from PDF, split multipage PDF document",
      "level": 3,
      "content": "With Ghostscript as a single file[6]\n\n```\n$ gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER -dFirstPage=first -dLastPage=last -sOutputFile=outfile.pdf infile.pdf\n```\n\nWith PDFtk as a single file:\n\n```\n$ pdftk infile.pdf cat first-last output outfile.pdf\n```\n\nWith Poppler as separate files:\n\n```\n$ pdfseparate -f first -l last infile.pdf outfileroot-%d.pdf\n```\n\nWith QPDF as a single file:\n\n```\n$ qpdf --empty --pages infile.pdf first-last -- outfile.pdf\n```\n\nWith mutool as a single file:\n\n```\n$ mutool clean -g infile.pdf outfile.pdf first-last\n```\n\n"
    },
    {
      "title": "Impose a PDF (nup)",
      "level": 3,
      "content": "PDF Imposition is the process by which multiple input pages are combined into one output page, layed out into a rowsxcolumns grid.\n\nIt can be done with pdfjam (notice that wrapper scripts such as pdfnup and pdfbook are deprecated):\n\n```\n$ pdfjam --nup rowsxcolumns input.pdf --outfile output.pdf\n```\n\nor with pdfsak[dead link 2025-04-06 ⓘ]:\n\n```\n$ pdfsak --input-file input.pdf --output output.pdf --nup rows columns\n```\n\n"
    },
    {
      "title": "Inspect metadata",
      "level": 3,
      "content": "With ExifTool:\n\n```\n$ exiftool -All file.pdf\n```\n\nWith Poppler:\n\n```\n$ pdfinfo file.pdf\n```\n\n"
    },
    {
      "title": "Using ExifTool",
      "level": 4,
      "content": "With ExifTool:\n\n```\n$ exiftool -All= -overwrite_original input.pdf\n$ mv input.pdf /tmp/temp.pdf\n$ qpdf --linearize /tmp/temp.pdf input.pdf\n```\n\nThe linearize step is needed to prevent recovery of deleted metadata. See this SuperUser question and the related ExifTool forum thread.\n\n"
    },
    {
      "title": "Using pdftk",
      "level": 4,
      "content": "Many PDFs store document metadata using both an Info dictionary (old school) and an XMP stream (new school). This pdftk command remove the XMP stream from the PDF altogether. It does not remove the Info dictionary.\n\nNote that objects inside the PDF might have their own, separate XMP metadata streams, and that this command does not remove those. It only removes the PDF’s document‐level XMP stream.\n\n```\n$ pdftk input.pdf drop_xmp output output.pdf\n```\n\n"
    },
    {
      "title": "Reduce size of a PDF",
      "level": 3,
      "content": "PDF size can be reduced by setting an appropriate optimization or compression level.\n\nWith Ghostscript one of:\n\n```\n$ ps2pdf -dPDFSETTINGS=/screen in.pdf out.pdf\n```\n\nor\n\n```\n$ gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -sOutputFile=out.pdf in.pdf\n```\n\nFor different settings see the documentation.\n\nThere is also shrinkpdfAUR, a script wrapping gs.\n\n"
    },
    {
      "title": "Rasterize a PDF",
      "level": 3,
      "content": "These commands will convert your PDF into images.\n\nWith GraphicsMagick to convert a specific page into an image file:\n\n```\n$ gm convert -density dpi infile.pdf[page] outfile.jpg\n```\n\nWith ImageMagick to convert a specific page into an image file:\n\n```\n$ magick convert -density dpi infile.pdf[page] outfile.jpg\n```\n\nWith ImageMagick to convert all pages into another PDF file composed by an image file per page:\n\n```\n$ magick convert -density dpi infile.pdf outfile.pdf\n```\n\nWith Poppler to convert all pages into one image file per page:\n\n```\n$ pdftoppm -jpeg -r dpi infile.pdf outfileroot\n```\n\nWith Poppler to convert a specific page into an image file:\n\n```\n$ pdftoppm -jpeg -r dpi -f page -singlefile infile.pdf outfileroot\n```\n\n"
    },
    {
      "title": "Split PDF pages",
      "level": 3,
      "content": "With mupdf-tools to split every page vertically into two pages:\n\n```\n$ mutool poster -y 2 in.pdf out.pdf\n```\n\nCan be used to undo simple imposition.\n\n"
    },
    {
      "title": "Add an image",
      "level": 3,
      "content": "Adding an image to any location in a PDF can be done\n\n- with ImageMagick (convert), xvAUR and pdftk. (Wrapper script)\n- with xournalAUR\n- with LibreOffice\n\nDetails on these and other solutions can be found on StackExchange.\n\n"
    },
    {
      "title": "Add digital signature to PDF",
      "level": 3,
      "content": "jsignpdfAUR can digitally sign PDF files with X.509 certificates in GUI and CLI.\n\nReaders such as Okular and MuPDF can sign PDFs with digital signatures. This requires a PFX certificate, which can be created with an OpenSSL command:\n\n```\n$ openssl req -x509 -days 365 -newkey rsa:2048 -keyout cert.pem -out cert.pem\n$ openssl pkcs12 -export -in cert.pem -out cert.pfx\n```\n\nMuPDF users can then sign PDFs with the cert.pfx using the graphical interface, or its mutool-sign tool.\n\nOkular users must import cert.pfx into a certificate store such as the one in the default Firefox profile.[7][dead link 2024-01-13 ⓘ] With Firefox this is done through Settings > Privacy & Security > View Certificates > Your Certificates > Import and selecting cert.pfx. Afterwards Okular will offer this certificate to be used when signing PDFs.\n\nLibreoffice can also sign PDFs.[8]\n\n"
    },
    {
      "title": "Removing annotations from a PDF",
      "level": 3,
      "content": "With pdftk [9]:\n\n```\n$ pdftk in.pdf output - uncompress | sed '/^\\/Annots/d' | pdftk - output out.pdf compress\n```\n\nWith perl-cam-pdfAUR:\n\n```\n$ rewritepdf.pl -C in.pdf out.pdf\n```\n\nSee https://superuser.com/a/1051543 for more information.\n\n"
    },
    {
      "title": "Add page numbers",
      "level": 3,
      "content": "With pdfsak[dead link 2025-04-06 ⓘ]:\n\n```\n$ pdfsak --input-file input.pdf --output output.pdf --text \"\\large \\$page/\\$pages\" br 0.99 0.99 --latex-engine xelatex --font \"Noto Regular\"\n```\n\n"
    },
    {
      "title": "Add page labels",
      "level": 3,
      "content": "Page labels are logical page numbers shown in the navigation bar of your PDF reader. They are useful for example if the first pages of the PDF are indices numbered with roman numbers (I, II, etc.), while the page numbered \"1\" corresponds to a PDF page greater than 1, and you want the page number shown in the navigation bar to corresponds to the page number shown in the physical page.\n\nThis should not be confused with adding page numbers into a physical page. See section 12.4.2 of PDF reference to better understand page labels.\n\n1. Using pagelabels-py, let's say we have a PDF named my_document.pdf, that has 12 pages. Pages 1 to 4 should be labelled Intro I to Intro IV. Pages 5 to 9 should be labelled 2 to 6. Pages 10 to 12 should be labelled Appendix A to Appendix C We can issue the following list of commands: $ python3 -m pagelabels --delete \"my_document.pdf\" $ python3 -m pagelabels --startpage 1 --prefix \"Intro \" --type \"roman uppercase\" \"my_document.pdf\" $ python3 -m pagelabels --startpage 5 --firstpagenum 2 \"my_document.pdf\" $ python3 -m pagelabels --startpage 10 --prefix \"Appendix \" --type \"letters uppercase\" \"my_document.pdf\" Note: pagelabels-py will convert your file to PDF 1.3 specification\n1. Using pdftk, create a metadata.txt file with labels: PageLabelBegin PageLabelNewIndex: 1 PageLabelStart: 1 PageLabelPrefix: Cover PageLabelNumStyle: NoNumber PageLabelBegin PageLabelNewIndex: 2 PageLabelStart: 1 PageLabelPrefix: Back Cover PageLabelNumStyle: NoNumber PageLabelBegin PageLabelNewIndex: 3 PageLabelStart: 1 PageLabelNumStyle: LowercaseRomanNumerals PageLabelBegin PageLabelNewIndex: 27 PageLabelStart: 1 PageLabelNumStyle: DecimalArabicNumerals Where: PageLabelBegin signal a new page label definition will follow PageLabelNewIndex is the PDF page index from which the numbering style applies, counting from one. The numbering style will continue until the next page label or, if there are no more page labels, until the end of the document. PageLabelStart is the starting number. For example, if you specify 5 here, the pages will be numbered 5, 6, 7, ... PageLabelPrefix a text to put before the number in page labels. PageLabelNumStyle can be DecimalArabicNumerals, UppercaseRomanNumerals, LowercaseRomanNumerals, UppercaseLetters, LowercaseLetters or NoNumber. Then use: pdftk book.pdf update_info_utf8 metadata.txt output book-with-metadata.pdf\n\n- Pages 1 to 4 should be labelled Intro I to Intro IV.\n- Pages 5 to 9 should be labelled 2 to 6.\n- Pages 10 to 12 should be labelled Appendix A to Appendix C\n- We can issue the following list of commands: $ python3 -m pagelabels --delete \"my_document.pdf\" $ python3 -m pagelabels --startpage 1 --prefix \"Intro \" --type \"roman uppercase\" \"my_document.pdf\" $ python3 -m pagelabels --startpage 5 --firstpagenum 2 \"my_document.pdf\" $ python3 -m pagelabels --startpage 10 --prefix \"Appendix \" --type \"letters uppercase\" \"my_document.pdf\"\n- Note: pagelabels-py will convert your file to PDF 1.3 specification\n\n```\n$ python3 -m pagelabels --delete \"my_document.pdf\"\n$ python3 -m pagelabels --startpage 1 --prefix \"Intro \" --type \"roman uppercase\" \"my_document.pdf\"\n$ python3 -m pagelabels --startpage 5 --firstpagenum 2 \"my_document.pdf\"\n$ python3 -m pagelabels --startpage 10 --prefix \"Appendix \" --type \"letters uppercase\" \"my_document.pdf\"\n```\n\n```\nPageLabelBegin\nPageLabelNewIndex: 1\nPageLabelStart: 1\nPageLabelPrefix: Cover\nPageLabelNumStyle: NoNumber\nPageLabelBegin\nPageLabelNewIndex: 2\nPageLabelStart: 1\nPageLabelPrefix: Back Cover\nPageLabelNumStyle: NoNumber\nPageLabelBegin\nPageLabelNewIndex: 3\nPageLabelStart: 1\nPageLabelNumStyle: LowercaseRomanNumerals\nPageLabelBegin\nPageLabelNewIndex: 27\nPageLabelStart: 1\nPageLabelNumStyle: DecimalArabicNumerals\n```\n\n- Where: PageLabelBegin signal a new page label definition will follow PageLabelNewIndex is the PDF page index from which the numbering style applies, counting from one. The numbering style will continue until the next page label or, if there are no more page labels, until the end of the document. PageLabelStart is the starting number. For example, if you specify 5 here, the pages will be numbered 5, 6, 7, ... PageLabelPrefix a text to put before the number in page labels. PageLabelNumStyle can be DecimalArabicNumerals, UppercaseRomanNumerals, LowercaseRomanNumerals, UppercaseLetters, LowercaseLetters or NoNumber.\n- Then use: pdftk book.pdf update_info_utf8 metadata.txt output book-with-metadata.pdf\n\n```\npdftk book.pdf update_info_utf8 metadata.txt output book-with-metadata.pdf\n```\n\nSee this SuperUser question for more details.\n\n"
    },
    {
      "title": "Extract bookmarks",
      "level": 3,
      "content": "With pdftk:\n\n```\n$ pdftk file.pdf dump_data_utf8 | grep '^Bookmark'\n```\n\nWith qpdf:\n\n```\n$ qpdf --json --json-key=outlines file.pdf\n```\n\nSee https://unix.stackexchange.com/questions/143886/how-to-extract-bookmarks-from-a-pdf-file for more information.\n\n"
    },
    {
      "title": "With pdftk",
      "level": 4,
      "content": "Create a text file bookmark_definitions.txt with bookmark definitions in the following format:\n\n```\nBookmarkBegin\nBookmarkTitle: Chapter 1\nBookmarkLevel: 1\nBookmarkPageNumber: 1\nBookmarkBegin\nBookmarkTitle: Chapter 1.1\nBookmarkLevel: 2\nBookmarkPageNumber: 2\nBookmarkBegin\nBookmarkTitle: Chapter 1.2\nBookmarkLevel: 2\nBookmarkPageNumber: 3\nBookmarkBegin\nBookmarkTitle: Chapter 1.3\nBookmarkLevel: 2\nBookmarkPageNumber: 4\nBookmarkBegin\nBookmarkTitle: Chapter 1.3.1\nBookmarkLevel: 3\nBookmarkPageNumber: 5\nBookmarkBegin\nBookmarkTitle: Chapter 2\nBookmarkLevel: 1\nBookmarkPageNumber: 6\n```\n\nWhere\n\nIn this example, the above file will create the following bookmark structure:\n\n- Chapter 1 Chapter 1.1 Chapter 1.2 Chapter 1.3 Chapter 1.3.1\n- Chapter 2\n\n- Chapter 1.1\n- Chapter 1.2\n- Chapter 1.3 Chapter 1.3.1\n\n- Chapter 1.3.1\n\nApply the bookmarks with the following command:\n\n```\n$ pdftk input.pdf update_info_utf8 bookmark_definitions.txt output output.pdf\n```\n\n"
    },
    {
      "title": "Extract pages contained within a bookmark",
      "level": 3,
      "content": "To extract the pages contained within a bookmark, you can use pdf_extbook-gitAUR.\n\nWith pdf_extbook file you will be prompted on what bookmark whose pages you want to extract and where to save it. To extract all bookmarks of a given hierarchical level:\n\n```\n$ pdf_extbook file -a level output_file_stem\n```\n\n"
    },
    {
      "title": "Remove blank pages",
      "level": 3,
      "content": "One can use the following script to remove blank pages form a PDF file (credit: SuperUser post):\n\n```\n#!/bin/sh\n\nIN=\"$1\"\nfilename=$(basename \"${IN}\")\nfilename=\"${filename%.*}\"\nPAGES=$(pdfinfo \"$IN\" | grep ^Pages: | tr -dc '0-9')\n\nnon_blank() {\n\tfor i in $(seq 1 $PAGES); do\n\t\tPERCENT=$(gs -o - -dFirstPage=${i} -dLastPage=${i} -sDEVICE=ink_cov \"$IN\" | grep CMYK | nawk 'BEGIN { sum=0; } {sum += $1 + $2 + $3 + $4;} END { printf \"%.5f\\n\", sum } ')\n\t\tif [ $(echo \"$PERCENT > 0.001\" | bc) -eq 1 ]; then\n\t\t\techo $i\n\t\t\t#echo $i 1>&2\n\t\tfi\n\t\techo -n . 1>&2\n\tdone | tee \"$filename.tmp\"\n\techo 1>&2\n}\n\nset +x\npdftk \"${IN}\" cat $(non_blank) output \"${filename}_noblanks.pdf\"\n```\n\nUse it like pdf_remove_blank_pages input.pdf.\n\nThe script needs pdftk, nawk and ghostscript.\n\n"
    },
    {
      "title": "Find fonts used in a PDF",
      "level": 3,
      "content": "The pdffonts(1) command (from poppler), can be used to find which fonts a PDF uses and if they have been embedded in it or not:\n\n```\n$ pdffonts file.pdf\n```\n\n```\nname                                 type              encoding         emb sub uni object ID\n------------------------------------ ----------------- ---------------- --- --- --- ---------\nTimes-Roman                          Type 1            Custom           no  no  no       8  0\nTimes-Italic                         Type 1            Standard         no  no  no       9  0\nTimes-Bold                           Type 1            Standard         no  no  no       7  0\nHelvetica                            Type 1            Standard         no  no  no      34  0\nHelvetica-Bold                       Type 1            Standard         no  no  no      35  0\n```\n\nThis can be used when having issues displaying properly the text in a PDF, to determine if missing fonts or their metric-compatible equivalent need to be installed.\n\n"
    },
    {
      "title": "Repair broken PDF file",
      "level": 3,
      "content": "With ghostscript:\n\n```\n$ gs -o repaired.pdf -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress corrupted.pdf\n```\n\nWith poppler:\n\n```\n$ pdftocairo -pdf corrupted.pdf repaired.pdf\n```\n\nWith mupdf-tools:\n\n```\n$ mutool clean corrupted.pdf repaired.pdf\n```\n\nReference: https://superuser.com/q/278562\n\n"
    },
    {
      "title": "Convert PDF to PDF/A standard",
      "level": 3,
      "content": "With ghostscript:\n\n```\n$ gs -dPDFA -dBATCH -dNOPAUSE -sColorConversionStrategy=UseDeviceIndependentColor -sDEVICE=pdfwrite -dPDFACompatibilityPolicy=2 -sOutputFile=document_pdfa.pdf document.pdf\n```\n\nReference: https://stackoverflow.com/a/56459053\n\n"
    },
    {
      "title": "Validate PDF/A compliance",
      "level": 3,
      "content": "Using verapdfAUR you can validate the compliance of your PDF to different flavours of the PDF/A standard:\n\n```\n$ verapdf --flavour 1a --format text document.pdf\n```\n\n"
    },
    {
      "title": "DjVu tools",
      "level": 2,
      "content": "- DjVuLibre provides many command-line tools, like ddjvu(1) for example.\n- img2djvu — Single-pass DjVu encoder based on DjVu Libre and ImageMagick.\n\n- pdf2djvu — Creates DjVu files from PDF files.\n\n"
    },
    {
      "title": "Convert DjVu to images",
      "level": 3,
      "content": "Break Djvu into separate pages:\n\n```\n$ djvmcvt -i input.djvu /path/to/out/dir output-index.djvu\n```\n\nConvert Djvu pages into images:\n\n```\n$ ddjvu --format=tiff page.djvu page.tiff\n```\n\nConvert Djvu pages into PDF:\n\n```\n$ ddjvu --format=pdf inputfile.djvu ouputfile.pdf\n```\n\nYou can also use --page to export specific pages:\n\n```\n$ ddjvu --format=tiff --page=1-10 input.djvu output.tiff\n```\n\nthis will convert pages from 1 to 10 into one tiff file.\n\n"
    },
    {
      "title": "Processing images",
      "level": 3,
      "content": "You can use scantailor-advanced to:\n\n- fix orientation\n- split pages\n- deskew\n- crop\n- adjust margins\n\n"
    },
    {
      "title": "Make DjVu from images",
      "level": 3,
      "content": "There is a useful script img2djvu-gitAUR.\n\n```\n$ img2djvu -c1 -d600 -v1 ./out\n```\n\nit will create 600 DPI out.djvu from all files in ./out directory.\n\nAlternatively, you can try didjvuAUR, which seems to create smaller files especially on images with well defined background.\n\n"
    },
    {
      "title": "PostScript tools",
      "level": 2,
      "content": "- pstotext — Converts PostScript files to text.\n\n- Ghostscript\n\n"
    },
    {
      "title": "ps2pdf",
      "level": 3,
      "content": "ps2pdf is a wrapper around ghostscript to convert PostScript to PDF:\n\n```\n$ ps2pdf -sPAPERSIZE=a4 -dOptimize=true -dEmbedAllFonts=true YourPSFile.ps\n```\n\nExplanation:\n\n- with -sPAPERSIZE=something you define the paper size. For valid PAPERSIZE values, see [10][dead link 2022-09-22 ⓘ].\n- -dOptimize=true lets the created PDF be optimised for loading.\n- -dEmbedAllFonts=true makes the fonts look always nice.\n\n"
    },
    {
      "title": "C/C++",
      "level": 3,
      "content": "- libharu — C library for generating PDF documents.\n\n- PoDoFo — A C++ library to work with the PDF file format.\n\n"
    },
    {
      "title": "Python",
      "level": 3,
      "content": "- borb — borb is a library for reading, creating and manipulating PDF files in python.\n\n- pdfrw — A pure Python library that reads and writes PDFs.\n\n- PyPDF — A pure-Python library built as a PDF toolkit.\n\n- PyX — Python library for the creation of PostScript and PDF files.\n\n- ReportLab — A proven industry-strength PDF generating solution\n\n"
    },
    {
      "title": "Java",
      "level": 3,
      "content": "- iText Core — iText is a more versatile, programmable and enterprise-grade PDF solution that allows you to embed its functionalities within your own software for digital transformation.\n\n- OpenPDF — OpenPDF is a free Java library for creating and editing PDF files with a LGPL and MPL open source license. OpenPDF is based on a fork of iText.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- List of applications/Documents#OCR software\n- List of applications/Documents#Readers and viewers\n- List of applications/Documents#Stylus note-taking\n- Wikipedia:List of PDF software\n- PDF References PDF Reference and Adobe Extensions to the PDF Specification Wikipedia:PDF#Further reading\n\n- PDF Reference and Adobe Extensions to the PDF Specification\n- Wikipedia:PDF#Further reading\n\n"
    }
  ]
}