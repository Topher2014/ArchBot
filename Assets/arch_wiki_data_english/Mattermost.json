{
  "title": "Mattermost",
  "url": "https://wiki.archlinux.org/title/Mattermost",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "From Mattermost's homepage:\n\nThis article describes how to install and configure the Mattermost server.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "The Mattermost server can be installed in two ways:\n\n- Using Docker by following the steps described in #With Docker;\n- Using a package, by following the steps described in #With package.\n\nAn Electron-based desktop client is provided by the mattermost-desktop package.\n\n"
    },
    {
      "title": "With Docker",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nBy using Docker, you do not need to manually install a database server and configure Mattermost dependencies. Since the docker image comes with all the dependencies automatically bundled, this is less work for you.\n\nHowever, the tradeoff is that you cannot choose the database back-end or web server you want, but only those provided in the docker images, unless you make your own.\n\n- Install Docker (including docker-compose).\n- Download the source:\n\n```\n$ git clone https://github.com/mattermost/mattermost-docker.git\n```\n\n- Edit the docker-compose.yml file Uncomment the args: line. For Team edition, remove the comments on the line: - edition=team. Adopt the UID/GID in the section to those of the owner of your ./volumes/app/mattermost/* folders. Add the port forwarding statements as a child of app section (e.g. between build and restart)\n\n- Uncomment the args: line.\n- For Team edition, remove the comments on the line: - edition=team.\n- Adopt the UID/GID in the section to those of the owner of your ./volumes/app/mattermost/* folders.\n- Add the port forwarding statements as a child of app section (e.g. between build and restart)\n\n```\nports:\n  - \"127.0.0.1:8065:8000\"\n```\n\n- Build and start the docker container:\n\n```\n$ cd mattermost-docker\n$ docker-compose build\n$ docker-compose up -d\n```\n\n- Open http://localhost:8000/ in your browser.\n\nPlease refer to the official guide for how to configure TLS, email, enable Enterprise features and use several server nodes using Docker Compose.\n\nThere are also some Docker images provided on the official Mattermost Docker Hub page. Please also refer to the repository of the Mattermost Docker images.\n\n"
    },
    {
      "title": "With package",
      "level": 3,
      "content": "Install the mattermost package, or mattermost-gitAUR for the development version.\n\n- The installation will create the mattermost user and group.\n- The configuration happens in /etc/webapps/mattermost/config.json where /etc/webapps/mattermost/ and /etc/webapps/mattermost/config.json are both owned by mattermost:mattermost.\n- In /var/lib/mattermost/ recursively owned by mattermost:mattermost, we can find: files, a folder where all user files posted via messages, profile pictures and team pictures are stored; client, a folder related to the webapp client which contains files rewritten by the webapp during runtime and, in the plugins subfolder, the web plugins installed via the webui; plugins, a folder related to the plugins (server part).\n- In /var/log/mattermost, a folder created on the fly during the install process (cf. tmpfiles.d) which stores the server logs as json. /var/log/mattermost and /var/log/mattermost/mattermost.log are both owned by mattermost:mattermost.\n- The rest of the immutable Mattermost directory is located at /usr/share/webapps/mattermost/ and is recursively owned by root:root.\n\n- files, a folder where all user files posted via messages, profile pictures and team pictures are stored;\n- client, a folder related to the webapp client which contains files rewritten by the webapp during runtime and, in the plugins subfolder, the web plugins installed via the webui;\n- plugins, a folder related to the plugins (server part).\n\nContinue with #Database setup.\n\n"
    },
    {
      "title": "Database setup",
      "level": 2,
      "content": "Mattermost requires a database back-end. If you plan to run it on the same machine, first install either MySQL or PostgreSQL as database.\n\nFollow one of the following sections and then proceed with #Configuring Mattermost.\n\n"
    },
    {
      "title": "MySQL/MariaDB",
      "level": 3,
      "content": "```\n$ mysql -u root -p\n```\n\n```\nCREATE DATABASE mattermostdb;\nCREATE USER mmuser IDENTIFIED BY 'mmuser_password';\nGRANT ALL ON mattermostdb.* TO mmuser;\n```\n\n"
    },
    {
      "title": "PostgreSQL",
      "level": 3,
      "content": "1. Install and configure PostgreSQL.\n\n2. Choose between TCP or UNIX Socket, and jump to the corresponding section.\n\n"
    },
    {
      "title": "With TCP socket",
      "level": 4,
      "content": "3. Create the new user while connecting to the server as postgres user (you will be prompted for a password for the new user):\n\n```\n[postgres]$ createuser -P mmuser\n```\n\n4. Create the Mattermost database, owned by mmuser user:\n\n```\n[postgres]$ createdb -O mmuser mattermostdb\n```\n\n5. PostgreSQL#Configure PostgreSQL to be accessible from remote hosts\n\n6. Verify it works:\n\n```\n$ psql --host=ip_address --dbname=mattermostdb --username=mmuser --password\n```\n\n"
    },
    {
      "title": "With Unix socket",
      "level": 4,
      "content": "3. Create the new user while connecting to the server as postgres user:\n\n```\n[postgres]$ createuser mattermost\n```\n\n4. Create the Mattermost database, owned by mattermost user:\n\n```\n[postgres]$ createdb -O mattermost mattermostdb\n```\n\n5. Setup the Unix socket by adding the following line to /var/lib/postgres/data/pg_hba.conf:\n\n```\nlocal    mattermostdb    mattermost    peer\n```\n\n6. Restart postgresql.service.\n\n7. Verify it works:\n\n```\n[mattermost]$ psql --dbname=mattermostdb --username=mattermost\n```\n\n"
    },
    {
      "title": "Configuring Mattermost",
      "level": 3,
      "content": "Mattermost is configured in /etc/webapps/mattermost/config.json. Strings need to be quoted.\n\nThere are two settings you need to adapt to your database.\n\nThe DriverName setting: mysql for MySQL and postgres for PostgreSQL.\n\nThe DataSource:\n\n- For MySQL, set it to mmuser:mmuser_password@unix(/run/mysqld/mysqld.sock)/mattermostdb?charset=utf8mb4,utf8.\n- For PostgreSQL TCP socket: postgres://mmuser:mmuser_password@127.0.0.1:5432/mattermostdb?sslmode=disable&connect_timeout=10 Unix socket: postgres:///mattermostdb?host=/run/postgresql ; make sure there are 3 slashes after postgres:, mattermostdb is the name of the database and /run/postgresql is the directory containing the Unix socket\n\n- TCP socket: postgres://mmuser:mmuser_password@127.0.0.1:5432/mattermostdb?sslmode=disable&connect_timeout=10\n- Unix socket: postgres:///mattermostdb?host=/run/postgresql ; make sure there are 3 slashes after postgres:, mattermostdb is the name of the database and /run/postgresql is the directory containing the Unix socket\n\nStart/enable mattermost.service and open http://localhost:8065/.\n\n"
    },
    {
      "title": "Setting up Mattermost",
      "level": 2,
      "content": "1. Navigate to your Mattermost install and create a team and user.\n1. The first user in the system is automatically granted the system_admin role, which gives you access to the System Console.\n1. Click on the menu button in the top left corner and choose the System Console option.\n1. Update Environment > SMTP settings to setup an SMTP email service. The example below assumes AmazonSES. Set SMTP Server to email-smtp.us-east-1.amazonaws.com Set SMTP Server Port to 465 Set Enable SMTP Authentication to true Set SMTP Server Username to your_smtp_username Set SMTP Server Password to your_smtp_password Set Connection Security to TLS Save the Settings\n1. Update Site configuration > Notifications: Set Send Email Notifications to true Set Notification Display Name to No-Reply Set Notification From Address to mattermost@example.com Set Support Email Address to some real address that can receive emails Save the Settings\n1. Update Authentication > Email by changing Require Email Verification to true.\n1. Update Environment > Logging settings by setting Output logs to console to false.\n1. Feel free to modify other settings.\n1. Restart mattermost.service.\n\n- Set SMTP Server to email-smtp.us-east-1.amazonaws.com\n- Set SMTP Server Port to 465\n- Set Enable SMTP Authentication to true\n- Set SMTP Server Username to your_smtp_username\n- Set SMTP Server Password to your_smtp_password\n- Set Connection Security to TLS\n- Save the Settings\n\n- Set Send Email Notifications to true\n- Set Notification Display Name to No-Reply\n- Set Notification From Address to mattermost@example.com\n- Set Support Email Address to some real address that can receive emails\n- Save the Settings\n\n"
    },
    {
      "title": "Plugins",
      "level": 3,
      "content": "Plugins are enabled by default, but require access to the plugins directory which needs to be created with the correct owner:\n\n```\n$ mkdir /usr/share/webapps/mattermost/client/plugins\n$ chown mattermost:mattermost /usr/share/webapps/mattermost/client/plugins\n```\n\n"
    },
    {
      "title": "Valid HTTPS via reverse web-proxy",
      "level": 3,
      "content": "To securely access your Mattermost server from the Android and iOS apps, which do not support self-signed TLS certificates, you can setup a reverse web proxy.\n\nThe main benefits of a proxy are:\n\n- SSL termination\n- HTTP to HTTPS redirect\n- Port mapping 80 to 8065\n- Standard request logs\n\nProxying can be achieved with most web servers.\n\n"
    },
    {
      "title": "nginx",
      "level": 4,
      "content": "1. Install and run nginx, preferably nginx-mainline.\n1. Point your domain name eg. mattermost.example.com to the server.\n1. Configure nginx to proxy connections from the internet to the Mattermost Server. Create and edit the nginx configuration file /etc/nginx/sites-available/mattermost. upstream backend { server 127.0.0.1:8065; keepalive 32; } proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off; server { listen 80; server_name mattermost.example.com; location ~ /api/v[0-9]+/(users/)?websocket$ { proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; client_max_body_size 50M; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Frame-Options SAMEORIGIN; proxy_buffers 256 16k; proxy_buffer_size 16k; client_body_timeout 60; send_timeout 300; lingering_timeout 5; proxy_connect_timeout 90; proxy_send_timeout 300; proxy_read_timeout 90s; proxy_pass http://backend; } location / { client_max_body_size 50M; proxy_set_header Connection \"\"; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Frame-Options SAMEORIGIN; proxy_buffers 256 16k; proxy_buffer_size 16k; proxy_read_timeout 600s; proxy_cache mattermost_cache; proxy_cache_revalidate on; proxy_cache_min_uses 2; proxy_cache_use_stale timeout; proxy_cache_lock on; proxy_pass http://backend; } }\n1. Enable the mattermost server: # mkdir /etc/nginx/sites-enabled # ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/mattermost\n1. Restart nginx.service.\n1. Verify you can access Mattermost through the proxy: $ curl http://localhost/ You should see a page titled Mattermost.\n1. Set up Let’s Encrypt.\n\n```\nupstream backend {\n    server 127.0.0.1:8065;\n    keepalive 32;\n}\n\nproxy_cache_path /var/cache/nginx levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off;\n\nserver {\n    listen 80;\n    server_name    mattermost.example.com;\n\n    location ~ /api/v[0-9]+/(users/)?websocket$ {\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        client_max_body_size 50M;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        client_body_timeout 60;\n        send_timeout 300;\n        lingering_timeout 5;\n        proxy_connect_timeout 90;\n        proxy_send_timeout 300;\n        proxy_read_timeout 90s;\n        proxy_pass http://backend;\n    }\n\n    location / {\n        client_max_body_size 50M;\n        proxy_set_header Connection \"\";\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        proxy_read_timeout 600s;\n        proxy_cache mattermost_cache;\n        proxy_cache_revalidate on;\n        proxy_cache_min_uses 2;\n        proxy_cache_use_stale timeout;\n        proxy_cache_lock on;\n        proxy_pass http://backend;\n    }\n}\n```\n\n```\n# mkdir /etc/nginx/sites-enabled\n# ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/mattermost\n```\n\n```\n$ curl http://localhost/\n```\n\n"
    },
    {
      "title": "Lighttpd2",
      "level": 4,
      "content": "A configuration sample for lighttpd2-gitAUR to act as a proxy for Mattermost, assuming you have a certificate at /etc/lighttpd2/certs/lighttpd2.pem.\n\nSee mod_vhost if you want to transfer the proxy into a virtual host.\n\n```\n/etc/lighttpd2/lighttpd.conf\n```\n\n```\nsetup {\n\n    module_load [\n        \"mod_accesslog\",\n        \"mod_proxy\",\n        \"mod_openssl\"\n    ];\n\n    openssl [\n        \"listen\" => \"0.0.0.0:443\",\n        \"listen\" => \"[::]:443\",\n        \"pemfile\" => \"/etc/lighttpd2/certs/lighttpd2.pem\",\n        \"options\" => [\"ALL\", \"NO_TICKET\"],\n        \"verify\" => true,\n        \"verify-any\" => true,\n        \"verify-depth\" => 9\n    ];\n\n    listen \"0.0.0.0:80\";\n    listen \"[::]:80\";\n\n    log [\"debug\" => \"\", default => \"/var/log/lighttpd2/error.log\"];\n    accesslog \"/var/log/lighttpd2/access.log\";\n    accesslog.format \"%h %V %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}\\\"\";\n\n    static.exlude_extensions [ \".php\", \".pl\", \".fcgi\", \"~\", \".inc\" ];\n\n}\n\nopenssl.setenv \"client-cert\";\nkeepalive.timeout 360;\n\ndocroot \"/srv/http\";\nindex [ \"index.php\", \"index.html\", \"index.htm\" ];\n\ninclude \"/etc/lighttpd2/mimetypes.conf\";\n\nproxy \"127.0.0.1:8065\";\n```\n\n"
    },
    {
      "title": "Testing translations and pull requests",
      "level": 3,
      "content": "You can use the unofficial script mattermost-prepare-pkgbuild to test languages and pull requests.\n\n"
    }
  ]
}