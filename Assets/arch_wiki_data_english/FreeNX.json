{
  "title": "FreeNX",
  "url": "https://wiki.archlinux.org/title/FreeNX",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "FreeNX, German text, is a system that allows you to access your desktop from another computer over the Internet. The program is open source, secure (SSH based), fast and versatile. License: GPL. It was the non-commercial version of NoMachine, which has meanwhile switched to closed source. A good FreeNX alternative is X2Go.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Get FreeNX/Nomachine from nx3-allAUR or nomachineAUR. Both server and client packages are included in the package. The sshd daemon (available in openssh package) must be installed and running for it to function properly.\n\n"
    },
    {
      "title": "SSHD",
      "level": 4,
      "content": "For freenx authentication to work, sshd has to be setup properly. You need to allow RSAauthentication, Password Authentication, and you also need to include nx public keys to Authorizedkeysfile.\n\nIf you do not want to allow password login globally, add match block at the end of file like below: /etc/ssh/sshd_config:\n\n```\nRSAAuthentication yes\nPubkeyAuthentication yes\nPasswordAuthentication no\nPermitEmptyPasswords yes\nAuthorizedKeysFile /usr/NX/home/nx/.ssh/authorized_keys /usr/NX/home/nx/.ssh/authorized_keys2\n#\n#\n#\nMatch Address 127.0.0.1\n  PasswordAuthentication yes\n```\n\n"
    },
    {
      "title": "Main configuration",
      "level": 4,
      "content": "The main configuration file is located at /usr/NX/etc/node.cfg.\n\nIf you are running your SSH daemon on a port other than the default port 22, you will need to uncomment and update:SSHD_PORT=22\n\nIf you use KDE or GNOME desktop environments you do not need to edit this file, as the defaults with the modified MD5SUM command should work in this case. If you use another window manager such as Fluxbox/Openbox or Xfce, you may need to edit this file slightly (see below).\n\nOr if you are not using CDE but Xfce you could simply edit CDE line like below and start cde from the client:\n\n```\nCommandStartCDE = \"/usr/bin/startxfce4\"\n```\n\nFor an overview of the install and uninstall procedures, run the following after installing nx3-allAUR:\n\n```\n# /usr/NX/scripts/setup/nxserver --help\n```\n\n- You should also install xdialog on the server or you will not see the \"suspend/terminate\" dialog when you try to close the window or hit Ctrl+Alt+t.\n- Although mostly assumed that you will have it already, xterm is also necessary for some things.\n\n"
    },
    {
      "title": "Keys",
      "level": 4,
      "content": "Keys are used to authenticate the clients with the server by default. You could used the default key created during installation or you could create a new pair. If you create your own key pair, make sure you add the directory of the public key to authorizedkeyfiles in sshd_config and also SSHAuthorizedKeys in node.cfg. And Do not forget to send the private key to the client.\n\nThe public key can be found here check :\n\n```\n/usr/NX/home/nx/.ssh/authorized_keys2\n```\n\nThe private key can be found here:\n\n```\n/usr/NX/share/keys/server.id_dsa.key\n```\n\nRecreation of random keys:\n\n```\n/usr/NX/bin/nxserver --keygen\n```\n\nYou can check if the nxserver is running by:\n\n```\n/usr/NX/bin/nxserver --status\n```\n\nYou can also check if a desired user can be logged on by:\n\n```\n/usr/NX/bin/nxserver --usercheck USERNAME\n```\n\n"
    },
    {
      "title": "Starting the server",
      "level": 4,
      "content": "As of installation nxserver is set to start up automatically, however, you are likely to need to restart the server after setting up:\n\n```\n/usr/NX/bin/nxserver --restart\n```\n\n"
    },
    {
      "title": "Client",
      "level": 3,
      "content": "For Arch Linux the client was chosen in #Installation.\n\n"
    },
    {
      "title": "Windows",
      "level": 4,
      "content": "Get the client from nomachine's homepage: https://www.nomachine.com.\n\n"
    },
    {
      "title": "Configuration",
      "level": 4,
      "content": "As mentioned above, the client must contain the correct key to connect to the server. If you are using the custom keys generated during install, you need to copy the client key to the following locations:\n\n- Windows: your_install_dir_on_windows/share/keys/client.id_dsa.key\n- Arch Linux: /usr/lib/nx/share/keys/client.id_dsa.key\n\nAfter moving the keys you may have use the nxclient GUI to import the new keys. From the configuration dialog press the 'Key...' button and import the new client key.\n\n"
    },
    {
      "title": "Running",
      "level": 2,
      "content": "After installing nxclient on Arch Linux, executables are available in /usr/lib/nx/bin/ symlinked to /usr/bin/. At the first run of /usr/bin/nxclient, the user will be led through a wizard.\n\n"
    },
    {
      "title": "Keyboard shortcuts",
      "level": 3,
      "content": "Table content:\nKeyboard Shortcut | Description\nCtrl+Alt+f | Toggles full-screen mode.\nCtrl+Alt+t | Shows the terminate, suspend dialog.\nCtrl+Alt+m | Maximizes or minimizes the window.\nCtrl+Alt+Mouse | Drags the viewport, so you can view different portions of the desktop.\nCtrl+Alt+Arrows/Keypad | Moves the viewport by an incremental amount of pixels.\nCtrl+Alt+s | Activates \"screen-scraping\" mode, so all the GetImage originated by the clients will be forwarded to the real display. By pressing the sequence again, nxagent will revert to the usual \"fast\" mode.\nCtrl+Alt+e | lazy image encoding\nCtrl+Alt+Shift+Esc | Emergency-exit and kill-window\n\nBy pressing the sequence again, nxagent will revert to the usual \"fast\" mode.\n\n"
    },
    {
      "title": "Leaving fullscreen",
      "level": 3,
      "content": "There is a magic-pixel in the top right corner of nearly every nx-application in fullscreenmode. Left-click the pixel and application-window gets iconified.\n\n"
    },
    {
      "title": "Tips on resume",
      "level": 3,
      "content": "- Resume is a bit experimental, crashes might appear after session has resumed. You have to find out which applications like resuming and which do not ;) .\n- Resuming between Linux and Windows sessions does not work. UPDATE: It appears that version 3.2.0-14 is able to resume Windows-suspended sessions.\n- If resume fails let it time out and do not use the cancel button, else sessions will stay open and consume RAM on server. To kill such sessions use the Session Admin program to kill them.\n\n"
    },
    {
      "title": "Fix DPI settings",
      "level": 3,
      "content": "If you like to have the same font-sizes/dpi sizes on all your client session, set the X resource Xft.dpi. For example putting the following line into a user's ~/.Xresources makes their \"desktop\" a 100dpi.\n\n```\nXft.dpi: 100\n```\n\n"
    },
    {
      "title": "FreeNX to existing display",
      "level": 2,
      "content": "Usually, when connecting to a NX server, a new X session is created. Sometimes it might be useful, to connect to an existing X session, e.g. the root session. This is not possible with NX in default setup, but can be reached, using tightvncAUR and x11vnc. Install them on the NX server system.\n\nx11vnc will serve the X session, we have to create a file $HOME/.x11vncrc to give x11vnc some options, e.g.:\n\n```\ndisplay :0\nshared\nforever\nlocalhost\nrfbauth /home/user/.x11vnc/passwd\n```\n\nCreate the VNC password file:\n\n```\n$ mkdir $HOME/.x11vnc\n$ x11vnc -storepasswd PASSWORD $HOME/.x11vnc/passwd\n$ chmod 600 $HOME/.x11vnc/passwd\n```\n\nCreate a shell script, which starts the x11vnc service, if not running and starts the vncviewer provided by the package tightvnc.\n\nNote: **0** \n\n```\n#!/bin/sh\nVNC_VIEWER=vncviewer\nVNC_SERVER=x11vnc\nVNC_RESOLUTION=1024x786\nVNC_PASSWD=/home/USER/.x11vnc/passwd\nVNC_PORT=5900\n\nif [ -z \"$(pgrep ${VNC_SERVER})\" ]; then\n\techo $VNC_SERVER not running, starting...\n\texec $VNC_SERVER &\n\tsleep 5\nfi\n\nexec $VNC_VIEWER -geometry $VNC_RESOLUTION -passwd $VNC_PASSWD localhost::$VNC_PORT\n```\n\nSave this script with a texteditor of your choice, e.g. under $HOME/shell/nxvnc.sh. Make it executable and create a symbolic link, e.g:\n\n```\n$ chmod +x $HOME/shell/nxvnc.sh\n# ln -s /home/USER/shell/nxvnc.sh /usr/local/bin/nxvnc\n```\n\nAt this point, you might want to test the current configuration:\n\n```\n$ /usr/local/bin/nxvnc\n```\n\nIf the x11vnc service and a vncviewer session is started, you configuration works well. You are now able to connect to the current X session using your NX client with following options:\n\n```\nLogin, Password, Host, Port: your default entries\nDesktop: Unix -> Custom\n - Settings:\n   - Run the following command: /usr/local/bin/nxvnc\n   - New virtual desktop\nDisplay:\n  - Fullscreen or Custom with you preferred resolution\n```\n\nYou are able to connect to your current X session via NX client now.\n\n"
    },
    {
      "title": "Setting up non-KDE or GNOME desktop managers",
      "level": 2,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nBefore following anything in this part, make sure the server working setup and accepting connections. This section only deals with problems once NXClient has logged on.\n\nIt is quite simple (once the server is setup) to connect to GNOME and KDE sessions, however connecting to other window managers (Fluxbox, Xfce, whatever) is slightly different.\n\nChoosing \"custom\" and using a command like startx of startfluxbox will either result in a blank screen after the !M logo or the Client to present an error complaining about lack of a X server. A way around this is open a session with the command \"startx\", and the another with the command to start your window-manager-of-choice.\n\nIf you do not want to do this, you can start X by installing a login manager like SLIM or XDM. I would recommend using SLiM because of its small size.\n\n(Authors note: This is how I got fluxbox, xfce and others to work on my arch installation- however, I have now removed slim from inittab and set the run level back to 3, and yet I can still login perfectly with NXClient. Possibly try this if you get your system working this way, if like me you have a low memory machine.)\n\n"
    },
    {
      "title": "Alternative fix",
      "level": 3,
      "content": "A simple fix without resorting to the above seems to involve a simple edit to the configuration file. This should work for Fluxbox/Openbox/XFCE or any other window manager that uses the .xinitrc startup file in a call to startx.\n\nSimply edit the configuration file /etc/nxserver/node.conf as root and change:\n\n```\n#USER_X_STARTUP_SCRIPT=.Xclients\n```\n\nto:\n\n```\nUSER_X_STARTUP_SCRIPT=.xinitrc\n```\n\nRemember to remove the # symbol from the start of the line.\n\nThen in the client under configuration settings, choose Custom as the desktop, and click on settings:\n\n- In the first group select - Run the default X client Script on server\n- In the second group select - New virtual desktop\n\n"
    },
    {
      "title": "Keyboard Mapping problems",
      "level": 3,
      "content": "Keyboard layout aways falls back to en_US.\n\nAfter login, run setxkbmap with your layout.\n\nExample:\n\n```\n$ setxkbmap -layout br\n```\n\nor create the file /usr/share/X11/xkb/keymap.dir\n\n```\n# touch /usr/share/X11/xkb/keymap.dir\n```\n\nCreating this file will fix the issue for the next logins.\n\n"
    },
    {
      "title": "Debug problems",
      "level": 3,
      "content": "Edit the nxserver configuration file /etc/nxserver/node.conf and change:\n\n```\n#SESSION_LOG_CLEAN=1\n```\n\nto\n\n```\nSESSION_LOG_CLEAN=0\n```\n\nThen you can look/debug the log files in:\n\n```\n$HOME/.nx/T-C-hostname-display-session-id\n```\n\nFor succesfull connections and:\n\n```\n$HOME/.nx/F-C-hostname-display-session-id\n```\n\nFor failed ones.\n\n"
    },
    {
      "title": "Authentication OK, but connection fails",
      "level": 3,
      "content": "If you are trying to start KDE edit /etc/nxserver/node.conf and search for:\n\n```\nCOMMAND_START_KDE=startkde\n```\n\nReplace for:\n\n```\nCOMMAND_START_KDE=/usr/bin/startkde\n```\n\n"
    },
    {
      "title": "Key changes",
      "level": 3,
      "content": "Change the key in GUI setup to new generated key.\n\n"
    },
    {
      "title": "Wrong password / No connection possible / Key-based authentication",
      "level": 3,
      "content": "- If you have changed your ssh daemon to run on an alternate port, be sure to modify SSHD_PORT within /etc/nxserver/node.conf.\n\n- If you get always wrong password or no connection after authentication was done and you are sure that you typed it correct, check that your server can connect to itself using localhost by ssh.\n\n- If you messed up your key files, create new ones or fix the old ones, it is probably caused by a wrong known_hosts file.\n\n- If you get wrong password or login, put ENABLE_PASSDB_AUTHENTICATION=\"1\" in /etc/nxserver/node.conf and add a user by\n\n```\n# /usr/bin/nxserver --adduser [username]\n# /usr/bin/nxserver --passwd [username]\n```\n\n- The above commands are also necessary if you have disabled password authentication in ssh and instead are using key-based authentication.\n\n"
    },
    {
      "title": "NX crashes on session startup",
      "level": 3,
      "content": "If your NX Client shows the NX logo then disappears with a Connection Problem dialog afterwards.\n\n"
    },
    {
      "title": "NX logo then blank screen",
      "level": 3,
      "content": "If you see the NX logo (!M) then a blank screen.\n\nThis problem can be solved by running a login manager- The problem is that X11 is not started, and it appears that \"startx\" or similar do not work from the freenx client. Follow these instructions to setup a login manager and load it at startup: Display manager\n\nBlind: If this does not resolve your issues, be aware that freenx and bash_completion do not play well together. I only got things to work after removing bash_completion from the .bashrc.\n\n"
    },
    {
      "title": "GDM/XDM Session Menu Error with non-KDE or GNOME Desktop Managers (more common with non-Arch Linux users)",
      "level": 3,
      "content": "Problem: A session menu comes up talking about \"chooseSessionListWidget.\" A window manager never loads.\n\nDouble check to see if .xinitrc is executable, if not make it so:\n\n```\nstat -c \"%A\" ~/.xinitrc\n```\n\nKeep in mind this command should be executed along with pertinent instructions on this page about setting up non-KDE or GNOME desktop managers.\n\n"
    },
    {
      "title": "Cannot connect because command sessreg not found",
      "level": 3,
      "content": "If you get the following error while connecting:\n\n```\n/usr/bin/nxserver: line 941: sessreg: command not found\n NX> 280 Exiting on signal: 15\n```\n\nthen you have to install the package xorg-sessreg.\n\n"
    },
    {
      "title": "Broken resume with Cairo 1.12.x",
      "level": 3,
      "content": "Latest cairo updates broke the render extension. After resuming a session all characters from before suspending will not get rendered. To fix this add this single line to /etc/nxserver/node.conf.\n\n```\nAGENT_EXTRA_OPTIONS_X=\"-norender\"\n```\n\n"
    },
    {
      "title": "Eclipse crashes when editing a file",
      "level": 3,
      "content": "```\nThe program 'Eclipse' received an X Window System error.\nThis probably reflects a bug in the program.\nThe error was 'BadValue (integer parameter out of range for operation)'.\n(Details: serial 8414 error_code 2 request_code 149 minor_code 26)\n```\n\nStart eclipse using (see [1]):\n\n```\n$ eclipse -vmargs -Dorg.eclipse.swt.internal.gtk.cairoGraphics=false\n```\n\n"
    }
  ]
}