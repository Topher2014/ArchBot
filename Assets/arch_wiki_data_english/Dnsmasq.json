{
  "title": "Dnsmasq",
  "url": "https://wiki.archlinux.org/title/Dnsmasq",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Domain name resolution\n\ndnsmasq provides a DNS server, a DHCP server with support for DHCPv6 and PXE, and a TFTP server. It is designed to be lightweight and have a small footprint, suitable for resource constrained routers and firewalls. dnsmasq can also be configured to cache DNS queries for improved DNS lookup speeds to previously visited sites.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the dnsmasq package. Then start/enable dnsmasq.service.\n\nThe network will also need to be restarted so the DHCP client can create a new /etc/resolv.conf.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "To configure dnsmasq, edit /etc/dnsmasq.conf. The file contains comments explaining the options. For all available options see dnsmasq(8).\n\nNote: If dnsmasq will not be used as a local DNS resolver, you may also want to edit dnsmasq.service so that it does not pull in nss-lookup.target:\n\nIf dnsmasq will not be used as a local DNS resolver, you may also want to edit dnsmasq.service so that it does not pull in nss-lookup.target:\n\n```\n/etc/systemd/system/dnsmasq.service.d/no-nss-lookup-target.conf\n```\n\n```\n[Unit]\nWants=\n```\n\n```\n$ dnsmasq --test\n```\n\n"
    },
    {
      "title": "DNS server",
      "level": 3,
      "content": "To set up dnsmasq as a DNS caching daemon on a single computer specify a listen-address directive, adding in the localhost IP address:\n\n```\nlisten-address=::1,127.0.0.1\n```\n\nTo use this computer to listen on its LAN IP address for other computers on the network. It is recommended that you use a static LAN IP in this case. E.g.:\n\n```\nlisten-address=::1,127.0.0.1,192.168.1.1\n```\n\nYou may alternatively assign a network interface:\n\n```\ninterface=enp5s0\n```\n\nSet the number of cached domain names with cache-size=size (the default is 150):\n\n```\ncache-size=10000\n```\n\nTo validate DNSSEC load the DNSSEC trust anchors provided by the dnsmasq package and set the option dnssec:\n\n```\nconf-file=/usr/share/dnsmasq/trust-anchors.conf\ndnssec\n```\n\nSee dnsmasq(8) for more options you might want to use.\n\n"
    },
    {
      "title": "DNS addresses file and forwarding",
      "level": 4,
      "content": "After configuring dnsmasq, you need to add the localhost addresses as the only nameservers in /etc/resolv.conf. This causes all queries to be sent to dnsmasq.\n\nSince dnsmasq is a stub resolver not a recursive resolver you must set up forwarding to an external DNS server. This can be done automatically by using openresolv or by manually specifying the DNS server address in dnsmasq's configuration.\n\nIf your network manager supports resolvconf, instead of directly altering /etc/resolv.conf, you can use openresolv to generate configuration files for dnsmasq.\n\nEdit /etc/resolvconf.conf and add the loopback addresses as name servers, and configure openresolv to write out dnsmasq configuration:\n\n```\n/etc/resolvconf.conf\n```\n\n```\n# Use the local name server\nname_servers=\"::1 127.0.0.1\"\nresolv_conf_options=\"trust-ad\"\n\n# Write out dnsmasq extended configuration and resolv files\ndnsmasq_conf=/etc/dnsmasq-conf.conf\ndnsmasq_resolv=/etc/dnsmasq-resolv.conf\n```\n\nRun resolvconf -u so that the configuration files get created. If the files do not exist dnsmasq.service will fail to start.\n\nEdit dnsmasq's configuration file to use openresolv's generated configuration[1]:\n\n```\n# Read configuration generated by openresolv\nconf-file=/etc/dnsmasq-conf.conf\nresolv-file=/etc/dnsmasq-resolv.conf\n```\n\nFirst you must set localhost addresses as the only nameservers in /etc/resolv.conf:\n\n```\n/etc/resolv.conf\n```\n\n```\nnameserver ::1\nnameserver 127.0.0.1\noptions trust-ad\n```\n\nMake sure to protect /etc/resolv.conf from modification as described in Domain name resolution#Overwriting of /etc/resolv.conf.\n\nAlternatively, NetworkManager may be configured to automatically generate the /etc/resolv.conf file for a specific connection with the following commands:\n\n```\n$ nmcli connection modify 'connection-name' ipv4.dns 127.0.0.1\n$ nmcli connection modify 'connection-name' ipv4.dns-options trust-ad\n$ nmcli connection modify 'connection-name' ipv4.ignore-auto-dns yes\n$ nmcli connection modify 'connection-name' ipv6.dns ::1\n$ nmcli connection modify 'connection-name' ipv6.dns-options trust-ad\n$ nmcli connection modify 'connection-name' ipv6.ignore-auto-dns yes\n```\n\nThen restart NetworkManager.service.\n\nThe upstream DNS server addresses must then be specified in dnsmasq's configuration file as server=server_address. Also add no-resolv so dnsmasq does not needlessly read /etc/resolv.conf which only contains the localhost addresses of itself.\n\n```\n/etc/dnsmasq.conf\n```\n\n```\n[...]\nno-resolv\n\n# Google's nameservers, for example\nserver=8.8.8.8\nserver=8.8.4.4\n```\n\n- This example uses Google Public DNS. Replace it with a DNS resolver you trust. See Domain name resolution#Third-party DNS services.\n- dnsmasq does not support encrypted protocols which are desired when connecting to third-party DNS services. A workaround is to run a separate DNS resolver that supports encrypted DNS and forward dnsmasq's queries to it. See Stubby#Local DNS cache configuration for an example.\n\nNow DNS queries will be resolved with dnsmasq, only checking external servers if it cannot answer the query from its cache.\n\n"
    },
    {
      "title": "Adding a custom domain",
      "level": 4,
      "content": "You can assign a domain simply by adding:\n\n```\naddress=/router/192.168.1.1\n```\n\nAlternatively, if you continue to use add a custom domain to hosts in your (local) network:\n\n```\nlocal=/lan/\ndomain=lan\n```\n\nIn this example it is possible to ping a host/device (e.g. defined in your /etc/hosts file) as hostname.lan.\n\nUncomment expand-hosts to add the custom domain to hosts entries:\n\n```\nexpand-hosts\n```\n\nWithout this setting, you will have to add the domain to entries of /etc/hosts.\n\n"
    },
    {
      "title": "Test",
      "level": 4,
      "content": "To do a lookup speed test choose a website that has not been visited since dnsmasq has been started (drill is part of the ldns package):\n\n```\n$ drill archlinux.org | grep \"Query time\"\n```\n\nRunning the command again will use the cached DNS IP and result in a faster lookup time if dnsmasq is setup correctly:\n\n```\n$ drill archlinux.org | grep \"Query time\"\n```\n\n```\n;; Query time: 18 msec\n```\n\n```\n$ drill archlinux.org | grep \"Query time\"\n```\n\n```\n;; Query time: 2 msec\n```\n\nTo test if DNSSEC validation is working see DNSSEC#Testing.\n\n"
    },
    {
      "title": "DHCP server",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nBy default dnsmasq has the DHCP functionality turned off, if you want to use it you must turn it on. Here are the important settings:\n\n```\n# Only listen to routers' LAN NIC.  Doing so opens up tcp/udp port 53 to localhost and udp port 67 to world:\ninterface=enp0s0\n\n# dnsmasq will open tcp/udp port 53 and udp port 67 to world to help with dynamic interfaces (assigning dynamic IPs).\n# dnsmasq will discard world requests to them, but the paranoid might like to close them and let the kernel handle them.\n# You may also need this option if you have other instances of dnsmasq running (eg. because of libvirtd)\nbind-interfaces\n\n# Optionally set a domain name\ndomain=example.org\n\n# Set default gateway\ndhcp-option=3,0.0.0.0\n\n# Set DNS servers to announce\ndhcp-option=6,0.0.0.0\n\n# If your dnsmasq server is also doing the routing for your network, you can use option 121 to push a static route out.\n# x.x.x.x is the destination LAN, yy is the CIDR notation (usually /24), and z.z.z.z is the host which will do the routing.\ndhcp-option=121,x.x.x.x/yy,z.z.z.z\n\n# Dynamic range of IPs to make available to LAN PC and the lease time. \n# Ideally set the lease time to 5m only at first to test everything works okay before you set long-lasting records.\n# The range of addresses here must lie within the address range assigned to the virtual interface.\ndhcp-range=192.168.111.50,192.168.111.100,12h\n\n# Provide IPv6 DHCP leases, the range is constructed using the network interface as prefix\ndhcp-range=::f,::ff,constructor:enp0s0\n\n# If you’d like to have dnsmasq assign static IPs to some clients, bind the LAN computers NIC MAC addresses:\ndhcp-host=aa:bb:cc:dd:ee:ff,192.168.111.50\ndhcp-host=aa:bb:cc:ff:dd:ee,192.168.111.51\n```\n\nSee dnsmasq(8) for more options.\n\n"
    },
    {
      "title": "Proxy DHCP",
      "level": 4,
      "content": "In case there is already a DHCP server running on the network and you want to interoperate with it, dnsmasq can be set to behave as a \"proxy DHCP\", therefore only serving the #PXE server specific information to the client. This mode is only available with IPv4. Use the following syntax, providing the existing DHCP server address:\n\n```\ndhcp-range=192.168.0.1,proxy\n```\n\n"
    },
    {
      "title": "Test",
      "level": 4,
      "content": "From a computer that is connected to the one with dnsmasq on it, configure it to use DHCP for automatic IP address assignment, then attempt to log into the network normally.\n\nIf you inspect the /var/lib/misc/dnsmasq.leases file on the server, you should be able to see the lease.\n\n"
    },
    {
      "title": "TFTP server",
      "level": 3,
      "content": "dnsmasq has built-in TFTP server.\n\nTo use it, create a root directory for TFTP (e.g. /srv/tftp) to put transferable files in.\n\n```\nenable-tftp\ntftp-root=/srv/tftp\n```\n\nFor increased security it is advised to use dnsmasq's TFTP secure mode. In secure mode only files owned by the dnsmasq user will be served over TFTP. You will need to chown TFTP root and all files in it to dnsmasq user to use this feature.\n\n```\ntftp-secure\n```\n\nSee dnsmasq(8) for more options.\n\n"
    },
    {
      "title": "PXE server",
      "level": 3,
      "content": "PXE requires a DHCP and a TFTP server; both can be provided by dnsmasq. To setup the PXE server, follow these steps:\n\n1. Setup the #TFTP server and the #DHCP server (in full DHCP or proxy mode) in the dnsmasq configuration file,\n1. Copy and configure a PXE compatible boot loader (e.g. PXELINUX) in the TFTP root directory,\n1. Enable PXE in the dnsmasq configuration file:\n\nTo simply send one file:\n\n```\ndhcp-boot=lpxelinux.0\n```\n\nTo send a file depending on client architecture:\n\n```\npxe-service=x86PC,\"PXELINUX (BIOS)\",bios/lpxelinux\npxe-service=X86-64_EFI,\"PXELINUX (EFI)\",efi64/syslinux.efi\n```\n\n- File paths are relative to the TFTP root path\n- If the file has a .0 suffix, you must exclude the suffix in pxe-service options\n\nIn case pxe-service does not work to identify the architecture (especially for UEFI-based clients), combination of dhcp-match and dhcp-boot can be used. See RFC 4578 2.1 for more client-arch numbers for use with dhcp boot protocol.\n\n```\ndhcp-match=set:efi-x86_64,option:client-arch,7\ndhcp-match=set:efi-x86_64,option:client-arch,9\ndhcp-match=set:efi-x86,option:client-arch,6\ndhcp-match=set:bios,option:client-arch,0\ndhcp-boot=tag:efi-x86_64,efi64/syslinux.efi\ndhcp-boot=tag:efi-x86,efi32/syslinux.efi\ndhcp-boot=tag:bios,bios/lpxelinux.0\n```\n\nSee dnsmasq(8) for more options.\n\nThe rest is up to the boot loader.\n\n"
    },
    {
      "title": "Prevent OpenDNS redirecting Google queries",
      "level": 3,
      "content": "To prevent OpenDNS from redirecting all Google queries to their own search server, add to /etc/dnsmasq.conf:\n\n```\nserver=/www.google.com/<ISP DNS IP>\n```\n\n"
    },
    {
      "title": "Override addresses",
      "level": 3,
      "content": "In some cases, such as when operating a captive portal, it can be useful to resolve specific domains names to a hard-coded set of addresses. This is done with the address config:\n\n```\naddress=/example.com/1.2.3.4\n```\n\nFurthermore, it is possible to return a specific address for all domain names that are not answered from /etc/hosts or DHCP by using a special wildcard:\n\n```\naddress=/#/1.2.3.4\n```\n\n"
    },
    {
      "title": "More than one instance",
      "level": 3,
      "content": "If we want two or more dnsmasq servers works per interface(s).\n\n"
    },
    {
      "title": "Static",
      "level": 4,
      "content": "To do this staticly, server per interface, use interface and bind-interfaces options. This enforce start second dnsmasq.\n\n"
    },
    {
      "title": "Dynamic",
      "level": 4,
      "content": "In this case we can exclude per interface and bind any others:\n\n```\nexcept-interface=lo\nbind-dynamic\n```\n\n"
    },
    {
      "title": "Domain blocklisting",
      "level": 3,
      "content": "To blocklist domains, i.e. answer queries for them with NXDOMAIN, use the address option without specifying the IP address:\n\n```\naddress=/blocked.example/\naddress=/anotherblocked.example/\n```\n\nWildcards are also supported. Add a * to the start of the pattern:\n\n```\n# blocks both blocked.example and anotherblocked.example and all their subdomains\naddress=/*blocked.example/\n\n# blocks subdomains like mail.google.com but not google.com\naddress=/*.google.com/\n```\n\nSome specific subdomains can be unblocked using # as the server address:\n\n```\n# blocks google.com and all subdomains except mail.google.com.\naddress=/google.com/\nserver=/mail.google.com/#\n```\n\n- The options address=/example.com/ and server=/example.com/ are equivalent. Both will answer queries for them with NXDOMAIN.\n- The options address=/example.com/# and server=/example.com/# are not equivalent. address=/example.com/# will answer queries for the domain with the NULL address (0.0.0.0 or :: for IPv6). server=/example.com/# will send queries for the domain to the standard configured servers.\n- The patterns /example.com/ and /.example.com/ are equivalent. Both will match example.com and all its subdomains.\n\n- address=/example.com/# will answer queries for the domain with the NULL address (0.0.0.0 or :: for IPv6).\n- server=/example.com/# will send queries for the domain to the standard configured servers.\n\nFor ease of use place the blocklist in a separate file, e.g. /etc/dnsmasq.d/blocklist.conf and load it from /etc/dnsmasq.conf with conf-file=/etc/dnsmasq.d/blocklist.conf or conf-dir=/etc/dnsmasq.d/,*.conf.\n\n- A list of potential sources for the blocklist can be found in OpenWrt's adblock package's README.\n- A hosts file blocklist can be used with the addn-hosts=hosts.txt option or it can be converted to a dnsmasq blocklist with this awk command: awk '/^[^#]/ { print \"address=/\"$2\"/\"$1\"\" }' hosts.txt.\n\n"
    },
    {
      "title": "View cache statistics",
      "level": 3,
      "content": "Cache statistics can be queried using chaos requests, using the drill utility from the ldns package:\n\n```\n$ drill misses.bind TXT CH\n$ drill hits.bind TXT CH\n```\n\nThe output will respectively contain the number of cache misses and hits:\n\n```\n;; ANSWER SECTION:\nmisses.bind.    0       CH      TXT     \"411\"\n```\n\nOther options are cachesize.bind, insertions.bind, evictions.bind, auth.bind and servers.bind.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Caching Nameserver using dnsmasq, and a few other tips and tricks.\n\n"
    }
  ]
}