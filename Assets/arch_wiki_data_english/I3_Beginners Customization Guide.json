{
  "title": "I3/Beginners Customization Guide",
  "url": "https://wiki.archlinux.org/title/I3/Beginners_Customization_Guide",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Comparison of tiling window managers\n- Window manager\n- Sway\n\ni3 is a tiling window manager inspired by wmii that is primarily targeted at developers and advanced users.\n\nThe stated goals for i3 include clear documentation, proper multi-monitor support, a tree structure for windows, and different modes like in vim.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "i3 can be installed with the i3-wm package.\n\nAn i3 package group is also available. It includes the window manager, a screen locker and two programs which write a status line to i3bar through stdout.\n\n"
    },
    {
      "title": "From tty",
      "level": 3,
      "content": "Run i3 with xinit.\n\n"
    },
    {
      "title": "Display manager",
      "level": 3,
      "content": "i3-wm includes i3.desktop as Xsession which starts the window manager. i3-with-shmlog.desktop enables logs (useful for debugging).\n\ni3-gnomeAUR integrates i3 into GNOME - but the underlying i3-gnome is not GNOME 45-compatible, and is not maintained anymore.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "See the official documentation for more information, namely the i3 User's Guide.\n\n"
    },
    {
      "title": "Keyboard shortcuts",
      "level": 3,
      "content": "In i3, commands are invoked with a modifier key, referred to as $mod. This is Alt (Mod1) by default, with Super (Mod4) being a popular alternative. Super is the key usually represented on a keyboard as a Windows icon, or on an Apple keyboard as a Command key.\n\nSee the i3 reference card and Using i3 for the defaults. See Keyboard bindings to add new shortcuts.\n\nUsers of non-Qwerty keyboard layouts may wish to circumvent the \"configuration wizard\" as described below.\n\nIf switching between multiple window managers or desktop environments, consider using sxhkd or another environment agnostic program to manage bindings. More information can be found in Keyboard shortcuts#Xorg.\n\n"
    },
    {
      "title": "Containers and layouts",
      "level": 3,
      "content": "i3 manages windows in a tree structure, with containers as building blocks. This structure branches with horizontal or vertical splits. Containers are tiled by default, but can be set to tabbed or stacking layouts, as well as made floating (such as for dialog windows). Floating windows are always on top.\n\nSee i3 Tree and Containers and the tree data structure for details.\n\n"
    },
    {
      "title": "Application launcher",
      "level": 3,
      "content": "i3 uses dmenu as an application launcher, which is bound by default to $mod+d. As it is an optional dependency dmenu must first be installed before this functionality can be used.\n\ni3-wm contains i3-dmenu-desktop, a Perl wrapper for dmenu which uses desktop entries to create a list of all installed applications. Alternatively, the package j4-dmenu-desktop-gitAUR can be used.\n\nrofi is a popular dmenu replacement and more that can list desktop entries.\n\n"
    },
    {
      "title": "KRunner as application launcher in KDE Plasma/i3",
      "level": 4,
      "content": "It is possible to have i3 running alongside KDE Plasma as seen here: KDE#Use a different window manager\n\nWhen running Plasma with KDEWM=/usr/bin/i3, one can set KRunner as alternative application launcher with $mod+d by adding the following to the i3 config:\n\n```\n~/.config/i3/config\n```\n\n```\nset $menu --no-startup-id qdbus org.kde.krunner /App display\nbindsym $mod+d exec $menu\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "See Configuring i3 for details. The rest of this article assumes the i3 configuration file to be in the folder ~/.config/.\n\n"
    },
    {
      "title": "Configuration wizard and alternative keyboard layouts",
      "level": 3,
      "content": "When i3 is first started, it offers to run the configuration wizard i3-config-wizard. This tool creates ~/.config/i3/config by rewriting a template configuration file in /etc/i3/config.keycodes. It makes two modifications to the default template:\n\n1. It asks the user to choose a default modifier key, which it adds to the template as a single line, like set $mod Mod1; and\n1. it replaces all bindcode lines with bindsym lines corresponding to the user's current keyboard layout.\n\nStep 2 is designed to ensure that the four navigation shortcuts, j, k, l and ; on a Qwerty keyboard, will be mapped to keysyms which have the same location, e.g. h, t, n, s on a Dvorak keyboard. The side-effect of this magic is that up to fifteen other keysyms may be remapped in ways which break the mnemonics - so that, for a Dvorak user, \"restart\" is bound to $mod1+p instead of $mod1+r, \"split horizontally\" is bound to $mod1+d instead of $mod1+h, and so on.\n\nTherefore, users of alternate keyboard layouts who want straightforward key bindings, which match the bindings given in tutorials, may prefer to circumvent the \"config wizard\". This can be done by just copying /etc/i3/config into ~/.config/i3/config (or ~/.i3/config), and editing that file.\n\nNote that a keycode-based configuration is also possible, e.g. for users who often switch between keyboard layouts, but want the i3 bindings to stay the same.\n\n"
    },
    {
      "title": "Autostart",
      "level": 3,
      "content": "Add an exec command in ~/.config/i3/config file to execute a command at startup. For example:\n\n```\nexec terminator\n```\n\nUsing an exec_always command instead will ensure that the command is also run whenever i3 is restarted.\n\nAlternatively, you can use a dedicated implementation of XDG Autostart.\n\n"
    },
    {
      "title": "i3bar",
      "level": 3,
      "content": "In addition to showing workspace information, i3bar can act as an input for i3status or an alternative, such as those mentioned in the next section. For example:\n\n```\n~/.config/i3/config\n```\n\n```\nbar {\n    output            LVDS1\n    status_command    i3status\n    position          top\n    mode              hide\n    workspace_buttons yes\n    tray_output       none\n\n    font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1\n\n    colors {\n        background #000000\n        statusline #ffffff\n\n        focused_workspace  #ffffff #285577\n        active_workspace   #ffffff #333333\n        inactive_workspace #888888 #222222\n        urgent_workspace   #ffffff #900000\n    }\n}\n```\n\nSee the Configuring i3bar for details.\n\n"
    },
    {
      "title": "i3bar alternatives",
      "level": 4,
      "content": "Some users may prefer panels such as those provided by conventional Desktop Environments. This can be achieved within i3 by launching the panel application of choice during startup.\n\nFor example, to use the Xfce panel (xfce4-panel), add the following line anywhere in ~/.config/i3/config:\n\n```\nexec --no-startup-id xfce4-panel --disable-wm-check\n```\n\ni3bar can be disabled by commenting the bar{ } section of ~/.config/i3/config, or defining a keybind to toggle the bar:\n\n```\n~/.config/i3/config\n```\n\n```\n# bar toggle, hide or show\nbindsym $mod+m bar mode toggle\n```\n\nReplacements independent of the desktop environment are listed below:\n\n- polybar — A fast and easy-to-use tool for creating status bars.\n\n- excalibar — Lightweight yet customizable status bar written in C.\n\n"
    },
    {
      "title": "i3status",
      "level": 3,
      "content": "Copy over the default configuration files to the home directory:\n\n```\n$ cp /etc/i3status.conf ~/.config/i3status/config\n```\n\nNot all plugins are defined in the default configuration and some configuration values may be invalid for your system, so they need to be updated accordingly. See i3status(1) for details.\n\n"
    },
    {
      "title": "i3status replacements",
      "level": 4,
      "content": "- bumblebee-status — Theme-able Python status bar generator.\n\n- conky — Highly extensible system monitor. For usage with i3bar see this tutorial.\n\n- goblocks — Fast, lightweight i3status replacement written in Go.\n\n- goi3bar — i3status replacement written in Go. Configuration-file driven with several plugins, concurrency options, and rich plugin support.\n\n- i3blocks — Extensible via shell scripts. It can handle click events, interrupts, and defining of refresh intervals on a per-block basis.\n\n- i3pystatus — Extensible Python 3 status bar with many plugins and configuration options by default.\n\n- i3status-rust — Highly efficient and feature-rich replacement written in Rust. Can handle push updates, individual update intervals, theming and click events.\n\n- j4status — Provides a statusline, configurable via plugins, and written in C. Extra plugins are provided by j4status-plugins-gitAUR[broken link: package not found].\n\n- ty3status — i3status replacement written in Typescript. Built with first class support for javascript blocks.\n\n"
    },
    {
      "title": "i3status wrappers",
      "level": 4,
      "content": "- i3cat — A go based wrapper which can concatenate inputs from multiple external sources. It can handle click events and forwarding user specified signals to its subprocesses.\n\n- py3status — An extensible i3status wrapper written in Python.\n\n- YaGoStatus — Yet Another i3status replacement written in Go.\n\n"
    },
    {
      "title": "Iconic fonts in the status bar",
      "level": 4,
      "content": "Note: **This article or section is a candidate for merging with Fonts#Emoji and symbols.** This article or section is a candidate for merging with Fonts#Emoji and symbols.\n\nThis article or section is a candidate for merging with Fonts#Emoji and symbols.\n\n- ttf-font-awesome — Scalable vector icons that can be customized with CSS.\n\n- ttf-font-icons — Non-overlapping and consistently sized mix of Awesome and Ionicons. This also avoids minor overlapping between DejaVu Sans and Awesome.\n\n- ttf-ionicons — The premium icon font for Ionic Framework.\n\nSee also Fonts#Emoji and symbols.\n\nTo combine fonts, define a font fallback sequence in your configuration file, separating fonts with , like so:\n\n```\n~/.config/i3/config\n```\n\n```\nbar {\n  ...\n  font pango:DejaVu Sans Mono, Icons 8\n  ...\n}\n```\n\nIn accordance with pango syntax, font size is specified only once, at the end of the comma-separated list of font families. Setting a size for each font would cause all but the last font to be ignored.\n\nAdd icons to the format strings in ~/.config/i3status/config using the unicode numbers given in the cheatsheets linked above. The input method will vary between text editors. For instance, to insert the \"heart\" icon (unicode number f004):\n\nNote: **This article or section is a candidate for merging with Input method.** This article or section is a candidate for merging with Input method.\n\nThis article or section is a candidate for merging with Input method.\n\n- in various gui text editors (e.g. gedit, Leafpad) and terminals (e.g. GNOME Terminal, xfce4-terminal): Ctrl+Shift+u, f004, Enter\n- in Emacs: C-x, 8, RET, f004, RET\n- in Vim (while in insert mode): Ctrl+v, uf004\n- in urxvt: while holding Ctrl+Shift, type f004\n\n"
    },
    {
      "title": "Terminal emulator",
      "level": 3,
      "content": "By default when pressing $mod+Enter it launches the i3-sensible-terminal which is a script that invokes a terminal. See i3-sensible-terminal(1) for the order terminals are invoked in.\n\nTo instead launch a terminal of choice, modify this line in ~/.config/i3/config:\n\n```\nbindsym $mod+Return exec i3-sensible-terminal\n```\n\nAlternatively, set the $TERMINAL environment variable.\n\n"
    },
    {
      "title": "Disable title click",
      "level": 3,
      "content": "Add bindsym button1 nop to not select a window when you click on its title frame. Useful if your default layout is tabbed and you often miss click i3's tabs instead of something in an application.\n\n"
    },
    {
      "title": "Jump to opened window",
      "level": 3,
      "content": "- i3-cycle-focus — Provides an Alt-Tab functionality for i3\n\n- i3-easyfocus — Focus and select windows in i3\n\n- quickswitch-i3 — Python utility to quickly change to and locate windows in i3\n\n- Rofi — Switch between windows\n\n- wmfocus — Focus and select windows\n\n"
    },
    {
      "title": "Jump to urgent window",
      "level": 3,
      "content": "Add to ~/.config/i3/config: [1]\n\n```\nbindsym $mod+x [urgent=latest] focus\n```\n\n"
    },
    {
      "title": "Save and restore the window layout",
      "level": 3,
      "content": "From version 4.8, and onward i3 can save and restore workspace layouts. To do this, the following packages are needed: perl-anyevent-i3 and perl-json-xs.\n\n"
    },
    {
      "title": "Save the current window layout of a single workspace",
      "level": 4,
      "content": "To save the current window layout, follow these steps:\n\n1. First, execute various commands to open windows in a preferred workspace and resize them if needed. Make sure to write down each executed command for each window.\n1. Now, in a new workspace, open a terminal and run the following: $ i3-save-tree --workspace N > ~/.config/i3/workspace_N.json where N is the number of the preferred workspace. This will save the current layout of workspace N to the file ~/.config/i3/workspace_N.json.\n1. The newly created file needs to be edited. This may be done automatically with the following command: $ sed -i 's|^\\(\\s*\\)// \"|\\1\"|g; /^\\s*\\/\\//d' ~/.config/i3/workspace_N.json\n\n```\n$ i3-save-tree --workspace N > ~/.config/i3/workspace_N.json\n```\n\n```\n$ sed -i 's|^\\(\\s*\\)// \"|\\1\"|g; /^\\s*\\/\\//d' ~/.config/i3/workspace_N.json\n```\n\n"
    },
    {
      "title": "Restore the window layout of the workspace",
      "level": 4,
      "content": "There are two ways to restore the layout of the workspace: by writing a script, or by editing ~/.config/i3/config to automatically load the layout. In this section only the first case will be considered, refer to the official documentation for the second case.\n\nTo restore the saved layout in the previous section, write a file named load_layout.sh with the following contents:\n\n- The starting lines:\n\n```\n~/load_layout.sh\n```\n\n```\n#!/bin/sh\ni3-msg \"workspace --no-auto-back-and-forth M; append_layout ~/.config/i3/workspace_N.json\"\n```\n\nwhere M is the number of the workspace in which you would like to load the previously saved layout and N is the number of workspaces saved in the previous section.\n\n- And the commands used in the previous section to get the preferred windows, but enclosed in parentheses and with an ampersand appended before the last parentheses.\n\nFor example, if the saved layout contained three uxterm windows:\n\n```\n~/load_layout.sh\n```\n\n```\n#!/bin/sh\n\n# First we append the saved layout of workspace N to workspace M\ni3-msg \"workspace --no-auto-back-and-forth M; append_layout ~/.config/i3/workspace_N.json\"\n\n# And finally we fill the containers with the programs they had\n(uxterm &)\n(uxterm &)\n(uxterm &)\n```\n\nThen set the file as executable. Finally, the layout of workspace N can be loaded onto to workspace M by running:\n\n```\n$ ~/load_layout.sh\n```\n\n"
    },
    {
      "title": "Scratchpad containers",
      "level": 3,
      "content": "By default, scratchpads only contain a single window. However, containers can also be made a scratchpad.\n\nCreate a new container (for example, Mod+Enter), split it (Mod+v) and create another container. Focus the parent (Mod+a), split in the opposite direction (Mod+h), and create a container again.\n\nFocus the first container (with focus parent as needed), make the window floating (Mod+Shift+Space), and move it to the scratchpad (Mod+Shift+-). You can now split containers to preference.\n\nSee also [2] for multiple scratchpads.\n\n"
    },
    {
      "title": "Screensaver and power management",
      "level": 3,
      "content": "With Power management#xss-lock you can register a screenlocker for your i3 session. The -time option with xautolock locks the screen after a given time period:\n\n```\nxautolock -time 10 -locker \"i3lock -i background_image.png\" &\n```\n\nA systemd service file can be used to lock the screen before the system is being sent to sleep or hibernation state. See Power management/Suspend and hibernate#Custom systemd units. Note that i3lock requires the type of service to be forking.\n\nSee also DPMS.\n\nAnother option is to use xidlehookAUR with betterlockscreenAUR or any other screensaver. xidlehook is a xautolock replacement written in Rust, but with a few extra features. This includes the option to disable locking when audio is playing or when the screen is in full screen. The --timer option is given in seconds:\n\n```\nxidlehook --not-when-audio --not-when-fullscreen --timer 360 \"betterlockscreen -l dim\" \"\" &\n```\n\n"
    },
    {
      "title": "Shutdown, reboot, lock screen",
      "level": 3,
      "content": "Key combinations for shutdown, reboot and screenlock can be added to ~/.config/i3/config. The below example assumes you have polkit installed to allow unprivileged users to run power management commands.\n\n```\nset $Locker i3lock && sleep 1\n\nset $mode_system System (l) lock, (e) logout, (s) suspend, (h) hibernate, (r) reboot, (Shift+s) shutdown\nmode \"$mode_system\" {\n    bindsym l exec --no-startup-id $Locker, mode \"default\"\n    bindsym e exec --no-startup-id i3-msg exit, mode \"default\"\n    bindsym s exec --no-startup-id $Locker && systemctl suspend, mode \"default\"\n    bindsym h exec --no-startup-id $Locker && systemctl hibernate, mode \"default\"\n    bindsym r exec --no-startup-id systemctl reboot, mode \"default\"\n    bindsym Shift+s exec --no-startup-id systemctl poweroff -i, mode \"default\"\n\n    # back to normal: Enter or Escape\n    bindsym Return mode \"default\"\n    bindsym Escape mode \"default\"\n}\n\nbindsym $mod+Pause mode \"$mode_system\"\n```\n\nOnce completed, you will be presented with a prompt whenever you press $mod+pause. For more complex behavior, use a separate script, and refer to it in the mode. [3]\n\n- sleep 1 adds a small delay to prevent possible race conditions with suspend [4]\n- The -i argument for systemctl poweroff causes a shutdown even if other users are logged-in (this requires polkit), or when logind (wrongly) assumes so. [5]\n\nFor a list of alternative screen lockers, see List of applications/Security#Screen lockers.\n\n"
    },
    {
      "title": "Swallow terminal window",
      "level": 3,
      "content": "Similarly to dwm, i3 can \"swallow\" the current terminal window with the new GUI window launched from it. This can be done through the use of the i3-swallow-gitAUR package.\n\nFor example, to let mpv's window swallow the originating terminal:\n\n```\n$ swallow mpv video.mp4\n```\n\nAlternatively, terminal swallowing can be simulated by using a tabbed or stacked container in order to hide the terminal window when you are not using it. However, this comes with the drawback of always having a window list at the top of the container.\n\n"
    },
    {
      "title": "External displays manual management",
      "level": 3,
      "content": "Thanks to xrandr there are many ways to easily manage systems displays. The below example integrates it in the i3 configuration file, and behave as the Power Management section above.\n\nHere a laptop with both VGA and HDMI outputs will use a menu selection to switch them On/Off:\n\n```\n## Manual management of external displays\n# Set the shortcuts and what they do\nset $mode_display Ext Screen (v) VGA ON, (h) HDMI ON, (x) VGA OFF, (y) HDMI OFF\nmode \"$mode_display\" {\n    bindsym v exec --no-startup-id xrandr --output VGA1 --auto --right-of LVDS1, mode \"default\"\n    bindsym h exec --no-startup-id xrandr --output HDMI1 --auto --right-of LVDS1, mode \"default\"\n    bindsym x exec --no-startup-id xrandr --output VGA1 --auto --off, mode \"default\"\n    bindsym y exec --no-startup-id xrandr --output HDMI1 --auto --off, mode \"default\"\n\n    # back to normal: Enter or Escape\n    bindsym Return mode \"default\"\n    bindsym Escape mode \"default\"\n}\n# Declare here the shortcut to bring the display selection menu\nbindsym $mod+x mode \"$mode_display\"\n```\n\nAny window that is still open in a switched Off display will automatically come back to the remaining active display.\n\nThe simplest way to determine names of your devices is to plug the device you wish to use and run:\n\n```\n$ xrandr --query\n```\n\nwhich will output the available, recognized devices and their in-system names to set your configuration file appropriately.\n\nRefer to the xrandr page or xrandr(1) for the complete list of available options, the i3 userguide and/or the i3 FAQ on reddit for more info.\n\n"
    },
    {
      "title": "Tabbed or stacked web-browsing",
      "level": 3,
      "content": "Some web-browsers intentionally do not implement tabs, since managing tabs is considered to be the task of the window manager, not the task of the browser.\n\nTo let i3 manage your tab-less web-browser, in this example for uzbl, add the following line to your ~/.config/i3/config\n\n```\nfor_window [class=\"Uzbl-core\"] focus child, layout stacking, focus\n```\n\nThis is for stacked web browsing, meaning that the windows will be shown vertically. The advantage over tabbed browsing is that the window-titles are fully visible, even if a lot of browser windows are open.\n\nIf you prefer tabbed browsing, with windows in horizontal direction ('tabs'), use\n\n```\nfor_window [class=\"Uzbl-core\"] focus child, layout tabbed, focus\n```\n\n"
    },
    {
      "title": "Workspace variables",
      "level": 3,
      "content": "As workspaces are defined multiple times in i3, assigning workspace variables can be helpful. For example:\n\n```\nset $WS1 term\nset $WS2 web\nset $WS3 misc\nset $WS4 media\nset $WS5 code\n```\n\nThen replace workspace names with their matching variables:\n\n```\nbindsym $mod+1          workspace $WS1\n...\nbindsym $mod+Shift+1    move container to workspace $WS1\n```\n\nSee Changing named workspaces for more information.\n\n"
    },
    {
      "title": "Correct handling of floating dialogs",
      "level": 3,
      "content": "While dialogs should open in floating mode by default [6], many still open in tiling mode. To change this behaviour, check the dialog's WM_WINDOW_ROLE with xorg-xprop and add the correct rules to ~/.i3/config (using pcre syntax):\n\n```\nfor_window [window_role=\"About\"] floating enable\nfor_window [window_role=\"Organizer\"] floating enable\nfor_window [window_role=\"Preferences\"] floating enable\nfor_window [window_role=\"bubble\"] floating enable\nfor_window [window_role=\"page-info\"] floating enable\nfor_window [window_role=\"pop-up\"] floating enable\nfor_window [window_role=\"task_dialog\"] floating enable\nfor_window [window_role=\"toolbox\"] floating enable\nfor_window [window_role=\"webconsole\"] floating enable\nfor_window [window_type=\"dialog\"] floating enable\nfor_window [window_type=\"menu\"] floating enable\n```\n\nYou can also use title rules and regular expressions:\n\n```\nfor_window [title=\"Preferences$\"] floating enable\n```\n\nor WM_CLASS:\n\n```\nfor_window [class=\"(?i)mplayer\"] floating enable\n```\n\n"
    },
    {
      "title": "Network Download/Upload speed in statusbar",
      "level": 3,
      "content": "You might adapt this upstream script. For that,\n\n- rename both network cards according to your system (use ip addr)\n- find them on /sys/devices then replace them appropriately:\n\n```\n$ find /sys/devices -name network_interface\n```\n\nNow, just save the script in a suitable place (for example ~/.config/i3) and point your status program to it.\n\n"
    },
    {
      "title": "Automatically switch horizontal / vertical window split orientation",
      "level": 3,
      "content": "The autotiling package can be used for automatic switching horizontal / vertical window split orientation resulting in a similar behavior to the spiral tiling of bspwm. After installation add the following to your ~/.config/i3/config and reload i3.\n\n```\nexec_always --no-startup-id autotiling\n```\n\n"
    },
    {
      "title": "General",
      "level": 3,
      "content": "In many cases, bugs are fixed in the development versions i3-gitAUR and i3status-gitAUR, and upstream will ask to reproduce any errors with this version. [7] See also Debugging/Getting traces#Compilation options.\n\n"
    },
    {
      "title": "Buttons in the i3 message bar do not work",
      "level": 3,
      "content": "Buttons such as \"Edit config\" in i3-nagbar call i3-sensible-terminal, so make sure your Terminal emulator is recognized by i3.\n\n"
    },
    {
      "title": "Faulty line wraps in tiled terminals",
      "level": 3,
      "content": "i3 v4.3 and higher ignore size increment hints for tiled windows [8]. This may cause terminals to wrap lines prematurely, amongst other issues. As a workaround, make the offending window floating, before tiling it again.\n\n"
    },
    {
      "title": "Mouse cursor remains in waiting mode",
      "level": 3,
      "content": "When starting a script or application which does not support startup notifications, the mouse cursor will remain in busy/watch/clock mode for 60 seconds.\n\nTo solve this for a particular application, use the --no-startup-id parameter, for example:\n\n```\nexec --no-startup-id ~/script\nbindsym $mod+d exec --no-startup-id dmenu_run\n```\n\nTo disable this animation globally, see Cursor themes#Create links to missing cursors.\n\n"
    },
    {
      "title": "Unresponsive key bindings",
      "level": 3,
      "content": "Some tools such as scrot may not work when used with a regular key binding (executed after key press). In those cases, execute commands after key release with the --release argument [9]:\n\n```\nbindsym --release Print exec --no-startup-id scrot\nbindsym --release Shift+Print exec --no-startup-id scrot -s\n```\n\n"
    },
    {
      "title": "Tearing",
      "level": 3,
      "content": "i3 does not properly implement double buffering [10] hence tearing or flickering may occur. See picom, or TearFree option of modesetting driver.\n\n"
    },
    {
      "title": "Tray icons not visible",
      "level": 3,
      "content": "The tray_output primary directive may require setting a primary output with xrandr, specifying the output explicitly or simply removing this directive. [11] See Xrandr for details. The default configuration created by i3-config-wizard no longer adds this directive to the configuration from i3 4.12.\n\n"
    },
    {
      "title": "Default workspace for Spotify",
      "level": 3,
      "content": "To assign a default workspace for spotify windows one cannot use the standard route with assign and should rather use a for_window command, such as\n\n```\n~/.config/i3/config\n```\n\n```\n...\nfor_window [class=\"Spotify\"] move container to workspace $ws10\n```\n\nTo ensure for_window does not move the window if already in $ws10, one can instead use move --no-auto-back-and-forth.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official website\n- Funtoo:I3 Tiling Window Manager\n- i3 Source code\n- i3-extras - Collection of scripts and patches\n- i3ipc-glib - A library for i3 extensions\n- i3ipc-ruby - An improved library for i3 extensions in Ruby\n- j4tools - non-official tools designed to work with i3\n- Online Colorscheme Configurator for i3, i3status (non-official)\n\nArch Linux Forums\n\n- The i3 thread - A general discussion about i3\n- i3 desktop screenshots and config sharing\n\nScreencasts\n\n- i3 window manager v4.1 screencast\n- i3 window manager v4.1X screencasts\n\n"
    }
  ]
}