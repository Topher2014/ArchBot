{
  "title": "Rsyslog",
  "url": "https://wiki.archlinux.org/title/Rsyslog",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- syslog-ng\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nrsyslog is a syslog implementation that offers many benefits over syslog-ng. It can be configured to receive log entries from systemd's journal in order to process or filter them before quickly writing them to disk or sending them over network.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the rsyslogAUR package.\n\n"
    },
    {
      "title": "Starting service",
      "level": 3,
      "content": "You can start/enable rsyslog.service after installation.\n\n"
    },
    {
      "title": "Configure hostname",
      "level": 3,
      "content": "Rsyslog uses the glibc routine gethostname() or gethostbyname() to determine the hostname of the local machine. The gethostname() or gethostbyname() routine check the contents of /etc/hosts for the fully qualified domain name (FQDN) if you are not using BIND or NIS.\n\nYou can check what the local machine's currently configured FQDN is by running hostname --fqdn. The output of hostname --short will be used by rsyslog when writing log messages. If you want to have full hostnames in logs, you need to add $PreserveFQDN on to the beginning of the file (before using any directive that write to files). This is because, rsyslog reads its configuration file and applies it on-the-go and then reads the later lines.\n\nThe /etc/hosts file contains a number of lines that map FQDNs to IP addresses and that map aliases to FQDNs. See the example /etc/hosts file below:\n\n```\n/etc/hosts\n```\n\n```\n#<ip-address>    <hostname.domain.org> <hostname>\n#<ip-address>    <actual FQDN> <aliases>\n127.0.0.1        localhost.localdomain somehost.localdomain localhost somehost\n::1              localhost.localdomain somehost.localdomain localhost somehost\n```\n\nlocalhost.localdomain is the first item following the IP address, so gethostbyname() function will return localhost.localdomain as the local machine's FQDN. Then /var/log/messages file will use localhost as hostname.\n\nTo use somehost as the hostname. Move somehost.localdomain to the first item:\n\n```\n/etc/hosts\n```\n\n```\n#<ip-address>    <hostname.domain.org> <hostname>\n#<ip-address>    <actual FQDN> <aliases>\n127.0.0.1        somehost.localdomain localhost.localdomain localhost somehost\n::1              somehost.localdomain localhost.localdomain localhost somehost\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "rsyslog is configured in /etc/rsyslog.conf. See the official documentation for more information on the available configuration options.\n\nBy default, all syslog messages are handled by systemd's journal. In order to gather system logs in rsyslog, you either have to turn on #journald's syslog-forward feature or use the #imjournal module of rsyslog to gather the logs by importing it from the systemd journald.\n\n"
    },
    {
      "title": "imjournal",
      "level": 3,
      "content": "If you want rsyslog to pull messages from systemd, load the imjournal module:\n\n```\n/etc/rsyslog.conf\n```\n\n```\n$ModLoad imjournal\n```\n\nSee the documentation on the imjournal input module for more information.\n\n"
    },
    {
      "title": "journald's syslog-forward feature",
      "level": 3,
      "content": "```\n/etc/systemd/journald.conf\n```\n\n```\nForwardToSyslog=yes\n```\n\nThe rsyslogAUR does not create its working directory /var/spool/rsyslog defined by the $WorkDirectory variable in the configuration file. You might need to create it manually or change its destination.\n\nLog output can be fine tuned in /etc/rsyslog.conf. The daemon uses Facility levels (see below) to determine what gets put where. For example:\n\n```\n/etc/rsyslog.conf\n```\n\n```\n# The authpriv file has restricted access.\nauthpriv.*                                              /var/log/secure\n```\n\nStates that all messages falling under the authpriv facility are logged to /var/log/secure.\n\nAnother example, which would be similar to the behaviour of syslog-ng for the old auth.log:\n\n```\n/etc/rsyslog.conf\n```\n\n```\nauth.*                                                  -/var/log/auth\n```\n\nSee Systemd/Journal#Journald in conjunction with syslog for more information.\n\n"
    },
    {
      "title": "Facility levels",
      "level": 2,
      "content": "Table content:\nFacility Number | Keyword | Facility Description\n0 | kern | kernel messages\n1 | user | user-level messages\n2 | mail | mail system\n3 | daemon | system daemons\n4 | auth | security/authorization messages\n5 | syslog | messages generated internally by syslogd\n6 | lpr | line printer subsystem\n7 | news | network news subsystem\n8 | uucp | UUCP subsystem\n9 |  | clock daemon\n10 | authpriv | security/authorization messages\n11 | ftp | FTP daemon\n12 | - | NTP subsystem\n13 | - | log audit\n14 | - | log alert\n15 | cron | clock daemon\n16 | local0 | local use 0 (local0)\n17 | local1 | local use 1 (local1)\n18 | local2 | local use 2 (local2)\n19 | local3 | local use 3 (local3)\n20 | local4 | local use 4 (local4)\n21 | local5 | local use 5 (local5)\n22 | local6 | local use 6 (local6)\n23 | local7 | local use 7 (local7)\n\n"
    },
    {
      "title": "Severity levels",
      "level": 2,
      "content": "As defined in RFC 5424, there are eight severity levels:\n\nTable content:\nCode | Severity | Keyword | Description | General Description\n0 | Emergency | emerg (panic) | System is unusable. | A \"panic\" condition usually affecting multiple apps/servers/sites. At this level it would usually notify all tech staff on call.\n1 | Alert | alert | Action must be taken immediately. | Should be corrected immediately, therefore notify staff who can fix the problem. An example would be the loss of a primary ISP connection.\n2 | Critical | crit | Critical conditions. | Should be corrected immediately, but indicates failure in a primary system, an example is a loss of a backup ISP connection.\n3 | Error | err (error) | Error conditions. | Non-urgent failures, these should be relayed to developers or admins; each item must be resolved within a given time.\n4 | Warning | warning (warn) | Warning conditions. | Warning messages, not an error, but indication that an error will occur if action is not taken, e.g. file system 85% full - each item must be resolved within a given time.\n5 | Notice | notice | Normal but significant condition. | Events that are unusual but not error conditions - might be summarized in an email to developers or admins to spot potential problems - no immediate action required.\n6 | Informational | info | Informational messages. | Normal operational messages - may be harvested for reporting, measuring throughput, etc. - no action required.\n7 | Debug | debug | Debug-level messages. | Info useful to developers for debugging the application, not useful during operations.\n\n"
    },
    {
      "title": "journald with rsyslog for kernel messages",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nSince the syslog component of systemd, journald, does not flush its logs to disk during normal operation, these logs will be gone when the machine is shut down abnormally (power loss, kernel lock-ups, ...). In the case of kernel lock-ups, it can be important to have some kernel logs for debugging. Until journald gains a configuration option for flushing kernel logs, rsyslog can be used in conjunction with journald.\n\nSummary of requirements:\n\n- journald must still get all log messages.\n- rsyslog must only log kernel messages, all other logs are handled by journald.\n- Kernel logs must be logged separatedly to /var/log/kernel.log.\n- Use systemd to start the service.\n\nInstallation and configuration steps:\n\n1. Install rsyslogAUR.\n1. Edit /etc/logrotate.d/rsyslog and add /var/log/kernel.log to the list of logs. Without this modification, the kernel log would grow indefinitely.\n1. Edit /etc/rsyslog.conf and comment everything except for $ModLoad imklog. If a heart-beat (repeated confirmation that the log is alive) is preferred, $ModLoad immark should remain uncommented as well.\n1. Add the next line to the same configuration file: kern.* /var/log/kernel.log;RSYSLOG_TraditionalFileFormat The kern.* part catches all messages originating from the kernel. ;RSYSLOG_TraditionalFileFormat is used here to use a less verbose date format. By default, a date format like 2013-03-09T19:29:33.103897+01:00 is used. Since the kernel log contains a precision already (printk time) and the actual log time is irrelevant, a format like Mar 9 19:29:13 might be preferred.\n1. Since rsyslog should operate completely separated from systemd, remove the option that shares a socket with systemd: # sed 's/^Sockets=/#&/' /usr/lib/systemd/system/rsyslog.service > /etc/systemd/system/rsyslog.service\n1. Next, make rsyslog start on boot and start it for this session by starting and enabling rsyslog.service.\n\n```\nkern.*     /var/log/kernel.log;RSYSLOG_TraditionalFileFormat\n```\n\n```\n# sed 's/^Sockets=/#&/' /usr/lib/systemd/system/rsyslog.service > /etc/systemd/system/rsyslog.service\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Rsyslog manual\n\n"
    }
  ]
}