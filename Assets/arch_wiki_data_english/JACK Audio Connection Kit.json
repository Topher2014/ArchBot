{
  "title": "JACK Audio Connection Kit",
  "url": "https://wiki.archlinux.org/title/JACK_Audio_Connection_Kit",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- ALSA\n- PipeWire\n- Professional audio\n- PulseAudio\n- Sound system\n\nFrom Wikipedia:JACK Audio Connection Kit:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "There are three different implementations of the JACK API: jackAUR, jack2 and pipewire-jack. For an overview, refer to #Comparison of JACK implementations.\n\nInstall one of the above packages. For 32-bit application support, also install the lib32-jack2 or lib32-pipewire-jack package (respectively) from the multilib repository.\n\nFor the official JACK example-clients and tools install jack-example-tools.\n\nFor an alternative ALSA MIDI support in jack2 install a2jmidid.\n\nFor dbus support with jack2 install jack2-dbus.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Depending on your use-case and hardware, the system may need further configuration, to allow a JACK implementation to use additional resources or to function properly.\n\n"
    },
    {
      "title": "Latency",
      "level": 3,
      "content": "The latency of a running JACK instance (i.e. how much time is spent processing one block of audio) is defined by its frames per period/sample rate ratio.\n\nWhen looking at jackd(1) § ALSA_BACKEND_OPTIONS as an example, these parameters are defined by the -p and -r flags (respectively).\n\n"
    },
    {
      "title": "Realtime scheduling and additional resources",
      "level": 3,
      "content": "All JACK implementations may make use of elevated realtime scheduling priority, which allows them to make use of the CPU cycles more often than other applications (see e.g. -P in jackd(1) § OPTIONS).\n\nThe realtime-privileges package provides the realtime system group, which is permitted elevated rtprio and unlimited memlock with a sysctl drop-in configuration file and is permitted to alter the system's /dev/cpu_dma_latency file, which may be used by applications to prevent the CPU to use higher C states.\n\nInstall the realtime-privileges package and add your user to the realtime group to be able to use realtime scheduling priority that is higher than the default.\n\n"
    },
    {
      "title": "Realtime kernel and advanced modifications",
      "level": 3,
      "content": "A kernel facilitating the realtime kernel patchset (such as linux-rt or linux-rt-lts) may be used in situations where very low latencies are required. Refer to professional audio for further information and other advanced modifications.\n\n"
    },
    {
      "title": "Starting the audio graph",
      "level": 2,
      "content": "The different JACK implementations have varying ways of starting the audio graph.\n\n"
    },
    {
      "title": "Jack",
      "level": 3,
      "content": "Jack1 only supports starting via the jackd(1) executable or by using one of the graphical frontends, that support starting via the library interface.\n\n"
    },
    {
      "title": "Jack2",
      "level": 3,
      "content": "Jack2 supports starting via the jackd(1) executable, the jack_control script (provided by the jack2-dbus package), the jack@.service systemd user service (refer to /etc/jack/example.conf for configuration documentation) or by using one of the graphical frontends, that support starting via the library or dbus interface.\n\n"
    },
    {
      "title": "Pipewire-jack",
      "level": 3,
      "content": "Pipewire's JACK implementation does not provide the jackd(1) executable or dbus integration. The audio graph is started by the pipewire.service systemd user service.\n\n"
    },
    {
      "title": "Comparison of JACK implementations",
      "level": 2,
      "content": "The following table lists the current implementations of the JACK API and their differing feature sets.\n\nTable content:\nName | Maintenance | Language | SMP support | Jackd executable | Dbus integration | Systemd integration | Firewire support | ALSA MIDI support | Multi soundcard support | Network support\njackAUR | Inactive | C | No | Yes | No | No | ALSA/libffado | Builtin | jack-example-tools | netJACK1/ jacktrip/ zita-njbridge\njack2 | Active | C/C++ | Yes | Yes | Yes | Yes | ALSA/libffado | Builtin/ a2jmidid [2] | Builtin/jack-example-tools | netJACK2/ jacktrip/ zita-njbridge\npipewire-jack | Active | C/C++ | Yes | No | No | Yes | ALSA | Builtin | Builtin | jacktrip/ zita-njbridge\n\n"
    },
    {
      "title": "Comparison of JACK control GUIs",
      "level": 2,
      "content": "The following table lists control GUIs for JACK and their differing features and levels of support towards the JACK implementations.\n\nTable content:\nName | jack1 start/ stop | jack2 start/ stop | pipewire-jack start/ stop | Patchbay | Save graph connections | new-session-manager support\ncadenceAUR | No | Yes | No | Yes (Catia) | No (LADISH via Claudia is unsupported) | No\ncarla | No | No | No | Yes | Yes | Yes\npatchageAUR | No | No | No | Yes | No | No\npatchmatrix | No | No | No | Yes | No | No\nqjackctl | Yes | Yes | No | Yes | Yes | No\nraysessionAUR | No | No | No | Yes | Yes | Yes\nstudio-controls-gitAUR | Yes | Yes | No | No | No | No\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Applications for interacting with JACK and its audio graph",
      "level": 3,
      "content": "- Cadence — Set of tools useful for audio production. It performs system checks, manages JACK, calls other tools and make system tweaks.\n\n- Carla — Fully-featured plugin host, with support for many audio drivers and plugin formats.\n\n- Jack Mixer — Multi-channel audio mixer application for the JACK Audio Connection Kit.\n\n- Patchage — Modular patch bay for audio and MIDI systems based on JACK and ALSA.\n\n- PatchMatrix — JACK patch bay in flow matrix style.\n\n- QjackCtl — Simple Qt application to control the JACK sound server daemon.\n\n- RaySession — Audio session manager, with a patch bay and NSM support.\n\n- Studio-Controls — A JACK audio setup utility with USB device and PulseAudio bridges.\n\n"
    },
    {
      "title": "Using MIDI devices",
      "level": 3,
      "content": "JACK can handle one soundcard very well, and an arbitrary number of MIDI devices (connected e.g. via USB). If you start JACK and want to use a MIDI keyboard or a synthesizer or some other pure MIDI device, you have to start JACK with a proper soundcard (one that actually outputs or inputs PCM sound). As soon you have done that, you can connect the MIDI device. E.g. with QjackCtl (qjackctl), you click on the connect button and you will find your device listed under JACK-MIDI or ALSA-MIDI, depending on the driver.\n\nFor JACK-MIDI, you may want to set the MIDI Driver to seq or raw in QjackCtl Setup > Settings. This should make your MIDI device appear under the MIDI tab. You can also change the name of the client (from a generic \"midi_capture_1\" to something more descriptive), if you enable Setup > Display > Enable client/port aliases and then Enable client/port aliases editing (rename).\n\nFor ALSA-MIDI, make sure to turn on Enable ALSA Sequencer support in QjackCtl Setup > Misc. This will add the ALSA tab in QjackCtl Connect window where your MIDI controller will show up.\n\nFor bridging ALSA-MIDI to JACK-MIDI, you may consider using a2jmidid (a2jmidid). The following command will export all available ALSA MIDI ports to JACK MIDI ports:\n\n```\n$ a2j_control --ehw && a2j_control --start\n```\n\nThey will be visible in QjackCtl under the MIDI tab labelled \"a2j\" client. You can automate starting of a2jmidid by adding to QjackCtl Setup > Options > Execute script after Startup: /usr/bin/a2j_control --ehw && /usr/bin/a2j_control --start\n\n- Q: What is the difference between JACK-MIDI and ALSA-MIDI?\n- A: The former has improved timing and sample accurate MIDI event alignment. It extends or may even replace the latter but at this point they both co-exist.\n\nTo install some M-Audio MIDI keyboards, you will need the firmware package midisport-firmwareAUR. Also, the snd_usb_audio module has to be available. For more information about specific USB MIDI devices, see https://alsa.opensrc.org/USBMidiDevices.\n\n"
    },
    {
      "title": "A shell-based example setup",
      "level": 3,
      "content": "JACK2 can be directly launched with the jackd executable, or controlled with the D-Bus-based jack_control binary. jack_control makes it easy to start and configure JACK2 via a shell script. Note that you must install the jack2-dbus package to use jack_control. For the a2j_control commands you also need a2jmidid installed (see #Using MIDI devices for more information).\n\nCreate a shell script that can be executed at X login:\n\n```\nstart_jack.sh\n```\n\n```\n#!/bin/sh\n\njack_control start\njack_control ds alsa\njack_control dps device hw:HD2\njack_control dps rate 48000\njack_control dps nperiods 2\njack_control dps period 64\nsleep 10\na2j_control --ehw\na2j_control --start\nsleep 10\nqjackctl &\n```\n\nThe above will start a working JACK instance which other programs can then utilize. Details of each line follow. When discovering your own best configuration, it is helpful to do trial and error using QjackCtl's GUI with a non-D-Bus JACK2 version.\n\n"
    },
    {
      "title": "Details of the shell-based example setup",
      "level": 4,
      "content": "```\n$ jack_control start\n```\n\nStarts JACK if it is not already started.\n\n```\n$ jack_control ds alsa\n```\n\nSets JACK to use the ALSA driver set.\n\n```\n$ jack_control dps device hw:HD2\n```\n\nSets JACK to use ALSA-compatible sound card named HD2. One can find the names with cat /proc/asound/cards. Most ALSA tutorials and default configurations use card numbers, but this can get confusing when external MIDI devices are in use; names make it easier.\n\n```\n$ jack_control dps rate 48000\n```\n\nSets JACK to use 48000 khz sampling. Happens to work very well with this card. Some cards only do 44100, many will go much higher. The higher you go, the lower your latency, but the better your card and your CPU have to be, and software has to support this as well.\n\n```\n$ jack_control dps nperiods 2\n```\n\nSets JACK to use 2 periods. 2 is right for motherboard, PCI, PCI-X, etc.; 3 for USB.\n\n```\n$ jack_control dps period 64\n```\n\nSets JACK to use 64 frames per period. Lower is less latency, but the setting in this script gives 2.67 ms latency, which is nicely low without putting too much stress on the particular hardware this example was built for. If a USB sound system were in use it might be good to try 32. Anything less than 3-4 ms should be fine for realtime synthesis and/or FX, 5 ms is the smallest a human being can detect. QjackCtl will tell you how you are doing; at no-load, which means no clients attached, you will want a max of 3-5% CPU usage, and if you cannot get that without xruns (the red numbers which mean the system cannot keep up with the demands), you will have to improve your hardware.\n\n```\n$ sleep 10\n```\n\nWait for the above to settle.\n\n```\n$ a2j_control --ehw && a2j_control --start\n```\n\nStart the ALSA-to-JACK MIDI bridge. Good for mixing in applications which take MIDI input through ALSA but not JACK.\n\n```\n$ sleep 10\n```\n\nWait for the above to settle.\n\n```\n$ qjackctl &\n```\n\nLoad QjackCtl. GUI configuration tells it to run in the system tray. It will pick up the JACK session started by D-Bus just fine, and very smoothly too. It maintains the patchbay, the connections between these applications and any other JACK-enabled applications to be started manually. The patchbay is set up using manual GUI, but connections pre-configured in the patchbay are automatically created by QjackCtl itself when applications are started.\n\n"
    },
    {
      "title": "A GUI-based example setup",
      "level": 3,
      "content": "This example setup utilizes a more GUI focused configuration and management of JACK\n\n- Install jack2 and jack2-dbus.\n- Install qjackctl, and tell your GUI window/desktop system to run it at startup.\n- Make sure QjackCtl is told to: use the D-Bus interface, run at startup, save its configuration to the default location, start the JACK audio server on application startup, enable the system tray icon, and start minimized to system tray.\n- Reboot.\n- After logging in, you will see QjackCtl in your system tray. Left-click on it.\n- Tweak settings in the QjackCtl GUI to lower latency. The Frame Size, Frame Buffer, and Bitrate settings all affect latency. Larger frame sizes lower latency, lower frame buffers lower latency, and higher bitrate settings lower latency, but all increase load on the sound card and your CPU. A Latency of about ~5ms is desirable for direct monitoring of instruments or microphones, as the latency begins to become perceptible at higher latencies.\n\n- use the D-Bus interface,\n- run at startup,\n- save its configuration to the default location,\n- start the JACK audio server on application startup,\n- enable the system tray icon, and\n- start minimized to system tray.\n\n"
    },
    {
      "title": "An alternative GUI-based setup",
      "level": 3,
      "content": "If you use JACK for demanding tasks, but every now and then, it is possible to suspend a running PulseAudio session with QjackCtl just when you are using it. On a virgin config, modify the Server prefix option in the Settings > Advanced submenu, so that it states :\n\n```\npasuspender -- jackd\n```\n\nThe PulseAudio session should resume fine after you close QjackCtl. Tip courtesy of this post.\n\n"
    },
    {
      "title": "Playing nice with ALSA",
      "level": 3,
      "content": "To allow ALSA programs to play while jack is running you must install the jack plugin for ALSA with alsa-plugins.\n\nAnd enable it by editing (or creating) /etc/asound.conf (system wide settings) to have these lines if you have a simple 2-channel setup:\n\n```\n# convert ALSA API over JACK API\n# use it with\n# % aplay foo.wav\n\n# use this as default\npcm.!default {\n    type plug\n    slave.pcm \"jack\"\n    hint.description \"Jack Audio\"\n}\n```\n\nIf you have a different number of output/input channels or your first two channels are not the ones you wish to route audio to, you cannot use the predefined jack pcm source from /etc/alsa/conf.d/50-jack.conf, but rather something like:\n\n```\npcm.!jack {\n    type jack\n    # If \"mpv --ao:alsa ...\" gives you this error:\n    # [ao/alsa] Unable to set buffer time near: Invalid argument\n    # uncomment the following to allow non-jack-aligned period size:\n    #align_psize = 0\n    playback_ports {\n        0 system:playback_2\n        1 system:playback_3\n    }\n}\n\npcm.!default {\n    type plug\n    slave.pcm \"jack\"\n    hint.description \"Jack Audio\"\n}\n```\n\nYou need not restart your computer or anything. Just edit the ALSA configuration files, start up jack, and there you go...\n\nRemember to start it as a user. If you start it with jackd -d alsa as user X, it will not work for user Y.\n\nFor another (more robust but definitely more complex) approach, is to configure and use an ALSA loopback device, by loading the snd-aloop kernel module, as is described in this article. This snd-aloop approach can also be used to bridge Wine's ALSA output to JACK as explained in [3].\n\n"
    },
    {
      "title": "GStreamer",
      "level": 3,
      "content": "GStreamer requires the gst-plugins-good package to work with JACK, which contains the jackaudiosink plugin that adds JACK playback support.\n\nFurther information (outdated): https://jackaudio.org/faq/gstreamer_via_jack.html\n\n"
    },
    {
      "title": "PulseAudio",
      "level": 3,
      "content": "If you need to keep PulseAudio installed (in the event it is required by other packages, like gnome-settings-daemon), you may want to prevent it from spawning automatically with X and taking over from JACK.\n\nEdit /etc/pulse/client.conf, uncomment \"autospawn\" and set it to \"no\":\n\n```\n;autospawn = yes\nautospawn = no\n```\n\nIf you want both to play along, see: PulseAudio/Examples#PulseAudio through JACK\n\nCadence and other JACK GUI applications are known to write values to ~/.pulse/daemon.conf. These values override any system-wide defaults enabling unexpected behavior (e.g. flat volumes). Refer to PulseAudio#Configuration on how to update these configurations.\n\n"
    },
    {
      "title": "FireWire",
      "level": 3,
      "content": "In order to prevent ALSA from messing around with your firewire devices you have to blacklist all firewire related kernel modules. This also prevents PulseAudio from using IEEE 1394. Create the following file:\n\n```\n/etc/modprobe.d/alsa-no-jack.conf\n```\n\n```\nblacklist snd-fireworks\nblacklist snd-bebob\nblacklist snd-oxfw\nblacklist snd-dice\nblacklist snd-firewire-digi00x\nblacklist snd-firewire-tascam\nblacklist snd-firewire-lib\nblacklist snd-firewire-transceiver\nblacklist snd-fireface\nblacklist snd-firewire-motu\n```\n\nThe list of modules is the most recent available at the time of writing at ALSA Firewire Improve Repository.\n\nNow you can unload your loaded firewire modules or reboot.\n\n"
    },
    {
      "title": "Network / remote audio",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nJACK can be configured to send audio data over a network to a \"master\" machine, which then outputs the audio to a physical device. This can be useful to mix audio from a number of \"slave\" computers without requiring additional cables or hardware mixers, and keeping the audio path digital for as long as possible (as hardware mixers with digital inputs are very rare).\n\nThe configuration is very simple, however it requires a network that supports multicast traffic (i.e. IGMP snooping must be enabled on managed network switches), and it requires all machines be running the same JACK major version (JACK1 or JACK2) as the protocols are not interoperable between versions. For JACK2, the netmanager module must be loaded:\n\n```\nmaster$ jack_load netmanager -i -c\n```\n\nThe -i -c option tells the netmanager to automatically map any incoming connections to the default audio device. Without this, each incoming connection would have to be manually mapped on each connection. You can use -i -h instead to see all available options, however note that the options are printed in the jackd server output, the jack_load command will not show anything.\n\nOn the client, JACK must be started in network mode:\n\n```\nslave$ jackd -d net\n```\n\nThe two machines will connect and on the master the new audio source will be visible:\n\n```\nmaster$ jack_lsp\nsystem:playback_1\nsystem:playback_2\nremotehost:from_slave_1\nremotehost:from_slave_2\n```\n\nIf you passed the -c option to jack_load as above, then the remote system will now be able to play audio.\n\n"
    },
    {
      "title": "\"Cannot lock down memory area (Cannot allocate memory)\" message on startup",
      "level": 3,
      "content": "See Realtime process management#Configuring PAM and ensure that the user is in the realtime user group.\n\n"
    },
    {
      "title": "jack2 and qjackctl errors",
      "level": 3,
      "content": "Still having the \"Cannot allocate memory\" and/or \"Cannot connect to server socket err = No such file or directory\" error(s) when pressing qjackctl's start button?\n\nPlease delete ~/.jackdrc, ~/.config/jack/conf.xml, ~/.config/rncbc.org/QjackCtl.conf. Kill jackdbus and restart from scratch :) (Thanks to nedko)\n\nAlso try running\n\n```\n$ fuser /dev/snd/*\n```\n\nand check the resulting PID's with\n\n```\n$ ps ax | grep [PID here]\n```\n\nThis will hopefully show the conflicting programs.\n\n"
    },
    {
      "title": "\"ALSA: cannot set channel count to 1 for capture\" error in logs",
      "level": 3,
      "content": "Change ALSA input and output channels from 1 to 2\n\n"
    },
    {
      "title": "Crackling or pops in audio",
      "level": 3,
      "content": "Your CPU or sound card is too weak to handle your settings for JACK. Lower the bitrate, lower the frame size, and raise the frame period in small increments until crackling stops. You can also try changing the sampling rate to 44100 or whatever is natively supported. This allows jack to send audio to the system without having to resample. In jack2 with jack_control, this is accomplished with\n\n```\njack_control dps rate 44100\n```\n\n"
    },
    {
      "title": "No audio",
      "level": 3,
      "content": "If everything appears to be working - you can visually \"see\" sound in Jack and other things such as PulseAudio can emit sound, check the maximum sample size supported by your sound card. If your card only supports 16 bit samples then you will hear nothing until you tell Jack not to use large samples:\n\n```\njack_control dps shorts true\n```\n\nIf you install jack-example-tools then you can run jack_simple_client to send a test tone to Jack's output.\n\n"
    },
    {
      "title": "VLC - no audio after starting JACK",
      "level": 4,
      "content": "Run VLC and change the following menu options:\n\n- Tools > Preferences\n- Show settings: All\n- Audio > Output modules > Audio output module: JACK audio output\n- Audio > Output modules > JACK: Automatically connect to writable clients (enable)\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- JACK Wiki Differences between JACK 1 and JACK2\n- JACK FAQ Information on using JACK over network\n- a2jmidid source code\n- jack1 source code\n- jack2 source code\n- jack-example-tools source code\n- #jack — JACK IRC channel\n\n- Differences between JACK 1 and JACK2\n\n- Information on using JACK over network\n\n"
    }
  ]
}