{
  "title": "Diretrizes de pacotes Node.js",
  "url": "https://wiki.archlinux.org/title/Diretrizes_de_pacotes_Node.js",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "32-bit – CLR – CMake – Cross – DKMS – Eclipse – Electron – Fonte – Free Pascal – GNOME – Go – Haskell – Java – KDE – Kernel – Lisp – Meson – MinGW – Node.js – Nonfree – OCaml – Perl – PHP – Python – R – Ruby – Rust – Shell – VCS – Web – Wine\n\nEsse documento cobre padrões e diretrizes de escrita PKGBUILDs para pacotes Node.js.\n\n"
    },
    {
      "title": "Nomenclatura de pacote",
      "level": 2,
      "content": "Nomes de pacote para bibliotecas do Node.js devem iniciar com um prefixo nodejs-. Para aplicativos independentes, use apenas o nome do programa.\n\n"
    },
    {
      "title": "Usando npm",
      "level": 2,
      "content": "Ao instalar com npm, adicione-o como dependência de compilação:\n\n```\nmakedepends=('npm')\n```\n\nGeralmente, não há necessidade de extrair o tarball:\n\n```\nnoextract=(\"${pkgname}-${pkgver}.tgz\")\n```\n\nEssa é uma função package mínima:\n\n```\npackage() {\n    npm install -g --prefix \"${pkgdir}/usr\" \"${srcdir}/${pkgname}-${pkgver}.tgz\"\n\n    # Non-deterministic race in npm gives 777 permissions to random directories.\n    # See https://github.com/npm/cli/issues/1103 for details.\n    find \"${pkgdir}/usr\" -type d -exec chmod 755 {} +\n\n    # npm gives ownership of ALL FILES to build user\n    # https://bugs.archlinux.org/task/63396\n    chown -R root:root \"${pkgdir}\"\n}\n```\n\n"
    },
    {
      "title": "Definindo um cache temporário",
      "level": 3,
      "content": "Quando o npm processa package.json para compilar um pacote, ele baixa dependências para sua pasta de cache padrão em $HOME/.npm. Para evitar encher a pasta pessoa do usuário, podemos definir temporariamente uma pasta de cache diferente com a opção --cache.\n\nBaixe as dependências para ${srcdir}/npm-cache e instale-os no diretório do pacote:\n\n```\nnpm install --cache \"${srcdir}/npm-cache\"\n```\n\nContinue com empacotamento de costume:\n\n```\nnpm run packager\n```\n\n"
    },
    {
      "title": "Pacote contém referência para $srcdir/$pkgdir",
      "level": 3,
      "content": "Infelizmente, o npm cria referências ao diretório de origem e ao diretório pkg. Este é um problema conhecido. No entanto, você pode remover essas referências manualmente, pois elas não são usadas de forma alguma.\n\nTodas as dependências conterão uma referência a $pkgdir, no atributo _where. Você pode geralmente remover esses atributos com alguma magia do sed da seguinte forma:\n\n```\nfind \"$pkgdir\" -name package.json -print0 | xargs -r -0 sed -i '/_where/d'\n```\n\nSeu pacote principal também terá outras referências. A maneira mais fácil de removê-los é remover todas as propriedades sublinhadas, mas isso não é tão fácil com o sed. Em vez disso, você pode usar jq para obter resultados semelhantes, como segue:\n\n```\nlocal tmppackage=\"$(mktemp)\"\nlocal pkgjson=\"$pkgdir/usr/lib/node_modules/$pkgname/package.json\"\njq '.|=with_entries(select(.key|test(\"_.+\")|not))' \"$pkgjson\" > \"$tmppackage\"\nmv \"$tmppackage\" \"$pkgjson\"\nchmod 644 \"$pkgjson\"\n```\n\nOutro lugar onde você pode encontrar referências a $pkgdir são os atributos man dos pacotes. Se você não se importa com as páginas man (elas não serão instaladas para dependências de qualquer maneira), você pode excluí-las assim:\n\n```\nfind \"$pkgdir\" -type f -name package.json | while read pkgjson; do\n    local tmppackage=\"$(mktemp)\"\n    jq 'del(.man)' \"$pkgjson\" > \"$tmppackage\"\n    mv \"$tmppackage\" \"$pkgjson\"\n    chmod 644 \"$pkgjson\"\ndone\n```\n\nUm exemplo de todas essas três técnicas pode ser visto em readability-cliAUR[link quebrado: package not found].\n\n"
    },
    {
      "title": "Usando nvm",
      "level": 2,
      "content": "Quando um aplicativo baseado em node.js requer uma versão diferente para compilamento ou empacotamento, nvm pode ser aproveitado.\n\nAdicione-o como uma dependência de compilação:\n\n```\nmakedepends=('npm' 'nvm')\n```\n\nnvm usa a variável de ambiente NVM_DIR para procurar por seu prefixo, que é definido com $HOME/.nvm se não especificado antes da inicialização do nvm.\n\nVocê pode usar a seguinte função para criar e isolar seu prefixo personalizado da localização do usuário:\n\n```\n_ensure_local_nvm() {\n    # lets be sure we are starting clean\n    which nvm >/dev/null 2>&1 && nvm deactivate && nvm unload\n    export NVM_DIR=\"${srcdir}/.nvm\"\n\n    # The init script returns 3 if version specified\n    # in ./.nvrc is not (yet) installed in $NVM_DIR\n    # but nvm itself still gets loaded ok\n    source /usr/share/nvm/init-nvm.sh || [[ $? != 1 ]\n}\n```\n\nEsta função deve ser chamada antes de interagir com nvm, npm ou outros programas baseados em node.js que devem usar a versão especificada.\n\n"
    },
    {
      "title": "Exemplo de uso em um PKGBUILD",
      "level": 3,
      "content": "```\nprepare() {\n    _ensure_local_nvm\n    nvm install 14.15.0\n}\n\nbuild() {\n    _ensure_local_nvm\n    npm install\n}\n```\n\nAlternativamente, nvm install padrão vai procurar por uma string de versão no arquivo .nvrc no diretório atual.\n\nUm exemplo deste uso pode ser visto no insomniaAUR.\n\n"
    }
  ]
}