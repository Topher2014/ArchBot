{
  "title": "Home Assistant",
  "url": "https://wiki.archlinux.org/title/Home_Assistant",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Home Assistant Supervised\n\nHome Assistant is an open source home automation software that puts local control and privacy first. Powered by a worldwide community of tinkerers and DIY enthusiasts.\n\n"
    },
    {
      "title": "Install",
      "level": 2,
      "content": "Install the home-assistant package. This is installing the core flavor of Home Assistant.\n\n"
    },
    {
      "title": "Home Assistant Supervised",
      "level": 3,
      "content": "Refer to Home Assistant Supervised.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Configuration files are stored at /var/lib/hass/. If no configuration exists, a default configuration will be written at startup.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "To start Home Assistant, start/enable home-assistant.service.\n\nThe first start may take up to 20 minutes because the required packages will be downloaded and installed.[1] You can see the progress in the logs.\n\n```\n# journalctl -fu home-assistant\n```\n\nBy default, the web interface is available at http://localhost:8123.\n\nThe Backup restore function is not available in the UI. The backup can be restored by extraction of the tar.gz file in the Backup as user hass:\n\n```\n# tar --strip-components=1 -xzf homeassistant.tar.gz -C /var/lib/hass\n```\n\n"
    },
    {
      "title": "Using MariaDB",
      "level": 3,
      "content": "By default, SQLite is used for the recorder/history integration within Home Assistant. A noticeable performance boost is achievable by using MariaDB (especially for larger setups). Home assistant uses SQLAlchemy which means that any backend is supported, like MySQL, MariaDB, PostgreSQL, or MS SQL Server. Here we only discuss MariaDb, for others please refer to the recorder integration documentation.\n\nIf not already installed, please refer to MariaDB for installation details.\n\nInstall the python-mysqlclient package dependency.\n\nCreate a new database, the example below shows a single username per service, with wildcard access to all databases having the username as a prefix e.g.:\n\n```\n$ mysql -u root -p\n```\n\n```\nCREATE USER 'username'@'localhost' IDENTIFIED BY 'some_pass'Â ;\nCREATE DATABASE username;\nGRANT ALL PRIVILEGES ON username.* TO 'username'@'localhost';\nFLUSH PRIVILEGES;\nquit;\n```\n\nAdd to your configuration file:\n\n```\n/var/lib/hass/configuration.yaml\n```\n\n```\nrecorder:\n  db_url: !secret recorder_mariadb_url\n```\n\nAdd to your secrets file (if not using a Unix socket, see the recorder integration documentation for alternative URLs):\n\n```\n/var/lib/hass/secrets.yaml\n```\n\n```\nrecorder_mariadb_url: \"mysql://USER:PASSWORD@localhost/DATABASE?unix_socket=/var/run/mysqld/mysqld.sock&charset=utf8mb4\"\n```\n\nFinally, restart the home-assistant.service. The database should now start to populate. For more information refer to the recorder integration documentation.\n\n"
    },
    {
      "title": "Using Postgresql",
      "level": 3,
      "content": "You need to install the python module called psycopg2 into the venv of hass.\n\nYou will need to add a systemd drop-in file:\n\n```\n/etc/systemd/system/home-assistant.service.d/postgresql.conf\n```\n\n```\n[Service]\nExecStartPre=/var/lib/hass/.venv/bin/python -m pip install psycopg2\n```\n\nThis will make sure psycopg2 is a module that is always installed.\n\nAdd a role and create the database:\n\n```\n[postgres]$ createuser homeassistant\n[postgres]$ createdb homeassistant -O homeassistant\n```\n\nConfigure Home Assistant to use the PostgreSQL secret as the database URL:\n\n```\n/var/lib/hass/configuration.yaml\n```\n\n```\nrecorder:\n  db_url: !secret recorder_postgresql_url\n```\n\nAdd the database URL to your secrets file:\n\n```\n/var/lib/hass/secrets.yaml\n```\n\n```\nrecorder_postgresql_url: \"postgresql://homeassistant@127.0.0.1/homeassistant\"\n```\n\nFinally, restart the home-assistant.service. The database should now start to populate.\n\n"
    },
    {
      "title": "No access to USB devices",
      "level": 3,
      "content": "In the default installation, the Home Assistant may not have the necessary access to work with some devices, such as a Zigbee USB dongle. This is because such devices are controlled by the uucp system group.\n\nEdit the home-assistant.service and add SupplementaryGroups=uucp to the [Service] section so that the default hass user belongs to the right group.\n\nThen, after a daemon-reload and restart of home-assistant.service it should be up and running.[2]\n\n"
    },
    {
      "title": "ModuleNotFoundErrors in logs",
      "level": 3,
      "content": "If Home Assistant is broken after a system package upgrade, it could be caused by a bad interaction between the system packages and Home Assistant's managed Python libraries. To reset Home Assistant's Python libraries and reinstall them from scratch, delete the modules directory:\n\n```\n# rm -r /var/lib/hass/deps/lib\n```\n\nThen restart home-assistant.service.\n\nIf the first restart produces more ModuleNotFoundErrors, it might be necessary to a second restart. Home Assistant will detect that its modules are missing and automatically reinstall them.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Home Assistant homepage\n- Home Assistant documentation\n\n"
    }
  ]
}