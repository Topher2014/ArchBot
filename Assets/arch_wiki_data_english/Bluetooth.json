{
  "title": "Bluetooth",
  "url": "https://wiki.archlinux.org/title/Bluetooth",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Bluetooth mouse\n- Bluetooth keyboard\n- Bluetooth headset\n- Blueman\n- ObexFTP\n\nBluetooth is a standard for the short-range wireless interconnection of cellular phones, computers, and other electronic devices. In Linux, the canonical implementation of the Bluetooth protocol stack is BlueZ.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "1. Install the bluez package, providing the Bluetooth protocol stack.\n1. Install the bluez-utils package, providing the bluetoothctl utility. Additionally install bluez-deprecated-tools to have the deprecated BlueZ tools as well.\n1. The generic Bluetooth driver is the btusb kernel module. Check whether that module is loaded. If it is not, then load the module.\n1. Start/enable bluetooth.service.\n\n- Some Bluetooth adapters are bundled with a Wi-Fi card (e.g. older Intel Centrino cards). These require that the Wi-Fi card is firstly enabled (typically a keyboard shortcut on a laptop) in order to make the Bluetooth adapter visible to the kernel.\n- Some Bluetooth cards (e.g. Broadcom) conflict with the network adapter. Thus, you need to make sure that your Bluetooth device gets connected before the network service boot.\n- Some tools such as hcitool and hciconfig have been deprecated upstream, and are no longer included in bluez-utils. Since these tools will no longer be updated, it is recommended that scripts be updated to avoid using them. If you still desire to use them, install additionally bluez-deprecated-tools. See FS#53110 and the Bluez mailing list for more information.\n- Since 2024, bluez-obex and bluez-mesh have been separated from bluez. Therefore, if you plan to transfer files over Bluetooth, bluez-obex needs to be installed and the user service obex.service needs to be enabled.\n\n"
    },
    {
      "title": "Console",
      "level": 4,
      "content": "- bluetoothctl — Pairing a device from the shell is one of the simplest and most reliable options.\n\n- bluetuith — Provides a Bluetooth manager via a Terminal User Interface for easier pairing and device/adapter management, with OBEX File Transfer and mouse support.\n\n- bluetui — A TUI for managing Bluetooth devices.\n\n"
    },
    {
      "title": "Graphical",
      "level": 4,
      "content": "The following packages allow for a graphical interface to customize Bluetooth.\n\n- GNOME Bluetooth — GNOME's Bluetooth tool. gnome-bluetooth-3.0 provides the back-end (gnome-bluetooth is now legacy) gnome-shell provides the status monitor applet gnome-control-center provides the configuration front-end GUI that can be accessed by typing Bluetooth on the Activities overview, or with the gnome-control-center bluetooth command. You can also launch the bluetooth-sendto command directly to send files to a remote device. nautilus-bluetoothAUR adds a \"Send via Bluetooth\" entry to Nautilus' right-click menu To receive files, open the Bluetooth settings panel; you can only receive whilst the Bluetooth panel is open. To add a Bluetooth entry to the Send To menu in Thunar's file properties menu, see instructions here. (The command that needs to be configured is bluetooth-sendto %F).\n- Bluedevil — KDE's Bluetooth tool. If there is no Bluetooth icon visible in Dolphin and in the system tray, enable it in the system tray options or add a widget. You can configure Bluedevil and detect Bluetooth devices by clicking the icon. An interface is also available from the KDE System Settings.\n\n- gnome-bluetooth-3.0 provides the back-end (gnome-bluetooth is now legacy)\n- gnome-shell provides the status monitor applet\n- gnome-control-center provides the configuration front-end GUI that can be accessed by typing Bluetooth on the Activities overview, or with the gnome-control-center bluetooth command.\n- You can also launch the bluetooth-sendto command directly to send files to a remote device.\n- nautilus-bluetoothAUR adds a \"Send via Bluetooth\" entry to Nautilus' right-click menu\n- To receive files, open the Bluetooth settings panel; you can only receive whilst the Bluetooth panel is open.\n- To add a Bluetooth entry to the Send To menu in Thunar's file properties menu, see instructions here. (The command that needs to be configured is bluetooth-sendto %F).\n\n- Blueberry — Linux Mint's spin-off of GNOME Bluetooth, which works in all desktop environments. Blueberry does not support receiving files through Obex Object Push.\n\n- Blueman — A full featured Bluetooth manager.\n\n- ObexFTP — A tool for transferring files to/from any OBEX enabled device.\n\n- Overskride — A simple yet powerful Bluetooth client.\n\n"
    },
    {
      "title": "Pairing",
      "level": 2,
      "content": "This section describes directly configuring bluez via the bluetoothctl(1) command line tool, which might not be necessary if you are using an alternative front-end tool (such as GNOME Bluetooth).\n\nThe exact procedure depends on the devices involved and their input functionality. What follows is a general outline of pairing a device using bluetoothctl.\n\nStart the bluetoothctl interactive command. Input help to get a list of available commands.\n\n1. (optional) Select a default controller with select MAC_address.\n1. (optional) Enter power on to turn the power to the controller on if the device is set to off. It is on by default; see #Default adapter power state.\n1. Enter devices to get the MAC address of the device with which to pair.\n1. Enter device discovery mode with scan on command if device is not yet on the list.\n1. Turn the agent on with agent on or choose a specific agent: if you press tab twice after agent you should see a list of available agents. A Bluetooth agent is what manages the Bluetooth 'pairing code'. It can either respond to a 'pairing code' coming in, or can send one out. The default-agent should be appropriate in most cases.[1]\n1. Enter pair MAC_address to do the pairing (tab completion works).\n1. If using a device without a PIN, one may need to manually trust the device before it can reconnect successfully. Enter trust MAC_address to do so.\n1. Enter connect MAC_address to establish a connection.\n\nAn example session may look this way:\n\n```\n$ bluetoothctl\n```\n\n```\n[NEW] Controller 00:10:20:30:40:50 hostname [default]\n[bluetooth]# agent KeyboardOnly\nAgent registered\n\n[bluetooth]# default-agent\nDefault agent request successful\n\n[bluetooth]# power on\nChanging power on succeeded\n[CHG] Controller 00:10:20:30:40:50 Powered: yes\n\n[bluetooth]# scan on\nDiscovery started\n[CHG] Controller 00:10:20:30:40:50 Discovering: yes\n[NEW] Device 00:12:34:56:78:90 device name\n[CHG] Device 00:12:34:56:78:90 LegacyPairing: yes\n\n[bluetooth]# pair 00:12:34:56:78:90\nAttempting to pair with 00:12:34:56:78:90\n[CHG] Device 00:12:34:56:78:90 Connected: yes\n[CHG] Device 00:12:34:56:78:90 Connected: no\n[CHG] Device 00:12:34:56:78:90 Connected: yes\nRequest PIN code\n[agent] Enter PIN code: 1234\n[CHG] Device 00:12:34:56:78:90 Paired: yes\nPairing successful\n[CHG] Device 00:12:34:56:78:90 Connected: no\n\n[bluetooth]# connect 00:12:34:56:78:90\nAttempting to connect to 00:12:34:56:78:90\n[CHG] Device 00:12:34:56:78:90 Connected: yes\nConnection successful\n```\n\n"
    },
    {
      "title": "Dual boot pairing",
      "level": 3,
      "content": "To pair devices on dual boot setups you need to change the pairing keys on your Linux install so that they are consistent with what Windows or macOS is using.\n\nThis page only describes the manual method of doing so. To automate the process, see the bt-dualboot project and the related repositories. For a semi-automated process, use the bluetooth-dualboot script which does not edit any files, but it helps you run the right commands and cut-and-paste the correct values.\n\n"
    },
    {
      "title": "Setup",
      "level": 4,
      "content": "To do this, first pair your device on your Arch Linux install. Then reboot into the other OS and pair the device. Now you need to extract the pairing keys, but first switch off the Bluetooth devices to prevent any connection attempts.\n\n"
    },
    {
      "title": "For Windows",
      "level": 4,
      "content": "You can extract your Bluetooth keys on either Linux or Windows:\n\nFirst, boot into Windows.\n\nThe registry key containing the link keys may only be accessed by the SYSTEM account, which cannot be logged into. Therefore, you will need Microsoft's PsExec tool from the official Windows Sysinternals site in order to run regedit.exe as SYSTEM.\n\nDownload PsTools, and extract PsExec64.exe.\n\nIn an administrator instance of a command shell, from the location of the extracted EXE, launch the registry editor:\n\n```\n.\\PsExec64.exe -s -i regedit.exe\n```\n\nIn the registry editor, navigate to the following registry key:\n\n```\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\BTHPORT\\Parameters\\Keys\n```\n\nWithin this registry key is one subkey per Bluetooth adapter, named by MAC address. If there are multiple subkeys, and you are unsure of which to use, follow this guide to find the MAC address for the desired Bluetooth adapter.\n\nIn the desired adapter's registry key, there is a name-value pair for each paired device, with the name being its MAC address. Additionally, you might see some subkeys named by MAC addresses, each containing name-value pairs with names like LTK or IRK. These subkeys (if any) are for Bluetooth 5.1 devices. If the device you're trying to share has a subkey, it is a Bluetooth 5.1 device. If it does not have a subkey, only a name-value pair, it is not a Bluetooth 5.1 device.\n\nRight click on the adapter's registry key and export it as a .reg file. This is a text file that you can copy keys from. As mentioned, it contains pairing keys in name-value pairs for non-Bluetooth 5.1 devices, and pairing keys (and some other information) in per-device subkeys for Bluetooth 5.1 devices. Make this file available to your Linux installation and reboot into it.\n\nIf the device you want to share is not a Bluetooth 5.1 device, jump to #Saving the configuration. If it is a Bluetooth 5.1 device, you need to make some modifications to the pairing keys and the associated information before finishing up. Refer to #Preparing Bluetooth 5.1 Keys to see how.\n\nBoot into Arch. Install chntpw. Mount your windows system drive.\n\n```\n$ cd /path/to/windows/system/Windows/System32/config\n$ chntpw -e SYSTEM\n```\n\nInside the chntpw environment, run\n\n```\n> cd CurrentControlSet\\Services\\BTHPORT\\Parameters\\Keys\n```\n\nInstead of CurrentControlSet, you may see ControlSet00X (check using ls):\n\n```\n> cd ControlSet00X\\Services\\BTHPORT\\Parameters\\Keys\n```\n\nThen get your Bluetooth adapter's MAC address and enter its folder\n\n```\n> ls\n> cd your-device's-mac-address\n```\n\nDo the same for your paired devices. If this is not a Bluetooth 5.1 device, you will only see the pairing key:\n\n```\n> ls\n```\n\n```\nNode has 0 subkeys and 1 values\nsize  type        value name    [value if type DWORD]\n16    REG_BINARY <123456789876>\n```\n\nIf so, get your device's key through hex:\n\n```\n> hex 123456789876\n```\n\n```\n:00000 XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX (some other chars)\n```\n\nThe \"XX\"s are the pairing key. Make note of which keys map to which MAC addresses.\n\nIf this is a Bluetooth 5.1 device, then you will see several keys corresponding to the one device.\n\n```\nNode has 0 subkeys and 8 values\n  size     type              value name             [value if type DWORD]\n    16  3 REG_BINARY         <LTK>\n     4  4 REG_DWORD          <KeyLength>               16 [0x10]\n     8  b REG_QWORD          <ERand>\n     4  4 REG_DWORD          <EDIV>                 37520 [0x9290]\n    16  3 REG_BINARY         <IRK>\n     8  b REG_QWORD          <Address>\n     4  4 REG_DWORD          <AddressType>              1 [0x1]\n     4  4 REG_DWORD          <AuthReq>                 45 [0x2d]\n```\n\nRefer to #Preparing Bluetooth 5.1 Keys to see how to use these, using hex value_name to obtain the requested values.\n\nFinally, to import the key(s) into your Linux installation, proceed to #Saving the configuration.\n\n"
    },
    {
      "title": "For macOS",
      "level": 4,
      "content": "Boot into macOS:\n\n- For macOS Monterey or newer: Open Keychain Access and search for Bluetooth. Sort by date. If you've recently removed and reconnected the device then you can simply sort the keys by date modified and pick the latest. It is probably called MobileBluetooth (for older Bluetooth devices) or is just an UUID (for Bluetooth 5.1+). Double click on the entry. Check that the MAC address in the Account field matches the MAC address of your device. Click the \"Show password\" checkbox. You will now need to enter your password, twice. Copy the text in the password field, it's actually an XML file (⌘+a ⌘+c) Paste the text in bt_keys.txt in your home directory.\n- For High Sierra or newer, run the following in a terminal: # defaults read /private/var/root/Library/Preferences/com.apple.bluetoothd.plist LinkKeys > ~/bt_keys.txt\n- For Sierra or older, run the following in a terminal: # defaults read /private/var/root/Library/Preferences/blued.plist LinkKeys > ~/bt_keys.txt\n\n1. Open Keychain Access and search for Bluetooth.\n1. Sort by date.\n1. If you've recently removed and reconnected the device then you can simply sort the keys by date modified and pick the latest. It is probably called MobileBluetooth (for older Bluetooth devices) or is just an UUID (for Bluetooth 5.1+).\n1. Double click on the entry. Check that the MAC address in the Account field matches the MAC address of your device.\n1. Click the \"Show password\" checkbox. You will now need to enter your password, twice.\n1. Copy the text in the password field, it's actually an XML file (⌘+a ⌘+c)\n1. Paste the text in bt_keys.txt in your home directory.\n\n```\n# defaults read /private/var/root/Library/Preferences/com.apple.bluetoothd.plist LinkKeys > ~/bt_keys.txt\n```\n\n```\n# defaults read /private/var/root/Library/Preferences/blued.plist LinkKeys > ~/bt_keys.txt\n```\n\nThe ~/.bt_keys.txt file now contains the established Bluetooth keys. For older versions of macOS (High Sierra and older) you will have to reverse the keys before proceeding. For example, 98 54 2f aa bb cc dd ee ff gg hh ii jj kk ll mm becomes MM LL KK JJ GG FF EE DD CC BB AA 2F 54 98.\n\n```\n>>> key = \"98 54 2f aa bb cc dd ee ff gg hh ii jj kk ll mm\"\n>>> \" \".join(reversed(key.strip().split()))\n```\n\nIf this is a Bluetooth 5.1 device, then there will be more than one key corresponding to one device. Refer to #Preparing Bluetooth 5.1 Keys to see how to use these.\n\nFinally, to import the key(s) into your Linux installation, reboot into Linux and proceed to #Saving the configuration.\n\n"
    },
    {
      "title": "Preparing Bluetooth 5.1 Keys",
      "level": 4,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nIf you observed the presence of Bluetooth 5.1 keys while following #For Windows or #For macOS, you must apply certain transformations to their values before importing them into Linux. Create the requested files with their appropriate contents, for installation in #Saving the configuration. This process will depend on the device, and some of the values have to be manipulated; code utilities for doing so are provided below.\n\nTable content:\nDevice | Source Key and Transformations (Windows) | Source Key and Transformations (macOS) | Destination Key File\nLogitech MX Master 3 Logitech MX Master 3S Logitech MX Keys Logitech MX Mechanical Xbox One S Wireless Controller | Copy IRK. Remove the spaces between the hex octets. | ? | IdentityResolvingKey.Key\nCopy LTK. Remove the spaces between the hex octets. | ? | SlaveLongTermKey.Key and PeripheralLongTermKey.Key\nERand and EDIV should be 0 | Random Number and Encrypted Diversifier should be 0. | –\nLogitech MX Anywhere 2S | Copy IRK. Remove the spaces between the hex octets. | ? | IdentityResolvingKey.Key\nCopy CSRK. Remove the spaces between the hex octets. | ? | LocalSignatureKey.Key\nCopy LTK. Remove the spaces between the hex octets. | ? | LongTermKey.Key\nCopy KeyLength. Convert the whole number to decimal. | ? | LongTermKey.EncSize\nCopy EDIV. Convert the whole number to decimal. | ? | LongTermKey.EDiv\nCopy ERand. Reverse the order of the octets. Convert the whole number to decimal. | ? | LongTermKey.Rand\nRoyal Kludge F68 keyboard is like the Logitech MX Anywhere 2S | Also copy CSRKInbound too. Remove the spaces between the hex octets. | ? | RemoteSignatureKey.Key\nThinkPad TrackPoint Keyboard II Pebble M350 mouse Logitech G604 Lightspeed mouse | Copy IRK. Reverse the order of the octets. | Copy Remote IRK. Convert from base64 to hex. | IdentityResolvingKey.Key\nCopy LTK. Remove the spaces between the hexadecimal octets. | Copy Remote Encryption > Long-term Key. Convert from base64 to hex. | LongTermKey.Key\nCopy ERand. Reverse the order of the octets. Convert the whole number to decimal. | Copy Remote Encryption > Random Number. Convert from base64 to a little-endian decimal number (see Python code below). | LongTermKey.Rand\nCopy EDIV. Reverse the order of the octets. Convert the whole number to decimal. | Copy Remote Encryption > Encrypted Diversifier. Convert from base64 to a little-endian decimal number (see Python code below). | LongTermKey.EDiv\nOther devices | Copy LTK. Remove the spaces between the hex octets. | Copy Remote IRK. Convert from base64 to hex. | LongTermKey.Key\nCopy ERand. Reverse the order of the octets. Convert the whole number to decimal. | Copy Remote Encryption > Long-term Key. Convert from base64 to hex. | LongTermKey.Rand\nCopy EDIV. Remove the spaces between the hex octets. | Copy Remote Encryption > Encrypted Diversifier. Convert from base64 to hex. Reverse the order of the octets. | LongTermKey.EDiv\nXbox wireless controller | Copy LTK. Remove the spaces between the hex octets. | ? | SlaveLongTermKey.Key\n\n- Logitech MX Master 3\n- Logitech MX Master 3S\n- Logitech MX Keys\n- Logitech MX Mechanical\n- Xbox One S Wireless Controller\n\n- Copy IRK.\n- Remove the spaces between the hex octets.\n\n- Copy LTK.\n- Remove the spaces between the hex octets.\n\n- Logitech MX Anywhere 2S\n\n- Copy IRK.\n- Remove the spaces between the hex octets.\n\n- Copy CSRK.\n- Remove the spaces between the hex octets.\n\n- Copy LTK.\n- Remove the spaces between the hex octets.\n\n- Copy KeyLength.\n- Convert the whole number to decimal.\n\n- Copy EDIV.\n- Convert the whole number to decimal.\n\n- Copy ERand.\n- Reverse the order of the octets.\n- Convert the whole number to decimal.\n\n- Royal Kludge F68 keyboard is like the Logitech MX Anywhere 2S\n\n- Also copy CSRKInbound too.\n- Remove the spaces between the hex octets.\n\n- ThinkPad TrackPoint Keyboard II\n- Pebble M350 mouse\n- Logitech G604 Lightspeed mouse\n\n- Copy IRK.\n- Reverse the order of the octets.\n\n- Copy Remote IRK.\n- Convert from base64 to hex.\n\n- Copy LTK.\n- Remove the spaces between the hexadecimal octets.\n\n- Copy Remote Encryption > Long-term Key.\n- Convert from base64 to hex.\n\n- Copy ERand.\n- Reverse the order of the octets.\n- Convert the whole number to decimal.\n\n- Copy Remote Encryption > Random Number.\n- Convert from base64 to a little-endian decimal number (see Python code below).\n\n- Copy EDIV.\n- Reverse the order of the octets.\n- Convert the whole number to decimal.\n\n- Copy Remote Encryption > Encrypted Diversifier.\n- Convert from base64 to a little-endian decimal number (see Python code below).\n\n- Copy LTK.\n- Remove the spaces between the hex octets.\n\n- Copy Remote IRK.\n- Convert from base64 to hex.\n\n- Copy ERand.\n- Reverse the order of the octets.\n- Convert the whole number to decimal.\n\n- Copy Remote Encryption > Long-term Key.\n- Convert from base64 to hex.\n\n- Copy EDIV.\n- Remove the spaces between the hex octets.\n\n- Copy Remote Encryption > Encrypted Diversifier.\n- Convert from base64 to hex.\n- Reverse the order of the octets.\n\n- Copy LTK.\n- Remove the spaces between the hex octets.\n\n- To just remove the spaces from a value, you can use this online tool or this Python code:\n\n```\n>>> \"key_value\".replace(\" \", \"\")\n```\n\n- This Python code does only the octet reversal:\n\n```\n>>> ERand=\" 63 02 84 B8 5D 40 44 DF   \"\n>>> ERand=list(reversed(ERand.strip().split()))\n```\n\n- This Python code does the additional decimal conversion required for some:\n\n```\n>>> int(\"\".join(ERand), 16)\n16088054540146049635\n```\n\n- This Python code does the base64 to hex conversion:\n\n```\nbinascii.hexlify(base64.decodebytes(b'...')).upper()\n```\n\n- This Python code does the full macOS Encrypted Diversifier conversion:\n\n```\nstruct.unpack('<H', base64.decodebytes(b'...'))\n```\n\n- This Python code does the full macOS Random Number conversion:\n\n```\nstruct.unpack('<Q', base64.decodebytes(b'...'))\n```\n\nFor an example of the general case:\n\n- An LTK of 48 4D AF CD 0F 92 22 88 0A 52 9A F4 76 DA 8B 94 makes for a LongTermKey.Key of 484DAFCD0F9222880A529AF476DA8B94.\n- An ERand of 63 02 84 B8 5D 40 44 DF makes for a Rand of 16088054540146049635.\n- An EDIV of 37520 makes for an EDiv of 37520.\n\n"
    },
    {
      "title": "Saving the configuration",
      "level": 4,
      "content": "Now that you have the keys change user to root, then continue with:\n\n```\n# cd /var/lib/bluetooth/BT-Adapter-MAC-address\n```\n\nHere you will find folders for each paired Bluetooth device. For each device you want to pair with Arch and your dual boot, do the following:\n\n```\n# cd device-MAC-address\n```\n\nIf you have a pairing key (i.e. this is not a Bluetooth 5.1 device), then edit the info file and change the key under [LinkKey]. E.g.:\n\n```\ninfo\n```\n\n```\n[LinkKey]\nKey=XXXXXXXXXXXXXXX\n```\n\nIf you have several keys, as in Bluetooth 5.1, edit the info file and substitute all applicable keys with their recorded values. E.g. for an Xbox One S Wireless Controller:\n\n```\ninfo\n```\n\n```\n[IdentityResolvingKey]\nKey=<IdentityResolvingKey.Key>\n\n[PeripheralLongTermKey]\nKey=<PeripheralLongTermKey.Key>\n\n[SlaveLongTermKey]\nKey=<SlaveLongTermKey.Key>\n```\n\nThen restart bluetooth.service and pulseaudio (with pulseaudio -k && pulseaudio --start).\n\nYou should be able to connect to your device now.\n\n"
    },
    {
      "title": "Default transport 3.0 vs 5.x (low energy)",
      "level": 3,
      "content": "To force Bluetooth controller to use older Bluetooth transport protocol (e.g. because its simpler to setup dual boot pairing for 3.0 device, than for 5.x BLE device), set ControllerMode=bredr in /etc/bluetooth/main.conf in the [General] section:\n\n```\n/etc/bluetooth/main.conf\n```\n\n```\n[General]\nControllerMode=bredr\n```\n\nDefault value is ControllerMode=dual i.e. both BR/EDR and LE enabled.\n\n"
    },
    {
      "title": "Default adapter power state",
      "level": 3,
      "content": "As of bluez 5.65, BlueZ' default behavior is to power on all Bluetooth adapters when starting the service or resuming from suspend. [2]\n\nIf you would like the adapter to not be automatically enabled (e.g. on a portable device where you wish to save battery), set AutoEnable=false in /etc/bluetooth/main.conf in the [Policy] section:\n\n```\n/etc/bluetooth/main.conf\n```\n\n```\n[Policy]\nAutoEnable=false\n```\n\nThe adapter can still be turned on manually by running power on as described in #Pairing.\n\n"
    },
    {
      "title": "Discoverable on startup",
      "level": 3,
      "content": "If the device should always be visible and directly connectable:\n\n```\n/etc/bluetooth/main.conf\n```\n\n```\n[General]\nDiscoverableTimeout = 0\n```\n\n"
    },
    {
      "title": "Wake from suspend",
      "level": 3,
      "content": "To allow Bluetooth keyboards, mice, etc. to wake the system from suspend. First, check the bios settings and make sure that wake from USB is not disabled. In many cases, Bluetooth from the motherboard is a USB device.\n\nAdd a new udev rule for Bluetooth adapter(s) (USB Wireless Controller Base Class, Bluetooth Programming Interface Protocol) to enable wake from suspend:\n\n```\n/etc/udev/rules.d/91-bluetooth-wakeup.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"usb\", DRIVERS==\"usb\", \\\n    ATTR{bDeviceClass}==\"e0\", \\\n    ATTR{bDeviceProtocol}==\"01\", \\\n    ATTR{bDeviceSubClass}==\"01\", \\\nATTR{power/wakeup}=\"enabled\"\n```\n\nTo automatically re-configure your Bluetooth keyboard after wakeups to e.g. have a different keymap or key press repeat rate (for details, see Xorg/Keyboard configuration#Adjusting typematic delay and rate and xmodmap), create an executable script:\n\n```\nconfigure_keyboard.sh\n```\n\n```\n#!/bin/sh\nexport DISPLAY=:0\nxset r rate 220 30\nxmodmap /your/path/to/.Xmodmap\n```\n\nThen create an additional udev rule like above:\n\n```\n/etc/udev/rules.d/92-keyboard-reconfiguration-wakeup.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"usb\", DRIVERS==\"usb\", \\\n    ATTR{bDeviceClass}==\"e0\", \\\n    ATTR{bDeviceProtocol}==\"01\", \\\n    ATTR{bDeviceSubClass}==\"01\" \\\nRUN+=\"/your/path/to/configure_keyboard.sh\"\n```\n\n"
    },
    {
      "title": "Enabling experimental features",
      "level": 3,
      "content": "The Bluez stack keeps new, potentially buggy features behind the D-Bus experimental and kernel experimental options. The functionality included under these varies over time, as experimental features are determined to be stable and no longer require the option (as an example: enabling D-Bus experimental interfaces currently allows to report battery level for old headsets). To enable these, uncomment the corresponding line in the configuration:\n\n```\n/etc/bluetooth/main.conf\n```\n\n```\n...\n\n# Enables D-Bus experimental interfaces\n# Possible values: true or false\n#Experimental = true\n\n# Enables kernel experimental features, alternatively a list of UUIDs\n# can be given.\n# Possible values: true,false,<UUID List>\n# Possible UUIDS:\n...\n# Defaults to false.\n#KernelExperimental = true\n```\n\nAlternatively, you can edit the bluetooth.service to add the --experimental or --kernel flag, like this drop-in file:\n\n```\n/etc/systemd/system/bluetooth.service.d/override.conf\n```\n\n```\n[Service]\nExecStart=\nExecStart=/usr/lib/bluetooth/bluetoothd --experimental\n```\n\nEither way, you must then restart the bluetooth.service.\n\n"
    },
    {
      "title": "Audio",
      "level": 2,
      "content": "You will typically need to take an additional step to integrate the audio server with Bluetooth. This is detailed in the below sections.\n\nSee the Bluetooth headset page for more information about Bluetooth audio and Bluetooth headsets.\n\n"
    },
    {
      "title": "PulseAudio",
      "level": 3,
      "content": "In order to be able to use audio equipment like Bluetooth headphones or speakers, you need to install the additional pulseaudio-bluetooth package. Make sure to restart PulseAudio to make the installation take effect: pulseaudio -k. With a default PulseAudio installation (specifically, using a user instance with the packaged default.pa) you should immediately be able to stream audio from a Bluetooth device to your speakers. [3]\n\nIf you have a system-wide PulseAudio setup make sure the user running the daemon (usually pulse) is in the lp group and you load the Bluetooth modules in your PulseAudio config:\n\n```\n/etc/pulse/system.pa\n```\n\n```\n...\nload-module module-bluetooth-policy\nload-module module-bluetooth-discover\n...\n```\n\nOptionally, add load-module module-switch-on-connect if you want to auto-switch all audio to the Bluetooth device.\n\n"
    },
    {
      "title": "PipeWire",
      "level": 3,
      "content": "PipeWire as of v0.3.19 enables its Bluetooth support by default.\n\n"
    },
    {
      "title": "ALSA",
      "level": 3,
      "content": "First, ensure that your Bluetooth audio device is correctly paired and connected to the system.\n\nThen, install bluez-alsa-gitAUR, start (and enable) the bluealsa service, and add your user to the audio group.\n\nRun the following command to check if everything is working as intended (replace XX:XX:XX:XX:XX:XX and FILE.wav below):\n\n```\n$ aplay -D bluealsa:SRV=org.bluealsa,DEV=XX:XX:XX:XX:XX:XX,PROFILE=a2dp FILE.wav\n```\n\nFinally, add the following lines to your ~/.asoundrc:\n\n```\n~/.asoundrc\n```\n\n```\ndefaults.bluealsa {\n    service \"org.bluealsa\"\n    device \"XX:XX:XX:XX:XX:XX\"\n    profile \"a2dp\"\n}\n```\n\nYou can now use the bluealsa device to reach your Bluetooth audio device. Volume management is conducted normally via alsamixer with the option -D bluealsa.\n\n"
    },
    {
      "title": "Bluetooth serial",
      "level": 2,
      "content": "To get Bluetooth serial communication working on Bluetooth-to-Serial modules (HC-05, HC-06) do the following steps:\n\nPair your Bluetooth device using bluetoothctl as described above.\n\nInstall bluez-deprecated-tools, as it provides certain functionality which is missing from newer tools.\n\nBind paired device MAC address to tty terminal:\n\n```\n# rfcomm bind rfcomm0 MAC_address_of_Bluetooth_device\n```\n\nNow you can open /dev/rfcomm0 for serial communication:\n\n```\n$ picocom /dev/rfcomm0 -b 115200\n```\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n"
    },
    {
      "title": "Debugging",
      "level": 4,
      "content": "In order to debug, first stop bluetooth.service.\n\nAnd then start it with the -d parameter:\n\n```\n# /usr/lib/bluetooth/bluetoothd -n -d\n```\n\nAnother option is via the btmon tool.\n\n"
    },
    {
      "title": "Deprecated BlueZ tools",
      "level": 4,
      "content": "Eight BlueZ tools were deprecated and removed from bluez-utils, although not all of them were superseded by newer tools. The bluez-deprecated-tools package now provides these deprecated tools.\n\nTable content:\nDeprecated tool | Most likely replacement\ngatttool | btgatt-client, D-Bus Gatt API[dead link 2023-10-29 ⓘ]\nhciattach | btattach\nhciconfig | btmgmt (and bluetoothctl?)\nhcidump | btmon (and btsnoop)\nhcitool | missing, D-Bus Device API[dead link 2023-10-29 ⓘ] available\nrfcomm | missing, implement with D-Bus Profile1 API[dead link 2023-10-29 ⓘ]?\nciptool\nsdptool | missing, functionality seems to be scattered over different D-Bus objects: Profile[dead link 2023-10-29 ⓘ], Advertising[dead link 2023-10-29 ⓘ], and the UUIDs arrays in device[dead link 2023-10-29 ⓘ] and adapter[dead link 2023-10-29 ⓘ].\n\n"
    },
    {
      "title": "systemd: Condition check resulted in Bluetooth service being skipped",
      "level": 4,
      "content": "bluetooth.service only requires the directory /sys/class/bluetooth to exist, which should be created by kernel module bluetooth, which is only autoloaded by systemd-udev if it actually finds a working Bluetooth hardware device.\n\nIf your /sys/class/bluetooth does not exist, check if your kernel Bluetooth module is loaded by lsmod. If not, and you believe you have a Bluetooth device, you can try manually starting them by loading the Bluetooth module and restarting bluetooth.service.\n\nYou should also load your corresponding kernel Bluetooth driver when loading the bluetooth module, most likely btusb, but can also be btrtl,btintel,btbcm,bnep,btusb etc.\n\nCheck bluetooth.service's unit status to see whether it started.\n\nSee also Debian Bug report logs - #853207.\n\nIf bluetooth.service started successfully, there is a chance that you still cannot use Bluetooth normally (e.g. bluetoothctl says something like org.Bluez.Error.NotReady when you scan on). If this happens, try rebooting your computer, and double-check: whether directory /sys/class/bluetooth exists; whether lsmod includes correct Bluetooth modules; log messages in the journal; etc. systemd-udev should pickup your Bluetooth hardware automatically without manual changes again.\n\n"
    },
    {
      "title": "Bluetooth immediately waking up suspend-to-idle devices",
      "level": 4,
      "content": "On systems capable of suspend-to-idle/S2idle/S0ix/Modern Standby, Bluetooth controllers will stay enabled during sleep. This will usually cause the system to wake up immediately after going to sleep if any Bluetooth device is connected.\n\nTo prevent this, you can disable Bluetooth completely before going to sleep - install bluez-utils and create this file:\n\n```\n/etc/systemd/system/bluetooth-disable-before-sleep.service\n```\n\n```\n[Unit]\nDescription=Disable Bluetooth before going to sleep\nBefore=sleep.target\nBefore=suspend.target\nBefore=hybrid-sleep.target\nBefore=suspend-then-hibernate.target\nStopWhenUnneeded=yes\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\n\nExecStart=/usr/bin/bluetoothctl power off\nExecStop=/usr/bin/bluetoothctl power on\n\n[Install]\nWantedBy=sleep.target\nWantedBy=suspend.target\nWantedBy=hybrid-sleep.target\nWantedBy=suspend-then-hibernate.target\n```\n\nEnable this service and check if Bluetooth devices disconnect when going to sleep, and whenever Bluetooth goes back up after waking up the system.\n\nIf this workaround is in use, waking up the system with a Bluetooth mouse/keyboard will not work.\n\n"
    },
    {
      "title": "Bluetooth turns off after logout on a headless/server system",
      "level": 4,
      "content": "This can have various causes:\n\n- Both PulseAudio and PipeWire run as user services by default, which are terminated once the last session ends. Enable lingering for the user to fix this.\n- Additionally, when running WirePlumber with PipeWire (which is usually the case), WirePlumber runs a \"logind-monitor\" which enables Bluetooth on login and disables it on logout. See WirePlumber#Keep Bluetooth running after logout / Headless Bluetooth for a fix.\n\n"
    },
    {
      "title": "hcitool scan: Device not found",
      "level": 4,
      "content": "- On some laptops (e.g. Dell Studio 15, Lenovo Thinkpad X1) you have to switch the Bluetooth mode from HID to HCI. Install the bluez-hid2hci package, then udev should do this automatically. Alternatively, you can run this command to switch to HCI manually:\n\n```\n# /usr/lib/udev/hid2hci\n```\n\n- If the device will not show up and you have a Windows operating system on your machine, try booting it and enable the Bluetooth adapter from windows.\n\n- Sometimes also this simple command helps:\n\n```\n# bluetoothctl power on\n```\n\n"
    },
    {
      "title": "bluetoothctl: No default controller available",
      "level": 4,
      "content": "There is a bug with some motherboard bluetooth controllers. To see if this might be the issue, run journalctl | grep hci. If there are entries like \"command tx timeout\" or \"Reading Intel version command failed\", then power off your pc and physically unplug the power cable for a few seconds. This forces the controller to reload the firmware (while a standard reboot will not). See bug report here.\n\nMake sure the device is not being blocked by rfkill.\n\nIf using USBGuard, make sure it does not block the device. See USBGuard#Allow Bluetooth controllers.\n\nIt might also happen with some intel cards (such as the 8260) to not be picked up correctly by the Bluetooth service. In some cases, using the deprecated bluez-deprecated-tools in lieu of bluez-utils have reportedly fixed the issue.\n\nThis might also be caused by power saving measures, in which case adding the kernel parameter btusb.enable_autosuspend=n is a potential solution. See also Red Hat Bugzilla – Bug 1573562.\n\nSometimes unloading and loading btusb without options helps to get the controller back:\n\n```\n# modprobe -r btusb\n# modprobe btusb\n```\n\nIt may also occur when the dongle is a CSR clone.\n\n"
    },
    {
      "title": "rfkill unblock: Do not unblock",
      "level": 4,
      "content": "If your device still soft blocked and you run ConnMan, try this:\n\n```\n$ connmanctl enable bluetooth\n```\n\n"
    },
    {
      "title": "Bluetooth USB dongle",
      "level": 4,
      "content": "If you are using a USB dongle, you should check that your Bluetooth dongle is recognized. You can do that by running journalctl -f as root when you have plugged in the USB dongle (or inspecting /var/log/messages.log). It should look something like the following (look out for hci):\n\n```\nFeb 20 15:00:24 hostname kernel: [ 2661.349823] usb 4-1: new full-speed USB device number 3 using uhci_hcd\nFeb 20 15:00:24 hostname bluetoothd[4568]: HCI dev 0 registered\nFeb 20 15:00:24 hostname bluetoothd[4568]: Listening for HCI events on hci0\nFeb 20 15:00:25 hostname bluetoothd[4568]: HCI dev 0 up\nFeb 20 15:00:25 hostname bluetoothd[4568]: Adapter /org/bluez/4568/hci0 has been enabled\n```\n\nIf you only get the first two lines, you may see that it found the device but you need to bring it up. Example:\n\n```\n# btmgmt\n```\n\n```\n[mgmt]# info\nIndex list with 1 item\nhci0:\tPrimary controller\n\taddr 00:1A:7D:DA:71:10 version 6 manufacturer 10 class 0x000000\n\tsupported settings: powered connectable fast-connectable discoverable bondable link-security ssp br/edr hs le advertising secure-conn debug-keys privacy static-addr\n\tcurrent settings: connectable discoverable bondable ssp br/edr le secure-conn\n\tname Mozart\n\tshort name\n\n[mgmt]# select hci0\nSelected index 0\n\n[hci0]# power up\nhci0 Set Powered complete, settings: powered connectable discoverable bondable ssp br/edr le secure-conn\n\n[hci0]# info\nhci0:\tPrimary controller\n\taddr 00:1A:7D:DA:71:10 version 6 manufacturer 10 class 0x1c0104\n\tsupported settings: powered connectable fast-connectable discoverable bondable link-security ssp br/edr hs le advertising secure-conn debug-keys privacy static-addr\n\tcurrent settings: powered connectable discoverable bondable ssp br/edr le secure-conn\n```\n\nOr\n\n```\n# bluetoothctl\n```\n\n```\n[bluetooth]# show\nController 00:1A:7D:DA:71:10 (public)\n\tName: Mozart\n\tAlias: Mozart\n\tClass: 0x0000095c\n\tPowered: no\n\tDiscoverable: yes\n\tPairable: yes\n\n[bluetooth]# power on\n[CHG] Controller 00:1A:7D:DA:71:10 Class: 0x001c0104\nChanging power on succeeded\n[CHG] Controller 00:1A:7D:DA:71:10 Powered: yes\n\n[bluetooth]# show\nController 00:1A:7D:DA:71:10 (public)\n\tName: Mozart\n\tAlias: Mozart\n\tClass: 0x001c0104\n\tPowered: yes\n\tDiscoverable: yes\n\tPairable: yes\n```\n\nTo verify that the device was detected you can use btmgmt which is part of the bluez-utils. You can get a list of available devices and their identifiers and their MAC address by issuing:\n\n```\n$ btmgmt info\n```\n\n```\nIndex list with 1 item\nhci0:\tPrimary controller\n\taddr 00:1A:7D:DA:71:10 version 6 manufacturer 10 class 0x1c0104\n\tsupported settings: powered connectable fast-connectable discoverable bondable link-security ssp br/edr hs le advertising secure-conn debug-keys privacy static-addr\n\tcurrent settings: powered connectable discoverable bondable ssp br/edr le secure-conn\n```\n\nIt is possible to check the Bluetooth version as mapped to the HCI version according to the table in the official specification. For example, in the previous output, HCI version 6 is Bluetooth version 4.0.\n\nMore detailed information about the device can be retrieved by using the deprecated hciconfig. (bluez-deprecated-tools)\n\n```\n$ hciconfig -a hci0\n```\n\n```\nhci0:   Type: USB\n        BD Address: 00:1B:DC:0F:DB:40 ACL MTU: 310:10 SCO MTU: 64:8\n        UP RUNNING PSCAN ISCAN\n        RX bytes:1226 acl:0 sco:0 events:27 errors:0\n        TX bytes:351 acl:0 sco:0 commands:26 errors:0\n        Features: 0xff 0xff 0x8f 0xfe 0x9b 0xf9 0x00 0x80\n        Packet type: DM1 DM3 DM5 DH1 DH3 DH5 HV1 HV2 HV3\n        Link policy: RSWITCH HOLD SNIFF PARK\n        Link mode: SLAVE ACCEPT\n        Name: 'BlueZ (0)'\n        Class: 0x000100\n        Service Classes: Unspecified\n        Device Class: Computer, Uncategorized\n        HCI Ver: 2.0 (0x3) HCI Rev: 0xc5c LMP Ver: 2.0 (0x3) LMP Subver: 0xc5c\n        Manufacturer: Cambridge Silicon Radio (10)\n```\n\nIf other devices share the same USB host, they can interrupt communication with audio devices. Make sure it is the only device attached to its bus. For example:\n\n```\n$ lsusb\n```\n\n```\nBus 002 Device 002: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)\nBus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 001 Device 004: ID 048d:1345 Integrated Technology Express, Inc. Multi Cardreader\nBus 001 Device 003: ID 0424:a700 Standard Microsystems Corp. 2 Port Hub\nBus 001 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n```\n\nThe device ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode) has a regression bug, and currently only works in the kernel version 5.17 and < 6.0. For more information, see Kernel Bug 60824.\n\n"
    },
    {
      "title": "Logitech Bluetooth USB dongle",
      "level": 4,
      "content": "There are Logitech dongles (ex. Logitech MX5000) that can work in two modes: Embedded and HCI. In embedded mode dongle emulates a USB device so it seems to your PC that you are using a normal USB mouse/keyoard.\n\nIf you hold the little red Button on the USB BT mini-receiver it will enable the other mode. Hold the red button on the BT dongle and plug it into the computer, and after 3-5 seconds of holding the button, the Bluetooth icon will appear in the system tray. Discussion\n\nAlternatively, you can install the bluez-hid2hci package. When you connect your Logitech dongle it will automatically switch.\n\n"
    },
    {
      "title": "Foxconn / Hon Hai / Lite-On Broadcom device",
      "level": 4,
      "content": "Some of these devices require the firmware to be flashed into the device at boot.\n\nSome firmware is available when searching for broadcom on the AUR, a notable package being broadcom-bt-firmwareAUR, which provides the files for multiple cards.\n\nAlternatively, the firmware can be converted from a Microsoft Windows .hex file into a .hcd using hex2hcd (which is installed with bluez-utils).\n\nIn order to get the right .hex file, try searching the device vendor:product code obtained with lsusb, for example:\n\n```\nBus 002 Device 004: ID 04ca:2006 Lite-On Technology Corp. Broadcom BCM43142A0 Bluetooth Device\n```\n\nor\n\n```\nBus 004 Device 004: Id 0489:e031 Foxconn / Hon Hai\n```\n\nAlternatively, boot into Windows (a virtual machine installation will suffice) and get the firmware name from the Device Manager utility. If you want to know the model of your device but cannot see it in lsusb, you might see it in lsusb -v as iProduct.\n\nThe .hex file can be extracted from the downloaded Windows driver without having to run Windows for it. Download the right driver, for example Bluetooth Widcomm[dead link 2023-09-16 ⓘ]. Depending on the format, extracting the files might need unrar or cabextract. To find out which of the many .hex files is the right one for you, look in the file Win32/bcbtums-win7x86-brcm.inf and search for [RAMUSBE031.CopyList], where E031 should be replaced with the product code (the second hex number in lsusb) of your device in upper-case. Underneath you should see the file name of the right .hex file.\n\nOnce you have the .hcd file, copy it into /lib/firmware/brcm/BCM.hcd - this filename is suggested by dmesg and it may change in your case so check your dmesg output in order to verify. Then reload the btusb module:\n\n```\n# rmmod btusb\n# modprobe btusb\n```\n\nThe device should now be available. See BBS#162688 for information on making these changes persistent.\n\n"
    },
    {
      "title": "Intel combined Wi-Fi and Bluetooth cards",
      "level": 4,
      "content": "See Wireless network configuration#Bluetooth coexistence.\n\n"
    },
    {
      "title": "Mediatek MT7921 or MT7961 on dual boot with windows",
      "level": 4,
      "content": "On dual boot systems, if Bluetooth firmware versions are different for Windows and Linux, the Bluetooth adapter is not working after rebooting to Windows.\n\nThe best way to prevent this is updating the Bluetooth drivers (especially firmware) with latest version for each OS.\n\nIf you cannot find the latest version driver (or firmware) for Windows, you can copy the latest firmware file /usr/lib/firmware/mediatek/BT_RAM_CODE_MT7961_1_2_hdr.bin.xz from Arch Linux and extract to Windows (e.g. C:\\WINDOWS\\system32\\DRIVERS\\, you can find the firmware file path in the device manager on Windows).\n\n"
    },
    {
      "title": "Adapter disappears after suspend/resume",
      "level": 4,
      "content": "First, find vendor and product ID of the adapter. For example:\n\n```\n$ lsusb -tv\n```\n\n```\n/:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/12p, 480M\n    ID 1d6b:0002 Linux Foundation 2.0 root hub\n    ...\n    |__ Port 3: Dev 3, If 0, Class=Wireless, Driver=btusb, 12M\n        ID 8087:0025 Intel Corp.\n    |__ Port 3: Dev 3, If 1, Class=Wireless, Driver=btusb, 12M\n        ID 8087:0025 Intel Corp.\n    ...\n```\n\nIn this case, the vendor ID is 8087 and the product ID is 0025.\n\nThen, use usb_modeswitch to reset the adapter:\n\n```\n# usb_modeswitch -R -v vendor_ID -p product_ID\n```\n\n"
    },
    {
      "title": "Computer is not visible",
      "level": 4,
      "content": "Enable discoverable mode if your computer cannot be discovered from your phone:\n\n```\n# bluetoothctl discoverable on\n```\n\nVerify that discoverable mode is on:\n\n```\n# bluetoothctl show\n```\n\n```\nPowered: yes\n\tDiscoverable: yes\n\tPairable: yes\n```\n\nIf the computer still does not show up, try changing the device class in /etc/bluetooth/main.conf as follows:\n\n```\n# Default device class. Only the major and minor device class bits are\n# considered.\n#Class = 0x000100 # Computer Type (from default config)\nClass = 0x100100 # (Object-Transfer Service & Computer Type)\n```\n\nA user reported that this was the only solution to make their computer visible for their phone. LG TVs (and some others) are discoverable from their audio devices, so using 000414 (the soundbar class) will make such devices appear.\n\nSee https://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html to generate Bluetooth device/service classes.\n\n"
    },
    {
      "title": "Device connects, then disconnects after a few moments",
      "level": 4,
      "content": "If you see messages like the following in the journal, and your device fails to connect or disconnects shortly after connecting:\n\n```\nbluetoothd: Unable to get connect data for Headset Voice gateway: getpeername: Transport endpoint is not connected (107)\nbluetoothd: connect error: Connection refused (111)\n```\n\nThis may be because you have already paired the device with another operating system using the same Bluetooth adapter (e.g., dual-booting). Some devices cannot handle multiple pairings associated with the same MAC address (i.e., Bluetooth adapters). Follow instructions on #Dual boot pairing for solving this issue.\n\n"
    },
    {
      "title": "Device does not show up in scan",
      "level": 4,
      "content": "Some devices using Bluetooth low energy do not appear when scanning with bluetoothctl, for example the Logitech MX Master. You can use transport le to scan it.\n\n```\n# bluetoothctl\n```\n\n```\n[bluetooth]# menu scan\n[bluetooth]# transport le\n[bluetooth]# back\n[bluetooth]# scan on\n[bluetooth]# devices\n...\nDevice XX:XX:XX:XX:XX:XX DA V2 X <---- low energy device here\n```\n\nAnother way to connect them is by installing bluez-deprecated-tools, then start bluetooth.service and do:\n\n```\n# bluetoothctl\n```\n\n```\n[NEW] Controller (MAC) myhostname [default]\n\n[bluetooth]# power on\n[CHG] Controller (MAC) Class: 0x0c010c\nChanging power on succeeded\n[CHG] Controller (MAC) Powered: yes\n\n[bluetooth]# scan on\nDiscovery started\n[CHG] Controller (MAC) Discovering: yes\n```\n\nIn another terminal:\n\n```\n# hcitool lescan\n```\n\nWait until your device shows up, then Ctrl+c hcitool. bluetoothctl should now see your device and pair normally.\n\n"
    },
    {
      "title": "No BLE device can be discovered with Intel Corp. AX200 Bluetooth",
      "level": 4,
      "content": "It seems that BLE passive scan is broken on this device. See upstream bug report for more details.\n\n"
    },
    {
      "title": "Cannot reconnect after sleep",
      "level": 4,
      "content": "You may notice that you cannot automatically reconnect to a device after it goes to sleep, or after the computer wakes from suspend.\n\nYou would for example notice the following errors in your logs:\n\n```\nbluetoothd[487]: Authentication attempt without agent\nbluetoothd[487]: Access denied: org.bluez.Error.Rejected\n```\n\nThis could be because the device is not marked as trusted. See #Pairing.\n\n"
    },
    {
      "title": "Bluetooth mouse lags / disconnect / does not respond",
      "level": 4,
      "content": "See Bluetooth mouse#Troubleshooting.\n\n"
    },
    {
      "title": "Audio device fails to connect with br-connection-profile-unavailable",
      "level": 4,
      "content": "A Bluetooth audio device will fail to connect if pipewire (rather than pulseaudio-bluetooth) is being used, but an instance of pipewire is not running. Start the pipewire.service user unit or play some audio to start the pipewire daemon, then try to connect the audio device again.\n\n"
    },
    {
      "title": "Interference between headphones and mouse",
      "level": 4,
      "content": "If you experience audio stuttering while using a Bluetooth mouse and keyboard simultaneously, you can try the following as referenced in #23 https://bugs.launchpad.net/ubuntu/+source/bluez/+bug/424215\n\n```\n# hciconfig hci0 lm ACCEPT,MASTER\n# hciconfig hci0 lp HOLD,SNIFF,PARK\n```\n\n"
    },
    {
      "title": "Continually connect/disconnect with TP-LINK UB400 and Xbox controller",
      "level": 4,
      "content": "Use the settings below:\n\n```\n/etc/bluetooth/main.conf\n```\n\n```\n...\n[General]\nJustWorksRepairing = always\nFastConnectable = true\nClass = 0x000100\n...\n[GATT]\nReconnectIntervals=1,1,2,3,5,8,13,21,34,55\nAutoEnable=true\n...\n```\n\nThen restart the bluetooth.service.\n\nYou can see relevant discussion on xpadneo but the xpadneo driver is not needed.\n\n"
    },
    {
      "title": "gnome-bluetooth",
      "level": 4,
      "content": "If you see this when trying to enable receiving files in bluetooth-properties:\n\n```\nBluetooth OBEX start failed: Invalid path\nBluetooth FTP start failed: Invalid path\n```\n\nThen make sure that the XDG user directories exist.\n\n"
    },
    {
      "title": "Cannot receive transferred files due to symlink",
      "level": 4,
      "content": "If incoming file transfers fail on an an otherwise functional Bluetooth connection, the problem may be due to symlinks in your file transfer path. Logs like this would appear in the journal:\n\n```\nJun 18 11:18:13 ember obexd[3338969]: open(/home/me/.cache/obexd/MOC740): Operation not permitted (1)\n```\n\nIf the path shown in the error message contains a symlink, then obexd by default will not accept it. The behavior can be overridden on initialization using a drop-in file for the obex.service user service:\n\n```\n~/.config/systemd/user/obex.service.d/10-symlink.conf\n```\n\n```\n[Service]\nExecStart=\nExecStart=/usr/lib/bluetooth/obexd --symlinks\n```\n\nThen reload the systemd manager configuration of the calling user and restart the obex.service user unit.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Keeping Bluetooth devices paired between Linux and Windows\n- Bluetooth link keys on dual-boot systems\n\n"
    }
  ]
}