{
  "title": "Compton",
  "url": "https://wiki.archlinux.org/title/Compton",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "picom is a standalone compositor for Xorg, suitable for use with window managers that do not provide compositing. picom is a fork of compton, which is a fork of xcompmgr-dana, which in turn is a fork of xcompmgr.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the picom package or picom-gitAUR for the development version.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The default configuration is available in /etc/xdg/picom.conf. For modifications, it can be copied to ~/.config/picom/picom.conf or ~/.config/picom.conf.\n\nTo use another custom configuration file with picom, use the following command:\n\n```\n$ picom --config path/to/picom.conf\n```\n\nSee picom(1) § CONFIGURATION FILES for details.\n\n"
    },
    {
      "title": "Disable shadows for some windows",
      "level": 3,
      "content": "The shadow-exclude option can disable shadows for windows if required. For currently disabled windows, see [1].\n\nTo disable shadows for menus add the following to wintypes in picom.conf:\n\n```\n# menu        = { shadow = false; };\ndropdown_menu = { shadow = false; };\npopup_menu    = { shadow = false; };\nutility       = { shadow = false; };\n```\n\nThe other WINDOW_TYPE values that can be used are defined in the EWMH standard: unknown, desktop, dock, toolbar, menu, utility, splash, dialog, normal, dropdown_menu, popup_menu, tooltip, notification, combo, and dnd.\n\n"
    },
    {
      "title": "Opacity",
      "level": 3,
      "content": "To set opacity (in effect transparency) for focused and unfocused windows (for example terminal emulators), add the following to your picom.conf:\n\n```\nrules: ({\n  match = \"class_g = 'URxvt' && focused\";\n  opacity = 0.9;\n}, {\n  match = \"(class_g = 'URxvt' || class_g = 'Alacritty')\"\n          \" && !focused\";\n  opacity = 0.6;\n})\n```\n\nSee also #Tabbed windows (shadows and transparency).\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "picom may be manually enabled or disabled at any time during a session, or autostarted as a background process for sessions. There are also several optional arguments that may be used to tweak the compositing effects provided. These include:\n\n- -b: Run as a background process for a session (e.g. when autostarting for a window manager such as Openbox)\n- -c: Enable shadow effects\n- -C: Disable shadow effects on panels and docks (deprecated, use #Disable shadows for some windows)\n- -G: Disable shadow effects for application windows and drag-and-drop objects (deprecated, use #Disable shadows for some windows)\n- --config: Use a specified configuration file\n\nMany more options are available, including setting timings, displays to be managed, the opacity of menus, window borders, and inactive application menus. See picom(1).\n\nTo manually enable default compositing effects during a session, use the following command:\n\n```\n$ picom &\n```\n\nTo autostart picom as a background process for a session, the -b argument can be used (may cause a display freeze):\n\n```\n$ picom -b\n```\n\nHere is an example where additional arguments that require values to be set have been used:\n\n```\n$ picom -cfF -o 0.38 -O 200 -I 200 -t 0 -l 0 -r 3 -D2 -m 0.88\n```\n\n"
    },
    {
      "title": "Multihead",
      "level": 2,
      "content": "If a multihead configuration is used without xinerama - meaning that X server is started with more than one screen - then picom will start on only one screen by default. It can be started on all screens by using the DISPLAY environment variable. For example, to run on X screen 0 in the background:\n\n```\nDISPLAY=\":0\" picom -b\n```\n\nThe above should work on all monitors. If it does not then try an older method that manually specifies each display:\n\n```\nseq 0 3 | xargs -l1 -I@ picom -b -d :0.@\n```\n\n"
    },
    {
      "title": "Grayscale",
      "level": 2,
      "content": "It is possible to convert windows to grayscale by use of shaders.\n\nAs per picom(1), start by editing the default shader from the picom's sources.\n\n```\n/path/to/shader/file.glsl\n```\n\n```\n#version 330\n\nin vec2 texcoord;\nuniform sampler2D tex;\nuniform float opacity;\n\nvec4 default_post_processing(vec4 c);\n\nvec4 window_shader() {\n\tvec2 texsize = textureSize(tex, 0);\n\tvec4 color = texture2D(tex, texcoord / texsize, 0);\n\n\tcolor = vec4(vec3(0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b) * opacity, color.a * opacity);\n\n\treturn default_post_processing(color);\n}\n```\n\nThen start picom by including the file path to the shader. The glx backend will also, probably, be necessary.\n\n```\n$ picom --backend glx --window-shader-fg /path/to/shader/file.glsl\n```\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "Recent versions of picom had some problem with DRI2 acceleration and exhibited severe flickering when DRI2 is in use (picom bug, mesa bug). This has been worked around and reported to be working, but may still affect some users. DRI3 is unaffected by this particular issue.\n\nThe use of compositing effects may on occasion cause issues such as visual glitches when not configured correctly for use with other applications and programs.\n\n"
    },
    {
      "title": "Conky",
      "level": 3,
      "content": "To disable shadows around Conky windows, have the following in ~/.conkyrc:\n\n```\nown_window_class conky\n```\n\nIn the case this solution fail with blur effect, you can try this in ~/.conkyrc:\n\n```\nown_window_type= 'desktop'\n```\n\n"
    },
    {
      "title": "dwm and dmenu",
      "level": 3,
      "content": "dwm's statusbar is not detected by any of picom's functions to automatically exclude window manager elements. Neither dwm statusbar nor dmenu have a static window id. If you want to exclude it from inactive window transparency (or other), you will have to either patch a window class into the source code of each, or exclude by less precise attributes. The following example is with dwm's status on top, which allows a resolution independent of location exclusion:\n\n```\n$ picom <any other arguments> --focus-exclude \"x = 0 && y = 0 && override_redirect = true\"\n```\n\nOtherwise, where using a configuration file:\n\n```\nfocus-exclude = \"x = 0 && y = 0 && override_redirect = true\";\n```\n\nThe override redirect property seems to be false for most windows- having this in the exclusion rule prevents other windows drawn in the upper left corner from being excluded (for example, when dwm statusbar is hidden, x0 y0 will match whatever is in dwm's master stack).\n\n"
    },
    {
      "title": "Firefox",
      "level": 3,
      "content": "See #Disable shadows for some windows.\n\nTo disable shadows for Firefox elements add the following to shadow-exclude in picom.conf:\n\n```\n\"class_g = 'firefox' && argb\",\n```\n\nSee [2] for more information.\n\n"
    },
    {
      "title": "slock",
      "level": 3,
      "content": "Where inactive window transparency has been enabled (the -i argument when running as a command), this may provide troublesome results when also using slock. One solution is to amend the transparency to 0.2. For example, where running picom arguments as a command:\n\n```\n$ picom <any other arguments> -i 0.2\n```\n\nOtherwise, where using a configuration file:\n\n```\ninactive-dim = 0.2;\n```\n\nAlternatively, you may try to exclude slock by its window id, or by excluding all windows with no name.\n\nExclude all windows with no name from picom using the following options:\n\n```\n$ picom <other arguments> --focus-exclude \"! name~=''\"\n```\n\nFind your slock's window id by running the command:\n\n```\n$ xwininfo & slock\n```\n\nQuickly click anywhere on the screen (before slock exits), then type your password to unlock. You should see the window id in the output:\n\n```\nxwininfo: Window id: 0x1800001 (has no name)\n```\n\nTake the window id and exclude it from picom with:\n\n```\n$ picom <any other arguments> --focus-exclude 'id = 0x1800001'\n```\n\nOtherwise, where using a configuration file:\n\n```\nfocus-exclude = \"id = 0x1800001\";\n```\n\n"
    },
    {
      "title": "Flicker",
      "level": 3,
      "content": "Applies to fully maximized windows (in sessions without any panels) with the default picom.conf caused and resolved by the following option:\n\n```\nunredir-if-possible = false;\n```\n\nSee [3] for more information.\n\n"
    },
    {
      "title": "Fullscreen tearing",
      "level": 3,
      "content": "If you observe screen tearing of video playback only in fullscreen, see #Flicker.\n\n"
    },
    {
      "title": "Lag when using xft fonts",
      "level": 3,
      "content": "If you experience heavy lag when using Xft fonts in applications such as xterm or urxvt try:\n\n```\n--xrender-sync --xrender-sync-fence\n```\n\nor the xrender backend.\n\nSee [4] for more information.\n\n"
    },
    {
      "title": "Tabbed windows (shadows and transparency)",
      "level": 3,
      "content": "When windows with transparency are tabbed, the underlying tabbed windows are still visible because of transparency. Each tabbed window also draws its own shadow resulting in multiple shadows.\n\nRemoving the multiple shadows issue can be done by adding the following to the already existing shadow-exclude list:\n\n```\n\"_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'\"\n```\n\nNot drawing underlying tabbed windows can be enabled by adding the following to your picom.conf:\n\n```\nopacity-rule = [\n  \"95:class_g = 'URxvt' && !_NET_WM_STATE@:32a\",\n  \"0:_NET_WM_STATE@[0]:32a *= '_NET_WM_STATE_HIDDEN'\",\n  \"0:_NET_WM_STATE@[1]:32a *= '_NET_WM_STATE_HIDDEN'\",\n  \"0:_NET_WM_STATE@[2]:32a *= '_NET_WM_STATE_HIDDEN'\",\n  \"0:_NET_WM_STATE@[3]:32a *= '_NET_WM_STATE_HIDDEN'\",\n  \"0:_NET_WM_STATE@[4]:32a *= '_NET_WM_STATE_HIDDEN'\"\n];\n```\n\nNote that URxvt is the Xorg class name of your terminal. Change this if you use a different terminal. You can query a window's class by running the command xprop WM_CLASS and clicking the window.\n\nSee [5] for more information.\n\n"
    },
    {
      "title": "Unable to change the background color with xsetroot",
      "level": 3,
      "content": "Currently, picom is incompatible with xsetroot's -solid option, a workaround is to use hsetroot to set the background color:\n\n```\n$ hsetroot -solid '#000000'\n```\n\nSee [7] for more information.\n\n"
    },
    {
      "title": "Screentearing with NVIDIA's proprietary drivers",
      "level": 3,
      "content": "Try this setting in picom.conf:\n\n```\nvsync = true;\n```\n\n"
    },
    {
      "title": "Lag with NVIDIA proprietary drivers and FullCompositionPipeline",
      "level": 3,
      "content": "Try running picom with:\n\n```\n--backend xrender\n```\n\nor add\n\n```\nbackend = \"xrender\";\n```\n\nto your picom.conf file.\n\nSee [8] for more information.\n\nAnother option to reduce lag with the glx backend is to disable \"allow flipping\" [9] in nvidia settings (OpenGL section). This can also be done from the command line:\n\n```\n$ nvidia-settings -a 'AllowFlipping=0'\n```\n\nTo load settings after reboot (see Autostarting) run\n\n```\n$ nvidia-settings --load-config-only\n```\n\n"
    },
    {
      "title": "Xorg leaking GPU memory with NVIDIA proprietary drivers",
      "level": 3,
      "content": "See #Lag with NVIDIA proprietary drivers and FullCompositionPipeline.\n\n"
    },
    {
      "title": "Slock after suspend",
      "level": 3,
      "content": "When using a systemd service to trigger slock on a suspend or hibernate action, one may find the screen unlocked for a few seconds after resume. To prevent, disable window fading:\n\n```\n$ picom --no-fading-openclose\n```\n\n"
    },
    {
      "title": "Screen sharing",
      "level": 3,
      "content": "A shadowed overlay on screen sharing and shadows of Zoom Meetings pop-up windows might be avoided by adding the following to shadow-exclude.\n\n```\nshadow-exclude = [\n  \"name = 'cpt_frame_xcb_window'\",\n  \"class_g ?= 'zoom'\",\n];\n```\n\nBlurred screen sharing is disabled by adding Zoom Meetings to blur-background-exclude with\n\n```\nblur-background-exclude = [\n  \"class_g ?= 'zoom'\",\n];\n```\n\nFor Microsoft Teams, the red border around the shared content is implemented with a mostly transparent window. Having blur enabled makes it impossible to work with and should be disabled as follows:\n\n```\nshadow-exclude = [\n  \"name = 'rect-overlay'\",\n];\n\nblur-background-exclude = [\n  \"name = 'rect-overlay'\",\n];\n```\n\n"
    },
    {
      "title": "Disable window fade in and fade out effect when switching between workspaces",
      "level": 3,
      "content": "Adding --fade-in-step=1 --fade-out-step=1 --fade-delta=0 flag can disable the fade in and fade out effect when switching to a new workspace. [10]\n\n"
    },
    {
      "title": "Switching windows occasionally results in strange window transparency issues",
      "level": 3,
      "content": "This issue can happen after setting opacity in picom.conf. Setting use-damage = false in picom.conf would fix this issue.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Howto: Using Compton for tear-free compositing on XFCE or LXDE\n\n"
    }
  ]
}