{
  "title": "IPv6 - Disabling the Module",
  "url": "https://wiki.archlinux.org/title/IPv6_-_Disabling_the_Module",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- IPv6 tunnel broker setup\n\nIn Arch Linux, IPv6 is enabled by default.\n\nThe tldp Linux+IPv6-HOWTO article is older, and less maintained. Yet it attempts to cover many topics that are mentioned in this article, starts from the basics, and advances in a slower pace. It also has many command line examples. Beginners might want to read or skim it before reading this wiki article.\n\n"
    },
    {
      "title": "Neighbor discovery",
      "level": 2,
      "content": "Pinging the multicast address ff02::1 results in all hosts in link-local scope responding. An interface has to be specified:\n\n```\n$ ping ff02::1%eth0\n```\n\nAfter that, you can get a list of all the neighbors in the local network with:\n\n```\n$ ip -6 neigh\n```\n\nWith a ping to the multicast address ff02::2 only routers will respond.\n\nIf you add an option -I your-global-ipv6, link-local hosts will respond with their link-global scope addresses. The interface can be omitted in this case:\n\n```\n$ ping -I 2001:4f8:fff6::21 ff02::1\n```\n\nTo ping everyone on all interfaces, and announce your address to everyone, use a script.\n\n```\n#!/usr/bin/bash\ndeclare -a l_ifs\nreadarray l_ifs < <(/sbin/ip -6 -j address | jq -r '.[] | .ifname ')\nfor l_if in ${l_ifs[@]} ; do\n echo $l_if\n declare -a l_addrs\n readarray l_addrs < <(/sbin/ip -6 -j address show dev \"$l_if\" | \\\n                        jq -r  '.[0].addr_info[].local')\n for l_addr in ${l_addrs[@]} ; do\n   echo $l_addr\n   ping -c 4 -6 -I \"$l_addr\" ff02::1%\"$l_if\"\n done\ndone\n```\n\n"
    },
    {
      "title": "Stateless autoconfiguration (SLAAC)",
      "level": 2,
      "content": "The easiest way to acquire an IPv6 address as long as your network is configured is through Stateless address autoconfiguration (SLAAC for short). The address is automatically inferred from the prefix that your router advertises and requires neither further configuration nor specialized software such as a DHCP client.\n\n"
    },
    {
      "title": "For clients",
      "level": 3,
      "content": "If you are using netctl you just need to add the following line to your Ethernet or wireless configuration.\n\n```\nIP6=stateless\n```\n\nIf you are using NetworkManager then it automatically enables IPv6 addresses if there are advertisements for them in the network.\n\nPlease note that stateless autoconfiguration works on the condition that IPv6 icmp packets are allowed throughout the network. So for the client side the ipv6-icmp packets must be accepted. If you are using the Simple stateful firewall/iptables you only need to add:\n\n```\n-A INPUT -p ipv6-icmp -j ACCEPT\n```\n\nIf you are using an other firewall frontend (ufw, shorewall, etc) consult their documentation on how to enable the ipv6-icmp packets.\n\nIf your chosen network management solution does not support configuring the DNS resolver with stateless IPv6 (e.g. netctl), then it is possible to use rdnssd(8) from the ndisc6 package for that.\n\n"
    },
    {
      "title": "For gateways",
      "level": 3,
      "content": "To properly hand out IPv6s to the network clients we will need to use an advertising daemon. The standard tool for this job is radvd. Configuration of radvd is fairly simple. Edit /etc/radvd.conf to include\n\n```\n# replace LAN with your LAN facing interface\ninterface LAN {\n  AdvSendAdvert on;\n  MinRtrAdvInterval 3;\n  MaxRtrAdvInterval 10;\n  prefix ::/64 {\n    AdvOnLink on;\n    AdvAutonomous on;\n    AdvRouterAddr on;\n  };\n};\n```\n\nThe above configuration will tell clients to autoconfigure themselves using addresses from the advertised /64 block. Please note that the above configuration advertises all available prefixes assigned to the LAN facing interface. If you want to limit the advertised prefixes instead of ::/64 use the desired prefix, e.g. 2001:DB8::/64. The prefix block can be repeated many times for more prefixes.\n\nTo advertise DNS servers to your LAN clients you can use RDNSS feature. For example, add the following lines to /etc/radvd.conf to advertise Google's DNS v6 servers:\n\n```\nRDNSS 2001:4860:4860::8888 2001:4860:4860::8844 {\n};\n```\n\nThe gateway must also allow the traffic of ipv6-icmp packets on all basic chains. For the Simple stateful firewall/iptables add:\n\n```\n-A INPUT -p ipv6-icmp -j ACCEPT\n-A OUTPUT -p ipv6-icmp -j ACCEPT\n-A FORWARD -p ipv6-icmp -j ACCEPT\n```\n\nAdjust accordingly for other firewall frontends and do not forget to enable radvd.service.\n\n"
    },
    {
      "title": "Privacy extensions",
      "level": 2,
      "content": "When a client acquires an address through SLAAC its IPv6 address is derived from the advertised prefix and the MAC address of the network interface of the client. This may raise privacy concerns as the MAC address of the computer can be easily derived by the IPv6 address. In order to tackle this problem the IPv6 Privacy Extensions standard (RFC 4941) has been developed. With privacy extensions the kernel generates a temporary address that is mangled from the original autoconfigured address. Private addresses are preferred when connecting to a remote server so the original address is hidden. To enable Privacy Extensions reproduce the following steps:\n\nAdd the following sysctl parameters:\n\n```\n/etc/sysctl.d/40-ipv6.conf\n```\n\n```\n# Enable IPv6 Privacy Extensions\nnet.ipv6.conf.all.use_tempaddr = 2\nnet.ipv6.conf.default.use_tempaddr = 2\nnet.ipv6.conf.nic.use_tempaddr = 2\n```\n\nWhere nic is your Network Interface Card. You can find their names using the instructions in Network configuration#Listing network interfaces. The all.use_tempaddr or default.use_tempaddr parameters are not applied to nic's that already exist when the sysctl settings are executed.\n\nAfter a reboot, at the latest, Privacy Extensions should be enabled.\n\n"
    },
    {
      "title": "dhcpcd",
      "level": 3,
      "content": "dhcpcd's default configuration includes the option slaac private, which enables \"Stable Private IPv6 Addresses instead of hardware based ones\", implementing RFC 7217. Therefore, it is not necessary to change anything, except if it is desired to change of IPv6 address more often than each time the system is connected to a new network. Set it to slaac hwaddr for a stable address.\n\n"
    },
    {
      "title": "NetworkManager",
      "level": 3,
      "content": "The use of IPv6 Privacy Extensions in NetworkManager can be controlled with the ipv6.ip6-privacy setting in NetworkManager.conf(5) or in the connection's profile. If it is not set globally nor per-connection, NetworkManager will fall back to reading /proc/sys/net/ipv6/conf/default/use_tempaddr.\n\nTo explicitly enable IPv6 Privacy Extensions by default, add these lines to NetworkManager.conf(5):\n\n```\n/etc/NetworkManager/conf.d/ip6-privacy.conf\n```\n\n```\n[connection]\nipv6.ip6-privacy=2\n```\n\nApply the configuration and reconnect to all active connections.\n\nTo control the use of IPv6 Privacy Extensions for individual NetworkManager-managed connections, edit the desired connection keyfile in /etc/NetworkManager/system-connections/ and append to its [ipv6] section the key-value pair ip6-privacy=2:\n\n```\n/etc/NetworkManager/system-connections/example_connection.nmconnection\n```\n\n```\n...\n[ipv6]\nmethod=auto\nip6-privacy=2\n...\n```\n\nReload the connection and reconnect to it afterwards.\n\nNote: **does** \n\n"
    },
    {
      "title": "systemd-networkd",
      "level": 3,
      "content": "systemd-networkd does not enable IPv6 privacy extensions by default. To enable them set IPv6PrivacyExtensions=yes in the [Network] section in per-connection .network files or globally with a configuration file in /etc/systemd/networkd.conf.d/. E.g.:\n\n```\n/etc/systemd/networkd.conf.d/ipv6-privacy-extensions.conf\n```\n\n```\n[Network]\nIPv6PrivacyExtensions=yes\n```\n\nsystemd-networkd does not honor the sysctl setting net.ipv6.conf.nicN.use_tempaddr unless the IPv6PrivacyExtensions option is set to kernel.\n\nOther options for the IPv6 Privacy Extensions like:\n\nTable content:\nVariable name | Description\nnet.ipv6.conf.nicN.temp_prefered_lft | Preferred temp address lifetime in seconds. Note the wrong spelling has to be used.\nnet.ipv6.conf.nicN.temp_valid_lft | Maximum temp address lifetime in seconds.\n\nare honored, however.[1]\n\nSee systemd-networkd and systemd.network(5) for details.\n\n"
    },
    {
      "title": "ConnMan",
      "level": 3,
      "content": "Use the following setting in your service file:\n\n```\n/var/lib/connman/service/settings\n```\n\n```\nIPv6.privacy=preferred\n```\n\nSee ConnMan for details.\n\n"
    },
    {
      "title": "Stable private addresses",
      "level": 2,
      "content": "Another option is a stable private IP address (RFC 7217). This allows for IPs that are stable within a network without exposing the MAC address of the interface.\n\nIn order to have the kernel generate a key (for wlan0, for example) we can set:\n\n```\n# sysctl net.ipv6.conf.wlan0.addr_gen_mode=3\n```\n\nBring the interface down and up and you should see stable-privacy next to each IPv6 address after running ip addr show dev wlan0. The kernel has generated a 128-bit secret for generating ip addresses for this interface, to see it run sysctl net.ipv6.conf.wlan0.stable_secret. We are going to persist this value so add the following lines to /etc/sysctl.d/40-ipv6.conf:\n\n```\n# Enable IPv6 stable privacy mode\nnet.ipv6.conf.wlan0.stable_secret = output_from_previous_command\nnet.ipv6.conf.wlan0.addr_gen_mode = 2\n```\n\nNote: **not** \n\n"
    },
    {
      "title": "NetworkManager",
      "level": 3,
      "content": "The above settings are not honored by NetworkManager, but NetworkManager uses stable private addresses by default.[2][3]\n\n"
    },
    {
      "title": "systemd-networkd",
      "level": 3,
      "content": "The above settings are not honored by systemd-networkd. To ensure stable private addresses are always used, you can set:\n\n```\n[IPv6AcceptRA]\nToken=prefixstable\n```\n\nThe above tells systemd-networkd to use a secret derived from the machine ID. You can also specify a secret yourself or even apply the setting to only specific prefixes appearing in Router Advertisement messages. See systemd.network(5) for details.\n\nYou can also generate stable private link-local addresses if desired:\n\n```\n[Network]\nIPv6LinkLocalAddressGenerationMode=stable-privacy\n```\n\n"
    },
    {
      "title": "Static address",
      "level": 2,
      "content": "Sometimes, using a static address can improve security. For example, if your local router uses Neighbor Discovery or radvd (RFC 2461), your interface will automatically be assigned an address based on its MAC address (using IPv6's Stateless Autoconfiguration). This may be less than ideal for security since it allows a system to be tracked even if the network portion of the IP address changes.\n\nTo assign a static IP address using netctl, look at the example profile in /etc/netctl/examples/ethernet-static. The following lines are important:\n\n```\n...\n# For IPv6 static address configuration\nIP6=static\nAddress6=('1234:5678:9abc:def::1/64' '1234:3456::123/96')\nRoutes6=('abcd::1234')\nGateway6='1234:0:123::abcd'\n```\n\n```\nDNS=('6666:6666::1' '6666:6666::2')\n```\n\n"
    },
    {
      "title": "IPv6 and PPPoE",
      "level": 2,
      "content": "The standard tool for PPPoE, pppd(8), provides support for IPv6 on PPPoE as long as your ISP and your modem support it. Just add the following to /etc/ppp/options\n\n```\n+ipv6\n```\n\nIf you are using netctl for PPPoE then just add the following to your netctl configuration instead:\n\n```\nPPPoEIP6=yes\n```\n\n"
    },
    {
      "title": "Prefix delegation (DHCPv6-PD)",
      "level": 2,
      "content": "Prefix delegation is a common IPv6 deployment technique used by many ISPs. It is a method of assigning a network prefix to a user site (i.e. local network). A router can be configured to assign different network prefixes to various subnetworks. The ISP hands out a network prefix using DHCPv6 (usually a /56 or /64) and a dhcp client assigns the prefixes to the local network. For a simple two interface gateway it practically assigns an IPv6 prefix to the interface connected to the local network from an address acquired through the interface connected to WAN (or a pseudo-interface such as ppp).\n\nDHCPv6 requires the client to receive incoming connections on port 546 UDP. For an nftables-based firewall, that can be configured with one line in the input chain in /etc/nftables.conf:\n\n```\ntable inet filter {\n  chain input {\n    udp dport dhcpv6-client accept\n    ...\n  }\n...\n}\n```\n\n"
    },
    {
      "title": "With dhcpcd",
      "level": 3,
      "content": "dhcpcd apart from IPv4 dhcp support also provides a fairly complete implementation of the DHCPv6 client standard which includes DHCPv6-PD. If you are using dhcpcd edit /etc/dhcpcd.conf. You might already be using dhcpcd for IPv4 so just update your existing configuration.\n\n```\nduid\nnoipv6rs\nwaitip 6\n# Uncomment this line if you are running dhcpcd for IPv6 only.\n#ipv6only\n\n# The following applies to the interface WAN.\ninterface WAN\n    ipv6rs\n    # Assign WAN the iaid 1.\n    iaid 1\n    # Assign a Normal Address to the interface with iaid 1 (i.e. WAN).\n    ia_na 1\n    # Delegate a prefix with wan interface iaid 1 (i.e. WAN) and lan interface LAN.\n    ia_pd 1 LAN\n    #ia_pd 1/::/64 LAN/0/64\n```\n\nThis configuration will ask for a prefix from WAN interface (WAN) and delegate it to the internal interface (LAN). In the event that a /64 range is issued, you will need to use the 2nd ia_pd instruction that is commented out instead. It will also disable router solicitations on all interfaces except for the WAN interface (WAN).\n\n"
    },
    {
      "title": "With WIDE-DHCPv6",
      "level": 3,
      "content": "WIDE-DHCPv6 is an open-source implementation of Dynamic Host Configuration Protocol for IPv6 (DHCPv6) originally developed by the KAME project. It can be installed with wide-dhcpv6AUR.\n\nIf you are using wide-dhcpv6, edit /etc/wide-dhcpv6/dhcp6c.conf\n\n```\n# use the interface connected to your WAN\ninterface WAN {\n  send ia-pd 0;\n};\n\nid-assoc pd 0 {\n  # use the interface connected to your LAN\n  prefix-interface LAN {\n    sla-id 1;\n    sla-len 8;\n  };\n};\n```\n\nThe wide-dhcpv6 client can be started/enabled using the dhcp6c@interface.service systemd unit file, where interface is the interface name in the configuration file, e.g. for a interface name \"WAN\" use dhcp6c@WAN.service.\n\n"
    },
    {
      "title": "systemd-networkd",
      "level": 3,
      "content": "Configure both your upstream (wan) and downstream (lan) interface. This will enable DHCPv6-PD on the interface where the DHCPv6 client is running. The delegated prefixes are distributed by IPv6 Router Advertisement on the downstream network.\n\n```\n/etc/systemd/network/wan.network\n```\n\n```\n[Network]\n# Use 'yes' instead of 'ipv6' for both ipv4 and ipv6.\nDHCP=ipv6\n```\n\n```\n/etc/systemd/network/lan.network\n```\n\n```\n[Network]\nIPv6SendRA=yes\nDHCPv6PrefixDelegation=yes\n```\n\n"
    },
    {
      "title": "Other clients",
      "level": 3,
      "content": "dhclient can also request a prefix, but assigning that prefix, or parts of that prefix to interfaces must be done using a dhclient exit script. For example: https://github.com/jaymzh/v6-gw-scripts/blob/master/dhclient-ipv6.\n\n"
    },
    {
      "title": "NAT64",
      "level": 2,
      "content": "Wikipedia:NAT64 is the IPv6 transition mechanism where IPv6 only hosts are able to communicate with IPv4 hosts using NAT.\n\nLinux kernel does not support NAT64 natively but there are several packages to add support for NAT64.\n\n- Jool — SIIT and NAT64 for Linux\n\n- TAYGA — NAT64 daemon (unmaintained)\n\n"
    },
    {
      "title": "Disable IPv4",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Disable IPv4 in systemd-networkd",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nThis is an example configuration for an IPv6-only interface in systemd-networkd.\n\n```\n/etc/systemd/network/lan.network\n```\n\n```\n[Match]\nName=eno0\n\n[Link]\nRequiredForOnline=routable\n\n[Network]\n# Enable IPv6 only\nDHCP=ipv6\n# Enable SLAAC\nIPv6AcceptRA=true\n```\n\n"
    },
    {
      "title": "Disable IPv6",
      "level": 2,
      "content": "For some ISPs[4][5], the IPv6 traffic is slower than the IPv4 one: if you can confirm with certainty you are affected by such issues, disabling IPv6 may speed up your network speeds.\n\nThis should not be done blindly: for most users, IPv4-only networking will degrade performance behind Carrier-grade NAT and hamper their usage of P2P or WebRTC applications (e.g. some games). Instead, configuring IPv4 to be preferred over IPv6 is the best of both worlds.\n\n"
    },
    {
      "title": "Disable functionality",
      "level": 3,
      "content": "Adding ipv6.disable=1 to the kernel line disables the whole IPv6 stack, which is likely what you want if you are experiencing issues. See Kernel parameters for more information.\n\nAlternatively, adding ipv6.disable_ipv6=1 instead will keep the IPv6 stack functional but will not assign IPv6 addresses to any of your network devices.\n\n"
    },
    {
      "title": "sysctl",
      "level": 4,
      "content": "One can disable the IPv6 stack for all or specific network interfaces by adding the following sysctl configuration to /etc/sysctl.d/40-ipv6.conf:\n\n```\n# Disable IPv6\nnet.ipv6.conf.all.disable_ipv6 = 1\nnet.ipv6.conf.nic0.disable_ipv6 = 1\n...\nnet.ipv6.conf.nicN.disable_ipv6 = 1\n```\n\nThis however only works, if one restarts the systemd-sysctl.service after boot, since systemd-sysctl.service starts before the network interfaces are completely configured. On boot one can only set the configuration for lo, default and all, because they are an internal part of the IPv6 stack.\n\n- Most network managers (netplan, systemd-networkd, NetworkManager, etc.) set the IPv6 stack status of configured network interfaces depending on their own configuration, ignoring the configuration set in net.ipv6.conf.default.disable_ipv6.\n- If disabling IPv6 via sysctl, you should comment out the IPv6 hosts in your /etc/hosts. Otherwise there could be some connection errors because hosts are resolved to their IPv6 address which is not reachable.\n\n"
    },
    {
      "title": "systemd unit",
      "level": 4,
      "content": "If one wants to disable the IPv6 stack for all network interfaces on boot, with the ability to easily enable IPv6 later, a systemd unit which runs after the network manager is necessary.\n\nA unit for systemd-networkd would look like this:\n\n```\n/etc/systemd/system/enforce_disable_ipv6.service\n```\n\n```\n[Unit]\nDescription=enforce default disable_ipv6\nAssertPathExists=/proc/sys/net/ipv6/conf/all/disable_ipv6\nAssertPathExists=/proc/sys/net/ipv6/conf/default/disable_ipv6\nAfter=systemd-networkd.service\nPartOf=systemd-networkd.service\n\n[Service]\nType=oneshot\nExecStart=-/usr/bin/cp --no-preserve=all -T /proc/sys/net/ipv6/conf/default/disable_ipv6 /proc/sys/net/ipv6/conf/all/disable_ipv6\n\n[Install]\nWantedBy=systemd-networkd.service\n```\n\nAfter enabling this unit, any start or restart of systemd-networkd will enforce the default value of the IPv6 stack status on all network interfaces.\n\nThe default value can be set on boot with #sysctl.\n\nTo adjust this unit for other network manager one needs to replace all occurrences of systemd-networkd.service with the configuration unit of their network manager.\n\n"
    },
    {
      "title": "Other programs",
      "level": 3,
      "content": "Disabling IPv6 functionality in the kernel does not prevent other programs from trying to use IPv6. In most cases, this is completely harmless, but if you find yourself having issues with that program, you should consult the program's manual pages for a way to disable that functionality.\n\n"
    },
    {
      "title": "dhcpcd",
      "level": 4,
      "content": "dhcpcd will continue to harmlessly attempt to perform IPv6 router solicitation. To disable this, as stated in the dhcpcd.conf(5) man page, add the following to /etc/dhcpcd.conf:\n\n```\nnoipv6rs\nnoipv6\n```\n\n"
    },
    {
      "title": "NetworkManager",
      "level": 4,
      "content": "To disable IPv6 in NetworkManager, right click the network status icon, and select Edit Connections > Wired > Network name > Edit > IPv6 Settings > Method > Ignore/Disabled. Then click Save.\n\nThis can also be done as:\n\n```\n# nmcli connection modify ConnectionName ipv6.method \"disabled\"\n```\n\nFollowed by a restart of the network connection:\n\n```\n# nmcli connection up ConnectionName\n```\n\nTo confirm the settings have been applied, use ip address show and check no inet6 entry is displayed. Alternatively, /proc/sys/net/ipv6/conf/interface/disable_ipv6 should have the value 1.\n\n"
    },
    {
      "title": "ntpd",
      "level": 4,
      "content": "Following advice in systemd#Drop-in files, edit ntpd.service to define how systemd starts it.\n\nThis will create a drop-in snippet that will be run instead of the default ntpd.service. The -4 flag prevents IPv6 from being used by the ntp daemon. Put the following into the drop-in snippet:\n\n```\n[Service]\nExecStart=\nExecStart=/usr/bin/ntpd -4 -g -u ntp:ntp\n```\n\nwhich first clears the previous ExecStart, and then replaces it with one that includes the -4 flag.\n\n"
    },
    {
      "title": "GnuPG",
      "level": 4,
      "content": "Disable IPv6 in the dirmngr's configuration file:\n\n```\n~/.gnupg/dirmngr.conf\n```\n\n```\ndisable-ipv6\n```\n\nRestart the dirmngr.service user unit afterwards.\n\n"
    },
    {
      "title": "sshd",
      "level": 4,
      "content": "Ensure sshd is using IPv4 by adding the following to sshd_config:\n\n```\n/etc/ssh/sshd_config\n```\n\n```\nAddressFamily inet\n```\n\nAnd restart the sshd.service.\n\n"
    },
    {
      "title": "systemd-timesyncd",
      "level": 4,
      "content": "On occasion systemd-timesyncd will attempt to query an IPv6 timeserver even when IPv6 has been disabled. This can result in the system clock not being updated and the journal showing an error similar to:\n\n```\nsystemd-timesyncd[336]: Failed to set up connection socket: Address family not supported by protocol\n```\n\nThe unit status of systemd-timesyncd will show an attempt to connect with an IPv6 address in its Status entry, similar to:\n\n```\nStatus: \"Connecting to time server [2001:19f0:8001:afd:5400:1ff:fe9d:cba]:123 (2.pool.ntp.org)\"\n```\n\nPer FS#59806, only the \"2.\" ntp.org pools serve IPv6. So to prevent this remove 2.arch.pool.ntp.org and 2.pool.ntp.org from the NTP and FallbackNTP entries in /etc/systemd/timesyncd.conf file.\n\n"
    },
    {
      "title": "systemd-networkd",
      "level": 3,
      "content": "networkd supports disabling IPv6 on a per-interface basis. When a network unit's [Network] section has either LinkLocalAddressing=ipv4 or LinkLocalAddressing=no, networkd will not try to configure IPv6 on the matching interfaces.\n\nNote however that even when using the above option, networkd will still be expecting to receive router advertisements if IPv6 is not disabled globally. If IPv6 traffic is not being received by the interface (e.g. due to sysctl or ip6tables settings), it will remain in the configuring state and potentially cause timeouts for services waiting for the network to be fully configured. To avoid this, the IPv6AcceptRA=no option should also be set in the [Network] section.\n\n"
    },
    {
      "title": "Prefer IPv4 over IPv6",
      "level": 2,
      "content": "Uncomment the following line in /etc/gai.conf:\n\n```\n#\n#    For sites which prefer IPv4 connections change the last line to\n#\nprecedence ::ffff:0:0/96  100\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- IPv6 — kernel.org documentation\n- IPv6 temporary addresses — a summary about temporary addresses and privacy extensions\n- IPv6 prefixes — a summary of prefix types\n- net.ipv6 options — documentation of kernel parameters\n\n"
    }
  ]
}