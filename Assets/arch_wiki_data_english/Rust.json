{
  "title": "Rust",
  "url": "https://wiki.archlinux.org/title/Rust",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Rust package guidelines\n\nFrom Wikipedia:\n\n"
    },
    {
      "title": "Rust Core Library",
      "level": 3,
      "content": "The Rust Core Library is the dependency-free foundation of the Rust Standard Library. It interfaces directly with LLVM primitives, which allows Rust to be platform and hardware-agnostic. It is this integration with LLVM that allows Rust to obtain greater performance than equivalent C applications compiled with Clang, making Rust software designed with libcore lower level than C. It contains only basic platform-independent types such as Option, Result, and Iterator. Developers looking to target software for embedded platforms may forego the standard library with #![no_std] to exclusively use the no-batteries-included core library for smaller binary sizes and improved performance. However, using #![no_std] limits the amount of software support that you can get from the larger Rust community as a majority of libraries require the standard library.\n\n"
    },
    {
      "title": "Rust Standard Library",
      "level": 3,
      "content": "The Rust Standard Library provides the convenient high level abstractions by which a majority of portable Rust software is created with. It features convenient features such as the Vec and String types; a vast amount of methods for language primitives; a large number of standard macros; I/O and multithreading support; heap allocations with Box; and many more high level features not available in the core library.\n\n"
    },
    {
      "title": "Release cycle",
      "level": 3,
      "content": "Rust follows a regular six-week release cycle, similar to the release cycle of Firefox. With each new release, the core and standard libraries are improved to support more platforms, improve performance, and stabilize new features for use with stable Rust.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "The two main ways to install Rust are:\n\n- The Native installation, recommended if you only use Rust for running or installing software made with Rust\n- The Rustup installation, recommended if you intend to program anything in Rust\n\n"
    },
    {
      "title": "Native installation",
      "level": 3,
      "content": "To install the latest stable version of Rust from the official Arch Linux software repository, install the rust package. This will install the rustc compiler and Cargo.\n\nThere is also a development version of the Rust compiler available: rust-nightly-binAUR for prebuilt generic binaries or rust-gitAUR to build the compiler with system libraries.\n\n"
    },
    {
      "title": "Rustup",
      "level": 3,
      "content": "The official and recommended method of installing Rust for the purpose of developing software is to use the Rustup toolchain manager, written in Rust.\n\nThe benefit of using the Rustup toolchain manager instead of the standalone prepackaged Rust in the software repository is the ability to install multiple toolchains (stable, beta, nightly) for multiple targets (windows, mac, android) and architectures (x86, x86_64, arm). It should be noted that installing rustup does not automatically install a rust toolchain with it, nor does updating rustup through any method automatically provide the latest toolchain release of rust. See #Usage or rustup toolchain documentation for more on toolchains.\n\nThere are two choices for a Rustup installation, one is supported by Arch Linux via pacman, while the other is officially supported by Rust via their installation script.\n\n"
    },
    {
      "title": "Arch Linux package",
      "level": 4,
      "content": "rustup is available on the Arch Linux software repository. Note that rustup self update will not work when installed this way, the package needs to be updated by pacman. However, this change does not extend to other rustup functionality, such as rustup update for updating rust toolchains.\n\nThis package has the advantage that the various Rust executables live in /usr/bin, instead of ~/.cargo/bin, removing the need to add another directory to your PATH.\n\nNote: **not** \n\nIn order to install the toolchain, you need to tell rustup which version to use, between stable and nightly:\n\n```\n$ rustup default stable\n```\n\n"
    },
    {
      "title": "Building rust against a new version of llvm",
      "level": 4,
      "content": "Since rust builds using a bootstrap strategy, a functional rust package is required. In the case of building a version of llvm which is newer than the version in the official repos, users will encounter the need to have a shared object from a previous version of llvm-libs (one which was used to build the repo version of rust) in order to build against the newer version of llvm.\n\nExample: the official repos offer llvm-18.1.8 and the goal is to build llvm-19.1.6.\n\nThe bootstrap step requires /usr/lib/libLLVM.so.18.1 from llvm-libs-18.1.8. This file can be manually placed in the build root or placed by a package such as llvm15-libs.\n\n"
    },
    {
      "title": "Upstream installation script",
      "level": 4,
      "content": "Rustup is also available to download and install manually via rustup's official web page.\n\nDownload the file with curl --proto '=https' --tlsv1.3 -sSf https://sh.rustup.rs -o rust.sh, view it: less ./rust.sh, and run the script ./rust.sh to start rustup installation. The script makes PATH changes only to login shell configuration files. You need to source ~/.cargo/env until you logout and login back into the system. To update rustup afterwards, run rustup self update.\n\nThe script installs and activates the default toolchain by default (the one used by the rust package), so there is no need to manually install it to start using Rust.\n\n"
    },
    {
      "title": "Usage",
      "level": 4,
      "content": "You might need to manually install a toolchain, e.g. stable, beta, nightly or 1.58.0. You also need to do this if you want to use/test another toolchain.\n\n```\n$ rustup toolchain install toolchain\n```\n\nYou can now run the Rust commands by running, rustup run toolchain command. However, to use these commands directly, you need to activate the toolchain:\n\n```\n$ rustup default toolchain\n```\n\nCheck the installed Rust version using rustc -V:\n\n```\n$ rustc -V\n```\n\n```\nrustc 1.58.0 (02072b482 2022-01-11)\n```\n\nNote: Rust does not do its own linking, and so you’ll need to have a linker installed. You can use gcc, otherwise Rust will generate the following error: linker `cc` not found.\n\nRust does not do its own linking, and so you’ll need to have a linker installed. You can use gcc, otherwise Rust will generate the following error: linker `cc` not found.\n\nNote: Rustup does not automatically update provided toolchains. If users are wishing to use the latest releases of Rust, crates, and other relevant packages, they may occasionally wish to update their toolchains with rustup update. See Official rustup documentation for more.\n\nRustup does not automatically update provided toolchains. If users are wishing to use the latest releases of Rust, crates, and other relevant packages, they may occasionally wish to update their toolchains with rustup update. See Official rustup documentation for more.\n\n"
    },
    {
      "title": "Test your installation",
      "level": 3,
      "content": "Check that Rust is installed correctly by building a simple program, as follows:\n\n```\n~/hello.rs\n```\n\n```\nfn main() {\n    println!(\"Hello, World!\");\n}\n```\n\nYou can compile it with rustc, then run it:\n\n```\n$ rustc hello.rs && ./hello\n```\n\n```\nHello, World!\n```\n\n"
    },
    {
      "title": "Using rustup",
      "level": 3,
      "content": "You can easily cross-compile using Rustup. Rustup supports many cross-compile targets. A full list can be found running rustup target list.\n\nFor instance, if you want to install Rust using the stable channel for Windows, using the GNU Compiler, you will need to do:\n\n```\n$ rustup toolchain install stable-x86_64-pc-windows-gnu\n```\n\nThis will only install Rust and its tools for your target architecture, but some additional tools might be needed for cross-compiling.\n\n"
    },
    {
      "title": "Windows",
      "level": 3,
      "content": "In this section, $ARCH is the target architecture (either x86_64 or i686). It will explain how to cross compile using rustup.\n\n1. Install mingw-w64-gcc\n1. Run rustup target add $ARCH-pc-windows-gnu to install Rust standard library for your architecture.\n1. Finally, tell cargo where to find the MinGW-w64 gcc/ar by adding the following to your ~/.cargo/config.toml:\n\n```\n~/.cargo/config.toml\n```\n\n```\n[target.$ARCH-pc-windows-gnu]\nlinker = \"/usr/bin/$ARCH-w64-mingw32-gcc\"\nar = \"/usr/bin/$ARCH-w64-mingw32-ar\"\n```\n\nFinally, you can cross compile for windows by passing the --target $ARCH-pc-windows-gnu to cargo:\n\n```\n$ # Build\n$ cargo build --release --target \"$ARCH-pc-windows-gnu\"\n$ # Run unit tests under wine\n$ cargo test --target \"$ARCH-pc-windows-gnu\"\n```\n\nCurrently building executables using MinGW 6 and the toolchains installed by rustup is broken. To fix it, execute\n\n```\nfor lib in crt2.o dllcrt2.o libmsvcrt.a; do cp -v /usr/x86_64-w64-mingw32/lib/$lib $HOME/.rustup/toolchains/$CHANNEL-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib/; done\n```\n\nwhere CHANNEL is the update channel (stable, beta or nightly)\n\n"
    },
    {
      "title": "Unofficial packages",
      "level": 3,
      "content": "The unofficial repository archlinuxcn has rust-nightly and Rust std library for i686, ARM, ARMv7, Windows 32 and 64 so you can just install the one you want then enjoy cross-compiling. However, you have to find an ARM toolchain by yourself. For Windows 32bit targets, you will need to get a libgcc_s_dw2-1.dll (provided by mingw-w64-gcc) to build and run.\n\n"
    },
    {
      "title": "Cargo",
      "level": 2,
      "content": "Cargo, Rust's package manager, is part of the rust package. The nightly version is available in the AUR as part of rust-nightly-binAUR. If you use rustup, it already includes cargo.\n\nCargo is a tool that allows Rust projects to declare their various dependencies, and ensure that you will always get a repeatable build. You are encouraged to read the official guide.\n\n"
    },
    {
      "title": "Usage",
      "level": 3,
      "content": "To create a new project using Cargo:\n\n```\n$ cargo new hello_world\n```\n\nThis creates a directory with a default Cargo.toml file, set to build an executable.\n\n```\nCargo.toml\n```\n\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n```\n\n"
    },
    {
      "title": "Optimizing for native CPU platform",
      "level": 3,
      "content": "In order to instruct Cargo to always compile optimal code for your CPU platform, you can achieve this by adding a flag to ~/.cargo/config.toml. Please be aware that the resulting binaries can not be distributed for use on other computers, and might even fail on your own system if you decide to change your CPU in the future.\n\nFind out which target platform is used by default on your installation:\n\n```\n$ rustup toolchain list\n```\n\n```\nstable-x86_64-unknown-linux-gnu (default)\n```\n\nIn this example, we are using stable Rust on the x86_64-unknown-linux-gnu platform.\n\nInstruct Cargo to always compile code optimized for the native CPU platform:\n\n```\n~/.cargo/config.toml\n```\n\n```\n[target.x86_64-unknown-linux-gnu]\nrustflags = [\"-C\", \"target-cpu=native\"]\n```\n\n"
    },
    {
      "title": "sccache",
      "level": 3,
      "content": "Compilation times can be greatly reduced by using sccache (sccache package). This will maintain a local cache of compiler artifacts, eliminating the need to recompile code that has not changed since the last time it was compiled.\n\nTo enable sccache, you can use RUSTC_WRAPPER environment variable:\n\n```\n$ export RUSTC_WRAPPER=sccache\n$ cargo build\n```\n\nor\n\n```\n$ RUSTC_WRAPPER=sccache cargo build\n```\n\nAlternatively, add the following configuration to ~/.cargo/config.toml:\n\n```\n~/.cargo/config.toml\n```\n\n```\n[build]\nrustc-wrapper = \"sccache\"\n```\n\n"
    },
    {
      "title": "Tools",
      "level": 3,
      "content": "See https://www.rust-lang.org/tools for the recommended tools of the Rust project.\n\n"
    },
    {
      "title": "rust-analyzer",
      "level": 4,
      "content": "rust-analyzer is the official Language Server Protocol implementation for Rust which has replaced RLS.\n\nIt is available as the rust-analyzer package, and the latest Git version is available as rust-analyzer-gitAUR. Alternatively, if you have rustup installed, you can install rust-analyzer with:\n\n```\n$ rustup component add rust-analyzer\n```\n\nrust-analyzer needs the source code of the standard library. If it is not present, rust-analyzer will attempt to install it automatically using rustup. To install the source code manually using rustup, run the following command:\n\n```\n$ rustup component add rust-src\n```\n\n"
    },
    {
      "title": "Clippy",
      "level": 4,
      "content": "Clippy takes advantage of compiler plugin support to provide a large number of additional lints for detecting and warning about a larger variety of errors and non-idiomatic Rust.\n\nClippy is included in the rust package. To install it with rustup use:\n\n```\n$ rustup component add clippy\n```\n\n"
    },
    {
      "title": "Rustfmt",
      "level": 4,
      "content": "Rustfmt is a tool to format Rust code according to the official style guidelines.\n\nRustfmt is included in the rust package. To install it with rustup use:\n\n```\n$ rustup component add rustfmt\n```\n\n"
    },
    {
      "title": "Emacs",
      "level": 4,
      "content": "Emacs support for Rust can be obtained via the official rust-mode plugin.\n\n"
    },
    {
      "title": "GNOME Builder",
      "level": 4,
      "content": "GNOME Builder support for Rust is achieved using Language Server Protocol. It uses rust-analyzer by default; all you need to do is install it along with the Rust source.\n\n"
    },
    {
      "title": "Helix",
      "level": 4,
      "content": "Helix editor is written in Rust and has the Rust language server protocol included. Helix is inspired by Neovim and Kakoune.\n\n"
    },
    {
      "title": "Kate",
      "level": 4,
      "content": "Kate support for Rust is achieved using Language Server Protocol. It uses rust-analyzer by default; all you need to do is install it along with the Rust source.\n\n"
    },
    {
      "title": "IntelliJ IDEA",
      "level": 4,
      "content": "IntelliJ IDEA has a Rust plugin. The same plugin also works with CLion.\n\nIf using rustup, use rustup to download the source (rustup component add rust-src), and then select ~/.rustup/toolchains/<your toolchain>/bin as the toolchain location.\n\nIf using Rust from the official Arch Linux software repository, select /usr/bin as the toolchain location and /usr/lib/rustlib/src/rust/library/ as the stdlib sources location.\n\n"
    },
    {
      "title": "Jetbrains RustRover",
      "level": 4,
      "content": "Jetbrains is also working on a special Editor just for Rust. It can be found and downloaded under their official Website or in the AUR under rustroverAUR and rustrover-eapAUR.\n\n"
    },
    {
      "title": "Visual Studio Code",
      "level": 4,
      "content": "Visual Studio Code support for Rust can be obtained via rust-analyzer with the rust-lang.rust-analyzer extension.\n\n"
    },
    {
      "title": "Vim",
      "level": 4,
      "content": "Vim support for Rust can be obtained via the official rust.vim plugin, which provides file detection, syntax highlighting, formatting and support for the Syntastic syntax checking plugin. Many completion engines have Rust support, like coc (via the coc-rust-analyzer plugin) and YouCompleteMe.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official website of the Rust Programming Language\n- Rust Documentation\n- Official Rust Book\n- Standard Library API Lookup\n- Examples with small descriptions\n- Page listing of Rust tutorials\n- Libraries(crates) available through Cargo\n- This Week in Rust\n- The Rust Programming Language Blog\n- The Rust Users Forum\n- The Rust Internals Forum\n- Awesome Rust: A curated list of Rust libraries and resources\n- Wikipedia:Rust (programming language)\n\n"
    }
  ]
}