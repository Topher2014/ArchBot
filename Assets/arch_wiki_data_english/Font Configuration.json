{
  "title": "Font Configuration",
  "url": "https://wiki.archlinux.org/title/Font_Configuration",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Font configuration/Chinese\n- Fonts\n- Java Runtime Environment fonts\n- Metric-compatible fonts\n- Microsoft fonts\n\nFontconfig is a library designed to provide a list of available fonts to applications, as well as configuration for how fonts get rendered.\n\nThe FreeType library renders fonts based on this configuration. The freetype2 font rendering package includes the bytecode interpreter (BCI) enabled for better font rendering, especially with an LCD monitor. See #Fontconfig configuration and Font configuration/Examples.\n\nAlthough Fontconfig is used often in modern Unix and Unix-like operating systems, some applications rely on the original method of font selection and display, the X Logical Font Description (XLFD).\n\n"
    },
    {
      "title": "Font paths",
      "level": 2,
      "content": "For fonts to be known to applications, they must be cataloged for easy and quick access.\n\nThe font paths known to Fontconfig by default are: /usr/share/fonts/, ~/.local/share/fonts (and ~/.fonts/, now deprecated). Fontconfig will scan these directories recursively. For ease of organization and installation, it is recommended to use these font paths when adding fonts.\n\nTo see a list of known Fontconfig fonts:\n\n```\n$ fc-list ':' file\n```\n\nSee fc-list(1) for more output formats.\n\nCheck for Xorg known font paths by reviewing its log:\n\n```\n$ grep /fonts ~/.local/share/xorg/Xorg.0.log\n```\n\n- You can also check the list of Xorg known font paths using the command xset q.\n- Use /var/log/Xorg.0.log if Xorg is run with root privileges.\n\nKeep in mind that Xorg does not search recursively through the /usr/share/fonts/ directory like Fontconfig does. To add a path, the full path must be used:\n\n```\nSection \"Files\"\n    FontPath     \"/usr/share/fonts/local/\"\nEndSection\n```\n\nFor more details about Xorg configuration read Xorg#Configuration. If you want font paths to be set on a per-user basis, you can add and remove font paths from the default by adding the following line(s) to ~/.xinitrc:\n\n```\nxset +fp /usr/share/fonts/local/           # Prepend a custom font path to Xorg list of known font paths\nxset -fp /usr/share/fonts/sucky_fonts/     # Remove the specified font path from Xorg list of known font paths\n```\n\nTo see a list of fonts known by Xorg use xlsfonts, from the xorg-xlsfonts package.\n\n"
    },
    {
      "title": "Fontconfig configuration",
      "level": 2,
      "content": "Fontconfig configuration is documented in the fonts-conf(5) man page.\n\nConfiguration can be done per-user through $XDG_CONFIG_HOME/fontconfig/fonts.conf (usually $HOME/.config/fontconfig/fonts.conf), and globally with /etc/fonts/local.conf. The settings in the per-user configuration have precedence over the global configuration. Both these files use the same syntax.\n\n- The 50-user.conf preset needs to be enabled to make the user configuration take effect, and the 51-local.conf preset is for the global configuration. Check the #Presets section to know how to enable these presets.\n- Configuration files and directories: ~/.fonts.conf/, ~/.fonts.conf.d/ and ~/.fontconfig/*.cache-* are deprecated and will not be read by default in the future versions of the package. New paths are $XDG_CONFIG_HOME/fontconfig/fonts.conf, $XDG_CONFIG_HOME/fontconfig/conf.d/NN-name.conf and $XDG_CACHE_HOME/fontconfig/*.cache-* respectively. If using the second location, make sure the naming is valid (where NN is a two digit number like 00, 10, or 99).\n\nFontconfig gathers all its configurations in a central file (/etc/fonts/fonts.conf). This file is replaced during Fontconfig updates and should not be edited. Fontconfig-aware applications source this file to know available fonts and how they get rendered; simply restarting such applications is sufficient to load the new configuration. This file is a conglomeration of rules from the global configuration (/etc/fonts/local.conf), the configured presets in /etc/fonts/conf.d/, and the user configuration file ($XDG_CONFIG_HOME/fontconfig/fonts.conf). fc-cache can be used to rebuild Fontconfig configuration, although changes will only be visible in newly launched applications.\n\nFontconfig configuration files use XML format and need these headers:\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE fontconfig SYSTEM \"urn:fontconfig:fonts.dtd\">\n<fontconfig>\n\n  <!-- settings go here -->\n\n</fontconfig>\n```\n\nThe configuration examples in this article omit these tags.\n\n"
    },
    {
      "title": "Presets",
      "level": 3,
      "content": "There are presets installed in the directory /usr/share/fontconfig/conf.avail. They can be enabled by creating symbolic links to them, both per-user and globally, as described in /etc/fonts/conf.d/README. These presets will override matching settings in their respective configuration files.\n\nFor example, to enable sub-pixel RGB rendering globally:\n\n```\n$ cd /etc/fonts/conf.d\n# ln -s /usr/share/fontconfig/conf.avail/10-sub-pixel-rgb.conf\n```\n\nTo do the same but instead for a per-user configuration:\n\n```\n$ mkdir $XDG_CONFIG_HOME/fontconfig/conf.d\n$ ln -s /usr/share/fontconfig/conf.avail/10-sub-pixel-rgb.conf $XDG_CONFIG_HOME/fontconfig/conf.d\n```\n\n"
    },
    {
      "title": "Anti-aliasing",
      "level": 3,
      "content": "Font rasterization converts vector font data to bitmap data so that it can be displayed. The result can appear jagged due to aliasing. Anti-aliasing can be used to increase the apparent resolution of font edges. Anti-aliasing is enabled by default. To disable it:\n\n```\n<match target=\"font\">\n    <edit name=\"antialias\" mode=\"assign\">\n      <bool>false</bool>\n    </edit>\n  </match>\n```\n\n"
    },
    {
      "title": "Hinting",
      "level": 3,
      "content": "Font hinting (also known as instructing) is the use of mathematical instructions to adjust the display of an outline font so that it lines up with a rasterized grid (i.e. the pixel grid of the display). Its intended effect is to make fonts appear more crisp so that they are more readable. Fonts will line up correctly without hinting when displays have around 300 DPI.\n\n"
    },
    {
      "title": "Byte-Code Interpreter (BCI)",
      "level": 4,
      "content": "Using BCI hinting, instructions in TrueType fonts are rendered according to FreeTypes's interpreter. BCI hinting works well with fonts with good hinting instructions. Hinting is enabled by default. To disable it:\n\n```\n<match target=\"font\">\n    <edit name=\"hinting\" mode=\"assign\">\n      <bool>false</bool>\n    </edit>\n  </match>\n```\n\nNote: **40** \n\n- 35 for classic mode (emulates Windows 98),\n- 40 for minimal mode (stripped down Infinality, this is the default).\n\n"
    },
    {
      "title": "Autohinter",
      "level": 4,
      "content": "The autohinter attempts to do automatic hinting, disregarding any hinting information embedded in the font. Originally, it was the default because TrueType2 fonts were patent-protected, but now that these patents have expired, there is very little reason to use it. It does work better with fonts that have broken or no hinting information, but it will be strongly sub-optimal for fonts with good hinting information. Generally, common fonts are of the latter kind, so the autohinter will not be useful. The autohinter is disabled by default. To enable it:\n\n```\n<match target=\"font\">\n    <edit name=\"autohint\" mode=\"assign\">\n      <bool>true</bool>\n    </edit>\n  </match>\n```\n\n"
    },
    {
      "title": "Hintstyle",
      "level": 4,
      "content": "Hintstyle is the amount of font reshaping done to line up to the grid. Hinting values are: hintnone, hintslight, hintmedium, and hintfull. hintslight will make the font more fuzzy to line up to the grid but will be better in retaining font shape (see [2]), while hintfull will be a crisp font that aligns well to the pixel grid but will lose a greater amount of font shape. hintslight implicitly uses the autohinter in a vertical-only mode in favor of font-native information for non-CFF (.otf) fonts.\n\nhintslight is the default setting. To change it:\n\n```\n<match target=\"font\">\n    <edit name=\"hintstyle\" mode=\"assign\">\n      <const>hintnone</const>\n    </edit>\n  </match>\n```\n\n"
    },
    {
      "title": "Subpixel layout",
      "level": 3,
      "content": "Fontconfig will need to know your subpixel layout to be able to display your fonts correctly. Use the Subpixel layout monitor test (part of The Lagom LCD monitor test pages) to find out your subpixel arrangement.\n\nSubpixel geometry is configured via the rgba property, which could be either:\n\n- rgb — red, green, blue — most common, is used by the most monitors manufactured today\n- bgr\n- vrgb — vertical\n- vbgr\n- none — no subpixel rendering\n\n```\n<match target=\"font\">\n    <edit name=\"rgba\" mode=\"assign\">\n      <const>rgb</const>\n    </edit>\n  </match>\n```\n\nNote: **RGB** \n\nThere is no support for unusual subpixel layouts such as \"Pentile\" and \"RGBY\", occasionally found on TV, OLED and mobile screens. For these devices, it is best to give up subpixel rendering and rely on greyscale by using the none option.\n\n"
    },
    {
      "title": "Subpixel rendering",
      "level": 3,
      "content": "Subpixel rendering is a technique to improve sharpness of font rendering by effectively tripling the horizontal (or vertical) resolution through the use of subpixels. On Windows machines, this technique is called ClearType.\n\nFreeType2 provides two different types of subpixel rendering, called Harmony and ClearType (FT_CONFIG_OPTION_SUBPIXEL_RENDERING) [3]. Starting from FreeType 2.10.3, Arch Linux enables ClearType subpixel rendering by default [4].\n\nAn LCD filter is recommended when ClearType subpixel rendering is enabled. The Harmony subpixel rendering does not require setting an LCD filter and with default LCD geometry, it is equivalent to ClearType with the lcdlight filter [5]. See the following section on how to enable an LCD filter and its benefits.\n\n"
    },
    {
      "title": "LCD filter",
      "level": 4,
      "content": "When using ClearType subpixel rendering, you should enable the LCD filter, which is designed to reduce color fringing. This is described under LCD filtering in the FreeType 2 API reference. Different options are described under FT_LcdFilter, and are illustrated by this LCD filter test page.\n\nThe lcddefault filter will work for most users. Other filters are available that can be used in special situations: lcdlight; a lighter filter ideal for fonts that look too bold or fuzzy, lcdlegacy, the original Cairo filter; and lcdnone to disable it entirely.\n\n```\n<match target=\"font\">\n    <edit name=\"lcdfilter\" mode=\"assign\">\n      <const>lcddefault</const>\n    </edit>\n  </match>\n```\n\n"
    },
    {
      "title": "Advanced LCD filter specification",
      "level": 4,
      "content": "If the available built-in LCD filters are not satisfactory, it is possible to tweak the font rendering very specifically by building a custom freetype2 package and modifying the hardcoded filters. The Arch build system can be used to build and install packages from source.\n\nCheckout the freetype2 PKGBUILD and download/extract the build files. Arch build system#Retrieve PKGBUILD source lists some of the methods.\n\nEnable ClearType subpixel rendering by editing the file src/freetype-VERSION/include/freetype/config/ftoption.h and uncommenting the FT_CONFIG_OPTION_SUBPIXEL_RENDERING macro.\n\nThen, edit the file src/freetype-VERSION/src/base/ftlcdfil.c and look up the definition of the constant default_weights:\n\n```\nstatic const FT_LcdFiveTapFilter  default_weights =\n    { 0x10, 0x40, 0x70, 0x40, 0x10 };\n```\n\nThis constant defines a low-pass filter applied to the rendered glyph. Modify it as needed. (reference: freetype list discussion) Save the file, build and install the custom package:\n\n```\n$ makepkg --noextract\n# pacman --remove --nodeps freetype2\n# pacman --upgrade freetype2-VERSION-ARCH.pkg.tar.zstd\n```\n\nRestart X. The lcddefault filter should now render fonts differently.\n\n"
    },
    {
      "title": "Custom settings for certain fonts or font styles",
      "level": 3,
      "content": "Some fonts may not look good with BCI hinting. It can be disabled for just those fonts:\n\n```\n...\n<match target=\"font\">\n    <test name=\"family\" qual=\"any\">\n        <string>My Font</string>\n    </test>\n    <edit name=\"hinting\" mode=\"assign\">\n        <bool>false</bool>\n    </edit>\n</match>\n...\n```\n\n"
    },
    {
      "title": "Match tests",
      "level": 4,
      "content": "A reliable way to set a default or fallback font is to add an XML fragment to perform a match test. With the \"binding\" attribute, for example, the following setting will fall back to Gentium in place of Georgia:\n\n```\n...\n<match target=\"pattern\">\n  <test qual=\"any\" name=\"family\" compare=\"eq\"><string>Georgia</string></test>\n  <edit name=\"family\" mode=\"assign\" binding=\"same\"><string>Gentium Book Plus</string></edit>\n</match>\n...\n```\n\nIn the above, the \"compare\" attribute can be \"eq\" (i.e., exactly equal to Georgia), \"contains\" (e.g., matching either Georgia or Georgia Pro), or other values. See fonts-conf(5).\n\n"
    },
    {
      "title": "Alias",
      "level": 4,
      "content": "An alternate approach is to use <alias> to set the \"preferred\" font. Fonts matching the <family> element are edited to prepend the list of <prefer>ed families before the matching <family>. The following example will fall back to Bitstream Vera Sans when Helvetica is called:\n\n```\n...\n<alias>\n    <family>Helvetica</family>\n    <prefer>\n        <family>Bitstream Vera Sans</family>\n    </prefer>\n</alias>\n...\n```\n\n<alias> can also be used to specify fallback fonts when some glyphs are missing. For example, many versions of Helvetica Neue do not include Greek characters. A user might have Helvetica Neue installed and want to use it for Latin characters, and fall back to FreeSans for Greek characters due to its similarity to Helvetica. However, the same user might have set another font Noto Sans as the default sans-serif font. The following will allow this to be achieved:\n\n```\n...\n<alias>\n    <family>Helvetica Neue LT Pro</family>\n    <prefer>\n        <family>Helvetica Neue LT Pro</family>\n        <family>FreeSans</family>\n    </prefer>\n</alias>\n...\n```\n\nThe above is not needed if the user simply wants to fall back to default fonts whenever glyphs are missing.\n\n"
    },
    {
      "title": "Whitelisting and blacklisting fonts",
      "level": 3,
      "content": "The element <selectfont> is used in conjunction with the <acceptfont> and <rejectfont> elements to selectively whitelist or blacklist fonts from the resolve list and match requests. The simplest and most typical use case is to reject a font that the user needs installed, but is getting matched for a generic font query that is causing problems with user interfaces.\n\nFirst, obtain the Family name as listed in the font itself:\n\n```\n$ fc-scan .fonts/lklug.ttf --format='%{family}\\n'\n```\n\n```\nLKLUG\n```\n\nThen, use that Family name in a <rejectfont> stanza:\n\n```\n<selectfont>\n    <rejectfont>\n        <pattern>\n            <patelt name=\"family\" >\n                <string>LKLUG</string>\n            </patelt>\n        </pattern>\n    </rejectfont>\n</selectfont>\n```\n\nTypically, when both elements are combined, <rejectfont> is first used on a more general matching glob to reject a large group (such as a whole directory), then <acceptfont> is used after it to whitelist individual fonts out of the larger blacklisted group.\n\n```\n<selectfont>\n    <rejectfont>\n        <glob>/usr/share/fonts/OTF/*</glob>\n    </rejectfont>\n    <acceptfont>\n        <pattern>\n            <patelt name=\"family\" >\n                <string>Monaco</string>\n            </patelt>\n        </pattern>\n    </acceptfont>\n</selectfont>\n```\n\n"
    },
    {
      "title": "Disable bitmap fonts",
      "level": 3,
      "content": "Bitmap fonts are sometimes used as fallbacks for missing fonts, which may cause text to be rendered pixelated or too large. Use the 70-no-bitmaps.conf preset to disable this behavior.\n\nTo disable embedded bitmap for all fonts:\n\n```\n~/.config/fontconfig/conf.d/20-no-embedded.conf\n```\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE fontconfig SYSTEM \"urn:fontconfig:fonts.dtd\">\n<fontconfig>\n  <match target=\"font\">\n    <edit name=\"embeddedbitmap\" mode=\"assign\">\n      <bool>false</bool>\n    </edit>\n  </match>\n</fontconfig>\n```\n\nTo disable embedded bitmap fonts for a specific font:\n\n```\n<match target=\"font\">\n  <test qual=\"any\" name=\"family\">\n    <string>Monaco</string>\n  </test>\n  <edit name=\"embeddedbitmap\">\n    <bool>false</bool>\n  </edit>\n</match>\n```\n\nIf embedded bitmaps are disabled for all fonts, they can still be enabled for a specific font in case it does not function without embedded bitmaps. E.g. for Noto Color Emoji:\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE fontconfig SYSTEM \"urn:fontconfig:fonts.dtd\">\n<fontconfig>\n  <match target=\"font\">\n    <edit name=\"embeddedbitmap\" mode=\"assign\">\n      <bool>false</bool>\n    </edit>\n  </match>\n  <match target=\"font\">\n    <test name=\"family\" qual=\"any\">\n      <string>Noto Color Emoji</string>\n    </test>\n    <edit name=\"embeddedbitmap\">\n      <bool>true</bool>\n    </edit>\n  </match>\n</fontconfig>\n```\n\n"
    },
    {
      "title": "Disable scaling of bitmap fonts",
      "level": 3,
      "content": "To disable scaling of bitmap fonts (which often makes them blurry), remove /etc/fonts/conf.d/10-scale-bitmap-fonts.conf. Note this can break the scaling of emoji fonts such as Segoe UI Emoji, making them huge.\n\nTo re-enable scaling of bitmap fonts, re-create the symbolic link:\n\n```\n# ln -s /usr/share/fontconfig/conf.default/10-scale-bitmap-fonts.conf /etc/fonts/conf.d/10-scale-bitmap-fonts.conf\n```\n\n"
    },
    {
      "title": "Create bold and italic styles for incomplete fonts",
      "level": 3,
      "content": "FreeType has the ability to automatically create italic and bold styles for fonts that do not have them, but only if explicitly required by the application. Given programs rarely send these requests, this section covers manually forcing generation of missing styles.\n\nStart by editing /usr/share/fonts/fonts.cache-1 as explained below. Store a copy of the modifications on another file, because a font update with fc-cache will overwrite /usr/share/fonts/fonts.cache-1.\n\nAssuming the Dupree font is installed:\n\n```\n\"dupree.ttf\" 0 \"Dupree:style=Regular:slant=0:weight=80:width=100:foundry=unknown:index=0:outline=True:etc...\n```\n\nDuplicate the line, change style=Regular to style=Bold or any other style. Also change slant=0 to slant=100 for italic, weight=80 to weight=200 for bold, or combine them for bold italic:\n\n```\n\"dupree.ttf\" 0 \"Dupree:style=Bold Italic:slant=100:weight=200:width=100:foundry=unknown:index=0:outline=True:etc...\n```\n\nNow add necessary modifications to $XDG_CONFIG_HOME/fontconfig/fonts.conf:\n\n```\n...\n<match target=\"font\">\n    <test name=\"family\" qual=\"any\">\n        <string>Dupree</string>\n         <!-- other fonts here .... -->\n     </test>\n     <test name=\"weight\" compare=\"more_eq\"><int>140</int></test>\n     <edit name=\"embolden\" mode=\"assign\"><bool>true</bool></edit>\n</match>\n\n<match target=\"font\">\n    <test name=\"family\" qual=\"any\">\n        <string>Dupree</string>\n        <!-- other fonts here .... -->\n    </test>\n    <test name=\"slant\" compare=\"more_eq\"><int>80</int></test>\n    <edit name=\"matrix\" mode=\"assign\">\n        <times>\n            <name>matrix</name>\n                <matrix>\n                    <double>1</double><double>0.2</double>\n                    <double>0</double><double>1</double>\n                </matrix>\n        </times>\n    </edit>\n</match>\n...\n```\n\n"
    },
    {
      "title": "Rule priority",
      "level": 3,
      "content": "Fontconfig processes files in /etc/fonts/conf.d in numerical order. Therefore, the rules of 01-aaa.conf and 02-bbb.conf will have the same effect as a single 01-aaabbb.conf file first containing the rules of 01-aaa then the ones of 02-bbb.\n\nUsually, that means the files with the smaller prefix will have higher precedence. However, the Fontconfig syntax is flexible and allows a new rule to take precedence over an existing rule. Therefore, it is recommended to #Query the current settings to test the result of the rule interactions.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nNote that the user's rules defined in $XDG_CONFIG_HOME/fontconfig/fonts.conf and in the directory $XDG_CONFIG_HOME/fontconfig/conf.d are loaded via the file /etc/fonts/conf.d/50-user.conf and typically take precedence over the rules defined in files starting with a higher number.\n\n"
    },
    {
      "title": "Query the current settings",
      "level": 3,
      "content": "To find out what settings are in effect, use fc-match --verbose. eg.\n\n```\n$ fc-match --verbose Sans\n```\n\n```\nfamily: \"DejaVu Sans\"(s)\nhintstyle: 3(i)(s)\nhinting: True(s)\n...\n```\n\nLook up the meaning of the numbers at fonts-conf(5) Eg. 'hintstyle: 3' means 'hintfull'\n\n"
    },
    {
      "title": "Applications without Fontconfig support",
      "level": 2,
      "content": "Some applications like URxvt will ignore Fontconfig settings. You can work around this by using ~/.Xresources, but it is not as flexible as Fontconfig. Example (see #Fontconfig configuration for explanations of the options):\n\n```\n~/.Xresources\n```\n\n```\nXft.autohint: 0\nXft.lcdfilter: lcddefault\nXft.hintstyle: hintslight\nXft.hinting: 1\nXft.antialias: 1\nXft.rgba: rgb\n```\n\nMake sure the settings are loaded properly when X starts with xrdb -q (see X resources for more information).\n\n"
    },
    {
      "title": "Distorted fonts",
      "level": 3,
      "content": "See HiDPI for instructions on handling high or mixed DPI displays: using a DPI setting which is not matching the physical hardware can lead to fuzzy font display.\n\n"
    },
    {
      "title": "Calibri, Cambria, Monaco, etc. not rendering properly",
      "level": 3,
      "content": "Some scalable fonts have embedded bitmap versions which are rendered instead, mainly at smaller sizes. Using Metric-compatible fonts as replacements can improve the rendering in these cases.\n\nYou can also force using scalable fonts at all sizes by disabling embedded bitmap, sacrificing some rendering quality.\n\n"
    },
    {
      "title": "Applications overriding hinting",
      "level": 3,
      "content": "Some applications or desktop environments may override default Fontconfig hinting and anti-aliasing settings. This may happen with GNOME 3, for example while you are using Qt applications like vlc or smplayer. Use the specific configuration program for the application in such cases. For GNOME, try gnome-tweaks.\n\n"
    },
    {
      "title": "Applications not picking up hinting from GNOME settings",
      "level": 3,
      "content": "For instance, under GNOME it sometimes happens that Firefox applies full hinting even when it is set to \"none\" in GNOME's settings, which results in sharp and widened fonts. In this case you would have to add hinting settings to your fonts.conf file:\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE fontconfig SYSTEM \"urn:fontconfig:fonts.dtd\">\n<fontconfig>\n <match target=\"font\">\n  <edit mode=\"assign\" name=\"hinting\">\n   <bool>false</bool>\n  </edit>\n </match>\n</fontconfig>\n```\n\nIn this example, hinting is set to grayscale.\n\n"
    },
    {
      "title": "Incorrect hinting in GTK applications",
      "level": 3,
      "content": "In some desktop environments, especially outside GNOME and Plasma, some GTK applications could not read font configuration properly. In order to solve this issue, install xsettingsd or xsettingsd-gitAUR and execute it at every system startup. See also Xsettingsd and xsettingsd wiki for more information. It can be configured with the following common configuration:\n\n```\n~/.xsettingsd\n```\n\n```\nXft/Hinting 1\nXft/HintStyle \"hintslight\"\nXft/Antialias 1\nXft/RGBA \"rgb\"\n```\n\nIf that is not working in some other applications, you could install xorg-xrdb and provide the following configuration:\n\n```\n~/.Xresources\n```\n\n```\nXft.hinting: 1\nXft.hintstyle: hintslight\nXft.antialias: 1\nXft.rgba: rgb\n```\n\nThen you can execute the script xrdb -merge ~/.Xresources at every system startup to apply the options. See also X resources and #Applications without Fontconfig support.\n\n"
    },
    {
      "title": "Hinting in GTK4 programs",
      "level": 3,
      "content": "GTK4 and libadwaita programs ignore font hinting settings. To remedy this, create or modify the following configuration:\n\n```\n~/.config/gtk-4.0/settings.ini\n```\n\n```\n[Settings]\ngtk-hint-font-metrics=true\n```\n\nSee also the GTK documentation and GTK issue 3787.\n\n"
    },
    {
      "title": "Helvetica font problem in generated PDFs",
      "level": 3,
      "content": "If the following command\n\n```\nfc-match helvetica\n```\n\nproduces\n\n```\nhelvR12-ISO8859-1.pcf.gz: \"Helvetica\" \"Regular\"\n```\n\nthen the bitmap font provided by xorg-fonts-75dpi is likely to be embedded into PDFs generated by \"Print to File\" or \"Export\" in various applications. The bitmap font was probably installed as a consequence of installing the whole xorg group (which is usually NOT recommended). To solve the pixelized font problem, you can uninstall the package. Install gsfonts (Type 1) or tex-gyre-fonts (OpenType) for corresponding free substitute of Helvetica (and other PostScript/PDF base fonts).\n\nYou may also experience similar problem when you open a PDF which requires Helvetica but does not have it embedded for viewing.\n\n"
    },
    {
      "title": "FreeType breaking bitmap fonts",
      "level": 3,
      "content": "Some users are reporting problems (FS#52502) with bitmap fonts having changed names after upgrading freetype2 to version 2.7.1, creating havoc in terminal emulators and several other programs such as dwm or dmenu by falling back to another (different) font. This was caused by the changes to the PCF font family format, which is described in their release notes [6]. Users transitioning from the old format might want to create a font alias to remedy the problems, like the solution which is described in [7], given here too:\n\nAssume we want to create an alias for terminus-font, which was renamed from Terminus to xos4 Terminus in the previously described freetype2 update:\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n- Create a configuration file in /etc/fonts/conf.avail/ for the font alias:\n\n```\n/etc/fonts/conf.avail/33-TerminusPCFFont.conf\n```\n\n```\n<?xml version=\"1.0\"?>\n <!DOCTYPE fontconfig SYSTEM \"urn:fontconfig:fonts.dtd\">\n <fontconfig>\n     <alias>\n         <family>Terminus</family>\n         <prefer><family>xos4 Terminus</family></prefer>\n         <default><family>fixed</family></default>\n     </alias>\n </fontconfig>\n```\n\n- Create a symbolic link towards it in the /etc/fonts/conf.d directory. In our example we would link as follows: ln -s /etc/fonts/conf.avail/33-TerminusPCFFont.conf /etc/fonts/conf.d to make the change permanent.\n\nEverything should now work as it did before the update, the font alias should not be in effect, but make sure to either reload .Xresources or restart the display server first so the affected programs can use the alias.\n\n"
    },
    {
      "title": "Underscores not rendered with DejaVu Monospace",
      "level": 3,
      "content": "Since Pango 1.44, the underscore characters disappear with certain font sizes when using the DejaVu Sans Mono font. A workaround is to use Liberation Mono as the monospace font, see #Set default or fallback fonts.\n\n"
    },
    {
      "title": "Debugging FreeType fonts",
      "level": 3,
      "content": "freetype2-demos provides tools for debugging FreeType font configuration. ftview is a GUI in which you can tweak font rendering settings with a live preview. For example:\n\n```\n$ ftview -e unic -d 1024x768x24 -r 96 10 /usr/share/fonts/noto/NotoSans-Regular.ttf\n```\n\n"
    },
    {
      "title": "Text is blurry",
      "level": 3,
      "content": "Some applications (e.g. Chromium/Electron) do not apply gamma correction properly, some have it disabled on certain scenarios (grayscale) which cause small text on dark background to be blurry and unreadable text on <=1080p screens. It is a long standing issue for Chromium/Electron, a workaround is to enable stem darkerning with the FREETYPE_PROPERTIES=\"cff:no-stem-darkening=0 autofitter:no-stem-darkening=0\" environment variable.\n\n"
    },
    {
      "title": "font-config-info",
      "level": 3,
      "content": "You can gather your effective font configuration with font-config-info-gitAUR. It queries information from several GTK sources, X resources, XSETTINGS protocol and fontconfig.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- An Xft Tutorial by Keith Packard\n- Fonts in X11\n- FreeType 2\n- FreeType 2 API Reference: Controlling FreeType Modules\n- Gentoo font-rendering thread\n- On slight hinting\n\n"
    }
  ]
}