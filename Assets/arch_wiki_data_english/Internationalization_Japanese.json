{
  "title": "Internationalization/Japanese",
  "url": "https://wiki.archlinux.org/title/Internationalization/Japanese",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Internationalization\n- Input method\n- Input Japanese using uim\n- Mozc\n- Fcitx\n- Fcitx5\n\nThis article describes how to set up a Japanese language environment and input method. It only covers the general and recommended cases . For full details on alternatives (e.g. Japanese input on tty or less common input method frameworks), see their respective It does not cover setting up Japanese input on the console/tty.\n\n"
    },
    {
      "title": "Fonts",
      "level": 2,
      "content": "To display Japanese characters, a Japanese (or Chinese) font must be installed. If text appears as gibberish on your screen, ensure you have an appropriate Japanese (Chinese can also suffice) font installed on your system.\n\nSome recommended Japanese fonts are as follows (see Fonts or Font configuration for more fonts or their configuration):\n\n- adobe-source-han-sans-jp-fonts - Japanese OpenType/CFF fonts, style Gothic (sans-serif).\n- adobe-source-han-serif-jp-fonts - Japanese OpenType/CFF fonts, style Mincho (serif).\n- noto-fonts-cjk - Google Noto CJK fonts.\n- otf-ipafont - Formal style Japanese Gothic (sans-serif) and Mincho (serif) fonts set; one of the highest quality open source font. Default of openSUSE-ja.\n- otf-ipaexfont - An updated version of ipafont.\n- ttf-hanazono - A free Japanese kanji font, style Mincho (serif).\n- ttf-sazanami - Japanese free TrueType font. This is outdated and not maintained any more, but may be defined as a fallback font on several environments.\n- ttf-koruriAUR - Japanese TrueType font obtained by mixing ttf-mplusAUR and Open Sans\n- ttf-monapoAUR - Japanese fonts to show 2channel Shift JIS art properly.\n- ttf-mplus-gitAUR - Modern Gothic style Japanese outline fonts. It includes all of Japanese Hiragana/Katakana, Basic Latin, Latin-1 Supplement, Latin Extended-A, IPA Extensions and most of Japanese Kanji, Greek, Cyrillic, Vietnamese with 7 weights (proportional) or 5 weights (monospace).\n- ttf-vlgothic - Japanese Gothic fonts. Default of Debian/Fedora/Vine Linux\n- ttf-kanjistrokeordersAUR - KanjiStrokeOrders font that indicates the stroke order of characters.\n\n"
    },
    {
      "title": "Locale",
      "level": 2,
      "content": "See locale for details.\n\nLocales are used to correctly display regional or language/locale-specific standards. To ensure the Japanese locale is enabled, confirm that ja_JP.utf8 is in the output of:\n\n```\n$ locale -a\n```\n\nTo enable the Japanese locale, uncomment ja_JP.utf8 in /etc/locale.gen:\n\n```\n/etc/locale.gen\n```\n\n```\n...\n#ja_JP.EUC-JP EUC-JP\nja_JP.UTF-8 UTF-8\n#ka_GE.UTF-8 UTF-8\n...\n```\n\nAfterwards, regenerate your locale:\n\n```\n# locale-gen\n```\n\n"
    },
    {
      "title": "Japanese Input",
      "level": 2,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nTo type Japanese characters using a Western keyboard, an input method (or input method editor (IME)) is required to convert r≈çmaji into kana or kanji.Wikipedia:Romanization of Japanese To conveniently switch between different IMEs (e.g. to switch between English and Japanese input), IMEs often function as part of an Input Method Framework (IMF) to enable easily switching between different keyboard layouts.\n\n"
    },
    {
      "title": "Input Method Framework (IMF)",
      "level": 3,
      "content": "The most common IMFs are IBus (more common for GTK-based environments) and Fcitx5 (more common for Qt-based environments), which support all available Japanese IMEs. For a full overview of IMFs and supported IMEs, see this table. This article only briefly covers installation and configuration of #Fcitx5 and #IBus.\n\n"
    },
    {
      "title": "Fcitx5",
      "level": 4,
      "content": "- The Fcitx package has been superseded by Fcitx5 since November 2020, and Fcitx has been put in maintenance mode. Users are recommended to use Fcitx5 instead of Fcitx.\n- fcitx5 only contains the basic framework, while the fcitx5-im group also includes input method modules for GTK and Qt applications, and a configuration tool. This covers most cases.\n\nIn most cases, installing the fcitx5-im group suffices. For full details and instructions, see Fcitx5#Installation.\n\n- The fcitx5-im group supports most GTK and Qt applications. If you are noticing issues, you can install fcitx5-qt4-gitAUR, fcitx5-qt6-gitAUR, and/or fcitx5-lua for Qt4, Qt6, and date and time support respectively.\n- Fcitx ships with a limited number of themes, which can be configured using the config tool. For more details on themes and appearance, see Fcitx5#Themes for more themes and information.\n\nTo enable Fcitx5, configure at least the following environment variables:\n\n```\nGTK_IM_MODULE=fcitx\nQT_IM_MODULE=fcitx\nXMODIFIERS=@im=fcitx\n```\n\nNote: **not** \n\n"
    },
    {
      "title": "IBus",
      "level": 4,
      "content": "Install the ibus package. See IBus#Installation for more information.\n\nTo enable IBus, configure at least the following environment variables:\n\n```\nGTK_IM_MODULE=ibus\nQT_IM_MODULE=ibus\nXMODIFIERS=@im=ibus\n```\n\n"
    },
    {
      "title": "Input Method Editor (IME)",
      "level": 3,
      "content": "Both Fcitx5 and IBus support all available Japanese IMEs. Follow the instructions for installing the IME of your choosing. If in doubt, #Mozc is a good recommendation.\n\n"
    },
    {
      "title": "Mozc",
      "level": 4,
      "content": "From the project's home page:\n\nInstall the Mozc version for the IMF of your choosing (e.g. fcitx5-mozc for Fcitx5 or ibus-mozcAUR for IBus support).\n\n"
    },
    {
      "title": "Anthy",
      "level": 4,
      "content": "Anthy is supported or built into most IMFs, though it is effectively dead.\n\nInstall the Anthy version for the IMF of your choosing (e.g. fcitx5-anthy for Fcitx5 or ibus-anthy for IBus support).\n\n"
    },
    {
      "title": "SKK (libskk)",
      "level": 3,
      "content": "Simple Kana to Kanji (SKK) is a basic kana to kanji conversion method based on Emacs. It was designed by Dr. Masahiko Sato (Professor Emeritus, Kyoto University) (old link) and created in 1987.[2] A unique feature of SKK is that it converts words one by one (single-word conversion), without analysing syntax or grammar.\n\nInstall the libskk version for the IMF of your choosing (e.g. fcitx5-skk for Fcitx5 or ibus-skk for IBus support).\n\n"
    },
    {
      "title": "KKC (libkkc)",
      "level": 3,
      "content": "From the project's GitHub page:\n\nInstall the libkkc version for the IMF of your choosing (e.g. fcitx5-kkc for Fcitx5 or ibus-kkc for IBus support).\n\n"
    },
    {
      "title": "Google CGI API for Japanese Input",
      "level": 3,
      "content": "Available IM frameworks: uim\n\nGoogle CGI API for Japanese Input (Google-CGIAPI-Jp) is CGI service to provide Japanese conversion on the Internet by Google. It can be used on web browser. Its conversion engine seems to be equivalent to Google Japanese Input, so conversion quality is probably better than Mozc.\n\nYou can use it via uim. Choose \"Google-CGIAPI-Jp\" on uim-im-switcher-gtk/gtk3/qt4 or uim-pref-gtk/gtk3/qt4.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Gentoo:How to read and write in Japanese\n\n"
    }
  ]
}