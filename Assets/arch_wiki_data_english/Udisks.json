{
  "title": "Udisks",
  "url": "https://wiki.archlinux.org/title/Udisks",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- udev\n- Mount\n- Polkit\n- File manager functionality\n\nudisks provides a daemon udisksd, that implements D-Bus interfaces used to query and manipulate storage devices, and a command-line tool udisksctl, used to query and use the daemon.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the udisks2 package.\n\nudisksd(8) is started on-demand by D-Bus and should not be enabled explicitly. It can be controlled through the command-line with udisksctl(1).\n\n"
    },
    {
      "title": "Permissions",
      "level": 3,
      "content": "Actions a user can perform using udisks are restricted with polkit. If the user session is not activated or present (for example, when controlling udisks from a systemd/User service), adjust polkit rules accordingly.\n\nSee https://github.com/coldfix/udiskie/wiki/Permissions for common udisks permissions for the storage group, and [1] for a more restrictive example. If you are using Dolphin, you may see [2].\n\n"
    },
    {
      "title": "Default mount options",
      "level": 3,
      "content": "It is possible to define default mount options in /etc/udisks2/mount_options.conf. Create the file if it does not already exist. The built-in defaults and some examples can be seen in /etc/udisks2/mount_options.conf.example.[3]\n\nThe options can target specific filesystem types. For example, mount btrfs filesystems with zstd compression enabled:\n\n```\n/etc/udisks2/mount_options.conf\n```\n\n```\n[defaults]\nbtrfs_defaults=compress=zstd\n```\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "To manually mount a removable drive, for example /dev/sdc:\n\n```\n$ udisksctl mount -b /dev/sdc1\n```\n\nTo unmount:\n\n```\n$ udisksctl unmount -b /dev/sdc1\n```\n\nSee udisksctl help for more.\n\n"
    },
    {
      "title": "Mount helpers",
      "level": 3,
      "content": "The automatic mounting of devices is easily achieved with udisks wrappers. See also List of applications/Utilities#Mount tools.\n\n- bashmount — A bash script to mount and manage removable media as a regular user.\n\n- udiskie — Automounter with optional notifications, tray icon and support for password protected LUKS devices. See the udiskie wiki for details\n\n- udiskie-dmenu — dmenu interface for udiskie.\n\n- udisksvm — GUI wrapper written in Python3 and using the Qt5 framework. It uses mouse clicks to mount, unmount removable devices or eject a CD/DVD. See the README file for details.\n\n- udevil — Includes devmon.\n\n"
    },
    {
      "title": "udevadm monitor",
      "level": 4,
      "content": "You may use udevadm monitor to monitor block events and mount drives when a new block device is created. Stale mount points are automatically removed by udisksd, such that no special action is required on deletion.\n\n```\n#!/bin/sh\n\npathtoname() {\n    udevadm info -p /sys/\"$1\" | awk -v FS== '/DEVNAME/ {print $2}'\n}\n\nstdbuf -oL -- udevadm monitor --udev -s block | while read -r -- _ _ event devpath _; do\n        if [ \"$event\" = add ]; then\n            devname=$(pathtoname \"$devpath\")\n            udisksctl mount --block-device \"$devname\" --no-user-interaction\n        fi\ndone\n```\n\n"
    },
    {
      "title": "Mount to /media",
      "level": 3,
      "content": "By default, udisks2 mounts removable drives under the ACL controlled directory /run/media/$USER/. If you wish to mount to /media instead, use this rule:\n\n```\n/etc/udev/rules.d/99-udisks2.rules\n```\n\n```\n# UDISKS_FILESYSTEM_SHARED\n# ==1: mount filesystem to a shared directory (/media/VolumeName)\n# ==0: mount filesystem to a private directory (/run/media/$USER/VolumeName)\n# See udisks(8)\nENV{ID_FS_USAGE}==\"filesystem|other|crypto\", ENV{UDISKS_FILESYSTEM_SHARED}=\"1\"\n```\n\nSince /media, unlike /run, is not mounted by default as a tmpfs, you may also wish to create a tmpfiles.d snippet to clean stale mountpoints at every boot:\n\n```\n/etc/tmpfiles.d/media.conf\n```\n\n```\nD /media 0755 root root 0 -\n```\n\n"
    },
    {
      "title": "Mount loop devices",
      "level": 3,
      "content": "To easily mount ISO images, use the following command:\n\n```\n$ udisksctl loop-setup -r -f image.iso\n```\n\nThis will create a read only loop device and show the ISO image ready to mount. Remove the -r flag to be able to write to it. The name of the created loop device is output by the above loop-setup command.\n\nYou can unmount, and remount, the image as long as the specific loop device is in place. When done working with the specific loop device, use\n\n```\n$ udisksctl loop-delete -b /dev/loop0\n```\n\nto delete it. Substitute /dev/loop0 with the name of the specific loop device.\n\nLoop devices are cheap. Therefore, many loop devices can be created in practice without worrying about a denial of service issue. See [4].\n\n"
    },
    {
      "title": "Hide selected partitions",
      "level": 3,
      "content": "If you wish to prevent certain partitions or drives appearing on the desktop, you can create a udev rule, for example /etc/udev/rules.d/10-local.rules:\n\n```\nKERNEL==\"sda1\", ENV{UDISKS_IGNORE}=\"1\"\nKERNEL==\"sda2\", ENV{UDISKS_IGNORE}=\"1\"\n```\n\nshows all partitions with the exception of sda1 and sda2 on your desktop.\n\nBecause block device names can change between reboots, it is also possible to use UUIDs to hide partitions or whole devices. Matching by UUID is only possible after /usr/lib/udev/rules.d/60-persistent-storage.rules has been processed, so make sure to choose a file name that will be ordered after it. For example:\n\n```\n/etc/udev/rules.d/61-hide-partitions.rules\n```\n\n```\nSUBSYSTEM==\"block\", ENV{ID_FS_UUID}==\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\", ENV{UDISKS_IGNORE}=\"1\"\n```\n\nThe above line is also useful to hide multi device btrfs filesystems, as all the devices from a single btrfs filesystem will share the same UUID across the devices but will have different SUB_UUID for each individual device.\n\n"
    },
    {
      "title": "Apply ATA settings",
      "level": 3,
      "content": "At start-up and when a drive is connected, udisksd will apply configuration stored in the file /etc/udisks2/IDENTIFIER.conf where IDENTIFIER is the value of the Drive:Id property for the drive. Currently ATA settings are supported. See udisks(8) for available options. These settings have essentially the same effect as those of hdparm, but they are persistent as long as the udisks daemon is autostarted.\n\nFor example, to set standby timeout to 240 (20 minutes) for a drive, add the following:\n\n```\n/etc/udisks2/DriveId.conf\n```\n\n```\n[ATA]\nStandbyTimeout=240\n```\n\nTo obtain the DriveId for your drive, use udevadm info --query=all --name=sdx | grep ID_SERIAL | sed \"s/_/-/g\"\n\nAlternatively, use a GUI utility to manage the configuration file, such as gnome-disk-utility.\n\n"
    },
    {
      "title": "Hidden devices",
      "level": 3,
      "content": "Udisks2 hides certain devices from the user by default. If this is undesired or otherwise problematic, copy /usr/lib/udev/rules.d/80-udisks2.rules to /etc/udev/rules.d/80-udisks2.rules and remove the following section in the copy:\n\n```\n# ------------------------------------------------------------------------\n# ------------------------------------------------------------------------\n# ------------------------------------------------------------------------\n# Devices which should not be display in the user interface\n[...]\n```\n\n"
    },
    {
      "title": "Broken standby timer",
      "level": 3,
      "content": "The udisks daemon polls S.M.A.R.T. data from drives regularly. Hard drives with a longer standby timeout than the polling interval may fail to enter standby. Drives that are already spun down are usually not affected. There seems no way to disable polling or change the interval as for udisks2 by now. See [5], [6].\n\nHowever, Standby timeout applied by udisks2 seems to be unaffected. To set standby timeout via udisks, see #Apply ATA settings.\n\nOther possible workarounds could be setting the timeout below the polling interval (10 minutes) or forcing a manual spindown using hdparm -y /dev/sdx.\n\n"
    },
    {
      "title": "NTFS mount failing",
      "level": 3,
      "content": "If mounting a ntfs partition fails with the error:\n\n```\nError mounting /dev/sdXY at [...]: wrong fs type, bad option, bad superblock on /dev/sdXY, missing codepage or helper program, or other error\n```\n\nand in the kernel log with journalctl/dmesg ran as root:\n\n```\nntfs: (device sdXY): parse_options(): Unrecognized mount option windows_names.\n```\n\nThe problem is (as of udisks 2.10), the default is using the NTFS-3G driver, and there are 2 solutions for this:\n\n1: Install NTFS-3G, and restart your machine.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\n2: Configure udisks2. By default, udisks2 is not configured on an Arch system, and no defaults are defined for non-native filesystems. The easiest way to do so, is to copy /etc/udisks2/mount.options.conf.example to /etc/udisks2/mount.options.conf and uncomment the following lines:\n\n```\n/etc/udisks2/mount_options.conf\n```\n\n```\n[defaults]\n# 'ntfs' signature, the new 'ntfs3' kernel driver\nntfs:ntfs3_defaults=uid=$UID,gid=$GID\nntfs:ntfs3_allow=uid=$UID,gid=$GID,umask,dmask,fmask,iocharset,discard,nodiscard,sparse,nosparse,hidden,nohidden,sys_immutable,showmeta,noshowmeta,prealloc,noprealloc,hide_dot_files,nohide_dot_files,windows_names,nocase,case\n```\n\nand restart the udisk2 daemon, or restart your machine.\n\n"
    },
    {
      "title": "NTFS file creation failing (filename-dependent)",
      "level": 3,
      "content": "udisks 2.8.2 introduced a breaking change by adding windows_names to NTFS mount options, preventing creation of Win32-incompatible filenames such as nul, screenshot 23-08-21 19:22.jpg. Among other things, this causes Steam Proton to stop initializing. To revert this behavior, use:\n\n```\n/etc/udisks2/mount_options.conf\n```\n\n```\n[defaults]\nntfs:ntfs_defaults=uid=$UID,gid=$GID\n```\n\nBad filenames generally do not cause issues in Windows unless accessed. chkdsk will treat these names as errors and move the renamed files to found.nnn folders under filesystem root.\n\n"
    },
    {
      "title": "Automatically turn off an external HDD at shutdown",
      "level": 3,
      "content": "If an external HDD is not powered off properly at system shutdown, it may be desirable to fix the issue.\n\nEnable udisks2.service.\n\nA service to invoke our script might look like so:\n\n```\n/etc/systemd/system/handle_external_hdds.service\n```\n\n```\n[Unit]\nRequires=udisks2.service\nRequires=graphical.target\nAfter=graphical.target\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStop=/usr/local/bin/handle_external_hdds.sh\n[Install]\nWantedBy=graphical.target\n```\n\nEnable handle_external_hdds.service\n\nDo a systemd daemon-reload to apply the new setting.\n\nReboot or restart graphical.target to check if works.\n\nAn example script to handle an arbitrary amount of partitions on a single disk looks like so:\n\n```\n/usr/local/bin/handle_external_hdds.sh\n```\n\n```\n#!/bin/bash -u\n\ndeclare -a uuids=(uuid_list)\n\n# Only proceed if the drive is present.\nif [[ ! -L \"/dev/disk/by-uuid/${uuids[0]}\" ]]; then\n  exit 0\nfi\n\nfor uuid in \"${uuids[@]}\"; do\n  if findmnt \"/dev/disk/by-uuid/$uuid\"; then\n    umount \"/dev/disk/by-uuid/$uuid\"\n  fi\ndone\n\n# udisksctl powers off proper drive even if its partition is supplied\nudisksctl power-off -b \"/dev/disk/by-uuid/${uuids[0]}\"\n```\n\nuuid_list is a list of space delimited UUIDs corresponding to partitions of the device to check, e.g. \"uuid_1\" \"uuid_2\".\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Gentoo:udisks\n\n"
    }
  ]
}