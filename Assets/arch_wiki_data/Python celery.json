{
  "title": "Python celery",
  "url": "https://wiki.archlinux.org/title/Python_celery",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Quoting authors of the project:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the package python-celery. As with most python-based packages you get a package compatible with Python 3.x.\n\nQuoting Celery documentation: \"Celery requires a solution to send and receive messages\" - one of the options is rabbitmq which also can be installed from official repositories.\n\n"
    },
    {
      "title": "Celery",
      "level": 3,
      "content": "For configuration files, the directory /etc/celery/ needs to be created with a configuration file named app.conf where app is the name of your application. An example configuration file is provided within Celery documentation.\n\nStart/enable the celery@app.service.\n\nTo run celery in a virtualenv, make a copy of celery@.service in /etc/systemd/system so you can customize it, and change the paths of the celery binary to the copy in your virtualenv.\n\n"
    },
    {
      "title": "RabbitMQ",
      "level": 3,
      "content": "RabbitMQ stores its configuration within /etc/rabbitmq/rabbitmq-env.conf\n\n```\n/etc/rabbitmq/rabbitmq-env.conf\n```\n\n```\nNODENAME=rabbit@rakieta\nNODE_IP_ADDRESS=0.0.0.0\nNODE_PORT=5672\n    \nLOG_BASE=/var/log/rabbitmq\nMNESIA_BASE=/var/lib/rabbitmq/mnesia\n```\n\nYou probably want to replace 0.0.0.0 with 127.0.0.1, RabbitMQ does not support Unix sockets.\n\nFor simple configurations, you may also want to add HOME=/var/lib/rabbitmq. Read more about environmental variables within RabbitMQ docs\n\nStart/enable rabbitmq.service.\n\nFollow RabbitMQ documentation and add your user and virtual host:\n\n```\n$ cd /var/lib/rabbitmq\n[rabbitmq]$ rabbitmqctl add_user myuser mypassword\n[rabbitmq]$ rabbitmqctl add_vhost myvhost\n[rabbitmq]$ rabbitmqctl set_user_tags myuser mytag\n[rabbitmq]$ rabbitmqctl set_permissions -p myvhost myuser \".*\" \".*\" \".*\"\n```\n\nRead the RabbitMQ admin guide to understand the above.\n\nIf issuing rabbitmqctl status results in badrpc,nodedown visit this blog post for more information how to fix the problem.\n\n"
    },
    {
      "title": "Security",
      "level": 3,
      "content": "You may want to read a security section from relevant Celery documentation\n\n"
    },
    {
      "title": "Celery application",
      "level": 3,
      "content": "Follow Celery documentation to create a python sample task:\n\n```\ntest.py\n```\n\n```\nfrom celery import Celery\n\napp = Celery('tasks', backend='amqp', broker='amqp://myuser:mypassword@localhost:5672/myvhost')\n\n@app.task\ndef add(x, y):\n    return x + y\n```\n\namqp://myuser:mypassword@localhost:5672/myvhost - Use the same credentials/vhost you have created when configuring RabbitMQ\n\nbackend='amqp' - this parameter is optional since RabbitMQ is the default broker utilised by celery.\n\n"
    },
    {
      "title": "Test run",
      "level": 3,
      "content": "While in the same directory as your test.py you can run:\n\n```\n$ celery -A task worker --loglevel=info\n```\n\nThen from another console (but within same directory) create:\n\n```\ncall.py\n```\n\n```\nfrom test import add\n    add.delay(4, 4)\n```\n\nRun it:\n\n```\n$ python call.py\n```\n\nFirst, the console should log some information suggesting worker was called:\n\n```\nReceived task: task.add[f4aff99a-7477-44db-9f6e-7e0f9342cd4e]\nTask task.add[f4aff99a-7477-44db-9f6e-7e0f9342cd4e] succeeded in 0.0007182330009527504s: 8\n```\n\n"
    },
    {
      "title": "Prepare module for Celery service",
      "level": 3,
      "content": "Procedure below is slightly different than what you will find within Celery documentation\n\nTo make the test_task module as root, create first the /lib/python3.5/site-packages/test_task directory, a blank /lib/python3.5/site-packages/test_task/__init__.py and the following files should be created inside of it:\n\n```\n/lib/python3.5/site-packages/test_task/celery.py\n```\n\n```\nfrom __future__ import absolute_import\n\nfrom celery import Celery\n\napp = Celery('tasks', backend='amqp', broker='amqp://myuser:mypassword@localhost:5672/myvhost')\n\nif __name__ == '__main__':\n    app.start()\n```\n\n```\n/lib/python3.5/site-packages/test_task/test_task.py\n```\n\n```\nfrom __future__ import absolute_import\n\nfrom test_task.celery import app\n\n@app.task\ndef add(x, y):\n    return x + y\n```\n\nAt this point if you issue python in your console you should be able to issue following without any error:\n\n```\n>>> from test_task import celery\n```\n\nIn /etc/celery/celery.conf replace:\n\n```\nCELERY_APP=\"proj\"\n```\n\nwith the following line:\n\n```\nCELERY_APP=\"test_task\"\n```\n\nRestart the celery@celery.service.\n\n"
    },
    {
      "title": "Run tasks periodically",
      "level": 3,
      "content": "Tasks can be ran periodicaly through Celery Beat, basic setup is described within relevant Celery documentation pages. An example:\n\nIf you want to specify CELERYBEAT_SCHEDULE within your celery.py, then you need to add the app.conf prefix to make celery recognise your scheduled tasks. After that you need to add the --beat --schedule=/var/lib/celery/celerybeat-schedule parameters when you start the celery daemon. Further, the /var/lib/celery directory must exist within the celery-relevant environment and be owned by the user that runs celery.\n\n"
    }
  ]
}