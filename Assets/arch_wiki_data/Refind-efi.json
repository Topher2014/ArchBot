{
  "title": "Refind-efi",
  "url": "https://wiki.archlinux.org/title/Refind-efi",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Arch boot process\n- Boot loader\n- Unified Extensible Firmware Interface\n- EFI boot stub\n- booster\n\nrEFInd is a UEFI boot manager capable of launching kernels as EFI boot stubs. It is a fork of the no-longer-maintained rEFIt and fixes many issues with respect to non-Mac UEFI booting. It is designed to be platform-neutral and to simplify booting multiple operating systems.\n\n"
    },
    {
      "title": "Supported file systems",
      "level": 2,
      "content": "rEFInd inherits the support for the file systems from the firmware (i.e. at least FAT12, FAT16 and FAT32). Additionally it loads any UEFI drivers placed in the drivers and drivers_x64 subdirectories of its own installation directory on the ESP. E.g. esp/EFI/refind/drivers_x64/.\n\nrEFInd also ships with a small collection of read-only EFI file system drivers, notably ext4 and Btrfs.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the refind package.\n\n"
    },
    {
      "title": "Installing the rEFInd Boot Manager",
      "level": 2,
      "content": "rEFInd ships with UEFI drivers that implement read-only support for ReiserFS (deprecated), Ext2, Ext4, Btrfs, ISO-9660 and HFS+. Additionally rEFInd can access any file system that UEFI itself can, that includes FAT (as mandated by the UEFI specification), HFS+ on Macs and ISO-9660 on some systems.\n\nTo find additional drivers see The rEFInd Boot Manager: Using EFI Drivers: Finding Additional EFI Drivers.\n\nTo use the rEFInd, you must install it to the EFI system partition either using the refind-install script or by copying the files and setting up the boot entry manually.\n\n"
    },
    {
      "title": "Installation with refind-install script",
      "level": 3,
      "content": "The rEFInd package includes the refind-install script to simplify the process of setting rEFInd as your default EFI boot entry. The script has several options for handling differing setups and UEFI implementations. See refind-install(8) or read the comments in the install script for explanations of the various installation options.\n\nFor many systems it should be sufficient to simply run:\n\n```\n# refind-install\n```\n\nThis will attempt to find and mount your ESP, copy rEFInd files to esp/EFI/refind/, and use efibootmgr to make rEFInd the default EFI boot application.\n\nAlternatively you can install rEFInd to the default/fallback boot path esp/EFI/BOOT/bootx64.efi. This is helpful for bootable USB flash drives or on systems that have issues with the NVRAM changes made by efibootmgr:\n\n```\n# refind-install --usedefault /dev/sdXY\n```\n\nWhere /dev/sdXY is your EFI system partition (the block device, not its mountpoint).\n\nAfter installing rEFInd's files to the ESP, verify that rEFInd has created refind_linux.conf containing kernel parameters in the same directory as your kernel. This configuration file will not be created if you used the --usedefault option, run mkrlconf as root to create it.\n\nBy default, rEFInd will scan all of your drives (that it has drivers for) and add a boot entry for each EFI bootloader it finds, which should include your kernel (since Arch enables EFI boot stubs by default). So you may have a bootable system at this point.\n\n"
    },
    {
      "title": "Secure Boot",
      "level": 4,
      "content": "See Managing Secure Boot for Secure Boot support in rEFInd.\n\nSee Secure Boot#Set up PreLoader to acquire signed PreLoader.efi and HashTool.efi binaries.\n\nExecute refind-install with the option --preloader /path/to/preloader\n\n```\n# refind-install --preloader /usr/share/preloader-signed/PreLoader.efi\n```\n\nNext time you boot with Secure Boot enabled, HashTool will launch and you will need to enroll the hash of rEFInd (loader.efi), rEFInd's drivers (e.g. ext4_x64.efi) and kernel (e.g. vmlinuz-linux).\n\nSee refind-install(8) for more information.\n\nInstall shim-signedAUR. Read Secure Boot#shim, but skip all file copying.\n\nTo use only hashes with shim, execute refind-install with the option --shim /path/to/shim\n\n```\n# refind-install --shim /usr/share/shim-signed/shimx64.efi\n```\n\nNext time you boot with Secure Boot enabled, MokManager will launch and you will need to enroll the hash of rEFInd (grubx64.efi), rEFInd's drivers (e.g. ext4_x64.efi) and kernel (e.g. vmlinuz-linux).\n\nTo sign rEFInd with a Machine Owner Key (MOK), install sbsigntools.\n\nExecute refind-install with the options --shim /path/to/shim and --localkeys:\n\n```\n# refind-install --shim /usr/share/shim-signed/shimx64.efi --localkeys\n```\n\nrefind-install will create the keys for you and sign itself and its drivers. You will need to sign the kernel with the same key, e.g.:\n\n```\n# sbsign --key /etc/refind.d/keys/refind_local.key --cert /etc/refind.d/keys/refind_local.crt --output /boot/vmlinuz-linux /boot/vmlinuz-linux\n```\n\nOnce in MokManager add refind_local.cer to MoKList. refind_local.cer can be found inside a directory called keys in the rEFInd's installation directory, e.g. esp/EFI/refind/keys/refind_local.cer.\n\nSee refind-install(8) for more information.\n\nFollow Secure Boot#Using your own keys to create keys.\n\nCreate directory /etc/refind.d/keys and place Signature Database (db) key and certificates in it. Name the files: refind_local.key (PEM format private key), refind_local.crt (PEM format certificate) and refind_local.cer (DER format certificate).\n\nWhen running install script add option --localkeys, e.g.:\n\n```\n# refind-install --localkeys\n```\n\nrEFInd EFI binaries will be signed with the supplied key and certificate.\n\n"
    },
    {
      "title": "Manual installation",
      "level": 3,
      "content": "If the refind-install script does not work for you, rEFInd can be set up manually.\n\nFirst, copy the executable to the ESP:\n\n```\n# mkdir -p esp/EFI/refind\n# cp /usr/share/refind/refind_x64.efi esp/EFI/refind/\n```\n\nIf you want to install rEFInd to the default/fallback boot path replace esp/EFI/refind/ with esp/EFI/BOOT/ in the following instructions and copy rEFInd EFI executable to esp/EFI/BOOT/bootx64.efi:\n\n```\n# mkdir -p esp/EFI/BOOT\n# cp /usr/share/refind/refind_x64.efi esp/EFI/BOOT/bootx64.efi\n```\n\nThen use efibootmgr to create a boot entry in the UEFI NVRAM, where /dev/sdX and Y are the device and partition number of your EFI system partition. If you are installing rEFInd to the default/fallback boot path esp/EFI/BOOT/bootx64.efi, you can skip this step.\n\n```\n# efibootmgr --create --disk /dev/sdX --part Y --loader /EFI/refind/refind_x64.efi --label \"rEFInd Boot Manager\" --unicode\n```\n\nAt this point, you should be able to reboot into rEFInd, but it may not be able to boot your kernel. If your kernel does not reside on your ESP, rEFInd may need to mount your partitions to find it. If the relevant file systems are not of the types supported by UEFI, additional driver files may be necessary. rEFInd automatically loads all drivers from the subdirectories drivers and drivers_arch (e.g. drivers_x64) in its install directory.\n\n```\n# mkdir esp/EFI/refind/drivers_x64\n# cp /usr/share/refind/drivers_x64/drivername_x64.efi esp/EFI/refind/drivers_x64/\n```\n\nNow rEFInd should have a boot entry for your kernel, but it will not pass the correct kernel parameters. Set up #Passing kernel parameters. You should now be able to boot your kernel using rEFInd. If you are still unable to boot or if you want to tweak rEFInd's settings, many options can be changed with a configuration file:\n\n```\n# cp /usr/share/refind/refind.conf-sample esp/EFI/refind/refind.conf\n```\n\nThe sample configuration file is well commented and self-explanatory.\n\nUnless you have set textonly in the configuration file, you should copy rEFInd's icons to get rid of the ugly placeholders:\n\n```\n# cp -r /usr/share/refind/icons esp/EFI/refind/\n```\n\nYou can try out different fonts by copying them and changing the font setting in refind.conf:\n\n```\n# cp -r /usr/share/refind/fonts esp/EFI/refind/\n```\n\n"
    },
    {
      "title": "Upgrading",
      "level": 3,
      "content": "Pacman updates the rEFInd files in /usr/share/refind/ and will not copy new files to the ESP for you. If refind-install worked for your original installation of rEFInd, you can rerun it to copy the updated files. The new configuration file will be copied as refind.conf-sample so that you can integrate changes into your existing configuration file using a diff tool. If your rEFInd required #Manual installation, you will need to figure out which files to copy yourself.\n\n"
    },
    {
      "title": "Pacman hook",
      "level": 4,
      "content": "You can automate the update process using a pacman hook:\n\n```\n/etc/pacman.d/hooks/refind.hook\n```\n\n```\n[Trigger]\nOperation=Upgrade\nType=Package\nTarget=refind\n\n[Action]\nDescription = Updating rEFInd on ESP\nWhen=PostTransaction\nExec=/usr/bin/refind-install\n```\n\nWhere the Exec= may need to be changed to the correct update command for your setup. If you did #Manual installation, you could create your own update script to call with the hook.\n\n- If you setup rEFInd with Secure Boot, in addition to adding --localkeys, also add the --yes option to the refind-install command. It will prevent the command from failing if shim is not used or if the system was booted with Secure Boot disabled. See refind-install(8) for more information.\n- If the ESP is not mounted to /boot and you rely on automounting to mount it, make sure to preload the vfat module as instructed in EFI system partition#Alternative mount points. Otherwise, if refind is upgraded together with the kernel, the ESP will become inaccessible.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The rEFInd configuration refind.conf is located in the same directory as the rEFInd EFI application (usually esp/EFI/refind or esp/EFI/BOOT). The default configuration file contains extensive comments explaining all its options, see Configuring the Boot Manager for more detailed explanations.\n\nrEFInd detects bootable EFI binaries (Linux kernels, other operating system boot loaders, UEFI boot entries and etc.) at runtime. This means that in most simple situations, rEFInd works without any configuration. In particular, it is likely possible to boot Windows by default.\n\nThis does not mean there is no need to configure; for Linux, probably a user wants to set kernel parameters and initramfs. This can be done in another configuration file, refind_linux.conf. See below for details.\n\n"
    },
    {
      "title": "Passing kernel parameters",
      "level": 3,
      "content": "There are two methods for setting the kernel parameters that rEFInd will pass to the kernel.\n\n"
    },
    {
      "title": "For kernels automatically detected by rEFInd",
      "level": 4,
      "content": "rEFInd has two (or more) configuration files. refind.conf, which lies in the ESP, configures rEFInd itself. On the other hand refind_linux.conf lies in /boot, i.e. the directory that kernel images lie, and it configures how the kernels are booted.\n\nFor automatically detected kernels you can either specify the kernel parameters explicitly in /boot/refind_linux.conf or rely on rEFInd's ability to identify the root partition and kernel parameters. See Methods of Booting Linux: For Those With Foresight or Luck: The Easiest Method for more information.\n\n- rEFInd will automatically choose the Arch Linux icon (os_arch.png) for the boot entry when /etc/os-release is on the same partition as the kernel. If your /boot is a separate partition see Configuring the Boot Manager: Setting OS Icons.\n- rEFInd does not support detecting the distribution of unified kernel images. To have a icon for a unified kernel image, copy /usr/share/refind/icons/os_arch.png to esp/EFI/Linux/ and make sure the file names match. E.g., if you have esp/EFI/Linux/arch-linux.efi, then name the icon—esp/EFI/Linux/arch-linux.png.\n\nFor rEFInd to support the naming scheme of Arch Linux kernels and thus allow matching them with their respective initramfs images, you must uncomment and edit extra_kernel_version_strings option in refind.conf. E.g.:\n\n```\nesp/EFI/refind/refind.conf\n```\n\n```\n...\nextra_kernel_version_strings \"linux-hardened,linux-rt-lts,linux-zen,linux-lts,linux-rt,linux\"\n...\n```\n\n- rEFInd only supports detecting one initramfs image per kernel, meaning it will not detect fallback initramfs nor external microcode initramfs images. If used, they must be specified manually.\n- Without the above extra_kernel_version_strings line, the %v variable in refind_linux.conf will not work for Arch Linux kernels.\n\nIf rEFInd automatically detects your kernel, you can place a refind_linux.conf file containing the kernel parameters in the same directory as your kernel. You can use /usr/share/refind/refind_linux.conf-sample as a starting point. The first uncommented line of refind_linux.conf will be the default parameters for the kernel. Subsequent lines will create entries in a submenu accessible using Insert, F2, Tab, or +.\n\nAlternatively, try running mkrlconf as root. It will attempt to find your kernel in /boot and automatically generate refind_linux.conf. The script will only set up the most basic kernel parameters, so be sure to check the file it created for correctness.\n\nIf you do not specify an initrd= parameter, rEFInd will automatically add it by searching for common RAM disk filenames in the same directory as the kernel. If you need either multiple or non-default initrd= parameters, you must specify them manually in refind_linux.conf. For example:\n\n```\n/boot/refind_linux.conf\n```\n\n```\n\"Boot using default options\"     \"root=PARTUUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw add_efi_memmap\"\n\"Boot using fallback initramfs\"  \"root=PARTUUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw add_efi_memmap initrd=boot\\initramfs-%v-fallback.img\"\n\"Boot to terminal\"               \"root=PARTUUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw add_efi_memmap systemd.unit=multi-user.target\"\n```\n\n- For rEFInd to support Arch Linux kernels, the extra_kernel_version_strings in esp/EFI/refind/refind.conf must be edited as instructed in #For kernels automatically detected by rEFInd.\n- initrd path is relative to the root of the file system on which the kernel resides. This could be initrd=\\boot\\initramfs-%v-fallback.img or, if /boot is a separate partition (e.g. the ESP), initrd=initramfs-%v-fallback.img.\n- Use backslashes (\\) as path separators in the initrd parameter, otherwise the kernel may fail to find the initramfs image(s): EFI stub: ERROR: Failed to open file: /boot/initramfs-linux-fallback.img.\n- If using Booster generated initramfs images, replace initramfs with booster in the initramfs files name and make sure to specify external microcode initramfs images before the main initramfs image. E.g. initrd=boot\\amd-ucode.img initrd=\\boot\\booster-%v.img.\n\nNote: **acpi_osi=\"\"Windows 2015\"\"** \n\n- Quotes are escaped by repetition (i.e. \"\" is the escaped version of \"). For example, to pass the option acpi_osi=\"Windows 2015\" to the first boot entry of the above refind_linux.conf: \"Boot using default options\" \"... acpi_osi=\"\"Windows 2015\"\" \"\n- rEFInd replaces %v in refind_linux.conf with the kernel's version (by extracting it from the file name).\n\n```\n\"Boot using default options\"     \"... acpi_osi=\"\"Windows 2015\"\" \"\n```\n\nIf you merely install rEFInd onto the ESP and launch it without any further ado (say via UEFI shell or KeyTool, or directly from firmware) you still get a menu to boot from via autodetection, with no configuration required whatsoever.\n\nThis works because rEFInd has a fallback mechanism that can:\n\n- Identify the root partition (for root= parameter ) via the Discoverable Partitions Specification or /etc/fstab.\n- Detect kernel options (ro or rw) from GPT partition attributes (using attribute 60 \"read-only\") or /etc/fstab.\n\n"
    },
    {
      "title": "For manual boot stanzas",
      "level": 4,
      "content": "If your kernel is not autodetected, or if you simply want more control over the options for a menu entry, you can manually create boot entries using stanzas in refind.conf. Ensure that scanfor includes manual or these entries will not appear in rEFInd's menu. Kernel parameters are set with the options keyword. rEFInd will append the initrd= parameter using the file specified by the initrd keyword in the stanza.\n\nManual boot stanzas are explained in Creating Manual Boot Stanzas.\n\n```\nesp/EFI/refind/refind.conf\n```\n\n```\n...\n\nmenuentry \"Arch Linux\" {\n\ticon     /EFI/refind/icons/os_arch.png\n\tvolume   \"Arch Linux\"\n\tloader   /boot/vmlinuz-linux\n\tinitrd   /boot/initramfs-linux.img\n\toptions  \"root=PARTUUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw add_efi_memmap\"\n\tsubmenuentry \"Boot using fallback initramfs\" {\n\t\tinitrd /boot/initramfs-linux-fallback.img\n\t}\n\tsubmenuentry \"Boot to terminal\" {\n\t\tadd_options \"systemd.unit=multi-user.target\"\n\t}\n}\n```\n\nIt is likely that you will need to change volume to match either a filesystem's LABEL, a PARTLABEL, or a PARTUUID of the partition where the kernel image resides. See Persistent block device naming#by-label for examples of assigning a volume label. If volume is not specified it defaults to volume from which rEFInd was launched (typically EFI system partition).\n\n- loader and initrd paths are relative to the root of volume. If /boot is a separate partition (e.g. the ESP), the loader and initrd paths would be /vmlinuz-linux and /initramfs-linux.img, respectively.\n- Use backslashes (\\) as path separators in all quoted initrd parameters, otherwise the kernel may fail to find the initramfs image(s): EFI stub: ERROR: Failed to open file: /boot/initramfs-linux.img.\n- If using Booster generated initramfs images, replace initramfs with booster in the initramfs files name. E.g. initrd /boot/booster-linux.img.\n- rEFInd 0.14.2 incorrectly populates LABEL with PARTLABEL on some devices, which may cause matching failure for volume and result in falling back to the default boot volume. A workaround is to load any driver or press Esc after entering main menu to re-scan the volumes. See [1].\n\nNote: **acpi_osi=\"\"Windows 2015\"\"** \n\n```\noptions  \"... acpi_osi=\"\"Windows 2015\"\" \"\n```\n\n"
    },
    {
      "title": "Installation alongside an existing UEFI Windows installation",
      "level": 2,
      "content": "rEFInd is compatible with the EFI system partition created by a UEFI Windows installation, so there is no need to create or format another FAT32 partition when installing Arch alongside Windows. Simply mount the existing ESP and install rEFInd as usual. By default, rEFInd's autodetection feature should recognize any existing Windows/recovery bootloaders.\n\n"
    },
    {
      "title": "Tools",
      "level": 2,
      "content": "Note: **This article or section is a candidate for merging with Unified Extensible Firmware Interface.** This article or section is a candidate for merging with Unified Extensible Firmware Interface.\n\nThis article or section is a candidate for merging with Unified Extensible Firmware Interface.\n\nrEFInd supports running various 3rd-party tools. Tools need to be installed separately. Edit showtools in refind.conf to choose which ones to show.\n\n```\nesp/EFI/refind/refind.conf\n```\n\n```\n...\nshowtools shell, memtest, mok_tool, gdisk, fwupdate ...\n...\n```\n\n"
    },
    {
      "title": "UEFI shell",
      "level": 3,
      "content": "See Unified Extensible Firmware Interface#UEFI Shell.\n\nCopy shellx64.efi to the root of the EFI system partition.\n\n"
    },
    {
      "title": "Memtest86+",
      "level": 3,
      "content": "Install memtest86+-efi and copy it to esp/EFI/tools/.\n\n```\n# cp /boot/memtest86+/memtest.efi esp/EFI/tools/memtest86.efi\n```\n\n"
    },
    {
      "title": "Key management tools",
      "level": 3,
      "content": "rEFInd can detect Secure Boot key management tools if they are placed in rEFInd's directory on ESP, esp/ or esp/EFI/tools/.\n\n"
    },
    {
      "title": "HashTool",
      "level": 4,
      "content": "Follow #Using PreLoader and HashTool.efi will be placed in rEFInd's directory.\n\n"
    },
    {
      "title": "MokManager",
      "level": 4,
      "content": "Follow #Using shim and MokManager will be placed in rEFInd's directory.\n\n"
    },
    {
      "title": "KeyTool",
      "level": 4,
      "content": "Install efitools.\n\nPlace KeyTool EFI binary in esp/ or esp/EFI/tools/ with the name KeyTool.efi or KeyTool-signed.efi.\n\nSee Secure Boot#Using KeyTool for instructions on signing KeyTool.efi.\n\n"
    },
    {
      "title": "GPT fdisk (gdisk)",
      "level": 3,
      "content": "Download the gdisk EFI application and copy gdisk_x64.efi to esp/EFI/tools/.\n\n"
    },
    {
      "title": "fwupd",
      "level": 3,
      "content": "Install fwupd-efi and setup fwupd.\n\nCopy the fwupdx64.efi binary and firmware file to esp/EFI/tools/:\n\n```\n# cp /usr/lib/fwupd/efi/fwupdx64.efi esp/EFI/tools/\n```\n\n"
    },
    {
      "title": "Poweroff or reboot",
      "level": 3,
      "content": "rEFInd reportedly have poweroff and reboot menu entries built in. Since this list of tools is the most extensive of its kind in this wiki, users of UEFI shell, or other UEFI boot managers, such as systemd-boot, might be interested in powerofforreboot.efiAUR.\n\n"
    },
    {
      "title": "Customization",
      "level": 2,
      "content": "rEFInd supports extensive customization, allowing you to modify icons, backgrounds, and fonts on the boot screen.\n\n"
    },
    {
      "title": "Manual customization",
      "level": 3,
      "content": "To customize rEFInd, you need to edit the refind.conf configuration file. In the following example, all assets will be stored in esp/EFI/refind/assets.\n\nTo set a custom background image (banner), use the wallpaper directive in refind.conf:\n\n```\nbanner assets/banner.png\n```\n\nTo set a custom set of icons, use the icons_dir directive in refind.conf and point it to the folder containing your icons:\n\n```\nicons_dir assets/icons\n```\n\n"
    },
    {
      "title": "Installing external themes",
      "level": 3,
      "content": "Installing external themes is straightforward. First, create a themes folder in your rEFInd directory:\n\n```\n# mkdir esp/EFI/refind/themes\n```\n\nClone the theme (if it is hosted on GitHub, for example):\n\n```\n# git clone url-to-theme esp/EFI/refind/themes/theme-name\n```\n\nOr, copy the theme manually:\n\n```\n# cp -r path-to-theme esp/EFI/refind/themes/theme-name\n```\n\nIn refind.conf, include the theme's configuration file:\n\n```\ninclude themes/theme-name/theme-name.conf\n```\n\n"
    },
    {
      "title": "Using drivers in UEFI shell",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with Unified Extensible Firmware Interface#UEFI drivers.** This article or section is a candidate for merging with Unified Extensible Firmware Interface#UEFI drivers.\n\nThis article or section is a candidate for merging with Unified Extensible Firmware Interface#UEFI drivers.\n\nTo use rEFInd's drivers in UEFI shell load them using command load and refresh mapped drives with map -r.\n\n```\nShell> load FS0:\\EFI\\refind\\drivers\\ext4_x64.efi\nShell> map -r\n```\n\nNow you can access your file system from UEFI shell.\n\n"
    },
    {
      "title": "Setting efifb resolution",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nIf the resolution in refind.conf is set to an incorrect value, on all systems except Apple Macs rEFInd will display a list of supported resolutions. For Apple Macs it will silently use the default resolution.\n\nTo determine framebuffer resolutions supported by efifb, copy /usr/lib/gnuefi/apps/modelist.efi from gnu-efi to the root of ESP. Enter the UEFI shell and run modelist.efi.\n\n```\nShell> FS0:\\modelist.efi\n```\n\n```\nGOP reports MaxMode 3\n 0: 640x480 BGRR pitch 640\n*1: 800x600 BGRR pitch 800\n 2: 1024x768 BGRR pitch 1024\n```\n\nSet one in refind.conf. Reboot and check if settings has been applied by running dmesg | grep efifb as root.\n\n"
    },
    {
      "title": "Auto detection",
      "level": 4,
      "content": "To allow kernel auto detection on a Btrfs subvolume uncomment and edit also_scan_dirs in refind.conf.\n\n```\nesp/EFI/refind/refind.conf\n```\n\n```\n...\nalso_scan_dirs +,subvolume/boot\n...\n```\n\nNext add subvol=subvolume to rootflags in refind_linux.conf and then prepend subvolume to the initrd path.\n\n```\n/boot/refind_linux.conf\n```\n\n```\n\"Boot using standard options\"  \"root=PARTUUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw rootflags=subvol=subvolume initrd=subvolume\\boot\\initramfs-%v.img\"\n```\n\n"
    },
    {
      "title": "Manual boot stanza",
      "level": 4,
      "content": "If booting a btrfs subvolume as root, prepend the path to the subvolume to the loader and initrd paths, and amend the options line with rootflags=subvol=root_subvolume. In the example below, root has been mounted as a btrfs subvolume called 'ROOT' (e.g. mount -o subvol=ROOT /dev/sdxY /mnt):\n\n```\nesp/EFI/refind/refind.conf\n```\n\n```\n...\nmenuentry \"Arch Linux\" {\n        icon     /EFI/refind/icons/os_arch.png\n        volume   \"[bootdevice]\"\n        loader   /ROOT/boot/vmlinuz-linux\n        initrd   /ROOT/boot/initramfs-linux.img\n        options  \"root=PARTUUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX rw rootflags=subvol=ROOT\"\n...\n}\n```\n\nA failure to do so will otherwise result in the following error message: ERROR: Root device mounted successfully, but /sbin/init does not exist.\n\n"
    },
    {
      "title": "LoaderDevicePartUUID",
      "level": 3,
      "content": "Since version 0.13.1, rEFInd supports setting the UEFI variable LoaderDevicePartUUID. Enabling this allows systemd-gpt-auto-generator(8) to automount the EFI system partition without needing to specify it in /etc/fstab. See systemd#GPT partition automounting.\n\nFor rEFInd to set LoaderDevicePartUUID, edit refind.conf and uncomment write_systemd_vars true:\n\n```\nesp/EFI/refind/refind.conf\n```\n\n```\n...\nwrite_systemd_vars true\n...\n```\n\nYou can verify if it is set by checking its value with cat /sys/firmware/efi/efivars/LoaderDevicePartUUID-4a67b082-0a4c-41cf-b6c7-440b29bb8c4f or by looking at the state of \"Boot loader sets ESP information\" in bootctl output.\n\n"
    },
    {
      "title": "ISO images",
      "level": 3,
      "content": "rEFInd does not support booting ISO files since it lacks a loopback driver, but it can boot a ISO image that has been directly written to a partition. This requires the iso9660_x64.efi driver.\n\n"
    },
    {
      "title": "Apple Macs",
      "level": 3,
      "content": "Use bless from within macOS to set rEFInd as the default boot entry:\n\n```\n# bless --setBoot --folder esp/EFI/refind --file esp/EFI/refind/refind_x64.efi\n```\n\n"
    },
    {
      "title": "Blank rEFInd menu screen",
      "level": 3,
      "content": "If your drivers_x64 folder contains multiple file system drivers (see #Installing the rEFInd Boot Manager for clarification), this can lead to an improper functioning of rEFInd through a file system driver bug, whereby only a blank screen and with the rEFInd logo is shown (for custom themes, this would be the set background image). To fix this, simply remove all drivers except the one for the file system on which the kernel resides.\n\nAnother potential blank screen cause occurs when dual booting with Windows, where rEFInd is unsuccessful in auto-scanning the EFI system partitions on other disks. To remedy this, use blkid to identify Windows partitions, and add the PARTUUID of each Windows partition as a comma-separated entry to the variable dont_scan_volumes in refind.conf. For example:\n\n```\n# blkid\n```\n\n```\n/dev/nvme0n1p1: LABEL=\"SYSTEM\" UUID=\"4CE7-C215\" BLOCK_SIZE=\"512\" TYPE=\"vfat\" PARTLABEL=\"EFI system partition\" PARTUUID=\"13aa9955-1234-5678-9098-006c334b5088\"\n/dev/nvme0n1p5: LABEL=\"Windows RE Tools\" BLOCK_SIZE=\"512\" UUID=\"08C4E6C5C4E6B45A\" TYPE=\"ntfs\" PARTLABEL=\"Basic data partition\" PARTUUID=\"4eced110-0987-6543-2123-b0ab8576869b\"\n```\n\n```\nesp/EFI/refind/refind.conf\n```\n\n```\n...\ndont_scan_volumes 13aa9955-1234-5678-9098-006c334b5088,4eced110-0987-6543-2123-b0ab8576869b\n...\n```\n\n"
    },
    {
      "title": "Not using the distribution logo",
      "level": 3,
      "content": "If you see Tux instead of the Arch Logo, then you might be affected by this issue (your root partition is of type Linux x86-64 root (/) instead of Linux filesystem).\n\nYou can fix this using fdisk#Change partition type.\n\nAdditionally, if your root partition's label is simply \"Linux\" or if it contains the word \"linux,\" Tux may be displayed. To specify the name of your distribution, consider renaming the partition label to reflect your distribution's name.\n\nYou can fix this using a file system label.\n\nAnother way to get the Arch Logo instead of Tux, is to copy the Arch Logo image file next to your kernel (e.g. vmlinuz-linux) and give the image file the same name as your kernel.\n\n```\n# cp /usr/share/refind/icons/os_arch.png /boot/vmlinuz-linux.png\n```\n\n"
    },
    {
      "title": "Error: Not Found while loading vmlinuz-linux",
      "level": 3,
      "content": "If you add a menuentry and set the volume token correctly but still received the \"Error: Not Found while loading vmlinuz-linux\" message, you may need to check if driver for the file system on which kernel resides is correctly installed. Remember unsupported filesystem will not be detected, even if they are in the configuration file.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- The rEFInd Boot Manager by Roderick W. Smith.\n- Wikipedia:rEFInd\n- /usr/share/refind/docs/README.txt\n- rEFInd discussion forum on Sourceforge\n\n"
    }
  ]
}