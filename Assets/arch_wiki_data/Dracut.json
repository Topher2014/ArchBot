{
  "title": "Dracut",
  "url": "https://wiki.archlinux.org/title/Dracut",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- booster\n- mkinitcpio\n- Unified kernel image\n\ndracut creates an initial image used by the kernel for preloading the block device modules (such as IDE, SCSI or RAID) which are needed to access the root filesystem. Upon installing linux, you can choose between mkinitcpio and dracut. dracut is used by Fedora, RHEL, Gentoo, and Debian, among others. Arch uses mkinitcpio by default.\n\nYou can read the full project documentation for dracut in the documentation.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the dracut package, or dracut-gitAUR for the latest development version.\n\nNote: **after you test it** \n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "dracut is easy to use and typically does not require user configuration, even when using non-standard setups, like LVM on LUKS.\n\nTo generate an initramfs for the running kernel:\n\n```\n# dracut --hostonly --no-hostonly-cmdline --add-confdir no-network /boot/initramfs-linux.img\n```\n\nTo enable hostonly mode permanently (so that you do not need to include it in the command line) you can add the following to your dracut configuration:\n\n```\n/etc/dracut.conf.d/hostonly.conf\n```\n\n```\nhostonly=\"yes\"\n```\n\n```\n# dracut --regenerate-all\n```\n\nTo generate a fallback initramfs run:\n\n```\n# dracut /boot/initramfs-linux-fallback.img\n```\n\n/boot/initramfs-linux.img refers to the output image file. If you are using an other kernel, consider changing the file name. For example, for the linux-lts kernel, the output file should be named /boot/initramfs-linux-lts.img. However, you can name these files whatever you wish as long as your boot loader configuration uses the same file names.\n\n"
    },
    {
      "title": "Additional options",
      "level": 3,
      "content": "The --force flag overwrites the image file if it is already present.\n\nThe --kver option specifies which kernel to use. The argument to this option must match the name of a directory present in /usr/lib/modules.\n\nMore flags can be found with dracut(8).\n\n"
    },
    {
      "title": "Advanced configuration",
      "level": 2,
      "content": "It is important to note that there are two distinct approaches how the various tasks during initial ramdisk phase are performed:\n\nThe concrete variant is determined by the absence or presence of the systemd dracut module. See #dracut modules for more details.\n\ndracut can be configured by directly passing arguments on the command line (see dracut(8) ยง OPTIONS). If you wish to always execute dracut with a certain set of flags, you can save a specified configuration in a .conf file in /etc/dracut.conf.d/. For example:\n\n```\n/etc/dracut.conf.d/myflags.conf\n```\n\n```\nhostonly=\"yes\"\ncompress=\"lz4\"\nadd_drivers+=\" i915 \"\nomit_dracutmodules+=\" systemd network \"\n```\n\nYou can see more configuration options with dracut.conf(5). Fuller descriptions of each option can be found with dracut(8). We will describe a few common options in what follows.\n\n"
    },
    {
      "title": "dracut modules",
      "level": 3,
      "content": "dracut uses a modular approach to build the initramfs (see dracut.modules(7)). All of dracut 's builtin modules are located in /lib/dracut/modules.d and can be listed with dracut --list-modules. Extra modules can be provided by external packages e.g. dracut-sshd-gitAUR. dracut 's built-in modules unfortunately lack documentation, although their names can be self-explanatory.\n\nSome of the modules are active/inactive by default, and can be activated/deactivated with --add/--omit command line argument or with the add_dracutmodules+=\"\"/omit_dracutmodules+=\"\" persistent config entry lines.\n\n```\n/etc/dracut.conf.d/myflags.conf\n```\n\n```\n# ...\nadd_dracutmodules+=\" dracut modules to activate \"\nomit_dracutmodules+=\" dracut modules to deactivate \"\n# ...\n```\n\nThe following table lists dracut modules, required packages (dracut 's optional dependencies) and module descriptions.\n\nMost dracut modules are dependent on other dracut modules. As an example the bluetooth dracut module depends on the dbus dracut module. The table below only lists direct dracut module dependencies, i.e. the required packages for a given module listed in the module-setup.sh for the given dracut module.\n\nFor additional dracut module documentation, see the upstream dracut wiki.\n\nTable content:\ndracut module | Required packages | Description\nbluetooth | bluez | Bluetooth (keyboard)\nbtrfs | btrfs-progs | Scans for Btrfs on block devices\nbusybox | busybox | Allows use of BusyBox (on your own risk)\ncrypt | cryptsetup | Support for encrypted Dm-crypt file systems\ndash | dash | Allows use of Dash (on your own risk)\ndmraid | dmraid, multipath-tools | dmraid dracut module support\nmultipath | multipath-tools | Multipath dracut module support\ndmsquash-live-ntfs | fuse3, ntfs-3g | Live on NTFS\nlvm | lvm2 | Support for LVM\nmdraid | mdadm | Support MD devices, also known as software RAID devices\nmemstrack | memstrackAUR | Support memstrack\nnvdimm | ndctl | NVDIMM support\nplymouth | plymouth | Plymouth boot splash\nrescue |  | Includes various utilities for rescue mode (such as ping, ssh, vi, fsck.*)\nresume |  | Allows initramfs to resume from low-power state\nrngd |  | Starts random generator service on early boot\nsyslog | rsyslogAUR | Enable logging with Rsyslog\nsquash | squashfs-tools | Support for building a squashed initramfs\ntpm2-tss | tpm2-tools | Trusted Platform Module\nbase |  | Base module with required utilities\nbash | bash | Bash is the preferred interpreter, if there are more available\nbiosdevname | biosdevnameAUR | Enables BIOS network device renaming\ncaps |  | Supports dropping capabilities before init\nconvertfs |  | Merges / into /usr on next boot\ncrypt-gpg | gnupg | Adds support GPG for crypto operations and SmartCards (may requires GPG keys)\ncrypt-loop |  | Adds support for encrypted loopback devices (symmetric key)\ndbus |  | Virtual package for dbus-broker or dbus-daemon\ndbus-broker | dbus-broker | Use dbus-broker as dbus service provider\ndbus-daemon | dbus | Use dbus as dbus service provider\ndebug |  | Enable debug features\ndm |  | Adds support of device-mapper\ndmsquash-live-autooverlay |  | Creates a partition for overlayfs usage in the free space on the root filesystem's parent block device\ndracut-systemd |  | Base systemd dracut module\ndrm |  | Includes kernel modules that provides DRM support\necryptfs |  | Adds ecryptfs filesystems support\nfido2 |  | Allows to unlock an encrypted filesystem using a FIDO2 security token\nfips |  | Enforces FIPS security standard regulations\nfs-lib |  | Library for filesystem tools (including fsck.* and mount)\nfstab-sys |  | Arranges for arbitrary partitions to be mounted before rootfs\ni18n |  | Includes keymaps, console fonts, etc.\nimg-lib |  | Library to includes various tools for decompressing images\nintegrity |  | Adds support for Extended Verification Module\nkernel-modules |  | Kernel modules for root filesystems and other boot-time devices\nkernel-modules-extra |  | Extra out-of-tree kernel modules\nlunmask |  | Masks LUN devices to select only ones which required to boot\nlvmmerge |  | Merges lvm snapshots\nlvmthinpool-monitor |  | Monitor LVM thinpool service\nmasterkey |  | Masterkey that can be used to decrypt other keys and keyutils\nmodsign |  | Adds signing kernel modules support\noverlayfs |  | Kernel module for overlayfs\npcsc |  | Adds support for PCSC Smart cards\npkcs11 |  | Includes PKCS#11 libraries\npollcdrom |  | Enables CD-ROM polling\nqemu |  | Includes kernel modules for QEMU environment\nrootfs-block |  | Arranges for the block device containing the rootfs to be mounted\nsecurityfs |  | Arranges for the securityfs to be mounted early\nselinux |  | Arranges for the selinux policy to be loaded\nshutdown |  | Sets up hooks to run on shutdown\nsystemd |  | Adds systemd as early init initialization system\nterminfo |  | Includes a terminfo file\nudev-rules |  | Includes udev and some basic rules\nuefi-lib |  | Library to include UEFI tools\nusrmount |  | Mounts /usr\nvirtfs |  | Adds virtual filesystems (9p) support\nvirtiofs |  | Adds virtiofs filesystems support\nwarpclock |  | Sets kernel's timezone and reset the system time if adjtime is set to LOCAL\nwatchdog |  | Includes watchdog devices management; works only if systemd not in use\nwatchdog-modules |  | Includes watchdog kernel modules to be loaded early in booting\n\nDracut modules that are meant to be used when IP address is expected to be available during early boot.\n\nTable content:\nnetworking dracut module | Required packages | Description\ncifs | cifs-utils | Support for Samba\nnbd | nbd | Support network block devices\nnetwork-manager | networkmanager | NetworkManager support\nnfs | nfs-utils | NFS support - NFSv3 and NFSv4\nnvmf | nvme-cli, jq | NVMe over Fibre Channel and NVMe-over Fabrics support\niscsi | open-iscsi | ISCSI support\nssh-client | openssh | Installs ssh and scp along with config files and specified keys\nnetwork-legacy | dhclient, iproute2, iputils | Legacy network support\nconnman | connman | Support for ConnMan networking\nkernel-network-modules |  | Includes and loads kernel modules for network devices\nlivenet |  | Fetch live updates for SquashFS images\nnetwork |  | Virtual module for network service providers\nurl-lib |  | Library to includes curl and SSL certs\nqemu-net |  | Includes network kernel modules for QEMU environment\nsystemd-network-management |  | Adds network management for systemd. Includes systemd-networkd, systemd-resolved and some othr networking related dracut modules\nsystemd-networkd |  | Systemd-networkd\nnet-lib |  | Networking library with ip\n\n"
    },
    {
      "title": "TPM2",
      "level": 4,
      "content": "To make use of systemd 's unlocking of luks2 encrypted volumes using TPM2 through systemd-cryptenroll, install tpm2-tools package and enable the tpm2-tss dracut module.\n\n"
    },
    {
      "title": "Early kernel module loading",
      "level": 3,
      "content": "Dracut enables early loading (at the initramfs stage, via modprobe) through its --force_drivers command or force_drivers+=\"\" config entry line. For example:\n\n```\n/etc/dracut.conf.d/myflags.conf\n```\n\n```\n# ...\nforce_drivers+=\" nvidia nvidia_modeset nvidia_uvm nvidia_drm \"\n# ...\n```\n\n"
    },
    {
      "title": "Kernel command line options",
      "level": 3,
      "content": "Kernel command line options can be placed in a .conf file in /etc/dracut.conf.d/, and set via the kernel_cmdline= flag. Dracut will automatically source this file and create a 01-default.conf file and place it inside the initramfs directory /etc/cmdline.d/. For example, your kernel command line options file could look like:\n\n```\n/etc/dracut.conf.d/cmdline.conf\n```\n\n```\nkernel_cmdline=\"rd.luks.uuid=luks-f6c738f3-ee64-4633-b6b0-eceddb1bb010 rd.lvm.lv=arch/root rd.lvm.lv=arch/swap  root=/dev/arch/root rootfstype=ext4 rootflags=rw,relatime\"\n```\n\n"
    },
    {
      "title": "Miscellaneous notes",
      "level": 4,
      "content": "It is not necessary to specify the root block device for dracut. From dracut.cmdline(7):\n\nHowever, it may be useful to set some parameters early, and you can enable additional features like prompting for additional command line parameters. See dracut.cmdline(7) for all options. Here are some example configuration options:\n\n- Resume from a swap partition: resume=UUID=80895b78-7312-45bc-afe5-58eb4b579422\n- Prompt for additional kernel command line parameters: rd.cmdline=ask\n- Print informational output even if quiet is set: rd.info\n\n"
    },
    {
      "title": "Unified kernel image",
      "level": 3,
      "content": "dracut can produce unified kernel images with the --uefi command line option or with the uefi=\"yes\" configuration option.\n\n"
    },
    {
      "title": "View information about generated image",
      "level": 3,
      "content": "You can view information about a generated initramfs image, which you may wish to view in a pager:\n\n```\n# lsinitrd /path/to/initramfs_or_uefi_image | less\n```\n\nThis command will list the arguments passed to dracut when the image was created, the list of included dracut modules, and the list of all included files.\n\n"
    },
    {
      "title": "Change compression program",
      "level": 3,
      "content": "To reduce the amount of time spent compressing the final image, you may change the compression program used.\n\nSimply add any one of the following lines (not multiple) to your dracut configuration:\n\n```\ncompress=\"cat\"\ncompress=\"gzip\"\ncompress=\"bzip2\"\ncompress=\"lzma\"\ncompress=\"xz\"\ncompress=\"lzo\"\ncompress=\"lz4\"\ncompress=\"zstd\"\n```\n\ngzip is the default compression program used. compress=\"cat\" will make the initramfs with no compression.\n\nYou can also use a non-officially-supported compression program:\n\n```\ncompress=\"program\"\n```\n\n"
    },
    {
      "title": "Performance considerations",
      "level": 3,
      "content": "Some considerations to optimize the boot and initramfs creation performance are:\n\n- Understand and configure the fastest compression. If the kernel modules are already compressed, perhaps there is no need to re-compress the initramfs on creation.\n\n- Understand the impact if including systemd into your initramfs. If it slows things down, omit it. If it makes things faster, include it.\n\n- Consider using dracut-cpio when using a copy-on-write filesystem. See the --enhanced-cpio option for applicability.\n\n- Minimize the number of kernel modules and dracut modules included in initramfs. As an example: If nfs-utils is installed (but not required to boot), then you need to explicitly omit the nfs dracut module, otherwise network boot will be enabled in the generated initramfs in default configuration - see https://github.com/dracut-ng/dracut-ng/pull/297.\n\n- Consider using busybox instead of bash.\n\n- Consider hostonly.\n\n"
    },
    {
      "title": "Generate a new initramfs on kernel upgrade",
      "level": 3,
      "content": "It is possible to automatically generate new initramfs images upon each kernel upgrade. The instructions here are for the default linux kernel, but it should be easy to add extra hooks for other kernels.\n\n- The dracut-ukifyAUR package is the modern way to generate a unified kernel image using systemd-ukify. Unlike the methods below, you can sign your whole kernel image including the initramfs. Using the uefi_secureboot_cert and uefi_secureboot_key options in your dracut config (dracut.conf(5)).\n- The dracut-hookAUR package includes hooks and scripts similar to the below. Alternatively, you may want dracut-uefi-hookAUR or dracut-hook-uefiAUR instead, if you want an initramfs image that is an EFI executable (i.e. esp/EFI/Linux/linux-kernel-machine_id-build_id.efi). EFI binaries in this directory are automatically detected by systemd-boot and therefore do not need an entry in /boot/loader/loader.conf.\n\nAs the command to figure out the kernel version is somewhat complex, it will not work by itself in a pacman hook. So create a script anywhere on your system. For this example it will be created in /usr/local/bin/.\n\nThe script will also copy the new vmlinuz kernel file to /boot/, since the kernel packages do not place files in /boot/ anymore.[1]\n\n```\n/usr/local/bin/dracut-install.sh\n```\n\n```\n#!/usr/bin/env bash\n\nargs=('--force' '--no-hostonly-cmdline')\n\nwhile read -r line; do\n\tif [[ \"$line\" == 'usr/lib/modules/'+([^/])'/pkgbase' ]]; then\n\t\tread -r pkgbase < \"/${line}\"\n\t\tkver=\"${line#'usr/lib/modules/'}\"\n\t\tkver=\"${kver%'/pkgbase'}\"\n\n\t\tinstall -Dm0644 \"/${line%'/pkgbase'}/vmlinuz\" \"/boot/vmlinuz-${pkgbase}\"\n\t\tdracut \"${args[@]}\" --hostonly \"/boot/initramfs-${pkgbase}.img\" --kver \"$kver\"\n\t\tdracut \"${args[@]}\" --add-confdir rescue  \"/boot/initramfs-${pkgbase}-fallback.img\" --kver \"$kver\"\n\tfi\ndone\n```\n\n```\n/usr/local/bin/dracut-remove.sh\n```\n\n```\n#!/usr/bin/env bash\n\nwhile read -r line; do\n\tif [[ \"$line\" == 'usr/lib/modules/'+([^/])'/pkgbase' ]]; then\n\t\tread -r pkgbase < \"/${line}\"\n\t\trm -f \"/boot/vmlinuz-${pkgbase}\" \"/boot/initramfs-${pkgbase}.img\" \"/boot/initramfs-${pkgbase}-fallback.img\"\n\tfi\ndone\n```\n\nYou need to make the scripts executable. If you wish to add or remove flags, you should add them to your dracut configuration.\n\nThe next step is creating pacman hooks:\n\n```\n/etc/pacman.d/hooks/90-dracut-install.hook\n```\n\n```\n[Trigger]\nType = Path\nOperation = Install\nOperation = Upgrade\nTarget = usr/lib/modules/*/pkgbase\n\n[Action]\nDescription = Updating linux initcpios (with dracut!)...\nWhen = PostTransaction\nExec = /usr/local/bin/dracut-install.sh\nDepends = dracut\nNeedsTargets\n```\n\n```\n/etc/pacman.d/hooks/60-dracut-remove.hook\n```\n\n```\n[Trigger]\nType = Path\nOperation = Remove\nTarget = usr/lib/modules/*/pkgbase\n\n[Action]\nDescription = Removing linux initcpios...\nWhen = PreTransaction\nExec = /usr/local/bin/dracut-remove.sh\nNeedsTargets\n```\n\nYou should stop mkinitcpio from creating and removing initramfs images as well, either by removing mkinitcpio or with the following commands:\n\n```\n# ln -sf /dev/null /etc/pacman.d/hooks/90-mkinitcpio-install.hook\n# ln -sf /dev/null /etc/pacman.d/hooks/60-mkinitcpio-remove.hook\n```\n\n"
    },
    {
      "title": "Bluetooth keyboard support",
      "level": 3,
      "content": "Dracut will enable the bluetooth module automatically when a bluetooth keyboard is detected. However it is required that dracut is in hostonly mode for this. This seems to not be the default.\n\n"
    },
    {
      "title": "Limine boot loader support",
      "level": 3,
      "content": "The limine-dracut-supportAUR package utilizes limine-entry-tool with dracut and pacman hooks to automate the installation and removal of kernels and boot entries in the Limine boot loader. See Limine#Boot entry automation for more information.\n\n"
    },
    {
      "title": "Hibernation",
      "level": 3,
      "content": "If resuming from hibernation does not work, you may need to configure dracut to include the resume module. You will need to add a configuration file:\n\n```\n/etc/dracut.conf.d/resume-from-hibernate.conf\n```\n\n```\nadd_dracutmodules+=\" resume \"\n```\n\nIf applicable to your system, you may also want to see instructions to resume from an encrypted swap partition including the dracut specific instructions.\n\n"
    },
    {
      "title": "LVM / software RAID / LUKS",
      "level": 3,
      "content": "If the kernel has issues auto discovering and mounting LVM / software RAID / LUKS blocks. You can retry generating an initramfs with the following kernel command line options:\n\n```\nrd.auto rd.lvm=1 rd.dm=1 rd.md=1 rd.luks=1\n```\n\n"
    },
    {
      "title": "A stop job is running for \"brltty\"",
      "level": 3,
      "content": "If you have issues booting or very long shutdown processes while the system waits for brltty, add the following to the dracut configuration line:\n\n```\nomit_dracutmodules+=\" brltty \"\n```\n\nAlternatively, uninstall brltty if it is not needed.\n\n"
    },
    {
      "title": "No usable keyslot is available",
      "level": 3,
      "content": "```\nCannot use whirlpool hash for keyslot encryption.\nKeyslot open failed.\nNo usable keyslot is available.\n```\n\nA failure to boot with a message similar to the above typically will only require the user to include the crypt module via add_dracutmodules.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:dracut (software)\n- Gentoo:Dracut\n\n"
    }
  ]
}