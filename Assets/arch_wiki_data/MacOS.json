{
  "title": "MacOS",
  "url": "https://wiki.archlinux.org/title/MacOS",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Mac/Troubleshooting\n- Laptop/Apple\n- Apple Fusion Drive\n\nThis page complements the Installation guide with instructions specific to Apple Macs. The Arch installation image supports Apple Macs with Intel processors, but neither PowerPC nor Apple Silicon processors.\n\n"
    },
    {
      "title": "Overview",
      "level": 2,
      "content": "Summed up, the procedure for installing Arch Linux on a Mac is:\n\n1. Pre-installation: Miscellaneous steps before partitioning.\n1. Partitions: Resizing or deleting the macOS partition to create partitions for Arch Linux.\n1. Installation: Actual installation.\n1. Setup boot loader: Making sure that the new partition is bootable.\n1. Post-installation: Device-specific configuration.\n\n"
    },
    {
      "title": "Pre-installation",
      "level": 2,
      "content": "Before proceeding with the installation of Arch Linux, follow these steps.\n\n1. Install macOS and install its updates. macOS is the only known method for installing firmware updates, even though the OS will not be necessary after installing Arch. See Apple's instructions.\n1. Open ColorSync Utility, find the current .icc color profile, and save the file elsewhere. The profile can later be used to set the display colors correctly. See color profile.\n1. Set the volume on macOS, which will be the volume of the startup chime. If the volume is muted, the startup chime will also be muted. See mute startup chime.\n\n"
    },
    {
      "title": "Partitions",
      "level": 2,
      "content": "If only Arch Linux is desired, then format the entire disk according to Installation guide#Partition the disks. To set up dual boot, follow these steps. Once done, go to #Installation.\n\n"
    },
    {
      "title": "Arch Linux with macOS or other operating systems",
      "level": 3,
      "content": "Macs typically have the following partition table. In Macs that use the Apple Fusion Drive, the partition scheme could be different.\n\n- EFI: the ~200 MB EFI system partition.\n- macOS: the main partition containing your macOS installation, either HFS+ or APFS.\n- Recovery: If not using APFS, a recovery partition is present. If using APFS, this partition is not present.\n\nTo install Arch with macOS, keep these partitions, and follow these steps.\n\n1. You may need to turn off FileVault before resizing the macOS partition. See Apple's instructions.\n1. Run Disk Utility, select the drive to be partitioned in the left-hand column, and click Partition. Do not create a container.\n1. Add a new partition by pressing the + button and choose how much space you want to leave for macOS, and how much for the new partition. The new partition will be formatted in Arch Linux, so you can choose any partition type you want.\n1. Optionally, make any other partitions you may need for your setup. See Partitioning#Partition scheme for more information.\n\nHere is an example setup with five discrete partitions:\n\n```\npartition  mountpoint  size          type  label\n/dev/sda1  /efi        200MiB        vfat  EFI\n/dev/sda2  -           ?             hfs+  macOS\n/dev/sda3  -           ?             hfs+  Recovery\n/dev/sda4  -           100MiB        hfs+  Boot Arch Linux from the Apple boot loader (optional)\n/dev/sda5  /boot       100MiB        boot  boot\n/dev/sda6  -           ?             swap  swap (optional)\n/dev/sda7  /           15-20GiB      ext4  root\n/dev/sda8  /home       remaining     ext4  home\n```\n\n- See #Installing a boot loader to a separate HFS+ partition for more information on booting Arch Linux from the Apple boot loader.\n- An existing EFI system partition can be used by Arch Linux without needing to create an additional one.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "These steps install Arch, assuming #Pre-installation and #Partitions are done.\n\n1. Boot the live environment by holding down Alt (Option on an Apple keyboard) during boot.\n1. If the keyboard has long delays or character doubling, reboot with the following kernel parameters: arch noapic irqpoll acpi=force.\n1. If the display extends beyond the bounds of the screen (unreadable lines at the bottom) use the kernel parameters:nomodeset\n1. Proceed through the installation as described in the Installation guide except in the following areas: Skip the partition the disks stage, do only the partition formatting and mounting steps, taking care to assign the correct partitions. Partitions have already been created if you followed #Partitions When at the install boot loader stage, follow #Setup boot loader (for booting with BIOS-compatibility) Add reboot=pci as a kernel parameter. This will allow your Mac to reboot correctly from Arch.\n1. When the install process is complete, reboot your computer.\n1. During boot, if using optical disk, hold down the eject key to eject the disk.\n1. During boot, if using systemd-boot or GRUB, hold down the Alt key to bring up the Apple boot menu, and select \"EFI Boot.\" If using rEFInd, boot without holding any keys.\n\n1. Skip the partition the disks stage, do only the partition formatting and mounting steps, taking care to assign the correct partitions. Partitions have already been created if you followed #Partitions\n1. When at the install boot loader stage, follow #Setup boot loader\n1. (for booting with BIOS-compatibility) Add reboot=pci as a kernel parameter. This will allow your Mac to reboot correctly from Arch.\n\n"
    },
    {
      "title": "Setup boot loader",
      "level": 2,
      "content": "Macs use UEFI for booting, so any UEFI boot loader will work. The built-in boot loader (shown when holding Alt during boot) will detect any EFI system partition that has a /EFI/BOOT/BOOTX64.EFI file, showing it as a \"EFI Boot\" entry. Most UEFI boot loaders support installing directly to this location, making a dual boot setup easy.\n\nThe boot loader also has an alternate partition discovery method described in #Installing a boot loader to a separate HFS+ partition which is the method used for booting macOS, but can also be used for Linux.\n\n- The UEFI firmware on a Mac can also be configured via efibootmgr.\n- To set a volume as the default boot entry using the Apple boot loader, hold down Ctrl while selecting it.\n\n"
    },
    {
      "title": "systemd-boot",
      "level": 4,
      "content": "Follow the instructions at systemd-boot#Installing the UEFI boot manager. After installing, a copy of systemd-boot will be present at /EFI/BOOT/BOOTX64.EFI.\n\n"
    },
    {
      "title": "rEFInd",
      "level": 4,
      "content": "To install rEFInd to the /EFI/BOOT/BOOTX64.EFI location, run:\n\n```\n# refind-install --usedefault /dev/sdXY\n```\n\nWhere /dev/sdXY is the EFI system partition. After installing, see rEFInd#Configuration to finish setup.\n\nThese steps assume macOS is still installed on a partition, and the steps of the Installation guide were completed up to Installation guide#Boot loader. Boot into Safe Mode by holding down Command+R, then disable SIP.\n\n```\n# csrutil disable\n```\n\nBoot macOS, and run the rEFInd install script,\n\n```\n# ./refind-install --alldrivers\n```\n\nrEFInd installed itself into Apple's boot partition, and replaced Apple's boot menu with its own. Boot into Safe Mode by holding down Command+R, and enable SIP.\n\n```\n# csrutil enable\n```\n\nReboot without holding down any keys. Arch should be recognized as vmlinuz-linux by default. If it is not, uncomment the lines scan_all_linux_kernels and also_scan_dirs in refind.conf. For configuration, see rEFInd#refind_linux.conf. Since rEFInd by default mounts root as ro, it is recommended to create refind-linux.conf.\n\n"
    },
    {
      "title": "GRUB",
      "level": 4,
      "content": "To install GRUB to /EFI/BOOT/BOOTX64.EFI, follow the instructions at GRUB#Installation, adding the --removable option when running grub-install.\n\n"
    },
    {
      "title": "Installing a boot loader to a separate HFS+ partition",
      "level": 3,
      "content": "Despite using UEFI, the Mac native EFI boot loader does not use the EFI system partition for booting macOS. Instead, it uses the following conditions to find existing macOS installations inside all the partitions in internal and external drives and shows them as possible boot options if they are satisfied:\n\n- The partition is formatted as HFS+\n- The partition type ID is af00 (\"Apple HFS/HFS+\")\n- In the root of the partition, there is a file called mach_kernel\n- Inside that partition, there a boot.efi file inside /System/Library/CoreServices\n\nThe advantage of this method to boot Arch over using a BOOTX64.EFI file in the EFI system partition is that it can coexist with macOS nicely, showing the partition as a bootable volume in the macOS Startup Disk settings. However, this method requires manual configuration. The following steps will illustrate how to perform this configuration using GRUB.\n\nFirst, create a new HFS+ partition. This can be done through the macOS Disk Utility, or the mkfs.hfsplus tool in the hfsprogsAUR package. The size and mount point of the partition depend on how you plan to use it:\n\n- If you plan on using it as the /boot directory, give it at least 300 MB;\n- If you are going to keep your kernels in another partition and use a boot loader that can load other file systems, like rEFInd or GRUB, the partition can be smaller and be mounted anywhere you want.\n\nMount the partition, then create the mach_kernel file:\n\n```\n# touch /mountpoint/mach_kernel\n```\n\nCreate the directory structure for the boot loader:\n\n```\n# mkdir -p /mountpoint/System/Library/CoreServices\n```\n\nNow you can install any UEFI boot loader you want. For example, to do a manual install of rEFInd:\n\n```\n# cp -r /usr/share/refind/* /mountpoint/System/Library/CoreServices/\n# mv /mountpoint/System/Library/CoreServices/refind_x64.efi /mountpoint/System/Library/CoreServices/boot.efi\n```\n\nFinally, you can create an optional /mountpoint/System/Library/CoreServices/SystemVersion.plist file that will display some information about the volume in the macOS Startup Disk settings:\n\n```\n/mountpoint/System/Library/CoreServices/SystemVersion.plist\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<plist version=\"1.0\">\n<dict>\n       <key>ProductBuildVersion</key>\n       <string>rolling</string>\n       <key>ProductName</key>\n       <string>Arch Linux</string>\n       <key>ProductUserVisibleVersion</key>\n       <string></string>\n       <key>ProductVersion</key>\n       <string></string>\n</dict>\n</plist>\n```\n\nAfter following these instructions, the new volume will appear on the Mac boot loader when holding down Alt during boot, and it will also appear as a bootable volume in the macOS Startup Disk options.\n\n"
    },
    {
      "title": "Using blessing",
      "level": 3,
      "content": "It is possible to boot directly from GRUB in EFI mode without using rEFIt through what is known as \"blessing\" after placing GRUB on a separate partition. These instructions are known to work on a MacBook7,1. It is advisable to host GRUB on either a FAT32 or HFS+ partition, but ext2 or ext3 may also work.\n\nAfter the GRUB install is in the desired location, the firmware needs to be instructed to boot from that location. This can be done from either an existing macOS install or an macOS install disk. The following command assumes that the GRUB install is in /efi/grub/ on an existing macOS partition:\n\n```\n# bless --folder /efi/grub --file /efi/grub/grub.efi\n```\n\n"
    },
    {
      "title": "Color Profile",
      "level": 3,
      "content": "Macs use ICC profiles which can easily be loaded in Arch. The current profile can be shown using ColorSync Utility or System Preferences > Displays > Color. These files correspond to particular models,\n\n- Color LCD-4271800.icc for MacBook Pro with CoreDuo CPU\n- Color LCD-4271880.icc for MacBook with Core2Duo\n- Color LCD-4271780.icc for MacBook (non-Pro) based on CoreDuo or Core2Duo.\n- Color LCD-68FE312B-5EF0-E0A1-BCD8-8890B73C7B3A.icc for MacBookPro9,2 (Mid-2012)\n\nNote: **Color** \n\n- The previous command sets the color profile only for the current session. autostart it.\n- GNOME will revert the profile set by xcalib. It is preferable to set the profile using Color in settings.\n\n"
    },
    {
      "title": "Apple Remote",
      "level": 3,
      "content": "Install and configure lirc. See LIRC.\n\nMake LIRC use /dev/usb/hiddev0 or /dev/hiddev0:\n\n```\n/etc/conf.d/lircd\n```\n\n```\n#\n# Parameters for lirc daemon\n#\nLIRC_DEVICE=\"/dev/usb/hiddev0\"\nLIRC_DRIVER=\"macmini\"\nLIRC_EXTRAOPTS=\"\"\nLIRC_CONFIGFILE=\"/etc/lirc/lircd.conf\"\n```\n\nUse irrecord to create a configuration file matching your remote control signals:\n\n```\n# irrecord -d /dev/usb/hiddev0 -H macmini output_conf_file\n```\n\nStart lircd.service and use irw to check if it works.\n\nAlternatively, use the following:\n\n```\n/etc/lirc/lircd.conf\n```\n\n```\nbegin remote\n\n  name  lircd.conf.macbook\n  bits            8\n  eps            30\n  aeps          100\n\n  one             0     0\n  zero            0     0\n  pre_data_bits   24\n  pre_data       0x87EEFD\n  gap          211994\n  toggle_bit_mask 0x87EEFD01\n\n      begin codes\n          Repeat                   0x01\n          Menu                     0x03\n          Play                     0x05\n          Prev                     0x09\n          Next                     0x06\n          Up                       0x0A\n          Down                     0x0C\n      end codes\n\nend remote\n```\n\n"
    },
    {
      "title": "HFS partition sharing",
      "level": 4,
      "content": "Install hfsprogsAUR and use fdisk to list the partitions:\n\n```\n# fdisk -l /dev/sda\n```\n\n```\nDevice  Boot     Start         End      Blocks   Id  Type\n/dev/sda1               1          26      204819   ee  GPT\n/dev/sda2              26       13602   109051903+  af  Unknown\n/dev/sda3   *       13602       14478     7031250   83  Linux\n/dev/sda4           14478       14594      932832+  82  Linux swap / Solaris\n```\n\nThe \"Unknown\" partition is our macOS partition, which is located in /dev/sda2. We can use this in our fstab:\n\n```\n/etc/fstab\n```\n\n```\n/dev/sda2    /path/to/shared/hfs_partition     hfsplus auto,user,rw,exec   0 0\n```\n\nIt can then be mounted, and the content accessed.\n\n"
    },
    {
      "title": "Bad Superblock Error",
      "level": 4,
      "content": "This section addresses error message when mounting hfsplus partition:\n\n```\n# mount -t hfsplus dev/sdX force,ro\n```\n\n```\nwrong fs type, bad option, bad superblock on /dev/sdX, missing codepage or helper program, or other error.\n```\n\nSince Yosemite, HFS+ partitions are now wrapped a CoreStorage volume. Verify that you have an CoreStorage volume.\n\n```\n# fdisk -l /dev/sdX\n```\n\n```\nDisk /dev/sdX: 298.1 GiB, 320072933376 bytes, 625142448 sectors\nUnits: sectors of 1* 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 4096 bytes\nI/O size (minimum/optimal): 4096 bytes / 4096 bytes\nDisklabel type: gpt\nDevice      Start      End         Sectors    Size     Type\n/dev/sdX1   40         409639      409600     200M     EFI System\n/dev/sdX2   409640     623872871   623463232  297.3G   Apple Core storage\n/dev/sdX3   623872872  625142407   1269536    916.0M   Apple boot\n```\n\nHFS+ uses two volume headers, one 1024 bytes into the device and one 1024 from the end of the device. With the HFS+ partition wrapped in the CoreStorage volume the end of the partition is not actually 1024 bytes from the end of the /dev/sdX2 partition. To fix this you need to specify sizelimit=X when mounting.\n\nTo determine sizelimit do the following:\n\n1. Run testdisk /dev/sdX and select your drive\n1. Select EFI GPT\n1. Select Analyse and then Quick Search\n\nSample output:\n\n```\nTestDisk 7.0, Data Recovery Utility, April 2015\nChristophe GRENIER <grenier@cgsecurity.org>\nhttps://www.cgsecurity.org\n\nDisk /dev/sdX  - 320 GB / 298 GiB - CHS 38913 255 63\n    Partition     Start      End        Size in sectors\nP  EFI System     40         409639     409600  [EFI]\nP  Mac HFS        409640     623147815  622738176\nP  Mac HFS        623872872  625142407  1269536\n```\n\nWhat you see now is the output of the HFS partition itself without the CoreStorage volume. Take the size in sectors (622738176 in this example) and multiply by the number of bytes in your logical sector size (512 in this example).\n\n622738176 * 512 = 318841946112\n\nFinally, mount your disk with the sizelimit=X option.\n\n```\nmount /dev/sdX -t hfsplus -o ro,sizelimit=318841946112\n```\n\n"
    },
    {
      "title": "Disable Journaling",
      "level": 4,
      "content": "HFS+ partitions are not fully supported by Linux and are mounted as read-only by default. In order to write to an HFS+ partition, the safe way is to disable journaling. This can be accomplished using the macOS Disk Utility. Refer to this Apple support page for more information or try to do it from the command line:\n\nFind your partition:\n\n```\n# diskutil list\n```\n\n```\n/dev/disk0\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                        *750.2 GB   disk0\n   1:                        EFI EFI                     209.7 MB   disk0s1\n   2:                  Apple_HFS macOS                   149.5 GB   disk0s2\n   3:                  Apple_HFS Macintosh HD            599.2 GB   disk0s3\n   4:                 Apple_Boot Recovery HD             650.0 MB   disk0s4\n```\n\nIn this example we will use disk0s3 partition named as Macintosh HD. To know if journaling is activate or not you could execute:\n\n```\n# diskutil info /dev/disk0s3 | grep -i journal\n```\n\n```\nFile System Personality:  Journaled HFS+\n    Name (User Visible):      Mac OS Extended (Journaled)\n    Journal:                  Journal size 49152 KB at offset 0x1176000\n```\n\nAs you can read the journaling is active. To turn off the journaling you could execute:\n\n```\n# diskutil disableJournal disk0s3\n```\n\nTo verify it is done execute the info command again.\n\nIf you get noting as output, then journaling is disabled.\n\nHowever, if you fail to disable journaling. You can change \"auto,user,rw,exec\" in /etc/fstab to \"auto,user,force,rw,exec\" and mount it.\n\n"
    },
    {
      "title": "UID synchronization for home sharing",
      "level": 3,
      "content": "If you want to access your macOS user directories from Linux, write down the UID and GID for the users. macOS begins with the first user's UID at 501 while Arch defaults to 1000.\n\n"
    },
    {
      "title": "In macOS",
      "level": 4,
      "content": "The default UID and GID on Arch Linux for a user is 1000, adjust the following steps according to your setup.\n\n1. Open NetInfo Manager located in the /Applications/Utilities folder.\n1. If not done for you already, enable access to user account transactions by clicking on the closed lock at the bottom of the window, and entering your account password, or root password if you have created a root account.\n1. Navigate to /users/new_user_name\n1. Change the UID value to 1000\n1. Change the GID value to 1000\n1. Navigate to /groups/new_user_name, automatically saving the changes you have made so far.\n\nIn Leopard, the NetInfo Manager application is not present. A different set of steps is required for UID synchronization:\n\n1. Open System Preferences.\n1. Click on Users & Groups.\n1. Unlock the pane if not already done so.\n1. Right-click on the desired user and select Advanced Options.\n1. Write down the value of the User ID field, you will need it later on. Change both the UID and GID to match the UID and GID of the account to be shared with in Arch.\n\n1. Open up Terminal in the /Applications/Utilities folder.\n\n1. Enter the following command to reclaim the permission settings of your home folder:\n\n```\n# find /User/your_user_name -user your_old_UID -exec chown your_user_name:your_user_group {} \\;\n```\n\n"
    },
    {
      "title": "In Arch",
      "level": 4,
      "content": "To synchronize your UID in Arch Linux, you are advised to perform this operation while creating a new user account. It is therefore recommended that you do this as soon as you install Arch Linux.\n\n```\n# useradd -m -u [uid] -g [gid] -G [additional_groups] -s [login_shell] [username]\n```\n\nNow you must substitute Arch's home with macOS's home, by modify entries of /etc/fstab. In order to be able to access a macOS user's directory, only the uid and gid need to match (usernames can differ).\n\n"
    },
    {
      "title": "Mute startup chime",
      "level": 3,
      "content": "The startup chime volume is controlled by the EFI variable SystemAudioVolume-7c436110-ab2a-4bbb-a880-fe41995c9f82. So it can be muted with\n\n```\n# printf \"\\x07\\x00\\x00\\x00\\x00\" > /sys/firmware/efi/efivars/SystemAudioVolume-7c436110-ab2a-4bbb-a880-fe41995c9f82\n```\n\nBear in mind that the file may have the immutable bit set by default, which will prevent even root from overwriting the file. See File permissions and attributes#File attributes. To remove it, issue the following:\n\n```\n# chattr -i /sys/firmware/efi/efivars/SystemAudioVolume-7c436110-ab2a-4bbb-a880-fe41995c9f82\n```\n\nAfter that, run the printf command and it should overwrite the file properly. Verify the file's contents and then set the immutable bit again with chattr +i once satisfied.\n\nAlternatively, you can use a macOS install disk to mute the chime. Boot from it, select language, then click Utilities > Terminal, and enter\n\n```\n# /usr/sbin/nvram SystemAudioVolume=%percentage\n```\n\n"
    },
    {
      "title": "Custom icon in the boot loader",
      "level": 3,
      "content": "The Mac boot loader supports loading custom icons for each volume it detects. The custom icon must be in the .icns format, and be located at the root of the volume containing the boot loader, with the file name .VolumeIcon.icns.\n\nThe following example downloads an Arch logo SVG with wget, converts it to PNG with librsvg and then converts it to an .icns with libicns:\n\n```\n$ wget -O /tmp/archlinux.svg https://archlinux.org/logos/archlinux-icon-crystal-64.svg\n$ rsvg-convert -w 128 -h 128 -o /tmp/archlogo.png /tmp/archlinux.svg\n# png2icns /boot/.VolumeIcon.icns /tmp/archlogo.png\n```\n\nObviously, you can replace the Arch logo with any other icon you like.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Laptop/Apple\n- MacBookPro10,x\n- MacBookPro11,x\n- https://wiki.t2linux.org/\n- MacBook Air Macbook Air Early 2014 — dabase.com Installing Linux on a Macbook Air (4,2) — Nico Schottelius MacBook Air (7,2) - Adham Nasr\n- MacBook Pro http://allanmcrae.com/2010/04/installing-arch-on-a-macbook-pro-5-5/ http://allanmcrae.com/2012/04/installing-arch-on-a-macbook-pro-8-1/\n\n- Macbook Air Early 2014 — dabase.com\n- Installing Linux on a Macbook Air (4,2) — Nico Schottelius\n- MacBook Air (7,2) - Adham Nasr\n\n- http://allanmcrae.com/2010/04/installing-arch-on-a-macbook-pro-5-5/\n- http://allanmcrae.com/2012/04/installing-arch-on-a-macbook-pro-8-1/\n\n"
    }
  ]
}