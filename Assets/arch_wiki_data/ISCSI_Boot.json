{
  "title": "ISCSI/Boot",
  "url": "https://wiki.archlinux.org/title/ISCSI/Boot",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- iSCSI Target\n- iSCSI Initiator\n\nArch Linux can be installed on an iSCSI target. This allows the machine to only contain enough mass storage to contain a boot loader, such as an USB drive, while its root partition is accessed over the network with iSCSI. Any subsequent partitions can also be accessed with iSCSI, or with some other network storage protocol, such as NFS. When combined with PXE, iBFT, or some other method of network booting, it allows the machine to not contain any mass storage.\n\n"
    },
    {
      "title": "Boot process",
      "level": 2,
      "content": "There are various ways of mounting an iSCSI target at boot time:\n\n- Using a standard initramfs that is configured to initialize a network connection and mount the iSCSI target, and finally boot into it. The procedure for this is outlined below.\n- Certain firmwares (BIOS or UEFI) and network adapters can initialize a network connection and mount an iSCSI target themselves before booting into the OS contained in the iSCSI target. This requires installing a boot loader in the target as well. This is common in server- and enterprise-grade hardware. Consult your hardware manual and manufacturer on how to achieve this.\n- Using a custom PXE firmware, such as iPXE, to mount the iSCSI target and boot into it.\n\n"
    },
    {
      "title": "Target setup",
      "level": 3,
      "content": "Follow the procedure outlined in iSCSI to setup an iSCSI target on a remote machine.\n\n"
    },
    {
      "title": "Pre-installation",
      "level": 3,
      "content": "Boot into the Arch Linux installer using the latest official installation media from the download page. Follow the installation guide up until partitioning.\n\n"
    },
    {
      "title": "iSCSI initiator setup",
      "level": 3,
      "content": "If needed, adjust your initiator name in the iSCSI configuration.\n\n```\n/etc/iscsi/initiatorname.conf\n```\n\n```\nInitiatorName=iqn.2011-03.example.org.istgt:arch\n```\n\nDiscover the available iSCSI targets on the remote machine to ensure they are visible to the installer. Adjust the portal IP address to match your environment. The output will depend on your environment; ensure it matches the target you set up earlier.\n\n```\n# iscsiadm -m discovery -t sendtargets -p PORTAL_IP_ADDRESS\n```\n\n```\n192.168.1.100:3260,-1 iqn.2011-03.example.org.istgt:arch\n```\n\nLogin to the iSCSI target.\n\n```\n# iscsiadm -m node -T TARGET_NAME -p PORTAL_IP_ADDRESS -l\n```\n\nThe iSCSI block device is now available. Verify the output of lsblk to ensure the block device is available. The kernel log messages may contain helpful information if accessing the target fails.\n\nContinue installing Arch on the iSCSI target as usual, up until you generate the initramfs and install the boot loader.\n\n"
    },
    {
      "title": "iSCSI daemon",
      "level": 3,
      "content": "Install the open-iscsi package in the new system.\n\nStart/enable iscsid.service.\n\n"
    },
    {
      "title": "Fstab",
      "level": 3,
      "content": "The install procedure automatically generates /etc/fstab to match the new install. Ensure the root filesystem is added correctly. The iSCSI daemon handles any errors in the iSCSI kernel layer, so it is important to keep it running as long as the root filesystem - and any other iSCSI filesystems - are mounted. This can be achieved by appending x-systemd.requires=iscsid.service to the filesystem mount options. For example:\n\n```\n/etc/fstab\n```\n\n```\nUUID=12345678-1234-1234-1234-123456789012 /     ext4   defaults,_netdev,x-systemd.requires=iscsid.service   0      1\n```\n\n"
    },
    {
      "title": "initramfs",
      "level": 3,
      "content": "This guide outlines a method which uses a busybox-based init, as opposed to a systemd-based init. The procedure will be different for a systemd-based init.\n\n"
    },
    {
      "title": "Connect to the network automatically",
      "level": 4,
      "content": "The initcpio has to connect to the network before opening a connection to the iSCSI target. This can be achieved in various ways, but a simple way is to use the net-hook with the ip= kernel parameter. This hook is designed to be used with an NFS-based root, but omitting the NFS-specific parameters lets it only configure the network adapter.\n\nInstall the mkinitcpio-nfs-utils in the new system.\n\nInsert the net hook in the HOOKS array:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nHOOKS=(base ... net block ...)\n```\n\nAppend the ip= parameter accordingly to the kernel parameters. For example, to configure the eth0 network adapter with DHCP:\n\n```\nip=dhcp\n```\n\n"
    },
    {
      "title": "Start the iSCSI session automatically",
      "level": 4,
      "content": "In order to start the iSCSI session in the initramfs, a custom hook must be created for it. The hook consists of a build hook and a runtime hook, as explained in Mkinitcpio#HOOKS.\n\nThe build hook will add the required iSCSI modules to the initramfs, and the iscsistart binary.\n\n```\n/etc/initcpio/install/iscsi\n```\n\n```\nbuild () {\n        map add_module iscsi_tcp iscsi_ibft libiscsi libiscsi_tcp scsi_transport_iscsi crc32c\n        add_checked_modules \"/drivers/net\"\n        add_binary iscsistart\n        add_runscript\n}\n\nhelp () {\ncat <<HELPEOF\n        This hook allows you to boot from an iSCSI target.\nHELPEOF\n}\n```\n\nThe runtime hook will start the iSCSI session using a given initiator name, target name and portal. Fill in the values according to your environment.\n\n```\n/etc/initcpio/hooks/iscsi\n```\n\n```\nrun_hook () {\n        msg \"Mounting iSCSI target\"\n        iscsistart -i INITIATOR_NAME -t TARGET_NAME -g 1 -a PORTAL_IP_ADDRESS -d 1\n}\n```\n\nAppend the newly created iscsi hook after the net hook in the HOOKS array:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nHOOKS=(... net iscsi block ...)\n```\n\nAdjust the root= kernel parameter to match the iSCSI target.\n\nGenerate the initramfs image and finish the installation guide.\n\n"
    },
    {
      "title": "Using an iBFT-compatible ROM",
      "level": 3,
      "content": "iscsistart can be used to configure the network and iSCSI target based on iBFT-supplied configuration values from the firmware.\n\nModify the runtime hook for iBFT:\n\n```\n/etc/initcpio/hooks/iscsi\n```\n\n```\nrun_hook ()\n{\n    modprobe iscsi_tcp\n    modprobe iscsi_ibft\n\n    echo \"Network configuration based on iBFT\"\n    iscsistart -N {{|}}{{|}} echo \"Unable to configure network\"\n\n    echo \"iSCSI auto connect based on iBFT\"\n    until iscsistart -bÂ ; do\n        sleep 3\n    done\n}\n```\n\n"
    },
    {
      "title": "Set custom configuration values for iscsistart",
      "level": 3,
      "content": "Since the iscsistart binary in the initramfs does not use any iSCSI daemon, nor does it use a configuration file, it assumes default values for all configuration settings for the daemon. Individual settings can be set with the -P command line parameter:\n\n```\niscsistart ... -P 'node.conn[0].iscsi.MaxXmitDataSegmentLength=26144'\n```\n\nThe parameter can be given multiple times to set multiple settings. All available settings and their default values can be found in iscsid.conf.\n\n"
    },
    {
      "title": "Make the iSCSI daemon resilient to network problems",
      "level": 3,
      "content": "The open-iscsi README describes optimal iSCSI daemon settings when using an iSCSI target for the root. The iSCSI timeouts should be adjusted so that the iSCSI kernel layer has several chances to try to re-establish a broken session, and so that commands are not quickly requeued to the SCSI layer. This is essentially the opposite of when using dm-multipath.\n\nTurn off iSCSI no-ops:\n\n```\n/etc/iscsi/iscsid.conf\n```\n\n```\nnode.conn[0].timeo.noop_out_interval = 0\nnode.conn[0].timeo.noop_out_timeout = 0\n```\n\nSet the replacement timeout to a large value:\n\n```\n/etc/iscsi/iscsid.conf\n```\n\n```\nnode.session.timeo.replacement_timeout = 86400\n```\n\nIf a network problem is detected by the iSCSI initiator, running commands are failed immediately. However, the SCSI error handler in the SCSI layer prevents them from failing until the iSCSI daemon's configured replacement timeout has elapsed. iscsiadm can be used to see if the SCSI error handler is currently running:\n\n```\n# iscsiadm -m session -P 3\n```\n\n```\n************************\nAttached SCSI devices:\n************************\nHost Number: 0  State: running\nscsi0 Channel 00 Id 0 Lun: 0\n        Attached scsi disk sda          State: running\n```\n\nTo modify the timeout of failing commands until the SCSI error handler is ran, modify the device's timeout value directly:\n\n```\n# echo Y > /sys/block/sdX/device/timeout\n```\n\nwhere the value is in seconds, or with an udev rule:\n\n```\n/etc/udev/rules.d/50-iscsi.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"scsi\" , ATTR{type}==\"0|7|14\", RUN+=\"/bin/sh -c 'echo Y > /sys$$DEVPATH/timeout'\"\n```\n\n"
    },
    {
      "title": "Improving performance",
      "level": 3,
      "content": "Since low-level I/O-commands will go through the IO scheduler on the remote system, and are subsequently queued there, it is possible to disable any queuing algorithm on the initiator system by using the none setting for the queuing algorithm for the iSCSI device. See Improving performance#Input/output schedulers for details and configuration.\n\n"
    },
    {
      "title": "Detected conn error (1011)",
      "level": 3,
      "content": "This can occur for multiple reasons:\n\n- The initiator, target, or network is overwhelmed from iSCSI no-ops, causing a busy connection be considered disconnected, in which case the SCSI error handler overrides the device, which can break the working-but-busy iSCSI session. See #Make the iSCSI daemon resilient to network problems on how to disable the no-ops.\n- The network adapter's MTU is mismatched from that of the rest of the network.\n- In rare cases, when TCP window scaling is enabled. It can be disabled with sysctl with the net.ipv4.tcp_window_scaling setting.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- iscsistart(8), iscsiadm(8) and iscsid(8)\n- open-iscsi Github repository\n\n"
    }
  ]
}