{
  "title": "Swap on video ram",
  "url": "https://wiki.archlinux.org/title/Swap_on_video_ram",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Swap\n- Improving performance\n\nIn the unlikely case that you have very little RAM and a surplus of video RAM, you can use the latter as swap.\n\n"
    },
    {
      "title": "Potential benefits",
      "level": 3,
      "content": "A graphics card with GDDRX SDRAM or DDR SDRAM may be used as swap by using the MTD subsystem of the kernel. Systems with dedicated graphics memory of 256 MB or greater which also have limited amounts of system memory (DDRX SDRAM) may benefit the most from this type of setup.\n\n- This will not work with binary drivers.\n- Unless your graphics driver can be made to use less ram than is detected, Xorg may crash when you try to use the same section of RAM to store textures as swap. Using a video driver that allows you to override videoram should increase stability.\n\n"
    },
    {
      "title": "Pre-setup",
      "level": 3,
      "content": "You have to load the modules specifying the PCI address ranges that correspond to the RAM on your video card.\n\nTo find the available memory ranges run the following command and look for the VGA compatible controller section (see the example below).\n\n```\n$ lspci -vvv\n```\n\n```\n01:00.0 VGA compatible controller: NVIDIA Corporation GK104 [GeForce GTX 670] (rev a1) (prog-if 00 [VGA controller])\n\tSubsystem: ASUSTeK Computer Inc. Device 8405\n\tControl: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B- DisINTx-\n\tStatus: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast >TAbort- <TAbort- <MAbort- >SERR- <PERR- INTx-\n\tLatency: 0\n\tInterrupt: pin A routed to IRQ 57\n\tRegion 0: Memory at f5000000 (32-bit, non-prefetchable) [size=16M]\n\tRegion 1: Memory at e8000000 (64-bit, prefetchable) [size=128M]\n\tRegion 3: Memory at f0000000 (64-bit, prefetchable) [size=32M]\n\tRegion 5: I/O ports at e000 [size=128]\n\t[virtual] Expansion ROM at f6000000 [disabled] [size=512K]\n\tCapabilities: <access denied>\n\tKernel driver in use: nvidia\n\tKernel modules: nouveau, nvidia\n```\n\nOf most potential benefit is a region that is prefetchable, 64-bit, and the largest in size.\n\nA video card needs some of its memory to function, as such some calculations are needed. The offsets are easy to calculate as powers of 2. The card should use the beginning of the address range as a framebuffer for textures and such. However, if limited or as indicated in the beginning of this article, if two programs try to write to the same sectors, stability issues are likely to occur.\n\nAs an example: For a total of 256 MB of graphics memory, the formula is 2^28 (two to the twenty-eighth power). Approximately 64 MB could be left for graphics memory and as such the start range for the swap usage of graphics memory would be calculated with the formula 2^26.\n\nUsing the numbers above, you can take the difference and determine a reasonable range for usage as swap memory. leaving 2^24 (32M) for the normal function (less will work fine)\n\n"
    },
    {
      "title": "Setup",
      "level": 3,
      "content": "Configure the phram module (3.x kernels used the slram module):\n\n```\n/etc/modprobe.d/modprobe.conf\n```\n\n```\noptions phram phram=VRAM,0xStartRange,0xUsedAmount\n```\n\nLoad the modules on boot:\n\n```\n/etc/modules-load.d/vramswap.conf\n```\n\n```\nphram\nmtdblock\n```\n\nCreate a systemd service:\n\n```\n/usr/lib/systemd/system/vramswap.service\n```\n\n```\n[Unit]\nDescription=Swap on Video RAM\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/mkswap /dev/mtdblock0\nExecStart=/usr/bin/swapon /dev/mtdblock0 -p 10\nExecStop=/usr/bin/swapoff /dev/mtdblock0\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\n```\n\n"
    },
    {
      "title": "Xorg driver config",
      "level": 4,
      "content": "To keep X stable, your video driver needs to be told to use less than the detected videoram.\n\n```\n/etc/X11/xorg.conf.d/vramswap.conf\n```\n\n```\nSection \"Device\"\n    Driver \"radeon\" # or whichever other driver you use\n    VideoRam 32768\n\t#other stuff\nEndSection\n```\n\nThe above example specifies that you use 32 MB of graphics memory.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 3,
      "content": "The following command may help you getting the used swap in the different spaces like disk partitions, flash disks and possibly this example of the swap on video ram\n\n```\nswapon -s\n```\n\n"
    },
    {
      "title": "See also",
      "level": 3,
      "content": "- MTD website\n\n"
    },
    {
      "title": "FUSE filesystem",
      "level": 2,
      "content": "This method works on hardware with OpenCL support using a FUSE filesystem backing a swapfile. See GPGPU for more information.\n\n"
    },
    {
      "title": "Setup",
      "level": 3,
      "content": "First, install vramfs-gitAUR. Then, create an empty directory as mount point (e.g /tmp/vram).\n\nNow run the following commands to set up the vramfs and a swapfile.\n\n```\n# vramfs /tmp/vram 256MB -f # Substitute 256M with your target vramfs size\n# mkswap -U clear --size 200M --file /tmp/vram/swapfile # Substitute 200 with your target swapspace size in MiB\n```\n\nYour Swap should now be ready. Run swapon to check.\n\nSee Swap#Swap file for more information.\n\n"
    },
    {
      "title": "Setting swappiness",
      "level": 3,
      "content": "In the case of swap on VRAM, increasing swappiness may be a good idea. This is especially true when random I/O for the VRAM swapfile is significantly faster than random disk I/O, as the benefit of caching disk reads will outweigh the cost of swapping. For example, if your random disk I/O speed is the same as VRAM swap I/O, you should set swappiness to 100. If VRAM swap I/O is 2x faster than disk I/O, you should set swappiness to 133. See the kernel documentation for how to calculate the swappiness value correctly.\n\n"
    },
    {
      "title": "swapon: /tmp/vram/swapfile: skipping - it appears to have holes.",
      "level": 4,
      "content": "The swapfile created is not contiguous. A loop device can be set up to work around this issue.\n\n```\n# cd /tmp/vram\n# LOOPDEV=$(losetup -f)\n# truncate -s 4G swapfile # replace 4G with target swapspace size, has to be smaller than the allocated vramfs\n# losetup $LOOPDEV swapfile\n# mkswap $LOOPDEV\n# swapon $LOOPDEV\n```\n\n"
    },
    {
      "title": "Complete system freeze under high memory pressure",
      "level": 4,
      "content": "Sometimes, under very high memory pressure, the vramfs process itself may get swapped to the VRAM swap space. This causes a complete deadlock. A fix is to make the process unswappable via cgroups by launching it via a systemd file:\n\n```\n/etc/systemd/system/vramswap.service\n```\n\n```\n[Unit]\nDescription=Set up swap in VRAM\nAfter=default.target\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\n# Change /root/vramswap.sh to a path to a script that performs all the necessary setup\nExecStart=/root/vramswap.sh\nTimeoutStartSec=0\n# Prevent swapping\nMemorySwapMax=0\n\n[Install]\nWantedBy=default.target\n```\n\n"
    },
    {
      "title": "See also",
      "level": 3,
      "content": "- vramfs Github Repository\n\n"
    }
  ]
}