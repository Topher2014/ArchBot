{
  "title": "Binfmt misc for Java/Wrapper examples",
  "url": "https://wiki.archlinux.org/title/Binfmt_misc_for_Java/Wrapper_examples",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "These are examples of wrappers and C code which can be used to run Java programs via binfmt_misc.\n\n"
    },
    {
      "title": "jarwrapper",
      "level": 2,
      "content": "```\n#!/bin/bash\n# /usr/local/bin/jarwrapper - the wrapper for binfmt_misc/jar\n\n# set path to java using JAVA_HOME if available, otherwise assume it's on the PATH\nJAVA_PATH=${JAVA_HOME:+$JAVA_HOME/jre/bin/}java\n$JAVA_PATH -jar \"$@\"\n```\n\n"
    },
    {
      "title": "javawrapper",
      "level": 2,
      "content": "```\n#!/bin/bash\n# /usr/local/bin/javawrapper - the wrapper for binfmt_misc/java\n\nif [ -z \"$1\" ]; then\n\texec 1>&2\n\techo Usage: $0 class-file\n\texit 1\nfi\n\nCLASS=$1\nFQCLASS=`/usr/local/bin/javaclassname $1`\nFQCLASSN=`echo $FQCLASS | sed -e 's/^.*\\.\\([^.]*\\)$/\\1/'`\nFQCLASSP=`echo $FQCLASS | sed -e 's-\\.-/-g' -e 's-^[^/]*$--' -e 's-/[^/]*$--'`\n\n# for example:\n# CLASS=Test.class\n# FQCLASS=foo.bar.Test\n# FQCLASSN=Test\n# FQCLASSP=foo/bar\n\nunset CLASSBASE\n\ndeclare -i LINKLEVEL=0\n\nwhile :; do\n\tif [ \"`basename $CLASS .class`\" == \"$FQCLASSN\" ]; then\n\t\t# See if this directory works straight off\n\t\tcd -L `dirname $CLASS`\n\t\tCLASSDIR=$PWD\n\t\tcd $OLDPWD\n\t\tif echo $CLASSDIR | grep -q \"$FQCLASSP$\"; then\n\t\t\tCLASSBASE=`echo $CLASSDIR | sed -e \"s.$FQCLASSP$..\"`\n\t\t\tbreak;\n\t\tfi\n\t\t# Try dereferencing the directory name\n\t\tcd -P `dirname $CLASS`\n\t\tCLASSDIR=$PWD\n\t\tcd $OLDPWD\n\t\tif echo $CLASSDIR | grep -q \"$FQCLASSP$\"; then\n\t\t\tCLASSBASE=`echo $CLASSDIR | sed -e \"s.$FQCLASSP$..\"`\n\t\t\tbreak;\n\t\tfi\n\t\t# If no other possible filename exists\n\t\tif [ ! -L $CLASS ]; then\n\t\t\texec 1>&2\n\t\t\techo $0:\n\t\t\techo \"  $CLASS should be in a\" \\\n\t\t\t     \"directory tree called $FQCLASSP\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\tif [ ! -L $CLASS ]; then break; fi\n\t# Go down one more level of symbolic links\n\tlet LINKLEVEL+=1\n\tif [ $LINKLEVEL -gt 5 ]; then\n\t\texec 1>&2\n\t\techo $0:\n\t\techo \"  Too many symbolic links encountered\"\n\t\texit 1\n\tfi\n\tCLASS=`ls --color=no -l $CLASS | sed -e 's/^.* \\([^ ]*\\)$/\\1/'`\ndone\n\nif [ -z \"$CLASSBASE\" ]; then\n\tif [ -z \"$FQCLASSP\" ]; then\n\t\tGOODNAME=$FQCLASSN.class\n\telse\n\t\tGOODNAME=$FQCLASSP/$FQCLASSN.class\n\tfi\n\texec 1>&2\n\techo $0:\n\techo \"  $FQCLASS should be in a file called $GOODNAME\"\n\texit 1\nfi\n\nif ! echo $CLASSPATH | grep -q \"^\\(.*:\\)*$CLASSBASE\\(:.*\\)*\"; then\n\t# class is not in CLASSPATH, so prepend dir of class to CLASSPATH\n\tif [ -z \"${CLASSPATH}\" ] ; then\n\t\texport CLASSPATH=$CLASSBASE\n\telse\n\t\texport CLASSPATH=$CLASSBASE:$CLASSPATH\n\tfi\nfi\n\nshift\n# set path to java using JAVA_HOME if available, otherwise assume it's on the PATH\nJAVA_PATH=${JAVA_HOME:+$JAVA_HOME/jre/bin/}java\n$JAVA_PATH $FQCLASS \"$@\"\n```\n\n"
    },
    {
      "title": "javaclassname (support for javawrapper)",
      "level": 2,
      "content": "This program is used by the javawrapper script above. Compile it with the command\n\n```\n$ gcc -O2 -o javaclassname javaclassname.c\n```\n\nand move the executable to /usr/local/bin.\n\n```\n/* javaclassname.c\n *\n * Extracts the class name from a Java class file; intended for use in a Java\n * wrapper of the type supported by the binfmt_misc option in the Linux kernel.\n *\n * Copyright (C) 1999 Colin J. Watson <cjw44@cam.ac.uk>.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdarg.h>\n#include <sys/types.h>\n\n/* From Sun's Java VM Specification, as tag entries in the constant pool. */\n\n#define CP_UTF8 1\n#define CP_INTEGER 3\n#define CP_FLOAT 4\n#define CP_LONG 5\n#define CP_DOUBLE 6\n#define CP_CLASS 7\n#define CP_STRING 8\n#define CP_FIELDREF 9\n#define CP_METHODREF 10\n#define CP_INTERFACEMETHODREF 11\n#define CP_NAMEANDTYPE 12\n\n/* Define some commonly used error messages */\n\n#define seek_error() error(\"%s: Cannot seek\\n\", program)\n#define corrupt_error() error(\"%s: Class file corrupt\\n\", program)\n#define eof_error() error(\"%s: Unexpected end of file\\n\", program)\n#define utf8_error() error(\"%s: Only ASCII 1-255 supported\\n\", program);\n\nchar *program;\n\nlong *pool;\n\nu_int8_t read_8(FILE *classfile);\nu_int16_t read_16(FILE *classfile);\nvoid skip_constant(FILE *classfile, u_int16_t *cur);\nvoid error(const char *format, ...);\nint main(int argc, char **argv);\n\n/* Reads in an unsigned 8-bit integer. */\nu_int8_t read_8(FILE *classfile)\n{\n\tint b = fgetc(classfile);\n\tif(b == EOF)\n\t\teof_error();\n\treturn (u_int8_t)b;\n}\n\n/* Reads in an unsigned 16-bit integer. */\nu_int16_t read_16(FILE *classfile)\n{\n\tint b1, b2;\n\tb1 = fgetc(classfile);\n\tif(b1 == EOF)\n\t\teof_error();\n\tb2 = fgetc(classfile);\n\tif(b2 == EOF)\n\t\teof_error();\n\treturn (u_int16_t)((b1 << 8) | b2);\n}\n\n/* Reads in a value from the constant pool. */\nvoid skip_constant(FILE *classfile, u_int16_t *cur)\n{\n\tu_int16_t len;\n\tint seekerr = 1;\n\tpool[*cur] = ftell(classfile);\n\tswitch(read_8(classfile))\n\t{\n\tcase CP_UTF8:\n\t\tlen = read_16(classfile);\n\t\tseekerr = fseek(classfile, len, SEEK_CUR);\n\t\tbreak;\n\tcase CP_CLASS:\n\tcase CP_STRING:\n\t\tseekerr = fseek(classfile, 2, SEEK_CUR);\n\t\tbreak;\n\tcase CP_INTEGER:\n\tcase CP_FLOAT:\n\tcase CP_FIELDREF:\n\tcase CP_METHODREF:\n\tcase CP_INTERFACEMETHODREF:\n\tcase CP_NAMEANDTYPE:\n\t\tseekerr = fseek(classfile, 4, SEEK_CUR);\n\t\tbreak;\n\tcase CP_LONG:\n\tcase CP_DOUBLE:\n\t\tseekerr = fseek(classfile, 8, SEEK_CUR);\n\t\t++(*cur);\n\t\tbreak;\n\tdefault:\n\t\tcorrupt_error();\n\t}\n\tif(seekerr)\n\t\tseek_error();\n}\n\nvoid error(const char *format, ...)\n{\n\tva_list ap;\n\tva_start(ap, format);\n\tvfprintf(stderr, format, ap);\n\tva_end(ap);\n\texit(1);\n}\n\nint main(int argc, char **argv)\n{\n\tFILE *classfile;\n\tu_int16_t cp_count, i, this_class, classinfo_ptr;\n\tu_int8_t length;\n\n\tprogram = argv[0];\n\n\tif(!argv[1])\n\t\terror(\"%s: Missing input file\\n\", program);\n\tclassfile = fopen(argv[1], \"rb\");\n\tif(!classfile)\n\t\terror(\"%s: Error opening %s\\n\", program, argv[1]);\n\n\tif(fseek(classfile, 8, SEEK_SET))  /* skip magic and version numbers */\n\t\tseek_error();\n\tcp_count = read_16(classfile);\n\tpool = calloc(cp_count, sizeof(long));\n\tif(!pool)\n\t\terror(\"%s: Out of memory for constant pool\\n\", program);\n\n\tfor(i = 1; i < cp_count; ++i)\n\t\tskip_constant(classfile, &i);\n\tif(fseek(classfile, 2, SEEK_CUR))\t/* skip access flags */\n\t\tseek_error();\n\n\tthis_class = read_16(classfile);\n\tif(this_class < 1 || this_class >= cp_count)\n\t\tcorrupt_error();\n\tif(!pool[this_class] || pool[this_class] == -1)\n\t\tcorrupt_error();\n\tif(fseek(classfile, pool[this_class] + 1, SEEK_SET))\n\t\tseek_error();\n\n\tclassinfo_ptr = read_16(classfile);\n\tif(classinfo_ptr < 1 || classinfo_ptr >= cp_count)\n\t\tcorrupt_error();\n\tif(!pool[classinfo_ptr] || pool[classinfo_ptr] == -1)\n\t\tcorrupt_error();\n\tif(fseek(classfile, pool[classinfo_ptr] + 1, SEEK_SET))\n\t\tseek_error();\n\n\tlength = read_16(classfile);\n\tfor(i = 0; i < length; ++i)\n\t{\n\t\tu_int8_t x = read_8(classfile);\n\t\tif((x & 0x80) || !x)\n\t\t{\n\t\t\tif((x & 0xE0) == 0xC0)\n\t\t\t{\n\t\t\t\tu_int8_t y = read_8(classfile);\n\t\t\t\tif((y & 0xC0) == 0x80)\n\t\t\t\t{\n\t\t\t\t\tint c = ((x & 0x1f) << 6) + (y & 0x3f);\n\t\t\t\t\tif(c) putchar(c);\n\t\t\t\t\telse utf8_error();\n\t\t\t\t}\n\t\t\t\telse utf8_error();\n\t\t\t}\n\t\t\telse utf8_error();\n\t\t}\n\t\telse if(x == '/') putchar('.');\n\t\telse putchar(x);\n\t}\n\tputchar('\\n');\n\tfree(pool);\n\tfclose(classfile);\n\treturn 0;\n}\n```\n\n"
    }
  ]
}