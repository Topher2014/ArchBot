{
  "title": "Install Arch Linux from VirtualBox",
  "url": "https://wiki.archlinux.org/title/Install_Arch_Linux_from_VirtualBox",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- /Install Arch Linux as a guest\n- Moving an existing install into (or out of) a virtual machine\n- PhpVirtualBox\n- RemoteBox\n\nVirtualBox is a hypervisor used to run operating systems in a special environment, called a virtual machine, on top of the existing operating system. VirtualBox is in constant development and new features are implemented continuously. It comes with a Qt graphical user interface, as well as headless and SDL command-line tools for managing and running virtual machines.\n\nIn order to integrate functions of the host system to the guests, including shared folders and clipboard, video acceleration and a seamless window integration mode, guest additions are provided for some guest operating systems.\n\nFor more information, see the official documentation.\n\n"
    },
    {
      "title": "Installation steps for Arch Linux hosts",
      "level": 2,
      "content": "In order to launch VirtualBox virtual machines on your Arch Linux box, follow these installation steps.\n\n"
    },
    {
      "title": "Install the core packages",
      "level": 3,
      "content": "Install the virtualbox package. You will also need to choose a package to provide host modules:\n\n- for the linux kernel, choose virtualbox-host-modules-arch,\n- for the linux-lts kernel, choose virtualbox-host-modules-lts,\n- for any other kernel, choose virtualbox-host-dkms.\n\nTo compile the VirtualBox modules provided by virtualbox-host-dkms, it will also be necessary to install the appropriate headers package(s) for your installed kernel(s) (e.g. linux-rt-headers for linux-rt). [1] When either VirtualBox or the kernel is updated, the kernel modules will be automatically recompiled thanks to the DKMS pacman hook.\n\n"
    },
    {
      "title": "Sign modules",
      "level": 3,
      "content": "When using a custom kernel with CONFIG_MODULE_SIG_FORCE option enabled, you must sign your modules with a key generated during kernel compilation.\n\nNavigate to your kernel tree folder and execute the following command:\n\n```\n# for module in `ls /lib/modules/$(uname -r)/kernel/misc/{vboxdrv.ko,vboxnetadp.ko,vboxnetflt.ko}` ; do ./scripts/sign-file sha1 certs/signing_key.pem certs/signing_key.x509 $module ; done\n```\n\n"
    },
    {
      "title": "Load the VirtualBox kernel modules",
      "level": 3,
      "content": "virtualbox-host-modules-arch and virtualbox-host-dkms use systemd-modules-load.service to load VirtualBox modules automatically at boot time. For the modules to be loaded after installation, either reboot or load the modules once manually; the list of modules can be found in /usr/lib/modules-load.d/virtualbox-host-modules-arch.conf, /usr/lib/modules-load.d/virtualbox-host-modules-lts.conf or /usr/lib/modules-load.d/virtualbox-host-dkms.conf.\n\nAmong the kernel modules VirtualBox uses, there is a mandatory module named vboxdrv, which must be loaded before any virtual machines can run.\n\nTo load the module manually, run:\n\n```\n# modprobe vboxdrv\n```\n\nThe following modules are only required in advanced configurations:\n\n- vboxnetadp and vboxnetflt are both needed when you intend to use the bridged or host-only networking feature. More precisely, vboxnetadp is needed to create the host interface in the VirtualBox global preferences, and vboxnetflt is needed to launch a virtual machine using that network interface.\n\n"
    },
    {
      "title": "Accessing host USB devices in guest",
      "level": 3,
      "content": "To use the USB ports of your host machine in your virtual machines, add users that will be authorized to use this feature to the vboxusers user group.\n\n"
    },
    {
      "title": "Guest additions",
      "level": 3,
      "content": "It is also recommended to install the virtualbox-guest-iso package on the host running VirtualBox. This package will act as a disc image that can be used to install the guest additions onto guest systems other than Arch Linux. The .iso file will be located at /usr/lib/virtualbox/additions/VBoxGuestAdditions.iso, and may have to be mounted manually inside the virtual machine. Once mounted, you can run the guest additions installer inside the guest. For Arch Linux guest also see VirtualBox/Install Arch Linux as a guest#Install the Guest Additions.\n\n"
    },
    {
      "title": "Extension pack",
      "level": 3,
      "content": "The Oracle VM VirtualBox Extension Pack provides additional features and is released under a non-free license only available for personal use. To install it, the virtualbox-ext-oracleAUR package is available, and a prebuilt version can be found in the seblu repository.\n\nIf you prefer to use the traditional and manual way: download the extension pack manually and install it via the GUI (File > Tools > Extension Pack Manager) or via VBoxManage extpack install <.vbox-extpack>, make sure you have a toolkit like Polkit to grant privileged access to VirtualBox. The installation of extension pack requires root access.\n\nOne of the non-free extension pack features is support for the Remote Desktop Protocol (RDP). This part of functionality can also be obtained with the open source VNC Extension Pack, by installing the virtualbox-ext-vnc package.\n\n"
    },
    {
      "title": "Front-ends",
      "level": 3,
      "content": "VirtualBox comes with four front-ends:\n\n- If you want to use VirtualBox with the regular GUI, use VirtualBox.\n- If you want to launch and manage your virtual machines from the command-line, use the VBoxSDL command, which only provides a plain window for the virtual machine without any overlays.\n- If you want to use VirtualBox without running any GUI (e.g. on a server), use the VBoxHeadless command. With the VRDP extension you can still remotely access the displays of your virtual machines.\n- If you want to remotely manage virtual machines, the VirtualBox web service (vboxwebsrv) provides the server side backend. It can be used with RemoteBox (GUI) or phpVirtualBox (WebUI).\n\nRefer to the VirtualBox manual to learn how to create virtual machines.\n\nA security feature in Wayland (i.e. when using GDM) disallows VirtualBox to grab all keyboard input. This is annoying when you want to pass window manager shortcuts to your guest operating system. It can be bypassed by whitelisting VirtualBox:\n\n```\n$ gsettings get org.gnome.mutter.wayland xwayland-grab-access-rules\n$ gsettings set org.gnome.mutter.wayland xwayland-grab-access-rules \"['VirtualBox Machine']\"\n```\n\nThe first command will show if any other applications are already whitelisted. If so, add VirtualBox Machine to that list, rather than having it as the only one.\n\n"
    },
    {
      "title": "Installation steps for Arch Linux guests",
      "level": 2,
      "content": "See VirtualBox/Install Arch Linux as a guest.\n\n"
    },
    {
      "title": "Virtual disks management",
      "level": 2,
      "content": "See also #Import/export VirtualBox virtual machines from/to other hypervisors.\n\n"
    },
    {
      "title": "Formats supported by VirtualBox",
      "level": 3,
      "content": "VirtualBox supports the following virtual disk formats:\n\n- VDI: The Virtual Disk Image is the VirtualBox own open container used by default when you create a virtual machine with VirtualBox.\n- VMDK: The Virtual Machine Disk has been initially developed by VMware for their products. The specification was initially closed source, but has since become an open format which is fully supported by VirtualBox. This format offers the ability to be split into several 2GB files. This feature is especially useful if you want to store the virtual machine on machines which do not support very large files. Other formats, excluding the HDD format from Parallels, do not provide such an equivalent feature.\n- VHD: The Virtual Hard Disk is the format used by Microsoft in Windows Virtual PC and Hyper-V. If you intend to use any of these Microsoft products, you will have to choose this format.\n\n- VHDX (read only): This is the eXtended version of the Virtual Hard Disk format developed by Microsoft, which has been released on 2012-09-04 with Hyper-V 3.0 coming with Windows Server 2012. This new version of the disk format does offer enhanced performance (better block alignment), larger blocks size, and journal support which brings power failure resiliency. VirtualBox should support this format in read only.\n- HDD (version 2): The HDD format is developed by Parallels Inc and used in their hypervisor solutions like Parallels Desktop for Mac. Newer versions of this format (i.e. 3 and 4) are not supported due to the lack of documentation for this proprietary format. Note: There is currently a controversy regarding the support of the version 2 of the format. While the official VirtualBox manual only reports the second version of the HDD file format as supported, Wikipedia's contributors are reporting the first version may work too. Help is welcome if you can perform some tests with the first version of the HDD format.\n- QED: The QEMU Enhanced Disk format is an old file format for QEMU, another free and open source hypervisor. This format was designed from 2010 in a way to provide a superior alternative to QCOW2 and others. This format features a fully asynchronous I/O path, strong data integrity, backing files, and sparse files. QED format is supported only for compatibility with virtual machines created with old versions of QEMU.\n- QCOW: The QEMU Copy On Write format is the current format for QEMU. The QCOW format does support zlib-based transparent compression and encryption (the latter is flawed and is not recommended). QCOW is available in two versions: QCOW and QCOW2. QCOW2 tends to supersede the first one. QCOW is currently fully supported by VirtualBox. QCOW2 comes in two revisions: QCOW2 0.10 and QCOW2 1.1 (which is the default when you create a virtual disk with QEMU). VirtualBox does not support QCOW2.\n- OVF: The Open Virtualization Format is an open format which has been designed for interoperability and distributions of virtual machines between different hypervisors. VirtualBox supports all revisions of this format via the VBoxManage import/export feature but with known limitations.\n- RAW: This is the mode when the virtual disk is exposed directly to the disk without being contained in a specific file format container. VirtualBox supports this feature in several ways: converting RAW disk to a specific format, or by cloning a disk to RAW, or by using directly a VMDK file which points to a physical disk or a simple file.\n\n"
    },
    {
      "title": "Disk image format conversion",
      "level": 3,
      "content": "VBoxManage clonehd can be used to convert between VDI, VMDK, VHD and RAW.\n\n```\n$ VBoxManage clonehd inputfile outputfile --format outputformat\n```\n\nFor example to convert VDI to VMDK:\n\n```\n$ VBoxManage clonehd source.vdi destination.vmdk --format VMDK\n```\n\n"
    },
    {
      "title": "QCOW",
      "level": 4,
      "content": "VirtualBox does not support QEMU's QCOW2 disk image format. To use a QCOW2 disk image with VirtualBox you therefore need to convert it, which you can do with qemu-img. qemu-img can convert QCOW to / from VDI, VMDK, VHDX, RAW and various other formats (which you can see by running qemu-img --help).\n\n```\n$ qemu-img convert -O output_fmt inputfile outputfile\n```\n\nFor example to convert QCOW2 to VDI:\n\n```\n$ qemu-img convert -O vdi source.qcow2 destination.vdi\n```\n\nThere are two revisions of QCOW2: 0.10 and 1.1. You can specify the revision to use with -o compat=revision.\n\n"
    },
    {
      "title": "VDI",
      "level": 4,
      "content": "Mounting VDI images only works with fixed size images (a.k.a. static images); dynamic (dynamically size allocating) images are not easily mountable.\n\nThe offset of the partition (within the VDI) is needed, then add the value of offData to 32256 (e.g. 69632 + 32256 = 101888):\n\n```\n$ VBoxManage internalcommands dumphdinfo storage.vdi | grep \"offData\"\n```\n\nThe storage can now be mounted with:\n\n```\n# mount -t ext4 -o rw,noatime,noexec,loop,offset=101888 storage.vdi /mntpoint/\n```\n\nFor VDI disks with more partitions you can also use losetup:\n\n```\n# losetup -o $offData -Pf\n```\n\nAfter this you should find the partitions under /dev/loop* (e.g. /dev/loop0p1). Then you can mount them as usual (e.g. mount mount /dev/loop0p1 /mnt/).\n\nYou can also use mount.vdi script that, which you can use as (install script itself to /usr/bin/):\n\n```\n# mount -t vdi -o fstype=ext4,rw,noatime,noexec vdi_file_location /mnt/\n```\n\nAlternately you can use the nbd kernel module and qemu-nbd from qemu-img[2]:\n\n```\n# modprobe nbd max_part=16\n# qemu-nbd -c /dev/nbd0 storage.vdi\n# mount /dev/nbd0p1 /mnt/dir/\n```\n\nAnd then to unmount:\n\n```\n# umount /mnt/dir/\n# qemu-nbd -d /dev/nbd0\n```\n\nIf the partition nodes are not propagated try using partprobe /dev/nbd0; otherwise, a VDI partition can be mapped directly to a node by: qemu-nbd -P 1 -c /dev/nbd0 storage.vdi.\n\nAnother way is to use vdfuseAUR:\n\n```\n# vdfuse -a -f storage.vdi mountpoint1\n```\n\nwhich mounts the disk in mountpoint1 with the PartitionN naming format. Each partition can then be loop-mounted in mountpoint2:\n\n```\n# mount -o loop mountpoint1/PartitionN mountpoint2\n```\n\n"
    },
    {
      "title": "VHD",
      "level": 4,
      "content": "Like VDI, VHD images can be mounted with QEMU's nbd module:\n\n```\n# modprobe nbd\n# qemu-nbd -c /dev/nbd0 storage.vhd\n# mount /dev/nbd0p1 /mnt\n```\n\nTo unmount:\n\n```\n# umount /mnt\n# qemu-nbd -d /dev/nbd0\n```\n\n"
    },
    {
      "title": "Compact virtual disks",
      "level": 3,
      "content": "Compacting virtual disks only works with .vdi files and basically consists of the following steps.\n\nBoot your virtual machine and remove all bloat manually or by using cleaning tools like bleachbit which is available for Windows systems too.\n\nWiping free space with zeroes can be achieved with several tools:\n\n- If you were previously using Bleachbit, check the checkbox System > Free disk space in the GUI, or use bleachbit -c system.free_disk_space in CLI;\n- On UNIX-based systems, by using dd or preferably dcflddAUR (see here to learn the differences):\n\n```\n# dcfldd if=/dev/zero of=/fillfile bs=4M\n```\n\n- On Windows, there are two tools available: sdelete from the Sysinternals Suite, type sdelete -s -z c:, where you need to reexecute the command for each drive you have in your virtual machine; or, if you love scripts, there is a PowerShell solution, but which still needs to be repeated for all drives.\n\n- sdelete from the Sysinternals Suite, type sdelete -s -z c:, where you need to reexecute the command for each drive you have in your virtual machine;\n- or, if you love scripts, there is a PowerShell solution, but which still needs to be repeated for all drives.\n\n```\nPS> ./Write-ZeroesToFreeSpace.ps1 -Root c:\\ -PercentFree 0\n```\n\nOnce the free disk space have been wiped, shut down your virtual machine.\n\nThe next time you boot your virtual machine, it is recommended to do a filesystem check.\n\n- On UNIX-based systems, you can use fsck manually; On GNU/Linux systems, and thus on Arch Linux, you can force a disk check at boot thanks to a kernel boot parameter;\n- On Windows systems, you can use: either chkdsk c: /F where c: needs to be replaced by each disk you need to scan and fix errors; or FsckDskAll from here which is basically the same software as chkdsk, but without the need to repeat the command for all drives;\n\n- On GNU/Linux systems, and thus on Arch Linux, you can force a disk check at boot thanks to a kernel boot parameter;\n\n- either chkdsk c: /F where c: needs to be replaced by each disk you need to scan and fix errors;\n- or FsckDskAll from here which is basically the same software as chkdsk, but without the need to repeat the command for all drives;\n\nNow, remove the zeros from the .vdi file with VBoxManage modifyhd:\n\n```\n$ VBoxManage modifyhd your_disk.vdi --compact\n```\n\n"
    },
    {
      "title": "TRIM",
      "level": 4,
      "content": "VirtualBox offers simulation of TRIM in VDI files via an experimental \"discard\" attachment option. This option is undocumented and can be accessed by commandline or .vbox file editing. When enabled, TRIM commands from the guest operating system causes the corresponding part of the VDI file to be compacted away.\n\n"
    },
    {
      "title": "General procedure",
      "level": 4,
      "content": "If you are running out of space due to the small hard drive size you selected when you created your virtual machine, the solution adviced by the VirtualBox manual is to use VBoxManage modifyhd. However this command only works for VDI and VHD disks and only for the dynamically allocated variants. If you want to resize a fixed size virtual disk disk too, read on this trick which works either for a Windows or UNIX-like virtual machine.\n\nFirst, create a new virtual disk next to the one you want to increase:\n\n```\n$ VBoxManage createmedium disk -filename new.vdi --size 10000\n```\n\nwhere size is in MiB, in this example 10000MiB ~= 10GiB, and new.vdi is name of new hard drive to be created.\n\nNext, the old virtual disk needs to be cloned to the new one which this may take some time:\n\n```\n$ VBoxManage clonemedium disk old.vdi new.vdi --existing\n```\n\nDetach the old hard drive and attach new one, replace all mandatory italic arguments by your own:\n\n```\n$ VBoxManage storageattach virtual_machine_name --storagectl SATA --port 0 --medium none\n$ VBoxManage storageattach virtual_machine_name --storagectl SATA --port 0 --medium new.vdi --type hdd\n```\n\nTo get the storage controller name and the port number, you can use the command VBoxManage showvminfo virtual_machine_name. Among the output you will get such a result (what you are looking for is in italic):\n\n```\n[...]\nStorage Controller Name (0):            IDE\nStorage Controller Type (0):            PIIX4\nStorage Controller Instance Number (0): 0\nStorage Controller Max Port Count (0):  2\nStorage Controller Port Count (0):      2\nStorage Controller Bootable (0):        on\nStorage Controller Name (1):            SATA\nStorage Controller Type (1):            IntelAhci\nStorage Controller Instance Number (1): 0\nStorage Controller Max Port Count (1):  30\nStorage Controller Port Count (1):      1\nStorage Controller Bootable (1):        on\nIDE (1, 0): Empty\nSATA (0, 0): /home/wget/IT/Virtual_machines/GNU_Linux_distributions/ArchLinux_x64_EFI/Snapshots/{6bb17af7-e8a2-4bbf-baac-fbba05ebd704}.vdi (UUID: 6bb17af7-e8a2-4bbf-baac-fbba05ebd704)\n[...]\n```\n\nDownload GParted live image and mount it as a virtual CD/DVD disk file, boot your virtual machine, increase/move your partitions, umount GParted live and reboot.\n\nFinally, unregister the virtual disk from VirtualBox and remove the file:\n\n```\n$ VBoxManage closemedium disk old.vdi\n$ rm old.vdi\n```\n\n"
    },
    {
      "title": "Increasing the size of VDI disks",
      "level": 4,
      "content": "If your disk is a VDI one, run:\n\n```\n$ VBoxManage modifymedium disk your_virtual_disk.vdi --resize the_new_size\n```\n\nThen jump back to the Gparted step, to increase the size of the partition on the virtual disk.\n\n"
    },
    {
      "title": "Replace a virtual disk manually from the .vbox file",
      "level": 3,
      "content": "If you think that editing a simple XML file is more convenient than playing with the GUI or with VBoxManage and you want to replace (or add) a virtual disk to your virtual machine, in the .vbox configuration file corresponding to your virtual machine, simply replace the GUID, the file location and the format to your needs:\n\n```\nArchLinux_vm.vbox\n```\n\n```\n<HardDisk uuid=\"{670157e5-8bd4-4f7b-8b96-9ee412a712b5}\" location=\"ArchLinux_vm.vdi\" format=\"VDI\" type=\"Normal\"/>\n```\n\nthen in the <AttachedDevice> sub-tag of <StorageController>, replace the GUID by the new one.\n\n```\nArchLinux_vm.vbox\n```\n\n```\n<AttachedDevice type=\"HardDisk\" port=\"0\" device=\"0\">\n  <Image uuid=\"{670157e5-8bd4-4f7b-8b96-9ee412a712b5}\"/>\n</AttachedDevice>\n```\n\n"
    },
    {
      "title": "Transfer between Linux host and other operating system",
      "level": 4,
      "content": "The information about path to harddisks and the snapshots is stored between <HardDisks> .... </HardDisks> tags in the file with the .vbox extension. You can edit them manually or use this script where you will need change only the path or use defaults, assumed that .vbox is in the same directory with a virtual harddisk and the snapshots folder. It will print out new configuration to stdout.\n\n```\n#!/bin/sh\nNewPath=\"${PWD}/\"\nSnapshots=\"Snapshots/\"\nFilename=\"$1\"\n\n awk -v SetPath=\"$NewPath\" -v SnapPath=\"$Snapshots\" '{if(index($0,\"<HardDisk uuid=\") != 0){A=$3;split(A,B,\"=\");\nL=B[2];\n gsub(/\\\"/,\"\",L);\n  sub(/^.*\\//,\"\",L);\n  sub(/^.*\\\\/,\"\",L);\n if(index($3,\"{\") != 0){SnapS=SnapPath}else{SnapS=\"\"};\n  print $1\" \"$2\" location=\"\\\"SetPath SnapS L\"\\\" \"$4\" \"$5}\nelse print $0}' \"$Filename\"\n```\n\nNote: **Machine -> Add...** \n\n- If you will prepare virtual machine for use in Windows host then in the path name end you should use backslash \\ instead of / .\n- The script detects snapshots by looking for { in the file name.\n- To make it run on a new host you will need to add it first to the register by clicking on Machine -> Add... or use hotkeys Ctrl+A and then browse to .vbox file that contains configuration or use command line VBoxManage registervm filename.vbox\n\n"
    },
    {
      "title": "Clone a virtual disk and assigning a new UUID to it",
      "level": 3,
      "content": "UUIDs are widely used by VirtualBox. Each virtual machines and each virtual disk of a virtual machine must have a different UUID. When you launch a virtual machine in VirtualBox, VirtualBox will keep track of all UUIDs of your virtual machine instance. See the VBoxManage list to list the items registered with VirtualBox.\n\nIf you cloned a virtual disk manually by copying the virtual disk file, you will need to assign a new UUID to the cloned virtual drive if you want to use the disk in the same virtual machine or even in another (if that one has already been opened, and thus registered, with VirtualBox).\n\nYou can use this command to assign a new UUID to a virtual disk:\n\n```\n$ VBoxManage internalcommands sethduuid /path/to/disk.vdi\n```\n\n"
    },
    {
      "title": "Import/export VirtualBox virtual machines from/to other hypervisors",
      "level": 3,
      "content": "If you plan to use your virtual machine on another hypervisor or want to import in VirtualBox a virtual machine created with another hypervisor, you might be interested in reading the following steps.\n\n"
    },
    {
      "title": "Remove additions",
      "level": 4,
      "content": "Guest additions are available in most hypervisor solutions: VirtualBox comes with the Guest Additions, VMware with the VMware Tools, Parallels with the Parallels Tools, etc. These additional components are designed to be installed inside a virtual machine after the guest operating system has been installed. They consist of device drivers and system applications that optimize the guest operating system for better performance and usability by providing these features.\n\nIf you have installed the additions to your virtual machine, please uninstall them first. Your guest, especially if it is using an operating system from the Windows family, might behave weirdly, crash or even might not boot at all if you are still using the specific drivers in another hypervisor.\n\n"
    },
    {
      "title": "Use the right virtual disk format",
      "level": 4,
      "content": "This step will depend on the ability to convert the virtual disk image directly or not.\n\nSome companies provide tools which offer the ability to create virtual machines from a Windows or GNU/Linux operating system located either in a virtual machine or even in a native installation. With such a product, you do not need to apply this and the following steps and can stop reading here.\n\n- Parallels Transporter which is non free, is a product from Parallels Inc. This solution basically consists in an piece of software called agent that will be installed in the guest you want to import/convert. Then, Parallels Transporter, which only works on OS X, will create a virtual machine from that agent which is contacted either by USB or Ethernet network.\n- VMware vCenter Converter[dead link 2024-07-30 ⓘ] which is free upon registration on the VMware website, works nearly the same way as Parallels Transporter, but the piece of software that will gather the data to create the virtual machine only works on a Windows platform.\n\nFirst, familiarize yourself with the formats supported by VirtualBox and those supported by third-party hypervisors.\n\n- Importing or exporting a virtual machine from/to a VMware solution is not a problem at all if you use the VMDK or OVF disk format, otherwise converting VMDK to VDI and VDI to VMDK is possible and the aforementioned VMware vCenter Converter tool is available.\n- Importing or exporting from/to QEMU is not a problem neither: some QEMU formats are supported directly by VirtualBox and conversion between QCOW2 to VDI and VDI to QCOW2 is still available if needed.\n- Importing or exporting from/to Parallels hypervisor is the hardest way: Parallels does only support its own HDD format (even the standard and portable OVF format is not supported!).\n\n- To export your virtual machine to Parallels, you will need to use the Parallels Transporter tool described above.\n- To import your virtual machine to VirtualBox, you will need to use the VMware vCenter Converter described above to convert the virtual machine to the VMware format first. Then, apply the solution to migrate from VMware.\n\n"
    },
    {
      "title": "Create the virtual machine configuration for your hypervisor",
      "level": 4,
      "content": "Each hypervisor have their own virtual machine configuration file: .vbox for VirtualBox, .vmx for VMware, a config.pvs file located in the virtual machine bundle (.pvm file), etc. You will have thus to recreate a new virtual machine in your new destination hypervisor and specify its hardware configuration as close as possible as your initial virtual machine.\n\nPay a close attention to the firmware interface (BIOS or UEFI) used to install the guest operating system. While an option is available to choose between these 2 interfaces on VirtualBox and on Parallels solutions, on VMware, you will have to add manually the following line to your .vmx file.\n\n```\nArchLinux_vm.vmx\n```\n\n```\nfirmware = \"efi\"\n```\n\nFinally, ask your hypervisor to use the existing virtual disk you have converted and launch the virtual machine.\n\n- On VirtualBox, if you do not want to browse the whole GUI to find the right location to add your new virtual drive device, you can Replace a virtual disk manually from the .vbox file, or use the VBoxManage storageattach described in #Increasing the size of VDI disks or in the VirtualBox manual page.\n- Similarly, in VMware products, you can replace the location of the current virtual disk location by adapting the .vmdk file location in your .vmx configuration file.\n\n"
    },
    {
      "title": "Starting virtual machines with a service (autostart)",
      "level": 4,
      "content": "Find hereafter the implementation details of a systemd service that will be used to consider a virtual machine as a service.\n\n```\n/etc/systemd/system/vboxvmservice@.service\n```\n\n```\n[Unit]\nDescription=VBox Virtual Machine %i Service\nRequires=systemd-modules-load.service\nAfter=systemd-modules-load.service\n\n[Service]\nUser=username\nGroup=vboxusers\nExecStart=/usr/bin/VBoxManage startvm %i --type startmode\nExecStop=/usr/bin/VBoxManage controlvm %i stopmode\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\n```\n\n- Replace username with a user that is a member of the vboxusers group. Make sure the user chosen is the same user that will create/import virtual machines, otherwise the user will not see the virtual machine appliances.\n- Replace startmode with a virtual machine frontend type, usually gui, headless or separate\n- Replace stopmode with desired state switch, usually savestate or acpipowerbutton\n\nEnable the vboxvmservice@your_virtual_machine_name systemd unit in order to launch the virtual machine at next boot. To launch it directly, simply start the systemd unit.\n\nVirtualBox 4.2 introduces a new way for UNIX-like systems to have virtual machines started automatically, other than using a systemd service.\n\n"
    },
    {
      "title": "Starting virtual machines with a keyboard shortcut",
      "level": 4,
      "content": "It can be useful to start virtual machines directly with a keyboard shortcut instead of using the VirtualBox interface (GUI or CLI). For that, you can simply define key bindings in .xbindkeysrc. Please refer to Xbindkeys for more details.\n\nExample, using the Fn key of a laptop with an unused battery key (F3 on the computer used in this example):\n\n```\n\"VBoxManage startvm 'Windows 7'\"\nm:0x0 + c:244\nXF86Battery\n```\n\n"
    },
    {
      "title": "Using USB webcam / microphone",
      "level": 4,
      "content": "1. Make sure the virtual machine is not running and your webcam / microphone is not being used.\n1. Bring up the main VirtualBox window and go to settings for Arch machine. Go to USB section.\n1. Make sure \"Enable USB Controller\" is selected. Also make sure that \"Enable USB 2.0 (EHCI) Controller\" is selected too.\n1. Click the \"Add filter from device\" button (the cable with the '+' icon).\n1. Select your USB webcam/microphone device from the list.\n1. Now click OK and start your virtual machine.\n\n"
    },
    {
      "title": "Detecting web-cams and other USB devices",
      "level": 4,
      "content": "If the device that you are looking for does not show up on any of the menus in the section above and you have tried all three USB controller options, boot up your virtual machine three separate times. Once using the USB 1.1 controller, another using the USB 2.0 controller, etc. Leave the virtual machine running for at least 5 minutes after startup. Sometimes Windows will autodetect the device for you. Be sure you filter any devices that are not a keyboard or a mouse so they do not start up at boot. This ensures that Windows will detect the device at start-up.\n\n"
    },
    {
      "title": "Access a guest server",
      "level": 3,
      "content": "To access Apache server on a Virtual Machine from the host machine only, simply execute the following lines on the host:\n\n```\n$ VBoxManage setextradata GuestName \"VBoxInternal/Devices/pcnet/0/LUN#0/Config/Apache/HostPort\" 8888\n$ VBoxManage setextradata GuestName \"VBoxInternal/Devices/pcnet/0/LUN#0/Config/Apache/GuestPort\" 80\n$ VBoxManage setextradata GuestName \"VBoxInternal/Devices/pcnet/0/LUN#0/Config/Apache/Protocol\" TCP\n```\n\nwhere 8888 is the port the host should listen on and 80 is the port the virtual machine will send Apache's signal on.\n\nTo use a port lower than 1024 on the host machine, changes need to be made to the firewall on that host machine. This can also be set up to work with SSH or any other services by changing \"Apache\" to the corresponding service and ports.\n\nTo communicate between the VirtualBox guest and host using ssh, the server port must be forwarded under Settings > Network. When connecting from the client/host, connect to the IP address of the client/host machine, as opposed to the connection of the other machine. This is because the connection will be made over a virtual adapter.\n\n"
    },
    {
      "title": "D3D acceleration in Windows guests",
      "level": 3,
      "content": "Recent versions of VirtualBox have support for accelerating OpenGL inside guests. This can be enabled with a simple checkbox in the machine's settings, right below where video ram is set, and installing the VirtualBox guest additions. However, most Windows games use Direct3D (part of DirectX), not OpenGL, and are thus not helped by this method. However, it is possible to gain accelerated Direct3D in your Windows guests by borrowing the d3d libraries from Wine, which translate d3d calls into OpenGL, which is then accelerated. These libraries are now part of VirtualBox guest additions.\n\nAfter enabling OpenGL acceleration as described above, reboot the guest into safe mode (press F8 before the Windows screen appears but after the VirtualBox screen disappears), and install VirtualBox guest additions, during install enable checkbox Direct3D support. Reboot back to normal mode and you should have accelerated Direct3D.\n\n- This hack may or may not work for some games depending on what hardware checks they make and what parts of D3D they use.\n- This was tested on Windows XP, 7 and 8.1. If method does not work on your Windows version please add data here.\n\n"
    },
    {
      "title": "VirtualBox on a USB key",
      "level": 3,
      "content": "When using VirtualBox on a USB key, for example to start an installed machine with an ISO image, you will manually have to create VMKDs from the existing drives. However, once the new VMDKs are saved and you move on to another machine, you may experience problems launching an appropriate machine again. To get rid of this issue, you can use the following script to launch VirtualBox. This script will clean up and unregister old VMDK files and it will create new, proper VMDKs for you:\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\n```\n#!/bin/sh\n# Erase old VMDK entries\nrm ~/.VirtualBox/*.vmdk\n\n# Clean up VBox-Registry\nsed -i '/sd/d' ~/.VirtualBox/VirtualBox.xml\n\n# Remove old harddisks from existing machines\nfind ~/.VirtualBox/Machines -name \\*.xml | while read -r file; do\n  line=$(grep -e \"type\\=\\\"HardDisk\\\"\" -n \"$file\" | cut -d ':' -f 1)\n  if [ -n \"$line\" ]; then\n    sed -i \"${line}\"d \"$file\"\n    sed -i \"${line}\"d \"$file\"\n    sed -i \"${line}\"d \"$file\"\n  fi\n  sed -i \"/rg/d\" \"$file\"\ndone\n\n# Delete prev-files created by VirtualBox\nfind ~/.VirtualBox/Machines -name \\*-prev -exec rm '{}' \\;\n\n# Recreate VMDKs\nls -l /dev/disk/by-uuid | cut -d ' ' -f 9,11 | while read -r ln; do\n  if [ -n \"$ln\" ]; then\n    uuid=$(echo \"$ln\" | cut -d ' ' -f 1)\n    device=$(echo \"$ln\" | cut -d ' ' -f 2 | cut -d '/' -f 3 | cut -b 1-3)\n\n    # determine whether drive is mounted already\n    checkstr1=$(mount | grep \"$uuid\")\n    checkstr2=$(mount | grep \"$device\")\n    checkstr3=$(ls ~/.VirtualBox/*.vmdk | grep \"$device\")\n    if [ -z \"$checkstr1\" ] && [ -z \"$checkstr2\" ] && [ -z \"$checkstr3\" ]; then\n      VBoxManage internalcommands createrawvmdk -filename ~/.VirtualBox/\"$device\".vmdk -rawdisk /dev/\"$device\" -register\n    fi\n  fi\ndone\n\n# Start VirtualBox\nVirtualBox\n```\n\nNote that your user has to be added to the \"disk\" group to create VMDKs out of existing drives.\n\n"
    },
    {
      "title": "Run a native Arch Linux installation inside VirtualBox",
      "level": 3,
      "content": "If you have a dual boot system between Arch Linux and another operating system, it can become tedious to switch back and forth if you need to work in both. You may also experience performance or compatibility issues when using a virtual machine, which can impact your ability to do certain tasks.\n\nThis guide will let you reuse, in a virtual machine, your native Arch Linux installation when you are running your second operating system. This way, you keep the ability to run each operating system natively, but have the option to run your Arch Linux installation inside a virtual machine.\n\n"
    },
    {
      "title": "Make sure you have a persistent naming scheme",
      "level": 4,
      "content": "Depending on your hard drive setup, device files representing your hard drives may appear differently when you will run your Arch Linux installation natively or in virtual machine. This problem occurs when using FakeRAID for example. The fake RAID device will be mapped in /dev/mapper/ when you run your GNU/Linux distribution natively, while the devices are still accessible separately. However, in your virtual machine, it can appear without any mapping in /dev/sdaX for example, because the drivers controlling the fake RAID in your host operating system (e.g. Windows) are abstracting the fake RAID device.\n\nTo circumvent this problem, we will need to use an addressing scheme that is persistent to both systems. This can be achieved using UUIDs. Make sure your boot loader and fstab file is using UUIDs, otherwise fix this issue. Read fstab and Persistent block device naming.\n\n- Make sure your host partition is only accessible in read only from your Arch Linux virtual machine, this will avoid risk of corruptions if you were to corrupt that host partition by writing on it due to lack of attention.\n- You should NEVER allow VirtualBox to boot from the entry of your second operating system, which, as a reminder, is used as the host for this virtual machine! Take thus a special care especially if your default boot loader/boot manager entry is your other operating system. Give a more important timeout or put it below in the order of preferences.\n\n"
    },
    {
      "title": "Make sure your mkinitcpio image is correct",
      "level": 4,
      "content": "Make sure your mkinitcpio configuration uses the HOOK block:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\n...\nHOOKS=(base udev autodetect microcode modconf kms keyboard keymap consolefont block filesystems fsck)\n...\n```\n\nIf it is not present, add it and regenerate the initramfs.\n\n"
    },
    {
      "title": "Create a virtual machine configuration to boot from the physical drive",
      "level": 4,
      "content": "Now, we need to create a new virtual machine which will use a RAW disk as virtual drive, for that we will use a ~ 1Kio VMDK file which will be mapped to a physical disk. Unfortunately, VirtualBox does not have this option in the GUI, so we will have to use the console and use an internal command of VBoxManage.\n\nBoot the host which will use the Arch Linux virtual machine. The command will need to be adapted according to the host you have.\n\nThere are 3 ways to achieve this: login as root, changing the access right of the device with chmod, adding your user to the disk group. The latter way is the more elegant, let us proceed that way:\n\n```\n# gpasswd -a your_user disk\n```\n\nApply the new group settings with:\n\n```\n$ newgrp\n```\n\nNow, you can use the command:\n\n```\n$ VBoxManage internalcommands createrawvmdk -filename /path/to/file.vmdk -rawdisk /dev/sdb -register\n```\n\nAdapt the above command to your need, especially the path and filename of the VMDK location and the raw disk location to map which contain your Arch Linux installation.\n\nOpen a command prompt must be run as administrator.\n\nOn Windows, as the disk filename convention is different from UNIX, use this command to determine what drives you have in your Windows system and their location:\n\n```\n# wmic diskdrive get name,size,model\n```\n\n```\nModel                               Name                Size\nWDC WD40EZRX-00SPEB0 ATA Device     \\\\.\\PHYSICALDRIVE1  4000783933440\nKINGSTON SVP100S296G ATA Device     \\\\.\\PHYSICALDRIVE0  96024821760\nHitachi HDT721010SLA360 ATA Device  \\\\.\\PHYSICALDRIVE2  1000202273280\nInnostor Ext. HDD USB Device        \\\\.\\PHYSICALDRIVE3  1000202273280\n```\n\nIn this example, as the Windows convention is \\\\.\\PhysicalDriveX where X is a number from 0, \\\\.\\PHYSICALDRIVE1 could be analogous to /dev/sdb from the Linux disk terminology.\n\nTo use the VBoxManage command on Windows, you can either, change the current directory to your VirtualBox installation folder first with cd C:\\Program Files\\Oracle\\VirtualBox\\\n\n```\n# .\\VBoxManage.exe internalcommands createrawvmdk -filename C:\\file.vmdk -rawdisk \\\\.\\PHYSICALDRIVE1\n```\n\nor use the absolute path name:\n\n```\n# \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" internalcommands createrawvmdk -filename C:\\file.vmdk -rawdisk \\\\.\\PHYSICALDRIVE1\n```\n\nThere are other limitations regarding the aforementioned command when used in other operating systems like OS X, please thus read carefully the manual page, if you are concerned.\n\n- To make use of the VBoxManage command on Windows, you need to change the current directory to your VirtualBox installation folder first: cd C:\\Program Files\\Oracle\\VirtualBox\\.\n- Windows makes use of backslashes instead of slashes, please replace all slashes \"/\" occurrences by backslashes \"\\\" in the commands that follow when you will use them.\n\nAfter, we need to create a new machine (replace the virtual_machine_name to your convenience) and register it with VirtualBox.\n\n```\n$ VBoxManage createvm -name virtual_machine_name -register\n```\n\nThen, the newly raw disk needs to be attached to the machine. This will depend if your computer or actually the root of your native Arch Linux installation is on an IDE or a SATA controller.\n\nIf you need an IDE controller:\n\n```\n$ VBoxManage storagectl virtual_machine_name --name \"IDE Controller\" --add ide\n$ VBoxManage storageattach virtual_machine_name --storagectl \"IDE Controller\" --port 0 --device 0 --type hdd --medium /path/to/file.vmdk\n```\n\notherwise:\n\n```\n$ VBoxManage storagectl virtual_machine_name --name \"SATA Controller\" --add sata\n$ VBoxManage storageattach virtual_machine_name --storagectl \"SATA Controller\" --port 0 --device 0 --type hdd --medium /path/to/file.vmdk\n```\n\nWhile you continue using the CLI, it is recommended to use the VirtualBox GUI, to personalise the virtual machine configuration. Indeed, you must specify its hardware configuration as close as possible as your native machine: turning on the 3D acceleration, increasing video memory, setting the network interface, etc.\n\nFinally, you may want to seamlessly integrate your Arch Linux with your host operating system and allow copy pasting between both operating systems. Please refer to VirtualBox/Install Arch Linux as a guest#Install the Guest Additions for that, since this Arch Linux virtual machine is basically an Arch Linux guest.\n\n"
    },
    {
      "title": "Install a native Arch Linux system from VirtualBox",
      "level": 3,
      "content": "In some cases it may be useful to install a native Arch Linux system while running another operating system: one way to accomplish this is to perform the installation through VirtualBox on a raw disk. If the existing operating system is Linux based, you may want to consider following Install from existing Linux instead.\n\nThis scenario is very similar to #Run a native Arch Linux installation inside VirtualBox, but will follow those steps in a different order: start by #Create a raw disk VMDK image, then #Create the virtual machine configuration file.\n\nNow, you should have a working virtual machine configuration whose virtual VMDK disk is tied to a real disk. The installation process is exactly the same as the steps described in VirtualBox/Install Arch Linux as a guest, but #Make sure you have a persistent naming scheme and #Make sure your mkinitcpio image is correct.\n\n- For BIOS systems and MBR disks, do not install a boot loader inside your virtual machine, this will not work since the MBR is not linked to the MBR of your real machine and your virtual disk is only mapped to a real partition without the MBR.\n- For UEFI systems without CSM and GPT disks, the installation will not work at all since: the EFI system partition is not mapped to your virtual disk and Arch Linux requires to have the Linux kernel on it to boot as an EFI application (see EFI boot stub for details); and the efivars, if you are installing Arch Linux using the EFI mode brought by VirtualBox, are not the one of your real system: the bootmanager entries will hence not be registered.\n- This is why, it is recommended to create your partitions in a native installation first, otherwize the partitions will not be taken into consideration in your MBR/GPT partition table.\n\n- the EFI system partition is not mapped to your virtual disk and Arch Linux requires to have the Linux kernel on it to boot as an EFI application (see EFI boot stub for details);\n- and the efivars, if you are installing Arch Linux using the EFI mode brought by VirtualBox, are not the one of your real system: the bootmanager entries will hence not be registered.\n\nAfter completing the installation, boot your computer natively with an GNU/Linux installation media (whether it be Arch Linux or not), chroot into your installed Arch Linux installation and install and configure a boot loader.\n\n"
    },
    {
      "title": "Install MacOS guest",
      "level": 3,
      "content": "Before starting the virtual machine, run the following commands on the host machine [3]:\n\n```\n$ VBoxManage modifyvm \"MyMacVM\" --cpuid-set 00000001 000106e5 00100800 0098e3fd bfebfbff\n$ VBoxManage setextradata \"MyMacVM\" \"VBoxInternal/Devices/efi/0/Config/DmiSystemProduct\" \"iMac11,3\"\n$ VBoxManage setextradata \"MyMacVM\" \"VBoxInternal/Devices/efi/0/Config/DmiSystemVersion\" \"1.0\"\n$ VBoxManage setextradata \"MyMacVM\" \"VBoxInternal/Devices/efi/0/Config/DmiBoardProduct\" \"Iloveapple\"\n$ VBoxManage setextradata \"MyMacVM\" \"VBoxInternal/Devices/smc/0/Config/DeviceKey\" \"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\"\n$ VBoxManage setextradata \"MyMacVM\" \"VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC\" 1\n$ VBoxManage setextradata \"MyMacVM\" VBoxInternal2/EfiGopMode 4\n```\n\nIf you use an AMD processor and the first boot gets stuck, you also have to run\n\n```\n$ VBoxManage modifyvm \"MyMacVM\" --cpu-profile \"Intel Core i7-6700K\"\n```\n\n"
    },
    {
      "title": "No keyboard/mouse input when attempting to install Mojave",
      "level": 4,
      "content": "If you are attempting to install Mojave, after doing the aforementioned steps, the installer will load up but you might not be able to send keyboard or mouse input. The reason seems to be that Mojave no longer supports the USB 1.1 controllers and in order to fix the issue you need to emulating USB 3.0. To do that first install the extension pack.\n\nThen go to Machine > Settings > USB and select USB 3.0. Input should work from this point onwards.\n\n"
    },
    {
      "title": "UEFI interactive shell after restart",
      "level": 4,
      "content": "If the installer is unable to properly format the bootable drive during installation and you end up in an UEFI shell, enter the following:\n\n1. Type exit at the UEFI prompt\n1. Select Boot Maintenance Manager\n1. Select Boot From File\n\nYou will now be brought to couple of obscure PCI paths. The first one is the one that you just attempted to boot from and it did not work. The second (or third) one should be the one with the MacOS recovery partition that you need to load to continue the installation. Click the second Entry. If it is empty, press Esc to go back and select the third entry. Once you get one with folders click though the folders. It should be something like macOS Install Data > Locked Files > Boot Files > boot.efi. Once you click enter on the boot.efi you should boot into the MacOS installer and resume installation. Note that some of the subdirectories might be missing. Remember that you need to get to a boot.efi.[4]\n\n"
    },
    {
      "title": "Move a native Windows installation to a virtual machine",
      "level": 3,
      "content": "If you want to migrate an existing native Windows installation to a virtual machine which will be used with VirtualBox on GNU/Linux, this use case is for you. This section only covers native Windows installation using the MSDOS/Intel partition scheme. Your Windows installation must reside on the first MBR partition for this operation to success. Operation for other partitions are available but have been untested (see #Known limitations for details).\n\nA couple of tasks are required to be done inside your native Windows installation first, then on your GNU/Linux host.\n\n"
    },
    {
      "title": "Tasks on Windows",
      "level": 4,
      "content": "The first three following points comes from this outdated VirtualBox wiki page, but are updated here.\n\n- Remove IDE/ATA controllers checks (Windows XP only): Windows memorize the IDE/ATA drive controllers it has been installed on and will not boot if it detects these have changed. The solution proposed by Microsoft is to reuse the same controller or use one of the same serial, which is impossible to achieve since we are using a Virtual Machine. MergeIDE, a German tool, developped upon another other solution proposed by Microsoft can be used. That solution basically consists in taking all IDE/ATA controller drivers supported by Windows XP from the initial driver archive (the location is hard coded, or specify it as the first argument to the .bat script), installing them and registering them with the regedit database.\n- Use the right type of Hardware Abstraction Layer (old 32 bits Windows versions): Microsoft ships 3 default versions: Hal.dll (Standard PC), Halacpi.dll (ACPI HAL) and Halaacpi.dll (ACPI HAL with IO APIC). Your Windows install could come installed with the first or the second version. In that way, please disable the Enable IO/APIC VirtualBox extended feature.\n- Disable any AGP device driver (only outdated Windows versions): If you have the files agp440.sys or intelppm.sys inside the C:\\Windows\\SYSTEM32\\drivers\\ directory, remove it. As VirtualBox uses a PCI virtual graphics card, this can cause problems when this AGP driver is used.\n- Create a Windows recovery disk: In the following steps, if things turn bad, you will need to repair your Windows installation. Make sure you have an install media at hand, or create one with Create a recovery disk from Vista SP1, Create a system repair disc on Windows 7 or Create a recovery drive on Windows 8.x).\n\n"
    },
    {
      "title": "Using Disk2vhd to clone Windows partition",
      "level": 4,
      "content": "Boot into Windows, clean up the installation (with CCleaner for example), use disk2vhd tool to create a VHD image. Include a reserved system partition (if present) and the actual Windows partition (usually disk C:). The size of Disk2vhd-created image will be the sum of the actual files on the partition (used space), not the size of a whole partition. If all goes well, the image should just boot in a virtual machine and you will not have to go through the hassle with MBR and Windows boot loader, as in the case of cloning an entire partition.\n\n"
    },
    {
      "title": "Tasks on GNU/Linux",
      "level": 4,
      "content": "- Reduce the native Windows partition size to the size Windows actually needs with ntfsresize available from ntfs-3g. The size you will specify will be the same size of the VDI that will be created in the next step. If this size is too low, you may break your Windows install and the latter might not boot at all.\n\n```\n# ntfsresize --no-action --size 52Gi /dev/sda1\n```\n\n- Install VirtualBox on your GNU/Linux host (see #Installation steps for Arch Linux hosts if your host is Arch Linux).\n\n- Create the Windows disk image from the beginning of the drive to the end of the first partition where is located your Windows installation. Copying from the beginning of the disk is necessary because the MBR space at the beginning of the drive needs to be on the virtual drive along with the Windows partition. In this example two following partitions sda2 and sda3will be later removed from the partition table and the MBR boot loader will be updated.\n\n```\n# sectnum=$(( $(cat /sys/block/sda/sda1/start) + $(cat /sys/block/sda/sda1/size) ))\n```\n\n```\n# dd if=/dev/sda bs=512 count=$sectnum | VBoxManage convertfromraw stdin windows.vdi $(( $sectnum * 512 ))\n```\n\n- Since you created your disk image as root, set the right ownership to the virtual disk image: # chown your_user:your_group windows.vdi\n\n```\n# chown your_user:your_group windows.vdi\n```\n\n- Create your virtual machine configuration file and use the virtual disk created previously as the main virtual hard disk.\n\n- Try to boot your Windows virtual machine, it may just work. First though remove and repair disks from the boot process as it may interfere (and likely will) booting into safe-mode.\n\n- Attempt to boot your Windows virtual machine in safe mode (press the F8 key before the Windows logo shows up)... if running into boot issues, read #Fix MBR and Microsoft boot loader. In safe-mode, drivers will be installed likely by the Windows plug-and-play detection mechanism view. Additionally, install the VirtualBox Guest Additions via the menu Devices > Insert Guest Additions CD image.... If a new disk dialog does not appear, navigate to the CD drive and start the installer manually.\n\n- You should finally have a working Windows virtual machine. Do not forget to read the #Known limitations.\n\n- Performance tip: according to VirtualBox manual, SATA controller has a better performance than IDE. If you cannot boot Windows off virtual SATA controller right away, it is probably due to the lack of SATA drivers. Attach virtual disk to IDE controller, create an empty SATA controller and boot the virtual machine - Windows should automatically install SATA drivers for the controller. You can then shutdown the virtual machine, detach virtual disk from IDE controller and attach it to SATA controller instead.\n\n"
    },
    {
      "title": "Fix MBR and Microsoft boot loader",
      "level": 4,
      "content": "If your Windows virtual machine refuses to boot, you may need to apply the following modifications to your virtual machine.\n\n- Boot a GNU/Live live distribution inside your virtual machine before Windows starts up.\n\n- Remove other partitions entries from the virtual disk MBR. Indeed, since we copied the MBR and only the Windows partition, the entries of the other partitions are still present in the MBR, but the partitions are not available anymore. Use fdisk to achieve this for example.\n\n```\nfdisk ''/dev/sda''\nCommand (m for help): a\nPartition number (''1-3'', default ''3''): ''1''\n```\n\n- Write the updated partition table to the disk (this will recreate the MBR) using the m command inside fdisk.\n\n- Use testdisk (see here for details) to add a generic MBR:\n\n```\n# testdisk > Disk /dev/sda... > [Proceed] > [Intel] Intel/PC partition > [MBR Code] Write TestDisk MBR to first sector > Write a new copy of MBR code to first sector? (Y/n) > Y > Write a new copy of MBR code, confirm? (Y/N) > A new copy of MBR code has been written. You have to reboot for the change to take effect. > [OK]\n```\n\n- With the new MBR and updated partition table, your Windows virtual machine should be able to boot. If you are still encountering issues, boot your Windows recovery disk from on of the previous step, and inside your Windows RE environment, execute the commands described here.\n\n"
    },
    {
      "title": "Known limitations",
      "level": 4,
      "content": "- Your virtual machine can sometimes hang and overrun your RAM, this can be caused by conflicting drivers still installed inside your Windows virtual machine. Good luck to find them!\n- Additional software expecting a given driver beneath may either not be disabled/uninstalled or needs to be uninstalled first as the drivers that are no longer available.\n- Your Windows installation must reside on the first partition for the above process to work. If this requirement is not met, the process might be achieved too, but this had not been tested. This will require either copying the MBR and editing in hexadecimal see VirtualBox: booting cloned disk or will require to fix the partition table manually or by repairing Windows with the recovery disk you created in a previous step. Let us consider our Windows installation on the second partition; we will copy the MBR, then the second partition where to the disk image. VBoxManage convertfromraw needs the total number of bytes that will be written: calculated thanks to the size of the MBR (the start of the first partition) plus the size of the second (Windows) partition. { dd if=/dev/sda bs=512 count=$(cat /sys/block/sda/sda1/start) ; dd if=/dev/sda2 bs=512 count=$(cat /sys/block/sda/sda2/size) ; } | VBoxManage convertfromraw stdin windows.vdi $(( ($(cat /sys/block/sda/sda1/start) + $(cat /sys/block/sda/sda2/size)) * 512 )).\n\n"
    },
    {
      "title": "Run a native Windows installation inside VirtualBox",
      "level": 3,
      "content": "In some cases, it is useful to be able to dual boot with Windows and access the partition in a virtual machine. This process is significantly different from #Move a native Windows installation to a virtual machine in several ways:\n\n- The Windows partition is not copied to a virtual disk image. Instead, a raw VMDK file is created;\n- Changes in the virtual machine will be mirrored in the partition, and vice versa;\n- OEM licenses should still be satisfied, since the Windows partition still boots directly on the hardware.\n\n"
    },
    {
      "title": "Creating the virtual machine",
      "level": 4,
      "content": "A VirtualBox virtual machine must be manually created. As of now do not add any storage device any disk to the virtual machine, it will be done manually later.\n\nConfigure the virtual machine with the following settings (settings panel can be opened by clicking the \"Settings\" button in the main toolbar):\n\n- View: System: Tab: Motherboard: mark Enable I/O APIC; mark Enable EFI; mark Hardware Clock in UTC Time if is your case. Tab: Processor: mark Enable PAE/NX; mark Enable Nested VT-x/AMD-V; Tab: Acceleration: Choose the paravirtualization interface Hyper-V from the drop down menu; mark Enable Nested Paging.\n\n- Tab: Motherboard: mark Enable I/O APIC; mark Enable EFI; mark Hardware Clock in UTC Time if is your case.\n- Tab: Processor: mark Enable PAE/NX; mark Enable Nested VT-x/AMD-V;\n- Tab: Acceleration: Choose the paravirtualization interface Hyper-V from the drop down menu; mark Enable Nested Paging.\n\n- mark Enable I/O APIC;\n- mark Enable EFI;\n- mark Hardware Clock in UTC Time if is your case.\n\n- mark Enable PAE/NX;\n- mark Enable Nested VT-x/AMD-V;\n\n- Choose the paravirtualization interface Hyper-V from the drop down menu;\n- mark Enable Nested Paging.\n\nOptionally you can enable also the following settings:\n\n- View: Display Tab: Screen mark Enable 3D Acceleration. Note that it could cause glitches.\n\n- Tab: Screen mark Enable 3D Acceleration. Note that it could cause glitches.\n\n- mark Enable 3D Acceleration. Note that it could cause glitches.\n\n"
    },
    {
      "title": "Creating virtual machine disks",
      "level": 4,
      "content": "To access the Windows partitions, create a raw VMDK file pointing to the relevant Windows partitions (root privileges are required to read disk partition table):\n\n```\n# VBoxManage createmedium disk -filename VM_DIRECTORY/windows.vmdk --format=VMDK --variant RawDisk --property RawDrive=DISK --property Partitions=RESERVED_PARTITION_NUMBER,BASIC_DATA_PARTITION_NUMBER\n```\n\nReplace capitalized placeholder strings as follow:\n\n- VM_DIRECTORY with the path of the virtual machine folder (usually a subdirectory of ~/VirtualBox VMs;\n- DISK must be replaced with the block device containing all the Windows partitions (e.g.: /dev/sda or /dev/nvme0n1);\n- RESERVED_PARTITION_NUMBER must be replaced with the number of partition labeled \"Microsoft reserved partition\" (e.g.: if the partition is the /dev/sda2 the number will be 2);\n- BASIC_DATA_PARTITION_NUMBER must be replaced with the partition containing the Windows installation (e.g.: if the partition is the /dev/sda3 the number will be 3);\n\nExample:\n\n```\n$ sudo VBoxManage createmedium disk -filename \"/home/user/VirtualBox VMs/windows.vmdk\" --format=VMDK --variant RawDisk --property RawDrive=/dev/nvme0n1 --property Partitions=2,3\n```\n\nThe command will also create an extra file inside the virtual machine folder, \"windows-pt.vmdk\", that will be just ignored.\n\nNote: Partition numbers can be found also by running this command and looking at the MIN column:\n\nPartition numbers can be found also by running this command and looking at the MIN column:\n\n```\nlsblk --output NAME,PARTLABEL,FSTYPE,MAJ:MIN,SIZE\n```\n\n```\nNAME        PARTLABEL                    FSTYPE UUID                                 MAJ:MIN   SIZE\nnvme0n1                                                                              259:0   931,5G\n├─nvme0n1p1 EFI system partition         vfat   90DC-A6B3                            259:1     100M\n├─nvme0n1p2 Microsoft reserved partition                                             259:2      16M\n├─nvme0n1p3 Basic data partition         ntfs   D2A2A104A2A0EE63                     259:3     200G\n...\n```\n\nNow change the virtual disk owner to give access the user and group running VirtualBox.\n\n```\n# chown VIRTUALBOX_RUNNING_USER:VIRTUALBOX_RUNNING_GROUP VM_DIRECTORY/windows.vmdk VM_DIRECTORY/windows-pt.vmdk\n```\n\nReplace VIRTUALBOX_RUNNING_USER and VIRTUALBOX_RUNNING_GROUP with the user and the group that will run VirtualBox, which most likely will be your user.\n\n"
    },
    {
      "title": "Allowing VirtualBox to read physical partitions",
      "level": 4,
      "content": "VirtualBox must have raw disk access in order to run a Windows partition. Normally, this would require VirtualBox to be run with full root privileges, but more elegant options are available.\n\nHere udev is configured to restrict the access to partitions Windows partitions to the vboxusers group, and then the user running VirtualBox is added to the group.\n\nAssigning the disks to the vboxusers group can be done automatically by creating the following file:\n\n```\n/etc/udev/rules.d/99-vbox.rules\n```\n\n```\n#\n# Rules to give VirtualBox users raw access to Windows partitions\n#\n\n# Microsoft Reserved partition\nSUBSYSTEM==\"block\", ENV{ID_PART_ENTRY_TYPE}==\"e3c9e316-0b5c-4db8-817d-f92df00215ae\", GROUP=\"vboxusers\"\n\n# Windows partition\nSUBSYSTEM==\"block\", ENV{ID_PART_ENTRY_TYPE}==\"ebd0a0a2-b9e5-4433-87c0-68b6b72699c7\", GROUP=\"vboxusers\"\n\n#\n# Rules to give VirtualBox users raw access to Windows disk\n#\n\n# sdb\nENV{ID_PART_TABLE_UUID}==\"WINDOWS_DISK_ID_PART_TABLE_UUID\", GROUP=\"vboxusers\"\n```\n\nWINDOWS_DISK_ID_PART_TABLE_UUID must be replaced with the value obtained from udevadm info /dev/WINDOWS_DISK (replace WINDOWS_DISK with the disk containing Windows partitions). The UUIDs in these rules correspond to particular GPT partition types while the other capitalized strings are supposed to be written that way, so those does not have to be replaced.\n\nThen the user running VirtualBox must be added to the vboxusers group. This can be done with the following command:\n\n```\n# usermod -aG vboxusers VIRTUALBOX_RUNNING_USER\n```\n\nReplace VIRTUALBOX_RUNNING_USER and with the user that will run VirtualBox, which most likely will be your user.\n\nTo be able to add the VMDK file in VirtualBox Virtual Media Manager without running VirtualBox as root, the user running VirtualBox need to be in vboxusers and disk groups.\n\n```\n# usermod -aG disk,vboxusers VIRTUALBOX_RUNNING_USER\n```\n\nReplace VIRTUALBOX_RUNNING_USER and with the user that will run VirtualBox, which most likely will be your user.\n\n"
    },
    {
      "title": "Setting up a separate EFI system partition",
      "level": 4,
      "content": "Virtual machine EFI boot files will refer to different disks than the ones in the physical EFI system partition, so VirtualBox must not make use of the latter but instead of an EFI system partition inside a dedicated virtual disk. This disk can be created with the following command:\n\n```\n$ VBoxManage createmedium disk --filename VM_DIRECTORY/esp.vmdk --size 512 --format VMDK\n```\n\nReplace VM_DIRECTORY with the folder containing the virtual machine being built.\n\n"
    },
    {
      "title": "Adding virtual disks to the virtual machine",
      "level": 4,
      "content": "Configure the virtual machine storage devices (Settings panel - Storage) as following:\n\n- add esp.vmdk as a SATA hard disk attached to the \"SATA Port 0\";\n- add windows.vmdk as a SATA hard disk attached to the \"SATA Port 1\";\n- mount Windows installation iso into the virtual optical drive .\n\n- for adding a SATA hard disk use the second button on the right of the \"Controller: SATA\" device;\n- the virtual optical drive should already be there as \"Optical Drive\".\n\n"
    },
    {
      "title": "Configuring the virtual UEFI firmware and creating Windows boot files",
      "level": 4,
      "content": "Now start the virtual machine and it should automatically boot from Windows installation disk. After choosing the installation locales click on the \"Repair your computer\" link, then choose \"Troubleshoot\" and then \" Command Prompt\" in order to launch a command prompt from the install media.\n\nEnter the following commands to create a new GPT table in the esp.vmdk disk and install the Windows boot loader onto it using configuration from the existing Windows partition:\n\nOpen Diskpart:\n\n```\nX:\\ diskpart\n```\n\nList all disks identified by the system:\n\n```\nDISKPART> list disk\n```\n\nThe esp.vmkd disk should be labeled as disk 0 due to the fact that was attached to the SATA port 0, ~512 MiB in size and unpartitioned. The windows.vmdk disk should be labeled as disk 1; note that the column \"Size\" displays the disk size, not the partition one.\n\nSelect the esp.vmdk disk:\n\n```\nDISKPART> select Disk 0\n```\n\nNow create a GPT partition table, an EFI system partition, big as the whole disk, and assign to it a label and drive letter:\n\n```\nDISKPART> clean\nDISKPART> convert gpt\nDISKPART> create partition efi size=500\nDISKPART> format quick fs=fat32 label=\"System\"\nDISKPART> assign letter=\"S\"\n```\n\nCheck that the partition has been correctly created:\n\n```\nDISKPART> list volume\n```\n\nOur newly created EFI system partition will be labeled as \"SYSTEM\" with letter as \"S\".\n\nTake note of the Windows installation volume letter because it will be used in next steps. Usually its D but it could be different: you can infer it from its label and its size. The size is the same as the Windows installation partition size on your physical hard disk.\n\nExit diskpart:\n\n```\nDISKPART> exit\n```\n\nInstall the Windows boot loader into the EFI system partition.\n\n```\nD:\ncd Windows\\System32\nbcdboot D:\\Windows /s S: /f UEFI\n```\n\nNow close the command prompt, power off the virtual machine and detach the Windows installation disk (from \"Preferences > Devices\" remove the optical disk). The virtual machine should now boot from the newly installed boot partition and load the physical Windows installation. It may show some UEFI related errors on the top of the virtual machine window and the first boot may take a while, but if everything has been done correctly you will be able to access your windows installation.\n\n"
    },
    {
      "title": "Run an entire physical disk in VirtualBox",
      "level": 3,
      "content": "This works the same way as #Run a native Windows installation inside VirtualBox but the vmdk will contain the entire disk rather than one partition, and so you will not need to create a separate ESP or MBR partition as the one in the physical disk will be used.\n\nCreate the raw disk:\n\n```\n# VBoxManage internalcommands createrawvmdk -filename /path/to/file.vmdk -rawdisk /dev/sdb\n```\n\nThen follow the same method as in #Run a native Windows installation inside VirtualBox for the configuration and virtual disk attachement.\n\n"
    },
    {
      "title": "Set guest starting resolution",
      "level": 3,
      "content": "Typically after installing Guest Additions, a fullscreen Arch guest running X will be set to the optimal resolution for your display; however, the virtual console's framebuffer will be set to a standard, often smaller, resolution detected from VirtualBox's custom VESA driver.\n\nTo use the virtual consoles at optimal resolution, Arch needs to recognize that resolution as valid, which in turn requires VirtualBox to pass this information along to the guest OS.\n\nFirst, check if your desired resolution is not already recognized by running the command (hwinfo need to be installed):\n\n```\nhwinfo --framebuffer\n```\n\nIf the optimal resolution does not show up, then you will need to run the VBoxManage tool on the host machine and add \"extra resolutions\" to your virtual machine (on a Windows host, go to the VirtualBox installation directory to find VBoxManage.exe). For example:\n\n```\n$ VBoxManage setextradata \"Arch Linux\" \"CustomVideoMode1\" \"1360x768x24\"\n```\n\nThe parameters \"Arch Linux\" and \"1360x768x24\" in the example above should be replaced with your VM name and the desired framebuffer resolution. Incidentally, this command allows for defining up to 16 extra resolutions (\"CustomVideoMode1\" through \"CustomVideoMode16\"). Recommended resolutions are 1280x720, 1920x1080, 2048x1080, 2560x1440, 3840x2160, 1280x800, 1280x1024, 1440x900, 1600x900.\n\nAfterwards, restart the virtual machine and run hwinfo --framebuffer once more to verify that the new resolutions have been recognized by your guest system (which does not guarantee they will all work, depending on your hardware limitations).\n\nFinally, add a video=resolution kernel parameter to set the framebuffer to the new resolution, for example:\n\n```\nvideo=1360x768\n```\n\nAdditionally you may want to configure your boot loader to use the same resolution. If you use GRUB, see GRUB/Tips and tricks#Setting the framebuffer resolution.\n\n"
    },
    {
      "title": "SSH from host to guest",
      "level": 3,
      "content": "The network tab of the virtual machine settings contains, in \"Advanced\", a tool to create port forwarding. It is possible to use it to forward the Guest ssh port 22 to a Host port, e.g. 3022 :\n\n```\nuser@host$ ssh -p 3022 $USER@localhost\n```\n\nwill establish a connection from Host to Guest.\n\n"
    },
    {
      "title": "SSHFS as alternative to shared folders",
      "level": 4,
      "content": "Using this port forwarding and SSHFS it is straightforward to mount the Guest filesystem onto the Host one:\n\n```\nuser@host$ sshfs -p 3022 $USER@localhost:$HOME ~/shared_folder\n```\n\nand then transfer files between both.\n\n"
    },
    {
      "title": "Keyboard and mouse are locked into virtual machine",
      "level": 3,
      "content": "This means your virtual machine has captured the input of your keyboard and your mouse. Simply press the right Ctrl key and your input should control your host again.\n\nTo control transparently your virtual machine with your mouse going back and forth your host, without having to press any key, and thus have a seamless integration, install the guest additions inside the guest. Read from VirtualBox/Install Arch Linux as a guest#Install the Guest Additions if your guest is Arch Linux, otherwise read the official VirtualBox help.\n\n"
    },
    {
      "title": "No 64-bit operating system client options",
      "level": 3,
      "content": "When launching a virtual machine client, and no 64-bit options are available, make sure your CPU virtualization capabilities (usually named VT-x) are enabled in the BIOS.\n\nIf you are using a Windows host, you may need to disable Hyper-V, as it prevents VirtualBox from using VT-x. [5]\n\n"
    },
    {
      "title": "VirtualBox GUI does not match host GTK theme",
      "level": 3,
      "content": "See Uniform look for Qt and GTK applications for information about theming Qt-based applications like VirtualBox.\n\n"
    },
    {
      "title": "Cannot send Ctrl+Alt+Fn to guest",
      "level": 3,
      "content": "Your guest operating system is a GNU/Linux distribution and you want to open a new TTY shell by hitting Ctrl+Alt+F2 or exit your current X session with Ctrl+Alt+Backspace. If you type these keyboard shortcuts without any adaptation, the guest will not receive any input and the host (if it is a GNU/Linux distribution too) will intercept these shortcut keys. To send Ctrl+Alt+F2 to the guest for example, simply hit your Host Key (usually the right Ctrl key) and press F2 simultaneously.\n\n"
    },
    {
      "title": "USB subsystem not working",
      "level": 3,
      "content": "Your user must be in the vboxusers group and you need to install the extension pack if you want USB 2 support. Then you will be able to enable USB 2 in the virtual machine settings and add one or several filters for the devices you want to access from the guest operating system.\n\nIf VBoxManage list usbhost does not show any USB devices even if run as root, make sure that there is no old udev rules (from VirtualBox 4.x) in /etc/udev/rules.d/. VirtualBox 5.0 installs udev rules to /usr/lib/udev/rules.d/. You can use command like pacman -Qo /usr/lib/udev/rules.d/60-vboxdrv.rules to determine if the udev rule file is outdated.\n\nSometimes, on old Linux hosts, the USB subsystem is not auto-detected resulting in an error Could not load the Host USB Proxy service: VERR_NOT_FOUND or in a not visible USB drive on the host, even when the user is in the vboxusers group. This problem is due to the fact that VirtualBox switched from usbfs to sysfs in version 3.0.8. If the host does not understand this change, you can revert to the old behaviour by defining the following environment variable in any file that is sourced by your shell (e.g. your ~/.bashrc if you are using bash):\n\n```\n~/.bashrc\n```\n\n```\nVBOX_USB=usbfs\n```\n\nThen make sure, the environment has been made aware of this change (reconnect, source the file manually, launch a new shell instance or reboot).\n\nAlso make sure that your user is a member of the storage group.\n\n"
    },
    {
      "title": "USB modem not working on host",
      "level": 3,
      "content": "If you have a USB modem which is being used by the guest operating system, killing the guest operating system can cause the modem to become unusable by the host system. Killing and restarting VBoxSVC should fix this problem.\n\n"
    },
    {
      "title": "USB device crashes guest",
      "level": 3,
      "content": "If attaching a USB device to the guest causes a crash or any other erroneous behavior, try switching the USB controller from USB 2 (EHCI) to USB 3 (xHCI) or vice versa.\n\n"
    },
    {
      "title": "Host freezes on virtual machine start",
      "level": 3,
      "content": "Generally, such issues are observed after upgrading VirtualBox or Linux kernel. Downgrading them to the previous versions of theirs might solve the problem.\n\n"
    },
    {
      "title": "Analog microphone not working",
      "level": 3,
      "content": "If the audio input from an analog microphone is working correctly on the host, but no sound seems to get through to the guest, despite the microphone device apparently being detected normally, installing a sound server such as PulseAudio on the host might fix the problem.\n\nIf after installing PulseAudio the microphone still refuses to work, setting Host Audio Driver (under VirtualBox > Machine > Settings > Audio) to ALSA Audio Driver might help.\n\n"
    },
    {
      "title": "Problems with images converted to ISO",
      "level": 3,
      "content": "Some image formats cannot be reliably converted to ISO. For instance, ccd2iso ignores .ccd and .sub files, which can result in disk images with broken files.\n\nIn this case, you will either have to use CDemu for Linux inside VirtualBox or any other utility used to mount disk images.\n\n"
    },
    {
      "title": "Failed to create the host-only network interface",
      "level": 3,
      "content": "Make sure all required kernel modules are loaded. See #Load the VirtualBox kernel modules.\n\nIf all required kernel modules are loaded and you are still unable to create the host-only adapter, navigate to File > Host Network Manager and click the Create button to add the network interface.\n\n"
    },
    {
      "title": "Failed to insert module",
      "level": 3,
      "content": "When you get the following error when trying to load modules:\n\n```\nFailed to insert 'vboxdrv': Required key not available\n```\n\nSign your modules or disable CONFIG_MODULE_SIG_FORCE in your kernel config.\n\n"
    },
    {
      "title": "VBOX_E_INVALID_OBJECT_STATE (0x80BB0007)",
      "level": 3,
      "content": "This can occur if a virtual machine is exited ungracefully. Run the following command:\n\n```\n$ VBoxManage controlvm virtual_machine_name poweroff\n```\n\n"
    },
    {
      "title": "NS_ERROR_FAILURE and missing menu items",
      "level": 3,
      "content": "This error might appear if extension pack has not been updated and becomes incompatible with a newly released VirtualBox version.\n\nThis error also happens sometimes when selecting QCOW/QCOW2/QED disk format when creating a new virtual disk.\n\nIf you encounter this message the first time you start the virtual machine:\n\n```\nFailed to open a session for the virtual machine debian.\nCould not open the medium '/home/.../VirtualBox VMs/debian/debian.qcow'.\nQCow: Reading the L1 table for image '/home/.../VirtualBox VMs/debian/debian.qcow' failed (VERR_EOF).\nVD: error VERR_EOF opening image file '/home/.../VirtualBox VMs/debian/debian.qcow' (VERR_EOF).\n\nResult Code:\nNS_ERROR_FAILURE (0x80004005)\nComponent:\nMedium\n```\n\nExit VirtualBox, delete all files of the new machine and from VirtualBox configuration file remove the last line in MachineRegistry menu (or the offending machine you are creating):\n\n```\n~/.config/VirtualBox/VirtualBox.xml\n```\n\n```\n...\n<MachineRegistry>\n  <MachineEntry uuid=\"{00000000-0000-0000-0000-000000000000}\" src=\"/home/void/VirtualBox VMs/debian/debian.vbox\"/>\n  <MachineEntry uuid=\"{00000000-0000-0000-0000-000000000000}\" src=\"/home/void/VirtualBox VMs/ubuntu/ubuntu.vbox\"/>\n  <MachineEntry uuid=\"{00000000-0000-0000-0000-000000000000}\" src=\"/home/void/VirtualBox VMs/lastvmcausingproblems/lastvmcausingproblems.qcow\"/>\n</MachineRegistry>\n...\n```\n\n"
    },
    {
      "title": "OpenBSD unusable when virtualisation instructions unavailable",
      "level": 3,
      "content": "While OpenBSD is reported to work fine on other hypervisors without virtualisation instructions (VT-x AMD-V) enabled, an OpenBSD virtual machine running on VirtualBox without these instructions will be unusable, manifesting with a bunch of segmentation faults. Starting VirtualBox with the -norawr0 argument may solve the problem. You can do it like this:\n\n```\n$ VBoxSDL -norawr0 -vm name_of_OpenBSD_virtual_machine\n```\n\n"
    },
    {
      "title": "Windows: \"The specified path does not exist. Check the path and then try again.\"",
      "level": 3,
      "content": "This error message may appear when running an .exe file which requires administrator privileges from a shared folder in windows guests. [6]\n\nAs a workaround, copy the file to the virtual drive or use UNC paths (\\\\vboxsvr). See [7] for more information.\n\n"
    },
    {
      "title": "Windows 8.x error code 0x000000C4",
      "level": 3,
      "content": "If you get this error code while booting, even if you choose operating system type Win 8, try to enable the CMPXCHG16B CPU instruction:\n\n```\n$ vboxmanage setextradata virtual_machine_name VBoxInternal/CPUM/CMPXCHG16B 1\n```\n\n"
    },
    {
      "title": "Windows 8, 8.1 or 10 fails to install, boot or has error \"ERR_DISK_FULL\"",
      "level": 3,
      "content": "Update the virtual machine's settings by going to Settings > Storage > Controller:SATA and check Use Host I/O Cache.\n\n"
    },
    {
      "title": "WinXP: Bit-depth cannot be greater than 16",
      "level": 3,
      "content": "If you are running at 16-bit color depth, then the icons may appear fuzzy/choppy. However, upon attempting to change the color depth to a higher level, the system may restrict you to a lower resolution or simply not enable you to change the depth at all. To fix this, run regedit in Windows and add the following key to the Windows XP virtual machine's registry:\n\n```\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services]\n\"ColorDepth\"=dword:00000004\n```\n\nThen update the color depth in the \"desktop properties\" window. If nothing happens, force the screen to redraw through some method (i.e. Host+f to redraw/enter full screen).\n\n"
    },
    {
      "title": "Windows: Screen flicker if 3D acceleration enabled",
      "level": 3,
      "content": "VirtualBox > 4.3.14 has a regression in which Windows guests with 3D acceleration flicker. Since r120678 a patch has been implemented to recognize an environment variable setting, launch VirtualBox like this:\n\n```\n$ CR_RENDER_FORCE_PRESENT_MAIN_THREAD=0 VirtualBox\n```\n\nMake sure no VirtualBox services are still running. See VirtualBox bug 13653.\n\n"
    },
    {
      "title": "Cannot launch VirtualBox with Wayland: Segmentation fault",
      "level": 3,
      "content": "This problem is caused by Qt detecting Wayland (e.g., if XDG_SESSION_TYPE=wayland), while VirtualBox does not work on Wayland yet. See FS#58761 and the upstream bug.\n\nThe Qt platform detection can be disabled and X11 forced over Wayland by setting the environment variable QT_QPA_PLATFORM=xcb. To not affect the other Qt applications (which usually work well with Wayland), QT_QPA_PLATFORM=xcb should only be set when launching VirtualBox.\n\nIf starting through the desktop entry, follow the instructions in Desktop entries#Modify environment variables and change the lines starting with Exec=VirtualBox ... to Exec=env QT_QPA_PLATFORM=xcb VirtualBox .... If starting from the shell, alias (Bash#Aliases) virtualbox to env QT_QPA_PLATFORM=xcb virtualbox.\n\n"
    },
    {
      "title": "Random freezing in guests with Intel GPU",
      "level": 3,
      "content": "With Intel CPU and graphics, allocating more processors for the guest can lower render performance, thus cause random freezing. Allocating less processors can help.\n\n"
    },
    {
      "title": "Unable to view desktop in fullscreen mode",
      "level": 3,
      "content": "Disable the Mini Toolbar by selecting Machine > Settings, select the User Interface tab and uncheck the Mini Toolbar checkbox\n\n"
    },
    {
      "title": "Random crashes with Windows 10 guest operating system with Intel Tiger Lake chipset",
      "level": 3,
      "content": "Disable split lock detection by adding split_lock_detect=off to the kernel parameters.\n\nDetails are described in VirtualBox's Ticket #20180.\n\n"
    },
    {
      "title": "Failed to save the settings when enabling Secure Boot",
      "level": 3,
      "content": "In VirtualBox 7.0.0, enabling Secure Boot in a virtual machine that was created in a previous VirtualBox version will fail with a nondescript error (FS#76234):\n\n```\nFailed to save the settings.\n```\n\nThe solution is to click the Reset Keys to Default button right below the Enable Secure Boot checkbox.\n\n"
    },
    {
      "title": "Failed to start VirtualBox machine after using Android Studio emulator",
      "level": 3,
      "content": "KVM and VirtualBox kernel modules can be loaded but not used simultaneously. Android Studio emulator is a QEMU emulator, which uses KVM for acceleration. So Android Studio emulator and VirtualBox machine (if hardware acceleration is enabled) cannot run at the same time. We have to use one after the other stopped completely.\n\nSometimes, VirtualBox kernel module can still be used unexpectedly by some process, and keep all VirtualBox machines failing to start, the error message on VirtualBox GUI is \"A critical error has occurred\".\n\nAt this time, we can check and reload VirtualBox kernel modules using vboxreload as root. If it saying some modules is still be in use, you need to manually kill related process and rerun the command.\n\n"
    },
    {
      "title": "3D Acceleration is not working",
      "level": 3,
      "content": "- Make sure guest additions are installed on guest, and the host modules are installed on the host\n- Make sure the guest additions and host kernel modules versions match host: modinfo vboxdrv | grep '^version:' guest: open logs of your VM, find \"Guest Additions information report\"\n- Make sure vulkan is installed and working on the host\n\n- host: modinfo vboxdrv | grep '^version:'\n- guest: open logs of your VM, find \"Guest Additions information report\"\n\n"
    },
    {
      "title": "VirtuaBox UI elements are improperly rendered with Kvantum installed",
      "level": 3,
      "content": "On some configurations of Kvantum (kvantum) with third party themes, some UI elements such as toolbars and menus are rendered black or improperly. This seems to be limited to translucent windows being enabled. See Kvantum's issue #418.\n\nTo fix this behavior, do one of:\n\n- Disable Translucent windows under section Configure Active Theme > Compositing & General Look of Kvantum Manager.\n- Add VirtualBox,VirtualBoxVM in Kvantum Manager, to the Configure Active Theme > Compositing & General Look > Opaque apps: menu field. This makes an exception for virtualbox windows to be ignored.\n\n- This makes an exception for virtualbox windows to be ignored.\n\n"
    },
    {
      "title": "VirtualBox VM is taking exclusive control of an audio device, preventing PipeWire from accessing it while the VM is running",
      "level": 3,
      "content": "By default, VirtualBox should auto-select the best audio driver. However, on PipeWire systems this often falls back to ALSA (see Pipewire issue).\n\nIt could cause journal records like these:\n\n```\npipewire[2370]: spa.audioadapter: params Spa:Enum:ParamId:EnumFormat: 1:0 (convert format) Device or reso>\npipewire[2370]: pw.node: (alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__Speaker__sink-6>\npipewire[2370]: spa.alsa: '_ucm0001.hw:sofhdadsp': playback open failed: Device or resource busy\n```\n\nThe solution is to configure VirtualBox to use the PulseAudio backend (which PipeWire will handle via pipewire-pulse):\n\n```\n$ VBoxManage modifyvm \"Your VM Name\" --audio-driver pulse --audio-controller hda\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- User Guide on a single HTML page\n\n"
    }
  ]
}