{
  "title": "Oath-toolkit",
  "url": "https://wiki.archlinux.org/title/Oath-toolkit",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- OATH\n- Google Authenticator\n- YubiKey\n\nThe OATH Toolkit provides one-time password (OTP) components for authentication systems. It contains a PAM authentication module that supports technologies include the event-based HOTP algorithm (RFC 4226) and the time-based TOTP algorithm (RFC 6238). The OTP generator applications are available for Android, iOS, Blackberry and other devices. Similar to Google Authenticator the authentication mechanism integrates into the Linux PAM system. This guide shows the installation and configuration of this mechanism.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the oath-toolkit package.\n\n"
    },
    {
      "title": "Setting up the OATH",
      "level": 2,
      "content": "The OATH seed is an hexadecimal number that should be unique per user. To generate a new seed for a user, you could use the following command line:\n\n```\n$ openssl rand -hex 10\n```\n\n```\n12345678909876543210\n```\n\nNote: **must not** \n\nThere needs to be one OATH per user and link to it in a configuration file /etc/users.oath. While being Root user create the file and insert the user seed:\n\n```\n/etc/users.oath\n```\n\n```\n# Option User Prefix Seed\nHOTP/T30/6 user - 12345678909876543210\n```\n\nIf you need HOTP, use this configuration:\n\n```\n/etc/users.oath\n```\n\n```\n# Option User Prefix Seed\nHOTP user - 12345678909876543210\n```\n\nMake sure that the file can only be accessed by Root user:\n\n```\n# chmod 600 /etc/users.oath\n# chown root /etc/users.oath\n```\n\n"
    },
    {
      "title": "Setting up the PAM",
      "level": 2,
      "content": "To enable OATH for a specific service only, like OpenSSH, you can edit the file /etc/pam.d/sshd and add at the beginning of the file the following line:\n\n```\nauth\t  sufficient pam_oath.so usersfile=/etc/users.oath window=30 digits=6\n```\n\nThis will allow authentication if you just enter the right OATH code. You can make OATH as a requirement and let the rest of the PAM stack be processed if you use the following line instead:\n\n```\nauth\t  required pam_oath.so usersfile=/etc/users.oath window=30 digits=6\n```\n\nFor SSH login to work, make sure these options are enabled in the file /etc/ssh/sshd_config:\n\n```\nChallengeResponseAuthentication yes\nUsePAM yes\n```\n\nRestart sshd.service to enable the changes.\n\nIf you want to force OATH request-response even if there is a working public key authentication and password authentication also add the following in /etc/ssh/sshd_config:\n\n```\nAuthenticationMethods publickey,keyboard-interactive:pam\nKbdInteractiveAuthentication yes\nPasswordAuthentication yes\n```\n\n"
    },
    {
      "title": "Logging with an OATH password",
      "level": 2,
      "content": "For logging in with TOTP:\n\n```\n$ oathtool -v --totp -d 6 12345678909876543210\n```\n\nIf you are logging in with HOTP:\n\n```\n$ oathtool -v -d 6 12345678909876543210\n```\n\nReplace 12345678909876543210 by the seed corresponding to your user. It will output something like the following:\n\n```\nHex secret: 1ab4321412aebc\nBase32 secret: DK2DEFASV26A====\nDigits: 6\nWindow size: 0\nStart counter: 0x0 (0)\n\n820170\n```\n\nThe last string of numbers can be used as a code for login right now, but more interestingly the Base32 secret, because it can be converted to QR code for easily transferring keys. Install the package qrencode to run the following command to convert:\n\n```\n$ qrencode -o user.png 'otpauth://totp/user@machine?secret=DK2DEFASV26A===='\n```\n\nChange user, machine and DK2DEFASV26A==== accordingly. Once done, you can visualize your QR code with your preferred image visualizer application. Alternatively you may generate the QR code directly onto terminal with:\n\n```\n$ qrencode -t UTF8 'otpauth://totp/user@machine?secret=DK2DEFASV26A===='\n```\n\nIt is pretty straight forward to use Aegis Authenticator or FreeOTP+ to then take a screenshot of that user.png (or ASCII-art like image) and get it to display OTP password when needed.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Two-factor time based (TOTP) SSH authentication with pam_oath and Google Authenticator\n- pam_oath manual\n\n"
    }
  ]
}