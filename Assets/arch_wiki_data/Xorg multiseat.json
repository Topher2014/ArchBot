{
  "title": "Xorg multiseat",
  "url": "https://wiki.archlinux.org/title/Xorg_multiseat",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nRelated articles\n\n- ATI#Independent X screens\n\nMultiseat is a certain setup where N users work simultaneously on one computer. This is achieved by having N monitors, N keyboards and N mice. The advantages are quite obvious:\n\n- Less power consumption (only one computer)\n- Less hardware to purchase\n\n"
    },
    {
      "title": "Requirements",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n"
    },
    {
      "title": "Keyboards and mice",
      "level": 3,
      "content": "Any standard PS/2 or USB keyboards will suffice. Same thing for mice.\n\n"
    },
    {
      "title": "Graphics hardware",
      "level": 3,
      "content": "For the best possible result you will need two graphics cards. I used an nVidia FX5500 AGP and an nVidia 6200 PCI. If you look around a bit you can certainly find new and decent PCI graphics card for a soft price.\n\nIt is possible to use only one videocard which has dual heads (like most nvidia cards will have), but this has some limitations: you have to use Xephyr on the second monitor which seems quite a messy solution from what I have read, and for optimal usage both screens need the same resolution.\n\nIf you have two pci-express slots, take advantage of them! That way you will even be able to play two games at the same time. (PCI is too slow to play comfortably)\n\n"
    },
    {
      "title": "Processors and memory",
      "level": 3,
      "content": "If you really are working with two users on the same computer, I would at least recommend a dual-core processor and plenty of RAM. A fast hard drive (10.000 RPM or higher) is also recommended for comfortable use.\n\n"
    },
    {
      "title": "Software",
      "level": 3,
      "content": "You will need Xorg with the drivers for your graphics card (according to some sources, the closed source nvidia driver works better than the open source nvidia driver for this, I have not tested this myself) and the evdev (xf86-input-evdev) driver. That's all. All this can be found in the Arch Linux core and extra repositories.\n\n"
    },
    {
      "title": "Some X knowledge",
      "level": 3,
      "content": "If you know how X works this will be a lot easier. Before you start, it is recommend generating a clean configuration with xorg.conf(5) that works with a single screen. Read through this xorg configuration and make yourself familiar. And as usual the manpages will provide you with most of the answers. You may reference some man pages: Xorg(1), Xserver(1), startx(1), xdm(8), xinit(1).\n\nYou can also look at the output of the following commands to get some hints:\n\n```\n# X -configure\n# X -showopts\n```\n\n"
    },
    {
      "title": "Definitions",
      "level": 2,
      "content": "For this article to be clear, I will be using the following definitions:\n\n- screen: A screen is something Xorg can display its stuff on. A screen has a monitor and a graphics card assigned to it.\n- monitor: A physical monitor like the one you are now sitting in front of.\n- server layout: a definition of which screen, keyboard and mouse to use.\n- seat: A workplace with a physical monitor, physical keyboard and physical mouse.\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "- Set up ssh on your computer, so you can ssh to the machine from another computer (such as a laptop). This is very useful because you will probably run into X not responding anymore or not giving you picture at all.\n- Finding out which keyboard and mouse is which: open a terminal and use cat to find out. For example, cat /dev/input/mouse1. If you then move your mouse and you see all weird things happening than that is the mouse you are moving. Same goes for keyboards, which are called eventN.\n- Try a basic configuration first. Do not start with the fancy stuff yet, get a very basic Xorg working first.\n- Create a backup of all relevant configuration files. What do you mean you will skip this one?\n\n"
    },
    {
      "title": "About evdev",
      "level": 2,
      "content": "evdev is an Xorg driver which can make use of the kernel event devices, which you can find in /dev/input.\n\n"
    },
    {
      "title": "Attaching devices to a seat",
      "level": 2,
      "content": "systemd's loginctl(1) lets you assign devices to seats by creating udev rules.\n\n"
    },
    {
      "title": "Identify devices",
      "level": 3,
      "content": "Look at the default seat (seat0) status, here is an example:\n\n```\n# loginctl seat-status seat0\n```\n\n```\nseat0\n        Sessions: *11\n         Devices:\n                  ├ /sys/devices/pci0000:00/0000:00:02.0/0000:03:00.0/drm/card0\n                  │ (drm:card0)\n                  ├ /sys/devices/pci0000:00/0000:00:02.0/0000:03:00.0/graphics/fb0\n                  │ (graphics:fb0) \"radeondrmfb\"\n                  ├ /sys/devices/pci0000:00/0000:00:02.0/0000:03:00.1/sound/card1\n                  │ (sound:card1) \"Generic\"\n                  │ └ /sys/devices/pci0000:00/0000:00:02.0/0000:03:00.1/sound/card1/input15\n                  │   (input:input15) \"HD-Audio Generic HDMI/DP,pcm=3\"\n                  ├ /sys/devices/pci0000:00/0000:00:12.0/usb3\n                  │ (usb:usb3)\n                  │ ├ /sys/devices/pci0000:00/0000:00:12.0/usb3/3-1/3-1:1.2/0003:046D:C52B.0006/input/input5\n                  │ │ (input:input5) \"Logitech Unifying Device. Wireless PID:101b\"\n                  │ └ /sys/devices/pci0000:00/0000:00:12.0/usb3/3-1/3-1:1.2/0003:046D:C52B.0006/input/input6\n                  │   (input:input6) \"Logitech Unifying Device. Wireless PID:200a\"\n                  ├ /sys/devices/pci0000:00/0000:00:14.2/sound/card0\n                  │ (sound:card0) \"SB\"\n                  │ ├ /sys/devices/pci0000:00/0000:00:14.2/sound/card0/input7\n                  │ │ (input:input7) \"HDA ATI SB Line\"\n                  │ └ /sys/devices/pci0000:00/0000:00:14.2/sound/card0/input9\n                  │   (input:input9) \"HDA ATI SB Rear Mic\"\n                  ├ /sys/devices/pci0000:00/0000:00:04.0/0000:02:00.0/drm/card1\n                  │ (drm:card1)\n                  ├ /sys/devices/pci0000:00/0000:00:04.0/0000:02:00.0/graphics/fb1\n                  │ (graphics:fb1) \"radeondrmfb\"\n                  ├ /sys/devices/pci0000:00/0000:00:04.0/0000:02:00.1/sound/card2\n                  │ (sound:card2) \"HDMI\"\n                  │ └ /sys/devices/pci0000:00/0000:00:04.0/0000:02:00.1/sound/card2/input16\n                  │   (input:input16) \"HDA ATI HDMI HDMI/DP,pcm=3\"\n                  ├ /sys/devices/pci0000:00/0000:00:12.1/usb4/4-1/4-1:1.0/input/input2\n                  │ (input:input2) \"CHESEN PS2 to USB Converter\"\n                  ├ /sys/devices/pci0000:00/0000:00:12.1/usb4/4-1/4-1:1.1/input/input3\n                  │ (input:input3) \"CHESEN PS2 to USB Converter\"\n                  └ /sys/devices/pci0000:00/0000:00:12.1/usb4/4-2/4-2:1.0/input/input4\n                    (input:input4) \"Microsoft Microsoft 3-Button Mouse with IntelliEye(TM)\"\n```\n\nIf you are unsure, try comparing with lspcior lsusb to identify devices.\n\n"
    },
    {
      "title": "Assign devices",
      "level": 3,
      "content": "Seats are created based on graphics cards. Hence we will start by assigning a graphics card:\n\n```\n# loginctl attach seat1 /sys/devices/pci0000:00/0000:00:04.0/0000:02:00.0/drm/card1\n# loginctl attach seat1 /sys/devices/pci0000:00/0000:00:04.0/0000:02:00.0/graphics/fb1\n```\n\nThen add input devices. This first example (not recommended) adds three USB devices by port and subdevice from the list above:\n\n```\n# loginctl attach seat1 /sys/devices/pci0000:00/0000:00:12.1/usb4/4-1/4-1:1.0/input/input2\n# loginctl attach seat1 /sys/devices/pci0000:00/0000:00:12.1/usb4/4-1/4-1:1.1/input/input3\n# loginctl attach seat1 /sys/devices/pci0000:00/0000:00:12.1/usb4/4-2/4-2:1.0/input/input4\n```\n\nThis is less than ideal, because replacing the keyboard with another will only work if the new keyboard contains the same subdevices (1.0 and 1.1), and if the keyboard and mouse are accidentally swapped into each other's USB port, they will not be assigned to the intended seat and will end up back in the default seat0. It would be more flexible to add a specific USB port to the seat instead, allowing any device plugged into that USB port to be assigned to the seat (keyboard, mouse, USB sound card, etc.) Here, two USB ports are assigned to the seat, which you can see has just come from the same list above with the end part removed:\n\n```\n# loginctl attach seat1 /sys/devices/pci0000:00/0000:00:12.1/usb4/4-1\n# loginctl attach seat1 /sys/devices/pci0000:00/0000:00:12.1/usb4/4-2\n```\n\nWith multiple sound cards you can assign one per seat that will run out of the box with per user session PulseAudio:\n\n```\n# loginctl attach seat1 /sys/devices/pci0000:00/0000:00:04.0/0000:02:00.1/sound/card2\n```\n\nYou should be able to see that the hardware has been partitioned into two seats:\n\n```\n# loginctl seat-status seat0\n# loginctl seat-status seat1\n```\n\nThe seat names are just string tags, so you can call a seat anything you like - seat-1, seatleft and seat-tv are all valid names. While you do not have to use the seat prefix, this is not recommended as some programs (e.g. LightDM) apply their default options only to seats matching the expression seat*, so any name that does not start with the word seat may require extra manual configuration. seat0 is the default seat name and cannot be changed.\n\nAny device that is not specifically tagged to a seat will end up in seat0. If a device is tagged to a given seat, then all child devices belong to that seat as well. This is most useful with hot pluggable interfaces, such as the above example that assigns USB ports to specific seats so that any devices plugged into those ports will automatically inherit the seat set on on the USB port itself.\n\nloginctl attach creates and deletes udev rule files matching /etc/udev/rules.d/72-seat-*.rules, so if you wish to back up your seat configuration, these are the files to save and restore.\n\nEach seat will not appear as ready until a device tagged master-of-seat appears. The default udev rules automatically apply this tag to any drm or graphics device. Thus if you do not make a one of these devices part of a seat (e.g. a visually impaired user with only keyboard and audio) then the udev rules created by loginctl will need to be manually edited and this tag specified before the seat becomes available for use. Look at the default udev rules for examples.\n\n"
    },
    {
      "title": "Setting up Xorg",
      "level": 2,
      "content": "Since you can attach devices to seats with loginctl there is no need to have an specific Xorg configuration, so if you attached devices via loginctl creating Xorg configuration files may be skipped. Also note that setting ServerFlags \"AutoAdd*\" options to false forces Xorg to just ignore most of the loginctl attachments.\n\nIf you do choose to use a custom Xorg configuration (for example you have an nVidia card and want to set advanced display options) then the process is much the same as usual, with the major difference being that you define one ServerLayout section for each seat, and include the MatchSeat statement in each server layout to indicate which seat it should apply to. You can also apply MatchSeat directives to graphics devices and monitors themselves to avoid defining a ServerLayout, if you do not need any ServerLayout functionality. Be aware that any section missing a MatchSeat directive will be visible for all server layouts and seats, so make sure some other part of the configuration prevents multiple seats from trying to access the same devices. (A common mistake is allowing both seats to access the same display device, which will result in one seat working and the others failing to start.)\n\nAn example follows for this type of manual configuration. You can create parts of, or the entire, configuration set for two server layouts, each assigned with their own keyboard, mouse, video card and monitor. If you omit a part (such as the InputDevice section), then the Xorg defaults will apply.\n\n```\nxorg.conf.d tree example:\n```\n\n```\n├── 00-keyboard.conf   #created by localectl\n├── 31-monitor-seat0.conf\n├── 32-monitor-seat1.conf\n├── 40-serverflags.conf\n├── 41-graphic-seat0.conf\n├── 42-graphic-seat1.conf\n├── 51-screen-seat0.conf\n├── 52-screen-seat1.conf\n├── 61-layout-seat0.conf\n└── 62-layout-seat1.conf\n```\n\n"
    },
    {
      "title": "Defining available input devices",
      "level": 3,
      "content": "This part of the configuration tells Xorg which input devices it has available. Input devices are keyboards and mice, but can also be, for example, touchscreens and pens.\n\nConfigure your devices as read in Xorg#Input devices. The \"Identifier\" will let you assign to a ServerLayout and \"Device\" defines which physical device are you configuring.\n\n```\n01-keyboard-seat0.conf\n```\n\n```\nSection \"InputDevice\"\n        Identifier      \"keyboard0\"\n        Option          \"Device\"                \"/dev/input/event1\"\n        #Option          \"Device\"                \"/dev/input/by-path/pci-0000:00:1a.0-usb-0:1.6:1.0-event-kbd\"  # or by path\n\n        # GrabDevice no longer has any effect: https://www.spinics.net/lists/xorg/msg59881.html\n        Option \"GrabDevice\" \"on\" # prevent send event to other X-servers\nEndSection\n```\n\nSame for other input devices.\n\n"
    },
    {
      "title": "Monitors",
      "level": 3,
      "content": "Configure your monitors as seen on Xorg#Monitor settings. Pay close attention to the identifier.\n\n```\n31-monitor-seat0.conf\n```\n\n```\nSection \"Monitor\"\n    Identifier             \"monitor0\"\nEndSection\n```\n\n"
    },
    {
      "title": "ServerFlags",
      "level": 3,
      "content": "```\n40-serverflags.conf\n```\n\n```\nSection \"ServerFlags\"\n        Option \"AutoAddGPU\" \"off\"\nEndSection\n```\n\n"
    },
    {
      "title": "Graphics card",
      "level": 3,
      "content": "Take a close look at the BusID. This option specifies which hardware card to use. You can find out the BusId's with lspci. However, you will soon find out this does not always match. That's because lspci displays the device address in hexadecimal form. Xorg however uses decimal form. So you will need to convert your address from hexadecimal form to decimal. Thus a device address of 0:0a:0 in lspci would become 0:10:0 in xorg.conf.\n\n```\n42-graphic-seat1.conf\n```\n\n```\nSection \"Device\"\n        Identifier      \"graphic0\"\n        Driver          \"nvidia\"\n        Option          \"NoLogo\"                \"1\"  # Remove nvidia branding at startup\n        BusId           \"PCI:1:0:0\"\n        MatchSeat       \"seat-1\"                     # Needed when only configuring part of Xorg for non-seat0.\n        Option          \"Monitor-DVI-1\"         \"monitor1\"  #assigns monitor configuration to graphic output port\nEndSection\n```\n\nAnother more advanced example where nVidia TwinView is used so that one seat has dual monitors, with one monitor landscape and the other portrait:\n\n```\n42-graphic-seat-nvidia.conf\n```\n\n```\nSection \"Device\"\n        Identifier \"nvidia\"\n        Driver \"nvidia\"\n        BusID \"PCI:66:0:0\"  # lspci reports this as 42:00.0, so 42 hex is 66 decimal\n\n        # See the nVidia documentation for what these options do.  They of\n        # course only apply if you have an nVidia card and you are using their\n        # closed-source driver.\n        Option \"UseDisplayDevice\" \"DP-3\"\n        Option \"MetaModes\" \"DP-3: 2560x1600, DP-0: 1600x1200 { Rotation=left }\"\n        Option \"TwinViewOrientation\" \"LeftOf\"\n\n        # Not needed, avoid errors in logs\n        Option \"ConnectToAcpid\" \"false\"\n\n        # Do not automatically set the DPI based on screen size, use the traditional\n        # value to avoid fonts becoming overly large.\n        Option \"UseEdidDpi\" \"False\"\n        Option \"DPI\" \"96 x 96\"\n\n        # No MatchSeat option is needed here if it's given in the ServerLayout instead.\n        #Option \"MatchSeat\" \"seat-nvidia\"\nEndSection\n```\n\n"
    },
    {
      "title": "Screens",
      "level": 3,
      "content": "Pay close attention to the \"monitor\" option.\n\n```\n51-screen-seat0.conf\n```\n\n```\nSection \"Screen\"\n        Identifier              \"screen0\"\n        Device                  \"graphic0\"\n        Monitor                 \"monitor0\"\n        DefaultDepth    24\n        Subsection \"Display\"\n                Depth   24\n                Modes   \"1280x1024\"     \"1024x768\"\n        EndSubsection\nEndSection\n```\n\n"
    },
    {
      "title": "ServerLayout",
      "level": 3,
      "content": "Create a section for every seat (pay attention to Identifier) you have with their respective keyboards, mice and screens.\n\n```\n62-layout-seat1.conf\n```\n\n```\nSection \"ServerLayout\"\n        # The Identifier is not really important but must be unique.\n        Identifier      \"seat-1\"\n\n        # This controls which Screen section is used in the layout, which in turn\n        # dictates which GPU and monitor will be used.  The numbers can be omitted\n        # if only one Screen is used (normally the case unless you are combining\n        # monitors from different video cards).\n        Screen          \"screen1\"       0                   0\n\n        # InputDevice sections can usually be omitted\n        InputDevice     \"mouse1\"        \"CorePointer\"\n        InputDevice     \"keyboard1\"     \"CoreKeyboard\"\n\n        Option          \"SingleCard\" \"on\"   # use this to simplfied isolatedevice option\n\n        # MatchSeat means this layout will only be used when the \"-seat seat-1\"\n        # parameter is given to /usr/bin/X, which most display managers will do\n        # automatically.\n        MatchSeat       \"seat-1\"\nEndSection\n```\n\nAdditional Tips:\n\n- Make sure to delete the ~/.Xauthority file in respective user directories before the initial reboot.\n\n- To avoid tearing this seems to help on nearly all configurations - add this to /etc/environment:\n\n```\nCLUTTER_PAINT=disable-clipped-redraws:disable-culling\nCLUTTER_VBLANK=True\n```\n\n"
    },
    {
      "title": "Testing",
      "level": 2,
      "content": "Before we start modifying our login manager, we will first start with testing out the individual seats. If these are working, then we are good to go.\n\nI have used twm (tiny window manager) to test out if my seats work, but there is no reason you cannot use KDE, gnome, or any other desktop environment or window manager. I have used this in my ~/.xinitrc:\n\n```\nexec twm\n```\n\nUse the following command to test out an individual seat:\n\n```\nstartx -- -layout seat0 -config xorg.conf.multiseat\n```\n\nDo this for every seat you have. If they are all working correctly and the keyboard/mouse combination matches, then congratulations! You are almost finished! In case you are wondering why I did not you use the full path to my new configuration file, that's because X does not allow that when running as non-root. It will search for xorg.conf.multiseat relative to /etc/X11.\n\n"
    },
    {
      "title": "Setting up the loginmanager",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "For XDM",
      "level": 3,
      "content": "Open /etc/X11/xdm/Xservers and set the following variables (This sample demos two seats):\n\n```\n# NOTE: do not add -sharevts on seat0, otherwise it may reset in about 10~20 minutes automatically.\n:0 local /usr/bin/X :0 vt07 -nolisten tcp  -novtswitch -layout seat0 -seat seat0\n:1 local /usr/bin/X :1 vt08 -nolisten tcp -novtswitch -layout seat-1 -seat seat-1\n```\n\nAlso if you use the Arch Linux theme edit /etc/X11/xdm/xdm-config for every screen:\n\n```\nDisplayManager._0.setup:        /etc/X11/xdm/arch-xdm/Xsetup\nDisplayManager._0.startup:      /etc/X11/xdm/arch-xdm/Xstartup\nDisplayManager._0.reset:        /etc/X11/xdm/arch-xdm/Xreset\nDisplayManager._1.setup:        /etc/X11/xdm/arch-xdm/Xsetup\nDisplayManager._1.startup:      /etc/X11/xdm/arch-xdm/Xstartup\nDisplayManager._1.reset:        /etc/X11/xdm/arch-xdm/Xreset\n```\n\n"
    },
    {
      "title": "For LightDM",
      "level": 3,
      "content": "LightDM has automatic multiseat detection (pulling from the seat list provided by loginctl list-seats). If you have a manual Xorg configuration file and want to use it, make sure you specify valid MatchSeat values there (see above). This is because LightDM automatically passes -seat seat0 or similar to /usr/bin/X, so Xorg will ignore any sections that have a MatchSeat that does not match the current seat. (So if you forget to specify MatchSeat at all, those sections will apply to every seat which, in the case of display devices, means one or more seats likely will not start at all as they all compete for the same display.)\n\nIf you need you can configure it on /etc/lightdm/lightdm.conf\n\n```\n[LightDM]\nrun-directory=/run/lightdm\n\n[Seat:*]\ngreeter-session=lightdm-gtk-greeter\ngreeter-hide-users=false # Bug: lightdm-gtk-greeter does not load user saved session when greeter-hide-users=true[1]\nsession-wrapper=/etc/lightdm/Xsession\n\n[Seat:seat0]\nxserver-command=/usr/bin/X :0\n# If you cannot put `MatchSeat \"seat0\"` in the `ServerLayout` section for some reason, you can force a layout here.\nxserver-layout=seat0\n\n[Seat:seat-1]\nxserver-command=/usr/bin/X :1\nxserver-layout=seat-1\n```\n\n"
    },
    {
      "title": "For Auto Login multiseat (without Display Manager)",
      "level": 3,
      "content": "edit a script /boot/twin.sh\n\n```\n#!/bin/bash\ncmd1=\"/bin/bash --login -c \\\"/usr/bin/xinit --\"\ncmd2=\"-nolisten tcp -keeptty -novtswitch -config xorg.multiseat.conf\"\nusr=(user1 user2)  # FIXME: assume user1, user2 is valid user id\ndeclare -a pid\nwhile true ; do\n  for ((i=0; i<${#usr[*]}; i++)) ; do\n    echo \"usr[$i]=${usr[$i]} pid=${pid[$i]}\"\n    if [ -z \"${pid[$i]}\" ] || [ ! -d \"/proc/${pid[$i]}\" ] ; then\n      # echo \"pid ${pid[$i]} killed, execute again\"  \n      cmd3=\"-layout seat$i vt0\"$((7+i))\"\\\"\"\n      if [ $i -gt 0 ] ; then\n        cmd3=\"-sharevts $cmd3\"\n      fi\n      #echo \"cmd3=$cmd3\"\n      /bin/su ${usr[$i]} -l -c \"$cmd1 :$i $cmd2 $cmd3\" &\n      pid[$i]=$!\n      #echo \"new pid=${pid[$i]}\"\n    fi\n  done\n  sleep 5  # check process exist per 5 second\ndone\n```\n\nOpen /etc/inittab and setup as follows:\n\n```\n#id:3:initdefault:\nid:5:initdefault:\n...\nx2:5:once:/root/twin.sh > /root/twin.log 2>&1\n```\n\n"
    },
    {
      "title": "One sound card for each seat",
      "level": 3,
      "content": "As soon as you attach the sound card to the seat, PulseAudio will detect and use it.\n\n"
    },
    {
      "title": "Multiple users on single sound card: PulseAudio",
      "level": 3,
      "content": "If two users want to use the sound card simultaneously, it is necessary to use a sound server, PulseAudio being most prevalent. Usually, the PulseAudio server runs only for active user and does not allow for multiple user instances. Solution to this problem is using the system-wide PulseAudio server. Although this approach is discouraged by its authors, it is probably most applicable setup.\n\nThis results in all the mixing transferred to a single server.\n\nCopy the default configuration to the main user's home directory:\n\n```\n$ cp /etc/pulse/default.pa ~/.pulse/\n```\n\nor:\n\n```\n$ cp /etc/pulse/default.pa ~/.config/pulse/\n```\n\nEdit the file, adding at the end:\n\n```\nload-module module-native-protocol-tcp auth-ip-acl=127.0.0.1\n```\n\nRestart PulseAudio, if already running:\n\n```\n$ pulseaudio -k\n$ pulseaudio --daemonize=no\n```\n\nRepeat this procedure for each secondary user, as the user:\n\n```\n$ echo \"default-server = 127.0.0.1\" > ~/.pulse/client.conf\n```\n\n- Create user pulse and put it into group audio (PulseAudio drops root privileges and changes to user pulse. Group membership allows for device access.)\n- Create group pulse-access and put users, who will play sound locally into it (Group membership is used for access control for local access to PA daemon.)\n- In /etc/pulse/default.pa state explicitly the access rights\n\n```\nload-module module-native-protocol-unix auth-group=pulse-access \nauth-group-enable=1\n```\n\nCreate /etc/dbus-1/system.d/pulseaudio.conf with this content /etc/dbus-1/system.d/pulseaudio.conf:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<busconfig>\n\t<policy user=\"pulse\">\n\t\t<allow own=\"org.pulseaudio.Server\"/>\n\t\t<allow send_destination=\"org.pulseaudio.Server\"/>\n\t\t<allow receive_sender=\"org.pulseaudio.Server\"/>\n\t</policy>\n</busconfig>\n```\n\nStart PA as system-wide, under root:\n\n```\n# pulseaudio --system\n```\n\nIn /var/run/pulse should appear files for communication with daemon, namely pid and native.\n\nYou can check communication with system daemon as non-root by e.g. pactl -s \"unix:/var/run/pulse/native\" list.\n\nIt is possible to enable automatic network connection to local daemon in /etc/pulse/client.conf:\n\n```\nauto-connect-localhost = yes\n```\n\nThe users should be able to connect to PA server. All the cons for system-wide daemon become essentially pros, e.g. ability to control volume of other users streams in pavucontrol.\n\nIt is possible to enable the http interface to PA for debugging in /etc/pulse/default.pa load-module module-http-protocol-tcp and then connect to it at http://localhost:4714/\n\n"
    },
    {
      "title": "Multiple users on single sound card: ALSA",
      "level": 3,
      "content": "Setup with PulseAudio removed, shared audio through an alsamixer(1) equalizer and software mixing. The relevant hardware used is an ATI Radeon HD 5850 and an Intel Sandy Bridge (onboard) HD 3000. Configuration steps may vary.\n\nSpecific hardware could be addressed in /etc/asound.conf to allocate audio to both users simultaneously if required. Another option enables two different users to both access audio with their own equalizer (described further down). The sound card will be shared equally among the seats using ALSA with PulseAudio removed - libpulse itself should be kept for various software dependencies however.\n\nNext, remove respective ~/.asoundrc files (as well as related PulseAudio configuration files if you removed that) and follow this template with /etc/asound.conf for sound:\n\n```\ndefaults.pcm.rate_converter \"samplerate_best\"\n\nctl.equal {\n type equal;\n}\n\npcm.plugequal {\n  type equal;\n  # Modify the line below if you do not\n  # want to use sound card 0.\n  #slave.pcm \"plughw:0,0\";\n  #by default we want to play from more sources at time:\n  slave.pcm \"plug:dmix\";\n}\n#pcm.equal {\n  # If you do not want the equalizer to be your\n  # default soundcard comment the following\n  # line and uncomment the above line. (You can\n  # choose it as the output device by addressing\n  # it with specific apps,eg mpg123 -a equal 06.Back_In_Black.mp3)\npcm.!default {\n  type plug;\n  slave.pcm plugequal;\n}\n```\n\nOnly the last user to login will have audio control and access but if you wish to share audio equally among different users, add each user to the audio group:\n\nExample:\n\n```\nusermod -a -G ftp joeblow\nusermod -a -G ftp jillschmill\n```\n\nThen put this in each user's respective ~/.asoundrc rather than using /etc/asound.conf (this option also contains various tweaks to improve audio quality):\n\n```\ndefaults.pcm.rate_converter \"samplerate_best\"\n\nctl.equal {\n type equal;\n}\n\npcm.ossmix {\n    type dmix\n    ipc_key 1024 # must be unique!\n    ipc_key_add_uid false   # let multiple users share\n    ipc_perm 0666           # IPC permissions for multi-user sharing (octal, default 0600)\n    slave {\n        pcm \"hw:0,0\"      # you cannot use a \"plug\" device here, darn.\n        period_time 0\n        period_size 1024 # must be power of 2.\n        buffer_size 8192  # ditto.\n        rate 44100\n       #format \"S32_LE\"\n       #periods 128 # dito.\n       #rate 8000 # with rate 8000 you *will* hear,\n       # if ossmix is used :)\n    }\n    # bindings are cool. This says, that only the first\n    # two channels are to be used by dmix, which is\n    # enough for (most) oss apps and also lets \n    # multichannel chips work much faster:\n    bindings {\n        0 0 # from 0 => to 0\n        1 1 # from 1 => to 1\n    }\n}\n\npcm.plugequal {\n  type equal;\n  # Modify the line below if you do not\n  # want to use sound card 0.\n  #slave.pcm \"plughw:0,0\";\n  #by default we want to play from more sources at time:\n  slave.pcm \"plug:ossmix\";\n}\n\n#pcm.equal {\n  # If you do not want the equalizer to be your\n  # default soundcard comment the following\n  # line and uncomment the above line. (You can\n  # choose it as the output device by addressing\n  # it with specific apps,eg mpg123 -a equal 06.Back_In_Black.mp3)\npcm.!default {\n  type plug;\n  slave.pcm plugequal;\n}\n```\n\nAccessing the equalizer can be done with:\n\n```\nalsaequal -D equal\n```\n\nEach user has an equalizer they can configure separately.\n\nMake sure to turn down and mute the audio channels that you do not use, turn off auto-mute microphone, and make sure no channel has a gain higher than 0 to avoid ALSA audio bugs. This can be done via alsamixer.\n\n"
    },
    {
      "title": "Xorg will not start",
      "level": 3,
      "content": "Look at the log files in /var/log/Xorg.*.log. There will be one for each seat. Reading the log file will show you which devices the seat is trying to use, and you may see something like both seats are trying to use the same display device, because you have not correctly assigned it to a particular seat.\n\nIf you are using a display manager, find out where its log files are so you can check that it is starting the Xorg server properly, and passing the required -seat parameter.\n\n"
    },
    {
      "title": "My Windows key does not work anymore",
      "level": 3,
      "content": "Put this in a startup file:\n\n```\nxmodmap -e \"add Mod4 = Super_L Super_R\"\n```\n\n"
    },
    {
      "title": "Unreliable behaviour (black picture without cursor)",
      "level": 3,
      "content": "If everything seems to be set up correctly, but for some reason you always get a black picture without a cursor, try setting the first initialized card in the BIOS to be the PCI card one.\n\n"
    },
    {
      "title": "Little black boxes/dots on the desktop",
      "level": 3,
      "content": "This is actually portions of the virtual terminals being painted on top of X. It seems to be caused by the Linux kernel framebuffer. This can be fixed by disabling the framebuffer, or by removing the \"-sharevts\" option from the primary seat's X args.\n\n"
    },
    {
      "title": "Multimedia keys not working",
      "level": 3,
      "content": "If your keyboard(s) has extra \"multimedia\" keys, you may find that they stopped working in your multiseat setup. This is because such keyboards are often represented as more then one \"event\" device. As you did above, cat each /dev/input/event* device, this time pressing multimedia keys. Once you have found the right event device, add a separate keyboard InputDevice section for it, then add that InputDevice section to the corresponding ServerLayout section with the \"SendCoreEvents\" option, which indicates that input from this device should be handled, despite not being the core keyboard. In the end you should have sections something like the following:\n\n```\nSection \"InputDevice\"\n    Identifier      \"Keyboard0\"\n    Driver          \"evdev\"\n    Option          \"Device\" \"/dev/input/event6\"\n    Option          \"XkbModel\" \"evdev\"\nEndSection\n\nSection \"InputDevice\"\n    Identifier      \"Keyboard0Multimedia\"\n    Driver          \"evdev\"\n    Option          \"Device\" \"/dev/input/event7\"\n    Option          \"XkbModel\" \"evdev\"\nEndSection\n\nSection \"ServerLayout\"\n    Identifier     \"Layout0\"\n    Screen      0  \"Screen0\" 0 0\n    InputDevice    \"Keyboard0\" \"CoreKeyboard\"\n    InputDevice    \"Keyboard0Multimedia\" \"SendCoreEvents\"\n    InputDevice    \"Mouse0\" \"CorePointer\"\n    Option         \"AutoAddDevices\" \"no\"\nEndSection\n```\n\n"
    },
    {
      "title": "The Ctrl-Alt-Fx, Alt-Fx keys mess up with virtual terminals",
      "level": 3,
      "content": "(Oct 2010) I follows this guide and everything works, except for Atl-F1, Atl-F2,... mess things up. Then I follow this guide https://help.ubuntu.com/community/MultiseatX (read the part for Ubuntu 10.04):\n\n```\n# cd /usr/bin\n# ln -s X X0\n# ln -s X X1\n```\n\nThen fix in the /usr/share/config/kdm/kdmrc as follow\n\n```\n[General]\nConsoleTTYs=tty1,tty2,tty3,tty4,tty5,tty6\nServerVTs=7,8\nStaticServers=:0,:1\nReserveServers=:2,:3\n...\n\n[X-:0-Core]\nServerVT=8\nServerCmd=/usr/bin/X1\nServerArgsLocal=-nolisten tcp -sharevts -novtswitch -keeptty -layout Seat1 -isolateDevice PCI:1:0:0\n\n[X-:1-Core]\nServerVT=7\nServerCmd=/usr/bin/X0\nServerArgsLocal=-nolisten tcp -novtswitch -keeptty -layout Seat0 -isolateDevice PCI:0:2:0\n...\n```\n\nIt works for my computer: one on-board Intel card (xf86-video-intel driver), and one Nvidia card (xf86-video-nouveau driver). You can check if the parameters are passed correctly by:\n\n```\n$ pgrep -af PCI\nroot     16993  1.6  1.3  32900 26772 ?        S    08:09   0:19 /usr/bin/X0 :1 vt7 -nolisten tcp -novtswitch -keeptty -layout Seat0 -isolateDevice PCI:0:2:0 -auth /var/run/xauth/A:1-ES6CCb\nroot     17124  5.9  0.5  18996 11980 ?        S    08:09   1:09 /usr/bin/X1 :0 vt8 -nolisten tcp -sharevts -novtswitch -keeptty -layout Seat1 -isolateDevice PCI:1:0:0 -auth /var/run/xauth/A:0-Wgiyza\n```\n\nThe ServerVT=7, ServerVT=8 would be pass to as vt7, vt8\n\n"
    },
    {
      "title": "Fix VT behaviour using fbcon kernel parameter",
      "level": 4,
      "content": "Pass fbcon=map:n to the kernel command line. (Number can differ, see the kernel documentation)\n\nThe value above cause [Ctrl]+Alt+FX switching on video card number n, other video cards just show Xorg.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Multi-pointer X explains how to setup two separate pair of devices on the same session.\n\n- The original Arch Forums thread.\n\n- Multiseat using loginctl.\n\n- Using udev to configure multi-seat automatically.\n\n"
    }
  ]
}