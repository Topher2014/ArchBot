{
  "title": "OpenARC",
  "url": "https://wiki.archlinux.org/title/OpenARC",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "OpenARC is an open source implementation of the experimental Authenticated Received Chain (ARC) email authentication system, designed to allow an intermediate mail server like a mailing list or forwarding service to sign an email's original authentication results.\n\nARC is supported by most common mail providers, including Microsoft, Google, Fastmail, and Proton Mail.\n\n"
    },
    {
      "title": "The idea",
      "level": 2,
      "content": "DMARC allows a sender's domain to indicate that a message is protected by SPF and/or DKIM. DMARC also indicates what a receiving server should do if a check of the message's SPF and/or DKIM does not pass (the receiving server can reject the message, for example).\n\nHowever, when an email is sent through a mailing list or mail forwarder, DKIM or SPF checks might fail due to those intermediary servers making changes to the message. To prevent this failing of legitimate messages, ARC was created.\n\nARC re-signs the message with ARC headers. These headers allow us to see who modified the message, and what the state of authentication was before the modifications by an intermediary server.\n\nAfter changes to the message by an intermediary server, SPF and/or DKIM checks might fail (see above). However, if there is a valid ARC chain, then a receiving server can still pass the message, if it trusts the intermediary server(s), as the ARC chain will allow the receiving mail server to extract the (old) SPF and DKIM results, which will pass the check.\n\nSee RFC 8617 for more information.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the openarcAUR package.\n\nInstall the openarc-gitAUR package for the most recent development updates.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The main configuration file for the signing service is /etc/openarc/openarc.conf.\n\n- Create an empty configuration file /etc/openarc/openarc.conf, or copy/move the sample configuration file /usr/share/doc/openarc/openarc.conf.sample to /etc/openarc/openarc.conf and change or add the following options (See openarc.conf(5) for details):\n\n```\n/etc/openarc/openarc.conf\n```\n\n```\nPidFile /run/openarc/openarc.pid\nUserID  openarc:openarc\nSocket  local:/run/openarc/openarc.sock\n\nMode                    sv\nCanonicalization        relaxed/simple\nDomain                  example.com\nSelector                myselector\nKeyFile                 /etc/openarc/keys/myselector.private\n```\n\n- Socket address is the one specified in /etc/postfix/main.cf. This is what /etc/postfix/main.cf should contain:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsmtpd_milters = unix:/run/opendkim/opendkim.sock\n    unix:/run/openarc/openarc.sock\nnon_smtpd_milters = $smtpd_milters\nmilter_default_action = accept\n```\n\n- To generate a secret signing key using OpenDKIM's opendkim-genkey, specify the domain used to send mails and a selector which is used to refer to the key. The selector may be any value. See the RFC for details, but alpha-numeric strings should be OK:\n\n```\n# opendkim-genkey -D /etc/openarc/keys -r -s myselector -d example.com\n# chown -R openarc /etc/openarc/keys\n```\n\nNote that opendkim-keygen also generates a DNS zone file for your domain.\n\n- Alternatively, you can also generate keys with just OpenSSL. Specify your domain instead of {YOURDOMAIN.COM}, and choose a 2048-bit key if you prefer.\n\nFirst, create the private key:\n\n```\n# openssl genrsa -out /etc/openarc/keys/{YOURDOMAIN.COM}.key 1024\n```\n\nThen, extract the public key from the private key you just generated:\n\n```\n# openssl rsa -in /etc/openarc/keys/{YOURDOMAIN.COM}.key -pubout -out /etc/openarc/keys/{YOURDOMAIN.COM}.pub\n```\n\nChange the owner of the key files and restrict permissions:\n\n```\n# chown -R openarc /etc/openarc/keys\n# chmod -R 600 /etc/openarc/keys/{yourkey}.key\n```\n\nYour Public key (for DNS):\n\n```\n# cat /etc/openarc/keys/{YOURDOMAIN.COM}.pub\n```\n\nNow either create a DNS txt file for your locally hosted DNS in the following format:\n\n```\n{YOURSELECTOR}._domainkey.{YOURDOMAIN.COM}.\tIN TXT \"v=DKIM1;k=rsa;p={YOUR-PUBLIC-KEY};\"\n```\n\nOr, copy the Public key and paste it into your DNS txt file with the following format:\n\n```\n<selector>._domainkey.<domain>.\n{YOUR-PUBLIC-KEY}\n```\n\n- If you want logging to syslog, enable it as follows:\n\n```\n/etc/openarc/openarc.conf\n```\n\n```\n...\nSyslog  yes\n...\n```\n\n- To tell OpenARC which headers to sign, configure them for example as follows:\n\n```\n/etc/openarc/openarc.conf\n```\n\n```\n...\nSignHeaders to,subject,message-id,date,from,mime-version,dkim-signature,arc-authentication-results\n...\n```\n\n- The PeerList contains a list of IP addresses, CIDR blocks, hostnames, or domain names, whose mail should be neither signed, nor verified by this filter. This can be used to exclude your local mail for example. This file needs to be created if it does not yet exist.\n\n```\n/etc/openarc/openarc.conf\n```\n\n```\n...\nPeerList /etc/openarc/PeerList\n...\n```\n\n- Other configuration options are available. Make sure to read the documentation.\n- Enable/start the openarc.service.\n\n"
    },
    {
      "title": "Postfix integration",
      "level": 2,
      "content": "To integrate ARC using unix sockets, add the postfix user to the openarc group and edit the OpenARC and Postfix configuration files as follows:\n\n```\n/etc/openarc/openarc.conf\n```\n\n```\nUserID  openarc:openarc\nSocket  local:/run/openarc/openarc.sock\n```\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsmtpd_milters = unix:/run/opendkim/opendkim.sock\n    unix:/run/openarc/openarc.sock\nnon_smtpd_milters = $smtpd_milters\nmilter_default_action = accept\n```\n\n"
    },
    {
      "title": "Security",
      "level": 2,
      "content": "The default configuration for the OpenARC daemon is less than ideal from a security point of view (all those are minor security issues):\n\n- The OpenARC daemon does not need to run as root at all (the configuration suggested earlier will have OpenARC drop root privileges by itself, but systemd can do this too and much earlier).\n- If your mail daemon is on the same host as the OpenARC daemon, there is no need for localhost tcp sockets, and unix sockets may be used instead, allowing classic user/group access controls.\n- OpenARC is using the /tmp folder by default whereas it could use its own folder with additional access restrictions.\n\nThe following configuration files will fix most of those issues (assuming you are using Postfix) and drop some unnecessary options in the systemd service unit. First, create a missing directory:\n\n```\n# mkdir /var/lib/openarc\n```\n\nThen:\n\n```\n/etc/openarc/openarc.conf\n```\n\n```\nBaseDirectory           /var/lib/openarc\nDomain                  example.com\nKeyFile                 /etc/openarc/keys/myselector.private\nSelector                myselector\nSocket                  local:/run/openarc/openarc.sock\nSyslog                  Yes\nTemporaryDirectory      /run/openarc\n```\n\n```\n/etc/systemd/system/openarc.service\n```\n\n```\n[Unit]\nDescription=OpenARC daemon\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nUser=openarc\nGroup=openarc\nExecStart=/usr/bin/openarc -c /etc/openarc/openarc.conf\nRuntimeDirectory=openarc\nRuntimeDirectoryMode=0700\n\n[Install]\nWantedBy=multi-user.target\n```\n\nEdit /etc/postfix/main.cf accordingly to make Postfix listen to this unix socket:\n\n```\n/etc/postfix/main.cf\n```\n\n```\nsmtpd_milters = unix:/run/opendkim/opendkim.sock\n    unix:/run/openarc/openarc.sock\nnon_smtpd_milters = $smtpd_milters\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- ARC Specification for Email\n- ARC email authentication - Google Workspace Admin Help\n- \"What is Authenticated Received Chain (ARC) and why does it matter?\" by Proton Mail\n- What is ARC - by Fastmail\n- What is ARC - b y Postmarkapp\n\n"
    }
  ]
}