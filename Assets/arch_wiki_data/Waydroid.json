{
  "title": "Waydroid",
  "url": "https://wiki.archlinux.org/title/Waydroid",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Linux Containers\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nWaydroid is a container-based approach to boot a full Android system on a regular Linux system.\n\n"
    },
    {
      "title": "CPU Requirements",
      "level": 3,
      "content": "The requirements depend on the CPU architecture. You can check this table for more information.\n\nYou can check if you have the required CPU instructions with cat /proc/cpuinfo.\n\n"
    },
    {
      "title": "GPU Requirements",
      "level": 3,
      "content": "Waydroid currently works best with Intel GPUs. They should work out of the box.\n\nAll AMD GPUs have been supported; if Waydroid does not work you might also want to try to build a new Waydroid image (which works for Radeon 680M), or try the NVIDIA instructions below.\n\nNVIDIA GPUs do not work currently, but there are 2 workarounds.\n\n1. Switch to integrated graphics card if possible\n1. Use software rendering (see #Software rendering)\n\n"
    },
    {
      "title": "Wayland session manager",
      "level": 3,
      "content": "Waydroid only works in a Wayland session manager, so make sure you are in a Wayland session.\n\nNote that even if you are in X11, many Wayland session managers support nested session (so you can run it inside your X11 session), the simplest example is cage.\n\n"
    },
    {
      "title": "Kernel Modules",
      "level": 3,
      "content": "You need to run a kernel which comes with the binder modules. These are included in the linux, linux-lts, and linux-zen kernels, but if you use a different kernel you may need to add these via DKMS or recompiling.\n\n"
    },
    {
      "title": "DKMS modules",
      "level": 4,
      "content": "Install binder_linux-dkmsAUR and load the kernel module binder_linux with module options devices=binder,hwbinder,vndbinder (see bug report).\n\n```\n# modprobe binder-linux devices=binder,hwbinder,vndbinder\n```\n\nOptionally, you can setup binder_linux to be loaded at boot by creating configuration files in /etc/modules-load.d/ and /etc/modprobe.d/ (See Kernel module for more information).\n\n```\n/etc/modules-load.d/binder_linux.conf\n```\n\n```\n# Load binder_linux at boot\nbinder_linux\n```\n\n```\n/etc/modprobe.d/binder_linux.conf\n```\n\n```\n# Options for binder_linux\noptions binder_linux devices=binder,hwbinder,vndbinder\n```\n\nYou will also need to use the Kernel parameter ibt=off to work around oops on kernels 5.18+. See Segmentation fault when mounting /dev/binderfs\n\n"
    },
    {
      "title": "Building a kernel",
      "level": 4,
      "content": "Alternatively, you can recompile the linux kernel — or other kernel packages (>=5.7) — with the necessary options. Also see Kernel#Compilation.\n\nWhen building a minimal kernel, keep the following requirements in mind:\n\n- IPv6 support. Without IPv6 networking built into your kernel, there will be no IPv4 connectivity in Waydroid.\n- Netlink sockets (CONFIG_NF_CT_NETLINK=y).\n- PSI (CONFIG_PSI=y).\n- Loop block devices (CONFIG_BLK_DEV_LOOP=m) - the loop module must be loaded before starting Waydroid.\n\nWhen setting compilation options, you have 2 options available; binder and binderfs. Instructions for both are provided below.\n\nThe modules can either be compiled into the kernel (y), into modules (m), or not at all (n). Also, not all combinations in the configuration are possible, and some options will require other options.\n\nThe configuration options below will compile binder as a module, while the last option specifies that there will be three devices created in the /dev/ directory, when the binder module is loaded.\n\n```\nCONFIG_ANDROID=y\nCONFIG_ANDROID_BINDER_IPC=m\nCONFIG_ANDROID_BINDERFS=n\nCONFIG_ANDROID_BINDER_DEVICES=\"binder,hwbinder,vndbinder\"\n```\n\nWhen building a kernel from the AUR, one can update the configuration with the following steps:\n\n1. run makepkg --nobuild, which will download the sources, verify and extract them and run the prepare() function.\n1. edit the .config file (with the dot in the filename), which is located at the base of the kernel directory.\n1. at the end of the prepare() function was probably a command which regenerates the makefiles with information from the configuration, possibly make olddefconfig. Move that to the build() function, or execute it yourself.\n1. run makepkg --noextract, which will continue from the place where makepkg --nobuild stopped.\n\nThe binder kernel module has been known to cause issues for several users. To address these issues, binderfs was created. One has to choose between the old and the new way when compiling the kernel. With the options below, one will use binderfs instead.\n\nWith the kernel sources comes also a simple script to set configuration options. It will not do dependency checks, just like when editing the configuration by hand. When being in the same directory where the .config file lies, one can execute the following commands:\n\n```\n$ scripts/config --enable  CONFIG_ANDROID\n$ scripts/config --enable  CONFIG_ANDROID_BINDER_IPC\n$ scripts/config --enable  CONFIG_ANDROID_BINDERFS\n$ scripts/config --set-str CONFIG_ANDROID_BINDER_DEVICES \"\"\n```\n\nWhen building a kernel from the AUR, it is enough to insert these lines at the right place in the PKGBUILD, usually in prepare().\n\n"
    },
    {
      "title": "Setup binder devices",
      "level": 4,
      "content": "Make sure you have the latest version of Waydroid package, and Waydroid will automatically take care of this.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the waydroidAUR package.\n\nOptionally, install waydroid-imageAUR or waydroid-image-gappsAUR to provide the needed Android image through AUR. It is however recommended to let Waydroid itself handle downloading the images.\n\nAfterwards init Waydroid, this will automatically download the latest Android image if it is not yet available.\n\n```\n# waydroid init\n```\n\nTo init with GApps support:\n\n```\n# waydroid init -s GAPPS\n```\n\nNext start/enable the waydroid-container.service.\n\nWaydroid should now work.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Make sure that waydroid-container.service is started then run:\n\n```\n$ waydroid session start\n```\n\nThe Waydroid session is now active, the following are command examples to interact with it:\n\nLaunch a GUI:\n\n```\n$ waydroid show-full-ui\n```\n\nLaunch a shell:\n\n```\n# waydroid shell\n```\n\nInstall an application:\n\n```\n$ waydroid app install $path_to_apk\n```\n\nGet the application list:\n\n```\n$ waydroid app list\n```\n\nRun an application (Note, $package_name referes to the `packageName` attribute as shown by the list command and not to the literal name of the package as shown in the `Name` attribute):\n\n```\n$ waydroid app launch $package_name\n```\n\n"
    },
    {
      "title": "Network",
      "level": 2,
      "content": "The network should work out of the box, if it is not, you might need to make sure packet forwarding is enabled in the kernel and allow the following rules through your firewall before running Waydroid session start.\n\nTaking ufw as an example:\n\n- DNS traffic needs to be allowed: # ufw allow 67 # ufw allow 53\n- Packet forwarding needs to be allowed: # ufw default allow FORWARD\n\n- # ufw allow 67\n- # ufw allow 53\n\n```\n# ufw allow 67\n```\n\n```\n# ufw allow 53\n```\n\n- # ufw default allow FORWARD\n\n```\n# ufw default allow FORWARD\n```\n\nFor firewalld, you can use those commands:\n\n- DNS: # firewall-cmd --zone=trusted --add-port=67/udp # firewall-cmd --zone=trusted --add-port=53/udp\n- Packet forwarding: # firewall-cmd --zone=trusted --add-forward\n- Add the waydroid interface to a trusted: # firewall-cmd --zone=trusted --add-interface=waydroid0\n\n- # firewall-cmd --zone=trusted --add-port=67/udp\n- # firewall-cmd --zone=trusted --add-port=53/udp\n\n```\n# firewall-cmd --zone=trusted --add-port=67/udp\n```\n\n```\n# firewall-cmd --zone=trusted --add-port=53/udp\n```\n\n- # firewall-cmd --zone=trusted --add-forward\n\n```\n# firewall-cmd --zone=trusted --add-forward\n```\n\n- # firewall-cmd --zone=trusted --add-interface=waydroid0\n\n```\n# firewall-cmd --zone=trusted --add-interface=waydroid0\n```\n\n```\n# firewall-cmd --runtime-to-permanent\n```\n\n"
    },
    {
      "title": "Enable Window integration with Desktop Window Manager",
      "level": 3,
      "content": "waydroid by default always runs in fullscreen.\n\nIf you want waydroid to integrate with your Desktop Environments Window Manager:\n\nstart a waydroid session with:\n\n```\n$ waydroid session start\n```\n\nset the required property:\n\n```\n$ waydroid prop set persist.waydroid.multi_windows true\n```\n\nrestart the session:\n\n```\n$ waydroid session stop\n$ waydroid session start\n```\n\nnow apps should start in their own desktop windows.\n\nmore in the official Docs\n\n"
    },
    {
      "title": "Software rendering",
      "level": 3,
      "content": "Make sure that you have already run:\n\n```\n# waydroid init\n```\n\n(see #Installation section for more information)\n\nThen, add the following:\n\n```\n/var/lib/waydroid/waydroid.cfg\n```\n\n```\n[properties]\nro.hardware.gralloc=default\nro.hardware.egl=swiftshader\n```\n\nThen run\n\n```\nwaydroid upgrade --offline\n```\n\nto apply configurations to actual props.\n\nFinally, run restart the waydroid-container.service.\n\n"
    },
    {
      "title": "Setting viewport dimensions",
      "level": 3,
      "content": "To set the dimensions of the waydroid window use the following commands with the dimensions adjusted to your liking:\n\n```\n$ waydroid prop set persist.waydroid.width 576\n$ waydroid prop set persist.waydroid.height 1024\n```\n\nThen restart the waydroid-container.service.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "If you run into issues, take a look at the official Issue Tracker: Waydroid issue tracker.\n\n"
    },
    {
      "title": "General tips",
      "level": 3,
      "content": "Waydroid is in rapid development so if you face issues, here is a good list of steps to do first:\n\n1. Make sure your Waydroid package is up to date.\n1. Make sure you have the latest Waydroid image by running # waydroid upgrade\n1. Reset Waydroid: stop the waydroid-container.service, run # waydroid init -f and start the service again.\n1. You may also want to do little cleanup, run # rm -rf /var/lib/waydroid /home/.waydroid $ rm -rf ~/waydroid ~/.share/waydroid ~/.local/share/applications/*aydroid* ~/.local/share/waydroid\n\n```\n# waydroid upgrade\n```\n\n```\n# waydroid init -f\n```\n\n```\n# rm -rf /var/lib/waydroid /home/.waydroid\n```\n\n```\n$ rm -rf ~/waydroid ~/.share/waydroid ~/.local/share/applications/*aydroid* ~/.local/share/waydroid\n```\n\n"
    },
    {
      "title": "ARM Apps Incompatible",
      "level": 3,
      "content": "Use casualsnek's script to install a translation layer.\n\nDue to optimizations in the translation layers, It is recommended to use libndk on AMD CPUs and libhoudini on Intel CPUs. However some apps will work on one translation layer and not another. so you may need to try both if a game does not work or gets bad performance.\n\nInstall libndk arm translation\n\n```\n# python3 main.py install libndk\n```\n\nInstall libhoudini arm translation\n\n```\n# python3 main.py install libhoudini\n```\n\n"
    },
    {
      "title": "Rotated apps are unusable",
      "level": 3,
      "content": "See Issue 70.\n\nClick F11 to switch the current app to windowed mode.\n\n"
    },
    {
      "title": "Failed to start Clipboard manager service",
      "level": 3,
      "content": "Install python-pyclipAUR and its dependency for your graphical session (xclip for X11 or wl-clipboard for Wayland).\n\n"
    },
    {
      "title": "Sometimes the physical keyboard does not work",
      "level": 3,
      "content": "Press the left Alt key.\n\n"
    },
    {
      "title": "dnsmasq: failed to open pidfile /run/waydroid-lxc/dnsmasq.pid: Permission denied",
      "level": 3,
      "content": "An AppArmor rule is likely not set. Add the following rule:\n\n```\n/etc/apparmor.d/usr.sbin.dnsmasq\n```\n\n```\n@{run}/waydroid-lxc/ r,\n@{run}/waydroid-lxc/* rw,\n```\n\n"
    },
    {
      "title": "Commands inside Waydroid shell outputs inaccessible or not found",
      "level": 3,
      "content": "On Arch based distributions there is a \"bug\" that may appear while working with lxc-attach that may cause this issue with commands inside waydroid shell like adbd or settings.\n\nA possible workaround for this would be replace the waydroid shell command with:\n\n```\n# lxc-attach -P /var/lib/waydroid/lxc/ -n waydroid --clear-env\n```\n\n"
    },
    {
      "title": "WARNING: Service manager /dev/binder has died",
      "level": 3,
      "content": "See Issue 136.\n\nYou should enable PSI.\n\nAdd psi=1 to the kernel command line.\n\nNote that the Liquorix kernel will never work with Waydroid, as it uses certain schedulers that are incompatible with PSI.\n\n"
    },
    {
      "title": "Graphical Corruption on multi-gpu systems",
      "level": 3,
      "content": "Currently Waydroid needs to run on the same GPU the host compositor is running on. The two ways of fixing this is to either edit /var/lib/waydroid/lxc/waydroid/config_nodes to be the correct GPU or to change the GPU the compositor runs on.\n\n"
    },
    {
      "title": "No internet connection",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nAccording to waydroid/issue/509, Waydroid has known nftables conflicts with docker.\n\nTo fix this turn off LXC_USE_NFT as a workaround\n\n```\n/usr/lib/waydroid/data/scripts/waydroid-net.sh\n```\n\n```\nLXC_USE_NFT=\"false\"\n```\n\nor run the following commands:\n\n```\n# systemctl stop docker\n# systemctl restart iptables\n# ip link delete docker0\n# systemctl restart waydroid-container\n```\n\n"
    },
    {
      "title": "This device isn't Play Protect certified",
      "level": 3,
      "content": "See: https://docs.waydro.id/faq/google-play-certification\n\nIf you get this error you need to enter waydroid shell and retrieve the android id:\n\n```\n# waydroid shell\n# ANDROID_RUNTIME_ROOT=/apex/com.android.runtime ANDROID_DATA=/data ANDROID_TZDATA_ROOT=/apex/com.android.tzdata ANDROID_I18N_ROOT=/apex/com.android.i18n sqlite3 /data/data/com.google.android.gsf/databases/gservices.db \"select * from main where name = \\\"android_id\\\";\"\n```\n\nAfterwards enter the id into this site: https://www.google.com/android/uncertified\n\nWait a few minutes and restart waydroid.\n\n"
    },
    {
      "title": "Waydroid hangs after a while",
      "level": 3,
      "content": "This is likely due to the audio server dying, see Issue 576 and Issue 829 for details.\n\nA workaround is to run:\n\n```\n# sysctl -w kernel.pid_max=65535\n```\n\nYou can make it permanent by creating a .conf file in /etc/sysctl.d/ and adding kernel.pid_max=65535 to it.\n\n```\n/etc/sysctl.d/99-sysctl.conf\n```\n\n```\nkernel.pid_max=65535\n```\n\n"
    },
    {
      "title": "Application need unroot device",
      "level": 3,
      "content": "According to Issue 1060, add following can bypass the root detection:\n\n```\n/var/lib/waydroid/waydroid.cfg\n```\n\n```\n[properties]\nro.product.brand=google\nro.product.manufacturer=Google\nro.system.build.product=redfin\nro.product.name=redfin\nro.product.device=redfin\nro.product.model=Pixel 5\nro.system.build.flavor=redfin-user\nro.build.fingerprint=google/redfin/redfin:11/RQ3A.211001.001/eng.electr.20230318.111310:user/release-keys\nro.system.build.description=redfin-user 11 RQ3A.211001.001 eng.electr.20230318.111310 release-keys\nro.bootimage.build.fingerprint=google/redfin/redfin:11/RQ3A.211001.001/eng.electr.20230318.111310:user/release-keys\nro.build.display.id=google/redfin/redfin:11/RQ3A.211001.001/eng.electr.20230318.111310:user/release-keys\nro.build.tags=release-keys\nro.build.description=redfin-user 11 RQ3A.211001.001 eng.electr.20230318.111310 release-keys\nro.vendor.build.fingerprint=google/redfin/redfin:11/RQ3A.211001.001/eng.electr.20230318.111310:user/release-keys\nro.vendor.build.id=RQ3A.211001.001\nro.vendor.build.tags=release-keys\nro.vendor.build.type=user\nro.odm.build.tags=release-keys\n```\n\nthen use\n\n```\nwaydroid upgrade --offline\n```\n\nto apply the configuration.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Waydroid GitHub repo\n- Waydroid documentation\n- Waydroid Matrix group\n- Waydroid Telegram group\n\n"
    }
  ]
}