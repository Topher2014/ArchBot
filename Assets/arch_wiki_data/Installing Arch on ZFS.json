{
  "title": "Installing Arch on ZFS",
  "url": "https://wiki.archlinux.org/title/Installing_Arch_on_ZFS",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- ZFS\n- Experimenting with ZFS\n\nThis article details the steps required to install Arch Linux onto a ZFS root filesystem.\n\nSince ZFS kernel modules are out-of-tree (i.e. not included in the mainline kernel) and Arch Linux is a rolling release distribution, there will often be brief periods when the kernel-specific packages in the external repository are not in sync with those in the Arch repositories. This can sometimes result in the ZFS modules (DKMS packages) failing to compile with the latest kernel. If you always want to use the most recent kernel packages, installing Arch on ZFS might not be ideal.\n\nSee ZFS#Installation for possible solutions.\n\n"
    },
    {
      "title": "Acquire installation medium",
      "level": 2,
      "content": "To install Arch Linux on ZFS, you need to use an installation medium with the ZFS modules. The easiest way would be to use an alternative iso instead (assuming you trust such ISOs). You can also use ISOs from other distribution that support ZFS such as Ubuntu or NixOS or create a custom image (see below).\n\n"
    },
    {
      "title": "Use an unofficial archiso that includes ZFS modules",
      "level": 3,
      "content": "An unofficial archiso exists that can be used directly, without the need to manually create an entire image or add ZFS modules once booted. Do note however that it includes only the linux-lts kernel and zfs-linux-lts module.\n\nSee r-maerz/archlinux-lts-zfs.\n\n"
    },
    {
      "title": "Use ISOs from other distros",
      "level": 3,
      "content": "You could also choose distros with ISO that has ZFS modules built-in since most distros should have arch-install-scripts packaged. For example both Ubuntu ISOs and NixOS ISOs should just work. Just remember to change or skip some of the steps in the installation guide such as network configuration as needed.\n\n"
    },
    {
      "title": "Embedding ZFS module into custom archiso",
      "level": 3,
      "content": "Follow the Archiso steps for creating a fully functional Arch Linux live CD/DVD/USB image. To include ZFS support in the image, you can either build your choice of PKGBUILDs from the AUR or include prebuilt packages from one of the unofficial user repositories.\n\n"
    },
    {
      "title": "Using self-built ZFS packages from the AUR",
      "level": 4,
      "content": "Build the ZFS packages you want by following the normal procedures. If you are unsure, zfs-dkmsAUR and zfs-utilsAUR are likely to be compatible with the widest range of other modifications to the Archiso image you may wish to perform. Proceed to set up a custom local repository. Include the resulting repository in the Pacman configuration of your new profile.\n\nInclude the built packages in the list of packages to be installed. The example below presumes you want to include only the zfs-dkmsAUR and zfs-utilsAUR packages.\n\n```\npackages.x86_64\n```\n\n```\n...\nzfs-dkms\nzfs-utils\n```\n\nIf you include any DKMS packages, make sure you also include headers for any kernels you are including in the ISO (linux-headers for the default kernel).\n\n"
    },
    {
      "title": "Using the archzfs unofficial user repository",
      "level": 4,
      "content": "Add the archzfs unofficial user repository to pacman.conf in your new Archiso profile.\n\nAdd the archzfs-linux group to the list of packages to be installed (the archzfs repository provides packages for the x86_64 architecture only).\n\n```\npackages.x86_64\n```\n\n```\n...\narchzfs-linux\n```\n\n"
    },
    {
      "title": "Finishing up",
      "level": 4,
      "content": "Regardless of where you source your ZFS packages from, you should finish by building the ISO.\n\n"
    },
    {
      "title": "Select boot method",
      "level": 2,
      "content": "Since the initrd tools and boot loaders you choose to use will affect later steps of the installation process, you should decide which combinations of them to use before proceeding with installation.\n\n"
    },
    {
      "title": "Initrd tools",
      "level": 3,
      "content": "By default, both dracut and mkinitcpio does not support booting from a ZFS root since they do not include the necessary kernel modules and userspace tools into the initrd. You'll need to use dracut modules or mkinitcpio hooks to make initrds that can boot from a ZFS root. The initrd tool you choose to use will in turn affect the syntax of kernel parameters/cmdlines for specifying ZFS roots.\n\nHere are the options:\n\n"
    },
    {
      "title": "zfs hook",
      "level": 4,
      "content": "The zfs hook is the only option when using the default busybox based initrd.\n\nTo configure the zfs hook, simply add zfs before the filesystems hook in your mkinitcpio.conf(5)\n\nPossible syntax of kernel parameters are:\n\n- root=zfs, which determines the root filesystem using the bootfs property\n- root=ZFS=<pool/dataset>, which uses a pool or a dataset as root. When a pool is specified, the root filesystem is determined based on the mountpoint property\n- zfs=auto: same effect as root=zfs\n- zfs=<pool/dataset>: same effect as root=ZFS=<pool/dataset>\n\nAdditionally, the following kernel parameters can be set to adjust the behavior of the initrd:\n\n- zfs_force=1 makes the zpool import command use the -f flag\n- zfs_wait=<seconds> waits for the devices to show up before running zpool import\n\n"
    },
    {
      "title": "sd-zfs hook",
      "level": 4,
      "content": "The zfs hook is not compatible with systemd based initrds. Instead you should use the sd-zfs hook.\n\nThere are 2 choices: one shipped with zfs-utils-poscat from archlinuxcn and one shipped with mkinitcpio-sd-zfsAUR[broken link: package not found]. The former is actively maintained while the latter seems to be abandoned.\n\nTo configure this hook simply add it to anywhere in the HOOKS array of your mkinitcpio.conf. A typical configuration could look like this:\n\n```\nHOOKS=(systemd sd-zfs autodetect microcode modconf kms keyboard sd-vconsole block filesystems fsck)\n```\n\nThe supported cmdline formats are:\n\n- root=zfs, which imports all pools in initrd, searches for the first pool with the bootfs property set, and then mounts bootfs as root.\n- root=zfs:poolname, which imports only the specified pool and then mounts the pool's bootfs as root.\n- root=zfs:poolname/dataset, which imports only the specified pool and then mounts the specified dataset as root.\n\nRefer to the github repository for documentation on configuration.\n\n"
    },
    {
      "title": "zfs module",
      "level": 4,
      "content": "If instead you'd like to use dracut for initrd then you should use the zfs dracut module shipped with zfs-utilsAUR. Check the documentation https://openzfs.github.io/openzfs-docs/man/master/7/dracut.zfs.7.html for how to configure the zfs module.\n\n"
    },
    {
      "title": "Boot loaders",
      "level": 3,
      "content": "Since the task of importing ZFS pools, mounting the root filesystem and pivot_rooting into the new root are all handled by the UKI or vmlinuz+initrd, there's no requirements on what boot loader you can use. Indeed, even an EFI boot stub should suffice given that the kernel parameters are configured properly depending on what tools you used for your initrd (See the above section #Initrd tools)\n\n"
    },
    {
      "title": "Using GRUB2",
      "level": 4,
      "content": "Grub2 is able to read ZFS filesystems, given that the pools are created with only a limited set of features enabled (see ZFS#GRUB-compatible pool creation) thus is possible to place UKI/initrd on ZFS root when using Grub2.\n\n"
    },
    {
      "title": "Partition the destination drive",
      "level": 2,
      "content": "Partitioning is done similar to other filesystems. See the aforementioned partitioning page or the installation guide on what layout to use and how to partition disks.\n\n"
    },
    {
      "title": "Layout supporting full system rollback",
      "level": 3,
      "content": "To be able to use ZFS to snapshot everything you need to rebuild UKI or vmlinuz+initrd (so that you can rollback your full system state), you can use the following partition layout:\n\n- Do not mount anything on /boot, this way the vmlinuz is placed on your root, which is a ZFS filesystem.\n- If you use the UKI, mount ESP on /efi and point the UKI target to /efi/EFI/Linux/<name of image>.efi.\n- If you use vmlinuz+initrd, mount ESP(UEFI) or boot partition(BIOS) on /efi and point the initrd target to /efi/<name of initrd>.img. Set up a pacman hook that automatically copies vmlinuz from /boot/vmlinuz-* to /efi/.\n\nTo perform a rollback, just rollback your ZFS root filesystem and either regenerate your UKI or regenerate the initrd and then copy vmlinuz from /boot/vmlinuz-* to /efi/ manually.\n\n"
    },
    {
      "title": "Enable ZED on live CD",
      "level": 3,
      "content": "Since this guide assumes the usage of zfs-mount-generator(8), we need to generate the zfs-list cache before first booting into our system. This requires:\n\n1. Enabling zfs-zed.service on live CD.\n1. Creating empty files at /etc/zfs/zfs-list.cache/<poolname> for every pool you intended to create using touch\n\n"
    },
    {
      "title": "Create the root pool",
      "level": 3,
      "content": "See ZFS#Creating ZFS pools for detailed info. As an example, the following command creates a root pool named rpool on the partition /dev/nvme0n1p2 and sets the altroot property to /mnt:\n\n```\n# zpool create \\\n         -O acltype=posixacl    \\\n         -O relatime=on         \\\n         -O dnodesize=auto      \\\n         -O normalization=formD \\\n         -O compression=zstd    \\\n         -O mountpoint=/        \\\n         -R /mnt                \\\n         rpool /dev/nvme0n1p2\n```\n\n"
    },
    {
      "title": "Create filesystems",
      "level": 3,
      "content": "See ZFS#Creating datasets for detailed info. Here are some considerations when choosing your dataset options and layouts:\n\n1. Most properties are inherited from parent dataset by child unless explicitly overridden.\n1. The default value of the mountpoint property of the child is <mountpoint of parent>/<name of child>.\n\n"
    },
    {
      "title": "Install and configure Arch Linux",
      "level": 2,
      "content": "Follow the steps of installation guide from Installation guide#Installation to before reboot. You should probably use the linux-lts kernel instead of linux.\n\n"
    },
    {
      "title": "Install ZFS",
      "level": 3,
      "content": "Follow ZFS#Installation to install ZFS.\n\n"
    },
    {
      "title": "Configure ZFS",
      "level": 3,
      "content": "Follow ZFS#Configuration to configure ZFS related services. Note however\n\n1. We are under a chroot so don't try to start systemd services, just enable them.\n1. Skip all steps in ZFS#zfs-mount-generator except enabling zfs-zed.service. We will populate the cache later.\n\n"
    },
    {
      "title": "Set up the initrd",
      "level": 3,
      "content": "See #Initrd tools to configure the initrd generator of your choice. Don't forget to regenerate initrd either via mkinitcpio -P or dracut --regenerate-all.\n\n"
    },
    {
      "title": "Populate the zfs-list cache",
      "level": 3,
      "content": "Now exit the chroot. Copy /etc/zfs/zfs-list.cache to /mnt/etc/zfs/zfs-list.cache:\n\n```\n# cp -r /etc/zfs/zfs-list.cache /mnt/etc/zfs/\n```\n\nThis provides the cache needed by zfs-mount-generator.\n\n"
    },
    {
      "title": "Unmount, export and reboot",
      "level": 3,
      "content": "Unmount all mounted filesystems (assuming the altroot is /mnt):\n\n```\n# umount -R /mnt\n```\n\nExport all pools:\n\n```\n# zpool export -a\n```\n\nReboot:\n\n```\n# reboot\n```\n\n"
    }
  ]
}