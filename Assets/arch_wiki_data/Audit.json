{
  "title": "Audit",
  "url": "https://wiki.archlinux.org/title/Audit",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "The Linux audit framework provides a CAPP-compliant (Controlled Access Protection Profile) auditing system that reliably collects information about any security-relevant (or non-security-relevant) event on a system. It can help you track actions performed on a system.\n\nLinux audit helps make your system more secure by providing you with means to analyze what is happening on your system in great detail. It does not, however, provide additional security itself—it does not protect your system from code malfunctions or any kind of exploits. Instead, Audit is useful for tracking these issues and helps you take additional security measures to prevent them.\n\nThe audit framework works by listening to the event reported by the kernel and logging them to a log file.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "In-kernel audit support is available in all officially supported kernels. For custom kernels CONFIG_AUDIT should be enabled. Userspace support is provided by the audit package that is already installed as a dependency of base packages.\n\nAudit can be enabled at boot-time by setting audit=1 as kernel parameter. This will ensure that all processes that run before the audit daemon starts are marked as auditable by the kernel. Not doing that will make a few processes impossible to properly audit. See auditd(8).\n\nAudit framework is composed of the auditd daemon, responsible for writing the audit messages that were generated through the audit kernel interface and triggered by application and system activity. Start/enable auditd.service to activate the daemon.\n\nThis daemon can be controlled by several commands and files:\n\n- auditctl(8): to control the behavior of the daemon on the fly, adding rules etc.\n- /etc/audit/audit.rules: contains the rules and various parameters of the auditd daemon. See audit.rules(7) for details.\n- aureport(8): generate report of the activity on a system\n- ausearch(8): search for various events\n- auditspd: the daemon which can be used to relay event notifications to other applications instead of writing them to disk in the audit log\n- autrace: this command can be used to trace a process, in a similar way as strace.\n- /etc/audit/auditd.conf: configuration file related to the logging. See auditd.conf(5) for details.\n\n"
    },
    {
      "title": "Adding rules",
      "level": 2,
      "content": "Before adding rules, you must know that the audit framework can be very verbose and that each rule must be carefully tested before being effectively deployed. Indeed, just one rule can flood all your logs within a few minutes.\n\n"
    },
    {
      "title": "Audit files and directories access",
      "level": 3,
      "content": "The most basic use of the audit framework is to log the access to the files you want. To do this, you must place a watch on a file or a directory using the option -w followed by a path. The most basic rule to set up is to track accesses to the passwd file:\n\n```\n# auditctl -w /etc/passwd -p rwxa\n```\n\nYou can track access to a folder with:\n\n```\n# auditctl -w /etc/security/\n```\n\nThe first rule keeps track of every read r , write w , execution x , attribute change a to the file /etc/passwd. The second one keeps track of any access to the /etc/security/ folder.\n\nYou can list all active rules with:\n\n```\n# auditctl -l\n```\n\nYou can delete all rules with:\n\n```\n# auditctl -D\n```\n\nOnce you validate the rules, you can append them to the /etc/audit/audit.rules file:\n\n```\n-w /etc/passwd -p rwxa\n-w /etc/security/\n```\n\n"
    },
    {
      "title": "Audit syscalls",
      "level": 3,
      "content": "The audit framework allows you to audit the syscalls performed with the -a option.\n\nA security related rule is to track the chmod(2) syscall, to detect file ownership changes:\n\n```\n# auditctl -a exit,always -S chmod\n```\n\nFor a list of all syscalls: syscalls(2)\n\nA lot of rules and possibilities are available, see auditctl(8) and audit.rules(7).\n\n"
    },
    {
      "title": "Filter unwanted messages",
      "level": 3,
      "content": "In order to prevent noisy audit messages from flooding system logs you may add rules to exclude some of them:\n\n```\n/etc/audit/rules.d/quiet.rules\n```\n\n```\n-A exclude,always -F msgtype=SERVICE_START\n-A exclude,always -F msgtype=SERVICE_STOP\n-A exclude,always -F msgtype=BPF\n-A exclude,always -F exe=/usr/bin/sudo\n```\n\nRemember to verify changes (fix as necessary) and regenerate /etc/audit/audit.rules as follows:\n\n```\n# augenrules --check\n# augenrules --load\n```\n\n"
    },
    {
      "title": "Search the logs",
      "level": 2,
      "content": "The audit framework provides some tools to ease the use and the research of events happening on a system.\n\n"
    },
    {
      "title": "Using pid",
      "level": 3,
      "content": "You can search events related to a particular pid using ausearch:\n\n```\n# ausearch -p 1\n```\n\nThis command will show you all the events logged according to your rules related to PID 1 (i.e. systemd).\n\n"
    },
    {
      "title": "Using keys",
      "level": 3,
      "content": "One of the great features of the audit framework is its ability to use keys to manage events, such a usage is recommended.\n\nYou can use the -k option in your rules to be able to find related events easily:\n\n```\n# auditctl -w /etc/passwd -p rwxa -k KEY_pwd\n```\n\nThen, if you search for events with the key KEY_pwd, ausearch will display only event related to the file /etc/passwd.\n\n```\n# ausearch -k KEY_pwd\n```\n\n"
    },
    {
      "title": "Look for abnormalities",
      "level": 3,
      "content": "The aureport tool can be used to quickly report any abnormal event performed on the system, it includes network interfaces used in promiscous mode, process or thread crashing or exiting with ENOMEM error etc.\n\nThe easiest way to use aureport is:\n\n```\n# aureport -n\n```\n\naureport can be used to generate custom reports, see aureport(8).\n\n"
    },
    {
      "title": "Which files or syscalls are worth-auditing?",
      "level": 2,
      "content": "Keep in mind that each audit rule added will generate logs, so you must be ready to treat this amount of information. Basically, each security-related event/file must be monitored, like ids, ips, anti-rootkits etc. On the other side, it is totally useless to track every write syscall, the smallest compilation will fill your logs with this event.\n\nMore complex set of rules can be set up, performing auditing on a very fine-grained base. If you want to do so, see auditctl(8).\n\n"
    },
    {
      "title": "Gather logs from different hosts",
      "level": 2,
      "content": "The audit framework has a plugin system which provides the possibility to send local logfiles to a remote auditd.\n\n"
    },
    {
      "title": "Send logfiles",
      "level": 3,
      "content": "To send your logfiles to a remote host you need the audisp-remote plugin which comes automatically with the audit package. Activate the plugin:\n\n```\n/etc/audisp/plugins.d/au-remote.conf\n```\n\n```\nactive = yes\ndirection = out\npath = /usr/bin/audisp-remote\ntype = always\nformat = string\n```\n\nand set the remote host where the logs should be send to:\n\n```\n/etc/audisp/audisp-remote.conf\n```\n\n```\nremote_server = domain.name.or.ip\nport = 60\n##local_port = optional\ntransport = tcp\n```\n\n"
    },
    {
      "title": "Receive logfiles",
      "level": 3,
      "content": "To make audit listen for remote audispds you just need to set the tcp options:\n\n```\n/etc/audit/auditd.conf\n```\n\n```\ntcp_listen_port = 60\ntcp_listen_queue = 5\ntcp_max_per_addr = 1\n##tcp_client_ports = 1024-65535 #optional\ntcp_client_max_idle = 0\n```\n\nNow you can view the logs of all configured hosts in the logfiles of the receiving auditd.\n\n"
    },
    {
      "title": "Rotate the logs",
      "level": 2,
      "content": "Send SIGUSR1 to the audit daemon:\n\n```\n# pkill -USR1 -x auditd\n```\n\n"
    },
    {
      "title": "Audit logs flooding into virtual console",
      "level": 3,
      "content": "For users not having enabled auditd, using kernel debug messages higher than loglevel=4 can result in audit flooding security notices on top of virtual terminal.\n\nThese messages can be silenced by enabling auditd.service.\n\nAlternative solutions are:\n\n- lowering your loglevel,\n- disabling audit logs with the kernel parameter audit=0.\n\nSee the systemd issue 15324 on GitHub for the details.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Configuring and auditing Linux systems with Audit daemon\n- Linux Audit Framework 101 – Basic Rules for Configuration\n- Tuning auditd: high-performance Linux Auditing\n\n"
    }
  ]
}