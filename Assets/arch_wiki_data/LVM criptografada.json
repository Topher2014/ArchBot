{
  "title": "LVM criptografada",
  "url": "https://wiki.archlinux.org/title/LVM_criptografada",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Os exemplos a seguir são cenários comuns de um sistema criptografado com dm-crypt. Eles explicam todas as adaptações que serão realizadas do processo de instalação. Todas as ferramentas necessárias estão disponíveis na imagem de instalação.\n\nSe você deseja criptografar um sistema de arquivos não criptografado existente, consulte Criptografar um sistema de arquivos não criptografado existente.\n\n"
    },
    {
      "title": "Visão geral",
      "level": 2,
      "content": "dm-crypt se destaca, tanto em funcionalidades quanto em velocidade, quando o assunto é proteger o sistema de arquivos principal. Diferente da encriptação seletiva de sistemas de arquivos secundários, a criptografia de todo um sistema pode proteger informações como quais programas estão instalados, os nomes de usuários de todas as contas, e vetores comuns de vazamento de dados tais como locate e /var/log. E, é bem mais difícil fazer alterações em um sistema criptografado, exceto o gerenciador de boot e (geralmente) o kernel que não são criptografados.\n\nTodos os cenários ilustrados a seguir compartilham as vantagens supracitadas, prós e contras que os diferenciam estão resumidos abaixo:\n\nTable content:\nCenários | Vantagens | Desvantagens\n#LUKS em uma partição Mostra uma configuração básica e direta para uma partição principal criptografada com LUKS. | Simples particionamento e configuração Em um disco particionado GPT, o systemd pode montar automaticamente a partição raiz. | Inflexível; o espaço em disco precisa ser alocado antes de criptografar\n#LVM dentro do LUKS Consegue flexibilidade no particionamento ao usar LVM dentro de uma partição criptografada com LUKS. | Simples particionamento se sabe como usar LVM Somente uma chave para desbloquear todos os volumes (exemplo, configuração simples de resume-from-disk) design de volumes não é visível quando bloqueado Método mais fácil para suspensão para o disco | LVM adiciona mais uma camada adicional de mapeamento e hook Menos útil, se um volume deve receber uma chave separada\n#LUKS dentro do LVM usa dm-crypt somente depois de configurar o LVM. | LVM pode ser usado para volumes criptografados em múltiplos discos Fácil de usar com grupos de volumes criptografados ou não | Complexo; para mudar volumes precisa modificar também os mapeadores de encriptação Volumes precisam de chaves individuais O layout LVM é transparente quando bloqueado Tempo de inicialização mais lento; cada LVM criptografado deve ser desbloqueado separadamente\n#LUKS dentro do RAID de software usa dm-crypt somente depois de configurar RAID. | Análogo ao LUKS dentro do LVM | Análogo ao LUKS dentro do LVM\n#dm-crypt plain usa o modo plain (plano) do dm-crypt, sem cabeçalho do LUKS e suas opções para múltiplas chaves. Este cenário também permite que dispositivos USB possam ser usados no /boot e como depósito de chaves, que pode ser aplicado para outros cenários. | Melhor em relação aos dados para casos onde um cabeçalho do LUKS é danificado Permite encriptação total de disco Ajuda a solucionar problemas com SSDs | Necessário grande atenção a todos os parâmetros Encriptação de chave única e sem opção de mudança\n#Partição de boot criptografada (GRUB) Mostra como criptografar a partição de boot usando o gerenciador de boot GRUB. Este cenário também usa uma partição de sistema EFI, que pode ser aplicado para outros cenários. | Mesmas vantagens do cenário de instalação em que é baseado (LVM dentro do LUKS neste particular exemplo) Menos dados são deixados sem criptografia, exemplo o gerenciador de boot e a partição de sistema EFI, se presente | Mesmas desvantagens do cenário de instalação em que é baseado (LVM dentro do LUKS neste particular exemplo) Configuração mais complicada Não é suportado por outros gerenciadores de boot\n#Subvolumes do Btrfs com swap Mostra como criptografar um sistema Btrfs, incluindo o diretório /boot, também é possível adicionar uma partição para swap, em um hardware com suporte a UEFI. | Vantagens similares a #Partição de boot criptografada (GRUB) Disponibilidade das funcionalidades do Btrfs | Desvantagens similares a #Partição de boot criptografada (GRUB)\n#Raiz no ZFS |  | \n\nMostra uma configuração básica e direta para uma partição principal criptografada com LUKS.\n\n- Simples particionamento e configuração\n- Em um disco particionado GPT, o systemd pode montar automaticamente a partição raiz.\n\n- Inflexível; o espaço em disco precisa ser alocado antes de criptografar\n\nConsegue flexibilidade no particionamento ao usar LVM dentro de uma partição criptografada com LUKS.\n\n- Simples particionamento se sabe como usar LVM\n- Somente uma chave para desbloquear todos os volumes (exemplo, configuração simples de resume-from-disk)\n- design de volumes não é visível quando bloqueado\n- Método mais fácil para suspensão para o disco\n\n- LVM adiciona mais uma camada adicional de mapeamento e hook\n- Menos útil, se um volume deve receber uma chave separada\n\nusa dm-crypt somente depois de configurar o LVM.\n\n- LVM pode ser usado para volumes criptografados em múltiplos discos\n- Fácil de usar com grupos de volumes criptografados ou não\n\n- Complexo; para mudar volumes precisa modificar também os mapeadores de encriptação\n- Volumes precisam de chaves individuais\n- O layout LVM é transparente quando bloqueado\n- Tempo de inicialização mais lento; cada LVM criptografado deve ser desbloqueado separadamente\n\nusa dm-crypt somente depois de configurar RAID.\n\n- Análogo ao LUKS dentro do LVM\n\n- Análogo ao LUKS dentro do LVM\n\nusa o modo plain (plano) do dm-crypt, sem cabeçalho do LUKS e suas opções para múltiplas chaves. Este cenário também permite que dispositivos USB possam ser usados no /boot e como depósito de chaves, que pode ser aplicado para outros cenários.\n\n- Melhor em relação aos dados para casos onde um cabeçalho do LUKS é danificado\n- Permite encriptação total de disco\n- Ajuda a solucionar problemas com SSDs\n\n- Necessário grande atenção a todos os parâmetros\n- Encriptação de chave única e sem opção de mudança\n\nMostra como criptografar a partição de boot usando o gerenciador de boot GRUB. Este cenário também usa uma partição de sistema EFI, que pode ser aplicado para outros cenários.\n\n- Mesmas vantagens do cenário de instalação em que é baseado (LVM dentro do LUKS neste particular exemplo)\n- Menos dados são deixados sem criptografia, exemplo o gerenciador de boot e a partição de sistema EFI, se presente\n\n- Mesmas desvantagens do cenário de instalação em que é baseado (LVM dentro do LUKS neste particular exemplo)\n- Configuração mais complicada\n- Não é suportado por outros gerenciadores de boot\n\nMostra como criptografar um sistema Btrfs, incluindo o diretório /boot, também é possível adicionar uma partição para swap, em um hardware com suporte a UEFI.\n\n- Vantagens similares a #Partição de boot criptografada (GRUB)\n- Disponibilidade das funcionalidades do Btrfs\n\n- Desvantagens similares a #Partição de boot criptografada (GRUB)\n\nEnquanto todos os cenários acima oferecem maior proteção contra ameaças externas do que somente criptografar sistemas de arquivos não raiz, eles também possuem uma desvantagem comum: qualquer usuário que possui a chave pode abrir todo o disco, e assim, acessar os dados de outro usuário. Se isto é uma preocupação, é possível fazer uma combinação de dispositivo de blocos e sistema de arquivos criptografados empilhados e adquirir as vantagens de ambos. Veja Criptografia de dados em repouso para lhe ajudar no planejamento.\n\nVeja Dm-crypt/Preparando a unidade de armazenamento#Particionamento para uma visão geral das estratégias de particionamento usadas nos cenários.\n\nOutra coisa a considerar é se deve usar uma partição swap criptografada e de qual forma. Veja dm-crypt/Swap criptografada para alternativas.\n\nSe você antecipa a proteção de dados do sistema não somente contra roubo físico, como também contra adulteração lógica, veja dm-crypt/Especialidades#Protegendo a partição de boot não criptografada para possibilidades futuras após seguir um dos cenários.\n\nPara SSDs, você pode considerar habilitar suporte ao TRIM, mas esteja ciente que, isto tem potenciais problemas de segurança. Veja dm-crypt/Especialidades#Suporte para descarte/TRIM para unidades de estado sólido (SSD) para mais informações.\n\n- Em qualquer cenário, nunca diretamente repare um volume criptografado com ferramentas de reparação de sistema de arquivos como fsck, ou isto destruirá qualquer chance de recuperar a chave usada para abrir seus arquivos. Tais ferramentas devem ser usadas no dispositivo desbloqueado (aberto).\n- Para o formato LUKS2: O suporte do GRUB para LUKS2 é limitado; veja GRUB#/boot criptografado para detalhes. Use LUKS1 (cryptsetup luksFormat --type luks1) para partições que o GRUB precisará desbloquear. O formato LUKS2 tem um alto uso de RAM por design, com padrão de 1 GB por mapeador criptografado. Máquinas com pouca RAM e/ou múltiplas partições LUKS2 desbloqueadas em paralelo podem apresentar erro na inicialização. Veja a opção --pbkdf-memory para controlar o uso de memória [1].\n\n- O suporte do GRUB para LUKS2 é limitado; veja GRUB#/boot criptografado para detalhes. Use LUKS1 (cryptsetup luksFormat --type luks1) para partições que o GRUB precisará desbloquear.\n- O formato LUKS2 tem um alto uso de RAM por design, com padrão de 1 GB por mapeador criptografado. Máquinas com pouca RAM e/ou múltiplas partições LUKS2 desbloqueadas em paralelo podem apresentar erro na inicialização. Veja a opção --pbkdf-memory para controlar o uso de memória [1].\n\n"
    },
    {
      "title": "LUKS em uma partição",
      "level": 2,
      "content": "Este exemplo demonstra um sistema criptografado com dm-crypt + LUKS em uma partição:\n\n```\n+--------------------+-------------------------------+-----------------------+\n| Partição de boot   | Sistema criptografado com LUKS2 | Espaço livre opcional |\n|                    | partição                      | para outras partições |\n|                    |                               |                       |\n| /boot              | /                             |                       |\n|                    |                               |                       |\n|                    | /dev/mapper/raiz         |                       |\n|                    |-------------------------------|                       |\n| /dev/sda1          | /dev/sda2                     |                       |\n+--------------------+-------------------------------+-----------------------+\n```\n\nOs primeiros passos podem ser executados imediatamente após iniciar a imagem de instalação do Arch Linux.\n\n"
    },
    {
      "title": "Preparando o disco",
      "level": 3,
      "content": "Antes de criar qualquer partição, você deveria saber a importância e também métodos de como apagar o disco com segurança, descritos em dm-crypt/Preparando a unidade de armazenamento.\n\nCrie as partições necessárias, ao menos uma para / (exemplo /dev/sda2) e /boot (/dev/sda1). Veja Particionamento.\n\n"
    },
    {
      "title": "Preparando partições que não são de boot",
      "level": 3,
      "content": "Os comandos a seguir criam e montam a partição raiz criptografada. Eles correspondem ao detalhado procedimento descrito em dm-crypt/Criptografando um sistema de arquivos não raiz#Partição (que, apesar do título, pode ser aplicado a partições raiz, contanto que mkinitcpio e o gerenciador de boot sejam corretamente configurados). Se você deseja usar opções de encriptação que não são padrão (exemplo, cifras criptográficas, tamanho da chave), veja as opções de encriptação antes de executar o primeiro comando. Para obter informações sobre como alterar o tamanho do setor padrão, veja dm-crypt/Device encryption#Encryption options for LUKS mode.\n\n```\n# cryptsetup -y -v luksFormat /dev/sda2\n# cryptsetup open /dev/sda2 raiz\n# mkfs.ext4 /dev/mapper/raiz\n# mount /dev/mapper/root /mnt\n```\n\nVerifique se o mapeamento funcionou como esperado:\n\n```\n# umount /mnt\n# cryptsetup close raiz\n# cryptsetup open /dev/sda2 raiz\n# mount /dev/mapper/raiz /mnt\n```\n\nSe você criou partições separadas (exemplo, /home), estes passos têm que ser adaptados e repetidos para todos eles, exceto para /boot. Veja dm-crypt/Criptografando um sistema de arquivos não raiz#Desbloqueio e montagem automatizados para como manusear partições adicionais na inicialização.\n\nNote que cada dispositivo de bloco precisa de sua própria senha. Isto pode ser inconveniente, por ser necessário inserir senhas separadas durante a inicialização. Uma alternativa é usar uma keyfile guardada na partição do sistema para desbloquear a partição separada por meio do crypttab. Veja dm-crypt/Encriptação de dispositivo#Formatando uma partição com LUKS e uma keyfile para instruções.\n\n"
    },
    {
      "title": "Preparando a partição de boot",
      "level": 3,
      "content": "O que você vai precisar fazer é uma partição para /boot não criptografada, que é necessária pelo sistema. Para uma partição ordinária em sistemas BIOS, por exemplo, execute:\n\n```\n# mkfs.ext4 /dev/sda1\n```\n\nOu para uma Partição de sistema EFI em sistemas UEFI:\n\n```\n# mkfs.fat -F32 /dev/sda1\n```\n\nDepois crie o diretório e monte a partição:\n\n```\n# mount --mkdir /dev/sda1 /mnt/boot\n```\n\n"
    },
    {
      "title": "Mountando os dispositivos",
      "level": 3,
      "content": "no Guia de instalação#Montar os sistemas de arquivos você vai precisar montar os dispositivos criptografados, não as partições. Claro /boot, que não é criptografado, ainda precisará ser montado diretamente.\n\n"
    },
    {
      "title": "Configurando o mkinitcpio",
      "level": 3,
      "content": "Adicione os hooks keyboard, keymap e encrypt em mkinitcpio.conf. Se deseja padrão de teclado US, você pode omitir o hook keymap.\n\n```\nHOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt filesystems fsck)\n```\n\nSe está usando o hook sd-encrypt com o initramfs baseado no systemd, o seguinte precisa ser definido ao invês:\n\n```\nHOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt filesystems fsck)\n```\n\nGere novamente o initramfs depois de salvar as alterações. Veja dm-crypt/Configuração do sistema#mkinitcpio para detalhes e outros hooks que você pode precisar.\n\n"
    },
    {
      "title": "Configurando o gerenciador de boot",
      "level": 3,
      "content": "Para desbloquear a partição raiz criptografada na inicialização, os seguintes parâmetros do kernel devem ser adicionados ao gerenciador de boot:\n\n```\ncryptdevice=UUID=UUID-da-partição-raiz:raiz root=/dev/mapper/raiz\n```\n\nSe está usando o hook sd-encrypt, o seguinte precisa ser definido ao invês:\n\n```\nrd.luks.name=UUID-da-partição-raiz=raiz root=/dev/mapper/raiz\n```\n\nVeja dm-crypt/Configuração do sistema#Parâmetros do Kernel para detalhes.\n\nO UUID-da-partição-raiz refere-se ao UUID da partição raiz, nesse caso /dev/sda2. Veja Nomeação persistente de dispositivo de bloco para detalhes.\n\n"
    },
    {
      "title": "LVM dentro do LUKS",
      "level": 2,
      "content": "O método mais direto é configurar o LVM em cima da partição criptografada, e não o contrário. Tecnicamente o LVM está dentro de um grande dispositivo de bloco criptografado. Em razão disso, o LVM não é visível até que o dispositivo de bloco seja aberto e o volume estruturado abaixo seja escaneado e montado durante a inicialização.\n\nO design do disco neste exemplo é::\n\n```\n+-----------------------------------------------------------------------+ +------------------+\n| volume lógico 1       | volume lógico 2       | volume Lógico 3       | | Partição de boot |\n|                       |                       |                       | |                  |\n| [SWAP]                | /                     | /home                 | | /boot            |\n|                       |                       |                       | |                  |\n| /dev/MeuGrupoVol/swap | /dev/MeuGrupoVol/raiz | /dev/MeuGrupoVol/home | | (pode ser        |\n|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | em outro         |\n|                                                                       | | dispositivo)     |\n|                         Partição criptografada com LUKS2              | |                  |\n|                           /dev/sda1                                   | | /dev/sdb1        |\n+-----------------------------------------------------------------------+ +------------------+\n```\n\n- Instruções em dm-crypt/Especialidades#Sistema criptografado usando um cabeçalho LUKS desanexado para usar um cabeçalho do LUKS em um dispositivo USB, e assim conseguindo autentificação de dois fatores com este método.\n- Instruções em dm-crypt/Especificidades#/boot criptografado e um cabeçalho do LUKS desanexado dentro de um USB para usar um cabeçalho do LUKS, partição /boot criptografada, e keyfile criptografada tudo em um dispositivo USB.\n\n"
    },
    {
      "title": "Preparando o disco",
      "level": 3,
      "content": "Antes de criar qualquer partição, você deveria saber a importância e também métodos de como apagar o disco com segurança, descritos em dm-crypt/Preparando a unidade de armazenamento.\n\nCrie uma partição que será montada em /boot com o tamanho de 200 MiB ou mais.\n\nCrie uma partição que depois irá conter o container criptografado.\n\nCrie o container criptografado com LUKS na partição do sistema. Digite a senha escolhida duas vezes.\n\n```\n# cryptsetup luksFormat /dev/sda1\n```\n\nPara mais informações sobre as opções disponíveis do cryptsetup veja as opções de encriptação antes de executar o comando acima.\n\nAbra o container:\n\n```\n# cryptsetup open /dev/sda1 cryptlvm\n```\n\nO container estará disponível em /dev/mapper/cryptlvm.\n\n"
    },
    {
      "title": "Preparando os volumes lógicos",
      "level": 3,
      "content": "Crie um volume físico em cima do container LUKS aberto:\n\n```\n# pvcreate /dev/mapper/cryptlvm\n```\n\nCrie um grupo de volumes (neste exemplo chamado de MeuGrupoVol, mas pode ser o que você quiser) e adicione o volume físico criado anteriormente a ele:\n\n```\n# vgcreate MeuGrupoVol /dev/mapper/cryptlvm\n```\n\nCrie todos os seus volumes lógicos no grupo de volumes:\n\n```\n# lvcreate -L 8G MeuGrupoVol -n swap\n# lvcreate -L 32G MeuGrupoVol -n raiz\n# lvcreate -l 100%FREE MeuGrupoVol -n home\n```\n\nFormate cada volume lógico para os sistemas de arquivos desejados:\n\n```\n# mkfs.ext4 /dev/MeuGrupoVol/raiz\n# mkfs.ext4 /dev/MeuGrupoVol/home\n# mkswap /dev/MeuGrupoVol/swap\n```\n\nMonte eles:\n\n```\n# mount /dev/MeuGrupoVol/raiz /mnt\n# mount --mkdir /dev/MeuGrupoVol/home /mnt/home\n# swapon /dev/MeuGrupoVol/swap\n```\n\n"
    },
    {
      "title": "Preparando a partição de inicialização",
      "level": 3,
      "content": "O gerenciador de boot carrega o kernel, initramfs, e seus arquivos de configuração do diretório /boot. Qualquer sistema de arquivos em um disco que pode ser lido pelo gerenciador de boot é elegível para uso.\n\nColoque um sistema de arquivos na partição escolhida como /boot:\n\n```\n# mkfs.ext4 /dev/sdb1\n```\n\n```\n# mkfs.fat -F32 /dev/sdb1\n```\n\nMonte a partição para /mnt/boot:\n\n```\n# mount --mkdir /dev/sdb1 /mnt/boot\n```\n\n"
    },
    {
      "title": "Configurando o mkinitcpio",
      "level": 3,
      "content": "Certifiique-se de que o pacote lvm2 está instalado e adicione os hooks keyboard, keymap, encrypt e lvm2 em mkinitcpio.conf:\n\n```\nHOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems fsck)\n```\n\nSe está usando o hook sd-encrypt com o initramfs baseado no systemd, o seguinte precisa ser definido ao invês:\n\n```\nHOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt lvm2 filesystems fsck)\n```\n\nGere novamente o initramfs depois de salvar as alterações. Veja dm-crypt/Configuração do sistema#mkinitcpio para detalhes e outros hooks que você pode precisar.\n\n"
    },
    {
      "title": "Configurando o gerenciador de boot",
      "level": 3,
      "content": "Para desbloquear a partição raiz criptografada na inicialização, os seguintes parâmetros do kernel devem ser adicionados ao gerenciador de boot:\n\n```\ncryptdevice=UUID=UUID-do-dispositivo:cryptlvm root=/dev/MeuGrupoVol/raiz\n```\n\nSe você está usando o hook sd-encrypt, o seguinte precisa ser definido:\n\n```\nrd.luks.name=UUID-do-dispositivo=cryptlvm root=/dev/MeuGrupoVol/raiz\n```\n\nO UUID-do-dispositivo refere-se ao UUID da partição raiz, nesse caso /dev/sda1. Veja Nomeação persistente de dispositivo de bloco para mais detalhes.\n\nSe está usando dracut, você pode precisar usar uma extensiva lista de parâmetros, tente:\n\n```\nkernel_cmdline=\"rd.luks.uuid=luks-UUID-do-dispositivo rd.lvm.lv=MeuGrupoVol/root  rd.lvm.lv=MeuGrupoVol/swap  root=/dev/mapper/MeuGrupoVol-root rootfstype=ext4 rootflags=rw,relatime\"\n```\n\nVeja dm-crypt/Configuração do sistema#Gerenciador de boot para mais informação sobre.\n\n"
    },
    {
      "title": "LUKS dentro do LVM",
      "level": 2,
      "content": "Você deve configurar os volumes do LVM primeiro antes de usá-los como base para as partições criptografadas. Desta maneira, é possível fazer uma mistura de volumes/partições que são criptografadas ou não.\n\nO texto a seguir exemplifica uma configuração do LUKS dentro do LVM que também faz uso de uma keyfile para o volume lógico /home e volumes temporários criptografados para /tmp e /swap. O último é desejável caso se preocupe com segurança, devido a evitar que dados temporários sensíveis sobrevivam durante a inicialização do sistema. Se tem experiência com LVM, você vai ser capaz de ignorar/trocar alguns dos passos relacionados com ele e outras coisas específicas de acordo com sua vontade.\n\nSe quer usar volumes lógicos espalhados por múltiplos discos que já foram configurados, ou expandir o /home (ou qualquer outro volume), um dos jeitos de como fazer isto é descrito em dm-crypt/Especialidades#Expandindo LVM em múltiplos discos. Vale notar que o container criptografado com LUKS precisa ser redimensionado também.\n\n"
    },
    {
      "title": "Preparando o disco",
      "level": 3,
      "content": "Esquema de particionamento:\n\n```\n+------------------+------------------------------------------------------------------------------------------------+\n| Partição de boot | Volume criptografado com o   | Volume criptografado com LUKS2 | Volume criptografado com LUKS2 |\n|                  | modo plain do dm-crypt       |                                |                                |\n|                  |                              |                                |                                |\n| /boot            | [SWAP]                       | /                              | /home                          |\n|                  |                              |                                |                                |\n|                  | /dev/mapper/swap             | /dev/mapper/raiz               | /dev/mapper/home               |\n|                  |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |\n|                  | Volume lógico 1              | Volume lógico 2                | Volume lógico 3                |\n|                  | /dev/MeuGrupoVol/cryptswap   | /dev/MeuGrupoVol/cryptraiz     | /dev/MeuGrupoVol/crypthome     |\n|                  |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |\n|   /dev/sda1      |                                   /dev/sda2                                                    |\n+------------------+------------------------------------------------------------------------------------------------+\n```\n\nRandomize /dev/sda2 de acordo com dm-crypt/Preparando a unidade de armazenamento#dm-crypt limpa o disco vazio ou partição.\n\n"
    },
    {
      "title": "Preparando os volumes lógicos",
      "level": 3,
      "content": "```\n# pvcreate /dev/sda2\n# vgcreate MeuGrupoVol /dev/sda2\n# lvcreate -L 32G -n raiz MeuGrupoVol\n# lvcreate -L 500M -n cryptswap MeuGrupoVol\n# lvcreate -L 500M -n crypttmp MeuGrupoVol\n# lvcreate -l 100%FREE -n crypthome MeuGrupoVol\n```\n\n```\n# cryptsetup luksFormat /dev/MeuGrupoVol/cryptraiz\n# cryptsetup open /dev/MeuGrupoVol/cryptraiz raiz\n# mkfs.ext4 /dev/mapper/raiz\n# mount /dev/mapper/raiz /mnt\n```\n\nMais informações sobre opções de encriptação podem ser encontradas em dm-crypt/Encriptação de dispositivo#Opções de encriptação para o modo LUKS. Note que /home será criptografada em #Criptografando o volume lógico /home.\n\n"
    },
    {
      "title": "Preparando a partição de boot",
      "level": 3,
      "content": "```\n# dd if=/dev/zero of=/dev/sda1 bs=1M status=progress\n# mkfs.ext4 /dev/sda1\n# mount --mkdir /dev/sda1 /mnt/boot\n```\n\n"
    },
    {
      "title": "Configurando o mkinitcpio",
      "level": 3,
      "content": "Certifique-se de que o pacote lvm2 está instalado, e adicione os hooks keyboard, lvm2 e encrypt em mkinitcpio.conf:\n\n```\nHOOKS=(base udev autodetect keyboard keymap consolefont modconf block lvm2 encrypt filesystems fsck)\n```\n\nSe está usando o hook sd-encrypt com o initramfs baseado no systemd, o seguinte precisa ser definido ao invês:\n\n```\nHOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt lvm2 filesystems fsck)\n```\n\nGere novamente o initramfs depois de salvar as alterações. Veja dm-crypt/Configuração do sistema#mkinitcpio para detalhes e outros hooks que você pode precisar.\n\n"
    },
    {
      "title": "Configurando o gerenciador de boot",
      "level": 3,
      "content": "Para abrir a partição raiz criptografada na inicialização, os seguintes parâmetros do kernel precisam ser adicionados ao gerenciador de boot:\n\n```\ncryptdevice=UUID=UUID-do-dispositivo:raiz root=/dev/mapper/raiz\n```\n\nSe está usando o hook sd-encrypt, o seguinte precisa ser definido:\n\n```\nrd.luks.name=UUID-do-dispositivo=raiz root=/dev/mapper/raiz\n```\n\nO UUID-do-dispositivo refere-se ao UUID do /dev/MeuGrupoVol/cryptraiz. Veja Nomeação persistente de dispositivo de bloco para detalhes.\n\nVeja dm-crypt/Configuração do sistema#Parâmetros do Kernel para detalhes.\n\n"
    },
    {
      "title": "Configurando o fstab e crypttab",
      "level": 3,
      "content": "Ambas as entradas do crypttab e fstab são necessárias para abrir o dispositivo e montar os sistemas de arquivos, respectivamente. As seguintes linhas irão criptografar os sistemas de arquivos temporários a cada inicialização:\n\n```\n/etc/crypttab\n```\n\n```\nswap\t/dev/MeuGrupoVol/cryptswap\t/dev/urandom\tswap,cipher=aes-xts-plain64,size=256\ntmp\t/dev/MeuGrupoVol/crypttmp\t/dev/urandom\ttmp,cipher=aes-xts-plain64,size=256\n```\n\n```\n/etc/fstab\n```\n\n```\n/dev/mapper/raiz        /       ext4            defaults        0       1\n/dev/sda1               /boot   ext4            defaults        0       2\n/dev/mapper/tmp         /tmp    tmpfs           defaults        0       0\n/dev/mapper/swap        none    swap            sw              0       0\n```\n\n"
    },
    {
      "title": "Criptografando o volume lógico /home",
      "level": 3,
      "content": "Devido a este cenário usar LVM como mapeador primário e dm-crypt como secundário, cada volume lógico precisa ser criptografado separadamente. Apesar disso, diferente dos sistemas de arquivos temporários que foram configurados acima para serem voláteis, o volume lógico para /home vai ser persistente. O seguinte assume que você reiniciou o seu sistema criptografado, se você não fez isto, precisará adaptar os caminhos. Para não digitar uma segunda senha na inicialização, uma keyfile é criada:\n\n```\n# mkdir -m 700 /etc/luks-keys\n# dd if=/dev/random of=/etc/luks-keys/home bs=1 count=256 status=progress\n```\n\nO volume lógico é criptografado com:\n\n```\n# cryptsetup luksFormat -v /dev/MeuGrupoVol/crypthome /etc/luks-keys/home\n# cryptsetup -d /etc/luks-keys/home open /dev/MeuGrupoVol/crypthome home\n# mkfs.ext4 /dev/mapper/home\n# mount /dev/mapper/home /home\n```\n\nA montagem dos volumes criptografados é feita tanto no crypttab como no fstab:\n\n```\n/etc/crypttab\n```\n\n```\nhome\t/dev/MeuGrupoVol/crypthome   /etc/luks-keys/home\n```\n\n```\n/etc/fstab\n```\n\n```\n/dev/mapper/home        /home   ext4        defaults        0       2\n```\n\n"
    },
    {
      "title": "LUKS dentro do RAID de software",
      "level": 2,
      "content": "Este exemplo é baseado em uma configuração real para um notebook empresarial equipado com dois SSDs de tamanho igual, e um HDD adicional para guardar dados. O resultado é uma encriptação total de disco com LUKS1 (incluindo /boot) para todos as unidades de armazenamento, Os SSDs em um arranjo RAID0, e são usadas keyfiles para abrir todos os dispositivos criptografados, depois que o GRUB recebe a senha correta na inicialização.\n\nEsta configuração usa um esquema de partições muito simples, com as unidades de armazenamento RAID sendo montadas em / (sem partição /boot separada), e o HDD montado em /data.\n\nPor favor note que backups regulares são muito importantes. Se qualquer um dos SSDs falharem, os dados contidos no arranjo RAID serão praticamente impossíveis de recuperar. Você pode querer um diferente nível de RAID se a tolerância a falhas é considerada importante.\n\nA encriptação não é negável nesta configuração.\n\nPara as instruções abaixo, os seguintes dispositivos de bloco são usados:\n\n```\n/dev/sda = primeiro SSD\n/dev/sdb = segundo SSD\n/dev/sdc = HDD\n```\n\n```\n+---------------+----------------+-----------------------+ +---------------+----------------+-----------------------+ +---------------------+\n| Partição de   | Partição de    | Volume LUKS1          | | Partição de   | Partição de    | Volume LUKS1          | | volume LUKS2        |\n| inicialização | sistema EFI    | criptografado         | | inicialização | sistema EFI    | criptografado         | | criptografado       |\n| de BIOS       |                |                       | | de BIOS       |                |                       | |                     |\n|               |                |                       | |               |                |                       | |                     |\n|               | /efi           | /                     | |               | /efi           | /                     | | /data               |\n|               |                |                       | |               |                |                       | |                     |\n|               |                | /dev/mapper/raiz | |               |                | /dev/mapper/raiz | |                     |\n|               +----------------+-----------------------+ |               +----------------+-----------------------+ |                     |\n|               | arranjo RAID1  | arranjo RAID0         | |               | arranjo RAID1  | arranjo RAID0         | |                     |\n|               | (parte 1 de 2) | (parte 1 de 2)        | |               | (parte 2 de 2) | (parte 2 de 2)        | |                     |\n|               |                |                       | |               |                |                       | |                     |\n|               | /dev/md/ESP    | /dev/md/raiz          | |               | /dev/md/ESP    | /dev/md/raiz          | |/dev/mapper/data|\n|               +----------------+-----------------------+ |               |+---------------+-----------------------+ +---------------------+\n| /dev/sda1     | /dev/sda2      | /dev/sda3             | | /dev/sdb1     | /dev/sdb2      | /dev/sdb3             | | /dev/sdc1           |\n+---------------+----------------+-----------------------+ +---------------+----------------+-----------------------+ +---------------------+\n```\n\nCertifique-se de substituí-los pelas designações de dispositivo apropriadas para sua configuração, pois podem ser diferentes.\n\n"
    },
    {
      "title": "Preparando os discos",
      "level": 3,
      "content": "Antes de criar qualquer partição, você deve se informar sobre a importância e também métodos de como apagar o disco com segurança, descritos em dm-crypt/Preparando a unidade de armazenamento.\n\nPara sistemas BIOS com GPT, crie uma Partição de inicialização de BIOS com o tamanho de 1 MiB para o GRUB poder utilizá-lo no segundo estágio da inicialização da BIOS. Não monte a partição. Para sistemas BIOS/MBR isto não é necessário.\n\nPara sistemas UEFI crie uma Partição de sistema EFI com um tamanho apropriado, ela mais tarde será montada em /efi.\n\nNo restante do espaço disponível no dispositivo, crie uma partição (/dev/sda3 neste exemplo) \"Linux RAID\". Coloque o ID do tipo da partição: fd para MBR ou GUID A19D880F-05FC-4D3B-A006-743F0F84911E para GPT.\n\nUma vez que as partições forem criadas em /dev/sda, os seguintes comandos podem ser usados para clonar elas para /dev/sdb.\n\n```\n# sfdisk -d /dev/sda > sda.dump\n# sfdisk /dev/sdb < sda.dump\n```\n\nO HDD é preparado com um única partição Linux (/dev/sdc1) para todo o disco.\n\n"
    },
    {
      "title": "Fazendo o arranjo RAID",
      "level": 3,
      "content": "Crie o arranjo RAID para os SSDs.\n\n- Todas as partes de uma partição de sistema EFI de arranjo RAID devem ser individualmente usáveis, isto significa que ela pode ser somente colocada em um arranjo RAID1.\n- O superbloco RAID deve ser colocado no fim da partição de sistema EFI usando --metadata=1.0, de outro modo, o firmware não conseguirá acessar a partição.\n\n```\n# mdadm --create --verbose --level=1 --metadata=1.0 --raid-devices=2 /dev/md/ESP /dev/sda2 /dev/sdb2\n```\n\nEste exemplo utiliza RAID0 para a raiz, você pode desejar substituir para um nível diferente baseado em suas preferências ou necessidades.\n\n```\n# mdadm --create --verbose --level=0 --metadata=1.2 --raid-devices=2 /dev/md/raiz /dev/sda3 /dev/sdb3\n```\n\n"
    },
    {
      "title": "Preparando os dispositivos de bloco",
      "level": 3,
      "content": "Como explicado em dm-crypt/Preparando a unidade de armazenamento, os dispositivos são apagados com dados randômicos utilizando /dev/zero e um dispositivo criptografado com uma chave randômica. Alternativamente, você pode usar dd com /dev/random ou /dev/urandom, apesar que será muito mais lento.\n\n```\n# cryptsetup open --type plain /dev/md/raiz container --key-file /dev/random\n# dd if=/dev/zero of=/dev/mapper/container bs=1M status=progress\n# cryptsetup close container\n```\n\ne faça o mesmo para o HDD (/dev/sdc1 neste exemplo).\n\nConfigure a criptografia para /dev/md/raiz:\n\n```\n# cryptsetup -y -v luksFormat --type luks1 /dev/md/raiz\n# cryptsetup open /dev/md/raiz raiz\n# mkfs.ext4 /dev/mapper/raiz\n# mount /dev/mapper/raiz /mnt\n```\n\nE faça o mesmo para o HDD:\n\n```\n# cryptsetup -y -v luksFormat /dev/sdc1\n# cryptsetup open /dev/sdc1 data\n# mkfs.ext4 /dev/mapper/data\n# mount --mkdir /dev/mapper/data /mnt/data\n```\n\nPara sistemas UEFI, defina a ESP (partição de sistema EFI):\n\n```\n# mkfs.fat -F32 /dev/md/ESP\n# mount --mkdir /dev/md/ESP /mnt/efi\n```\n\n"
    },
    {
      "title": "Configurando o GRUB",
      "level": 3,
      "content": "Configure GRUB para o sistema criptogrado com LUKS1, editando /etc/default/grub com o seguinte:\n\n```\nGRUB_CMDLINE_LINUX=\"cryptdevice=/dev/md/raiz:raiz\"\nGRUB_ENABLE_CRYPTODISK=y\n```\n\nSe você tiver um teclado USB em um sistema mais recente, habilite o suporte a USB legado no firmware ou adicione o seguinte a /etc/default/grub:\n\n```\nGRUB_TERMINAL_INPUT=\"usb_keyboard\"\n```\n\n```\nGRUB_PRELOAD_MODULES=\"usb usb_keyboard ohci uhci ehci\"\n```\n\nCaso contrário, talvez você não consiga usar o teclado no prompt do LUKS.\n\nVeja dm-crypt/Configuração do sistema#Parâmetros do Kernel e GRUB#/boot criptografado para detalhes.\n\nComplete a instalação do GRUB para ambos os SSDs (em realidade, instalando somente em /dev/sda irá funcionar).\n\n```\n# grub-install --target=i386-pc /dev/sda\n# grub-install --target=i386-pc /dev/sdb\n# grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n"
    },
    {
      "title": "Criando as keyfiles",
      "level": 3,
      "content": "Os próximos passos evitarão que você digite a senha duas vezes quando você inicializar o sistema (uma vez quando o grub pede ela para abrir o dispositivo LUKS1, outra quando o mkinitcpio assume o controle do sistema). Isto é feito ao criar uma keyfile e adicionando ela na imagem intramfs, fazendo com que o hook encrypt abra o dispositivo raiz. Veja dm-crypt/Encriptação de dispositivo#Com uma keyfile no initramfs para detalhes.\n\n- Crie a keyfile e adicione a chave para /dev/md/raiz.\n- Crie outra keyfile para o HDD (/dev/sdc1) para que ele seja decriptografado na inicialização. Para conveniência, deixe a senha criada acima em um lugar onde você consiga recuperar facilmente se precisar. Edite o /etc/crypttab para decriptografar o HDD na inicialização. Veja Dm-crypt/Configuração do sistema#Desbloqueando com uma keyfile.\n\n"
    },
    {
      "title": "Configurando o sistema",
      "level": 3,
      "content": "Edite o fstab para montar os dispositivos de bloco raiz e data e o ESP:\n\n```\n/dev/mapper/raiz       /           ext4    rw,noatime  0   1\n/dev/mapper/data       /data       ext4    defaults            0   2\n/dev/md/ESP            /efi        vfat    rw,relatime,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,tz=UTC,errors=remount-ro  0   2\n```\n\nSalve a configuração do RAID:\n\n```\n# mdadm --detail --scan >> /etc/mdadm.conf\n```\n\nEdite o mkinitcpio.conf e inclua sua keyfile, também coloque os hooks apropriados:\n\n```\nFILES=(/crypto_keyfile.bin)\nHOOKS=(base udev autodetect keyboard keymap consolefont modconf block mdadm_udev encrypt filesystems fsck)\n```\n\nVeja dm-crypt/Configuração do sistema#mkinitcpio para detalhes.\n\n"
    },
    {
      "title": "dm-crypt plain",
      "level": 2,
      "content": "Diferente do LUKS, o modo plain do dm-crypt não precisa de um cabeçalho no dispositivo criptografado: Este cenário explora isso para configurar um sistema em uma partição não criptografada, o disco criptografado não será diferenciável de um disco cheio de dados randômicos, isto possibilita a criptografia negável. Veja também wikipedia:Disk encryption#Full disk encryption.\n\nSe a encriptação total de disco não é necessária, os métodos usando LUKS descritos nas seções acima são mais recomendados, tanto para a encriptação de sistema quanto partições. Funcionalidades do LUKS como gerenciamento de chaves com múltiplas senhas/keyfiles ou re-criptografar um dispositivo prontamente não estão disponiveis com o modo plain.\n\nO modo plain pode ser mais resiliente a danos que o LUKS, devido a não depender de um chave mestre de encriptação, que se danificada resulta em falhas. No entanto, usar esse modo requer mais configuração manual de opções de encriptação para se chegar a mesma força criptográfica. Veja também Criptografia de dados em repouso#Metadados criptográficos. O uso desse modo também pode ser considerado se está preocupado com os problemas explicados em dm-crypt/Especialidades#Suporte a discard/TRIM para unidades de estado sólido (SSD).\n\n- modo LUKS do dm-crypt com um cabeçalho desanexado, usando a opção --header. Este método não pode ser usado com o hook encrypt padrão, mas sim com um modificado.\n- tcplay, que oferece a encriptação sem cabeçalho mas com a função PBKDF2.\n\nO cenário usa dois pendrives USB:\n\n- um para o dispositivo de boot, que permite guardar as opções necessárias para abrir/desbloquear o dispositivo criptografado com o modo plain nas configurações do gerenciador de boot, desde que digitar eles a cada inicialização deve possivelemente resultar em erros;\n- outro para a keyfile (arquivo chave), assumindo que esta está guardada em bits normais, o atacante desatento pode conseguir o pendrive com ela e pensar que a keyfile é um dado randômico ao invês de ser visível como um arquivo normal. Veja também Segurança por obscurantismo, siga dm-crypt/Encriptação de dispositivo#Keyfiles para prepará-la.\n\nO exemplo de particionamento é:\n\n```\n+-----------------------+-----------------------+-----------------------+ +----------------+ +---------------+\n| Volume lógico 1       | Volume lógico 2       | Volume lógico 3       | | Dispositivo de | | Lugar onde a  |\n|                       |                       |                       | | boot           | | keyfile será  |\n|                       |                       |                       | |                | | guardada (não |\n| /                     | [SWAP]                | /home                 | | /boot          | | particionada  |\n|                       |                       |                       | |                | | no exemplo)   |\n|                       |                       |                       | |                | |               |\n| /dev/MeuVolGrupo/raiz | /dev/MeuVolGrupo/swap | /dev/MeuVolGrupo/home | | /dev/sdb1      | | /dev/sdc      |\n|-------------------------+----------------------+----------------------| |----------------| |---------------|\n| O disco /dev/sda é criptografado com o modo plain e usa LVM           | | Pendrive 1     | | Pendrive 2    |\n+-----------------------------------------------------------------------+ +----------------+ +---------------+\n```\n\n- É possível usar somente um pendrive: Ao colocar a chave em outra partição (por exemplo, /dev/sdb2). Ao copiar a keyfile para o initramfs diretamente. Por exemplo, uma keyfile é copiada para a imagem initramfs ao colocar FILES=(/etc/keyfile) em /etc/mkinitcpio.conf. Para fazer o hook encrypt ler a keyfile na imagem initramfs, use o prefixo rootfs: antes do nome do arquivo, exemplo cryptkey=rootfs:/etc/keyfile.\n- Outra opção é usar uma senha com uma boa entropia.\n\n- Ao colocar a chave em outra partição (por exemplo, /dev/sdb2).\n- Ao copiar a keyfile para o initramfs diretamente. Por exemplo, uma keyfile é copiada para a imagem initramfs ao colocar FILES=(/etc/keyfile) em /etc/mkinitcpio.conf. Para fazer o hook encrypt ler a keyfile na imagem initramfs, use o prefixo rootfs: antes do nome do arquivo, exemplo cryptkey=rootfs:/etc/keyfile.\n\n"
    },
    {
      "title": "Preparando o disco",
      "level": 3,
      "content": "É vital que o dispositivo mapeado tenha dados randômicos. Em particular nesse cenário.\n\nVeja dm-crypt/Preparando a unidade de armazenamento e dm-crypt/Preparando a unidade de armazenamento#Métodos específicos do dm-crypt\n\n"
    },
    {
      "title": "Preparando a partição que não é de boot",
      "level": 3,
      "content": "Veja dm-crypt/Encriptação de dispositivo#Opções de encriptação para o modo plain para detalhes.\n\nUsando o dispositivo /dev/sda, com a cifra aes-xts, tamanho de chave de 512 bit e uma keyfile, temos as seguintes opções para esse cenário:\n\n```\n# cryptsetup --cipher=aes-xts-plain64 --offset=0 --key-file=/dev/sdc --key-size=512 open --type plain /dev/sda cryptlvm\n```\n\nDiferente da encriptação com LUKS, o comando acima deve ser executado completamente toda vez que o mapeamento precisa ser restabelecido, então é importante lembrar da cifra e detalhes da keyfile.\n\nPodemos agora checar se a entrada de mapeamento foi feita para /dev/mapper/cryptlvm:\n\n```\n# fdisk -l\n```\n\nAgora, configure os volumes lógicos do Volumes lógicos não são exibidos no dispositivo mapeado. Veja Instalar Arch Linux no LVM para maiores detalhes:\n\n```\n# pvcreate /dev/mapper/cryptlvm\n# vgcreate MeuVolGrupo /dev/mapper/cryptlvm\n# lvcreate -L 32G MeuVolGrupo -n raiz\n# lvcreate -L 10G MeuVolGrupo -n swap\n# lvcreate -l 100%FREE MeuVolGrupo -n home\n```\n\nFormate e monte eles além de ativar a swap. Veja Sistemas de arquivos#Criar um sistema de arquivos para mais detalhes:\n\n```\n# mkfs.ext4 /dev/MeuVolGrupo/raiz\n# mkfs.ext4 /dev/MeuVolGrupo/home\n# mount /dev/MeuVolGrupo/raiz /mnt\n# mount --mkdir /dev/MeuVolGrupo/home /mnt/home\n# mkswap /dev/MeuVolGrupo/swap\n# swapon /dev/MeuVolGrupo/swap\n```\n\n"
    },
    {
      "title": "Preparando a partição de boot",
      "level": 3,
      "content": "A partição /boot pode ser instalada na partição vfat de um pendrive, se necessário. Mas se o particionamento manual é desejado, criar uma partição de 200 MiB é necessário. Crie a partição usando uma ferramenta de particionamento de sua escolha.\n\nColoque um sistema de arquivos na partição /boot:\n\n```\n# mkfs.fat -F32 /dev/sdb1\n# mount --mkdir /dev/sdb1 /mnt/boot\n```\n\n"
    },
    {
      "title": "Configurando mkinitcpio",
      "level": 3,
      "content": "Certifique-se de que o pacote lvm2 está instalado e adicione os hooks keyboard, keymap, encrypt e lvm2 no mkinitcpio.conf:\n\n```\nHOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems fsck)\n```\n\nGere novamente o initramfs depois de salvar as alterações. Veja dm-crypt/Configuração do sistema#mkinitcpio para detalhes e outros hooks que você pode precisar.\n\n"
    },
    {
      "title": "Configurando o gerenciador de boot",
      "level": 3,
      "content": "Para inicializar a partição raiz criptografada, os seguintes parâmetros do kernel precisma ser definidos no gerenciador de boot (note que 64 é o número de bytes em 512 bits):\n\n```\ncryptdevice=/dev/disk/by-id/ID-do-sda:cryptlvm cryptkey=/dev/disk/by-id/ID-do-sdc:0:64 crypto=:aes-xts-plain64:512:0:\n```\n\nID-do-disco significa o ID do disco referenciado. Veja Nomeação persistente de dispositivo de bloco para detalhes.\n\nVeja dm-crypt/Configuração do sistema#Parâmetros do Kernel para mais detalhes e outros parâmetros que você pode precisar.\n\n```\n# grub-install --recheck /dev/sdb\n```\n\n"
    },
    {
      "title": "Pós-instalação",
      "level": 3,
      "content": "Você pode remover os pendrives depois da inicialização. Já que a partição /boot não é normalmente necessária, a opção noauto pode ser adicionada na linha relevante em /etc/fstab:\n\n```\n/etc/fstab\n```\n\n```\n# /dev/sdb1\n/dev/sdb1 /boot vfat noauto,rw,noatime 0 2\n```\n\nNo entanto, quando uma atualização é feita para o initramfs, kernel ou gerenciador de boot, é necessário que ela esteja montada. Como uma entrada no fstab já existe, ela pode ser montada simplesmente com:\n\n```\n# mount /boot\n```\n\n"
    },
    {
      "title": "Partição de boot criptografada (GRUB)",
      "level": 2,
      "content": "Esta configuração utiliza o mesmo particionamento que a seção #LVM dentro do LUKS, com diferença que o GRUB é usado por ser capaz de inicializar de um volume lógico LVM e um /boot criptografado com LUKS1. Veja também GRUB#/boot criptografado.\n\nO Particionamento deste exemplo é:\n\n```\n+--------------------+---------------------+-----------------------+-----------------------+-----------------------+\n| Partição de        | Partição de sistema | Volume Lógico 1       | volume lógico 2       | volume lógico 3       |\n| inicialização BIOS | EFI                 |                       |                       |                       |\n|                    |                     |                       |                       |                       |\n|                    | /efi                | /                     | [SWAP]                | /home                 |\n|                    |                     |                       |                       |                       |\n|                    |                     | /dev/MeuVolGrupo/raiz | /dev/MeuVolGrupo/swap | /dev/MeuVolGrupo/home |\n| /dev/sda1          | /dev/sda2           |-----------------------+-----------------------+-----------------------+\n| não criptografado  | não criptografado   | /dev/sda3 criptografado usando LVM dentro do LUKS1                    |\n+--------------------+---------------------+-----------------------------------------------------------------------+\n```\n\n- Todos os cenários são exemplos. É possível utilizar os conceitos de distintos cenários na sua instalação, claro, adaptando o que for necessário. Veja também uma variação desse cenário em #LVM dentro do LUKS.\n- Você pode usar o script cryptboot do pacote cryptbootAUR para um gerenciamento simplificado da inicialização com partição de boot criptografada (montar, desmontar, atualizar pacotes) e como uma defesa contra o ataque Evil Maid com UEFI Secure Boot. Para mais detalhes e limitações veja a página do projeto cryptboot.\n\n"
    },
    {
      "title": "Preparando o disco",
      "level": 3,
      "content": "Antes de criar qualquer partição, você deve saber a importância e métodos de como apagar o disco com segurança, descrito em dm-crypt/Preparando a unidade de armazenamento.\n\nPara sistemas BIOS/GPT crie uma partição de inicialização de BIOS com o tamanho de 1 MiB para que o GRUB guarde o segundo estágio da inicialização BIOS. não monte a partição. Para sistemas BIOS/MBR isto não é necessário.\n\nPara sistemas UEFI crie uma partição de sistema EFI com tamanho apropriado, será montada em /efi.\n\nCrie uma partição do tipo 8309, que mais tarde conterá o container criptografado para a LVM.\n\nCrie o container criptografado com LUKS:\n\n```\n# cryptsetup luksFormat --type luks1 /dev/sda3\n```\n\nPara mais informações sobre as opções do cryptsetup disponíveis, veja dm-crypt/Encriptação de dispositivo#Opções de encriptação para o modo LUKS antes do comando acima.\n\nSeu particionamento deve ser similar a:\n\n```\n# gdisk -l /dev/sda\n```\n\n```\n...\nNumber  Start (sector)    End (sector)  Size       Code  Name\n   1            2048            4095   1024.0 KiB  EF02  BIOS boot partition\n   2            4096         1130495   550.0 MiB   EF00  EFI System\n   3         1130496        68239360   32.0 GiB    8309  Linux LUKS\n```\n\nAbra o container:\n\n```\n# cryptsetup open /dev/sda3 cryptlvm\n```\n\no container aberto agora está disponível em /dev/mapper/cryptlvm.\n\n"
    },
    {
      "title": "Preparando os volumes lógicos",
      "level": 3,
      "content": "Os volumes lógicos do LVM neste exemplo seguem o particionamento acima como o cenário #LVM dentro do LUKS. Siga #Preparando os volumes lógicos acima, ajuste o que desejar e precisar.\n\nSe você planeja inicializar no modo UEFI, crie um ponto de montagem para partição de sistema EFI em /efi para compatibilidade com grub-install e monte:\n\n```\n# mount --mkdir /dev/sda2 /mnt/efi\n```\n\nNeste ponto, você deve ter as seguintes partições e volumes lógicos dentro de /mnt:\n\n```\n$ lsblk\n```\n\n```\nNAME                   MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nsda                      8:0    0   200G  0 disk\n├─sda1                   8:1    0     1M  0 part\n├─sda2                   8:2    0   550M  0 part  /mnt/efi\n└─sda3                   8:3    0   100G  0 part\n  └─cryptlvm           254:0    0   100G  0 crypt\n    ├─MeuVolGrupo-swap 254:1    0     8G  0 lvm   [SWAP]\n    ├─MeuVolGrupo-root 254:2    0    32G  0 lvm   /mnt\n    └─MeuVolGrupo-home 254:3    0    60G  0 lvm   /mnt/home\n```\n\n"
    },
    {
      "title": "Configurando o mkinitcpio",
      "level": 3,
      "content": "Certifique-se de que o pacote lvm2 está instalado, e adicione os hooks keyboard, keymap, encrypt e lvm2 no mkinitcpio.conf:\n\n```\nHOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems fsck)\n```\n\nSe está usando o hook sd-encrypt com o initramfs baseado no systemd, o seguinte precisa ser definido ao invês:\n\n```\nHOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt lvm2 filesystems fsck)\n```\n\nGere novamente o initramfs depois de salvar as alterações. Veja dm-crypt/Configuração do sistema#mkinitcpio para detalhes e outros hooks que você pode precisar.\n\n"
    },
    {
      "title": "Configurando o GRUB",
      "level": 3,
      "content": "Para permitir a inicialização, configure o GRUB para que ele consiga acessar o /boot que está dentro de uma partição criptografada com LUKS1:\n\n```\n/etc/default/grub\n```\n\n```\nGRUB_ENABLE_CRYPTODISK=y\n```\n\nDefina os parâmetros do kernel, para que o initramfs possa abrir a partição raiz criptografada. Se for usar o hook encrypt:\n\n```\n/etc/default/grub\n```\n\n```\nGRUB_CMDLINE_LINUX=\"... cryptdevice=UUID=UUID-do-dispositivo:cryptlvm ...\"\n```\n\nSe for usar o hook sd-encrypt, o seguinte precisa ser definido:\n\n```\n/etc/default/grub\n```\n\n```\nGRUB_CMDLINE_LINUX=\"... rd.luks.name=UUID-do-dipositivo=cryptlvm ...\"\n```\n\nVeja dm-crypt/Configuração do sistema#Parâmetros do Kernel e GRUB#/boot criptografado para detalhes. UUID-do-dispositivo refere-se ao UUID de /dev/sda3 (a partição que tem o sistema de arquivos raiz contido no LVM). Veja Nomeação persistente de dispositivo de bloco.\n\nInstale o GRUB na ESP montada para inicialização UEFI:\n\n```\n# grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB --recheck\n```\n\nInstale o GRUB no disco para inicialização BIOS:\n\n```\n# grub-install --target=i386-pc --recheck /dev/sda\n```\n\nGere o arquivo de configuração do GRUB:\n\n```\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\nSe todos os comandos foram executados sem erros, GRUB deve solicitar a senha para abrir a partição /dev/sda3 na próxima inicialização.\n\n"
    },
    {
      "title": "Evite digitar a senha duas vezes",
      "level": 3,
      "content": "Apesar do GRUB solicitar a senha para abrir a partição criptografada com LUKS1, isso não é passado para o initramfs. Consequentemente, você vai precisa digitar a senha duas vezes: uma vez para o GRUB e outra para o initramfs.\n\nEsta seção lida com uma configuração extra para digitar a senha somente uma vez, no GRUB. Para isso é utilizado uma keyfile dentro do initramfs.\n\nPrimeiro crie uma keyfile e a adicione como uma chave do LUKS:\n\n```\n# dd bs=512 count=4 if=/dev/random of=/root/cryptlvm.keyfile iflag=fullblock\n# chmod 000 /root/cryptlvm.keyfile\n# cryptsetup -v luksAddKey /dev/sda3 /root/cryptlvm.keyfile\n```\n\nAdicione a keyfile para a imagem do initramfs:\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nFILES=(/root/cryptlvm.keyfile)\n```\n\nCrie novamente a imagem initramfs e proteja a keyfile dentro dela:\n\n```\n# chmod 600 /boot/initramfs-linux*\n```\n\nDefina o seguinte parâmetro do kernel para abrir a partição criptografada com a keyfile. Se está usando o hook encrypt:\n\n```\nGRUB_CMDLINE_LINUX=\"... cryptkey=rootfs:/root/cryptlvm.keyfile\"\n```\n\nOu, usando o hook sd-encrypt:\n\n```\nGRUB_CMDLINE_LINUX=\"... rd.luks.key=device-UUID=/root/cryptlvm.keyfile\"\n```\n\nSe por algum motivo a keyfile falhar, systemd solicitará a senha para abrir e, em caso dela estar correta, continuar a inicialização.\n\n"
    },
    {
      "title": "Subvolumes do Btrfs com swap",
      "level": 2,
      "content": "O seguinte exemplo cria todo um sistema criptografado com LUKS1, simulando partições com subvolumes do Btrfs.\n\nAo usar UEFI, uma Partição de sistema EFI (ESP) é necessária. /boot pode estar em / e ser criptografada; no entanto, a ESP não pode ser criptografada. Neste exemplo, a ESP é /dev/sda1 e está montada em /efi. /boot está localizada na partição do sistema, /dev/sda2.\n\nDesde que /boot reside na / criptografada com LUKS1, GRUB deve ser usado como o gerenciador de boot porque somente ele pode carregar os módulos para decriptografar /boot (exemplo, crypto.mod, cryptodisk.mod e luks.mod).\n\nTambém é mostrada uma partição swap criptografada.\n\n```\n+-----------------------+-------------------------+------------------+\n| Partição de sistema   | Partição do sistema     | Partição swap    |\n| EFI não criptografada | criptografada com LUKS1 | criptografada    |\n|                       |                         |                  |\n| /efi                  | /                       | [SWAP]           |\n| /dev/sda1             | /dev/sda2               | /dev/sda3        |\n+-----------------------+-------------------------+------------------+\n```\n\n"
    },
    {
      "title": "Preparando o disco",
      "level": 3,
      "content": "Antes de criar qualquer partição, você deveria saber a importância e também métodos de como apagar o disco com segurança, descritos em dm-crypt/Preparando a unidade de armazenamento. Se você está usando UEFI crie uma partição de sistema EFI com o tamanho apropriado. Ela será montada em /efi. Se você vai criar uma partição swap criptografada, crie ela, mas não marque isso como swap, desde que ela será usada no modo plain do dm-crypt.\n\nCrie as partições, ao menos uma para / (exemplo, /dev/sda2). Veja o artigo Particionamento.\n\n"
    },
    {
      "title": "Crie o container LUKS",
      "level": 4,
      "content": "Siga dm-crypt/Encriptação de dispositivo#Criptografando dispositivos com o modo LUKS para configurar o /dev/sda2 para LUKS. Veja o dm-crypt/Encriptação de dispositivo#Opções de encriptação para o modo LUKS para uma lista de opções de encriptação.\n\n"
    },
    {
      "title": "Abra o container LUKS",
      "level": 4,
      "content": "Siga dm-crypt/Encriptação de dispositivo#Abrindo/Mapeando containers LUKS com o mapeador de dispositivos para abrir e mapear o container LUKS.\n\n"
    },
    {
      "title": "Formate o dispositivo mapeado",
      "level": 4,
      "content": "Prossiga para formatar o dispositivo mapeado conforme descrito em Btrfs#Sistema de arquivos em um único dispositivo, onde /dev/partition é o nome do dispositivo mapeado (ou seja, /dev/mapper/root) e não /dev/sda2.\n\n"
    },
    {
      "title": "Monte o dispositivo mapeado",
      "level": 4,
      "content": "Finalmente, monte o agora formatado dispositivo mapeado (isto é, /dev/mapper/raiz) para /mnt.\n\n"
    },
    {
      "title": "Esquema",
      "level": 4,
      "content": "Subvolumes serão usados como partições simuladas, mas outros subvolumes (aninhados) serão criados. A seguir uma representação parcial do que este seguinte exemplo vai gerar:\n\n```\nsubvolid=5\n   |\n   ├── @ - |\n   |     diretórios contidos:\n   |       ├── /usr\n   |       ├── /bin\n   |       ├── /.snapshots\n   |       ├── ...\n   |\n   ├── @home\n   ├── @snapshots\n   ├── @var_log\n   └── @...\n```\n\nEsta seção segue Snapper#Layout do sistema de arquivos sugerido que é mais útil quando usado com o snapper. Você também deveria consultar Btrfs Wiki SysadminGuide#Layout.\n\n"
    },
    {
      "title": "Crie subvolumes para montagem inicial",
      "level": 4,
      "content": "Aqui estamos usando a convenção de prefixar @ para nomes de subvolumes que serão usados como pontos de montagem, e @ será o subvolume montado como /.\n\nSeguindo o artigo Btrfs#Criando um subvolume, crie os subvolumes em /mnt/@, /mnt/@snapshots, e /mnt/@home.\n\nCrie qualquer subvolume adicional que desejar como ponto de montagem.\n\n"
    },
    {
      "title": "Crie subvolumes para exclusões",
      "level": 4,
      "content": "Crie quaisquer subvolumes dos quais você não deseja ter snapshots ao tirar um snapshot de /. Por exemplo, você provavelmente não quer tirar snapshots de /var/cache/pacman/pkg. Esses subvolumes serão aninhados no subvolume @, mas com a mesma facilidade poderiam ter sido criados anteriormente no mesmo nível de @ de acordo com sua preferência.\n\nComo o subvolume @ é montado em /mnt, você precisará criar um subvolume em /mnt/var/cache/pacman/pkg para este exemplo. Você pode ter que criar qualquer diretório pai primeiro.\n\nOutros diretórios com os quais você pode querer fazer isso são /var/abs, /var/tmp e /srv.\n\n"
    },
    {
      "title": "Monte os subvolumes de nível superior",
      "level": 4,
      "content": "Desmonte a partição do sistema em /mnt.\n\nAgora monte os subvolumes @ que irão servir como / para /mnt usando a opção de montagem subvol=. Assumindo que o nome do dispositivo mapeado é raiz, o comando deve se parecer com:\n\n```\n# mount -o compress=zstd,subvol=@ /dev/mapper/raiz /mnt\n```\n\nVeja Btrfs (Português)#Montando subvolumes para mais detalhes.\n\nTambém monte outros subvolumes para seus respectivos pontos de montagem: @home para /mnt/home e @snapshots para /mnt/.snapshots.\n\n"
    },
    {
      "title": "Monte a ESP",
      "level": 4,
      "content": "Se preparou uma partição de sistema EFI anteriormente, crie seu ponto de montagem e monte-a.\n\nNa etapa de instalação do pacstrap, btrfs-progs deve ser instalado em adição com o metapacote base.\n\n"
    },
    {
      "title": "Crie a keyfile",
      "level": 4,
      "content": "Para que o GRUB abra a partição LUKS sem que o usuário digite sua senha duas vezes, usaremos um arquivo de chave embutido no initramfs. Siga Dm-crypt/Encriptação de dispositivo#Com uma keyfile no initramfs certificando-se de adicionar a chave a /dev/sda2 na etapa luksAddKey.\n\n"
    },
    {
      "title": "Edite o mkinitcpio.conf",
      "level": 4,
      "content": "Depois de criar, adicionar e colocar a chave como descrito acima, adicione o hook encrypt ao mkinitcpio.conf assim como quaisquer outros hooks que você precisar.\n\nGere novamente o initramfs depois de salvar as alterações. Veja dm-crypt/Configuração do sistema#mkinitcpio para detalhes e outros hooks que você pode precisar.\n\n"
    },
    {
      "title": "Configurando o gerenciador de boot",
      "level": 3,
      "content": "Instale o GRUB em /dev/sda. Em seguida, edite /etc/default/grub conforme instruído em GRUB#Argumentos adicionais, GRUB#/boot criptografado e dm-crypt/Configuração do sistema#Usando o hook encrypt, seguindo ambas as instruções para uma partição raiz e de boot criptograda. Finalmente, gere o arquivo de configuração do GRUB. Observe que você precisará passar os parâmetros do kernel para o ponto de montagem raiz conforme instruído em Btrfs#Montando o subvolume como root.\n\n"
    },
    {
      "title": "Configurando a swap",
      "level": 3,
      "content": "Se você criou uma partição para ser usada como swap criptografada, agora é a hora de configurá-la. Siga as instruções em dm-crypt/Swap criptografada.\n\n"
    },
    {
      "title": "Raiz no ZFS",
      "level": 2,
      "content": "Raiz no ZFS pode ser configurado para criptografar tudo, exceto o gerenciador de boot. Veja o guia de instalação[link inativo 2023-04-23 ⓘ] na página do OpenZFS.\n\nO carregador de inicialização pode ser verificado com Secure Boot em sistemas baseados em UEFI.\n\nVeja também ZFS#Criptografia no ZFS utilizando dm-crypt.\n\n"
    }
  ]
}