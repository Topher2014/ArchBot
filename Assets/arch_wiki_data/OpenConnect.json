{
  "title": "OpenConnect",
  "url": "https://wiki.archlinux.org/title/OpenConnect",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "OpenConnect is free open-source software for client-to-site VPNs. It allows you to connect to various commercial so-called SSL VPN servers/gateways/concentrators, namely:\n\n- Cisco AnyConnect anyconnect\n- Palo Alto Networks (PAN) GlobalProtect gp\n- Junos/Ivanti Pulse Secure pulse, see also Pulse Connect Secure\n- Juniper Network Connect nc\n- Fortinet fortinet\n- F5 f5\n- Array Networks array\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "For integration with NetworkManager which you probably use if you have a desktop environment like GNOME or KDE, install the networkmanager-openconnect package. It will pull in the openconnect package as a dependency. If you do not need the integration, install only the openconnect package.\n\nSome VPNs are set up for split routing and therefore split DNS. To cater for that and in general, it's recommended to use systemd-resolved and the resolv.conf stub mode. To verify that this is the case, run resolvectl and look for the line \"resolv.conf mode: stub\" in the Global section. Understanding the full output can be very useful so it's probably a good idea to study it. When connected to a VPN, the output will look roughly like this:\n\n```\n$ resolvectl\n```\n\n```\nGlobal\n       Protocols: -LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported\nresolv.conf mode: stub\n\nLink 2 (enp1s0)\n    Current Scopes: DNS\n         Protocols: +DefaultRoute +LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported\nCurrent DNS Server: 192.168.0.1\n       DNS Servers: 192.168.0.1\n        DNS Domain: ~home.box\n\nLink 3 (tun0)\n    Current Scopes: DNS\n         Protocols: -DefaultRoute +LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported\nCurrent DNS Server: 10.10.10.10\n       DNS Servers: 10.10.10.10\n        DNS Domain: ~example.org ~int.example.net\n```\n\n"
    },
    {
      "title": "Plain OpenConnect",
      "level": 3,
      "content": "OpenConnect has many options, see openconnect(8). In the simplest case, you are using a Cisco AnyConnect VPN, thus you only have to provide the address, then enter your username and password when prompted:\n\n```\n$ sudo openconnect vpnserviceaddr\n```\n\nIf you use a VPN type other than Cisco AnyConnect, add the \"--protocol\" option specifying either nc, gp, pulse, f5, fortinet, or array:\n\n```\n$ sudo openconnect --protocol=vpntype vpnserviceaddr\n```\n\nThe username can be provided too:\n\n```\n$ sudo openconnect --protocol=vpntype -u user vpnserviceaddr\n```\n\nSome VPNs offer different authentication groups for different access configurations like for example for a full tunnel or split tunnel connection. To show the different offered auth-groups and to get more information about the service in general, use:\n\n```\n$ sudo openconnect --protocol=vpntype --authenticate vpnserviceaddr\n```\n\nSome VPNs require gathering information about your computer when connecting. In that case the \"--csd-wrapper\" option can help. Scripts to use and adapt can be found under \"/usr/lib/openconnect/\".\n\n```\n$ sudo openconnect --protocol=vpntype --csd-wrapper=script vpnserviceaddr\n```\n\nSome VPNs delegate authentication to an identity provider (IdP) like Google, Microsoft AzureActiveDirectory, or Okta. This scenario is often called single sign-on (SSO) and usually employs the SAML 2.0 standard or the OIDC standard. It goes like this: In a browser or webview, you open the VPN's SSO address which redirects to the IdP which sends you back to the VPN page where you end up with a cookie. The cookie must be passed to openconnect using the option \"-C,--cookie\" or \"--cookie-on-stdin\". To copy the cookie from your browser, use its developer tools.\n\n```\n$ sudo openconnect --protocol=vpntype --cookie-on-stdin vpnserviceaddr\n```\n\nFor Fortinet SSO VPNs, you can use openfortivpn-webview-qtAUR to fetch the cookie instead of fiddling with your browser's developer tools:\n\n```\n$ sudo openconnect --protocol=fortinet -C \"$(openfortivpn-webview vpnserviceaddr)\" vpnserviceaddr\n```\n\nOpenConnect passes a couple of environment variables to a script in order to configure IP routing and DNS routing. By default that's \"/etc/vpnc/vpnc-script\". It supports a few environment variables that you can set if needed, e.g. \"CISCO_SPLIT_DNS\" to add additional DNS domains to the network interface besides the ones pushed by the VPN:\n\n```\n$ sudo CISCO_SPLIT_DNS=~internal.example.com,~10.in-addr.arpa openconnect --protocol=vpntype vpnserviceaddr\n```\n\nYou can use your own script instead of the default one using the option \"-s,--script\":\n\n```\n$ sudo openconnect --protocol=vpntype -s script vpnserviceaddr\n```\n\nYou can also team up OpenConnect with a proxy like ocproxy-gitAUR in order to do SSH-style port-forwarding. E.g. a connection to localhost:13389 using rdesktop gets forwarded through the VPN to the RDS service rds.int.example.net:3389 if you run:\n\n```\n$ openconnect --protocol=vpntype --script-tun -s \"ocproxy -L 13389:rds.int.example.net:3389\" vpnserviceaddr\n$ rdesktop localhost:13389\n```\n\n"
    },
    {
      "title": "With NetworkManager",
      "level": 3,
      "content": "NetworkManager can be controlled via command line interface nmcli, via terminal user interface nmtui, and via many desktop environments, thanks to its D-Bus API. For NetworkManager a VPN is just another connection of type \"vpn\". To create one based on OpenConnect named \"MyOrgVPN\" with the CLI, run:\n\n```\n$ nmcli connection add \\\n\t connection.id MyOrgVPN \\\n\t connection.type vpn \\\n\t vpn.service-type openconnect \\\n\t vpn.data cookie-flags=2,gateway=vpnserviceaddr,protocol=vpntype vpn.secrets gateway=vpnserviceaddr,gwcert=\n```\n\nActivating the connection using nmcli connection up MyOrgVPN (i.e. without --ask) or GNOME's menu in the top right corner or GNOME settings a.k.a control center works in most cases as one would expect: a window opens and asks for a username, password, and possibly 2FA/MFA; even SSO scenarios often work if the VPN type is anyconnect or gp. For other desktop environments you might have to install network-manager-applet, nm-connection-editor, or some other package in order to control NetworkManager connections.\n\nActivating the connection using nmcli --ask connection up MyOrgVPN or nmtui or nmtui connect MyOrgVPN does not work the way one would expect though: instead of getting asked for a username, etc., one gets asked for \"Cookie (vpn.secrets.cookie)\". To provide it, you can use a Bash script like this one:\n\n```\n~/vpn-up.bash\n```\n\n```\n#!/usr/bin/bash\n\nconnection_name=$(nmcli -t -g type,name connection \\\n\t| grep -Po '^vpn:\\K.*' \\\n\t| sed 's/\\\\:/:/g' | fzf\n)\neval \"$(nmcli -t -g vpn.data connection show \"$connection_name\" \\\n\t| grep -Po '(^|[ ,])(protocol|gateway)\\ =\\ [^,]*' \\\n\t| sed 's/ //g')\"\neval \"$(openconnect --authenticate --protocol=\"$protocol\" \"$gateway\")\"\nnmcli connection up \"$connection_name\" \\\n\tpasswd-file <(echo \"vpn.secrets.cookie:$COOKIE\")\n```\n\nTo deactivate the connection, use nmcli connection down MyOrgVPN or nmtui or GNOME's menu in the top right corner or GNOME settings a.k.a control center.\n\n"
    },
    {
      "title": "Single Sign-On (SSO) with WebAuth and Anyconnect",
      "level": 4,
      "content": "networkmanager-openconnect supports Single Sign-On (SSO) with WebAuth for Cisco Anyconnect. To use WebAuth:\n\n- Do not forget to install optional dependencies for networkmanager-openconnect like webkit2gtk-*\n- Add something like \"AnyConnect Linux_64 4.10.07061\" to \"User Agent\" field on the VPN tab for this connection\n\nActivate the connection. It should bring you a window with a browser for WebAuth to complete. If it succeeded the networkmanager-openconnect will launch openconnect and pass the \"webvpn\" cookie for it to connect.\n\n"
    },
    {
      "title": "With netctl",
      "level": 3,
      "content": "A simple tuntap netctl.profile(5) can be used to integrate OpenConnect in the normal netctl workflow. For example:\n\n```\n/etc/netctl/vpn\n```\n\n```\nDescription='VPN'\nInterface=vpn\nConnection=tuntap\nMode=tun\n#User=root\n#Group=root\n\nBindsToInterfaces=(enp0s25 wlp2s0)\nIP=no\n\nPIDFILE=/run/openconnect_${Interface}.pid\nSERVER=vpn.example.net\nAUTHGROUP='<AUTHGROUP>'\nLOCAL_USERNAME=<USERNAME>\nREMOTE_USERNAME=<VPN_USERNAME>\n# Assuming the use of pass(1): \nPASSWORD_CMD=\"su ${LOCAL_USERNAME} -c \\\"pass ${REMOTE_USERNAME} | head -n 1\\\"\"\n\nExecUpPost=\"${PASSWORD_CMD} | /usr/bin/openconnect --background --pid-file=${PIDFILE} --interface='${Interface}' --authgroup='${AUTHGROUP}' --user='${REMOTE_USERNAME}' --passwd-on-stdin ${SERVER}\"\nExecDownPre=\"kill -INT $(cat ${PIDFILE}) ; resolvconf -d ${Interface} ; ip link delete ${Interface}\"\n```\n\nThis allows execution like:\n\n```\n$ netctl start vpn\n$ netctl restart vpn\n$ netctl stop vpn\n```\n\nNote that this relies on LOCAL_USERNAME having a gpg-agent running, with the passphrase for the PGP key already cached.\n\nIf pass's interactive query is wanted, use the following line for PASSWORD_CMD:\n\n```\nDISPLAY=\":0\"\nPASSWORD_CMD=\"su ${LOCAL_USERNAME} -c \\\"DISPLAY=${DISPLAY} pass ${REMOTE_USERNAME} | head -n 1\\\"\"\n```\n\nAdjust the DISPLAY variable as necessary.\n\n"
    },
    {
      "title": "Cisco AnyConnect",
      "level": 3,
      "content": "For Cisco AnyConnect VPNs, if you try to use 2FA/MFA but it is not prompting you for the passcode, you need to set the useragent to AnyConnect ... . This is an issue with Cisco, here is the relevant issue in the OpenConnect project.\n\n"
    },
    {
      "title": "Issues caused by AnyConnectLocalPolicy.xml",
      "level": 4,
      "content": "```\nAutomatic profile updates are disabled and the local VPN profile does not match the secure gateway VPN profile.\n```\n\nIs caused by /opt/cisco/anyconnect/AnyConnectLocalPolicy.xml. To fix it edit the file and set\n\n```\n<BypassDownloader>false</BypassDownloader>\n```\n\n"
    },
    {
      "title": "Issues caused by IPv6",
      "level": 4,
      "content": "In some cases, Cisco AnyConnect fails to establish a VPN connection due to conflicts with IPv6.\n\n```\nAnyConnect was not able to establish a connection to the specified secure gateway.\n```\n\nCan be temporary fixed by disabling ipv6:\n\n```\n# sysctl -w net.ipv6.conf.all.disable_ipv6=1\n```\n\n"
    }
  ]
}