{
  "title": "Compile kernel module",
  "url": "https://wiki.archlinux.org/title/Compile_kernel_module",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Kernel\n- Kernel modules\n- Dynamic Kernel Module Support\n\nSometimes you may wish to compile Linux's Kernel module without recompiling the whole kernel.\n\n"
    },
    {
      "title": "Build environment",
      "level": 2,
      "content": "Firstly you will need to install build dependencies such as a compiler (base-devel) and linux-headers.\n\nNext you will need to get the source code for the kernel version the module is intended to run on. You may try using newer kernel sources but most likely the compiled module will not load.\n\nIn case the intended kernel version is the installed kernel, find its version with\n\n```\n$ uname -r\n```\n\nThere are two main options to acquire the required source. Each option has slightly different usage methods and directory structure.\n\n"
    },
    {
      "title": "Traditional compilation",
      "level": 3,
      "content": "See Kernel/Traditional compilation#Download the kernel source. If you fetch latest source using Git you will need to checkout needed version using tag (eg. v4.1).\n\n"
    },
    {
      "title": "Arch Build System",
      "level": 3,
      "content": "For a general overview on Arch Build System read ABS. See Kernel/Arch build system for acquiring the kernel source, as well as the directory structure, and other details.\n\n"
    },
    {
      "title": "Source configuration",
      "level": 2,
      "content": "When you have the source code, enter its directory. For the #Arch Build System case, that directory would be src/archlinux-linux/ down from where the PKGBUILD is.\n\nThe output from make help is beneficial here. Start by cleaning with\n\n```\n$ make mrproper\n```\n\nAn appropriate .config file is now required. If none is nearby, perhaps from a saved .config, and the intended kernel version is the running kernel, you can use its configuration file:\n\n```\n$ zcat /proc/config.gz > .config\n```\n\nNext ensure the .config file is adjusted for the kernel version. If you are using kernel sources for the exact current version then it should not ask anything. But for another version than the current kernel you might be asked about some options. In any case, for the #Arch Build System option, you might want to examine the PKGBUILD::prepare() function.\n\nIf the module you want to compile have some compilation options such as debug build, or it was not compiled before, you can also, possibly must, adjust the kernel configuration. You can do this with one of the many configuration targets mentioned by make help.\n\n```\n$ make oldconfig\n```\n\n"
    },
    {
      "title": "Module compilation",
      "level": 2,
      "content": "In order to compile and load our module cleanly, we must find the value of the EXTRAVERSION component of the current kernel version number so we can match the version number exactly in our kernel source. EXTRAVERSION is a variable set in the kernel top-level Makefile, but the Makefile in a vanilla kernel source will have EXTRAVERSION empty; it is set only as part of the Arch kernel build process. If relevant, the value of the current kernel's EXTRAVERSION can be found by looking at the output of the uname -r command. In general, the kernel version is the concatenation of three components. Namely, the numeric version, the EXTRAVERSION, and the LOCALVERSION. The numeric version itself is a concatenation of three numbers. If built by a PKGBUILD file, the LOCALVERSION will be taken from the pkgrel variable, prefixed by a hyphen. And the EXTRAVERSION will be the suffix of the pkgver variable, where the period character to the right of the third numeric number of the numeric version is replaced by a hyphen. For example, with the linux package linux 5.5.8.arch1-1, the LOCALVERSION is -1. The EXTRAVERSION is -arch1. The output of uname -r will be 5.5.8-arch1-1 in that example.\n\nOnce the EXTRAVERSION value is known, we prepare the source for module compilation:\n\n```\n$ make EXTRAVERSION=<YOUR EXTRAVERSION HERE> modules_prepare\n```\n\nExample:\n\n```\n$ make EXTRAVERSION=-arch1 modules_prepare\n```\n\nAlternatively, if you are happy to load modules with modprobe using the --force-vermagic option to ignore mismatches in the kernel version number, you can simply run:\n\n```\n$ make modules_prepare\n```\n\nFinally, compile wanted module by specifying its directory name. You can find the module location, thus also its directory name, with modinfo or find.\n\n```\n$ make M=fs/btrfs\n```\n\nAs a last resort, if nothing else has worked, you can\n\n```\n$ make modules\n```\n\nWhich will build all the modules from the kernel configuration.\n\n"
    },
    {
      "title": "out-of-tree module compilation",
      "level": 2,
      "content": "get the official source code of the current running linux kernel as described in Kernel/Arch build system:\n\n```\n$ cd && mkdir build\n$ pkgctl repo clone linux\n```\n\nthen point to the checked out source when compiling the module:\n\n```\n$ cd build/mymod\n$ make -C ~/build/linux/src/archlinux-linux M=$PWD modules\n```\n\n"
    },
    {
      "title": "Module installation",
      "level": 2,
      "content": "Now after successful compilation you just need to gzip and copy it over for your current kernel.\n\nIf you are replacing some existing module you will need to overwrite it (and remember that reinstalling linux will replace it with default module)\n\n```\n$ zstd fs/btrfs/btrfs.ko\n# cp -f fs/btrfs/btrfs.ko.zst /usr/lib/modules/$(uname -r)/kernel/fs/btrfs/\n```\n\nOr alternatively, you can place the updated module in the updates folder (create it if it does not already exist).\n\n```\n$ cp fs/btrfs/btrfs.ko.zst /usr/lib/modules/$(uname -r)/updates\n```\n\nHowever if you are adding a new module you can just copy it to extramodules (note, this is just example as btrfs will not get loaded from here)\n\n```\n# cp fs/btrfs/btrfs.ko.zst /usr/lib/modules/$(uname -r)/extramodules/\n```\n\nYou need to rebuild the module dependency tree with \"depmod\" to use installed modules.\n\nIf you are compiling a module for early boot (e.g. updated module) which is copied to Initramfs then you must remember to regenerate it with (otherwise your compiled module will not be loaded).\n\n```\n# mkinitcpio -p linux\n```\n\n"
    },
    {
      "title": "possible errors",
      "level": 2,
      "content": "If EXTRAVERSION is not set correctly the following errors may occur\n\n```\n# insmod mymod.ko\ninsmod: ERROR: could not insert module mymod.ko: Invalid module format\n# modprobe mymod\nmodprobe: ERROR: could not insert 'mymod': Exec format error\n```\n\nadding force-vermagic makes it ignore the version mismatch\n\n```\nmodprobe mymod --force-vermagic\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Linux Kernel Newbies\n- The Linux Kernel Module Programming Guide\n\n"
    }
  ]
}