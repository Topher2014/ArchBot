{
  "title": "Rsync/Full system backup",
  "url": "https://wiki.archlinux.org/title/Rsync/Full_system_backup",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- System backup\n- Synchronization and backup programs\n\nrsync is an open source utility that provides fast incremental file transfer.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the rsync package.\n\nrsync must be installed on both the source and the destination machine.\n\n"
    },
    {
      "title": "Front-ends",
      "level": 3,
      "content": "- Grsync — GTK front-end.\n\n- luckyBackup — Qt front-end written in C++.\n\n- nbRsync — JavaFX GUI for rsync with integrated scheduler.\n\nOther tools using rsync are rdiff-backupAUR, osyncAUR and yarsyncAUR.\n\n"
    },
    {
      "title": "As cp/mv alternative",
      "level": 2,
      "content": "rsync can be used as an advanced alternative for the cp or mv command, especially for copying larger files:\n\n```\n$ rsync -P source destination\n```\n\nThe -P option is the same as --partial --progress, which keeps partially transferred files and shows a progress bar.\n\nYou may want to use the -r/--recursive option to recurse into directories.\n\nFiles can be copied locally as with cp, but the motivating purpose of rsync is to copy files remotely, i.e. between two different hosts. Remote locations can be specified with a host-colon syntax:\n\n```\n$ rsync source host:destination\n```\n\nor\n\n```\n$ rsync host:source destination\n```\n\nNetwork file transfers use the SSH protocol by default and host can be a real hostname or a predefined profile/alias from .ssh/config.\n\nWhether transferring files locally or remotely, rsync first creates a file-list containing information (by default, it is the file size and last modification timestamp) which will then be used to determine if a file needs to be constructed. For each file to be constructed, a weak and strong checksum is found for all blocks such that each block is of length S bytes, non-overlapping, and has an offset which is divisible by S. Using this information a large file can be constructed using rsync without having to transfer the entire file. For a more detailed practical and mathematical explanation refer to how rsync works and the rsync algorithm, respectively.\n\nTo use sane defaults quickly, you could use some aliases:\n\n```\ncpr() {\n  rsync --archive -hh --partial --info=stats1,progress2 --modify-window=1 \"$@\"\n} \nmvr() {\n  rsync --archive -hh --partial --info=stats1,progress2 --modify-window=1 --remove-source-files \"$@\"\n}\n```\n\n- -hh: output numbers in a human-readable format\n- --info=stats1,progress2: stats1 displays rsync transfer statistics with verbosity level 1. progress2 prints total transfer progress as opposed to per-file transfer progress (progress1)\n- --modify-window=1: when comparing the timestamps of two files, treat their timestamps as being equivalent if their timestamps have a difference of less than 1 second\n- --remove-source-files: remove files from the source directory after they have been successfully synced\n\nNote: **not** \n\n"
    },
    {
      "title": "Trailing slash caveat",
      "level": 3,
      "content": "Arch by default uses GNU cp (part of GNU coreutils). However, rsync follows the convention of BSD cp, which gives special treatment to source directories with a trailing slash \"/\". Whereas\n\n```\n$ rsync -r source destination\n```\n\ncreates a directory \"destination/source\" with the contents of \"source\", the command\n\n```\n$ rsync -r source/ destination\n```\n\ncopies all of the files in \"source/\" directly into \"destination\", with no intervening subdirectory - just as if you had invoked it as\n\n```\n$ rsync -r source/. destination\n```\n\nThis behavior is different from that of GNU cp, which treats \"source\" and \"source/\" identically (but not \"source/.\"). Also, some shells automatically append the trailing slash when tab-completing directory names. Because of these factors, there can be a tendency among new or occasional rsync users to forget about rsync's different behavior, and inadvertently create a mess or even overwrite important files by leaving the trailing slash on the command line.\n\nThus it can be prudent to use a wrapper script to automatically remove trailing slashes before invoking rsync:\n\n```\n#!/bin/bash\nnew_args=()\nfor i in \"${@}\"; do\n    case \"${i}\" in\n        /)\n            i=\"/\"\n        ;;\n        */)\n            i=\"${i%/}\"\n        ;;\n        esac\n    new_args+=(\"${i}\")\ndone\nexec rsync \"${new_args[@]}\"\n```\n\nThis script can be put somewhere in the path, and aliased to rsync in the shell init file.\n\n"
    },
    {
      "title": "As a backup utility",
      "level": 2,
      "content": "The rsync protocol can easily be used for backups, only transferring files that have changed since the last backup. This section describes a very simple scheduled backup script using rsync, typically used for copying to removable media.\n\n"
    },
    {
      "title": "Automated backup",
      "level": 3,
      "content": "For the sake of this example, the script is created in the /etc/cron.daily directory, and will be run on a daily basis if a cron daemon is installed and properly configured. Configuring and using cron is outside the scope of this article.\n\nFirst, create a script containing the appropriate command options:\n\n```\n/etc/cron.daily/backup\n```\n\n```\n#!/bin/sh\nrsync -a --delete --quiet /path/to/backup /location/of/backup\n```\n\n- -a: indicates that files should be archived, meaning that most of their characteristics are preserved (but not ACLs, hard links or extended attributes such as capabilities)\n- --delete: means files deleted on the source are to be deleted on the backup as well\n\nHere, /path/to/backup should be changed to what needs to be backed-up (e.g. /home) and /location/of/backup is where the backup should be saved (e.g. /media/disk).\n\nFinally, the script must be executable.\n\n"
    },
    {
      "title": "Automated backup with SSH",
      "level": 3,
      "content": "If backing-up to a remote host using SSH, use this script instead:\n\n```\n/etc/cron.daily/backup\n```\n\n```\n#!/bin/sh\nrsync -a --delete --quiet -e ssh /path/to/backup remoteuser@remotehost:/location/of/backup\n```\n\n- -e ssh: tells rsync to use SSH\n- remoteuser: is the user on the host remotehost\n- -a: groups all these options -rlptgoD (recursive, links, perms, times, group, owner, devices)\n\n"
    },
    {
      "title": "Automated backup with NetworkManager",
      "level": 3,
      "content": "This script starts a backup when network connection is established.\n\nFirst, create a script containing the appropriate command options:\n\n```\n/etc/NetworkManager/dispatcher.d/backup\n```\n\n```\n#!/bin/sh\n\nif [ x\"$2\" = \"xup\" ] ; then\n        rsync --force --ignore-errors -a --delete --bwlimit=2000 --files-from=files.rsync /path/to/backup /location/of/backup\nfi\n```\n\n- -a: group all this options -rlptgoD recursive, links, perms, times, group, owner, devices\n- --files-from: read the relative path of /path/to/backup from this file\n- --bwlimit: limit I/O bandwidth; Kilo-bytes per second\n\nThe script must be owned by root (see NetworkManager#Network services with NetworkManager dispatcher for details).\n\n"
    },
    {
      "title": "Automated backup with systemd and inotify",
      "level": 3,
      "content": "- Due to the limitations of inotify and systemd (see this question and answer), recursive filesystem monitoring is not possible. Although you can watch a directory and its contents, it will not recurse into subdirectories and watch the contents of them; you must explicitly specify every directory to watch, even if that directory is a child of an already watched directory.\n- This setup is based on a systemd/User instance.\n\nInstead of running time interval backups with time based schedules, such as those implemented in cron, it is possible to run a backup every time one of the files you are backing up changes. systemd.path units use inotify to monitor the filesystem, and can be used in conjunction with systemd.service files to start any process (in this case your rsync backup) based on a filesystem event.\n\nFirst, create the systemd.path unit that will monitor the files you are backing up:\n\n```\n~/.config/systemd/user/backup.path\n```\n\n```\n[Unit]\nDescription=Checks if paths that are currently being backed up have changed\n\n[Path]\nPathChanged=%h/documents\nPathChanged=%h/music\n\n[Install]\nWantedBy=default.target\n```\n\nThen create a systemd.service file that will be activated when it detects a change. By default a service file of the same name as the path unit (in this case backup.path) will be activated, except with the .service extension instead of .path (in this case backup.service).\n\n```\n~/.config/systemd/user/backup.service\n```\n\n```\n[Unit]\nDescription=Backs up files\n\n[Service]\nExecStart=/usr/bin/rsync %h/./documents %h/./music -CERrltm --delete ubuntu:\n```\n\nNow all you have to do is enable/start backup.path like a normal systemd service and it will start monitoring file changes and automatically start backup.service.\n\n"
    },
    {
      "title": "Differential backup on a week",
      "level": 3,
      "content": "This is a useful option of rsync, resulting in a full backup (on each run) and keeping a differential backup copy of changed files only in a separate directory for each day of a week.\n\nFirst, create a script containing the appropriate command options:\n\n```\n/etc/cron.daily/backup\n```\n\n```\n#!/bin/sh\n\nDAY=$(date +%A)\n\nif [ -e /location/to/backup/incr/$DAY ] ; then\n  rm -fr /location/to/backup/incr/$DAY\nfi\n\nrsync -a --delete --quiet --inplace --backup --backup-dir=/location/to/backup/incr/$DAY /path/to/backup/ /location/to/backup/full/\n```\n\nThe --inplace option implies --partial and updates destination files in-place.\n\n"
    },
    {
      "title": "Snapshot backup",
      "level": 3,
      "content": "The same idea can be used to maintain a tree of snapshots of your files. In other words, a directory with date-ordered copies of the files. The copies are made using hardlinks, which means that only files that did change will occupy space. Generally speaking, this is the idea behind Apple's TimeMachine.\n\nThis basic script is easy to implement and creates quick incremental snapshots using the --link-dest option to hardlink unchanged files:\n\n```\n/usr/local/bin/snapbackup.sh\n```\n\n```\n#!/bin/sh\n\n# Basic snapshot-style rsync backup script \n\n# Config\nOPT=\"-aPh\"\nLINK=\"--link-dest=/snapshots/username/last/\" \nSRC=\"/home/username/files/\"\nSNAP=\"/snapshots/username/\"\nLAST=\"/snapshots/username/last\"\ndate=`date \"+%Y-%b-%d:_%T\"`\n\n# Run rsync to create snapshot\nrsync $OPT $LINK $SRC ${SNAP}$date\n\n# Remove symlink to previous snapshot\nrm -f $LAST\n\n# Create new symlink to latest snapshot for the next backup to hardlink\nln -s ${SNAP}$date $LAST\n```\n\nThere must be a symlink to a full backup already in existence as a target for --link-dest. If the most recent snapshot is deleted, the symlink will need to be recreated to point to the most recent snapshot. If --link-dest does not find a working symlink, rsync will proceed to copy all source files instead of only the changes.\n\nA more sophisticated version keeps an up-to-date full backup $SNAP/latest and in case a certain number of files has changed since the last full backup, it creates a snapshot $SNAP/$DATETAG of the current full-backup utilizing cp -al to hardlink unchanged files:\n\n```\n/usr/local/bin/rsnapshot.sh\n```\n\n```\n#!/bin/sh\n\n## my own rsync-based snapshot-style backup procedure\n## (cc) marcio rps AT gmail.com\n\n# config vars\n\nSRC=\"/home/username/files/\" #dont forget trailing slash!\nSNAP=\"/snapshots/username\"\nOPTS=\"-rltgoi --delay-updates --delete --chmod=a-w\"\nMINCHANGES=20\n\n# run this process with real low priority\n\nionice -c 3 -p $$\nrenice +12  -p $$\n\n# sync\n\nrsync $OPTS $SRC $SNAP/latest >> $SNAP/rsync.log\n\n# check if enough has changed and if so\n# make a hardlinked copy named as the date\n\nCOUNT=$( wc -l $SNAP/rsync.log|cut -d\" \" -f1 )\nif [ $COUNT -gt $MINCHANGES ] ; then\n        DATETAG=$(date +%Y-%m-%d)\n        if [ ! -e $SNAP/$DATETAG ] ; then\n                cp -al $SNAP/latest $SNAP/$DATETAG\n                chmod u+w $SNAP/$DATETAG\n                mv $SNAP/rsync.log $SNAP/$DATETAG\n               chmod u-w $SNAP/$DATETAG\n         fi\nfi\n```\n\nTo make things really, really simple this script can be run from a systemd/Timers unit.\n\n"
    },
    {
      "title": "Full system backup",
      "level": 3,
      "content": "This section is about using rsync to transfer a copy of the entire / tree, excluding a few selected directories. This approach is considered to be better than disk cloning with dd since it allows for a different size, partition table and filesystem to be used, and better than copying with cp -a as well, because it allows greater control over file permissions, attributes, Access Control Lists and extended attributes.\n\nrsync will work even while the system is running, but files changed during the transfer may or may not be transferred, which can cause undefined behavior of some programs using the transferred files. For mitigation log out all users and shut down all programs and databases.\n\nThis approach works well for migrating an existing installation to a new hard drive or SSD.\n\nRun the following command as root to make sure that rsync can access all system files and preserve the ownership:\n\n```\n# rsync -aAXHv --exclude='/dev/*' --exclude='/proc/*' --exclude='/sys/*' --exclude='/tmp/*' --exclude='/run/*' --exclude='/mnt/*' --exclude='/media/*' --exclude='/lost+found/' / /path/to/backup\n```\n\nBy using the -aAX set of options, the files are transferred in archive mode which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved, assuming that the target file system supports the feature. The option -H preserves hard links, but uses more memory.\n\nThe --exclude option causes files/directories that match the given patterns to be excluded. Instead or in conjunction, the --exclude-from=file option excludes files/directories that match patterns (one per line) in file, similar to the example described in #Advanced usage of filter rules but without the +/- syntax.\n\nThe directories /dev, /proc, /sys, /tmp, and /run are included in the above command, but the contents of those directories are excluded. This is because they are populated on boot, but the directories themselves are not created. /lost+found is filesystem-specific. Quoting the exclude patterns will avoid expansion by the shell, which is necessary, for example, when backing up over SSH. Ending the excluded paths with * ensures that the directories themselves are created if they do not already exist.\n\n- If you plan on backing up your system somewhere other than /mnt or /media, do not forget to add it to the list of exclude patterns to avoid an infinite loop.\n- If there are any bind mounts in the system, they should be excluded as well so that the bind mounted contents is copied only once.\n- If you use a swap file, make sure to exclude it as well.\n- Consider if you want to backup the /home/ directory. If it contains your data it might be considerably larger than the system. Otherwise consider excluding unimportant sub-directories such as /home/*/.thumbnails/*, /home/*/.cache/mozilla/*, /home/*/.cache/chromium/*, and /home/*/.local/share/Trash/*, depending on software installed on the system.\n- If GVFS is installed, /home/*/.gvfs must be excluded to prevent rsync errors.\n- If Dhcpcd ≥ 9.0.0 is installed, exclude the /var/lib/dhcpcd/* directory as it mounts several system directories as sub-directories there.\n\nYou may want to include additional rsync options, or remove some, such as the following. See rsync(1) for the full list.\n\n- If you run on a system with very low memory, consider removing -H option; however, it should be no problem on most modern machines. There can be many hard links on the file system depending on the software used (e.g. if you are using Flatpak). Many hard links reside under the /usr/ directory.\n- You may want to add rsync's --delete option if you are running this multiple times to the same backup directory. In this case make sure that the source path does not end with /*, or this option will only have effect on the files inside the subdirectories of the source directory, but it will have no effect on the files residing directly inside the source directory.\n- If you use any sparse files, such as virtual disks, Docker images and similar, you should add the -S option.\n- The --numeric-ids option will disable mapping of user and group names; instead, numeric group and user IDs will be transfered. This is useful when backing up over SSH or when using a live system to backup different system disk.\n- Choosing --info=progress2 option instead of -v will show the overall progress info and transfer speed instead of the list of files being transferred.\n- To avoid crossing a filesystem boundary when recursing, add the option -x/--one-file-system. This will prevent backing up any mount point in the hierarchy.\n\n"
    },
    {
      "title": "Restore a backup",
      "level": 3,
      "content": "If you wish to restore a backup, use the same rsync command that was executed but with the source and destination reversed.\n\n"
    },
    {
      "title": "Advanced usage of filter rules",
      "level": 3,
      "content": "Instead of specifying include and exclude rules separately rsync can read all of these from a single filter file. rsync then processes the rules in a top-down order; the first matching rule wins.\n\n```\nbackup.filter\n```\n\n```\n# Exclude patterns\n\n- .thumbnails/***\n- node_modules/***\n- venv/***\n\n# Include patterns\n\n+ /Documents/***\n+ /Books/***\n+ /Music/***\n\n# Exclude everything else\n- /**\n```\n\n*** is a special rsync pattern which matches a folder and all of its contents recursively.\n\nCheck rsync(1) § PATTERN MATCHING RULES and rsync(1) § FILTER RULES IN DEPTH for more details.\n\nThen run rsync with:\n\n```\n$ rsync -aAXHv --filter=\"merge backup.filter\" $SRC $DEST\n```\n\nThe key word is the --filter \"merge ...\" parameter which will take the filter file and parse the rules in order for each sync-ed file.\n\n"
    },
    {
      "title": "Copy from list of paths",
      "level": 3,
      "content": "An alternative to the #Advanced usage of filter rules method is to use the --files-from option. This can take an input from a text file containing a list of directory or file paths, with each entry being separated by new lines. It should be noted that the -r flag must manually be specified for this option if the user wants recursive directory copying, even when -a is already included.\n\nFor example, a list of directories and all recursive directories can be archived with the following:\n\n```\n$ rsync -aAXHvr --files-from=\"dir_list.txt\" $SRC $DEST\n```\n\n"
    },
    {
      "title": "File system cloning",
      "level": 2,
      "content": "rsync provides a way to do a copy of all data in a file system while preserving as much information as possible, including the file system metadata. It is a procedure of data cloning on a file system level where source and destination file systems do not need to be of the same type. It can be used for backing up, file system migration or data recovery.\n\nrsync's archive mode comes close to being fit for the job, but it does not back up the special file system metadata such as access control lists, extended attributes or sparse file properties. For successful cloning at the file system level, some additional options need to be provided:\n\n```\nrsync -qaHAXS SOURCE_DIR DESTINATION_DIR\n```\n\nAnd their meaning is (from the manpage):\n\n```\n--hard-links, -H         preserve hard links\n--acls, -A               preserve ACLs (implies --perms)\n--xattrs, -X             preserve extended attributes\n--sparse, -S             turn sequences of nulls into sparse blocks\n```\n\nAdditionally, use -x if you have other filesystems mounted under the tree that you want to exclude from the copy.\n\nThe produced copy can be simply reread and checked (for example after a data recovery attempt) at the file system level with diff's recursive option:\n\n```\ndiff -r SOURCE_DIR DESTINATION_DIR\n```\n\nIt is possible to do a successful file system migration by using rsync as described in this article and updating the fstab and boot loader as described in Migrate installation to new hardware. This essentially provides a way to convert any root file system to another one.\n\n"
    },
    {
      "title": "As a daemon",
      "level": 2,
      "content": "rsync can be run as daemon on a server listening on TCP port 873.\n\nEdit the template /etc/rsyncd.conf, configure a share and start the rsyncd.service.\n\nUsage from client, e.g. list server content:\n\n```\n$ rsync rsync://server/share\n```\n\ntransfer file from client to server:\n\n```\n$ rsync local-file rsync://server/share/\n```\n\nConsider opening TCP port 873 in the firewall, and using user authentication.\n\n"
    },
    {
      "title": "Sharing from a list of files",
      "level": 4,
      "content": "```\n/etc/rsyncd.conf\n```\n\n```\n...\n\n# Needed when crossing filesystem boundaries.\n#use chroot  = no\nread only = yes\n\n...\n\n[sync]\n    path         = /\n# List of files to copy.\n    include from = /backup.list\n# Exclude the rest.\n    exclude      = *\n```\n\nInside the file list, all the intermediary paths are necessary, except when the *** wildcard is used:\n\n```\n/backup.list\n```\n\n```\n/etc/\n/etc/conf.d/\n/etc/conf.d/hwclock\n/etc/fonts/***\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- More usage examples can be searched in the Community Contributions and General Programming forums\n- Howto – local and remote snapshot backup using rsync with hard links Includes file deduplication with hard-links, MD5 integrity signature, 'chattr' protection, filter rules, disk quota, retention policy with exponential distribution (backups rotation while saving more recent backups than older)\n- Using SSH keys/identity files with rsync\n\n"
    }
  ]
}