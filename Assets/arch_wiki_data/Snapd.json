{
  "title": "Snapd",
  "url": "https://wiki.archlinux.org/title/Snapd",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Flatpak\n- AppArmor\n\nSnap is a software deployment and package management system. The packages are called 'snaps' and the tool for using them is 'snapd', which works across a range of Linux distributions and allows, therefore, distribution-agnostic upstream software deployment. Canonical, the developer of Snap, manages the Snap Store service through which snaps are deployed.\n\nsnapd is a REST API daemon for managing snap packages. Users can interact with it by using the snap client, which is part of the same package.\n\nSnaps can be confined using AppArmor which is now enabled in the default kernel. Consult relevant wiki pages to find steps for enabling AppArmor in your system.\n\n- If AppArmor is not enabled in your system then all snaps will run in devel mode which mean they will have the same unrestricted access to your system as apps installed from Arch Linux repositories.\n- Running untrusted code is never safe, sandboxing cannot change this.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the snapdAUR package.\n\nsnapd supports the AppArmor security model if it is enabled on your system, to install it follow AppArmor#Installation.\n\nIf you are using AppArmor, enable and start both apparmor.service and snapd.apparmor.service.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "To launch the snapd daemon when snap tries to use it, enable/start snapd.socket.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "The snap tool is used to manage the snaps.\n\n"
    },
    {
      "title": "Finding",
      "level": 3,
      "content": "To find snaps to install, you can query the Ubuntu Store with:\n\n```\n$ snap find searchterm\n```\n\n"
    },
    {
      "title": "Installing",
      "level": 3,
      "content": "Once you found the snap you are looking for you can install it with:\n\n```\n# snap install snapname\n```\n\nThis requires root privileges. Per user installation of snaps is not possible, yet. This will download the snap into /var/lib/snapd/snaps and mount it to /var/lib/snapd/snap/snapname to make it available to the system.\n\nIt will also create mount units for each snap and add them to /etc/systemd/system/multi-user.target.wants/ as symlinks to make all snaps available when the system is booted. Once that is done you should find it in the list of installed snaps together with its version number, revision and developer using:\n\n```\n$ snap list\n```\n\nYou can also sideload snaps from your local hard drive with:\n\n```\n# snap install --dangerous /path/to/snap\n```\n\n"
    },
    {
      "title": "Updating",
      "level": 3,
      "content": "To update your snaps manually use:\n\n```\n# snap refresh\n```\n\nSnaps are refreshed automatically according to snap refresh.timer setting.\n\nTo view the next/last refresh times use:\n\n```\n# snap refresh --time\n```\n\nTo set a different refresh time, eg. twice a day:\n\n```\n# snap set core refresh.timer=0:00~24:00/2\n```\n\nSee system options documentation page for details on customizing the refresh time.\n\n"
    },
    {
      "title": "Removing",
      "level": 3,
      "content": "Snaps can be removed by executing:\n\n```\n# snap remove snapname\n```\n\n"
    },
    {
      "title": "Classic snaps",
      "level": 3,
      "content": "Some snaps (e.g. Julia and Pycharm) use classic confinement. However, classic confinement requires the /snap directory, which is not FHS-compliant. The snapd package does not ship this directory, however the user can manually create a symbolic link between /var/lib/snapd/snap and /snap to allow the installation of classic snaps:\n\n```\n# ln -s /var/lib/snapd/snap /snap\n```\n\n"
    },
    {
      "title": "Confinement",
      "level": 3,
      "content": "When using AppArmor, snapd will generate the same profiles for snaps as on Ubuntu. The AppArmor parser is smart enough to drop the rules that are not yet supported by the mainline kernel.\n\nTo verify that basic confinement is working, install hello-world snap. Then run the following:\n\n```\n$ hello-world.evil\n```\n\n```\nHello Evil World!\nThis example demonstrates the app confinement\nYou should see a permission denied error next\n/snap/hello-world/27/bin/evil: 9: /snap/hello-world/27/bin/evil: cannot create /var/tmp/myevil.txt: Permission denied\n```\n\nThe denial was caused by AppArmor and should have been logged:\n\n```\n# dmesg\n```\n\n```\n...\n[  +0.000003] audit: type=1327 audit(1540469583.966:257): proctitle=2F62696E2F7368002F736E61702F68656C6C6F2D776F726C642F32372F62696E2F6576696C\n[ +12.268939] audit: type=1400 audit(1540469596.236:258): apparmor=\"DENIED\" operation=\"open\" profile=\"snap.hello-world.evil\" name=\"/var/tmp/myevil.txt\" pid=10835 comm=\"evil\" requested_mask=\"wc\" denied_mask=\"wc\" fsuid=1000 ouid=1000\n[  +0.000006] audit: type=1300 audit(1540469596.236:258): arch=c000003e syscall=2 success=no exit=-13 a0=55d991ba6bc8 a1=241 a2=1b6 a3=55d991ba6be0 items=0 ppid=31349 pid=10835 auid=1000 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=pts2 ses=3 comm=\"evil\" exe=\"/bin/dash\" subj==snap.hello-world.evil (enforce)\n...\n```\n\nIf you do not see the denial, verify that the profiles were loaded:\n\n```\n# aa-status | grep snap.hello-world\n```\n\n```\nsnap.hello-world.env\n   snap.hello-world.evil\n   snap.hello-world.hello-world\n   snap.hello-world.sh\n```\n\nAlso, you can check what sandbox features are available in the system according to snapd:\n\n```\n$ snap debug sandbox-features\n```\n\n```\napparmor:             kernel:caps kernel:domain kernel:file kernel:mount kernel:namespaces kernel:network_v8 kernel:policy kernel:ptrace kernel:query kernel:rlimit kernel:signal parser:unsafe policy:default support-level:partial\nconfinement-options:  devmode\ndbus:                 mediated-bus-access\nkmod:                 mediated-modprobe\nmount:                freezer-cgroup-v1 layouts mount-namespace per-snap-persistency per-snap-profiles per-snap-updates per-snap-user-profiles stale-base-invalidation\nseccomp:              bpf-argument-filtering kernel:allow kernel:errno kernel:kill_process kernel:kill_thread kernel:log kernel:trace kernel:trap\n```\n\n"
    },
    {
      "title": "Hide the snap folder",
      "level": 3,
      "content": "See XDG Base Directory#Hiding unwanted directories to hide the snap folder.\n\n"
    },
    {
      "title": "Sudo",
      "level": 3,
      "content": "With secure_path being enabled in sudo by default, the /var/lib/snapd/snap/bin directory is no longer present in the default $PATH environment variable of the process started by sudo. Commands such as sudo lxc list will fail, as the lxc symbolic link can no longer be found by the shell process.\n\nThis can be addressed on per user basis by adding the following snippet to /etc/sudoers.d/90_snap:\n\n```\n# Add snap binaries installation dir to PATH\nDefaults:<your-user-name> secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/bin:/var/lib/snapd/snap/bin\"\n```\n\nWhere <your-user-name> must be replaced with the desired $USER.\n\n"
    },
    {
      "title": "Text unreadable",
      "level": 3,
      "content": "If you are seeing squares instead of readable characters, you need to clear the font cache:\n\n```\n# rm -f /var/cache/fontconfig/*\n$ rm -f ~/.cache/fontconfig/*\n# fc-cache -r -v\n```\n\nSnapctl also stores internal caches for each individual snap, which need to be cleared seperately. First, find them by running:\n\n```\n$ find ~/snap/ -wholename '*/.cache/fontconfig'\n```\n\n```\n... /home/darth_vader/snap/mailspring/common/.cache/fontconfig\n... /home/darth_vader/snap/authy/common/.cache/fontconfig\n... /home/darth_vader/snap/icedrive/common/.cache/fontconfig\n... /home/darth_vader/snap/discord/common/.cache/fontconfig\n... /home/darth_vader/snap/bitwarden/common/.cache/fontconfig\n```\n\nThen either remove them individually or use this simple loop.\n\nFinally, Restart your session.\n\n"
    },
    {
      "title": "Error: cannot mount squashfs",
      "level": 3,
      "content": "Snap packages use the SquashFS file system. In the event of an error similar to the following:\n\n```\nerror: system does not fully support snapd: cannot mount squashfs image using \"squashfs\"\n```\n\nyou may verify that the SquashFS kernel module is loaded with\n\n```\n$ lsmod\n```\n\n```\nModule                  Size  Used by\nsquashfs               xxxxx  x\n...\n```\n\n"
    },
    {
      "title": "Error: /user.slice/user-1000.slice/session-1.scope is not a snap cgroup",
      "level": 3,
      "content": "You need to set your DBUS_SESSION_BUS_ADDRESS environment variable like so:\n\n```\nexport DBUS_SESSION_BUS_ADDRESS=\"unix:path=$XDG_RUNTIME_DIR/bus\"\n```\n\nTo make this change permanent and also available in your GUI session, consider adding this line to your ~/.xprofile file.\n\nFor more information and full discussion about this issue, please read here\n\n"
    },
    {
      "title": "Graphical management",
      "level": 2,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nBoth Gnome Software Center and KDE Discover can provide native snap support. For KDE Discover install discover-snapAUR package.\n\nThe Snap Store can be installed via snap\n\n```\n# snap install snap-store\n```\n\n"
    },
    {
      "title": "Support",
      "level": 2,
      "content": "Arch Linux related mailing lists and other official Arch Linux support channels are not an appropriate place to request help with snaps on Arch Linux. An appropriate place to ask for support is the Snapcraft forum.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official site\n- GitHub repository\n- ArsTechnica article (2016-06) about Ubuntu snaps becoming available for Arch and other distributions\n\n"
    }
  ]
}