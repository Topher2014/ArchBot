{
  "title": "Altera Design Software",
  "url": "https://wiki.archlinux.org/title/Altera_Design_Software",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "From the Intel Quartus Prime overview:\n\nThis article focuses on the following Intel FPGA software components:\n\n- Quartus Prime Lite Intel FPGA Download Cable (II)\n- Questa-Intel FPGA Edition — included with Quartus Prime Lite Edition\n\n- Intel FPGA Download Cable (II)\n\n- Intel Quartus Prime was previously called Altera Quartus Prime.\n- Intel FPGA Download Cable was formerly known as USB-Blaster.\n- ModelSim-Intel FPGA (Starter) Edition was discontinued and replaced by Questa.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Quartus Prime Lite and Questa can be installed with the quartus-freeAUR meta-package. This meta-package will also install device support for every supported device family. To save on disk space once the package is built, you can install only the necessary components. For example:\n\n- quartus-free-quartusAUR for Quartus Prime Lite\n- quartus-free-questaAUR for Questa\n\nquartus-free-quartus requires quartus-free-devinfo, which is provided by any one of the packages with a quartus-free-devinfo- prefix. For example, install the quartus-free-devinfo-cyclonevAUR dependency if you have a Cyclone V FPGA.\n\nQuartus II 13.0 Web Edition is \"the last version to support Cyclone II and earlier FPGAs\", so install quartus-free if support for such devices is needed or quartus-130AUR for the SP1 Subscription Edition.\n\nUnlike ModelSim, Questa requires a valid license file even for the free version. Those who do not wish to provide one can install the last version of ModelSim (modelsim-intel-starterAUR) instead.\n\nquartus-free-quartus uses files in /etc/profile.d/ to extend the PATH environment variable, so log into a new session to make commands like quartus_sh available.\n\nBeing in the plugdev group to program an FPGA (via the USB-Blaster) is optional; logged in users are always allowed access.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Run Quartus Prime Lite by running quartus or selecting its desktop entry. Use the quartus_sh utility to run Quartus Prime Shell. See quartus_sh --help for more information.\n\nRun ModelSim by running vsim or selecting its desktop entry. See vsim -help for more information.\n\n"
    },
    {
      "title": "Standard Edition license validation",
      "level": 2,
      "content": "Configuring the path to your Quartus Prime Standard Edition license file from the Quartus Prime settings interface is not enough for successful license validation. The license validation routine looks for your MAC address on interface eth0, the traditional name for your Ethernet controller. However, network interfaces use predictable names by default—these can vary from machine to machine. Thus, the expected eth0 name must be retained by following Network configuration#Revert to traditional interface names.\n\nAlternatively, a dummy eth0 network interface can be dynamically created by systemd-networkd at boot. This may be desirable for systems without a wired Ethernet adapter. Create the following file (where hostname is your machine's hostname):\n\n```\n/etc/systemd/network/25-dummy.netdev\n```\n\n```\n[Match]\nHost=hostname\n\n[NetDev]\nName=eth0\nKind=dummy\nMACAddress=MAC_address\n```\n\nEnsure systemd-networkd.service is started/enabled afterwards.\n\nSee also related articles on the Intel Knowledge Base:\n\n- Why does my Quartus/OpenCL license not work on Red Hat 7.x?\n- Why does OpenCL node locked license not work with multiple ethernet port?\n\n"
    },
    {
      "title": "Generating license",
      "level": 3,
      "content": "You can get the licenses you need from: https://www.intel.com/content/www/us/en/my-intel/fpga-sslc-sign-in.html You first need to register to get access. Use Student as Profession. When you have access, sign in and select \"Sign up for Evaluation of Free Licenses\" You need to generate two license files.\n\n"
    },
    {
      "title": "Choosing right license",
      "level": 3,
      "content": "Select \"Questa*-Intel® FPGA Starter Edition SW-QUESTA\". Edit \"# of Sets\" to 1 and click \"Get license\". Select +New Computer (if this is your first time here) and fill in the following using a computer name of your choice and yourself as Primary Admin.\n\nSelect Computer Type -> NIC ID\n\nComputer ID -> your MAC address\n\nYou find your computer’s NIC ID (Physical address without ‘:‘) using the \"Terminal\" and typing ip link. This number should then replace 123456789ABC in Computer ID fields. Then click on \"Generate License\".\n\nYou will now receive an email with two license file. You might want to put them in the Quartus program directory, e.g., under \"licenses\".\n\n"
    },
    {
      "title": "Setting up environment variable",
      "level": 3,
      "content": "You need three variables: MGLM_LICENSE_FILE, LM_LICENSE_FILE and LS_LICENSE_FILE\n\nFor MGLM_LICENSE_FILE and LS_LICENSE_FILE, you need to bind them to the file with the larger content. For LM_LICENSE_FILE, you need to bind this to the smaller file.\n\nyou can bind these in a lot of different ways. But one way to do this is add the following to the /etc/environment :\n\n```\ncat /etc/environment\n```\n\n```\nexport MGLM_LICENSE_FILE=Path to the larger license\nexport LS_LICENSE_FILE=Path to the larger license\nexport LM_LICENSE_FILE=Path to the smaller license\n```\n\n"
    },
    {
      "title": "Enabling Eclipse and NIOS IDE",
      "level": 3,
      "content": "Follow this guide from intel. And disregard step \"6)\" where it mentions an .exe file\n\nhttps://www.intel.com/content/www/us/en/docs/programmable/683525/21-3/linux-installation.html\n\n"
    },
    {
      "title": "Gray window",
      "level": 3,
      "content": "Some of the built-in editors in Quartus Prime such as IP editors and Tools > Platform Designer (aka Qsys) only show a blank window with Xmonad or Sway.\n\nSee Java#Gray window, applications not resizing with WM, menus immediately closing for the solutions.\n\n"
    },
    {
      "title": "USB-Blaster not working",
      "level": 3,
      "content": "Run jtagconfig and depending on the output:\n\n"
    },
    {
      "title": "No JTAG hardware available",
      "level": 4,
      "content": "If the device is listed by lsusb, restart jtagd as root [1]:\n\n```\n# killall -9 jtagd\n# jtagd\n```\n\n"
    },
    {
      "title": "JTAG chain broken",
      "level": 4,
      "content": "```\n1) USB-Blaster [3-2]\n  Unable to read device chain - JTAG chain broken\n```\n\nPerform the steps under the \"Linux\" section in https://ecen3350.rocks/static/usb-blaster.pdf[dead link 2024-07-30 ⓘ]. Note that the Arch Linux path to quartus/bin in step 3 should be as follows:\n\n```\n/opt/intelFPGA/PKGBUILD_mainver/quartus/bin\n```\n\nSteps 3 and 5 should also be performed with root privileges.\n\nAnother possible cause may be a missing 32-bit version of libudev.so [2][dead link 2024-12-15 ⓘ]. lib32-systemd provides this shared object, so make sure it is installed. (This should already be the case since it is a transitive dependency of quartus-free-quartusAUR.)\n\nIf the error still persists, try installing lib32-libudev0-shim.\n\n"
    },
    {
      "title": "Error when scanning hardware - Server error",
      "level": 4,
      "content": "```\nConnecting to server(s) [........          ]\nError when scanning hardware - Server error\n```\n\nA workaround is to edit /etc/jtagd.conf or ~/.jtagd.conf (depending on whether you want to run jtagd as root or as an unprivileged user) to include the following line:\n\n```\nPassword = \"changeme\";\n```\n\nAdd the server afterwards:\n\n```\n$ jtagconfig --addserver 127.0.0.1 changeme\n```\n\nIf problems still persist, try restarting jtagd:\n\n```\n# killall -9 jtagd\n$ jtagd\n```\n\n"
    },
    {
      "title": "Failure to access library 'work'",
      "level": 4,
      "content": "The following error may be encountered when running a simulation in a new directory:\n\n```\nError: (vcom-19) Failed to access library 'work' at \"work\".\n```\n\nThis can be resolved by creating the work directory from the ModelSim console [3]:\n\n```\nModelSim> vlib work\n```\n\n"
    },
    {
      "title": "Unreachable host",
      "level": 4,
      "content": "ModelSim may crash with the following error when trying to start a simulation:\n\n```\nError: couldn't open socket: host is unreachable\nTrouble making server.\n```\n\nThis can be resolved by adding hosts(5) entries for localhost as specified in Network configuration#Local network hostname resolution.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:Intel Quartus Prime\n- Intel FPGA Support Resources\n- Intel FPGA Software Installation and Licensing\n\n"
    }
  ]
}