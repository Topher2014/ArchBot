{
  "title": "Abuild",
  "url": "https://wiki.archlinux.org/title/Abuild",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "The abuild tooling provides necessary scripts to build and maintain Alpine Linux packages.\n\nIt can be used to maintain and build Alpine packages (in a clean chroot) from an Arch Linux system, without requiring to rely on a separate Alpine installation, such as a container or a VM.\n\nDue to technical differences between Alpine and Arch Linux (e.g. in terms of package manager, init system and C library implementation), building Alpine packages on an Arch system outside of an Alpine clean chroot is not possible. As such, when building Alpine packages on an Arch system, only abuild rootbld is relevant to use.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the abuild package.\n\nThe atools package provides additional tools like apkbuild-lint(1) and apkbuild-fixer(1) that may also be of interest (see #Usage).\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "abuild subcommands that are not about building packages should be usable right out of the box (e.g. generating / updating checksums, fetch sources, cleaning temporary directories, ... see the abuild(1) ยง COMMANDS).\n\nTo be able to build Alpine packages in a clean chroot, you need to generate a public / private rsa key pair with the abuild-keygen tool and add your user to the abuild user group (which is created when installing the abuild package):\n\n```\n$ abuild-keygen -a -i\n```\n\nOne can optionally edit the /etc/abuild.conf configuration file to their liking and requirements. For instance, the paths used to store downloaded sources (/var/cache/distfiles by default) and built packages (~/packages by default) can be customized by modifying the SRCDEST and REPODEST parameters respectively in that configuration file.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "A basic packaging workflow example using the abuild and atools tooling would start by creating a new port for a package and entering its directory:\n\n```\n$ newapkbuild package_name && cd package_name\n```\n\nThe next step would be editing the APKBUILD, then running the apkbuild linter (provided by the atools package):\n\n```\n$ apkbuild-lint APKBUILD\n```\n\nOne could then run the apkbuild fixer to attempt to automatically fix potential warnings raised by apkbuild-lint (provided by the atools package):\n\n```\n$ apkbuild-fixer APKBUILD\n```\n\nAfterwards, generate / upgrade checksum for the source(s) contained in the APKBUILD source array:\n\n```\n$ abuild checksum\n```\n\nFinally, build the package in an Alpine clean chroot:\n\n```\n$ abuild rootbld\n```\n\n"
    }
  ]
}