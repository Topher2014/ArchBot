{
  "title": "RandR12",
  "url": "https://wiki.archlinux.org/title/RandR12",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Xorg\n\nxrandr(1) is an official configuration utility to the RandR (Resize and Rotate) X Window System extension. It can be used to set the size, orientation or reflection of the outputs for a screen. For configuring multiple monitors see the Multihead page.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install xorg-xrandr.\n\n"
    },
    {
      "title": "Graphical front-ends",
      "level": 3,
      "content": "- ARandR — Simple visual front end for XRandR. Relative monitor positions are shown graphically and can be changed in a drag-and-drop way.\n\n- LXRandR — Screen resolution and monitor position tool for LXDE. Also works in Openbox.\n\n"
    },
    {
      "title": "CLI front-ends",
      "level": 3,
      "content": "- autorandr — Automatically select a display configuration based on connected devices.\n\n- xlayoutdisplay — Detects and arranges displays. Handles: laptop lid state, highest available refresh rates, calculating and applying the actual DPI. Best used in .xinitrc, then can be invoked when plugging/unplugging monitors or closing laptop lid.\n\n"
    },
    {
      "title": "Testing configuration",
      "level": 2,
      "content": "When run without any option, xrandr shows the names of different outputs available on the system (VGA-1, HDMI-1, etc.) and resolutions available on each, with a * after the current one and a + after the preferred one:\n\n```\nxrandr\n```\n\n```\nScreen 0: minimum 320 x 200, current 3200 x 1080, maximum 8192 x 8192\nVGA-1 disconnected (normal left inverted right x axis y axis)\nHDMI-1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 531mm x 299mm\n   1920x1080     59.93 +  60.00*   50.00    59.94  \n   1920x1080i    60.00    50.00    59.94  \n   1680x1050     59.88  \n…\n```\n\nYou can use xrandr to set different resolution (must be present in the above list) on some output:\n\n```\n$ xrandr --output HDMI-1 --mode 1920x1080\n```\n\nWhen multiple refresh rates are present in the list, it may be changed by the --rate option, either at the same time or independently. For example:\n\n```\n$ xrandr --output HDMI-1 --mode 1920x1080 --rate 60\n```\n\nThe --auto option will turn the specified output on if it is off and set the preferred (maximum) resolution:\n\n```\n$ xrandr --output HDMI-1 --auto\n```\n\nIt is possible to specify multiple outputs in one command, e.g. to turn off HDMI-1 and turn on HDMI-2 with preferred resolution:\n\n```\n$ xrandr --output HDMI-1 --off --output HDMI-2 --auto\n```\n\n- Changes you make using xrandr will only last through the current session.\n- xrandr has a lot more capabilities - see xrandr(1) for details.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "xrandr is just a simple interface to the RandR extension and has no configuration file. However, there are multiple ways of achieving persistent configuration:\n\n1. The RandR extension can be configured via X configuration files, see Multihead#RandR for details. This method provides only static configuration.\n1. If you need dynamic configuration, you need to execute xrandr commands each time X server starts. See Autostarting#On Xorg startup for details. This method has the disadvantage of occurring fairly late in the startup process, thus it will not alter the resolution of the display manager if you use one.\n1. Custom scripts calling xrandr can be bound to events (for example when external monitor is plugged in), see udev or acpid for details. The #Scripts section provides you with some example scripts that might be useful for this purpose.\n\n"
    },
    {
      "title": "Toggle external monitor",
      "level": 4,
      "content": "This script toggles between an external monitor (specified by $extern) and a default monitor (specified by $intern), so that only one monitor is active at a time.\n\nThe default monitor should be connected when running the script, which is always true for a laptop.\n\n```\n#!/bin/sh\nintern=LVDS1\nextern=VGA1\n\nif xrandr | grep \"$extern disconnected\"; then\n    xrandr --output \"$extern\" --off --output \"$intern\" --auto\nelse\n    xrandr --output \"$intern\" --off --output \"$extern\" --auto\nfi\n```\n\n"
    },
    {
      "title": "Manage 2-monitors",
      "level": 4,
      "content": "monsAUR is a POSIX-compliant shell script to quickly manage 2-monitor displays.\n\nIt provides well-known modes like computer, duplicate, extend and projector mode as well as selecting and positioning one or two monitors among those plugged in (for more details, see mons).\n\n"
    },
    {
      "title": "Avoid X crash with xrasengan",
      "level": 4,
      "content": "Use this workaround to turn on connected outputs that may be in suspend mode and hence shown as disconnected, as is often the case of DisplayPort monitors:\n\n```\ndeclare -i count=2\ndeclare -i seconds=1\n\nwhile ((count)); do\n    xrandr >/dev/null\n    sleep $seconds\n    ((count--))\ndone\n```\n\nxrasenganAUR is an xrandr wrapper with this workaround built in.\n\n```\n$ xrasengan --force -on DisplayPort-0 -off HDMI-0\n```\n\nWith the --force option, xrasengan will update status of all outputs before HDMI-0 is turned off, avoiding an X crash if they were the only connected/active outputs.\n\nTo force reload current settings, xrasengan provides a --try-reload-active-layout option, which uses --force and unxrandr from the arandr package to assemble the command line:\n\n```\n$ xrasengan --try-reload-active-layout\n```\n\nThis can be used in systemd unit or in a keyboard binding to avoid blank screen when resuming DisplayPort monitors from suspend.\n\n"
    },
    {
      "title": "Configuration using arandr",
      "level": 3,
      "content": "arandr can graphically arrange your monitors, change resolutions, and save a script to duplicate your setup. By default, if you \"Save As\" it will be saved in ~/.screenlayout/. These files can then be autostarted. Sometimes problems arise from running the arandr script too soon after login, add a sleep command if needed.\n\n"
    },
    {
      "title": "Screen blinking",
      "level": 3,
      "content": "For some LCD screens (e.g. Samsung 2343NW, Acer XB280HK and Iiyama ProLite XUB3490WQSU-B1) the command cvt -r can be used to calculate standardized modelines with reduced blanking, allowing for higher frequency signals.\n\nFor example: an external monitor ProLite XUB3490WQSU-B1 connected to a Dell laptop through a Thunderbolt-HDMI 2.0 adapter, using 59.97Hz refresh rate with a blinking problem:\n\nCalculating the reduced modelines for the desired resolution 3440x1440 gives:\n\n```\ncvt -r 3440 1440\n```\n\n```\n# 3440x1440 59.97 Hz (CVT) hsync: 88.82 kHz; pclk: 319.75 MHz\nModeline \"3440x1440R\"  319.75  3440 3488 3520 3600  1440 1443 1453 1481 +hsync -vsync\n```\n\nWith this information we can use xrandr to create a new mode:\n\n```\n$ xrandr --newmode \"3440x1440R\"  319.75  3440 3488 3520 3600  1440 1443 1453 1481 +hsync -vsync\n```\n\nAnd add it to the set of valid modes for the corresponding output to make it selectable:\n\n```\n$ xrandr --addmode DP1 3440x1440R\n```\n\n"
    },
    {
      "title": "Adding undetected resolutions",
      "level": 3,
      "content": "Due to buggy hardware or drivers, your monitor's correct resolutions may not always be detected by xrandr. For example, the EDID data block queried from the monitor may be incorrect. To fix this at a low level, see Kernel mode setting#Forcing modes and EDID. This section will describe how to address this at a higher level by adding the desired resolutions to xrandr. This same procedure can be used to add refresh rates you know are supported, but not enabled by your driver.\n\nFirst we run gtf or cvt to get the Modeline for the resolution we want:\n\n```\n$ cvt 1280 1024\n```\n\n```\n# 1280x1024 59.89 Hz (CVT 1.31M4) hsync: 63.67 kHz; pclk: 109.00 MHz\nModeline \"1280x1024_60.00\"  109.00  1280 1368 1496 1712  1024 1027 1034 1063 -hsync +vsync\n```\n\n- If you find that the screen goes blank when the modeline is applied, try lower refresh rate (e.g. 30 or 45 instead of 60). The refresh rate should be passed as the third argument: cvt 2560 1440 45.\n\nNote: An example for the AMDGPU video driver (xf86-video-amdgpu):\n\n```\n[    45.063] (II) intel(0): clock: 241.5 MHz   Image Size:  597 x 336 mm\n[    45.063] (II) intel(0): h_active: 2560  h_sync: 2600  h_sync_end 2632 h_blank_end 2720 h_border: 0\n[    45.063] (II) intel(0): v_active: 1440  v_sync: 1443  v_sync_end 1448 v_blanking: 1481 v_border: 0\n```\n\n```\n$ xrandr --newmode \"2560x1440\" 241.50 2560 2600 2632 2720 1440 1443 1448 1481 -hsync +vsync\n```\n\nAn example for the AMDGPU video driver (xf86-video-amdgpu):\n\n```\n[    95.798] (II) AMDGPU(0): Printing DDC gathered Modelines:\n[    95.798] (II) AMDGPU(0): Modeline \"1920x1080\"x0.0  148.50  1920 2008 2052 2200  1080 1084 1089 1125 +hsync +vsync (67.5 kHz eP)\n```\n\n```\n$ xrandr --newmode \"1920x1080\"x0.0  148.50  1920 2008 2052 2200  1080 1084 1089 1125 +hsync +vsync\n```\n\nThen we create a new xrandr mode. Note that the Modeline keyword needs to be omitted.\n\n```\n$ xrandr --newmode \"1280x1024_60.00\"  109.00  1280 1368 1496 1712  1024 1027 1034 1063 -hsync +vsync\n```\n\nAfter creating it we need an extra step to add this new mode to our current output (VGA1). We use just the name of the mode, since the parameters have been set previously.\n\n```\n$ xrandr --addmode VGA1 1280x1024_60.00\n```\n\nNow we change the resolution of the screen to the one we just added:\n\n```\n$ xrandr --output VGA1 --mode 1280x1024_60.00\n```\n\nNote that these settings only take effect during this session. See Autostarting#On Xorg startup for a way to automatically apply them on startup.\n\nIf you are not sure about the resolution you will test, you may add a sleep 5 and a safe resolution command line following, like this:\n\n```\n$ xrandr --output VGA1 --mode 1280x1024_60.00 && sleep 5 && xrandr --newmode \"1024x768-safe\" 65.00 1024 1048 1184 1344 768 771 777 806 -HSync -VSync && xrandr --addmode VGA1 1024x768-safe && xrandr --output VGA1 --mode 1024x768-safe\n```\n\nAlso, change VGA1 to correct output name.\n\n"
    },
    {
      "title": "EDID checksum is invalid",
      "level": 4,
      "content": "If the previous method results in an *ERROR* EDID checksum is invalid error during boot, see KMS#Forcing modes and EDID and [2].\n\nOr xrandr --addmode might give you the error X Error of failed request: BadMatch. NVIDIA users should read NVIDIA/Troubleshooting#xrandr BadMatch. BadMatch could indicate an invalid EDID checksum. To verify that this is the case, run X in verbose mode (e.g. startx -- -logverbose 6) and check your Xorg log for messages about a bad EDID.\n\n"
    },
    {
      "title": "Screen resolution reverts back after a blink",
      "level": 4,
      "content": "If you use GNOME and your monitor does not have an EDID, above #Adding undetected resolutions might not work, with your screen just blinking once, after xrandr --output.\n\nPoke around with ~/.config/monitors.xml, or delete the file completely, and then reboot.\n\nIt is better explained in this article.\n\n"
    },
    {
      "title": "Permanently adding undetected resolutions",
      "level": 3,
      "content": "Once a suitable resolution is found using xrandr, the mode can be permanently added by creating an entry in /etc/X11/xorg.conf.d/:\n\n```\n/etc/X11/xorg.conf.d/10-monitor.conf\n```\n\n```\nSection \"Monitor\"\n    Identifier \"VGA1\"\n    Modeline \"1280x1024_60.00\"  109.00  1280 1368 1496 1712  1024 1027 1034 1063 -hsync +vsync\n    Option \"PreferredMode\" \"1280x1024_60.00\"\nEndSection\n\nSection \"Screen\"\n    Identifier \"Screen0\"\n    Monitor \"VGA1\"\n    DefaultDepth 24\n    SubSection \"Display\"\n        Modes \"1280x1024_60.00\"\n    EndSubSection\nEndSection\n\nSection \"Device\"\n    Identifier \"Device0\"\n    Driver \"intel\"\nEndSection\n```\n\nReplace intel with the right driver, e.g. nvidia. When the X server is restarted, you should be able to set the new resolution.\n\nIf this does not work for you, try removing the Screen and Device sections and just leaving the Monitor section. [3]\n\n"
    },
    {
      "title": "Resolution lower than expected",
      "level": 3,
      "content": "If your video card is recognized but the resolution is lower than you expect, you may try this.\n\nBackground: ATI X1550 based video card and two LCD monitors DELL 2408(up to 1920x1200) and Samsung 206BW(up to 1680x1050). Upon first login after installation, the resolution default to 1152x864. xrandr does not list any resolution higher than 1152x864. You may want to try editing /etc/X11/xorg.conf, add a section about virtual screen, logout, login and see if this helps. If not then read on.\n\nChange xorg.conf\n\n```\n/etc/X11/xorg.conf\n```\n\n```\nSection \"Screen\"\n        ...\n        SubSection \"Display\"\n                Virtual 3600 1200\n        EndSubSection\nEndSection\n```\n\nAbout the numbers: DELL on the left and Samsung on the right. So the virtual width is of sum of both LCD width 3600=1920+1680; Height then is figured as the max of them, which is max(1200,1050)=1200. If you put one LCD above the other, use this calculation instead: (max(width1, width2), height1+height2).\n\n"
    },
    {
      "title": "Setting resolution from .xinitrc doesn't work",
      "level": 3,
      "content": "DDX drivers other than that of the modesetting(4) driver may take time to properly enumerate the modes of attached devices, to where xrandr may not work right away. This seems to be the case for the xf86-video-intel driver, with which using xrandr early in the startup sets the incorrect resolution. Possible remedies include:\n\n- Waiting for a couple of seconds before invoking xrandr:\n\n```\n~/.xinitrc\n```\n\n```\n...\n{ sleep 2; xrandr xrandr_parameters } &\n...\n```\n\nThis does the waiting in the background, as to not block the rest of the startup. If this not desirable, e.g. your window manager configuration depends on the display being arranged correctly, you can execute the commands in the foreground:\n\n```\n~/.xinitrc\n```\n\n```\n...\nsleep 2\nxrandr xrandr_parameters\n...\n```\n\n- Setting the mode in a later part of the desktop startup. Refer to your window manager documentation for details on startup script functionality.\n- Switching to the generic modesetting driver. This is most easily done by uninstalling the device specific DDX driver. In the case of xf86-video-intel, the driver has other deficiencies that may benefit from this; see Intel graphics#Installation for more information.\n\n"
    },
    {
      "title": "Correction of overscan tv resolutions via the underscan property",
      "level": 3,
      "content": "With a flat panel TV, w:overscan looks like the picture is \"zoomed in\" so the edges are cut off.\n\nCheck your TV if there is a parameter to change. If not check if the output has support for the underscan property (xrandr --prop), if so apply an underscan and change border values. The required underscan vborder and underscan hborder values can be different for you, just check it and change it by more or less.\n\n```\n$ xrandr --output HDMI-0 --set underscan on --set \"underscan vborder\" 25 --set \"underscan hborder\" 40\n```\n\n"
    },
    {
      "title": "Correction of overscan tv resolutions via --transform",
      "level": 3,
      "content": "If underscan is not available another solution is using xrandr --transform a,b,c,d,e,f,g,h,i, which applies a transformation matrix on the output. See the xrandr(1) § RandR_version_1.3_options manual page for the explanation of the transformation.\n\nFor example, the transformation scaling horizontal coordinates by 0.8, vertical coordinates by 1.04 and moving the screen by 35 pixels right and 19 pixels down, is:\n\n```\n$ xrandr --output HDMI1 --transform 0.80,0,-35,0,1.04,-19,0,0,1\n```\n\n"
    },
    {
      "title": "Disabling phantom monitor",
      "level": 3,
      "content": "In some cases, a non-existent monitor may be detected by the system. To disable it, find the name of the phantom output, e.g. VGA1, and turn it off with\n\n```\n$ xrandr --output VGA1 --off\n```\n\nTo make this permanent, add the following to an entry in /etc/X11/xorg.conf.d/:\n\n```\n/etc/X11/xorg.conf.d/10-monitor.conf\n```\n\n```\nSection \"Monitor\"\n    Identifier \"VGA1\"\n    Option \"Ignore\" \"true\"\nEndSection\n```\n\n"
    },
    {
      "title": "Dynamic interlace pattern artifacts with AOC G2590PX",
      "level": 3,
      "content": "If you are seeing very prominent interlace pattern artifacts (mesh or grid) when you see movement on the screen with this monitor, it might be happening because of a low refresh rate. Switching to a higher refresh rate (from 60 Hz to 119.98 Hz and perhaps even higher) might help reduce the effect.\n\nSample xrandr output for this monitor over HDMI:\n\n```\nHDMI-1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 544mm x 303mm\n   1920x1080     60.00 + 119.98*   99.93    50.00    59.94\n```\n\nAs can be seen in the output above, the preferred refresh rate reported by xrandr is 60.00, but the artifacts are very visible with this refresh rate. Switching to 119.98 should help reduce the effect considerably.\n\n```\n$ xrandr --output HDMI-1 --mode 1920x1080 --rate 119.98\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- https://wiki.ubuntu.com/X/Config/Resolution\n- Debian Wiki - RandR 1.2 tutorial\n- Xorg RandR 1.2 on ThinkWiki\n- FAQVideoModes - more information about modelines\n\n"
    }
  ]
}