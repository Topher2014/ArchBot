{
  "title": "TPM",
  "url": "https://wiki.archlinux.org/title/TPM",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Self-encrypting drives\n- Smartcards\n- Trusted Platform Module/1.2\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nTrusted Platform Module (TPM) is an international standard for a secure cryptoprocessor, which is a dedicated microprocessor designed to secure hardware by integrating cryptographic keys into devices.\n\nIn practice a TPM can be used for various different security applications such as secure boot, key storage and random number generation.\n\nTPM is naturally supported only on devices that have TPM hardware support. If your hardware has TPM support but it is not showing up, it might need to be enabled in the BIOS settings.\n\nNote: **This article only describes TPM 2.0** \n\n"
    },
    {
      "title": "Checking TPM support",
      "level": 2,
      "content": "Most modern computers support TPM 2.0, as it has been required for Windows 10 certification since 2016. To check support on your system, use any of the following methods:\n\n- check the logs, e.g., by running journalctl -k --grep=tpm as root\n- read the value of /sys/class/tpm/tpm0/device/description[1], /sys/class/tpm/tpm0/device/firmware_node/description, or /sys/class/tpm/tpm0/tpm_version_major:\n\n```\n$ cat /sys/class/tpm/tpm0/device/description\nTPM 2.0 Device\n```\n\n- use systemd-analyze(1) to check for TPM 2.0 and the necessary software dependencies: $ systemd-analyze has-tpm2\n\n```\n$ systemd-analyze has-tpm2\n```\n\nTPM 2.0 allows direct access via /dev/tpm0 (one client at a time), kernel-managed access via /dev/tpmrm0, or managed access through the tpm2-abrmd resource manager daemon. According to a systemd project member, using tpm2-abrmd is no longer recommended. There are two choices of userspace tools, tpm2-tools by Intel and ibm-tssAUR by IBM.\n\nTPM 2.0 requires UEFI boot; BIOS or Legacy boot systems can only use TPM 1.2.\n\nSome TPM chips can be switched between 2.0 and 1.2 through a firmware upgrade (which can be done only a limited number of times).\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Many informative resources to learn how to configure and make use of TPM 2.0 services in daily applications are available from the tpm2-software community.\n\n"
    },
    {
      "title": "LUKS encryption",
      "level": 3,
      "content": "It is possible to encrypt volumes using keys securely stored in the TPM. This approach ensures that your drives remain locked unless the TPM is present and specific conditions are met, such as the integrity of the firmware or Secure Boot state (see #Accessing PCR registers).\n\nThis mechanism can be used to automatically decrypt the root volume during the boot process, similarly to how BitLocker works on Windows or FileVault on macOS. While this provides strong protection if the drive is removed from the computer with the TPM, data protection will only rely on basic measures like user passwords and system settings if the entire PC is stolen. To mitigate this, you can:\n\n- Consider encrypting user data, such as individual home folders, with a different mechanism, such as fscrypt or systemd-homed.\n- Use a TPM pin to benefit from the security properties of the TPM, while avoiding completely unattended unlocking.\n\nsystemd-cryptenroll and Clevis allow locking LUKS volumes with a key stored in the TPM. Additionally, systemd-cryptenroll enables tying the encryption to signed policies instead of static PCR values (See systemd-cryptenroll(1)).\n\n"
    },
    {
      "title": "SSH",
      "level": 3,
      "content": "For TPM sealed SSH keys, there are two options:\n\n- ssh-tpm-agent — ssh-agent compatible agent using TPM backed keys.\n\n- tpm2-pkcs11 — PKCS#11 interface for Trusted Platform Module 2.0 hardware.\n\n"
    },
    {
      "title": "GnuPG",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nGnuPG, since version 2.3, supports moving compatible keys into the TPM. See Using a TPM with GnuPG 2.3 for the instructions.\n\n"
    },
    {
      "title": "Other good examples of TPM 2.0 usage",
      "level": 3,
      "content": "- Configuring Secure Boot + TPM 2 (2018-06, Debian)\n- Using the TPM - It's Not Rocket Science (Anymore) - Johannes Holland & Peter Huewe (2020-11, Youtube): examples for OpenSSL with tpm2-tss-engine\n\n"
    },
    {
      "title": "Accessing PCR registers",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nPlatform Configuration Registers (PCR) allow binding of the encryption of secrets to specific software versions and system state via hashes, so that the enrolled key is only accessible (may be \"unsealed\") if specific trusted software and/or configuration is used.\n\nPCRs are intended to be used for platform hardware and software integrity verification between boots (e.g. protection against Evil Maid attack).\n\nThe TCG PC Client Specific Platform Firmware Profile Specification defines the registers in use, and The Linux TPM PCR Registry assigns Linux system components using them.\n\nThe registers are:\n\nTable content:\nPCR | Description | Extended by\nPCR0 | Core System Firmware executable code (aka Firmware). May change if you upgrade your UEFI. | Firmware\nPCR1 | Core System Firmware data (aka UEFI settings) | Firmware\nPCR2 | Extended or pluggable executable code (aka OpROMs) | Firmware\nPCR3 | Extended or pluggable firmware data. Set during Boot Device Select UEFI boot phase. | Firmware\nPCR4 | Boot Manager Code and Boot Attempts. Measures the boot manager and the devices that the firmware tried to boot from. | Firmware\nPCR5 | Boot Manager Configuration and Data. Can measure configuration of boot loaders; includes the GPT Partition Table. | Firmware\nPCR6 | Resume from S4 and S5 Power State Events | Firmware\nPCR7 | Secure Boot State. Contains the full contents of PK/KEK/db, as well as the specific certificates used to validate each boot application[2] | Firmware, shim (adds MokList, MokListX, and MokSBState)\nPCR81 | Hash of the kernel command line | GRUB\nPCR91 | Hash of the initrd and EFI Load Options | Linux (measures the initrd and EFI Load Options, essentially the kernel cmdline options)\nPCR101 | Reserved for Future Use | \nPCR111 | Hash of the Unified kernel image | systemd-stub(7)\nPCR121 | Overridden kernel command line, Credentials | systemd-stub(7)\nPCR131 | System Extensions | systemd-stub(7)\nPCR141 | shim's MokList, MokListX, and MokSBState.[3] | shim\nPCR151 | Hash of the LUKS volume key | systemd-cryptsetup\nPCR161 | Debug. May be used and reset at any time. May be absent from an official firmware release. | \nPCR23 | Application Support. The OS can set and reset this PCR. | \n\n1. Use case defined by the OS and might change between various Linux distros and Windows devices.\n\nOn Windows, BitLocker uses PCR8-11 (Legacy) or PCR11-14 (UEFI) for its own purposes. Documentation from tianocore[4].\n\ntpm2-totp facilitates this check with a human observer and dedicated trusted device.\n\nThe current PCR values can be listed with systemd-analyze(1):\n\n```\n$ systemd-analyze pcrs\n```\n\nOr, alternatively with tpm2_pcrread(1) from tpm2-tools:\n\n```\n# tpm2_pcrread\n```\n\n"
    },
    {
      "title": "TPM2 LUKS2 unlocking still asking for password",
      "level": 3,
      "content": "If you followed the instruction described above for automatically unlocking luks2 devices with enrolled keys in a TPM2 hardware module, but still receive a prompt to input a password during the initramfs boot stage. You may need to early load the kernel module (you can obtain its name with systemd-cryptenroll --tpm2-device=list) that is responsible for handling your specific TPM2 module.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Gentoo:Trusted Platform Module\n- TPM-JS testing tool: source - live web version.\n\n"
    }
  ]
}