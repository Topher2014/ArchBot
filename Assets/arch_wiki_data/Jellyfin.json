{
  "title": "Jellyfin",
  "url": "https://wiki.archlinux.org/title/Jellyfin",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Jellyfin is a free and open-source multimedia application suite designed to organize, manage, and share digital media files to networked devices.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "There are a few options for installation:\n\n- jellyfin-server — main server backend\n- jellyfin-web — required to host the web frontend. Alternatively, add hostwebclient=false to your configuration.\n- jellyfin-gitAUR — compile from latest commit\n\nStart/enable the jellyfin.service systemd unit. Upon starting for the first time, Jellyfin will create configuration and data directories at /var/lib/jellyfin/ by default.\n\nTo begin configuring Jellyfin, browse to http://localhost:8096/ and complete the initial wizard. This is only possible if jellyfin-web was installed.\n\n"
    },
    {
      "title": "Nginx reverse proxy",
      "level": 3,
      "content": "The below configuration describes a Nginx reverse proxy with a sample certificate. Be sure to modify the template to suit your own circumstances. See upstream documentation for more reverse proxy configuration examples.\n\n```\n/etc/nginx/sites-available/domain.com.conf\n```\n\n```\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name DOMAIN_NAME;\n\n    # use a variable to store the upstream proxy\n    # in this example we are using a hostname which is resolved via DNS\n    # (if you are not using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)\n    set $jellyfin jellyfin;\n    resolver 127.0.0.1 valid=30;\n\n    ssl_certificate /etc/letsencrypt/live/DOMAIN_NAME/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/DOMAIN_NAME/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n    add_header Strict-Transport-Security \"max-age=31536000\" always;\n    ssl_trusted_certificate /etc/letsencrypt/live/DOMAIN_NAME/chain.pem;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    # Security / XSS Mitigation Headers\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Content-Type-Options \"nosniff\";\n\n    # Content Security Policy\n    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\n    # Enforces https content and restricts JS/CSS to origin\n    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.\n    #add_header Content-Security-Policy \"default-src https: data: blob: http://image.tmdb.org; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'\";\n\n    location = / {\n        return 302 https://$host/web/;\n    }\n\n    location / {\n        # Proxy main Jellyfin traffic\n        proxy_pass http://$jellyfin:8096;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Protocol $scheme;\n        proxy_set_header X-Forwarded-Host $http_host;\n\n        # Disable buffering when the nginx proxy gets very resource heavy upon streaming\n        proxy_buffering off;\n    }\n\n    # location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/\n    location = /web/ {\n        # Proxy main Jellyfin traffic\n        proxy_pass http://$jellyfin:8096/web/index.html;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Protocol $scheme;\n        proxy_set_header X-Forwarded-Host $http_host;\n    }\n\n    location /socket {\n        # Proxy Jellyfin Websockets traffic\n        proxy_pass http://$jellyfin:8096;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Protocol $scheme;\n        proxy_set_header X-Forwarded-Host $http_host;\n    }\n}\n```\n\n"
    },
    {
      "title": "CSS customization",
      "level": 3,
      "content": "Server administrators can modify Jellyfin's appearance via the custom CSS field on the web dashboard. Many sources offer portable blocks of CSS to change server typography, colors, and layout. Some examples include Ultrachromic and upstream documentation.\n\n"
    },
    {
      "title": "Plugins",
      "level": 3,
      "content": "Jellyfin features many community-developed plugins that can be installed from the web dashboard. By default, plugins will automatically update.\n\n"
    },
    {
      "title": "File permission",
      "level": 3,
      "content": "Jellyfin runs as user jellyfin, which has no permission for your home directory. If you add a directory inside your home directory to a library, Jellyfin fails to access it. You can create a dedicated directory for Jellyfin.\n\n```\n# mkdir /media\n```\n\nYou may want to change the owner of the directory to your current user for easier management.\n\n```\n# chown $USER: /media\n```\n\n"
    },
    {
      "title": "Intel Quick Sync Video (QSV) accelerated hardware transcoding",
      "level": 3,
      "content": "The optional dependency vpl-gpu-rt or vpl-gpu-rt-gitAUR must be installed for this to work with the custom jellyfin-ffmpeg binary.\n\nSee the official guide for more details.\n\n"
    },
    {
      "title": "Clients",
      "level": 2,
      "content": "In addition to the web interface, there are alternative desktop clients available.\n\n- Jellyfin Media Player — Power desktop client which uses jellyfin-web and an embedded MPV player for maximum codec compatibility\n\n- Jellyfin MPV Shim — Cast client for Jellyfin\n\n- jftui — Command-line client that interfaces with MPV\n\n- delfin — Stream movies and TV shows from Jellyfin\n\n"
    },
    {
      "title": "Jellyfin does not detect folder or external drive",
      "level": 3,
      "content": "In order for Jellyfin to see folders, it needs to be given read and execute permissions. This is due to Jellyfin being run as the user \"jellyfin\" instead of your user. As such, it will not have access to your /home/ folder by default. The best practice is to put the media into a folder in the root folder (e.g. /jellyfinmedia/) or on an external drive. Then you have to give it read and execute permissions via the code below or by setting it via a file explorer.\n\n```\n# chmod -R 775 path/to/media/folder\n```\n\nIf not set already, set the owner/group to your username.\n\n```\n# chown yourusername:yourusername /mediafolder\n```\n\nIf you haven't explicitly set up a mounting configuration for your drives, your desktop environment (e.g. GNOME or KDE) might automatically mount it when you try accessing it via their file explorers. Jellyfin won't be able to access the drive. This is because the desktop environment mounts it to your user (via FUSE), while Jellyfin uses by default the \"Jellyfin\" user.\n\nYou will need to manually mount the drives for Jellyfin to see them by setting the mount point. See Fstab for more details. You can also use a program such as KDE Partition Manager or GNOME Disks to set the partition's mount point. Be sure to give the external drive the correct user permissions.\n\n"
    },
    {
      "title": "Playback issues",
      "level": 3,
      "content": "Jellyfin sometimes fails to play back specific media files. Most media files should be compatible with Jellyfin as it automatically detects the media format and transcodes (using ffmpeg) to a format the client can handle. However, this is a complicated process that can fail in various ways. This is made more complicated by the fact that specific Jellyfin plugins use different methods for handling the transcoding process. Hence, the troubleshooting tips are provided below with reference to specific plugins / clients. However, these issues may show up in different Jellyfin clients or with different Jellyfin plugins.\n\n- When using the TVHeadend Jellyfin plugin, recording playback works fine, but viewing live TV fails with an unsupported format error on the client. Check the Dashboard > Playback > Transcode Path configuration. Be sure that there is no trailing slash in the path. For example /var/transcode is fine, but /var/transcode/ is not. This might be fixed in the future. See the issue: https://github.com/jellyfin/jellyfin/issues/10299\n- When using the Jellyfin web client, playback of some media files fails randomly. Check that User > Settings > Playback > Maximum Allowed Audio Channels is set to \"Stereo\". Some browsers do not support 6-channel audio and sometimes some recorded TV broadcasts contain 6-channel audio, causing the web client to fail to playback otherwise valid recordings. Forcing stereo audio should fix this. See this related bug report with some tools shown on how to check the number of audio channels in a video: https://github.com/Dash-Industry-Forum/dash.js/issues/2864.\n\n"
    },
    {
      "title": "Web interface redirects to setup wizard after update",
      "level": 3,
      "content": "Some users report that after an update, the web UI does not allow them to log in, and instead shows them the initial setup wizard. To fix this, ensure that in /etc/jellyfin/system.xml the value of isStartupWizardCompleted is set to true.\n\n"
    },
    {
      "title": "Transcoding is extremely slow with Intel DG2 hardware decode/encode",
      "level": 3,
      "content": "If transcoding has become extremely slow (less than 5 frames/second) and you are using an Intel DG2/Alchemist GPU for hardware decoding/encoding, ensure you are using the i915 kernel driver and not the xe kernel driver.\n\nSee this ticket on the xe module issue tracker for more information: https://gitlab.freedesktop.org/drm/xe/kernel/-/issues/234\n\nTo disable the xe driver, create a file in /etc/modprobe.d:\n\n```\n/etc/modprobe.d/disable-intel-xe.conf\n```\n\n```\ninstall xe /bin/true\n```\n\nYou will need to reboot after creating the file.\n\n"
    },
    {
      "title": "Hardening",
      "level": 2,
      "content": "Just like any other service, Jellyfin can be hardened by modifying its systemd unit. Hardening is also called sandboxing in the literature. The following sandboxing options are an effective way to limit the exposure of the system towards the unit's processes.\n\nCreate the following drop-in file:\n\n```\n/etc/systemd/system/jellyfin.service.d/harden.conf\n```\n\n```\n[Service]\nPrivateTmp = true\nProtectSystem = strict\nProtectHome = true\nProtectKernelTunables = true\nReadWritePaths=/etc/jellyfin /var/cache/jellyfin /var/lib/jellyfin /var/log/jellyfin\nReadOnlyPaths = /mnt/mymovies\nInaccessiblePaths = /mnt/mybackup\n```\n\nThis will allow Jellyfin to only write to /etc/jellyfin, /var/cache/jellyfin, /var/lib/jellyfin, /var/log/jellyfin and restrict writing to the rest of the file system. It will also deny access to the entire /home and limit access to /etc. This also restrict any access to /mnt/mybackup. Multiple paths can be specified for this option.\n\nMore details on the systemd sandboxing options can be found at systemd.exec(5) § SANDBOXING.\n\n"
    }
  ]
}