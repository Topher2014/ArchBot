{
  "title": "Sort images by resolution",
  "url": "https://wiki.archlinux.org/title/Sort_images_by_resolution",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- File recovery\n- File recovery/Post recovery tasks\n\nWhen recovery of files done and you restored images with help of a post recovery tasks script then it could be wise to sort images by the resolution. This will help to sort the photos you made, webcam images or any other images into the folders by the resolutions, most of them are often using the same related image resolutions.\n\n"
    },
    {
      "title": "Collect info about images",
      "level": 2,
      "content": "```\ncollect-info-about-images.sh\n```\n\n```\n#!/bin/bash\nif [ 'XX' != 'XX'\"$1\" ]; then \n if [ -f \"$1\"  ]; then\n# mime part start\n  IsIt=$(file \"$1\" --mime-type -b);\n  NeedImageOnly=\"ItIs_\"${IsIt/'/'*/}\n   if [ \"$NeedImageOnly\" == \"ItIs_image\" ] ; then\n# mime part end\nImageInfoFEH=($(feh -l \"$1\"))\nIfDamaged=${?}\nImageType=${ImageInfoFEH[9]}\n   Height=${ImageInfoFEH[11]}\n    Width=${ImageInfoFEH[10]}\n   if [ \"$IfDamaged\" != '0'  ]; then \n    echo \"$1\" \"Damaged\" \"${IfDamaged}\";\n   fi;\n    echo \"$1\"'|'W'|'$Width'|'H'|'$Height'|'Format'|'$ImageType'|'Errors'|'$IfDamaged'|' >> collect-info-about-images.txt\n# mime part start\n  fi\n# mime part end\n   else\n    echo The « \"$1\" » is not a valid file name.\n  fi\n else\n  ScriptsName=${0##*/}\n   find -type f -exec sh -e \"./$ScriptsName\" \"{}\" \\;\n  #find -type f  -name \"*.jpg\" -o -name \"*.gif\" -o -name \"*.png\" -exec sh -e \"./$ScriptsName\" \"{}\" \\;\nfi\n```\n\nThe $IfDamaged variable contains an exit status code returned by feh.\n\n- The feh program ignores some of errors, pixel data errors, in an image if it contains enough of a readable visual data to be shown.\n- A pixel error makes that a part of an image or a whole image cannot be shown correctly, it causes wrong colors or blank/empty spaces that often makes the image more or less useless, mostly depends on the amount of a corrupted data in it.\n\nYou can also install pngcheckAUR to check integrity of \"PNG, JNG or MNG\" and/or jpeginfoAUR and use output of errors in the $IfDamaged variable or modify script to skip adding of damaged files into a collect-info-about-images.txt file.\n\nExample of pngcheckAUR check resuslt:\n\n```\n./f939799496.png  invalid IDAT row-filter type (11)\n./f939799496.png  private (invalid?) IDAT row-filter type (236) (warning)\n./f939799496.png  private (invalid?) IDAT row-filter type (231) (warning)\n./f939799496.png  invalid IDAT row-filter type (49)\n./f939799496.png  zlib: inflate error = -3 (data error)\nERROR: ./f939799496.png\nOK: ./f218842888.png (532x552, 32-bit RGB+alpha, non-interlaced, 95.8%).\n```\n\nExample of jpeginfoAUR check result:\n\n```\nf62152912.jpg 5678 x 2829 24bit Exif  N 11625509  Corrupt JPEG data: 1074 extraneous bytes before marker 0xd9  [WARNING]\nf124619744.jpg  144 x 119  24bit JFIF  N    5813  [OK]\n```\n\nTo extract necessary data from a string in a script is better to use an expression instead of an extern program as sed or gawk to make a script work a little faster, e.g.\n\n```\nAA=\"$(jpeginfo -c f62152912.jpg)\";\nZZ=\"${AA/*' [OK]'/}\"; \n\nif [ 'XX'\"$ZZ\" == 'XX' ]; then \n  echo File is good'!!!';\nfi\n```\n\nThe collect-info-about-images.sh script generates data about images by pattern:\n\n```\nfull path to image|Width|size|Height|size|Format|type of image|Errors|exit code by feh|\n```\n\nExample: Images/f269351998.bmp|W|40|H|39|Format|bmp|Errors|0|\n\n"
    },
    {
      "title": "Sort images by resolution",
      "level": 2,
      "content": "This script creates folders based on the resolution. You can set your limitations about how many files should be in each folder and how many sub-directories in a base file type named folder. When limit is reached a new number in the order will be added to a directory name for creation. If you have a really huge amount of files and do not want to overload a single folder with all of them then you can also add your own counters for a new sub-folders after the base destination variable IfExist=\"${Destination}/, just look out for quotes \" to be in the begin and end of a whole destination path. It use to be much more easier to browse folders with a limited amount of images, thumbnails loads much faster and to remember or add to favorite a folder number/name instead of trying to find once more same image in an overloaded folder out of probably thousand images there.\n\n- Those script are only examples and you must modify them for your needs before using, be careful!\n- Remove the echo command only after you confirmed that path are created correctly and no problems with reading variables out of a source file, specially in case if you added your own options into the collect-info-about-images.sh file to gather, store and use even more information about images.\n\n- You must remove echo command in front of mkdir and mv.\n- Any output on screen slows script down, to make it even faster then disable verbose output for mv and cp by removing -v option.\n- To monitor that script is running you can use a CPU monitor utility and list folders in the destination directory. Or add echo command only in those script parts where it will minimize output, e.g. counter part for updating of a folder number to avoid a time endless feeling.\n- You can also replace mv with cp command for copying of files instead of moving them.\n\n```\n#!/bin/bash\n\nNumberOfBaseDir=\"0\"\nSubDirNumber=\"0\"\nCountAll=\"0\"\nNumDir=\"0\"\n\necho Creating destination.\nDestination=\"./SortedImages\"\necho mkdir -v \"${Destination}\" -p \necho Created destination with status: $?\n\necho Your set of limitations.\nSDN=50; echo Limit files in a subdir: $SDN\nNBD=50; echo Limit subdirs in a file type named destination: $NBD\n\nSourceDataFile=\"collect-info-about-images.txt\"\necho Source file with a necessery data: $SourceDataFile\n\nif [ 'XX' == 'XX'\"$SourceDataFile\" ] ; then \n echo The '$SourceDataFile' variable is empty\n exit 1\nelse \n if [ ! -f \"$SourceDataFile\" ]; then \n  echo The \"$SourceDataFile\" file doesn\"'\"t exist\n  exit 2\n fi;\nfi;\n\necho Populating an array from a file\nArrayFillCount=0;\nwhile read line ; do\n  tmpWb=\"${line/|H|*/}\";\nW=\"${tmpWb/*W|/}\";\n  tmpHb=\"${line/|Format|*/}\";\nH=\"${tmpHb/*|/}\";\n\n#if (( \"$W\" >= \"800\" )) && (( \"$W\" <=  \"1000\" )); then\n#if (( \"$H\" >= \"800\" )) && (( \"$H\" <=  \"1000\" )); then\n  ArrayOfFiles[$ArrayFillCount]=\"$line\";\n  ArrayFillCount=$((ArrayFillCount+1))\nDupLimitKeeper[$W,$H]=\"0\";\n#fi;fi;\n\ndone < $SourceDataFile;\necho Done with extracting of necessary data about resolutions.\n\necho Starting loop of restoration\nXX=${#ArrayOfFiles[@]}\nwhile [  \"${XX}\" != \"${CountAl}l\" ] ; do\n  preType=${ArrayOfFiles[$CountAll]/*\"|Format|\"/};\nImageType=${preType/|*/}\n  preW=${ArrayOfFiles[$CountAll]/*\"|W|\"/};Width=${preW/|*/};preH=${ArrayOfFiles[$CountAll]/*\"|H|\"/} \nHeight=${preH/|*/};\nPathToFile=${ArrayOfFiles[$CountAll]/\"|\"*/}\n\nDupLimitKeeper[Width,Height]=$((DupLimitKeeper[Width,Height]+1));\n\nIfExist=\"${Destination}/${ImageType}${NumberOfBaseDir}/Resolution_${Width}x${Height}_DirN${SubDirNumber}\"\n\nif [ ! -d \"$IfExist\"  ];then \n  echo mkdir -vp \"$IfExist\"\nNumDir=$((NumDir+1));\nfi\n\n## Creating a new numbered file type folders\nif [ \"${DupLimitKeeper[Width,Height]}\" -gt $SDN ]; then \n  SubDirNumber=$((SubDirNumber+1));\n  DupLimitKeeper[$Width,$Height]=\"0\";\nfi\n\n## Adding a file number \nFileNameOnly=\"${PathToFile##*/}\"\nNewFileName=\"N${CountAll}C${FileNameOnly}\"\n#NewFileName=\"${FileNameOnly}\"\n\n## Creating a new sub-dir when limit of files in a sub-folder is reached\nif [ $NumDir -gt $NBD ];then \n  NumberOfBaseDir=$((NumberOfBaseDir+1));\n  NumDir=\"0\";\nfi\n##\nif [ -f \"${PathToFile}\" ];then\n  echo mv -v \"${PathToFile}\" \"$IfExist/$NewFileName\";\n# echo cp -v \"${PathToFile}\" \"$IfExist/$NewFileName\";\nfi\n\nCountAll=$((CountAll+1)) \ndone\necho Total processed files: $CountAll\n```\n\n"
    }
  ]
}