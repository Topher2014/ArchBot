{
  "title": "Nagios",
  "url": "https://wiki.archlinux.org/title/Nagios",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Nagios is an open source host, service and network monitoring program. It monitors specified hosts and services, alerting you to any developing issues, errors or improvements. This article describes the installation and configuration of Nagios.\n\n"
    },
    {
      "title": "Features",
      "level": 2,
      "content": "Some of Nagios' features include:\n\n- Monitoring of network services (SMTP, POP3, HTTP, NNTP, PING, etc.)\n- Monitoring of host resources (processor load, disk usage, etc.)\n- Simple plugin design that allows users to easily develop their own service checks\n- Parallelized service checks\n- Ability to define network host hierarchy using \"parent\" hosts, allowing detection of and distinction between hosts that are down and those that are unreachable\n- Contact notifications when service or host problems occur and get resolved (via email, pager, or user-defined method)\n- Ability to define event handlers to be run during service or host events for proactive problem resolution\n- Automatic log file rotation\n- Support for implementing redundant monitoring hosts\n- Optional web interface for viewing current network status, notification and problem history, log file, etc.\n\nThe following installation and configuration were tested using nagios 3.2.0-1, Apache web server 2.2.14-2, and PHP5 5.3.1-3 by awayand.\n\n"
    },
    {
      "title": "Webserver",
      "level": 2,
      "content": "According to the official documentation a webserver is not required, but if you wish to use any of the CGI features then a webserver (apache preferred), PHP (php-apache) for it and the gd library are required. This is assumed for this installation.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "Before installation, it is a good idea to make sure you have prerequisites installed, e.g. if you are using nginx then: nginx, php, php-fpm, fcgiwrap might be a good start.\n\nInstall nagiosAUR package.\n\nUsers may also want to install monitoring-plugins. When you do, make sure to edit /etc/nagios/resource.cfg later to reflect the new paths:\n\n```\n#$USER1$=/usr/share/nagios/libexec\n$USER1$=/usr/lib/monitoring-plugins\n```\n\n"
    },
    {
      "title": "Nagios configuration",
      "level": 3,
      "content": "Copy the sample configuration files:\n\n```\n# for samples in /etc/nagios/{cgi.cfg.sample,resource.cfg.sample,nagios.cfg.sample,objects/commands.cfg.sample,objects/contacts.cfg.sample,objects/localhost.cfg.sample,objects/templates.cfg.sample,objects/timeperiods.cfg.sample} ; do cp $samples ${samples%.*} ; done\n```\n\nMake owner/group for all the files you just copied and belong to root equal to nagios/nagios:\n\n```\n# chown -R nagios:nagios /etc/nagios\n```\n\nIf you have installed apache-tools, then create htpasswd.users file with a username (e.g. nagiosadmin). You will be prompted to add a password.\n\n```\n# htpasswd -c /etc/nagios/htpasswd.users nagiosadmin\n```\n\nInstead, if you do not want to install apache-tools, you can run the following command\n\n```\n# echo -e \"nagiosadmin:`perl -le 'print crypt(\"your_password\",\"salt\")'`\" > /etc/nagios/htpasswd.users\n```\n\nYou can also add a different user, but before you can do anything with it in Nagios, you will need to edit /etc/nagios/cgi.cfg. You can replace 'nagiosadmin' with the desired user, or, you can append it with comma: nagiosadmin,yourusername,yournextusername etc.\n\nIf the owner/group of the nagios-plugins you installed are root:root, the following needs to be done:\n\n```\n# chown -R nagios:nagios /usr/share/nagios\n```\n\nOnce Nagios is configured, it is time to configure the webserver.\n\n"
    },
    {
      "title": "Apache configuration",
      "level": 3,
      "content": "If using Apache HTTP Server as webserver, edit /etc/httpd/conf/httpd.conf and add the following to the end of the file:\n\n```\nLoadModule php5_module modules/libphp5.so\nInclude \"conf/extra/nagios.conf\"\nInclude \"conf/extra/php5_module.conf\"\n```\n\nIf planning to use Nagios CGI scripts, you will need to uncomment the following:\n\n```\nLoadModule cgi_module modules/mod_cgi.so\n```\n\nCopy configure file:\n\n```\n# cp /etc/webapps/nagios/apache.example.conf /etc/httpd/conf/extra/nagios.conf\n```\n\nAdd the apache user http to the group nagios, otherwise you will get the following error when using nagios: \"Could not open command file '/var/nagios/rw/nagios.cmd' for update!\"\n\n```\n# usermod -G nagios -a http\n```\n\nIf you are still getting this error, you might need to change the rights on the file:\n\n```\n# chmod 666 /var/nagios/rw/nagios.cmd\n```\n\n"
    },
    {
      "title": "Nginx configuration",
      "level": 3,
      "content": "Apart from php and php-fpm, You should have fcgiwrap installed or else CGI scripts will not run.\n\nYou will also need to ensure php-fm and fcgiwrap services/sockets are started when using nginx\n\n1. Start, or restart, php-fpm.service for php-fpm\n1. Start, or restart, fcgiwrap.socket for fcgiwrap\n\nExample configuration:\n\n```\nserver {\n    server_name     nagios.yourdomain.tld;\n    root            /usr/share/nagios/share;\n    listen          80;\n    index           index.php index.html index.htm;\n    access_log      nagios.access.log;\n    error_log       nagios.error.log;\n\n    auth_basic            \"Nagios Access\";\n    auth_basic_user_file  /etc/nagios/htpasswd.users;\n\n    # Fixes frames not working\n    add_header X-Frame-Options \"ALLOW\";\n    \n    location ~ \\.php$ {\n        try_files       $uri = 404;\n        fastcgi_index   index.php;\n        fastcgi_pass    unix:/run/php-fpm/php-fpm.sock;\n        include         fastcgi.conf;\n    }\n\n    location ~ \\.cgi$ {\n        root            /usr/share/nagios/sbin;\n        rewrite         ^/nagios/cgi-bin/(.*)\\.cgi /$1.cgi break;\n        fastcgi_param   AUTH_USER $remote_user;\n        fastcgi_param   REMOTE_USER $remote_user;\n        include         fastcgi.conf;\n        fastcgi_pass    unix:/run/fcgiwrap.sock;\n    }\n\n    # Fixes the fact some links are expected to resolve to /nagios, see here.\n    location /nagios {\n        alias /usr/share/nagios/share;\n    }\n\n}\n```\n\n"
    },
    {
      "title": "Lighttpd configuration",
      "level": 3,
      "content": "Example for lighttpd:\n\n```\n$HTTP[\"url\"] =~ \"^/nagios\" {\n        alias.url = (\n                \"/nagios/cgi-bin\" => \"/usr/share/nagios/sbin\",\n                \"/nagios\" => \"/usr/share/nagios/share\" \n        )\n\n        $HTTP[\"url\"] =~ \"^/nagios/cgi-bin\" {\n                cgi.assign = ( \"\" => \"\" )\n        }\n\n        auth.backend = \"htpasswd\" \n        auth.backend.htpasswd.userfile = \"/etc/nagios/htpasswd.users\" \n        auth.require = ( \"\" => (\n                \"method\" => \"basic\",\n                \"realm\" => \"nagios\",\n                \"require\" => \"user=nagiosadmin\" \n                )\n        )\n}\n```\n\nNote that mod_setenv, mod_cgi, mod_alias and mod_auth must be allowed.\n\n"
    },
    {
      "title": "PHP configuration",
      "level": 3,
      "content": "Edit /etc/php/php.ini to include /usr/share/nagios in the open_basedir directive.\n\nExample configuration:\n\n```\nopen_basedir = /srv/http/:/home/:/tmp/:/usr/share/pear/:/usr/share/webapps:/etc/webapps:/usr/share/nagios\n```\n\n"
    },
    {
      "title": "Final steps",
      "level": 3,
      "content": "1. Start, or restart, nagios.service for Nagios\n1. Start, or restart, your webserver: httpd.service for Apache, nginx.service for Nginx, and lighttpd.service for lightttpd.\n\nNow you should be able to access nagios through your webbrowser using the username and password you have created above using htpasswd:\n\n```\nhttp://localhost/nagios\n```\n\n"
    },
    {
      "title": "Monitor an Arch Linux host",
      "level": 2,
      "content": "You will need monitoring-plugins and either nrpe or use check_by_ssh along with passwordless ssh to monitor your host.\n\n"
    },
    {
      "title": "nrpe",
      "level": 3,
      "content": "The nrpe configuration is done in /etc/nrpe/nrpe.cfg and the interesting files to monitor will be in /usr/share/nagios/libexec/. Do not forget to edit nrpe.cfg as it is mostly empty after install.\n\n"
    },
    {
      "title": "check_by_ssh",
      "level": 3,
      "content": "On the monitoring system, su to the user account that Nagios/Icinga/whatever runs as, run ssh-keygen. Create a user on the Arch system to be monitored with the same name and a temporary password, e.g:\n\n```\n# useradd -m -d /home/icinga -s /bin/bash -p icinga icinga.\n```\n\nFrom the monitoring system run this (where client_ipaddress is the IP of the client):\n\n```\n$ ssh-copy-id client_ipaddess\n```\n\nBack on the client, clear the temporary password:\n\n```\n# passwd -d icinga.\n```\n\nVerify you can login from the server with:\n\n```\n$ ssh icinga@client_ipaddres\n```\n\nMany non Arch systems install the monitoring plugins to /usr/lib/nagios/plugins but Arch installs them to /usr/lib/monitoring-plugins/. It may be helpful to create /usr/lib/nagios and symlink ../monitoring-plugins to plugins from that directory.\n\nHere is an example of a command invocation run from the command line as the monitoring system's user:\n\n```\n$ /usr/lib/nagios/plugins/check_by_ssh -E -H 192.168.100.11 -C \"/usr/lib/nagios/plugins/check_disk -w 10 -c 5 --path=/ --units=GB\"\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- nagios.org Official website\n- Nagios Plugins the home of the official plugins\n- wikipedia.org Wikipedia article\n- NagiosExchange overview of plugins, addons, mailing lists for Nagios\n- Forks Icinga forked Nagios in 2009 Naemon forked Nagios in 2014; see also Naemon FAQ: Why a fork?\n\n- Icinga forked Nagios in 2009\n- Naemon forked Nagios in 2014; see also Naemon FAQ: Why a fork?\n\n"
    }
  ]
}