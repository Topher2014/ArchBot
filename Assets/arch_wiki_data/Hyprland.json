{
  "title": "Hyprland",
  "url": "https://wiki.archlinux.org/title/Hyprland",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Window manager\n- Wayland\n\nHyprland is an independent tiling Wayland compositor written in C++. Noteworthy features of Hyprland include dynamic tiling, tabbed windows, a clean and readable C++ code-base, and a custom renderer that provides window animations, rounded corners, and Dual-Kawase Blur on transparent windows. General usage and configuration is thoroughly documented at Hyprland wiki.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install one of the following:\n\n- hyprland - Latest upstream release.\n- hyprland-gitAUR - Latest commit to master branch.\n\nAs of #6608, Hyprland uses aquamarine as its own rendering backend library. Before that, it bundled its own version of wlroots, which closely followed wlroots-gitAUR.\n\n- NVIDIA GPU users should also make sure to follow the NVIDIA specific page on the upstream Wiki before trying to launch Hyprland. Failure to do so will likely result in many bugs including not being able to log in, flashing windows and high CPU usage.\n- Using an NVIDIA GPU with Hyprland is unsupported. Many users have had success but if something is broken then you are on your own.\n- Also make sure to install the Polkit package, as the lack thereof will cause Hyprland to fail to start. (logind missing permissions)\n- For Vmware/VirtualBox users, it may be necessary to enable 3D acceleration in order to run Hyprland properly.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Configuration is done through a single configuration file, hyprland.conf, though it supports splitting the configuration into multiple files and including them in hyprland.conf. The default file is /usr/share/hypr/hyprland.conf and, after logging in for the first time, ~/.config/hypr/hyprland.conf.\n\nhyprland.conf includes directives to configure your devices (keyboards, mice, trackpads, monitors), as well as settings for animations, decorations, layout, etc. You can set key bindings, window rules, and execute commands (either once or each time) the configuration is reloaded.\n\nThe configuration is automatically reloaded each time you update the file. You can also use hyprctl reload for the same effect. For some settings (particularly input settings), you may have to restart your Hyprland session.\n\nSettings can also be changed on the fly with hyprctl but they will not be saved.\n\n"
    },
    {
      "title": "Keymap",
      "level": 4,
      "content": "By default Hyprland will use US Qwerty, you can configure it as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# German Colemak layout\ninput {\n    ...\n    kb_layout = de\n    kb_variant = colemak\n    ...\n    }\n```\n\nSee upstream's Wiki for all available options.\n\n"
    },
    {
      "title": "Typematic delay and rate",
      "level": 4,
      "content": "While Xorg users will be used to having this setting defined at the server level, on Wayland each compositor handles it on its own:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Repeat rate and delay\ninput {\n    ...\n    repeat_rate = 25\n    repeat_delay = 600\n    ...\n    }\n```\n\n"
    },
    {
      "title": "Keyboard backlight",
      "level": 4,
      "content": "Using keyboard brightness controls in Hyprland is possible. Install brightnessctl then add the related binds (replace keyboard_brightness_* with SUPER, FX or XF86KbdBrightness depending on how your hardware exposes the keyboard backlight):\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Keyboard backlight\nbind = , keyboard_brightness_up_shortcut, exec, brightnessctl -d *::kbd_backlight set +33%\nbind = , keyboard_brightness_down_shortcut, exec, brightnessctl -d *::kbd_backlight set 33%-\n```\n\nIt is also possible to have on-screen notifications that fire when changes are made.\n\n"
    },
    {
      "title": "Media keys",
      "level": 4,
      "content": "Using keyboard media controls in Hyprland is possible by making use of XF86Audio keysyms and an external application like pavucontrol or pamixer and playerctl.\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Volume and Media Control\nbind = , XF86AudioRaiseVolume, exec, pamixer -i 5 \nbind = , XF86AudioLowerVolume, exec, pamixer -d 5 \nbind = , XF86AudioMicMute, exec, pamixer --default-source -m\nbind = , XF86AudioMute, exec, pamixer -t\nbind = , XF86AudioPlay, exec, playerctl play-pause\nbind = , XF86AudioPause, exec, playerctl play-pause\nbind = , XF86AudioNext, exec, playerctl next\nbind = , XF86AudioPrev, exec, playerctl previous\n```\n\nIt is also possible to have on-screen notifications that fire when changes are made.\n\n"
    },
    {
      "title": "Touchpad gestures",
      "level": 3,
      "content": "Being a Wayland compositor, Hyprland has full support for touchpad gestures though they are disabled by default. To enable them, make the following edit:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Enable touchpad gestures\ngestures {\n    workspace_swipe = true\n    workspace_swipe_fingers = 3\n}\n```\n\nSee the upstream Wiki for all available options.\n\n"
    },
    {
      "title": "Screen sharing",
      "level": 4,
      "content": "See Screen-sharing\n\nBeing a wlroots-compatible compositor, Hyprland can utilize xdg-desktop-portal-wlr to enable screen capture in a range of applications by way of xdg-desktop-portal.\n\nHyprland also maintains xdg-desktop-portal-hyprland, which supports screen sharing (including region sharing and window sharing), global shortcuts, and has a graphical picker utility. Usage of the portal is further documented in the Hyprland wiki.\n\nIt is worth noting that xdg-desktop-portal-hyprland does not include a file picker, for which users can additionally install xdg-desktop-portal-gtk.\n\n"
    },
    {
      "title": "Setting screen resolution",
      "level": 4,
      "content": "Hyprland will try to detect your screen resolution automatically and then select either 1x, 1.5x, or 2x screen scaling. [1] However, in some cases it will fail and default to a fail-safe, usually if there are multiple screens present or if you have a hybrid laptop. If everything on your screen is huge then you need to configure your default monitor and resolution.\n\nFirst find your default monitor using hyprctl:\n\n```\n$ hyprctl monitors\n```\n\n```\nMonitor eDP-1 (ID 0):\n        1920x1080@144.003006 at 0x0\n        description: Chimei Innolux Corporation 0x153C (eDP-1)\n        ...\n```\n\nThen add your monitor to the configuration:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\n# Monitor details\nmonitor=eDP-1,1920x1080@144,0x0,1\n...\n```\n\n0x0 is a position offset used for multi screen setups and the final 1 is the screen scaling factor.\n\nSee the upstream Hyprland Monitors Wiki for more details.\n\n"
    },
    {
      "title": "Screen backlight",
      "level": 4,
      "content": "Install brightnessctl then add the following binds:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Screen brightness\nbind = , XF86MonBrightnessUp, exec, brightnessctl s +5%\nbind = , XF86MonBrightnessDown, exec, brightnessctl s 5%-\n```\n\nIt is also possible to have on-screen notifications that fire when changes are made.\n\n"
    },
    {
      "title": "Universal Wayland Session Manager",
      "level": 4,
      "content": "Hyprland recommends to start the session with the Universal Wayland Session Manager. It wraps the compositor and accordingly configured applications and daemons through systemd unit files, allowing you to control them with systemctl.\n\nYou can start Hyprland with uwsm both in TTY via the following script in your ~/.profile\n\n```\nif uwsm check may-start && uwsm select; then\n  exec systemd-cat -t uwsm_start uwsm start default\nfi\n```\n\n```\nif uwsm check may-start; then\n  exec uwsm start hyprland.desktop\nfi\n```\n\non via a desktop manager by using the hyprland-uwsm.desktop entry or by selecting hyprland (uwsm-managed) inside your desktop manager.\n\nNote: **you must avoid using the exit dispatcher or terminate the Hyprland process directly since this would interfer with the normal shutdown process** \n\n- you must avoid using the exit dispatcher or terminate the Hyprland process directly since this would interfer with the normal shutdown process. Use instead uwsm stop or loginctl terminate-user \"\" to terminate Hyprland and exit user session, for example:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\nbind = $mainMod, M, exec, uwsm stop\n```\n\n- Do not put environment variables in hyprland.conf, but use instead uwsm files ~/.config/uwsm/env for variables common to all graphical sessions managed by uwsm (GTK, Qt, xcursor, ...) and ~/.config/uwsm/env-hyprland for Hyprland exclusive environment variables (HYPR* and AQ_* variables for example). The format of these files is export KEY=VALUE on each line without comments. It is strongly suggested, if you use multiple GPUs, to put the environment variable AQ_DRM_DEVICES inside env-hyprland in order to avoid conflicts with other compositors.\n\n"
    },
    {
      "title": "Terminal",
      "level": 4,
      "content": "You can start Hyprland from a TTY with the following command\n\n```\n$ Hyprland\n```\n\n"
    },
    {
      "title": "Display managers",
      "level": 4,
      "content": "While launching from a display manager is not officially supported, users have reported success launching from GDM, SDDM, and others. The upstream wiki maintains a compatibility list with display managers. The hyprland package contains a display manager entry, and all Hyprland AUR packages will generate one automatically.\n\nBoth methods provide identical results, plus or minus a few environment variables and services.\n\n"
    },
    {
      "title": "Auto login",
      "level": 4,
      "content": "Users can automatically login by using a display manager or adapting the method described in Xinit#Autostart X at login.\n\n"
    },
    {
      "title": "hyprctl and IPC",
      "level": 3,
      "content": "hyprctl is a command line utility that comes installed with Hyprland to communicate with the display server. It allows you to dispatch commands to the server (equivalent to commands in the configuration file, but with a slightly different syntax), set keywords, send queries and request information. See the full documentation.\n\nHyprland also exposes 2 UNIX Sockets for controlling and getting information about Hyprland via code or command-line utilities. These sockets broadcast events on focus change (windows, workspaces, monitors), creation of windows/workspace, and so on.\n\nBoth hyprctl and the IPC sockets can be effectively used in scripts to control Hyprland for complex tasks.\n\n"
    },
    {
      "title": "Autostart",
      "level": 3,
      "content": "When starting applications it is important to use the correct type of dispatcher, using exec incorrectly can result in applications being started multiple times taking up system resources and in the worst cases, causing a race condition that can crash your system.\n\nNote: **each time a change to the file is saved** \n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\nexec-once = uwsm app -- mycommand --arg1 --arg2\nbind = SUPER, E, exec, uwsm app -- pcmanfm-qt.desktop\n```\n\n"
    },
    {
      "title": "Setting environment variables",
      "level": 3,
      "content": "It is possible to set environment variables directly in hyprland.conf through the env keyword, which has a different syntax than the env UNIX command used by shells.\n\nThe differences are explained on the upstream Wiki.\n\n"
    },
    {
      "title": "Hypr-Ecosystem",
      "level": 2,
      "content": "The Hyprland development team are building an ecosystem of applications tailored to be specifically used with Hyprland, these tools will include dispatchers allowing for them to be controlled with hyprctl rather than relying on scripts.\n\nCurrently the ecosystem consists of:\n\n"
    },
    {
      "title": "Hyprpaper",
      "level": 3,
      "content": "Hyprpaper is a wallpaper utility, it can be installed with the hyprpaper package.\n\n"
    },
    {
      "title": "Hyprpicker",
      "level": 3,
      "content": "Hyprpicker is a utility to grab a colour from your desktop, it can be installed with the hyprpicker package.\n\n"
    },
    {
      "title": "Hypridle",
      "level": 3,
      "content": "Hypridle is an idle management daemon, it can be installed with the hypridle package.\n\n"
    },
    {
      "title": "Hyprlock",
      "level": 3,
      "content": "Hyprlock is a screen lock manager, it can be installed with the hyprlock package.\n\n"
    },
    {
      "title": "Hyprcursor",
      "level": 3,
      "content": "Hyprcursor is a new format for handling screen cursors that offers many improvements over the traditional way, it can be installed with the hyprcursor package,\n\n"
    },
    {
      "title": "Hyprcursor themes",
      "level": 4,
      "content": "Cursor themes can be installed from the AUR, for example:\n\n- sweet-cursors-hyprcursor-gitAUR\n- nordzy-hyprcursorsAUR\n- xcursor-pro-hyprcursorAUR\n- hyprcursor-dracula-kde-gitAUR\n\nInstructions for porting existing themes to Hyprcursor are available on the upstream GitHub repository.\n\n"
    },
    {
      "title": "xdg-desktop-portal-hyprland",
      "level": 3,
      "content": "Hyprland's own implementation of XDG Desktop Portal. Compatible with other wlroots based compositors, but provides extra functionality when used on Hyprland. Available through the xdg-desktop-portal-hyprland package.\n\n"
    },
    {
      "title": "Hyprpolkitagent",
      "level": 3,
      "content": "Hyprpolkitagent is a polkit authentication daemon. It can be installed with the hyprpolkitagent package.\n\n"
    },
    {
      "title": "hyprsunset",
      "level": 3,
      "content": "Hyprsunset is a small utility to provide a blue light filter for your system. It can be installed with the hyprsunset package.\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "- For all below sections there will usually be more than one way of achieving a similar result, everything provided here is a basic example.\n- For a comprehensive list of alternatives refer to List of applications, a Hyprland specific list can be found on the upstream Wiki.\n\n"
    },
    {
      "title": "File manager",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external application if graphical file management is desired. Using thunar as an example, we simply need to assign it a keybind as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = SUPER, E, exec, thunar\n...\n```\n\n"
    },
    {
      "title": "Application launcher",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external application to launch applications. Using wofi as an example, we simply need to assign it a keybind as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = SUPER, F, exec, wofi --show drun\n...\n```\n\n"
    },
    {
      "title": "Idle",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external idle management daemon. The most common setup is swayidle and swaylock. You can lock your screen manually using a bind as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = SUPER, L, exec, swaylock -f -c 000000\n...\n```\n\n"
    },
    {
      "title": "Automatic screen locking and suspend",
      "level": 4,
      "content": "Create the following script:\n\n```\n~/.config/hypr/scripts/sleep.sh\n```\n\n```\nswayidle -w timeout 300 'swaylock -f -c 000000' \\\n            timeout 600 'systemctl suspend' \\\n            before-sleep 'swaylock -f -c 000000' &\n```\n\n- You can adjust the timeout periods by editing the numerical values, in seconds. 300 is 5 minutes, 600 is 10 minutes etc.\n- The script must be executable.\n\nThen call it:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = ~/.config/hypr/scripts/sleep.sh\n...\n```\n\n"
    },
    {
      "title": "Turning off the screen using DPMS after a timeout period",
      "level": 4,
      "content": "Hyprland has a built in dispatcher to handle DPMS requests however using it as a direct keybind is not recommended, doing so will result in you not being able to turn the screen back on and will require you to reboot.\n\nEdit the script from above and change it to read:\n\n```\n~/.config/hypr/scripts/sleep.sh\n```\n\n```\nswayidle -w timeout 300 'swaylock -f -c 000000' \\\n            timeout 600 'hyprctl dispatch dpms off' \\\n            resume 'hyprctl dispatch dpms on' \\\n            timeout 900 'systemctl suspend' \\\n            before-sleep 'swaylock -f -c 000000' &\n```\n\nThe above setup will result in your monitor powering off while you are doing things like playing a game, watching a video or listening to music where you might not touch the system for longer than the timeout period.\n\nTo fix this you can either use Hyprlands built in Window Rules V2 function which has a idleinhibit rule or you can install one of either idlehack-gitAUR or sway-audio-idle-inhibit-gitAUR. The former uses D-Bus to prevent Swayidle requests whenever Firefox or Chromium are playing audio/video. The latter prevents Swayidle requests whenever any application is playing audio.\n\nFor programs that use org.freedesktop.ScreenSaver.inhibit to pause the screensaver, you can install hypridle-gitAUR to implement it for Hyprland (or any Wayland compositor that support the idle-inhibit protocol).\n\nFor hypridle-gitAUR to function it is required to create a configuration. Example of a minimum config:\n\n```\n~/.config/hypr/hypridle.conf\n```\n\n```\ngeneral {\nignore_dbus_inhibit = false\nignore_systemd_inhibit = false\n}\n```\n\n"
    },
    {
      "title": "Status bar",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external application to display a status bar. Using waybar as an example, we simply need to call it as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = waybar -c ~/.config/waybar/waybar.conf\n...\n```\n\n"
    },
    {
      "title": "Workspace overview",
      "level": 4,
      "content": "waybar has a built in, fully customisable module that supports Hyprland workspace switching natively.\n\nSee the waybar Wiki [2] for details.\n\n"
    },
    {
      "title": "Polkit authentication",
      "level": 3,
      "content": "Polkit authentication requires the use of an external authentication agent. Hyprland recommends using polkit-kde-agent but any should work.\n\nCall it as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = /usr/lib/polkit-kde-authentication-agent-1\n...\n```\n\n"
    },
    {
      "title": "Desktop wallpaper",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external application to manage desktop wallpapers. Using swww as an example, we simply need to call it as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = swww-daemon\nexec-once = swww img path/to/image\n...\n```\n\n"
    },
    {
      "title": "Using a script to change wallpaper every X minutes",
      "level": 4,
      "content": "Create the following script and make sure its executable:\n\n```\n~/.config/hypr/scripts/swww-random\n```\n\n```\n#!/bin/bash\n\n# This script will randomly go through the files of a directory, setting it\n# up as the wallpaper at regular intervals\n#\n# NOTE: this script uses bash (not POSIX shell) for the RANDOM variable\n\nif [[ $# -lt 1 ]] || [[ ! -d $1   ]]; then\n\techo \"Usage:\n\t$0 <dir containing images>\"\n\texit 1\nfi\n\n# Edit below to control the images transition\nexport SWWW_TRANSITION_FPS=144\nexport SWWW_TRANSITION_STEP=2\nexport SWWW_TRANSITION_TYPE=random\n\n# This controls (in seconds) when to switch to the next image\nINTERVAL=300\n\nwhile true; do\n\tfind \"$1\" \\\n\t\t| while read -r img; do\n\t\t\techo \"$((RANDOM % 1000)):$img\"\n\t\tdone \\\n\t\t| sort -n | cut -d':' -f2- \\\n\t\t| while read -r img; do\n            if [[ \"$img\" != \"$1\" ]]; then\n\t\t\t    swww img \"$img\"\n\t\t\t    sleep $INTERVAL\n            fi \n\t\tdone\ndone\n```\n\nNext create a new folder to store background images, something like ~/.config/hypr/backgrounds should work fine, and populate it with any images you want.\n\nFinally call the script:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = swww-daemon\nexec-once = ~/.config/hypr/scripts/swww-random ~/.config/hypr/background\n...\n```\n\n"
    },
    {
      "title": "On screen notifications",
      "level": 3,
      "content": "On screen notifications for actions like brightness and volume changes are possible by using external notification daemons. This is a very complex topic and covering it completely is beyond the scope of this page. Rather, this section will focus on mako so go ahead and install it.\n\nSee Desktop notifications for further instructions and Desktop notifications#Standalone for a list of alternatives.\n\n- All scripts offered here are examples and will very likely need to be adjusted for your setup.\n- All scripts in this section must be executable.\n\n"
    },
    {
      "title": "Mako",
      "level": 4,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nMako is a lightweight notification daemon, you can read mako(5) for details. Its configuration file is ~/.config/mako/config, icons used for OSD are stored at ~/.config/mako/icons/ and should be in PNG format.\n\nFor the rest of this section all the images used by the scripts are available from this GitHub folder.\n\nFirst create the following script:\n\n```\n~/.config/hypr/scripts/kbbacklight\n```\n\n```\n#!/usr/bin/env bash\n\niDIR=\"$HOME/.config/mako/icons\"\n\n# Get brightness\nget_backlight() {\n\tLIGHT=\"$(cat /sys/class/leds/*::kbd_backlight/brightness)\"\n\techo \"${LIGHT}\"\n}\n\n# Get icons\nget_icon() {\n\tcurrent=\"$(cat /sys/class/leds/*::kbd_backlight/brightness)\"\n\n\tif [[ (\"$current\" -ge \"0\") && (\"$current\" -le \"1\") ]]; then\n\t\ticon=\"$iDIR/brightness-20.png\"\n\telif [[ (\"$current\" -ge \"1\") && (\"$current\" -le \"2\") ]]; then\n\t\ticon=\"$iDIR/brightness-60.png\"\n\telif [[ (\"$current\" -ge \"2\") && (\"$current\" -le \"3\") ]]; then\n\t\ticon=\"$iDIR/brightness-100.png\"\n\tfi\n}\n\n# Notify\nnotify_user() {\n\tnotify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$icon\" \"Keyboard Brightness : $(brightnessctl -d '*::kbd_backlight' g)\"\n}\n\n# Increase brightness\ninc_backlight() {\n\tbrightnessctl -d *::kbd_backlight set 33%+ && get_icon && notify_user\n}\n\n# Decrease brightness\ndec_backlight() {\n\tbrightnessctl -d *::kbd_backlight set 33%- && get_icon && notify_user\n}\n\n# Zero brightness\nzero_backlight() {\n\tbrightnessctl -d *::kbd_backlight s 0%\n}\n\n# Full brightness\nfull_backlight() {\n\tbrightnessctl -d *::kbd_backlight s 100%\n}\n\n# Execute accordingly\nif [[ \"$1\" == \"--get\" ]]; then\n\tbrightnessctl -d '*::kbd_backlight' g\nelif [[ \"$1\" == \"--inc\" ]]; then\n\tinc_backlight\nelif [[ \"$1\" == \"--dec\" ]]; then\n\tdec_backlight\nelif [[ \"$1\" == \"--zero\" ]]; then\n\tzero_backlight\nelif [[ \"$1\" == \"--full\" ]]; then\n\tfull_backlight\n\nelse\n\tget_backlight\nfi\n```\n\nThen add a new bind, or edit any existing one:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Keyboard brightness\nbind = keyboard_brightness_up_shortcut, exec, ~/.config/hypr/scripts/kbbacklight --inc\nbind = keyboard_brightness_down_shortcut, exec, ~/.config/hypr/scripts/kbbacklight --dec\n```\n\nFirst create the following script:\n\n```\n~/.config/hypr/scripts/volume\n```\n\n```\n#!/usr/bin/env bash\n\niDIR=\"$HOME/.config/mako/icons\"\n\n# Get Volume\nget_volume() {\n\tvolume=$(pamixer --get-volume)\n\techo \"$volume\"\n}\n\n# Get icons\nget_icon() {\n\tcurrent=$(get_volume)\n\tif [[ \"$current\" -eq \"0\" ]]; then\n\t\techo \"$iDIR/volume-mute.png\"\n\telif [[ (\"$current\" -ge \"0\") && (\"$current\" -le \"30\") ]]; then\n\t\techo \"$iDIR/volume-low.png\"\n\telif [[ (\"$current\" -ge \"30\") && (\"$current\" -le \"60\") ]]; then\n\t\techo \"$iDIR/volume-mid.png\"\n\telif [[ (\"$current\" -ge \"60\") && (\"$current\" -le \"100\") ]]; then\n\t\techo \"$iDIR/volume-high.png\"\n\tfi\n}\n\n# Notify\nnotify_user() {\n\tnotify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$(get_icon)\" \"Volume : $(get_volume) %\"\n}\n\n# Increase Volume\ninc_volume() {\n\tpamixer -i 5 && notify_user\n}\n\n# Decrease Volume\ndec_volume() {\n\tpamixer -d 5 && notify_user\n}\n\n# Toggle Mute\ntoggle_mute() {\n\tif [ \"$(pamixer --get-mute)\" == \"false\" ]; then\n\t\tpamixer -m && notify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$iDIR/volume-mute.png\" \"Volume Switched OFF\"\n\telif [ \"$(pamixer --get-mute)\" == \"true\" ]; then\n\t\tpamixer -u && notify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$(get_icon)\" \"Volume Switched ON\"\n\tfi\n}\n\n# Toggle Mic\ntoggle_mic() {\n\tif [ \"$(pamixer --default-source --get-mute)\" == \"false\" ]; then\n\t\tpamixer --default-source -m && notify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$iDIR/microphone-mute.png\" \"Microphone Switched OFF\"\n\telif [ \"$(pamixer --default-source --get-mute)\" == \"true\" ]; then\n\t\tpamixer -u --default-source u && notify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$iDIR/microphone.png\" \"Microphone Switched ON\"\n\tfi\n}\n# Get icons\nget_mic_icon() {\n\tcurrent=$(pamixer --default-source --get-volume)\n\tif [[ \"$current\" -eq \"0\" ]]; then\n\t\techo \"$iDIR/microphone.png\"\n\telif [[ (\"$current\" -ge \"0\") && (\"$current\" -le \"30\") ]]; then\n\t\techo \"$iDIR/microphone.png\"\n\telif [[ (\"$current\" -ge \"30\") && (\"$current\" -le \"60\") ]]; then\n\t\techo \"$iDIR/microphone.png\"\n\telif [[ (\"$current\" -ge \"60\") && (\"$current\" -le \"100\") ]]; then\n\t\techo \"$iDIR/microphone.png\"\n\tfi\n}\n# Notify\nnotify_mic_user() {\n\tnotify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$(get_mic_icon)\" \"Mic-Level : $(pamixer --default-source --get-volume) %\"\n}\n\n# Increase MIC Volume\ninc_mic_volume() {\n\tpamixer --default-source -i 5 && notify_mic_user\n}\n\n# Decrease MIC Volume\ndec_mic_volume() {\n\tpamixer --default-source -d 5 && notify_mic_user\n}\n\n# Execute accordingly\nif [[ \"$1\" == \"--get\" ]]; then\n\tget_volume\nelif [[ \"$1\" == \"--inc\" ]]; then\n\tinc_volume\nelif [[ \"$1\" == \"--dec\" ]]; then\n\tdec_volume\nelif [[ \"$1\" == \"--toggle\" ]]; then\n\ttoggle_mute\nelif [[ \"$1\" == \"--toggle-mic\" ]]; then\n\ttoggle_mic\nelif [[ \"$1\" == \"--get-icon\" ]]; then\n\tget_icon\nelif [[ \"$1\" == \"--get-mic-icon\" ]]; then\n\tget_mic_icon\nelif [[ \"$1\" == \"--mic-inc\" ]]; then\n\tinc_mic_volume\nelif [[ \"$1\" == \"--mic-dec\" ]]; then\n\tdec_mic_volume\nelse\n\tget_volume\nfi\n```\n\nThen add the following (or edit any existing binds):\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Volume\nbind = , XF86AudioRaiseVolume, exec, ~/.config/hypr/scripts/volume --inc \nbind = , XF86AudioLowerVolume, exec, ~/.config/hypr/scripts/volume --dec \nbind = , XF86AudioMicMute, exec, ~/.config/hypr/scripts/volume --toggle-mic \nbind = , XF86AudioMute, exec, ~/.config/hypr/scripts/volume --toggle\n```\n\nFirst create the following script:\n\n```\n~/.config/hypr/scripts/backlight\n```\n\n```\n!/usr/bin/env bash\n\niDIR=\"$HOME/.config/mako/icons\"\n\n# Get brightness\nget_backlight() {\n\tLIGHT=$(printf \"%.0f\\n\" $(brightnessctl g))\n\techo \"${LIGHT}\"\n}\n\n# Get icons\nget_icon() {\n\tcurrent=\"$(get_backlight)\"\n\tif [[ (\"$current\" -ge \"0\") && (\"$current\" -le \"19200\") ]]; then\n\t\ticon=\"$iDIR/brightness-20.png\"\n\telif [[ (\"$current\" -ge \"19200\") && (\"$current\" -le \"38400\") ]]; then\n\t\ticon=\"$iDIR/brightness-40.png\"\n\telif [[ (\"$current\" -ge \"38400\") && (\"$current\" -le \"57600\") ]]; then\n\t\ticon=\"$iDIR/brightness-60.png\"\n\telif [[ (\"$current\" -ge \"57600\") && (\"$current\" -le \"76800\") ]]; then\n\t\ticon=\"$iDIR/brightness-80.png\"\n\telif [[ (\"$current\" -ge \"76800\") && (\"$current\" -le \"96000\") ]]; then\n\t\ticon=\"$iDIR/brightness-100.png\"\n\tfi\n}\n\n# Notify\nnotify_user() {\n\tnotify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$icon\" \"Brightness : $(get_backlight)\"\n}\n\n# Increase brightness\ninc_backlight() {\n\tbrightnessctl s +5% && get_icon && notify_user\n}\n\n# Decrease brightness\ndec_backlight() {\n\tbrightnessctl s 5%- && get_icon && notify_user\n}\n\n# Execute accordingly\nif [[ \"$1\" == \"--get\" ]]; then\n\tget_backlight\nelif [[ \"$1\" == \"--inc\" ]]; then\n\tinc_backlight\nelif [[ \"$1\" == \"--dec\" ]]; then\n\tdec_backlight\nelse\n\tget_backlight\nfi\n```\n\nThen add the following (or edit any existing binds):\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n# Screen brightness\nbind = , XF86MonBrightnessUp, exec, ~/.config/hypr/scripts/backlight --inc \nbind = , XF86MonBrightnessDown, exec, ~/.config/hypr/scripts/backlight --dec\n```\n\nTo run this script, you need a command-line JSON processor gojqAUR.\n\nFirst create the following script:\n\n```\n~/.config/hypr/scripts/lang\n```\n\n```\n#!/usr/bin/env bash\n\nicon=\"$HOME/.config/mako/icons/language.png\"\n\n# Get language\nget_lang() {\n\tlang=$(hyprctl devices -j | gojq -r '.keyboards[] | select(.name == \"at-translated-set-2-keyboard\") | .active_keymap' | cut -c 1-2 | tr 'A-Z' 'a-z')\n\tcase $lang in\n\t\ten)\n\t\t\tlang=\"English language\"\n\t\t\t;;\n\t\tru)\n\t\t\tlang=\"Русский язык\"\n\t\t\t;;\n\t\tuk)\n\t\t\tlang=\"Українська мова\"\n\t\t\t;;\n\tesac\n\techo $lang\n}\n\n# Notify\nnotify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i \"$icon\" \"$(get_lang)\"\n```\n\nThen add the following (or edit any existing binds):\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\ndevice:at-translated-set-2-keyboard {\n    kb_layout = us,ru,ua\n    kb_variant = lang\n    kb_options = grp:win_space_toggle\n}\n\n# Language\nbind = SUPER, SPACE, exec, ~/.config/hypr/scripts/lang\n```\n\n"
    },
    {
      "title": "Power control",
      "level": 3,
      "content": "Hyprland requires a wayland-compatible external application for power control. Using nwg-bar as an example, we simply need to bind it as follows:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = SUPER, ESCAPE, exec, nwg-bar\n...\n```\n\n"
    },
    {
      "title": "Clipboard",
      "level": 3,
      "content": "Wayland clipboard behaviour deletes data when closing the application we copied it from. Other desktop environments work around this by using dedicated clipboard managers and on Hyprland there are multiple compatible choices. See the upstream Wiki for more information.\n\nThis section will cover cliphist as it supports copying images as well as text, start by adding the following:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nexec-once = wl-paste --type text --watch cliphist store \nexec-once = wl-paste --type image --watch cliphist store\n...\n```\n\nThen create a bind to call the history in your chosen application launcher:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = SUPER, V, exec, cliphist list | wofi --dmenu | cliphist decode | wl-copy\n...\n```\n\nNow pressing Super+v will open up a wofi window with a clipboard history list.\n\n"
    },
    {
      "title": "Enable/disable devices",
      "level": 3,
      "content": "To enable/disable devices (e.g. touchpad), first use\n\n```\n$ hyprctl devices\n```\n\nto get the name of your device.\n\nPut these lines of code into your configuration file (replace <device_name> with the name of your device queried above) to turn the device on/off:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\ndevice {\n  name = <device_name>\n  enabled = {true/false}\n}\n```\n\nTo dynamically switch the device on/off use hyprctl:\n\n```\n$ hyprctl keyword \"device[<device_name>]:enabled\" {true|false}\n```\n\nYou can also create a keybinding, e.g.:\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nbind = $mainMod, t, exec, hyprctl keyword \"device[pixa3854:00-093a:0274-touchpad]:enabled\" false\nbind = $mainMod Shift, t, exec, hyprctl keyword \"device[pixa3854:00-093a:0274-touchpad]:enabled\" true\n...\n```\n\nNote: Prior to Hyprland v0.34(?), the following legacy syntax was used:\n\ndevice:<device_name>:enabled\n\nThis older format has been removed. Also, earlier configuration files did not use a block-based device { name = <device_name> ... } structure, but a device:<device_name> { ... } structure.\n\n"
    },
    {
      "title": "Separate dconf profile",
      "level": 3,
      "content": "In case you do not want to poison settings for other GTK-based DEs, you can use a separate dconf profile. For example:\n\nDeclare new global dconf profile:\n\n```\n/etc/dconf/profile/hyprland\n```\n\n```\nuser-db:hyprland\n```\n\n```\n~/.config/hypr/hyprland.conf\n```\n\n```\n...\nenv = DCONF_PROFILE, hyprland\n...\n```\n\nNow you can use gsettings and it should not affect other desktop environments.\n\n"
    },
    {
      "title": "xdg-desktop-portal-hyprland is using a lot of CPU",
      "level": 3,
      "content": "This is a known bug [3] that should be resolved in the latest Git build. You can work around it by calling the nuclear script[dead link 2024-11-05 ⓘ] from the Hyprland wiki in your hyprland.conf file.\n\n"
    },
    {
      "title": "Native (wayland) electron apps flickering on NVIDIA",
      "level": 3,
      "content": "It is a widespread issue among NVIDIA users on Hyprland [4], [5] because of lack of support for explicit sync in Hyprland [6]. Recommended temporary fix is using X11 (XWayland) with the problematic apps by passing them --ozone-platform-hint=x11, or setting env = ELECTRON_OZONE_PLATFORM_HINT,x11 in ~/.config/hypr/hyprland.conf to force all electron apps to run using XWayland.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Hyprland Website\n- The official documentation\n- Hyprland Github Page\n- Community-maintained list of tools, plugins and extensions\n- SolDoesTech Github Repo - Notification scripts creator\n\n"
    }
  ]
}