{
  "title": "Maildrop",
  "url": "https://wiki.archlinux.org/title/Maildrop",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section is a candidate for moving to HowTo:courier-mta with authuserdb, vmail and IMAP/POP3.** This article or section is a candidate for moving to HowTo:courier-mta with authuserdb, vmail and IMAP/POP3.\n\nThis article or section is a candidate for moving to HowTo:courier-mta with authuserdb, vmail and IMAP/POP3.\n\nRelated articles\n\n- Courier Email Server\n- Virtual user mail system\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nCourier MTA is a mail transfer agent and POP3/IMAP4 server with Courier. This article builds upon Mail server.\n\nThe advantages of Courier-MTA are:\n\n- Authentication for MTA and POP3/IMAP happens against one data source\n- This data source can be a MySQL, PgSQL or LDAP, but also can be simpler like PAM or a compiled plaintextfile (BerkeleyDB)\n- Easy support of virtual users\n- SMTP-auth out of the box\n- Comes with webmail\n- Web based administration possible\n- Also has a separate mail delivery agent (MDA), if it is needed\n\n"
    },
    {
      "title": "Preamble",
      "level": 2,
      "content": "The following text describes a setup for two local domains on one physical machine, which is not so uncommon for single users or small companies. We authenticate against a BerkeleyDB-based \".dat\" file which is created from a text or multiple textfiles automatically by tools that come with courier. This method is described in the Courier documentation as authuserdb, so do not get confused about names. The authentication against other providers happens in an adequate way and is covered in courier-authlibs documentation. There are differences in the handling of SASL methods (such as PLAIN or CRAM-MD5) depending on which authentication backend (authuserd, authpam, authmysql ...) you like to use. Just do not expect that this setup can be painlessly converted from the described authuserdb to authmysql.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the courier-mtaAUR package.\n\nAny other mail transfer agents (like Cyrus) or SMTP servers (Sendmail, Postfix, etc.) must be uninstalled for this, so answer 'yes' when prompted to do so.\n\n"
    },
    {
      "title": "TLS",
      "level": 2,
      "content": "You need to obtain a certificate.\n\n"
    },
    {
      "title": "Authuserdb authentication",
      "level": 2,
      "content": "Let Courier know that we want to authenticate against authuserdb.\n\nIn the file /etc/authlib/authdaemonrc find authmodulelist=... then remove all listed modules except for authuserdb:\n\n```\nauthmodulelist=\"authuserdb\"\n\n# For test it is useful to set DEBUG_LOGIN from 0 to 2\nDEBUG_LOGIN=2\n```\n\n"
    },
    {
      "title": "Creating the vmail user",
      "level": 2,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nWe want to deliver our mail primarily to virtual users, so we can easily create e-mail accounts without creating real users. Granny may want to read her e-mail but she does not need ssh access to that box, does she? To make that possible we need one \"physical\" user, that owns all of our mails physically on the drive. Note, that this is not the courier user which is primarily there to make sure that the actual server process does not run as root. Many people save this stuff in /var since it is primarily thought for these things. You can create the users \"home\" just anywhere you want! The decision will be influenced by the partition layout of your drive(s).\n\nAdd a user \"vmail\", who is the lord of all of the mail files:\n\n```\n# useradd -u 7200 -m vmail\n# passwd vmail\n```\n\n"
    },
    {
      "title": "Creating the email accounts",
      "level": 2,
      "content": "There is a place where the virtual users and their attributes will be stored. This can be either a plain textfile or a directory where several textfiles are contained. See courier-authlib's documentation for details. The directory-based approach makes maintenance a bit easier since we can separate the users of domains and subdomains, so we will go with this approach. The name of the directory is not negotiable.\n\n```\n# mkdir /etc/authlib/userdb\n```\n\nThe attributes of the \"vmail\"-system user need to be stored here, too, since we allowed only authuserdb in /etc/authlib/authdaemonrc . Fortunately, courier comes with a handy script that converts all local users into a file in courier-syntax. This file can be named freely, we call it \"system\". Later we also create a file for \"domain1\" and \"domain2\". Got the idea?\n\n```\n# pw2userdb > /etc/authlib/userdb/system\n```\n\nKeep only the \"vmail\" user (this means that no local user can receive emails!):\n\n```\n# sed -n -i \"/vmail/p\" /etc/authlib/userdb/system\n```\n\nNow we create the virtual users in the authentication database. The actual Maildir folders have to be created manually later. This creates a user \"user1@domain1\" and a \"user2@domain2\". For details about these commands check the man pages for the command itself and the man pages that are linked to.\n\n- user1:\n\n```\n# userdb -f /etc/authlib/userdb/domain1 user1@domain1 \\\n  set home=/home/vmail/domain1/user1 uid=7200 gid=7200\n```\n\nLet us set a password for the user (used for PLAIN and LOGIN and APOP):\n\n```\n# userdbpw -md5 | userdb -f /etc/authlib/userdb/domain1 user1@domain1 set systempw\n```\n\nThe following is used for CRAM-MD5 and friends (SASL-methods). Also note that this construct pipes the password directly into the command and thus can be read as cleartext, but can be handy for shell scripts that create new users:\n\n```\n# echo 'pwuser1' | userdbpw -hmac-md5 | \\\n  userdb -f /etc/authlib/userdb/domain1 user1@domain1 set hmac-md5pw\n```\n\n- user2 (repeat for user2@domain2):\n\n```\n# userdb -f /etc/authlib/userdb/domain2 user2@domain2 \\\n  set home=/home/vmail/domain2/user2 uid=7200 gid=7200\n```\n\n```\n# userdbpw | userdb -f /etc/authlib/userdb/domain2 user2@domain2 set systempw\n```\n\n```\n# echo 'pwuser2' | userdbpw -hmac-md5 | \\\n  userdb -f /etc/authlib/userdb/domain2 user2@domain2 set hmac-md5pw\n```\n\n"
    },
    {
      "title": "Setting up Maildirs",
      "level": 2,
      "content": "We need to create the virtual users \"Maildir\" as a physical place on the hard-drive in the \"vmail\"-system user home directory. Note that the \"vmail\" user needs write rights and also will own the files. It is easiest to create that stuff as the \"vmail\" user:\n\nBecome \"vmail\":\n\n```\n# su vmail\n$ mkdir -p /home/vmail/domain1/user1 && maildirmake /home/vmail/domain1/user1/Maildir\n$ mkdir -p /home/vmail/domain2/user2 && maildirmake /home/vmail/domain2/user2/Maildir\n```\n\nLeave \"vmail\" account and become root:\n\n```\n$ exit\n```\n\nMake sure you become root again by leaving the \"vmail\" account by typing exit as shown above.\n\n"
    },
    {
      "title": "Creating the user database",
      "level": 2,
      "content": "Now it is time to create the BerkeleyDB from the plain text files. It is important that the files in /etc/authlib/userdb are visible for root only. If they have any world or group rights, courier will not allow the creation of the db-files from the information.\n\n```\n# chmod 700 /etc/authlib/userdb && chmod 600 /etc/authlib/userdb/*\n# makeuserdb\n```\n\nNow we can check if the authentication works. Courier comes with a little tool that checks if users can be authenticated. Before using this tool, we must make sure the authentication daemon is running by enabling authdaemond.service. Then:\n\n```\n# authtest user1@domain1\n# authtest user2@domain2\n```\n\nIf you encounter any errors while testing the authentication, please consult these instructions, which detail how to use debugging features to pinpoint the problem.\n\n"
    },
    {
      "title": "Configuring courier",
      "level": 2,
      "content": "Now we are now done with authentication stuff. It gave us a flexible layout which can be easily extended. Time to move on to courier's configuration itself. First, we will try to give some aliases for the server. The aliases follow the userdb's scheme very closely. Unlike in other servers, there is no need to handle with all aliases in just one file. Again, you can create several plain text files in one folder, where you can handle the aliases by domains or even finer structured if you like. The folder's location is again not negotiable, you must use /etc/courier/aliases. There is already a \"system\" file which deals with root, postmaster and the usual suspects. Just add a \"user1@domain1\" behind the existing \"postmaster: \" to have all system relevant mails delivered to \"user1@domain1\". We just assume that this user is your primary account.\n\n```\n# cat > /etc/courier/aliases/domain1 << EOALIASES\nuser1@domain1:        user1@domain1\nuser.user1@domain1:   user1@domain1\nu.user1@domain1:      user1@domain1\nuserer1@domain1:      user1@domain1\nlooser1@domain1:      user1@domain1\nEOALIASES\n```\n\nRepeat that for every domain and user, in our test case for user2@domain2. It might help to create another scheme here like naming your files domain1.user1 which makes administration easier and more transparent. This will also help on automated, script-based administration.\n\nFinally, these aliases must be exported to the BerkeleyDB. Again, Courier comes with a little utility for that task, it is called makealiases:\n\n```\n# makealiases\n```\n\nJust check if everything is fine:\n\n```\n# makealiases -chk\n```\n\n"
    },
    {
      "title": "Setting localdomain and hosteddomains",
      "level": 3,
      "content": "Now we need to tell courier the who is who on this box -- who we serve e-mail for and who we do not. Courier separates this into these levels:\n\n- locals: This is localhost for sure and on dedicated servers you are mostly part of a domain like server234.serverfarm.tld\n- hosteddomains: For your hosted domains and subdomains like my-cool-domain.ca, project1.my-cool-domain.ca\n\nFor example, lets say you have a server at blahfarm.com. Usually they make your server a host on their domain. This is likely something like server234.blahfarm.com . Now, you want your server available from the web by a more meaningful and even cooler name, so you buy (or rent) a domain name like my-cool-domain.ca . In this case the setup looks like this:\n\nTo learn the difference between these specifications, read the manpage for makehosteddomains. You will figure that the following suits our approach:\n\n```\n# echo localhost > /etc/courier/locals\n# echo server237.blahfarm.com >> /etc/courier/locals\n\n# mkdir /etc/courier/hosteddomains\n# cat > /etc/courier/hosteddomains/domain1 << EODOMAIN1HOSTED\ndomain1\nmail.domain1[TAB]domain1\nEODOMAIN1HOSTED\n\n# cat > /etc/courier/hosteddomains/domain2 << EODOMAIN2HOSTED\ndomain2\nmail.domain2[TAB]domain2\nEODOMAIN2HOSTED\n```\n\nAgain, these values must be converted into a BerkeleyDB - use the courier command:\n\n```\n# makehosteddomains\n```\n\nBefore we go on, one more thing needs to be written -- the domain(s) we accept mail for. In the directory /etc/courier/esmtpacceptmailfor.dir/ we will create a file named domain1 and type domain1 into it:\n\n```\n# echo domain1 > /etc/courier/esmtpacceptmailfor.dir/domain1\n```\n\nRepeat for domain2:\n\n```\n# echo domain2 > /etc/courier/esmtpacceptmailfor.dir/domain2\n```\n\nFinally, convert into a BerkeleyDB:\n\n```\n# makeacceptmailfor\n```\n\n...and you are done here.\n\n"
    },
    {
      "title": "Testing your setup",
      "level": 2,
      "content": "Now the server is ready. Let us run several tests on the SMTP server and see if it is working nicely at least for sending and receiving mails.\n\n```\n###############################################################################\n# this is  a test case suggested on couriers very own webpage, we just convert it\n# from a local to a virtual user\n\n# prepare as vmail\nsu vmail\ncd ~/domain1/user1\n\nmaildirmake bounces && maildirmake test\necho \"./test\" > .courier-test-default\necho \"./bounces\" > .courier\n\n# back to root, start the server and finally run the script\nexit\n/usr/sbin/courier start\n/usr/lib/courier/perftest1 1000 \"user1@domain1 user2@domain2\"\n###############################################################################\n```\n\nLet us test some more stuff, which can be useful.\n\nSend an ordinary mail (as root or ordinary user):\n\n```\n$ echo \"To: user2@domain2\nFrom: user1@domain1\" | sendmail\n```\n\nSend a mail to an alias:\n\n```\n$ echo \"To: userer2@domain2\nFrom: user1@domain1\" | sendmail\n```\n\nSend a mail to an external email address:\n\n```\n$ echo \"To: me_freak@gmail.com\nFrom: user1@domain1\" | sendmail\n```\n\n"
    },
    {
      "title": "Configuring IMAP and POP3",
      "level": 2,
      "content": "So far, our operations have been focused on the box which runs the server itself. Now we need to setup some interaction related configuration. Since security is important we will setup some nice authentication modes, which does not send cleartext passwords. Courier supports CRAM-MD5 among others. You will have to make sure that your clients support that too. So far I tested sylpheed-claws > 1.0.4, esmtp and Thunderbird with these settings.\n\nNow it comes in, that we will have to configure the several server daemons. Courier is already running (from the perftest above) but it does not provide services to the network. So we have to configure esmtpd, pop3d and imapd with their respective configuration files in /etc/courier/<servicename> .\n\nSince we like to use SMTPAuth instead if a IP/Domain based SMTP authentication we need to activate the AUTHREQUIRED option in esmtpd. Also we activate the CRAM-MD5 challenge method for authorization. NOTE: this setup definitely keeps Outlook losers out. For these buggy and old fashioned clients you will need to use way less restrictive settings!\n\nIn /etc/courier/esmtpd-ssl:\n\n```\nAUTH_REQUIRED=1\nESMTPAUTH=\"CRAM-MD5\"\n```\n\nIn /etc/courier/pop3d:\n\n```\nPOP3AUTH=\"CRAM-MD5\"\n```\n\nThe imapd setting is a bit different. In /etc/courier/imapd there is a long line starting with IMAP_CAPABILITY. Just add a \"AUTH=CRAM-MD5\" at the end of the arguments and you should be done:\n\n```\nIMAP_CAPABILITY=\"... AUTH=CRAM-MD5\"\n```\n\n"
    },
    {
      "title": "Remarks",
      "level": 2,
      "content": "Because of our very small test case with just two boxes and no domain control we have to take a look at Courier's intrinsics and work around a little issue. Courier is nitpicking about RFC compliance, which does mean you have to make sure that you understand how to configure your e-mail clients for testing. This will fail in our testing:\n\n```\n+------------+            +---------------+                +-------------------+\n|local laptop|  ------->  |local box(with |  ------------> |  MTA somewhere on |\n+------------+            |  courier-mta) |                |  web              |\n                          +---------------+                +-------------------+\n```\n\nWhy? Because you send from a non-valid domain name. I assume here, that we use our \"domain1\" and \"domain2\" testpark. Now, when you create an account in Sylpheed which looks like this: Name: user numberone Address: user1@domain1 Sylpheed consequently sends the mail as \"user numberone <user1@domain1>\". This is wrong, since it violates the RFC. You get a Error: 517 - Syntax Error. For the testing you can simply fool Courier-MTA by setting the domain in sylpheed's dialog to: Address: user1@domain1.xx\n\nSomething similar (you just get Error 513 - Syntax Error) happens in this case:\n\n```\n+--------------------------+            +------------------------+\n|local laptop              |  ------->  |local MTA (courier-mta) |\n| sylpheed account         |            | MTA delivers to        |\n| user1@domain1.xx sends   |            | user2@domain2          |\n| to user2@domain2         |            +------------------------+\n+--------------------------+\n```\n\nbecause domain2 is not valid. You can send to mail.domain2 which will work around that. For boxes at the internet and properly configured domains this is absolutely no problem, since you are always part of a domain and thus have one dot (.) behind the @.\n\n"
    }
  ]
}