{
  "title": "Lf",
  "url": "https://wiki.archlinux.org/title/Lf",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- File manager functionality\n- Midnight Commander\n- nnn\n- ranger\n- Vifm\n\nlf (as in \"list files\") is a terminal file manager written in Go with a heavy inspiration from ranger.\n\nOutstanding features are server/client architecture (so you can cut in one terminal window and paste in another) and high customization.\n\nUnlike ranger, some features like tabs or windows are intentionally not included and instead left to be handled by window managers or terminal multiplexers.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the lf package, or lf-gitAUR for the development version.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Copy the default configuration at /usr/share/doc/lf/lfrc.example to ~/.config/lf/lfrc to use as a template for further customization. Some common features are already included as comments in the configuration example.\n\nFor more extensive configurations see the lf(1), also see the project wiki.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "The default keybindings are similar to those of vim with some difference from ranger's default, see lf(1) ยง QUICK REFERENCE.\n\nAlso see the screencast.\n\n"
    },
    {
      "title": "Transition from ranger to lf",
      "level": 3,
      "content": "For users who are already used to ranger as a file manager, moving to lf means less default features and a slightly different behavior.\n\nThe lf project wiki includes a step by step guide on how to configure lf to add features and defaults from ranger.\n\n"
    },
    {
      "title": "Using rifle file opener",
      "level": 3,
      "content": "lf can use the file opener rifle which is included in the ranger package.\n\nSet an environment variable to automatically use rifle to open files in the related applications:\n\n```\nexport OPENER='rifle'\n```\n\nFor editing file, you can also set your default editor:\n\n```\nexport EDITOR='vim'\n```\n\n"
    },
    {
      "title": "Previewing files",
      "level": 3,
      "content": "To automatically preview contents from currently selected files, set a custom previewer script in ~/.config/lf/lfrc. It is possible to add a wrapper for the scope.sh script from ranger which serves as a good template for customization. There are many other previewers that can be used with lf.\n\n"
    },
    {
      "title": "Sandboxing previews",
      "level": 3,
      "content": "While the default lf configuration only previews text files, using more complex preview parsers is somewhat dangerous. In case there is a vulnerability in a preview parser like pdftotext, it is possible to use this simple script to sandbox the previewer using bubblewrap :\n\n```\n~/.config/lf/previewSandbox.sh\n```\n\n```\n#!/bin/bash\nset -euo pipefail\n(\n    exec bwrap \\\n     --ro-bind /usr/bin /usr/bin \\\n     --ro-bind /usr/share/ /usr/share/ \\\n     --ro-bind /usr/lib /usr/lib \\\n     --ro-bind /usr/lib64 /usr/lib64 \\\n     --symlink /usr/bin /bin \\\n     --symlink /usr/bin /sbin \\\n     --symlink /usr/lib /lib \\\n     --symlink /usr/lib64 /lib64 \\\n     --proc /proc \\\n     --dev /dev \\\n     --ro-bind /etc /etc \\\n     --ro-bind ~/.config ~/.config \\\n     --ro-bind ~/.cache ~/.cache \\\n     --ro-bind \"$PWD\" \"$PWD\" \\\n     --unshare-all \\\n     --new-session \\\n     bash ~/.config/lf/preview.sh \"$@\"\n)\n```\n\nSet your previewer to the sandbox script and have your real preview script at ~/.config/lf/preview.sh:\n\n```\nset previewer ~/.config/lf/previewSandbox.sh\n```\n\n"
    }
  ]
}