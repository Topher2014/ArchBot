{
  "title": "Chrome OS devices/Custom firmware",
  "url": "https://wiki.archlinux.org/title/Chrome_OS_devices/Custom_firmware",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Chromebook\n- Chromebook Pixel 2\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\n"
    },
    {
      "title": "Pros",
      "level": 3,
      "content": "- Allows the use of a UEFI coreboot payload (with MrChromebox's custom firmware).\n- May reduce boot time.\n- Removes the Developer Mode screen that some users find annoying.\n- Enables VMX in models in which it is not active by default.\n- Fixes some issues (like suspend).\n\n"
    },
    {
      "title": "Cons",
      "level": 3,
      "content": "- Dangerous, and has the potential to render a device unusable.\n- Cannot boot stock Chrome OS (you can install Arnold the Bat’s Chromium OS build[dead link 2024-10-12 ⓘ] and it should be possible to upgrade it to full blown Chrome OS with a script if the user desires).\n- Custom-BIOS specific bugs may occur.\n\n"
    },
    {
      "title": "Flashing the custom firmware",
      "level": 2,
      "content": "There are several approaches for flashing a custom firmware:\n\n- Use MrChromebox's Firmware Utility Script.\n- Use John Lewis' script.\n- Manually with flashrom, in this case you will need to obtain the firmware by yourself or to compile it from the coreboot sources (official or Chromium OS fork).\n\n"
    },
    {
      "title": "Disable the hardware write protection",
      "level": 3,
      "content": "See the Disabling the hardware write protection at the Firmware write protection.\n\n"
    },
    {
      "title": "Introduction to the firmware",
      "level": 4,
      "content": "MrChromebox's firmware for Chromebooks and Chromeboxes has some differences compared to other third-party custom firmware, namely:\n\n- A UEFI implementation via the Tianocore coreboot payload.\n\n- Updates for the Embedded Controller (EC) of some of the devices it supports, solving some bugs associated with other custom firmware.\n\n- Built based on the latest coreboot upstream, rather than on the frozen source snapshot provided by Google.\n\n- Source code and build scripts available on github\n\n"
    },
    {
      "title": "Understanding the script",
      "level": 4,
      "content": "- Automatically downloads statically compiled 64-bit versions of chromium flashrom, cbfstool, and gbb_utility.\n- Automatically detects your device/board name, current firmware, and hardware write-protect state\n- Provides the option to backup your current firmware on USB (when flashing full/custom UEFI firmware).\n- Automatically disables, clears, sets, and enables the software write protection as needed.\n- Provides choice between RW_LEGACY, BOOT_STUB, and UEFI Full ROM firmware (types available vary based on device).\n- Provides the ability to set the stock firmware's GBB flags outside of ChromeOS\n- Provides the ability to remove the white Developer Mode splash screen (select models only)\n- Writes and verifies the custom firmware.\n\n- Does not make you a sandwich.\n\n"
    },
    {
      "title": "Flashing the firmware",
      "level": 4,
      "content": "Ensure that your device is supported by looking at the supported device list. For some devices there is a legacy SeaBIOS (non-UEFI) firmware also available, although those are deprecated and will generally not receive further updates. Legacy firmware images also do not provide Embedded Controller updates.\n\nIf a UEFI ROM for your device is available, you can flash the Full ROM firmware using the Firmware Utility Script (after ensuring that you have removed your device's firmware write-protection screw). After successfully flashing the firmware, you can follow the Installation guide and install Arch Linux just like on any UEFI computer. Systemd-boot is the recommended boot loader since it installs itself by default in esp/EFI/Boot/BOOTX64.EFI, the path that this firmware tries to boot from by default.\n\n"
    },
    {
      "title": "Using the script from Arch Linux",
      "level": 4,
      "content": "You will need to install dmidecode and which. Furthermore, to ensure that flashrom can correctly flash the firmware it is necessary to boot with both the nopat and the iomem=relaxed Kernel parameters. This is due to an issue with the chromium build of flashrom used by the script, which is required since upstream flashrom cannot be used to set/clear the software write-protect state or range.\n\n"
    },
    {
      "title": "Understanding the script",
      "level": 4,
      "content": "- Automatically downloads Chromium OS 64bit version of flashrom.\n- Backup your current firmware.\n- Disables software write protection by running # ./flashrom --wp-disable.\n- Checks the Chromebook product name with dmidecode and download the proper custom firmware.\n- Writes the custom firmware.\n\n- Does not ask for confirmation.\n- Does not check if the hardware write protection is disabled.\n- Does not confirm the compatibility of a custom firmware to a specific Chromebook sub-model.\n\n- Make sure you disabled the hardware write protection.\n- Read the FAQ.\n- Confirm that your Chromebook model is supported, if your model is untested then visit the coreboot on Chromebooks Google+ community and ask for advice.\n\n"
    },
    {
      "title": "Running the script in Chrome OS",
      "level": 4,
      "content": "- Access your command prompt via VT-2 (Ctrl+Alt+→)\n- Enter the command shown on the Download ROM page at John Lewis site. Note: The reason for not posting here is to force you to visit the site and read the page before proceeding.\n- After the script exited copy the backed up firmware to an external storage before rebooting the system.\n\nYou should now have a custom firmware installed on your device, cross your fingers and reboot.\n\nIf you flashed the firmware as part of the installation process then continue by following Chrome OS devices#Installing Arch Linux, if the custom firmware boots the installation media correctly then you might want to enable back the hardware write protection.\n\n"
    },
    {
      "title": "Running the script in Arch Linux",
      "level": 4,
      "content": "- Install dmidecode.\n- Enter the command shown on the Download ROM page at John Lewis site. Note: The reason for not posting here is to force you to visit the site and read the page before proceeding.\n- After the script exited copy the backed up firmware to an external storage before rebooting the system.\n\nYou should now have a custom firmware installed on your device, cross you fingers and reboot.\n\nIf the custom firmware boots Arch Linux correctly then you might want to enable back the hardware write protection, although John Lewis states that it is not necessary and will only make upgrading more difficult later. However, if you do not re-enable it you want to be careful not to use flashrom.\n\n"
    },
    {
      "title": "Manually with flashrom",
      "level": 3,
      "content": "The use of the upstream flashrom package is discouraged as it is missing operations like --wp-disable, --wp-status and it will not write firmware successfully to the ROM of the Chromebook unless it already been programmed externally (i.e. flashing by another device over SPI with SOIC clip), this is why it is recommended to use Chromium OS's flashrom.\n\n"
    },
    {
      "title": "Get flashrom for Arch Linux",
      "level": 4,
      "content": "Download a 64-bit statically linked Chromium OS's flashrom version from https://johnlewis.ie/flashrom and make it executable.\n\n"
    },
    {
      "title": "Get flashrom for Chrome OS",
      "level": 4,
      "content": "Chrome OS already includes flashrom.\n\n"
    },
    {
      "title": "Basic use of flashrom",
      "level": 4,
      "content": "- Disable software write protection before writing to the firmware chip.\n\n```\n# flashrom --wp-disable\n```\n\n- Backup firmware from the firmware chip.\n\n```\n# flashrom -r old_firmware.bin\n```\n\n- Write firmware to the firmware chip.\n\n```\n# flashrom -w new_firmware.bin\n```\n\n"
    },
    {
      "title": "Flashing back stock firmware",
      "level": 2,
      "content": "Disable the hardware write protection and follow the how to manually flash firmware with flashrom to flash the backup of your stock firmware.\n\n"
    },
    {
      "title": "Required tools",
      "level": 3,
      "content": "- Programmer, both the Raspberry Pi and the Bus Pirate are mentioned as compatible devices on the flashrom wiki. The Bus Pirate preferable as it will allow you to use Chromium OS's version of flashrom that supports --wp-disable and --wp-status flags.\n- SOIC clip is recommended, see [2].\n- Female jumper wires.\n- If you want to use Chromium OS's flashrom another Linux machine (32bit or 64bit) is required.\n\n"
    },
    {
      "title": "General idea on the unbricking process",
      "level": 3,
      "content": "- Connect the jumper wires to the programmer and the SOIC clip.\n- Connect the SOIC clip to the ROM chip.\n- If your programmer is running Linux (Raspberry Pi) then modprobe the spi modules.\n- If your programmer is not running Linux then connect it to your Linux machine.\n- Write the firmware with flashrom, you might need to disable software write protection by running flashrom with the --wp-disable flag (this is why Chromium OS's flashrom is handy).\n\n"
    },
    {
      "title": "Recommended reading about unbricking",
      "level": 3,
      "content": "- Flashrom's wiki pages on ISP, Bus Pirate, Raspberry Pi and SOIC8.\n- coreboot's wiki page on Chromebooks.\n- Examples of unbricking the C720: guide, pictures.\n- Example of unbricking HP Chromebox: guide\n\n"
    },
    {
      "title": "Firmware write protection",
      "level": 2,
      "content": "The firmware (coreboot and its payloads) is stored on a SPI flash chip (usually SOIC8), portions of which are protected from writing by a combination of hardware and software measures.\n\nAs long as the write protection has not been disabled and the protected range not cleared (set to 0,0), any changes made to the unprotected (RW) parts of the firmware (mainly SeaBIOS) can be reverted via either a booted Chrome OS install or Chrome OS recovery media.\n\nThere are two parts to the firmware write protection: hardware and software.\n\n"
    },
    {
      "title": "Hardware write protection",
      "level": 3,
      "content": "The hardware write protection is an electrical circuit which prevents writing to the software protection special registers; it is normally enforced by the grounding of the !WP pin on the SOIC8 chip. Thus the hardware write protection only protects directly these special registers, but indirectly also the data in the firmware chip.\n\nEarly Chromebook models (2012-2013) used a jumper or switch to implement hardware write protection. Most models from 2014-2017 used a screw, and Kabylake/Apollolake (and newer) models from 2017 on use the battery sense line (so disconnecting the battery is necessary to disable the hardware write protect).\n\n"
    },
    {
      "title": "Software write protection",
      "level": 3,
      "content": "The software write protection is implemented via a special register on the firmware chip, which contain an enabled/disabled flag, as well as one or more ranges of addresses to be protected / marked as read-only.\n\n"
    },
    {
      "title": "Understanding the Process of Disabling the Write Protection",
      "level": 3,
      "content": "To fully disable the write protection one would need to:\n\n- Disable the hardware write protection of the special software register.\n- Change the value of the special software register to disable software write protection, and clear the range of the protected addresses so no data will be protected (start and end at 0).\n\nConclusion: If one disables the software write protection and does not enable it back, then even if the hardware write protection is re-enabled, the firmware chip will remain unprotected.\n\n"
    },
    {
      "title": "Disabling the hardware write protection",
      "level": 4,
      "content": "To find the location of the hardware write-protect screw/switch/jumper and how to disable it visit the ArchWiki page for your Chromebook model (see Chromebook Models). If there is no information about your device on the ArchWiki then turn to Developer Information for Chrome OS Devices and coreboot's Chromebooks page.\n\n"
    },
    {
      "title": "Disabling the software write protection",
      "level": 4,
      "content": "Chromium OS's flashrom can manipulate the software write protection special registers.\n\n- Read the status of the software write protection special registers.\n\n```\n# flashrom --wp-status\n```\n\n- Disable or enable the software write protection.\n\n```\n# flashrom --wp-disable\n```\n\n- Change software write protection addresses range.\n\n```\n# flashrom --wp-range 0 0\n```\n\nFor more details on Chromium OS's flashrom and how to obtain it, see #Manually with flashrom.\n\n"
    }
  ]
}