{
  "title": "DKMS package guidelines",
  "url": "https://wiki.archlinux.org/title/DKMS_package_guidelines",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "32-bit – CLR – CMake – Cross – DKMS – Eclipse – Electron – Font – Free Pascal – GNOME – Go – Haskell – Java – KDE – Kernel modules – Lisp – Meson – MinGW – Node.js – Nonfree – OCaml – Perl – PHP – Python – R – Ruby – Rust - Security – Shell – VCS – Web – Wine\n\nHere are some guidelines to follow when creating a DKMS package.\n\n"
    },
    {
      "title": "Package name",
      "level": 2,
      "content": "DKMS packages are named by appending \"-dkms\" to the original package name.\n\nThe variable $_pkgname is often used below $pkgname to describe the package name minus the \"-dkms\" suffix (e.g. _pkgname=\"${pkgname%-*}\")\n\n"
    },
    {
      "title": "Dependencies",
      "level": 2,
      "content": "Add dkms to depends array. This is important because this will provide tools and hooks that will rebuild the kernel driver provided by the -dkms package whenever the kernel is updated.\n\nDo not include linux-headers – or any other Linux header package – to the PKGBUILD. These headers are already listed as optional dependencies of dkms and each kernel package has its own header package, so including header package dependency in the -dkms package is both unnecessarily redundant and restricting.\n\n"
    },
    {
      "title": "Source location",
      "level": 2,
      "content": "The package should install the kernel module's source files into:\n\n```\n/usr/src/PACKAGE_NAME-PACKAGE_VERSION\n```\n\nwhere PACKAGE_NAME and PACKAGE_VERSION are the kernel module's name and version.\n\nIt is highly recommended to set PACKAGE_NAME with the value of $_pkgname (See #Package name), and PACKAGE_VERSION with $pkgver.\n\n"
    },
    {
      "title": "Patching",
      "level": 2,
      "content": "The sources can be patched either directly in the PKGBUILD or through dkms.conf.\n\nIf patching through dkms.conf, make sure to install the patches into /usr/src/PACKAGE_NAME-PACKAGE_VERSION/patches/ directory and to add a PATCH[number]=patch_filename for each patch to be applied, replacing number with a incremental value starting at 0. See dkms(8) § DKMS.CONF for more information.\n\n"
    },
    {
      "title": "Module loading automatically in .install",
      "level": 2,
      "content": "Do not use .install file to load or unload modules. Leave it to the user, since there is a possibility a module may crash when loaded.\n\nAlso do not call dkms as it is automatically done via pacman hook provided by dkms. This hook runs dkms install and dkms remove leaving no manual task for the package maintainer.\n\n"
    },
    {
      "title": "Example",
      "level": 2,
      "content": "Here is an example package that edits dkms.conf according to the package name and version, and install module blacklist configuration file.\n\nFor other example of (real) packages, search -dkms in official repositories and -dkms in AUR.\n\n"
    },
    {
      "title": "PKGBUILD",
      "level": 3,
      "content": "```\nPKGBUILD\n```\n\n```\n# Maintainer: foo <foo(at)example(dot)org>\n# Contributor: bar <bar(at)example(dot)org>\n\n_pkgbase=example\npkgname=example-dkms\npkgver=1\npkgrel=1\npkgdesc=\"The Example kernel modules (DKMS)\"\narch=('x86_64')\nurl=\"https://www.example.org/\"\nlicense=('GPL2')\ndepends=('dkms')\nconflicts=(\"${_pkgbase}\")\ninstall=${pkgname}.install\nsource=(\"${url}/files/tarball.tar.gz\"\n        'dkms.conf'\n        \"${pkgname}.conf\"\n        'linux-3.14.patch')\nmd5sums=(use 'updpkgsums')\n\nprepare() {\n  cd ${_pkgbase}-${pkgver}\n\n  # Patch\n  patch -p1 -i \"${srcdir}\"/linux-3.14.patch\n}\n\npackage() {\n  # Copy dkms.conf\n  install -Dm644 dkms.conf \"${pkgdir}\"/usr/src/${_pkgbase}-${pkgver}/dkms.conf\n\n  # Set name and version\n  sed -e \"s/@_PKGBASE@/${_pkgbase}/\" \\\n      -e \"s/@PKGVER@/${pkgver}/\" \\\n      -i \"${pkgdir}\"/usr/src/${_pkgbase}-${pkgver}/dkms.conf\n\n  # Copy sources (including Makefile)\n  cp -r ${_pkgbase}/* \"${pkgdir}\"/usr/src/${_pkgbase}-${pkgver}/\n\n  # Blacklists conflicting module\n  install -Dm644 ${pkgname}.conf \"${pkgdir}/usr/lib/modprobe.d/${pkgname}.conf\"\n}\n```\n\n"
    },
    {
      "title": "dkms.conf",
      "level": 3,
      "content": "```\ndkms.conf\n```\n\n```\nPACKAGE_NAME=\"@_PKGBASE@\"\nPACKAGE_VERSION=\"@PKGVER@\"\nMAKE[0]=\"make --uname_r=$kernelver\"\nCLEAN=\"make clean\"\nBUILT_MODULE_NAME[0]=\"@_PKGBASE@\"\nDEST_MODULE_LOCATION[0]=\"/kernel/drivers/misc\"\nAUTOINSTALL=\"yes\"\n```\n\n"
    },
    {
      "title": ".install",
      "level": 3,
      "content": "This example shows a message on post-install and post-upgrade that suggests unloading a conflicting module (example-conflicting-module) and then loading this package's module (example) for immediate use, when the user do not want to reboot the system at this moment.\n\n```\nexample.install\n```\n\n```\npost_install() {\n  cat<<EOF\n\nUnload and load kernel modules:\n\n  rmmod example-conflicting-module\n  modprobe example\n\nEOF\n}\n\npost_upgrade() {\n  post_install\n}\n```\n\n"
    },
    {
      "title": "Module blacklist conf",
      "level": 3,
      "content": "When it is known that example-conflicting-module conflicts with this package's example module, it should be blacklisted:\n\n```\nexample-dkms.conf\n```\n\n```\nblacklist example-conflicting-module\n```\n\n"
    }
  ]
}