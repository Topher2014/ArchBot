{
  "title": "GNOME Keyring",
  "url": "https://wiki.archlinux.org/title/GNOME_Keyring",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- GnuPG\n- OpenPGP\n\nGNOME Keyring is \"a collection of components in GNOME that store secrets, passwords, keys, certificates and make them available to applications.\"\n\nIt provides org.freedesktop.secrets, an API that allows client applications to store secrets securely using a service running in the user's login session.\n\n"
    },
    {
      "title": "Protection against malicious application",
      "level": 3,
      "content": "There was a security issue (known as CVE-2018-19358) reported in the past regarding the behaviour of the GNOME/Keyring API. Any application can easily read any secret if the keyring is unlocked. And, if a user is logged in, then the login/default collection is unlocked. Available D-Bus protection mechanisms (involving the busconfig and policy XML elements) are not used by default and would be easy to bypass anyway.\n\nThe GNOME project disagrees with this vulnerability report because, according to their stated security model, untrusted applications must not be allowed to communicate with the secret service.\n\nApplications sandboxed via Flatpak only have filtered access to the session bus.\n\n"
    },
    {
      "title": "Keyring is not locked when session is locked",
      "level": 3,
      "content": "When the session is locked, the keyring is not automatically locked.[1] This means that the passwords remain in memory which opens the system up to a DMA attack.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "gnome-keyring is a member of the gnome group is thus usually present on systems running GNOME. The package can otherwise be installed on its own. libsecret should also be installed to grant other applications access to your keyrings. Although libgnome-keyring is deprecated (and superseded by libsecret), it may still be required by certain applications.\n\nThe gnome-keyring-daemon is automatically started via a systemd user service upon logging in. It can also be started upon request via a socket.\n\nExtra utilities related to GNOME Keyring include:\n\n- secret-tool — Access the GNOME Keyring (and any other service implementing the DBus Secret Service API) from the command line.\n\n- lssecret — List all secret items using libsecret (e.g. GNOME Keyring).\n\n"
    },
    {
      "title": "Manage using GUI",
      "level": 2,
      "content": "You can manage the contents of GNOME Keyring using Seahorse; install the seahorse package.\n\nPasswords for keyrings (e.g., the default keyring, \"Login\") can be changed and even removed. See Create a new keyring and Update the keyring password in GNOME Help for more information.\n\n"
    },
    {
      "title": "Using the keyring",
      "level": 2,
      "content": "The PAM module pam_gnome_keyring.so initialises GNOME Keyring partially, unlocking the login keyring in the process. The gnome-keyring-daemon is automatically started with a systemd user service.\n\n"
    },
    {
      "title": "PAM step",
      "level": 3,
      "content": "Note: **without automatic login** \n\n- To use automatic unlocking with automatic login, you can set a blank password for the keyring. Note that the contents of the keyring are stored unencrypted in this case.\n- Alternatively, if using GDM and LUKS, GDM can unlock your keyring if it matches your LUKS password. For this to work, you need to use the systemd init in your mkinitcpio.conf as well as the appropriate kernel parameters. See [2] for more details.\n- If you desire to skip the PAM step, the keyring must be unlocked manually or via another method. See #Using gnome-keyring-daemon outside desktop environments (KDE, GNOME, XFCE, ...) and the GnomeKeyring wiki.\n\nWhen using a display manager, the keyring works out of the box for most cases. GDM, LightDM, LXDM, and SDDM already have the necessary PAM configuration. For a display manager that does not automatically unlock the keyring edit the appropriate file instead of /etc/pam.d/login as mentioned below.\n\nWhen using console-based login, edit /etc/pam.d/login:\n\nAdd auth optional pam_gnome_keyring.so at the end of the auth section and session optional pam_gnome_keyring.so auto_start at the end of the session section.\n\n```\n/etc/pam.d/login\n```\n\n```\n#%PAM-1.0\n\nauth       required     pam_securetty.so\nauth       requisite    pam_nologin.so\nauth       include      system-local-login\nauth       optional     pam_gnome_keyring.so\naccount    include      system-local-login\nsession    include      system-local-login\nsession    optional     pam_gnome_keyring.so auto_start\n```\n\n"
    },
    {
      "title": "SSH keys",
      "level": 2,
      "content": "GNOME Keyring can act as a wrapper around ssh-agent. In that mode, it will display a GUI password entry dialog each time you need to unlock an SSH key. The dialog includes a checkbox to remember the password you type, which, if selected, will allow fully passwordless use of that key in the future as long as your login keyring is unlocked.\n\nThe SSH functionality is disabled by default in gnome-keyring-daemon builds since version 1:46. It has been moved into /usr/lib/gcr-ssh-agent, which is part of the gcr-4 package.\n\n"
    },
    {
      "title": "Setup gcr",
      "level": 3,
      "content": "All you need to do is:\n\n1. Enable the gcr-ssh-agent.socket systemd user unit.\n1. Start once the gcr-ssh-agent.socket systemd user unit. This will create socket file $XDG_RUNTIME_DIR/gcr/ssh. Once file is created, 1st step is sufficient to have socket unit started automatically.\n1. Manual configuration of SSH_AUTH_SOCK environment variable shall not be necessary, if gcr-ssh-agent.socket unit is active. The value of SSH_AUTH_SOCK environment variable shall be set to $XDG_RUNTIME_DIR/gcr/ssh after user logs out and logs in. This is known to work with Gnome Console application for user using fish as default shell.\n\nThere are many ways to set environment variables, and the one you use will depend on your specific setup and preferences.\n\n"
    },
    {
      "title": "Using",
      "level": 3,
      "content": "You can run\n\n```\n$ ssh-add -L\n```\n\nto list loaded SSH keys in the running agent. This can help ensure you started the appropriate service and set SSH_AUTH_SOCK correctly.\n\nTo permanently save a passphrase in the keyring, use ssh-askpass from the seahorse package:\n\n```\n$ /usr/lib/seahorse/ssh-askpass my_key\n```\n\nTo manually add an SSH key from another directory:\n\n```\n$ ssh-add ~/.private/id_rsa\nEnter passphrase for ~/.private/id_rsa:\n```\n\nTo disable all manually added keys:\n\n```\n$ ssh-add -D\n```\n\n"
    },
    {
      "title": "Disabling",
      "level": 3,
      "content": "If you wish to run an alternative SSH agent (e.g. ssh-agent directly or gpg-agent), it is a good idea to disable GNOME Keyring's ssh-agent wrapper. Doing so is not strictly necessary, since each agent listens on a different socket and SSH_AUTH_SOCK can be used to choose between them, but it can make debugging issues easier. Note that the GNOME implementation does not support many scripting features such BatchMode [3].\n\nTo disable gcr-ssh-agent, ensure gcr-ssh-agent.socket and gcr-ssh-agent.service are both disabled and stopped in systemd.\n\n"
    },
    {
      "title": "Integration with applications",
      "level": 3,
      "content": "- Chromium\n\n"
    },
    {
      "title": "Locking a keyring",
      "level": 3,
      "content": "```\n$ dbus-send --session --dest=org.freedesktop.secrets \\\n   --type=method_call  \\\n   /org/freedesktop/secrets \\\n   org.freedesktop.Secret.Service.Lock \\\n   array:objpath:/org/freedesktop/secrets/collection/login\n```\n\nThis command performs a D-Bus method call to lock the login keyring. Alternatively, if you want to use a GUI, Seahorse can be used lock the keyring.\n\n"
    },
    {
      "title": "Flushing passphrases",
      "level": 3,
      "content": "```\n$ gnome-keyring-daemon -r -d\n```\n\nThis command starts gnome-keyring-daemon, shutting down previously running instances.\n\n"
    },
    {
      "title": "Git integration",
      "level": 3,
      "content": "The GNOME keyring is useful in conjunction with Git when you are pushing over HTTPS. The libsecret package needs to be installed for this functionality to be available.\n\nConfigure Git to use the libsecret helper:\n\n```\n$ git config --global credential.helper /usr/lib/git-core/git-credential-libsecret\n```\n\nThe next time you run git push, you will be asked to unlock your keyring if it is not already unlocked.\n\n"
    },
    {
      "title": "GnuPG integration",
      "level": 3,
      "content": "Several applications which use GnuPG require a pinentry-program to be set. Set the following to use GNOME 3 pinentry for GNOME Keyring to manage passphrase prompts.\n\n```\n~/.gnupg/gpg-agent.conf\n```\n\n```\npinentry-program /usr/bin/pinentry-gnome3\n```\n\nAnother option is to force loopback for GPG which should allow the passphrase to be entered in the application.\n\n"
    },
    {
      "title": "Renaming a keyring",
      "level": 3,
      "content": "The display name for a keyring (i.e., the name that appears in Seahorse and from file) can be changed by changing the value of display-name in the unencrypted keyring file. Keyrings will usually be stored in ~/.local/share/keyrings/ with the .keyring file extension.\n\n"
    },
    {
      "title": "Automatically change keyring password with user password",
      "level": 3,
      "content": "Append password optional pam_gnome_keyring.so to /etc/pam.d/passwd:\n\n```\n/etc/pam.d/passwd\n```\n\n```\n...\npassword\toptional\tpam_gnome_keyring.so\n```\n\n"
    },
    {
      "title": "Launching",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nIf you are using sway, i3, or any window manager that does not execute\n\n- /etc/xdg/autostart/gnome-keyring-*.desktop\n- /etc/X11/xinit/xinitrc.d/50-systemd-user.sh\n\nyour window manager needs to execute the following commands during window manager startup. The commands do not need to be executed in any specific order.\n\n```\ndbus-update-activation-environment DISPLAY XAUTHORITY WAYLAND_DISPLAY\n```\n\nor\n\n```\ndbus-update-activation-environment --all\n```\n\nThis command passes environment variables from the window manager to session dbus. Without this, GUI prompts cannot be triggered over DBus. For example, this is required for seahorse password prompt.\n\nThis is required because session dbus is started before graphical environment is started. Thus, session dbus does not know about the graphical environment you are in. Someone or something has to teach session dbus about the graphical environment by passing environment variables describing the graphical environment to session dbus.\n\n```\ngnome-keyring-daemon --start --components=secrets\n```\n\nDuring login, PAM starts gnome-keyring-daemon --login which is responsible for keeping gnome-keyring unlocked with login password. If gnome-keyring-daemon --login is not connected to session dbus within a few minutes, gnome-keyring-daemon --login dies. If gnome-keyring-daemon --start ... is started against session dbus in a window manager, gnome-keyring-daemon --login is connected to session dbus. If your login session does not start gnome-keyring-daemon --start ... before gnome-keyring-daemon --login quits, you can also use any program that uses gnome-keyring or secret service API before gnome-keyring-daemon --login dies.\n\n"
    },
    {
      "title": "GNOME Keyring XDG Portal",
      "level": 4,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nGNOME Keyring exposes an XDG Portal backend (for use with applications sandboxed through flatpak for example). In order for it to work outside of GNOME, one must add their desktop environment to the /usr/share/xdg-desktop-portal/portals/gnome-keyring.portal configuration file by modifying the UseIn key. For instance, to add sway:\n\n```\n/usr/share/xdg-desktop-portal/portals/gnome-keyring.portal\n```\n\n```\n[portal]\nDBusName=org.freedesktop.secrets\nInterfaces=org.freedesktop.impl.portal.Secret\nUseIn=gnome;sway\n```\n\nSee XDG Desktop Portal#Backends for more information about XDG Desktop Portal backends.\n\n"
    },
    {
      "title": "Passwords are not remembered",
      "level": 3,
      "content": "If you are prompted for a password after logging in and you find that your passwords are not saved, then you may need to create/set a default keyring. To do this using Seahorse (a.k.a. Passwords and Keys), see Create a new keyring and Change the default keyring in GNOME Help.\n\n"
    },
    {
      "title": "Resetting the keyring",
      "level": 3,
      "content": "You will need to change your login keyring password if you receive the following error message: \"The password you use to login to your computer no longer matches that of your login keyring\".\n\nAlternatively, you can remove the login.keyring and user.keystore files from ~/.local/share/keyrings/. Be warned that this will permanently delete all saved keys. After removing the files, simply log out and log in again.\n\n"
    },
    {
      "title": "Unable to locate daemon control file",
      "level": 3,
      "content": "The following error may appear in the journal after logging in:\n\n```\ngkr-pam: unable to locate daemon control file\n```\n\nThis message \"can be safely ignored\" if there are no other related issues [4].\n\n"
    },
    {
      "title": "No such secret collection at path: /",
      "level": 3,
      "content": "If you try to add a new keyring with Seahorse you may receive this error due to the following reasons:\n\n- The ~/.local/share/keyrings/ directory does not exist. Create it if missing.\n- A custom ~/.xinitrc is used. This may be solved by adding the following line [5]\n\n```\n~/.xinitrc\n```\n\n```\nsource /etc/X11/xinit/xinitrc.d/50-systemd-user.sh\n```\n\n"
    },
    {
      "title": "Terminal gives the message \"discover_other_daemon: 1\"",
      "level": 3,
      "content": "This is caused by gnome-keyring-daemon being started for the second time. Since a systemd service is delivered together with the daemon, you do not need to start it another way. So make sure to remove the start command from your .zshenv, .bash_profile, .xinitrc, config.fish or similar. Alternatively you can disable the gnome-keyring-daemon.service and gnome-keyring-daemon.socket user units.\n\n"
    },
    {
      "title": "Improper initialization of the keyring",
      "level": 3,
      "content": "There are a few symptoms of this:\n\n- Programs like SSH or Git hang while waiting for the keyring to provide a password, eventually timing out with errors such as \"agent refused operation\".\n- Seahorse does not display any keyring, and manually creating a keyring named \"login\" does not appear to do anything.\n- The following error message appears in seahorse's output: couldn't load all secret collections: No such secret collection at path: /org/freedesktop/secrets/collection/login\n\n```\ncouldn't load all secret collections: No such secret collection at path: /org/freedesktop/secrets/collection/login\n```\n\nTo address this, do the following:\n\n1. Restart the gnome-keyring-daemon.service systemd user unit. This should properly initialize the login keyring.\n1. Restart the gcr-ssh-agent.service systemd user unit if used. Other agents might also need restarting.\n\nIf this does not fix the issue, consider resetting the keyring.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- https://help.gnome.org/users/seahorse/stable/\n- GNOME Wiki page (Archived)\n- Packages providing org.freedesktop.secrets\n\n"
    }
  ]
}