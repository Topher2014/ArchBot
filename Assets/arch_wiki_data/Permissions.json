{
  "title": "Permissions",
  "url": "https://wiki.archlinux.org/title/Permissions",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Users and groups\n- umask\n- Access Control Lists\n- Capabilities\n- Extended attributes\n\nFile systems use permissions and attributes to regulate the level of interaction that system processes can have with files and directories.\n\n"
    },
    {
      "title": "Viewing permissions",
      "level": 2,
      "content": "Use the ls command's -l option to view the permissions (or file mode) set for the contents of a directory, for example:\n\n```\n$ ls -l /path/to/directory\n```\n\n```\ntotal 128\ndrwxr-xr-x 2 archie archie  4096 Jul  5 21:03 Desktop\ndrwxr-xr-x 6 archie archie  4096 Jul  5 17:37 Documents\ndrwxr-xr-x 2 archie archie  4096 Jul  5 13:45 Downloads\n-rw-rw-r-- 1 archie archie  5120 Jun 27 08:28 customers.ods\n-rw-r--r-- 1 archie archie  3339 Jun 27 08:28 todo\n-rwxr-xr-x 1 archie archie  2048 Jul  6 12:56 myscript.sh\n```\n\nThe first column is what we must focus on. Taking an example value of drwxrwxrwx+, the meaning of each character is explained in the following tables:\n\nTable content:\nd | rwx | rwx | rwx | +\nThe file type, technically not part of its permissions. See info ls -n \"What information is listed\" for an explanation of the possible values. | The permissions that the owner has over the file, explained below. | The permissions that the group has over the file, explained below. | The permissions that all the other users have over the file, explained below. | A single character that specifies whether an alternate access method applies to the file. When this character is a space, there is no alternate access method. A . character indicates a file with a security context, but no other alternate access method. A file with any other combination of alternate access methods is marked with a + character, for example in the case of Access Control Lists.\n\nEach of the three permission triads (rwx in the example above) can be made up of the following characters:\n\nTable content:\n | Character | Effect on files | Effect on directories\nRead permission (first character) | - | The file cannot be read. | The directory's contents cannot be shown.\nr | The file can be read. | The directory's contents can be shown.\nWrite permission (second character) | - | The file cannot be modified. | The directory's contents cannot be modified.\nw | The file can be modified. | The directory's contents can be modified (create new files or directories; rename or delete existing files or directories); requires the execute permission to be also set, otherwise this permission has no effect.\nExecute permission (third character) | - | The file cannot be executed. | The directory cannot be accessed with cd.\nx | The file can be executed. | The directory can be accessed with cd; this is the only permission bit that in practice can be considered to be \"inherited\" from the ancestor directories, in fact if any directory in the path does not have the x bit set, the final file or directory cannot be accessed either, regardless of its permissions; see path_resolution(7) for more information.\ns | The setuid bit when found in the user triad; the setgid bit when found in the group triad; it is not found in the others triad; it also implies that x is set.\nS | Same as s, but x is not set; rare on regular files, and useless on directories.\nt | The sticky bit; it can only be found in the others triad; it also implies that x is set.\nT | Same as t, but x is not set; rare on regular files.\n\nSee info Coreutils -n \"Mode Structure\" and chmod(1) for more details.\n\n"
    },
    {
      "title": "Examples",
      "level": 3,
      "content": "Let us see some examples to clarify:\n\n```\ndrwx------ 6 archie archie  4096 Jul  5 17:37 Documents\n```\n\nArchie has full access to the Documents directory. They can list, create files and rename, delete any file in Documents, regardless of file permissions. Their ability to access a file depends on the file's permissions.\n\n```\ndr-x------ 6 archie archie  4096 Jul  5 17:37 Documents\n```\n\nArchie has full access except they can not create, rename, delete any file. They can list the files and (if the file's permissions allow it) may access an existing file in Documents.\n\n```\nd-wx------ 6 archie archie  4096 Jul  5 17:37 Documents\n```\n\nArchie can not do ls in the Documents directory but if they know the name of an existing file then they may list, rename, delete or (if the file's permissions allow it) access it. Also, they are able to create new files.\n\n```\nd--x------ 6 archie archie  4096 Jul  5 17:37 Documents\n```\n\nArchie is only capable of (if the file's permissions allow it) accessing those files the Documents directory which they know of. They can not list already existing files or create, rename, delete any of them.\n\nYou should keep in mind that we elaborate on directory permissions and it has nothing to do with the individual file permissions. When you create a new file it is the directory that changes. That is why you need write permission to the directory.\n\nLet us look at another example, this time of a file, not a directory:\n\n```\n-rw-r--r-- 1 archie web  5120 Jun 27 08:28 foobar\n```\n\nHere we can see the first letter is not d but -. So we know it is a file, not a directory. Next the owner's permissions are rw- so the owner has the ability to read and write but not execute. This may seem odd that the owner does not have all three permissions, but the x permission is not needed as it is a text/data file, to be read by a text editor such as Gedit, EMACS, or software like R, and not an executable in its own right (if it contained something like python programming code then it very well could be). The group's permissions are set to r--, so the group has the ability to read the file but not write/edit it in any way — it is essentially like setting something to read-only. We can see that the same permissions apply to everyone else as well.\n\n"
    },
    {
      "title": "Changing permissions",
      "level": 2,
      "content": "chmod is a command in Linux and other Unix-like operating systems that allows to change the permissions (or access mode) of a file or directory.\n\n"
    },
    {
      "title": "Text method",
      "level": 3,
      "content": "To change the permissions — or access mode — of a file, use the chmod command in a terminal. Below is the command's general structure:\n\n```\nchmod who=permissions filename\n```\n\nWhere who is any from a range of letters, each signifying who is being given the permission. They are as follows:\n\n- u: the user that owns the file.\n- g: the user group that the file belongs to.\n- o: the other users, i.e. everyone else.\n- a: all of the above; use this instead of typing ugo.\n\nThe permissions are the same as discussed in #Viewing permissions (r, w and x).\n\nNow have a look at some examples using this command. Suppose you became very protective of the Documents directory and wanted to deny everybody but yourself, permissions to read, write, and execute (or in this case search/look) in it:\n\nBefore: drwxr-xr-x 6 archie web 4096 Jul 5 17:37 Documents\n\n```\n$ chmod g= Documents\n$ chmod o= Documents\n```\n\nAfter: drwx------ 6 archie web 4096 Jul 6 17:32 Documents\n\nHere, because you want to deny permissions, you do not put any letters after the = where permissions would be entered. Now you can see that only the owner's permissions are rwx and all other permissions are -.\n\nThis can be reverted with:\n\nBefore: drwx------ 6 archie web 4096 Jul 6 17:32 Documents\n\n```\n$ chmod g=rx Documents\n$ chmod o=rx Documents\n```\n\nAfter: drwxr-xr-x 6 archie web 4096 Jul 6 17:32 Documents\n\nIn the next example, you want to grant read and execute permissions to the group, and other users, so you put the letters for the permissions (r and x) after the =, with no spaces.\n\nYou can simplify this to put more than one who letter in the same command, e.g:\n\n```\n$ chmod go=rx Documents\n```\n\nNow let us consider a second example, suppose you want to change a foobar file so that you have read and write permissions, and fellow users in the group web who may be colleagues working on foobar, can also read and write to it, but other users can only read it:\n\nBefore: -rw-r--r-- 1 archie web 5120 Jun 27 08:28 foobar\n\n```\n$ chmod g=rw foobar\n```\n\nAfter: -rw-rw-r-- 1 archie web 5120 Jun 27 08:28 foobar\n\nThis is exactly like the first example, but with a file, not a directory, and you grant write permission (just so as to give an example of granting every permission).\n\n"
    },
    {
      "title": "Text method shortcuts",
      "level": 4,
      "content": "The chmod command lets add and subtract permissions from an existing set using + or - instead of =. This is different from the above commands, which essentially re-write the permissions (e.g. to change a permission from r-- to rw-, you still need to include r as well as w after the = in the chmod command invocation. If you missed out r, it would take away the r permission as they are being re-written with the =. Using + and - avoids this by adding or taking away from the current set of permissions).\n\nLet us try this + and - method with the previous example of adding write permissions to the group:\n\nBefore: -rw-r--r-- 1 archie web 5120 Jun 27 08:28 foobar\n\n```\n$ chmod g+w foobar\n```\n\nAfter: -rw-rw-r-- 1 archie web 5120 Jun 27 08:28 foobar\n\nAnother example, denying write permissions to all (a):\n\nBefore: -rw-rw-r-- 1 archie web 5120 Jun 27 08:28 foobar\n\n```\n$ chmod a-w foobar\n```\n\nAfter: -r--r--r-- 1 archie web 5120 Jun 27 08:28 foobar\n\nA different shortcut is the special X mode: this is not an actual file mode, but it is often used in conjunction with the -R option to set the executable bit only for directories, and leave it unchanged for regular files, for example:\n\n```\n$ chmod -R a+rX ./data/\n```\n\n"
    },
    {
      "title": "Copying permissions",
      "level": 4,
      "content": "It is possible to tell chmod to copy the permissions from one class, say the owner, and give those same permissions to group or even all. To do this, instead of putting r, w, or x after the =, put another who letter. e.g:\n\nBefore: -rw-r--r-- 1 archie web 5120 Jun 27 08:28 foobar\n\n```\n$ chmod g=u foobar\n```\n\nAfter: -rw-rw-r-- 1 archie web 5120 Jun 27 08:28 foobar\n\nThis command essentially translates to \"change the permissions of group (g=), to be the same as the owning user (=u). Note that you cannot copy a set of permissions as well as grant new ones e.g.:\n\n```\n$ chmod g=wu foobar\n```\n\nIn that case chmod throw an error.\n\n"
    },
    {
      "title": "Numeric method",
      "level": 3,
      "content": "chmod can also set permissions using numbers.\n\nUsing numbers is another method which allows you to edit the permissions for all three owner, group, and others at the same time, as well as the setuid, setgid, and sticky bits. This basic structure of the code is this:\n\n```\n$ chmod xxx filename\n```\n\nWhere xxx is a 3-digit number where each digit can be anything from 0 to 7. The first digit applies to permissions for owner, the second digit applies to permissions for group, and the third digit applies to permissions for all others.\n\nIn this number notation, the values r, w, and x have their own number value:\n\n```\nr=4\nw=2\nx=1\n```\n\nTo come up with a 3-digit number you need to consider what permissions you want owner, group, and all others to have, and then total their values up. For example, if you want to grant the owner of a directory read write and execution permissions, and you want group and everyone else to have just read and execute permissions, you would come up with the numerical values like so:\n\n- Owner: rwx=4+2+1=7\n- Group: r-x=4+0+1=5\n- Other: r-x=4+0+1=5\n\n```\n$ chmod 755 filename\n```\n\nThis is the equivalent of using the following:\n\n```\n$ chmod u=rwx filename\n$ chmod go=rx filename\n```\n\nTo view the existing permissions of a file or directory in numeric form, use the stat(1) command:\n\n```\n$ stat -c %a filename\n```\n\nWhere the %a option specifies output in numeric form.\n\nMost directories are set to 755 to allow reading, writing and execution to the owner, but deny writing to everyone else, and files are normally 644 to allow reading and writing for the owner but just reading for everyone else; refer to the last note on the lack of x permissions with non executable files: it is the same thing here.\n\nTo see this in action with examples consider the previous example that has been used but with this numerical method applied instead:\n\nBefore: -rw-r--r-- 1 archie web 5120 Jun 27 08:28 foobar\n\n```\n$ chmod 664 foobar\n```\n\nAfter: -rw-rw-r-- 1 archie web 5120 Jun 27 08:28 foobar\n\nIf this were an executable the number would be 774 if you wanted to grant executable permission to the owner and group. Alternatively if you wanted everyone to only have read permission the number would be 444. Treating r as 4, w as 2, and x as 1 is probably the easiest way to work out the numerical values for using chmod xxx filename, but there is also a binary method, where each permission has a binary number, and then that is in turn converted to a number. It is a bit more convoluted, but here included for completeness.\n\nConsider this permission set:\n\n```\n-rwxr-xr--\n```\n\nIf you put a 1 under each permission granted, and a 0 for every one not granted, the result would be something like this:\n\n```\n-rwxrwxr-x\n 111111101\n```\n\nYou can then convert these binary numbers:\n\n```\n000=0\t    100=4\n001=1\t    101=5\n010=2\t    110=6\n011=3\t    111=7\n```\n\nThe value of the above would therefore be 775.\n\nConsider we wanted to remove the writable permission from group:\n\n```\n-rwxr-xr-x\n 111101101\n```\n\nThe value would therefore be 755 and you would use chmod 755 filename to remove the writable permission. You will notice you get the same three digit number no matter which method you use. Whether you use text or numbers will depend on personal preference and typing speed. When you want to restore a directory or file to default permissions e.g. read and write (and execute) permission to the owner but deny write permission to everyone else, it may be faster to use chmod 755/644 filename. However if you are changing the permissions to something out of the norm, it may be simpler and quicker to use the text method as opposed to trying to convert it to numbers, which may lead to a mistake. It could be argued that there is not any real significant difference in the speed of either method for a user that only needs to use chmod on occasion.\n\nYou can also use the numeric method to set the setuid, setgid, and sticky bits by using four digits.\n\n```\nsetuid=4\nsetgid=2\nsticky=1\n```\n\nFor example, chmod 2777 filename will set read/write/executable bits for everyone and also enable the setgid bit.\n\n"
    },
    {
      "title": "Bulk chmod",
      "level": 3,
      "content": "Generally directories and files should not have the same permissions. If it is necessary to bulk modify a directory tree, use find to selectively modify one or the other.\n\nTo chmod only directories to 755:\n\n```\n$ find directory -type d -exec chmod 755 {} +\n```\n\nTo chmod only files to 644:\n\n```\n$ find directory -type f -exec chmod 644 {} +\n```\n\n"
    },
    {
      "title": "Changing ownership",
      "level": 2,
      "content": "chown changes the owner of a file or directory, which is quicker and easier than altering the permissions in some cases.\n\nConsider the following example, making a new partition with GParted for backup data. Gparted does this all as root so everything belongs to root by default. This is all well and good but when it comes to writing data to the mounted partition, permission is denied for regular users.\n\n```\nbrw-rw---- 1 root disk 8,    9 Jul  6 16:02 sda9\ndrwxr-xr-x 5 root root    4096 Jul  6 16:01 Backup\n```\n\nAs you can see the device in /dev is owned by root, as is the mount location (/media/Backup). To change the owner of the mount location one can do the following:\n\nBefore: drwxr-xr-x 5 root root 4096 Jul 6 16:01 Backup\n\n```\n# chown archie /media/Backup\n```\n\nAfter: drwxr-xr-x 5 archie root 4096 Jul 6 16:01 Backup\n\nNow the partition can have data written to it by the new owner, archie, without altering the permissions (as the owner triad already had rwx permissions).\n\n- chown always clears the setuid and setgid bits.\n- Non-root users cannot use chown to \"give away\" files they own to another user.\n\n"
    },
    {
      "title": "Access Control Lists",
      "level": 2,
      "content": "Access Control Lists provides an additional, more flexible permission mechanism for file systems by allowing to set permissions for any user or group to any file.\n\n"
    },
    {
      "title": "Umask",
      "level": 2,
      "content": "The umask utility is used to control the file-creation mode mask, which determines the initial value of file permission bits for newly created files.\n\n"
    },
    {
      "title": "File attributes",
      "level": 2,
      "content": "Apart from the file mode bits that control user and group read, write and execute permissions, several file systems support file attributes that enable further customization of allowable file operations.\n\nThe e2fsprogs package contains the programs lsattr(1) and chattr(1) that list and change a file's attributes, respectively.\n\nThese are a few useful attributes. Not all filesystems support every attribute.\n\n- a - append only: File can only be opened for appending.\n- c - compressed: Enable filesystem-level compression for the file.\n- i - immutable: Cannot be modified, deleted, renamed, linked to. Can only be set by root.\n- j - data journaling: Use the journal for file data writes as well as metadata.\n- m - no compression: Disable filesystem-level compression for the file.\n- A - no atime update: The file's atime will not be modified.\n- C - no copy on write: Disable copy-on-write, for filesystems that support it.\n\nSee chattr(1) for a complete list of attributes and for more info on what each attribute does.\n\nFor example, if you want to set the immutable bit on some file, use the following command:\n\n```\n# chattr +i /path/to/file\n```\n\nTo remove an attribute on a file just change + to -.\n\n"
    },
    {
      "title": "Extended attributes",
      "level": 2,
      "content": "See Extended attributes.\n\n"
    },
    {
      "title": "Preserve root",
      "level": 3,
      "content": "Use the --preserve-root flag to prevent chmod from acting recursively on /. This can, for example, prevent one from removing the executable bit systemwide and thus breaking the system. To use this flag every time, set it within an alias. See also [1].\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- wikipedia:Chattr\n- Linux File Permission Confusion\n- Linux File Permission Confusion part 2\n- Backup and restore file permissions in Linux\n- Why is \"chmod -R 777 /\" destructive?\n- The How and Why of User Private Groups in Unix\n\n"
    }
  ]
}