{
  "title": "VLAN 101",
  "url": "https://wiki.archlinux.org/title/VLAN_101",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Network configuration\n- Network tools\n- Netctl\n- systemd-networkd\n\nVirtual LANs give you the ability to subdivide a LAN. Linux can accept VLAN tagged traffic and presents each VLAN ID as a different network interface (eg: eth0.100 for VLAN ID 100).\n\nThis article explains how to configure a VLAN using iproute2 and systemd-networkd or netctl.\n\n"
    },
    {
      "title": "Instant Configuration",
      "level": 2,
      "content": "In the following examples, let us assume the interface is eth0, the assigned name is eth0.100 and the VLAN ID is 100.\n\n"
    },
    {
      "title": "Create the VLAN device",
      "level": 3,
      "content": "Add the VLAN interface with the following command:\n\n```\n# ip link add link eth0 name eth0.100 type vlan id 100\n```\n\nRun ip link to confirm that it has been created.\n\nThis interface behaves like a normal interface. All traffic routed to it will go through the master interface (in this example, eth0) but with a VLAN tag. Only VLAN-aware devices can accept them if configured correctly, else the traffic is dropped.\n\nUsing a name like eth0.100 is just convention and not enforced; you can alternatively use eth0_100 or something descriptive like IPTV. To see the VLAN ID on an interface, in case you used an unconventional name:\n\n```\n# ip -details link show eth0.100\n```\n\nThe -details (-d) flag shows full details of an interface:\n\n```\n# ip -details addr show\n4: eth0.100@eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default \n   link/ether 96:4a:9c:84:36:51 brd ff:ff:ff:ff:ff:ff promiscuity 0 \n   vlan protocol 802.1Q id 100 <REORDER_HDR> \n   inet6 fe80::944a:9cff:fe84:3651/64 scope link \n      valid_lft forever preferred_lft forever\n```\n\n"
    },
    {
      "title": "Add an IP",
      "level": 3,
      "content": "Now add an IPv4 address to the just created VLAN link, and activate the link:\n\n```\n# ip addr add 192.168.100.1/24 brd 192.168.100.255 dev eth0.100\n# ip link set dev eth0.100 up\n```\n\n"
    },
    {
      "title": "Turning down the device",
      "level": 3,
      "content": "To cleanly shut down the setting before you remove the link, you can do:\n\n```\n# ip link set dev eth0.100 down\n```\n\n"
    },
    {
      "title": "Removing the device",
      "level": 3,
      "content": "Removing a VLAN interface is significantly less convoluted\n\n```\n# ip link delete eth0.100\n```\n\n"
    },
    {
      "title": "Single interface",
      "level": 4,
      "content": "Use the following number-prefixed configuration files (Remember the file contents are case sensitive and the number-prefix can be changed):\n\n```\n/etc/systemd/network/10-eth0.network\n```\n\n```\n[Match]\nName=eth0\n\n[Network]\nDHCP=ipv4\n;these are arbitrary names, but must match the *.netdev and *.network files\nVLAN=eth0.100\nVLAN=eth0.200\n```\n\n```\n/etc/systemd/network/20-eth0.100.netdev\n```\n\n```\n[NetDev]\nName=eth0.100\nKind=vlan\n\n[VLAN]\nId=100\n```\n\n```\n/etc/systemd/network/21-eth0.200.netdev\n```\n\n```\n[NetDev]\nName=eth0.200\nKind=vlan\n\n[VLAN]\nId=200\n```\n\nYou will have to have associated .network files for each .netdev to handle addressing and routing. For example, to set the eth0.100 interface with a static IP and the eth0.200 interface with DHCP (but ignoring the supplied default route), use:\n\n```\n/etc/systemd/network/30-eth0.100.network\n```\n\n```\n[Match]\nName=eth0.100\n\n[Network]\nDHCP=no\n\n[Address]\nAddress=192.168.0.25/24\n```\n\n```\n/etc/systemd/network/31-eth0.200.network\n```\n\n```\n[Match]\nName=eth0.200\n\n[Network]\nDHCP=yes\n\n[DHCP]\nUseRoutes=false\n```\n\nThen enable systemd-networkd.service. See systemd-networkd for details.\n\n"
    },
    {
      "title": "Single interface with multiple VLANs each with its own gateway",
      "level": 4,
      "content": "Each vlan gets its own routing table and a RoutingPolicyRule that specifies which source ip addresses this routing applies to.\n\n```\n/etc/systemd/network/10-eth0.network\n```\n\n```\n[Match]\nName=eth0\n\n[Network]\nVLAN=eth0.10\nVLAN=eth0.11\nDNS=192.168.100.101\nDNS=192.168.100.102\n```\n\n```\n/etc/systemd/network/20-eth0.10.netdev\n```\n\n```\n[NetDev]\nName=eth0.10\nKind=vlan\n\n[VLAN]\nId=10\n```\n\n```\n/etc/systemd/network/30-eth0.10.network\n```\n\n```\n[Match]\nName=eth0.10\n\n[Network]\nAddress=192.168.1.14/24\nAddress=192.168.1.24/24\n\n[Route]\nGateway=192.168.1.1\nTable=10\n\n[RoutingPolicyRule]\nFrom=192.168.1.0/24\nTable=10\n```\n\n```\n/etc/systemd/network/21-eth0.11.netdev\n```\n\n```\n[NetDev]\nName=eth0.11\nKind=vlan\n\n[VLAN]\nId=11\n```\n\n```\n/etc/systemd/network/31-eth0.11.network\n```\n\n```\n[Match]\nName=eth0.11\n\n[Network]\nAddress=192.168.100.54/24\n\n[Route]\nGateway=192.168.100.1\nTable=11\n\n[RoutingPolicyRule]\nFrom=192.168.100.0/24\nTable=11\n```\n\n```\n# ip rule\n```\n\n```\n0:      from all lookup local\n0:      from 192.168.1.0/24 lookup 10\n0:      from 192.168.100.0/24 lookup 11\n32766:  from all lookup main\n32767:  from all lookup default\n```\n\nUse ip route list table. E.g.:\n\n```\n# ip route list table 10\n```\n\n```\ndefault via 192.168.1.1 dev enp1.10 proto static\n```\n\n```\n# ip route list table 11\n```\n\n```\ndefault via 192.168.100.1 dev enp1.11 proto static\n```\n\n"
    },
    {
      "title": "Bonded interface",
      "level": 4,
      "content": "Similar to above, you are just going to stack more of the concepts in place. You will want to ensure that you have got a bond set up in your switch and also make sure its a trunk with tagged vlans corresponding to what you create below. Convention would be to create a bond interface with the name bond0, however there is a known issue where the bonding module, when loaded, creates a bond device of the name bond0 which systemd then refuses to configure (as systemd tries to respectfully leave alone any device it did not create).\n\n```\n/etc/modprobe.d/bonding.conf\n```\n\n```\noptions bonding max_bonds=0\n```\n\nFor the purposes of this write up, we are going to use bondname and you can make the choice yourself.\n\nFirst, we create the bond device:\n\n```\n/etc/systemd/network/bondname.netdev\n```\n\n```\n[NetDev]\nName=bondname\nKind=bond\n\n[Bond]\nMode=802.3ad\nLACPTransmitRate=fast\n```\n\nNow create a .network directive that references the vlans and interface carriers. In this case we will use the convention for a dual port fiber module:\n\n```\n/etc/systemd/network/bondname.network\n```\n\n```\n[Match]\nName=bondname\n\n[Network]\nVLAN=vlan10\nVLAN=vlan20\nVLAN=vlan30\nBindCarrier=enp3s0f0 enp3s0f1\n```\n\nWe are using the vlan<number> naming convention here, you can use something else but realize that this is a named reference so you will have to have a corresponding set of files with the same name.\n\nWe will now set up the physical network interfaces:\n\n```\n/etc/systemd/network/enp3s0f0.network\n```\n\n```\n[Match]\nName=enp3s0f0\n\n[Network]\nBond=bondname\n```\n\n```\n/etc/systemd/network/enp3s0f1.network\n```\n\n```\n[Match]\nName=enp3s0f1\n\n[Network]\nBond=bondname\n```\n\nAt this time you could reboot, and likely should, because the bonded interface is created at boot time. Restarting systemd-networkd will consume changes from these files typically, but device creation seems to occur at startup.\n\nWe will now set up the VLANs. You should be aware that having multiple VLANs can result in a situation where your machine has multiple default routes, so you will need to specify a Destination directive in the network directives to ensure that only one VLAN is being used for a default route. In this case we will use the VLAN with an ID of 10 as our default route.\n\n```\n/etc/systemd/network/vlan10.netdev\n```\n\n```\n[NetDev]\nName=vlan10\nKind=vlan\n\n[VLAN]\nId=10\n```\n\nNow create the associated network directive to set an address:\n\n```\n/etc/systemd/network/vlan10.network\n```\n\n```\n[Match]\nName=vlan10\n\n[Network]\nVLAN=vlan10\n\n[Address]\nAddress=10.10.10.2/24\n\n[Route]\nDestination=0.0.0.0/0\nGateway=10.10.10.1\n```\n\nWe will create a similar pair of files for the VLAN with an ID of 20:\n\n```\n/etc/systemd/network/vlan20.netdev\n```\n\n```\n[NetDev]\nName=vlan20\nKind=vlan\n\n[VLAN]\nId=20\n```\n\n```\n/etc/systemd/network/vlan20.network\n```\n\n```\n[Match]\nName=vlan20\n\n[Network]\nVLAN=vlan20\n\n[Address]\nAddress=10.10.20.2/24\n\n[Route]\nDestination=10.10.20.0/24\nGateway=10.10.20.1\n```\n\nAnd again for the VLAN with an ID of 30:\n\n```\n/etc/systemd/network/vlan30.netdev\n```\n\n```\n[NetDev]\nName=vlan30\nKind=vlan\n\n[VLAN]\nId=30\n```\n\n```\n/etc/systemd/network/vlan30.network\n```\n\n```\n[Match]\nName=vlan30\n\n[Network]\nVLAN=vlan30\n\n[Address]\nAddress=10.10.30.2/24\n\n[Route]\nDestination=10.10.30.0/24\nGateway=10.10.30.1\n```\n\nNote that the Destination on vlan10 is set to 0.0.0.0/0, which will match all outbound, becoming the default route.\n\n"
    },
    {
      "title": "netctl",
      "level": 3,
      "content": "You can use netctl for this purpose, see the self-explanatory example profiles in /etc/netctl/examples/vlan-{dhcp,static}.\n\n"
    },
    {
      "title": "Setting bridge IP",
      "level": 3,
      "content": "Sometimes you might want to configure the bridge ip on which docker operates, for example when the default ip clashes with other ip addresses in the network. Docker has a straight forward way of setting the bip (bridge IP) via the /etc/docker/daemon.json. When this file does not exist yet you can create it.\n\n```\n/etc/docker/docker.json\n```\n\n```\n{\n    \"bip\": \"<desired ip range>/24\"\n}\n```\n\n"
    },
    {
      "title": "udev renames the virtual devices",
      "level": 3,
      "content": "An annoyance is that udev may try to rename virtual devices as they are added, thus ignoring the name configured for them (in this case eth0.100):\n\n```\n# ip link add link eth0 name eth0.100 type vlan id 100\n# ip link show\n```\n\nThis could generate the following output:\n\n```\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue state UNKNOWN \n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP qlen 1000\n    link/ether aa:bb:cc:dd:ee:ff brd ff:ff:ff:ff:ff:ff\n3: rename1@eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state DOWN \n    link/ether aa:bb:cc:dd:ee:ff brd ff:ff:ff:ff:ff:ff\n```\n\nudev has ignored the configured virtual interface name eth0.100 and named it rename1.\n\nThe solution is to edit /etc/udev/rules.d/network_persistent.rules and append DRIVERS==\"?*\" to the end of the physical interface configuration line.\n\nFor example, for the interface aa:bb:cc:dd:ee:ff (eth0):\n\n```\n/etc/udev/rules.d/network_persistent.rules\n```\n\n```\nSUBSYSTEM==\"net\", ATTR{address}==\"aa:bb:cc:dd:ee:ff\", NAME=\"eth0\", DRIVERS==\"?*\"\n```\n\nA reboot should mean that VLANs configure correctly with the names assigned to them.\n\n"
    }
  ]
}