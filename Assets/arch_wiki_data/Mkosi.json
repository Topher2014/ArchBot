{
  "title": "Mkosi",
  "url": "https://wiki.archlinux.org/title/Mkosi",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- systemd\n- systemd-nspawn\n- Linux Containers\n- Docker\n\nmkosi stands for Make Operating System Image, and is a tool for generating an OS tree or image that can be booted.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install mkosi or mkosi-gitAUR. Depending on what distribution you want to use in your OS tree/image, install the following packages:\n\nTable content:\nDistribution | Package\nArch | arch-install-scripts\nDebian | debootstrap, debian-archive-keyring, apt\nUbuntu | debootstrap, ubuntu-keyring, apt\nFedora | dnf\nOpenSUSE | zypper-gitAUR\nCentOS | dnf-legacy-utilsAUR\n\n"
    },
    {
      "title": "Basic usage",
      "level": 2,
      "content": "You can create an image by just running it without any arguments:\n\n```\n# mkosi\n```\n\nYou can specify option as arguments or by editing files in the current folder.\n\n"
    },
    {
      "title": "Create and boot a Debian image",
      "level": 3,
      "content": "The following example will create a bootable image with the latest Debian version and packages openssh-client and vim installed. This command requires mkosi's optional dependencies mtools and systemd-ukify. Depending on the image, can also be built by an unprivileged (non-root) user:\n\n```\n$ mkosi --distribution debian --release bookworm --format disk --bootable --checksum --root-password password --package linux-image-generic,systemd,systemd-boot,systemd-sysv,udev,dbus --package openssh-client,vim --output image.raw\n```\n\nsystemd-nspawn can boot the resulting image:\n\n```\n# systemd-nspawn --boot --image image.raw\n```\n\nIt can also be virtualized with QEMU/KVM or with systemd-vmspawn(1):\n\n```\n$ mkosi --output image.raw --qemu-smp 2 qemu\n```\n\nYou can also write this image to a USB drive and use it to boot your computer.\n\n"
    },
    {
      "title": "Using configuration files",
      "level": 3,
      "content": "The same Debian image can be created using a configuration file, mkosi.conf, and then run mkosi without any arguments:\n\n```\nmkosi.conf\n```\n\n```\n[Distribution]\nDistribution=debian\nRelease=bookworm\n\n[Output]\nFormat=disk\nOutput=image.raw\n\n[Content]\nBootable=yes\nPackages=linux-image-generic,systemd,systemd-boot,systemd-sysv,udev,dbus\n\n         openssh-client\n         vim\nRootPassword=password\n\n[Validation]\nChecksum=yes\n```\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nSee bootable[dead link 2024-10-12 ⓘ] for more distro booting examples.\n\nDownloaded package files and temporary build files are stored in the home cache directory or in /var/cache/mkosi and /var/tmp.\n\n"
    },
    {
      "title": "Configuration settings",
      "level": 3,
      "content": "Settings can be specified as command-line arguments or, for example, in a file called mkosi.conf in the current directory. The most important settings are:\n\nTable content:\nCommand line | Configuration file | Description\n--distribution | [Distribution] Distribution= | Name of the distribution to install. Supported are: fedora, debian, ubuntu, arch, opensuse, mageia, centos, openmandriva, rocky, alma\n--release | [Distribution] Release= | Version of the distribution: a numeric string or a distribution version name (bookworm, …)\n--format | [Output] Format= | Format of the image to create. For example: directory: plain directory disk: image file with GPT partition table tar: tarball of a plain directory\n--output | [Output] Output= | Name of the image file or directory\n--output-directory | [Output] OutputDirectory= | Location of the image file or directory (and other generated artifacts)\n--bootable | [Content] Bootable= | Enable or disable generation of a bootable image: yes, no\n--package | [Content] Packages= | List of packages to be installed into the image: (multi) line and/or comma separated list\n--root-password | [Content] RootPassword= | Initial root password\n\n```\n[Distribution]\nDistribution=\n```\n\n```\n[Distribution]\nRelease=\n```\n\n```\n[Output]\nFormat=\n```\n\n- directory: plain directory\n- disk: image file with GPT partition table\n- tar: tarball of a plain directory\n\n```\n[Output]\nOutput=\n```\n\n```\n[Output]\nOutputDirectory=\n```\n\n```\n[Content]\nBootable=\n```\n\n```\n[Content]\nPackages=\n```\n\n```\n[Content]\nRootPassword=\n```\n\n"
    },
    {
      "title": "Usage as initramfs generator",
      "level": 2,
      "content": "Mkosi provides a kernel-install plugin to build an initramfs, similarly to mkinitcpio or dracut.\n\nIn order to use it, install cpio and edit the kernel-install configuration file:\n\n```\n/etc/kernel/install.conf\n```\n\n```\ninitrd_generator=mkosi-initrd\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Mkosi on Github\n- Longer introduction by Poettering, one of its developers\n\n"
    }
  ]
}