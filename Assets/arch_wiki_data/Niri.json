{
  "title": "Niri",
  "url": "https://wiki.archlinux.org/title/Niri",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Niri is a scrollable tiling Wayland compositor. Unlike, Sway or Hyprland, Niri arranges the windows in an infinite horizontal desktop, where you can scroll to the left or to the right (although more advanced layouts are possible). It is similar to GNOME's PaperWM and KDE's Karousel.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Niri can be installed with the niri package. Additionally, to have a better experience, you may want to install:\n\n- fuzzel: default application launcher in Niri\n- mako: notifications\n- waybar: a Wayland bar\n- xdg-desktop-portal-gtk, xdg-desktop-portal-gnome: to be able to do screen sharing\n- alacritty: default terminal in Niri\n- swaybg: background image\n- swayidle, swaylock: to lock the screen on idle status\n\n"
    },
    {
      "title": "Starting",
      "level": 2,
      "content": "The niri package contains a session which should be recognized automatically by modern display managers like GDM and SDDM.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Niri reads the configuration from ~/.config/niri/config.kdl. It is a KDL file, divided by sections. The default configuration, created on the first run, documents the default options with comments. However, options introduced with updates will not be documented in user's configuration; you may check Niri's official documentation instead.\n\nNiri automatically applies the configuration when it's saved. Live reload of invalid configuration won't crash Niri; instead, the last working state is preserved, and the user is notified of the configuration error. niri --validate can be invoked to validate the configuration outside of a Niri session.\n\n"
    },
    {
      "title": "Keymap",
      "level": 3,
      "content": "To configure the keymap, edit the input/keyboard/xkb section.\n\nFor example, if you want to have a \"US Int Alt Gr\" layout with CapsLock acting as Ctrl key:\n\n```\n~/.config/niri/config.kdl\n```\n\n```\ninput {\n    keyboard {\n        xkb {\n            layout \"us\"\n            variant \"altgr-intl\"\n            options \"ctrl:nocaps\"\n        }\n    }\n    ...\n}\n```\n\n"
    },
    {
      "title": "Outputs",
      "level": 3,
      "content": "First run niri msg outputs to get an overview of the outputs recognized by Niri. Then you can apply configs to each monitor. For example to set the HDMI monitor to 2560x1440 60Hz with a 1.2 scaling, and turning off the laptop monitor, set the following:\n\n```\n~/.config/niri/config.kdl\n```\n\n```\noutput \"HDMI-A-1\" {\n    mode \"2560x1440@60.000\"\n    scale 1.2\n}\n\noutput \"eDP-1\" {\n    off\n}\n```\n\n"
    },
    {
      "title": "Bindings",
      "level": 3,
      "content": "The binds section allows to set up the different key combinations that have effect on Niri. Many bindings are already set in the default configuration generated on first launch. These are all remappable.\n\nPlease note that Niri does not load any default bindings. If a binding is not specified in the configuration, it will not be active. \"Defaults\" are simply bindings that are present in the automatically generated configuration. Therefore, take care when removing the bindings. It is recommended to instead comment out unused bindings.\n\nBindings are defined using the modifiers keys appended with a + sign and the action between brackets. The special action spawn will launch a program. For example, you will find the following bindings that spawn alacritty and fuzzel on Mod+T and Mod+D respectively. Mod is usually the Super key if running standalone, but it is Alt if it is running inside of another compositor.\n\n```\n~/.config/niri/config.kdl\n```\n\n```\nbinds {\n    ...\n    Mod+T { spawn \"alacritty\"; }\n    Mod+D { spawn \"fuzzel\"; }\n    ...\n}\n```\n\nNote that all space-separated arguments to processes started by spawn must be enclosed by quotes:\n\n```\n~/.config/niri/config.kdl\n```\n\n```\nbinds {\n    ...\n    Mod+Ctrl+semicolon {\n        spawn \"swaylock\" \"-c\" \"121212\" \"-e\" \"-f\" \"-F\"\n    }\n    ...\n}\n```\n\n"
    },
    {
      "title": "WASD-like navigation",
      "level": 4,
      "content": "It is possible to configure Niri workspaces and bindings so that jumping through windows follows a navigation similar to WASD as in games.\n\n```\n~/.config/niri/config.kdl\n```\n\n```\nbinds {\n    ...\n    Mod+A { focus-column-left; }\n    Mod+S { focus-window-or-workspace-down; }\n    Mod+W { focus-window-or-workspace-up; }\n    Mod+D { focus-column-right; }\n    ...\n}\n```\n\nBe aware that this config will probably need other bindings to be remapped as well. Also, some people may prefer to have the WASD navigation on the right hand side, or have a more Vim-like navigation.\n\n"
    },
    {
      "title": "Autostart",
      "level": 3,
      "content": "Niri allows some programs to be started alongside with Niri. For example, some of programs mentioned beforehand like mako, waybar and swayidle/swaylock can be configured:\n\n```\n~/.config/niri/config.kdl\n```\n\n```\nspawn-at-startup \"mako\"\nspawn-at-startup \"waybar\"\nspawn-at-startup \"swayidle\" \"-w\" \"timeout\" \"601\" \"niri msg action power-off-monitors\" \"timeout\" \"600\" \"swaylock -f\" \"before-sleep\" \"swaylock -f\"\n```\n\nNote that these processes are tied to the Niri session, and they will be killed when Niri exits or suspended. To make a process persist, you may set it to a background task by providing the \"&\" argument.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Niri's own wiki\n\n"
    }
  ]
}