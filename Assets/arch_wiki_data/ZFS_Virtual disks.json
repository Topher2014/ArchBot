{
  "title": "ZFS/Virtual disks",
  "url": "https://wiki.archlinux.org/title/ZFS/Virtual_disks",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- ZFS\n- Installing Arch Linux on ZFS\n\nThis article covers some basic tasks and usage of ZFS. It differs from the main article ZFS somewhat in that the examples herein are demonstrated on a zpool built from virtual disks. So long as users do not place any critical data on the resulting zpool, they are free to experiment without fear of actual data loss.\n\nThe examples in this article are shown with a set of virtual discs known in ZFS terms as VDEVs. Users may create their VDEVs either on an existing physical disk or in tmpfs (RAMdisk) depending on the amount of free memory on the system.\n\nDue to differences in licensing, ZFS binaries and kernel modules are easily distributed from source, but no-so-easily packaged as pre-compiled sets. Details are provided on the ZFS#Installation article.\n\n"
    },
    {
      "title": "Creating and destroying Zpools",
      "level": 2,
      "content": "Management of ZFS is pretty simplistic with only two utils needed:\n\n- /usr/bin/zpool\n- /usr/bin/zfs\n\n"
    },
    {
      "title": "Mirror",
      "level": 3,
      "content": "For zpools with just two drives with redundancy, it is recommended to use ZFS in mirror mode which functions like a RAID1 mirroring the data. Mirroring can also be used as an alternative to Raidz setups with surprising results. See more on vdev mirroring here.\n\n"
    },
    {
      "title": "RAIDZ1",
      "level": 3,
      "content": "The minimum number of drives for a RAIDZ1 is two, but it is best to follow the \"power of two plus parity\" recommendation. This is for storage space efficiency and hitting the \"sweet spot\" in performance. For RAIDZ-1, use three (2+1), five (4+1), or nine (8+1) disks. This example will use the most simplistic set of (2+1).\n\nCreate three x 2G files to serve as virtual hardrives:\n\n```\n$ for i in {1..3}; do truncate -s 2G /scratch/$i.img; done\n```\n\nAssemble the RAIDZ1:\n\n```\n# zpool create zpool raidz1 /scratch/1.img /scratch/2.img /scratch/3.img\n```\n\nNotice that a 3.91G zpool has been created and mounted for us:\n\n```\n# zfs list\n```\n\n```\nNAME   USED  AVAIL  REFER  MOUNTPOINT\n test   139K  3.91G  38.6K  /zpool\n```\n\nThe status of the device can be queried:\n\n```\n# zpool status zpool\n```\n\n```\npool: zpool\n state: ONLINE\n  scan: none requested\nconfig:\n\n\tNAME                STATE     READ WRITE CKSUM\n\t   zpool            ONLINE       0     0     0\n\t  raidz1-0          ONLINE       0     0     0\n\t    /scratch/1.img  ONLINE       0     0     0\n\t    /scratch/2.img  ONLINE       0     0     0\n\t    /scratch/3.img  ONLINE       0     0     0\n\nerrors: No known data errors\n```\n\nTo destroy a zpool:\n\n```\n# zpool destroy zpool\n```\n\n"
    },
    {
      "title": "RAIDZ2 and RAIDZ3",
      "level": 3,
      "content": "Higher level ZRAIDs can be assembled in a like fashion by adjusting the for statement to create the image files, by specifying \"raidz2\" or \"raidz3\" in the creation step, and by appending the additional image files to the creation step.\n\nSummarizing Toponce's guidance:\n\n- RAIDZ2 should use four (2+2), six (4+2), ten (8+2), or eighteen (16+2) disks.\n- RAIDZ3 should use five (2+3), seven (4+3), eleven (8+3), or nineteen (16+3) disks.\n\n"
    },
    {
      "title": "Linear span",
      "level": 3,
      "content": "This setup is for a JBOD, good for 3 or less drives normally, where space is still a concern and you are not ready to move to full features of ZFS yet because of it. RaidZ will be your better bet once you achieve enough space to satisfy, since this setup is NOT taking advantage of the full features of ZFS, but has its roots safely set in a beginning array that will suffice for years until you build up your hard drive collection.\n\nLet's create a non-redundant pool using files. While not recommended, a pool based on files can be useful for experimental purposes.\n\nCreate 1 x 512M file to serve as virtual hard drive in experiment:\n\n```\n# truncate -s 512M /scratch/half.img\n```\n\nAssemble the Linear Span:\n\n```\n# zpool create zpool /scratch/1.img /scratch/2.img /scratch/half.img\n```\n\n```\n# zpool status zpool\n```\n\n```\npool: zpool\n state: ONLINE\n  scan: none requested\nconfig:\n\n\tNAME                   STATE     READ WRITE CKSUM\n\t   zpool               ONLINE       0     0     0\n\t    /scratch/1.img     ONLINE       0     0     0\n\t    /scratch/2.img     ONLINE       0     0     0\n\t    /scratch/half.img  ONLINE       0     0     0\n\nerrors: No known data errors\n```\n\n"
    },
    {
      "title": "Creating and destroying datasets",
      "level": 2,
      "content": "An example creating child datasets and using compression:\n\n- create the datasets\n\n```\n# zfs create -p -o compression=on san/vault/falcon/snapshots\n# zfs create -o compression=on san/vault/falcon/version\n# zfs create -p -o compression=on san/vault/redtail/c/Users\n```\n\n- now list the datasets (this was a linear span)\n\n```\n$ zfs list\n```\n\nNote, there is a huge advantage(file deletion) for making a 3 level dataset. If you have large amounts of data, by separating by datasets, its easier to destroy a dataset than to try and wait for recursive file removal to complete.\n\n"
    },
    {
      "title": "Displaying and setting properties",
      "level": 2,
      "content": "Without specifying them in the creation step, users can set properties of their zpools at any time after its creation using /usr/bin/zfs.\n\n"
    },
    {
      "title": "Show properties",
      "level": 3,
      "content": "To see the current properties of a given zpool:\n\n```\n# zfs get all zpool\n```\n\n"
    },
    {
      "title": "Modify properties",
      "level": 3,
      "content": "Disable the recording of access time in the zpool:\n\n```\n# zfs set atime=off zpool\n```\n\nVerify that the property has been set on the zpool:\n\n```\n# zfs get atime\n```\n\n```\nNAME  PROPERTY     VALUE     SOURCE\nzpool  atime        off       local\n```\n\n"
    },
    {
      "title": "Add content to the Zpool and query compression performance",
      "level": 2,
      "content": "Fill the zpool with files. For this example, first enable compression. ZFS uses many compression types, including, lzjb, gzip, gzip-N, zle, and lz4. Using a setting of simply 'on' will call the default algorithm (lzjb) but lz4 is a nice alternative. See zfsprops(7) ยง compression for more.\n\n```\n# zfs set compression=lz4 zpool\n```\n\nIn this example, the linux source tarball is copied over and since lz4 compression has been enabled on the zpool, the corresponding compression ratio can be queried as well.\n\n```\n$ wget https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.11.tar.xz\n$ tar xJf linux-3.11.tar.xz -C /zpool\n```\n\nTo see the compression ratio achieved:\n\n```\n# zfs get compressratio\n```\n\n```\nNAME      PROPERTY       VALUE  SOURCE\nzpool  compressratio  2.32x  -\n```\n\n"
    },
    {
      "title": "Simulate a disk failure and rebuild the Zpool",
      "level": 2,
      "content": "To simulate catastrophic disk failure (i.e. one of the HDDs in the zpool stops functioning), zero out one of the VDEVs.\n\n```\n$ dd if=/dev/zero of=/scratch/2.img bs=4M count=1 2>/dev/null\n```\n\nSince we used a blocksize (bs) of 4M, the once 2G image file is now a mere 4M:\n\n```\n$ ls -lh /scratch\n```\n\n```\ntotal 317M\n-rw-r--r-- 1 facade users 2.0G Oct 20 09:13 1.img\n-rw-r--r-- 1 facade users 4.0M Oct 20 09:09 2.img\n-rw-r--r-- 1 facade users 2.0G Oct 20 09:13 3.img\n```\n\nThe zpool remains online despite the corruption. Note that if a physical disc does fail, dmesg and related logs would be full of errors. To detect when damage occurs, users must execute a scrub operation.\n\n```\n# zpool scrub zpool\n```\n\nDepending on the size and speed of the underlying media as well as the amount of data in the zpool, the scrub may take hours to complete. The status of the scrub can be queried:\n\n```\n# zpool status zpool\n```\n\n```\npool: zpool\n state: DEGRADED\nstatus: One or more devices could not be used because the label is missing or\n\tinvalid.  Sufficient replicas exist for the pool to continue\n\tfunctioning in a degraded state.\naction: Replace the device using 'zpool replace'.\n   see: http://zfsonlinux.org/msg/ZFS-8000-4J\n  scan: scrub repaired 0 in 0h0m with 0 errors on Sun Oct 20 09:13:39 2013\nconfig:\n\n\tNAME                STATE     READ WRITE CKSUM\n\t   zpool            DEGRADED     0     0     0\n\t  raidz1-0          DEGRADED     0     0     0\n\t    /scratch/1.img  ONLINE       0     0     0\n\t    /scratch/2.img  UNAVAIL      0     0     0  corrupted data\n\t    /scratch/3.img  ONLINE       0     0     0\n\nerrors: No known data errors\n```\n\nSince we zeroed out one of our VDEVs, let us simulate adding a new 2G HDD by creating a new image file and adding it to the zpool:\n\n```\n$ truncate -s 2G /scratch/new.img\n# zpool replace zpool /scratch/2.img /scratch/new.img\n```\n\nUpon replacing the VDEV with a new one, zpool rebuilds the data from the data and parity info in the remaining two good VDEVs. Check the status of this process:\n\n```\n# zpool status zpool\n```\n\n```\npool: zpool\n state: ONLINE\n  scan: resilvered 117M in 0h0m with 0 errors on Sun Oct 20 09:21:22 2013\nconfig:\n\n\tNAME                  STATE     READ WRITE CKSUM\n\t   zpool              ONLINE       0     0     0\n\t  raidz1-0            ONLINE       0     0     0\n\t    /scratch/1.img    ONLINE       0     0     0\n\t    /scratch/new.img  ONLINE       0     0     0\n\t    /scratch/3.img    ONLINE       0     0     0\n\nerrors: No known data errors\n```\n\n"
    },
    {
      "title": "Snapshots and recovering deleted files",
      "level": 2,
      "content": "Since ZFS is a copy-on-write filesystem, every file exists the second it is written. Saving changes to the very same file actually creates another copy of that file (plus the changes made). Snapshots can take advantage of this fact and allow users access to older versions of files provided a snapshot has been taken.\n\nNote: **df** \n\nTo keep this simple, we will create a dataset within the zpool and snapshot it. Snapshots can be taken either of the entire zpool or of a dataset within the pool. They differ only in their naming conventions:\n\nTable content:\nSnapshot Target | Snapshot Name\nEntire zpool | zpool@snapshot-name\nDataset | zpool/dataset@snapshot-name\n\nMake a new data set and take ownership of it.\n\n```\n# zfs create zpool/docs\n# chown facade:users /zpool/docs\n```\n\n"
    },
    {
      "title": "Time 0",
      "level": 3,
      "content": "Add some files to the new dataset (/zpool/docs):\n\n```\n$ wget -O /zpool/docs/Moby_Dick.txt  https://www.gutenberg.org/ebooks/2701.txt.utf-8\n$ wget -O /zpool/docs/War_and_Peace.txt https://www.gutenberg.org/ebooks/2600.txt.utf-8\n$ wget -O /zpool/docs/Beowulf.txt https://www.gutenberg.org/ebooks/16328.txt.utf-8\n```\n\n```\n# zfs list\n```\n\n```\nNAME           USED  AVAIL  REFER  MOUNTPOINT\nzpool       5.06M  3.91G  40.0K  /zpool\nzpool/docs  4.92M  3.91G  4.92M  /zpool/docs\n```\n\nThis is showing that we have 4.92M of data used by our books in /zpool/docs.\n\n"
    },
    {
      "title": "Time +1",
      "level": 3,
      "content": "Now take a snapshot of the dataset:\n\n```\n# zfs snapshot zpool/docs@001\n```\n\nAgain run the list command:\n\n```\n# zfs list\n```\n\n```\nNAME           USED  AVAIL  REFER  MOUNTPOINT\nzpool       5.07M  3.91G  40.0K  /zpool\nzpool/docs  4.92M  3.91G  4.92M  /zpool/docs\n```\n\nNote that the size in the USED col did not change showing that the snapshot take up no space in the zpool since nothing has changed in these three files.\n\nWe can list out the snapshots like so and again confirm the snapshot is taking up no space, but instead refers to files from the originals that take up, 4.92M (their original size):\n\n```\n# zfs list -t snapshot\n```\n\n```\nNAME               USED  AVAIL  REFER  MOUNTPOINT\nzpool/docs@001      0      -  4.92M  -\n```\n\n"
    },
    {
      "title": "Time +2",
      "level": 3,
      "content": "Now let us add some additional content and create a new snapshot:\n\n```\n$ wget -O /zpool/docs/Les_Mis.txt https://www.gutenberg.org/ebooks/135.txt.utf-8\n# zfs snapshot zpool/docs@002\n```\n\nGenerate the new list to see how the space has changed:\n\n```\n# zfs list -t snapshot\n```\n\n```\nNAME               USED  AVAIL  REFER  MOUNTPOINT\nzpool/docs@001  25.3K      -  4.92M  -\nzpool/docs@002      0      -  8.17M  -\n```\n\nHere we can see that the 001 snapshot takes up 25.3K of metadata and still points to the original 4.92M of data, and the new snapshot takes-up no space and refers to a total of 8.17M.\n\n"
    },
    {
      "title": "Time +3",
      "level": 3,
      "content": "Now let us simulate an accidental overwrite of a file and subsequent data loss:\n\n```\n$ echo \"this book sucks\" > /zpool/docs/War_and_Peace.txt\n```\n\nAgain, take another snapshot:\n\n```\n# zfs snapshot zpool/docs@003\n```\n\nNow list out the snapshots and notice the amount of referred to decreased by about 3.1M:\n\n```\n# zfs list -t snapshot\n```\n\n```\nNAME               USED  AVAIL  REFER  MOUNTPOINT\nzpool/docs@001  25.3K      -  4.92M  -\nzpool/docs@002  25.5K      -  8.17M  -\nzpool/docs@003      0      -  5.04M  -\n```\n\nWe can easily recover from this situation by looking inside one or both of our older snapshots for good copy of the file. ZFS stores its snapshots in a hidden directory under the zpool: /zpool/files/.zfs/snapshot:\n\n```\n$ ls -l /zpool/docs/.zfs/snapshot\n```\n\n```\ntotal 0\ndr-xr-xr-x 1 root root 0 Oct 20 16:09 001\ndr-xr-xr-x 1 root root 0 Oct 20 16:09 002\ndr-xr-xr-x 1 root root 0 Oct 20 16:09 003\n```\n\nWe can copy a good version of the book back out from any of our snapshots to any location on or off the zpool:\n\n```\n% cp /zpool/docs/.zfs/snapshot/002/War_and_Peace.txt /zpool/docs\n```\n\n```\n# zfs set snapdir=visible zpool/docs\n```\n\nNow enter a snapshot dir or two:\n\n```\n$ cd /zpool/docs/.zfs/snapshot/001\n$ cd /zpool/docs/.zfs/snapshot/002\n```\n\nRepeat the df command:\n\n```\n$ df -h | grep zpool\nzpool           4.0G     0  4.0G   0% /zpool\nzpool/docs      4.0G  5.0M  4.0G   1% /zpool/docs\nzpool/docs@001  4.0G  4.9M  4.0G   1% /zpool/docs/.zfs/snapshot/001\nzpool/docs@002  4.0G  8.2M  4.0G   1% /zpool/docs/.zfs/snapshot/002\n```\n\nFor example:\n\n```\n# zpool export zpool\n# zpool import -d /scratch/ zpool\n$ df -h | grep zpool\nzpool         4.0G     0  4.0G   0% /zpool\nzpool/docs    4.0G  5.0M  4.0G   1% /zpool/docs\n```\n\n"
    },
    {
      "title": "Time +4",
      "level": 3,
      "content": "Now that everything is back to normal, we can create another snapshot of this state:\n\n```\n# zfs snapshot zpool/docs@004\n```\n\nAnd the list now becomes:\n\n```\n# zfs list -t snapshot\n```\n\n```\nNAME               USED  AVAIL  REFER  MOUNTPOINT\nzpool/docs@001  25.3K      -  4.92M  -\nzpool/docs@002  25.5K      -  8.17M  -\nzpool/docs@003   155K      -  5.04M  -\nzpool/docs@004      0      -  8.17M  -\n```\n\n"
    },
    {
      "title": "Listing snapshots",
      "level": 3,
      "content": "Note, this simple but important command is missing frequently from other articles on the subject, so its worth mention.\n\nTo list any snapshots on your system, run the following command\n\n```\n$ zfs list -t snapshot\n```\n\n"
    },
    {
      "title": "Deleting snapshots",
      "level": 3,
      "content": "The limit to the number of snapshots users can save is 2^64. User can delete a snapshot like so:\n\n```\n# zfs destroy zpool/docs@001\n```\n\n```\n# zfs list -t snapshot\n```\n\n```\nNAME               USED  AVAIL  REFER  MOUNTPOINT\nzpool/docs@002  3.28M      -  8.17M  -\nzpool/docs@003   155K      -  5.04M  -\nzpool/docs@004      0      -  8.17M  -\n```\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "If your system is not configured to load the zfs pool upon boot, or for whatever reason you want to manually remove and add back the pool, or if you have lost your pool completely, a convenient way is to use import/export.\n\nIf your pool was named <zpool>\n\n```\n# zpool import -d /scratch zpool\n```\n\nIf you have any problems accessing your pool at any time, try export and reimport.\n\n```\n# zpool export zpool\n# zpool import -d /scratch zpool\n```\n\n"
    }
  ]
}