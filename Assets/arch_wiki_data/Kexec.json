{
  "title": "Kexec",
  "url": "https://wiki.archlinux.org/title/Kexec",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- systemd\n\nKexec is a system call that enables you to load and boot into another kernel from the currently running kernel. This is useful for kernel developers or other people who need to reboot very quickly without waiting for the whole BIOS boot process to finish. Note that kexec may not work correctly for you due to devices not fully re-initializing when using this method, however this is rarely the case.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the kexec-tools package.\n\n"
    },
    {
      "title": "Manually",
      "level": 3,
      "content": "You can manually invoke kexec using:\n\n```\n# kexec -l /boot/vmlinuz-linux --initrd=/boot/initramfs-linux.img --reuse-cmdline\n# kexec -e\n```\n\nIt is also possible to load kernel manually and then let systemd handle service shutdown and kexec for you.\n\n```\n# kexec -l /boot/vmlinuz-linux --initrd=/boot/initramfs-linux.img --reuse-cmdline\n# systemctl kexec\n```\n\n"
    },
    {
      "title": "Systemd",
      "level": 3,
      "content": "By default, if systemd-boot is used and no kernel was loaded manually using kexec -l before, systemd will load the kernel specified in the default boot loader entry. For example, to reboot into the newer kernel after a system update, you may simply run:\n\n```\n# systemctl kexec\n```\n\nThe command will refuse to execute if you have several initrd entries (e.g. for Microcode updates) which are currently not supported.\n\n"
    },
    {
      "title": "Custom unit file",
      "level": 4,
      "content": "If the default behavior does not work for you or you desire to conveniently load custom kernels, you may wrap the kernel loading into a service unit. Create a new unit file, kexec-load@.service, that will load the specified kernel to be kexec'ed:\n\n```\n/etc/systemd/system/kexec-load@.service\n```\n\n```\n[Unit]\nDescription=load %i kernel into the current kernel\nDocumentation=man:kexec(8)\nDefaultDependencies=no\nBefore=shutdown.target umount.target final.target\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/kexec -l /boot/vmlinuz-%i --initrd=/boot/initramfs-%i.img --reuse-cmdline\n\n[Install]\nWantedBy=kexec.target\n```\n\nThen enable the service file for the kernel you want to load, (e.g. for linux it will be kexec-load@linux.service)\n\nEnsure that the shutdown hook is not part of your initramfs image by removing it from the HOOKS array in /etc/mkinitcpio.conf. If it is, remove it and regenerate the initramfs.\n\nThen to kexec\n\n```\n# systemctl kexec\n```\n\nIf you wish to load a different kernel for the next kexec, for example linux-lts, disable the service for the current kernel and enable the one for the new kernel.\n\n"
    },
    {
      "title": "Separate /boot partition",
      "level": 4,
      "content": "The above systemd unit file will fail if /boot is not on the root file system, as systemd will likely unmount /boot before it runs the kexec-load unit file. An alternative approach is to load a \"hook\" unit file that does nothing on startup and invokes kexec upon termination. By making this unit file conflict with kexec.target and only kexec.target, you can ensure the new kernel gets loaded early enough and only after a systemctl kexec command. Here is an alternate /etc/systemd/system/kexec-load@.service file that follows this strategy:\n\n```\n[Unit]\nDescription=hook to load vmlinuz-%i kernel upon kexec\nDocumentation=man:kexec(8)\nDefaultDependencies=no\nRequires=sysinit.target\nAfter=sysinit.target\n\n[Service]\nType=oneshot\nExecStart=-/usr/bin/true\nRemainAfterExit=yes\nExecStop=/usr/bin/kexec -l /boot/vmlinuz-%i --initrd=/boot/initramfs-%i.img --reuse-cmdline\n\n[Install]\nWantedBy=basic.target\n```\n\nNote that Conflicts=shutdown.target is not really needed, as it is implicitly guaranteed by strict ordering on sysinit.target which itself Conflicts= with shutdown.target.\n\n"
    },
    {
      "title": "System hangs or reboots after \"kexec_core: Starting new kernel\"",
      "level": 3,
      "content": "The troubleshooting information on General troubleshooting#Boot problems may be helpful for diagnosing the problem.\n\nIn some cases a hanging system might be an acpi related problem which can be checked on-the-fly like this:\n\n```\n# cmdline=$(cat /proc/cmdline)\n# cmdline=\"$cmdline acpi_rsdp=$(grep -m1 ^ACPI /sys/firmware/efi/systab | cut -f2- -d=)\"\n# echo $cmdline\n# ls -al /boot/\n# kexec -l /boot/vmlinuz-linux-lts --initrd=/boot/initramfs-linux-lts.img --append=\"$cmdline\"\n# systemctl kexec\n```\n\nPlease adapt the name of the initramfs image and the kernel according to your output of ls -al /boot/.\n\nAdding the acpi_rsdp kernel parameter to the kexec command line has been suggested in [1] and may solve the issue in some cases without the need to completely disable ACPI via acpi=off.\n\n"
    },
    {
      "title": "No kernel mode-setting (Nvidia)",
      "level": 3,
      "content": "The graphics driver needs to be unloaded before a kexec, or the next kernel will not be able to gain exclusive control of the device. This is difficult to achieve manually because any programs which need exclusive control over the GPU (Xorg, display managers) must not be running. Below is an example systemd service that will unload the KMS driver right before kexec, which requires that you use systemctl kexec.\n\n```\n/etc/systemd/system/unmodeset.service\n```\n\n```\n[Unit]\nDescription=Unload nvidia modesetting modules from kernel\nDocumentation=man:modprobe(8)\nDefaultDependencies=no\nAfter=umount.target\nBefore=kexec.target\n\n[Service]\nType=oneshot\nExecStart=modprobe -r nvidia_drm\n\n[Install]\nWantedBy=kexec.target\n```\n\nAfterwards, enable unmodeset.service\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- [systemd-devel] Right way to do kexec\n- kdump: a kexec based crash dumping mechanism for Linux\n- Reboot Linux faster using kexec\n\n"
    }
  ]
}