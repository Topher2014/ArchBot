{
  "title": "Uniform Look for QT and GTK Applications",
  "url": "https://wiki.archlinux.org/title/Uniform_Look_for_QT_and_GTK_Applications",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- GTK\n- Qt\n\nQt and GTK based programs both use a different widget toolkit to render the graphical user interface. Each come with different themes, styles and icon sets by default, among other things, so the \"look and feel\" differ significantly. This article will help you make your Qt and GTK applications look similar for a more streamlined and integrated desktop experience.\n\n"
    },
    {
      "title": "Overview",
      "level": 2,
      "content": "To get a similar look between the toolkits, you will most likely have to modify the following:\n\n- Theme: The custom appearance of an application, widget set, etc. It usually consists of a style, an icon theme and a color theme.\n- Style: The graphical layout and look of the widget set.\n- Icon Theme: A set of global icons.\n- Color Theme: A set of global colors that are used in conjunction with the style.\n\nYou can choose various approaches:\n\n- Modify GTK and Qt styles separately with the tools listed below for each toolkit and aim for choosing similarly looking themes (style, colors, icons, cursors, fonts).\n- Use a special theme engine, which intermediates the modification of the other graphical toolkit to match your main toolkit.\n\n"
    },
    {
      "title": "Styles for both Qt and GTK",
      "level": 2,
      "content": "There are widget style sets available for the purpose of integration, where builds are written and provided for both Qt and GTK, all major versions included. With these, you can have one look for all applications regardless of the toolkit they had been written with.\n\n"
    },
    {
      "title": "Themes originally Qt based for GTK programs",
      "level": 3,
      "content": "These are themes originally created for a Qt environment, but was later ported to GTK.\n\n"
    },
    {
      "title": "Breeze",
      "level": 4,
      "content": "Breeze is the default Qt style of KDE Plasma. It can be installed with the breeze package and the breeze-gtk package for GTK 2 and GTK 3.\n\nOnce installed, you can use one of the many GTK configuration tools to change the GTK theme.\n\nIf running KDE Plasma, install kde-gtk-config, log-out and log-in again, and then go to System Settings > Colors & Themes > Application Style > Configure GNOME/GTK Application Styleâ€¦. Fonts, icon themes, cursors, and widget styles set in System Settings affect GTK settings automatically; only the GTK theme should be set manually using the previously mentioned module.\n\nIf you are not running KDE Plasma, you can use qt5ct-kdeAUR and qt6ct-kdeAUR to apply breeze to qt applications, you can also change the color scheme to be Breeze-Dark.\n\n"
    },
    {
      "title": "Themes originally GTK based for Qt programs",
      "level": 3,
      "content": "These are themes originally created for a GTK environment, but was later ported to Qt.\n\n"
    },
    {
      "title": "Adwaita",
      "level": 4,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nAdwaita is the default GNOME theme. The GTK 3 version is included in the gtk3 package, while the GTK 2 version is in gnome-themes-extra. adwaita-qt is a Qt port of the Adwaita theme. Unlike #QGtkStyle, which mimics the GTK 2 theme, it provides a native Qt style made to look like the GTK 3 Adwaita. It can be installed with the adwaita-qt4AUR, adwaita-qt5-gitAUR and adwaita-qt6-gitAUR packages for the Qt 4, 5 and 6 versions, respectively.\n\nTo set the Qt style as default:\n\n- For Qt 5, it can be enabled by setting the following environment variable: QT_STYLE_OVERRIDE=adwaita. Alternatively, use qt5ct package. For more detailed instructions, see Qt#Configuration of Qt 5/6 applications under environments other than KDE Plasma.\n- For Qt4, it can be enabled with Qt Configuration (qtconfig-qt4), choose adwaita under Appearance > GUI Style. Alternatively, edit the /etc/xdg/Trolltech.conf (system-wide) or ~/.config/Trolltech.conf (user-specific) file:\n\n```\n~/.config/Trolltech.conf\n```\n\n```\n...\n[Qt]\nstyle=adwaita\n...\n```\n\n"
    },
    {
      "title": "GTK themes ported to Kvantum",
      "level": 4,
      "content": "Kvantum (kvantum) is an SVG-based style customizer for Qt6 that comes with a variety of built-in styles, including versions of some of popular GTK themes such as Adapta, Arc, Ambiance, Libadwaita and Materia. More themes can be found on the KDE Store. For Qt5 you additionally need the kvantum-qt5 package.\n\nKvantum works as a Qt style instead of a Qt platform theme. To set Kvantum for all Qt applications, set it in qt6ct for Qt6 or qt5ct for Qt5 respectively, or use the environment variable QT_STYLE_OVERRIDE=kvantum.\n\nTo configure a theme variant for Kvantum, such as KvLibadwaita, edit the configuration file:\n\n```\n/etc/xdg/Kvantum/kvantum.kvconfig (or ~/.config/Kvantum/kvantum.kvconfig)\n```\n\n```\n...\ntheme=KvLibadwaita\n...\n```\n\nor use the kvantummanager GUI.\n\n"
    },
    {
      "title": "Theme engines",
      "level": 2,
      "content": "A theme engine can be thought of as a thin layer API which translates themes (excluding icons) between one or more toolkits. These engines add some extra code in the process and it is arguable that this kind of a solution is not as elegant and optimal as using native styles.\n\n"
    },
    {
      "title": "QGtk3Style",
      "level": 3,
      "content": "This is a platform theme built into qt5-base starting with version 5.7.0 [2] and qt6-base. It can be used to style Qt5 and Qt6 applications according to current GTK3 style. It can be enabled by setting the following environment variable: QT_QPA_PLATFORMTHEME=gtk3. For users of Adwaita it can be used together with #QAdwaitaDecorations for a complete look.\n\n"
    },
    {
      "title": "QGtkStyle",
      "level": 3,
      "content": "This Qt style uses GTK 2 to render all components to blend in with GNOME and similar GTK based environments. Beginning with Qt 4.5, this style is included in Qt. It requires gtk2 to be installed and configured.\n\nThis is the default Qt4 style in Cinnamon, GNOME and Xfce, and the default Qt5 style in Cinnamon, GNOME, MATE, LXDE and Xfce. In other environments:\n\n- For Qt4, it can be enabled with Qt Configuration (qtconfig-qt4), choose GTK under Appearance > GUI Style. Alternatively, edit the /etc/xdg/Trolltech.conf (system-wide) or ~/.config/Trolltech.conf (user-specific) file:\n\n```\n~/.config/Trolltech.conf\n```\n\n```\n...\n[Qt]\nstyle=GTK+\n...\n```\n\n- For Qt 5, it can be enabled by installing qt5-stylepluginsAUR and setting the following environment variable: QT_QPA_PLATFORMTHEME=gtk2\n\n- For Qt 6, it can be enabled by installing qt6gtk2AUR and choosing the qt6gtk2 style in qt6ct, or alternatively setting the following environment variable: QT_QPA_PLATFORMTHEME=gtk2\n\nFor full uniformity, make sure that the configured GTK theme supports both GTK 2 and GTK 3. If your preferred theme has inconsistent rendering after configuring Qt to use GTK2, install gtk-theme-switch2AUR and choose a theme. You should also make sure that the preferred theme is installed in /usr/share/themes as $XDG_DATA_HOME/themes directory is not being scanned for active GTK 2 theme.\n\n"
    },
    {
      "title": "QAdwaitaDecorations",
      "level": 3,
      "content": "QAdwaitaDecorations is Qt decoration plugin implementing Adwaita-like client-side decorations for Wayland. It can be installed with the qadwaitadecorations-qt5AUR and qadwaitadecorations-qt6AUR packages. After installing, set QT_WAYLAND_DECORATION=adwaita to environment variable.\n\n"
    },
    {
      "title": "QWhiteSurGtkDecorations",
      "level": 3,
      "content": "QWhiteSurGtkDecorations is Qt decoration plugin implementing WhiteSur-gtk-like client-side decorations for Wayland. It can be installed with the qwhitesurgtkdecorations-qt5AUR and qwhitesurgtkdecorations-qt6AUR packages. After installing, set QT_WAYLAND_DECORATION=whitesur-gtk to environment variable.\n\n"
    },
    {
      "title": "Using a GTK icon theme in Qt applications",
      "level": 3,
      "content": "If you are running Plasma, run kde-gtk-config and select the icon-theme under System Settings > Application Style > GTK.\n\nIf you are using GNOME, run dconf-editor and change the icon-theme key under org > gnome > desktop > interface to your preferred icon theme.\n\nIf you are not using a Desktop environment, for example if you are running a minimal system with i3-wm, install dconf-editor and set the icon-theme as explained above. You might also have to set the value of DESKTOP_SESSION in your profile. See Environment variables#Defining variables for the possible ways to obtain the desired result.\n\n```\n$ awk -F= '/icon-theme/ {print $2}' ~/.gtkrc-2.0\n```\n\n"
    },
    {
      "title": "Add Title bar and frame to GTK3 applications under KDE Plasma",
      "level": 3,
      "content": "To have GNOME/GTK applications display with a KDE/Plasma title bar and frame, disable client-side decorations as described in GTK#Client-side decorations.\n\n"
    },
    {
      "title": "Improve subpixel rendering of GTK applications under KDE Plasma",
      "level": 3,
      "content": "See Font configuration#LCD filter.\n\n"
    },
    {
      "title": "Consistent file dialog under KDE Plasma",
      "level": 3,
      "content": "To have the same file dialog across applications in KDE Plasma, you can use XDG Desktop Portals.\n\nInstall xdg-desktop-portal and xdg-desktop-portal-kde as a first step.\n\n"
    },
    {
      "title": "Environment variable method",
      "level": 4,
      "content": "Historically, setting the environment variable GTK_USE_PORTAL=1 was sufficient for most applications. Some newer GTK applications may use GDK_DEBUG=portals instead (see GTK NEWS), while others (like Betterbird 128.5.2esr-bb19, as noted in the discussion) still require the original variable. You may need to test which variable works with your specific applications, or use both to ensure maximum compatibility.\n\n"
    },
    {
      "title": "Configuration method",
      "level": 4,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nSince xdg-desktop-portal 1.18.0, direct configuration of the portal system is recommended:\n\n1. Create a portal configuration file:\n\nFor user-specific configuration:\n\n```\nmkdir -p ~/.config/xdg-desktop-portal/\necho \"[preferred]\ndefault=kde\norg.freedesktop.impl.portal.FileChooser=kde\" > ~/.config/xdg-desktop-portal/portals.conf\n```\n\nFor system-wide configuration:\n\n```\nsudo mkdir -p /etc/xdg/xdg-desktop-portal/\nsudo tee /etc/xdg/xdg-desktop-portal/portals.conf << EOF\n[preferred]\ndefault=kde\norg.freedesktop.impl.portal.FileChooser=kde\nEOF\n```\n\n2. Force the desktop environment for the portal service:\n\nFor user-specific configuration:\n\n```\nmkdir -p ~/.config/systemd/user/xdg-desktop-portal.service.d/\necho \"[Service]\nEnvironment=\\\"XDG_CURRENT_DESKTOP=KDE\\\"\" > ~/.config/systemd/user/xdg-desktop-portal.service.d/override.conf\n```\n\nFor system-wide configuration:\n\n```\nsudo mkdir -p /etc/systemd/user/xdg-desktop-portal.service.d/\nsudo tee /etc/systemd/user/xdg-desktop-portal.service.d/override.conf << EOF\n[Service]\nEnvironment=\"XDG_CURRENT_DESKTOP=KDE\"\nEOF\n```\n\n3. Restart the portal service:\n\n```\nsystemctl --user daemon-reload\nsystemctl --user restart xdg-desktop-portal.service\n```\n\nThis configuration works regardless of your actual desktop environment and should be more resilient to future changes than environment variables.\n\n"
    },
    {
      "title": "Application compatibility",
      "level": 4,
      "content": "Not all GTK applications support KDE file dialogs correctly:\n\n- Applications using electron should use at least electron 14 (see #19159) and properly implement this function.\n- VSCode has a pull request for fixing a problem, see #126113.\n- GIMP has not implemented use of the portal yet, see bug report.\n\n"
    },
    {
      "title": "Synchronizing bookmarks",
      "level": 4,
      "content": "There are still lots of GTK applications that do not implement portal properly (abandoned applications, or authors are focused on other tasks). To simplify file picking from such applications, you can at least synchronize bookmarks from dolphin to nautilus. Use this command:\n\n```\n$ awk -F\\\" '/<bookmark href=\"file/ {print $2}' < $HOME/.local/share/user-places.xbel > $HOME/.config/gtk-3.0/bookmarks\n```\n\nAlternatively, use bookmarksync-gitAUR for that purpose. There you can manually edit and sync bookmarks to both sides.\n\n"
    },
    {
      "title": "Application-specific settings",
      "level": 4,
      "content": "In addition to the environment variable approach, some GTK applications have their own settings for forcing use of XDG Portals:\n\n- Firefox â€” See Firefox#XDG Desktop Portal integration\n\n"
    },
    {
      "title": "Themes not working in GTK applications",
      "level": 3,
      "content": "If the style or theme engine you set up is not showing in your GTK applications then it is likely your GTK settings files are not being loaded for some reason. You can check where your system expects to find these files by doing the following:\n\n```\n$ export | grep gtk\n```\n\nUsually the expected files should be ~/.gtkrc for GTK1 and ~/.gtkrc2.0 or ~/.gtkrc2.0-kde for GTK 2.x.\n\n"
    },
    {
      "title": "GTK applications do not use svg (breeze) icons after system upgrade",
      "level": 3,
      "content": "Try to run this to fix this issue:\n\n```\n# gdk-pixbuf-query-loaders --update-cache\n```\n\n"
    },
    {
      "title": "GTK applications do not fully use KDE system settings",
      "level": 3,
      "content": "To further integrate Plasma settings on GTK applications, one may want to install gnome-settings-daemon, gsettings-desktop-schemas and gsettings-qt. This will offer proper Qt bindings for GTK.\n\n"
    },
    {
      "title": "kde-gtk-config \"System Settings > Application Style > GTK\" menu missing",
      "level": 3,
      "content": "When kde-gtk-config breaks and the \"Application Style > GTK\" menu is missing from System Settings, it is possible to choose GTK configuration tools like lxappearance and nwg-look to be able to configure GTK 2 and GTK 3 styles. lxappearance is desktop independent even if it comes from the LXDE project (it does not require other parts of the LXDE desktop). nwg-look is a GTK3 settings editor, designed to work properly in wlroots-based Wayland environment. The look and feel is strongly influenced by LXAppearance, but nwg-look is intended to free the user from a few inconveniences.\n\n"
    },
    {
      "title": "Dolphin theming does not match Nautilus well",
      "level": 3,
      "content": "Check the section Mismatched folder view background colors for how to deal with weird coloring.\n\n"
    },
    {
      "title": "The KDE Plasma XDG Desktop Portal is not being used",
      "level": 3,
      "content": "Follow XDG Desktop Portal#Force desktop environment with XDG_CURRENT_DESKTOP=KDE.\n\n"
    },
    {
      "title": "Qt5: kvantum is not available as a style in the Qt settings app",
      "level": 3,
      "content": "Be sure to have kvantum-qt5 installed.\n\n"
    }
  ]
}