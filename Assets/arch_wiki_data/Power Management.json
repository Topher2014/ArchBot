{
  "title": "Power Management",
  "url": "https://wiki.archlinux.org/title/Power_Management",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- /Suspend and hibernate\n- /Wakeup triggers\n- CPU frequency scaling\n- Display Power Management Signaling\n- Hybrid graphics\n- sysctl\n\nPower management is a feature that turns off the power or switches system components to a low-power state when inactive.\n\nIn Arch Linux, power management consists of two main parts:\n\n1. Configuration of the Linux kernel, which interacts with the hardware: Kernel parameters Kernel modules udev rules\n1. Configuration of userspace tools, which interact with the kernel and react to its events. Many userspace tools also allow modification of kernel configuration in a \"user-friendly\" way. See #Userspace tools for the options.\n\n- Kernel parameters\n- Kernel modules\n- udev rules\n\n"
    },
    {
      "title": "Userspace tools",
      "level": 2,
      "content": "These tools allow you to change a lot of settings without the need to edit config files by hand. Only run one of these tools to avoid possible conflicts as they all work more or less similarly. Have a look at the power management category to get an overview on what power management options exist in Arch Linux.\n\nThese are the more popular scripts and tools designed to help power saving:\n\n"
    },
    {
      "title": "Console",
      "level": 3,
      "content": "- acpid — A daemon for delivering ACPI power management events with netlink support.\n\n- Laptop Mode Tools — Utility to configure laptop power saving settings, considered by many to be the de facto utility for power saving though may take a bit of configuration.\n\n- libsmbios — Library and tools for interacting with Dell SMBIOS tables.\n\n- powertop — A tool to diagnose issues with power consumption and power management to help set power saving settings.\n\n- powerstat — A tool that measures power consumption using the ACPI or Intel RAPL interface.\n\n- systemd — A system and service manager.\n\n- TLP — Advanced power management for Linux.\n\n- TuneD — Daemon that performs monitoring and adaptive configuration of devices in the system\n\n- UPower — Abstraction for enumerating power devices, listening to device events and querying history and statistics.\n\n- power-profiles-daemon — Makes power profiles handling available over D-Bus\n\n"
    },
    {
      "title": "Graphical",
      "level": 3,
      "content": "- batsignal — Lightweight battery monitor that uses libnotify to warn of low battery levels.\n\n- cbatticon — Lightweight and fast battery icon that sits in your system tray.\n\n- GNOME Power Statistics — System power information and statistics for GNOME.\n\n- KDE Power Devil — Power management module for Plasma.\n\n- LXQt Power Management — Power management module for LXQt.\n\n- MATE Power Management — Power management tool for MATE.\n\n- MATE Power Statistics — System power information and statistics for MATE.\n\n- poweralertd — Daemon for delivering UPower notifications.\n\n- powerkit — Desktop independent power manager.\n\n- Xfce Power Manager — Power manager for Xfce.\n\n- vattery — Battery monitoring application written in Vala that will display the status of a laptop battery in a system tray.\n\n"
    },
    {
      "title": "ACPI events",
      "level": 2,
      "content": "systemd handles some power-related ACPI events, whose actions can be configured in /etc/systemd/logind.conf or /etc/systemd/logind.conf.d/*.conf — see logind.conf(5). On systems with no dedicated power manager, this may replace the acpid daemon which is usually used to react to these ACPI events.\n\nThe specified action for each event can be one of ignore, poweroff, reboot, halt, suspend, hibernate, hybrid-sleep, suspend-then-hibernate, lock or kexec. In case of hibernation and suspension, they must be properly set up. If an event is not configured, systemd will use a default action.\n\nTable content:\nEvent handler | Description | Default action\nHandlePowerKey | Triggered when the power key/button is pressed. | poweroff\nHandleSuspendKey | Triggered when the suspend key/button is pressed. | suspend\nHandleHibernateKey | Triggered when the hibernate key/button is pressed. | hibernate\nHandleLidSwitch | Triggered when the lid is closed, except in the cases below. | suspend\nHandleLidSwitchDocked | Triggered when the lid is closed if the system is inserted in a docking station, or more than one display is connected. | ignore\nHandleLidSwitchExternalPower | Triggered when the lid is closed if the system is connected to external power. | action set for HandleLidSwitch\n\nTo apply changes, reload systemd-logind.service.\n\n- systemd cannot handle AC and Battery ACPI events, so if you use Laptop Mode Tools or other similar tools acpid is still required.\n- When performing lid switches in short succession, logind will delay the suspend action for up to 90s to detect possible docks. [1] This delay was made configurable with systemd v220. [2] You can use e.g. HoldoffTimeoutSec=30s in logind.conf or its drop-in file.\n\n"
    },
    {
      "title": "Power managers",
      "level": 3,
      "content": "Some desktop environments include power managers which inhibit (temporarily turn off) some or all of the systemd ACPI settings. If such a power manager is running, then the actions for ACPI events can be configured in the power manager alone. Changes to /etc/systemd/logind.conf or /etc/systemd/logind.conf.d/*.conf need be made only if you wish to configure behaviour for a particular event that is not inhibited by the power manager.\n\nNote that if the power manager does not inhibit systemd for the appropriate events you can end up with a situation where systemd suspends your system and then when the system is woken up the other power manager suspends it again. The power managers of GNOME, MATE, Plasma and Xfce issue the necessary inhibited commands. If the inhibited commands are not being issued, such as when using acpid or others to handle ACPI events, set the Handle options to ignore. See also systemd-inhibit(1).\n\n"
    },
    {
      "title": "xss-lock",
      "level": 3,
      "content": "xss-lock subscribes to the systemd-events suspend, hibernate, lock-session, and unlock-session with appropriate actions (run locker and wait for user to unlock or kill locker). xss-lock also reacts to DPMS events and runs or kills the locker in response.\n\nAutostarting the following for example:\n\n```\n$ xss-lock -- i3lock -n -i background_image.png &\n```\n\n"
    },
    {
      "title": "Power saving",
      "level": 2,
      "content": "This section is a reference for creating custom scripts and power saving settings such as by udev rules. Make sure that the settings are not managed by some other utility to avoid conflicts.\n\nAlmost all of the features listed here are worth using whether or not the computer is on AC or battery power. Most have negligible performance impact and are just not enabled by default because of commonly broken hardware/drivers. Reducing power usage means reducing heat, which can even lead to higher performance on a modern Intel or AMD CPU, thanks to dynamic overclocking.\n\n"
    },
    {
      "title": "Print power settings",
      "level": 3,
      "content": "This script prints power settings and a variety of other properties for USB and PCI devices. Note that root permissions are needed to see all settings.\n\n```\n#!/bin/bash\n\nfor i in $(find /sys/devices/ -name \"bMaxPower\")\ndo\n\tbusdir=${i%/*}\n\tbusnum=$(<$busdir/busnum)\n\tdevnum=$(<$busdir/devnum)\n\ttitle=$(lsusb -s $busnum:$devnum)\n\n\tprintf \"\\n\\n+++ %s\\n  -%s\\n\" \"$title\" \"$busdir\"\n\n\tfor ff in $(find $busdir/power/ -type f ! -empty 2>/dev/null)\n\tdo\n\t\tv=$(cat $ff 2>/dev/null|tr -d \"\\n\")\n\t\t[[ ${#v} -gt 0 ]] && echo -e \" ${ff##*/}=$v\";\n\t\tv=;\n\tdone | sort -g;\ndone;\n\nprintf \"\\n\\n\\n+++ %s\\n\" \"Kernel Modules\"\nfor mod in $(lspci -k | sed -n '/in use:/s,^.*: ,,p' | sort -u)\ndo\n\techo \"+ $mod\";\n\tsystool -v -m $mod 2> /dev/null | sed -n \"/Parameters:/,/^$/p\";\ndone\n```\n\n"
    },
    {
      "title": "Processors with Intel Hardware P-state support",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with CPU frequency scaling.** This article or section is a candidate for merging with CPU frequency scaling.\n\nThis article or section is a candidate for merging with CPU frequency scaling.\n\nThe available energy preferences of an Intel Hardware P-state (HWP) supported processor are default, performance, balance_performance, balance_power, power.\n\nThis can be validated by running\n\n```\n$ cat /sys/devices/system/cpu/cpufreq/policy*/energy_performance_available_preferences\n```\n\nTo conserve more energy, you can edit the configuration by creating the following file:\n\n```\n/etc/tmpfiles.d/energy_performance_preference.conf\n```\n\n```\nw /sys/devices/system/cpu/cpufreq/policy*/energy_performance_preference - - - - balance_power\n```\n\nSee the x86_energy_perf_policy(8) man page for more details on energy-performance policy in Intel processors. Also see systemd-tmpfiles(8) and tmpfiles.d(5) man pages for temporary files/directories details.\n\n"
    },
    {
      "title": "Audio",
      "level": 3,
      "content": "Whether power saving is turned on by default depends on a given driver, e.g. it is on for HD Audio. Identify the module in use, then run\n\n```\n$ modinfo --field=parm module_name | column --separator=':' --table --table-columns-limit=2\n```\n\nand look for a kernel module parameter (like power_save) that adjusts or disables power-saving feature.\n\n- Advanced Linux Sound Architecture/Troubleshooting#Power saving\n- PipeWire#Noticeable audio delay or audible pop/crack when starting playback\n- PulseAudio/Troubleshooting#Pops when starting and stopping playback\n\n"
    },
    {
      "title": "Backlight",
      "level": 3,
      "content": "See Backlight.\n\n"
    },
    {
      "title": "Bluetooth",
      "level": 3,
      "content": "To disable Bluetooth completely, blacklist the btusb and bluetooth modules.\n\nAlternatively, create the following udev rules:\n\n```\n/etc/udev/rules.d/50-bluetooth.rules\n```\n\n```\n# disable bluetooth\nSUBSYSTEM==\"rfkill\", ATTR{type}==\"bluetooth\", ATTR{state}=\"0\"\n```\n\nTo turn off Bluetooth only temporarily, use rfkill(8):\n\n```\n# rfkill block bluetooth\n```\n\n"
    },
    {
      "title": "Web camera",
      "level": 3,
      "content": "If you will not use integrated web camera then blacklist the uvcvideo module.\n\n"
    },
    {
      "title": "Kernel parameters",
      "level": 3,
      "content": "This section uses configurations in /etc/sysctl.d/, which is \"a drop-in directory for kernel sysctl parameters.\" See The New Configuration Files and more specifically sysctl.d(5) for more information.\n\n"
    },
    {
      "title": "Disabling NMI watchdog",
      "level": 4,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nThe NMI watchdog is a debugging feature to catch hardware hangs that cause a kernel panic. On some systems it can generate a lot of interrupts, causing a noticeable increase in power usage. To list these interrupts per CPU core since last boot, you can use:\n\n```\n$ grep NMI /proc/interrupts\n```\n\n```\nNMI:     22     58     24     23     24     39     22     30   Non-maskable interrupts\n```\n\nTo turn the hardlockup detector off, use:\n\n```\n/etc/sysctl.d/disable_watchdog.conf\n```\n\n```\nkernel.nmi_watchdog = 0\n```\n\nor add nmi_watchdog=0 to the kernel line.\n\nAlternatively add nowatchdog to the kernel line to disable both hard and soft lockup detectors. See [3]\n\n"
    },
    {
      "title": "Writeback Time",
      "level": 4,
      "content": "Increasing the virtual memory dirty writeback time helps to aggregate disk I/O together, thus reducing spanned disk writes, and increasing power saving. To set the value to 60 seconds (default is 5 seconds):\n\n```\n/etc/sysctl.d/dirty.conf\n```\n\n```\nvm.dirty_writeback_centisecs = 6000\n```\n\nTo do the same for journal commits on supported filesystems (e.g. ext4, btrfs...), use commit=60 as an option in fstab.\n\nNote that this value is modified as a side effect of the Laptop Mode setting below. See also sysctl#Virtual memory for other parameters affecting I/O performance and power saving.\n\n"
    },
    {
      "title": "Laptop Mode",
      "level": 4,
      "content": "See the kernel documentation on the laptop mode \"knob\" - \"A sensible value for the knob is 5 seconds\".\n\n```\n/etc/sysctl.d/laptop.conf\n```\n\n```\nvm.laptop_mode = 5\n```\n\n"
    },
    {
      "title": "Network interfaces",
      "level": 3,
      "content": "Wake-on-LAN can be a useful feature, but if you are not making use of it then it is simply draining extra power waiting for a magic packet while in suspend. You can adapt the Wake-on-LAN#udev rule to disable the feature for all ethernet interfaces. To enable powersaving with iw on all wireless interfaces:\n\n```\n/etc/udev/rules.d/81-wifi-powersave.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"net\", KERNEL==\"wl*\", RUN+=\"/usr/bin/iw dev $name set power_save on\"\n```\n\nThe name of the configuration file is important. With the use of persistent device names in systemd, the above network rule, named lexicographically after 80-net-setup-link.rules, is applied after the device is renamed with a persistent name e.g. wlan0 renamed wlp3s0. Be aware that the RUN command is executed after all rules have been processed and must anyway use the persistent name, available in $name for the matched device.\n\n"
    },
    {
      "title": "Intel wireless cards (iwlwifi)",
      "level": 4,
      "content": "Additional power saving functions of Intel wireless cards with iwlwifi driver can be enabled by passing the correct parameters to the kernel module. Making them persistent can be achieved by adding the lines below to the /etc/modprobe.d/iwlwifi.conf file:\n\n```\noptions iwlwifi power_save=1\n```\n\nThis option will probably increase your median latency:\n\n```\noptions iwlwifi uapsd_disable=0\n```\n\nOn kernels < 5.4 you can use this option, but it will probably decrease your maximum throughput:\n\n```\noptions iwlwifi d0i3_disable=0\n```\n\nDepending on your wireless card one of these two options will apply.\n\n```\noptions iwlmvm power_scheme=3\n```\n\n```\noptions iwldvm force_cam=0\n```\n\nYou can check which one is relevant by checking which of these modules is running using\n\n```\n# lsmod | grep '^iwl.vm'\n```\n\nKeep in mind that these power saving options are experimental and can cause an unstable system.\n\n"
    },
    {
      "title": "Active State Power Management",
      "level": 4,
      "content": "From Wikipedia:\n\nAt boot, the BIOS enables or disables ASPM based on hardware support. To check for support:\n\n```\n# lspci -vv | grep 'ASPM.*abled;'\n```\n\nFetch available ASPM policies and the current system default using the following:\n\n```\n$ cat /sys/module/pcie_aspm/parameters/policy\n```\n\n```\n[default] performance powersave powersupersave\n```\n\nASPM might be disabled for the following reasons [4]:\n\n1. The BIOS determined that needed to happen.\n1. PCIE requires ASPM but L0s is optional so you might have L0s disabled and only L1 enabled.\n1. You have a buggy BIOS.\n1. You have no BIOS and your systems programmers did not address ASPM yet.\n\nIf you believe that your hardware has support for ASPM despite the above, it can be force-enabled for the kernel to handle with the pcie_aspm=force kernel parameter.\n\n- Force-enabling ASPM on an unsupported system may lead to increased power consumption. Furthermore, it may cause system freezes or kernel panics, so make sure you have a way to undo the option if it is unsuitable.\n- Forcing ASPM takes place in the kernel, and therefore it may still remain disabled in hardware and not work. To check whether this is the case, run dmesg | grep ASPM as root. Consult the Wiki article specific to your hardware for more information if possible.\n\nAs long as ASPM is supported and enabled, it is possible to select a desired policy for the current session. For example, switch to powersupersave for the current session by doing the following:\n\n```\n# echo powersupersave > /sys/module/pcie_aspm/parameters/policy\n```\n\nTo configure a specific ASPM state to enable upon system boot (using powersupersave as an example), add pcie_aspm.policy=powersupersave as a kernel parameter.\n\n"
    },
    {
      "title": "PCI Runtime Power Management",
      "level": 4,
      "content": "```\n/etc/udev/rules.d/pci_pm.rules\n```\n\n```\nSUBSYSTEM==\"pci\", ATTR{power/control}=\"auto\"\nSUBSYSTEM==\"ata_port\", KERNEL==\"ata*\", ATTR{device/power/control}=\"auto\"\n```\n\nThe rule above powers down unused devices.\n\nSome devices will not wake up again. To allow runtime power management only for devices that are known to work, use simple matching against vendor and device IDs (use lspci -nn to get these values):\n\n```\n/etc/udev/rules.d/pci_pm.rules\n```\n\n```\n# whitelist for pci autosuspend\nSUBSYSTEM==\"pci\", ATTR{vendor}==\"0x1234\", ATTR{device}==\"0x1234\", ATTR{power/control}=\"auto\"\n```\n\nAlternatively, to blacklist devices that are not working with PCI runtime power management and enable it for all other devices:\n\n```\n/etc/udev/rules.d/pci_pm.rules\n```\n\n```\n# blacklist for pci runtime power management\nSUBSYSTEM==\"pci\", ATTR{vendor}==\"0x1234\", ATTR{device}==\"0x1234\", ATTR{power/control}=\"on\", GOTO=\"pci_pm_end\"\n\nSUBSYSTEM==\"pci\", ATTR{power/control}=\"auto\"\nLABEL=\"pci_pm_end\"\n```\n\n"
    },
    {
      "title": "USB autosuspend",
      "level": 4,
      "content": "The Linux kernel can automatically suspend USB devices when they are not in use. This can sometimes save quite a bit of power, however some USB devices are not compatible with USB power saving and start to misbehave (common for USB mice/keyboards). udev rules based on whitelist or blacklist filtering can help to mitigate the problem.\n\nThe example is enabling autosuspend for all USB devices except for keyboards and mice:\n\n```\n/etc/udev/rules.d/50-usb_power_save.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"usb\", ATTR{product}!=\"*Mouse\", ATTR{product}!=\"*Keyboard\", TEST==\"power/control\", ATTR{power/control}=\"auto\"\n```\n\nTo allow autosuspend only for devices that are known to work, use simple matching against vendor and product IDs (use lsusb to get these values):\n\n```\n/etc/udev/rules.d/50-usb_power_save.rules\n```\n\n```\n# whitelist for usb autosuspend\nACTION==\"add\", SUBSYSTEM==\"usb\", TEST==\"power/control\", ATTR{idVendor}==\"05c6\", ATTR{idProduct}==\"9205\", ATTR{power/control}=\"auto\"\n```\n\nAlternatively, to blacklist devices that are not working with USB autosuspend and enable it for all other devices:\n\n```\n/etc/udev/rules.d/50-usb_power_save.rules\n```\n\n```\n# blacklist for usb autosuspend\nACTION==\"add\", SUBSYSTEM==\"usb\", ATTR{idVendor}==\"05c6\", ATTR{idProduct}==\"9205\", GOTO=\"power_usb_rules_end\"\n\nACTION==\"add\", SUBSYSTEM==\"usb\", TEST==\"power/control\", ATTR{power/control}=\"auto\"\nLABEL=\"power_usb_rules_end\"\n```\n\nThe default autosuspend idle delay time is controlled by the autosuspend parameter of the usbcore built-in kernel module. To set the delay to 5 seconds instead of the default 2 seconds, add the following kernel parameter for your boot loader.\n\n```\nusbcore.autosuspend=5\n```\n\nSimilarly to power/control, the delay time can be fine-tuned per device by setting the power/autosuspend attribute. This means, alternatively, autosuspend can be disabled by setting power/autosuspend to -1 (i.e., never autosuspend):\n\n```\n/etc/udev/rules.d/50-usb_power_save.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"usb\", ATTR{idVendor}==\"05c6\", ATTR{idProduct}==\"9205\", ATTR{power/autosuspend}=\"-1\"\n```\n\nSee the Linux kernel documentation for more information on USB power management.\n\n"
    },
    {
      "title": "SATA Active Link Power Management",
      "level": 4,
      "content": "The current setting can be read from or written to /sys/class/scsi_host/host*/link_power_management_policy as follows:\n\n```\n$ grep . /sys/class/scsi_host/host*/link_power_management_policy\n$ echo \"med_power_with_dipm\" >/sys/class/scsi_host/hostN/link_power_management_policy\n```\n\nTable content:\nSetting | Description | Power saving\nmax_performance | current default | None\nmedium_power | - | ~1.0 Watts\nmed_power_with_dipm | recommended setting1 | ~1.5 Watts\nmin_power | WARNING: possible data loss2 | ~1.5 Watts\n\n1. Since Linux 4.15 there is a setting called med_power_with_dipm that matches the behaviour of Windows IRST driver settings and should not cause data loss with recent SSDs or HDDs. The power saving can be significant, ranging from 1.0 to 1.5 Watts (when idle). It has become the default setting for Intel based laptops in Linux 4.16 [5]. In Linux 6.11 it became the default setting [6].\n1. Warning: The min_power SATA Active Link Power Management setting can lead to data loss on some devices. Do not enable this setting unless you have frequent backups.\n\nYou can configure link_power_management_policy settings persistently by adding a udev rules file, for example:\n\n```\n/etc/udev/rules.d/hd_power_save.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"scsi_host\", KERNEL==\"host*\", ATTR{link_power_management_policy}=\"med_power_with_dipm\"\n```\n\n- This adds latency when accessing a drive that has been idle, so it is one of the few settings that may be worth toggling based on whether you are on AC power.\n- Not all combinations of SATA host controllers and storage devices work well with the default med_power_with_dipm setting. For example: as of linux-6.8.1, Intel 7 Series Chipset controllers will experience timeouts and link degradation when accessing Crucial M550 SSDs (with firmware MU02). as of linux-6.9.6, AMD 600 Series Chipset SATA Controllers used with HL-DT-ST BDDVDRW GGC-H20L optical disk drives have the annoying effect that the ROM drive will noisily be re-initialized every few minutes.\n\n- as of linux-6.8.1, Intel 7 Series Chipset controllers will experience timeouts and link degradation when accessing Crucial M550 SSDs (with firmware MU02).\n- as of linux-6.9.6, AMD 600 Series Chipset SATA Controllers used with HL-DT-ST BDDVDRW GGC-H20L optical disk drives have the annoying effect that the ROM drive will noisily be re-initialized every few minutes.\n\n"
    },
    {
      "title": "Hard disk drive",
      "level": 3,
      "content": "See hdparm#Power management configuration for drive parameters that can be set.\n\nPower saving is not effective when too many programs are frequently writing to the disk. Tracking all programs, and how and when they write to disk is the way to limit disk usage. Use iotop to see which programs use the disk frequently. See Improving performance#Storage devices for other tips.\n\nSmall adjustments such as setting the noatime option can also help. If enough RAM is available, consider disabling or limiting swappiness as it has the possibility to limit a good number of disk writes.\n\nFor Seagate drives with PowerChoice technology, tricks setting APM via hdparm will not work due to the EPC (Extended Power Conditions) feature. Rather than setting APM, you can install openseachestAUR and fully disable EPC like so (replace X with actual drive letter):\n\n```\n# openSeaChest_PowerControl --scan\n# openSeaChest_PowerControl -d /dev/sdX -i\n# openSeaChest_PowerControl -d /dev/sdX --showEPCSettings\n# openSeaChest_PowerControl -d /dev/sdX --EPCfeature disable\n# openSeaChest_PowerControl -d /dev/sdX --showEPCSettings\n```\n\nLast invocation will give the following summary:\n\n```\n==========================================================================================\n openSeaChest_PowerControl - openSeaChest drive utilities - NVMe Enabled\n Copyright (c) 2014-2023 Seagate Technology LLC and/or its Affiliates, All Rights Reserved\n openSeaChest_PowerControl Version: 3.3.1-4_1_1 X86_64\n Build Date: Jul  4 2023\n Today: Tue Jul  4 17:49:36 2023        User: root\n==========================================================================================\n\n/dev/sdX - ST1000NM0008-2F2100 - ZFA19JG2 - SN02 - ATA\n\n\n===EPC Settings===\n        * = timer is enabled\n        C column = Changeable\n        S column = Savable\n        All times are in 100 milliseconds\n\nName       Current Timer Default Timer Saved Timer   Recovery Time C S\nIdle A      0            *10           *10           1             Y Y\nIdle B      0            *1200         *1200         3             Y Y\nIdle C      0             6000          6000         16            Y Y\nStandby Z   0             9000          9000         46            Y Y\n```\n\nZeroes in the first column confirm that parking and spindown were disabled successfully\n\n"
    },
    {
      "title": "Tools and scripts",
      "level": 2,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\n"
    },
    {
      "title": "Using a script and a udev rule",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with Laptop#Power management.** This article or section is a candidate for merging with Laptop#Power management.\n\nThis article or section is a candidate for merging with Laptop#Power management.\n\nSince systemd users can suspend and hibernate through systemctl suspend or systemctl hibernate and handle acpi events with /etc/systemd/logind.conf, it might be interesting to remove pm-utils and acpid. There is just one thing systemd cannot do (as of systemd-204): power management depending on whether the system is running on AC or battery. To fill this gap, you can create a single udev rule that runs a script when the AC adapter is plugged and unplugged:\n\n```\n/etc/udev/rules.d/powersave.rules\n```\n\n```\nSUBSYSTEM==\"power_supply\", ATTR{online}==\"0\", RUN+=\"/path/to/your/script true\"\nSUBSYSTEM==\"power_supply\", ATTR{online}==\"1\", RUN+=\"/path/to/your/script false\"\n```\n\nExamples of powersave scripts:\n\n- ftw, package: ftw-gitAUR\n- powersave\n- throttlectl, from throttlectlAUR\n\nThe above udev rule should work as expected, but if your power settings are not updated after a suspend or hibernate cycle, you should add a script in /usr/lib/systemd/system-sleep/ with the following contents:\n\n```\n/usr/lib/systemd/system-sleep/00powersave\n```\n\n```\n#!/bin/sh\n\ncase $1 in\n    pre) /path/to/your/script false ;;\n    post)\n\tif cat /sys/class/power_supply/AC0/online | grep 0 > /dev/null 2>&1\n\tthen\n    \t\t/path/to/your/script true\n\telse\n    \t\t/path/to/your/script false\n\tfi\n    ;;\nesac\nexit 0\n```\n\nDo not forget to make it executable!\n\n"
    },
    {
      "title": "Allow users to shutdown",
      "level": 2,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\n"
    },
    {
      "title": "Button and lid events",
      "level": 3,
      "content": "The suspend, poweroff and hibernate button presses and lid close events are handled by logind as described in #ACPI events.\n\n"
    },
    {
      "title": "Using systemd-logind",
      "level": 3,
      "content": "If you are using polkit, users with non-remote session can issue power-related commands as long as the session is not broken.\n\nTo check if your session is active:\n\n```\n$ loginctl show-session $XDG_SESSION_ID --property=Active\n```\n\nThe user can then use systemctl commands in the command line, or add them to menus:\n\n```\n$ systemctl poweroff\n$ systemctl reboot\n```\n\nOther commands can be used as well, including systemctl suspend and systemctl hibernate. See the System Commands section in systemctl(1).\n\n"
    },
    {
      "title": "Using sudo",
      "level": 3,
      "content": "Install sudo, and give the user sudo privileges. The user will then be able to use the sudo systemctl commands (e.g. sudo systemctl poweroff, sudo systemctl reboot, sudo systemctl suspend and sudo systemctl hibernate). See the System Commands section in systemctl(1)\n\n"
    },
    {
      "title": "Users without sudo privileges",
      "level": 4,
      "content": "If users should only be allowed to use shutdown commands, but not have other sudo privileges, then, as root, add the following to the end of /etc/sudoers using the visudo command. Substitute user for your username and hostname for the machine's hostname.\n\n```\nuser hostname =NOPASSWD: /usr/bin/systemctl poweroff,/usr/bin/systemctl halt,/usr/bin/systemctl reboot\n```\n\nNow your user can shutdown with sudo systemctl poweroff, and reboot with sudo systemctl reboot. Users wishing to power down a system can also use sudo systemctl halt. Use the NOPASSWD: tag only if you do not want to be prompted for your password.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- ThinkWiki:How to reduce power consumption\n- How to get longer battery life on Linux\n\n"
    }
  ]
}