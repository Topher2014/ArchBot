{
  "title": "Media Transfer Protocol",
  "url": "https://wiki.archlinux.org/title/Media_Transfer_Protocol",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Android#Transferring files\n- USB storage devices\n\nThe Media Transfer Protocol (MTP) can be used to transfer media files to and from many mobile phones (all Windows Phone 7/8/10 devices, most newer Android devices) and media players (e.g. Creative Zen).\n\n"
    },
    {
      "title": "Connecting",
      "level": 2,
      "content": "To connect your computer to a device via MTP:\n\n- the device needs to be connected to your computer via USB\n- MTP needs to be enabled on the device\n- the device's screen needs to be unlocked (for security reasons)\n\n"
    },
    {
      "title": "FUSE filesystems",
      "level": 2,
      "content": "The following programs let you access MTP devices via a FUSE filesystem.\n\nFor the FUSE-based file systems, you might need to create the mount-point directory first. The directory ~/mnt is used in the examples below.\n\nFUSE mounts can generally be unmounted using fusermount -u mountpoint.\n\n"
    },
    {
      "title": "Android File Transfer",
      "level": 3,
      "content": "Android File Transfer — MTP client with CLI, Qt UI, and FUSE wrapper which uses a custom MTP implementation\n\nMount your device on ~/mnt:\n\n```\n$ aft-mtp-mount ~/mnt\n```\n\nIf you want album art to be displayed, it must be named albumart.xxx and placed first in the destination folder. Then copy other files. Also, note that fuse could be 7-8 times slower than ui/cli file transfer.\n\nIf you want to interact with it via the command line interface, run the command:\n\n```\n$ aft-mtp-cli\n```\n\nType help in order to list all the commands available, exit to quit.\n\nIf you want to interact with it via the graphical user interface, start the android-file-transfer application, choose a destination folder and click any button on the toolbar. Available options are: Upload Album, Upload Directory and Upload Files. The latter two are self-explanatory. Upload album searches the source directory for album covers, and sets the best available cover.\n\n"
    },
    {
      "title": "MTPfs",
      "level": 3,
      "content": "MTPfs — based on libmtp, it is a FUSE filesystem that supports reading and writing from any MTP device\n\nFirst edit your /etc/fuse.conf and uncomment the following line:\n\n```\nuser_allow_other\n```\n\nMount your device on ~/mnt:\n\n```\n$ mtpfs -o allow_other ~/mnt\n```\n\n"
    },
    {
      "title": "jmtpfs",
      "level": 3,
      "content": "jmtpfs — based on libmtp for accessing MTP (Media Transfer Protocol) devices\n\nMount device on ~/mnt:\n\n```\n$ jmtpfs ~/mnt\n```\n\nMake this cohere to the rest of Linux (use regular mount/umount commands) by doing two steps\n\n```\n$# ln -s <actual mount command's path/name>  <a name consistent with Linux's mount convention>\n$  ln -s /sbin/jmtpfs                        /sbin/mount.jmtpfs\n```\n\nadd this line to /etc/fstab;\n\n```\n#jmtpfs <mount path>        fuse nodev,allow_other,<other options>                             0    0\n  jmtpfs /home/sam/run/motog fuse nodev,allow_other,rw,user,noauto,noatime,uid=1000,gid=1000    0    0\n```\n\nNow mount the device and see if the options \"took\"\n\n```\n$ mount /home/sam/run/motog\n Device 0 (VID=22b8 and PID=2e82) is a Motorola Moto G (ID2).\n Android device detected, assigning default bug flags\n $ mount \n  ...\n  jmtpfs on /home/sam/run/motog type fuse.jmtpfs (rw,nosuid,nodev,noexec,noatime,user_id=1000,group_id=1000,allow_other,user=sam)\n```\n\n"
    },
    {
      "title": "SIMPLE-MTPFS",
      "level": 3,
      "content": "SIMPLE-MTPFS — based on libmtp Simple Media Transfer Protocol FileSystem is a file system capable of operating on files on MTP devices attached via USB to local machine\n\nRun simple-mtpfs -l to list detected devices.\n\nTo mount the first device in the list to ~/mnt, run simple-mtpfs --device 1 ~/mnt.\n\n"
    },
    {
      "title": "go-mtpfs",
      "level": 3,
      "content": "go-mtpfs — FUSE filesystem with custom MTP implementation, written in Go\n\nInstall android-udev, which will allow you to edit /etc/udev/rules.d/51-android.rules and apply to your idVendor and idProduct, which you can see after running mtp-detect. To the end of the line, add your user OWNER=\"user\".\n\nMount device on ~/mnt:\n\n```\n$ go-mtpfs ~/mnt\n```\n\n- When using multiple devices you may want to use the -d flag to specify a device (id can be found by running mtp-detect\n- Mounting with go-mtpfs might fail if an external SD Card is present. If you try to access your device while having an SD card and go-mtpfs complains, try removing the SD card and mounting again.)\n- This package has not been maintained since 2020.\n\n"
    },
    {
      "title": "libmtp",
      "level": 2,
      "content": "libmtp is a library MTP implementation, which also comes with some example command-line tools (which you can list using pacman -Ql libmtp).\n\nInstall the libmtp package.\n\nRun mtp-detect to detect your device.\n\nIf an error is returned, make sure your user is in the adbusers user group.\n\nlibmtp is meant to be used as a library, not by an end user. Other then the mtp-detect command, the other commands-line tools are likely to be unnecessarily error prone for daily work. The upstream author refers to them as examples. As of Jan2025, see lines 115-138 of the README file. For a more concrete example see the old, but demonstrating, suggestion for Copying file from MTP device using libmtp (over USB). It is recommended to use a front end.\n\n"
    },
    {
      "title": "Frontends",
      "level": 3,
      "content": "gMTP — A graphical frontend for libmtp. It lets you connect to Android devices and manage files using a desktop agnostic GUI.\n\n"
    },
    {
      "title": "Media players",
      "level": 2,
      "content": "You can also use your MTP device in music players such as Amarok. To achieve this, you might have to edit /etc/udev/rules.d/51-android.rules (the MTP device used in the following example is a Galaxy Nexus). Run:\n\n```\n$ lsusb\n```\n\nSearch for your device. It should be something like that:\n\n```\nBus 003 Device 011: ID 04e8:6860 Samsung Electronics Co., Ltd GT-I9100 Phone [Galaxy S II], GT-P7500 [Galaxy Tab 10.1]\n```\n\nAnd entry to /etc/udev/rules.d/51-android.rules will be this:\n\n```\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"04e8\", ATTR{idProduct}==\"6860\", MODE=\"0666\", OWNER=\"[username]\"\n```\n\nAlso reload udev rules:\n\n```\n# udevadm control --reload\n```\n\n"
    },
    {
      "title": "File manager integration",
      "level": 2,
      "content": "To view the contents of your Android device's storage via MTP in your file manager, install the corresponding plugin:\n\n- For file managers that use GVFS (GNOME Files), install gvfs-mtp for MTP or gvfs-gphoto2 for PTP support.\n- For file managers that use KIO (KDE's Dolphin), MTP support is included in kio-extras (dependency of dolphin).\n\nAfter installing the required package, the device should show up in the file manager automatically and be accessible via an URL, for example mtp://[usb:002,013]/.\n\n"
    },
    {
      "title": "gvfs-mtp",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with udev.** This article or section is a candidate for merging with udev.\n\nThis article or section is a candidate for merging with udev.\n\nThe gvfs-mtp is available in the official repositories.\n\nWith lsusb you can get information about your device where Bus and Device numbers can be used with gvfs-mtp and device ID for creating of an udev rule.\n\n```\nBus 002 Device 018: ID 04b7:88a9 Compal Electronics, Inc.\n```\n\nTo see detected device with enabled MTP\n\nUse gio mount:\n\n```\ngio mount -li | grep -e ^Volume -e activation_root\n```\n\n```\nVolume(0): MT65xx Android Phone\n  activation_root=mtp://[usb:002,018]/\n```\n\nUse lsusb:\n\n```\nlsusb -v 2> /dev/null | grep -e Bus -e iInterface -e bInterfaceProtocol\n```\n\n```\n...\nBus 002 Device 018: ID 04b7:88a9 Compal Electronics, Inc. \n      bInterfaceProtocol      0 \n      iInterface              5 MTP\n...\n```\n\nTo mount all available connected MTP devices use inline script\n\n```\ngio mount -li | awk -F= '{if(index($2,\"mtp\") == 1)system(\"gio mount \"$2)}'\n```\n\nTo mount or dismount from a command with gvfs-mtp use Bus and Device numbers, e.g. to mount gio mount mtp://[usb:001,007]/ and to unmount gio mount -u mtp://[usb:001,007]/. The mounted device will be available in a directory that begins with mtp:host= and is located under /run/user/$UID/gvfs/.\n\nTo disable automount of MTP devices with gvfs you will need to change value true to false for variable AutoMount that is located in /usr/share/gvfs/mounts/mtp.mount.\n\nIf your device is not showing up in the file manager then #libmtp is missing a native support and is not currently available in the list of the supported devices. If you will try to mount by using command line you may also get an error\n\n```\nDevice 0 (VID=XXXX and PID=XXXX) is UNKNOWN.\nPlease report this VID/PID and the device model to the libmtp development team\n```\n\nThe workaround to make it shown in the file manager is to write an udev rule for the device but it is no guaranty that you will be able to mount it with by using MTP connection.\n\nUse ID number that represents by pattern vendorId:productID,e.g. 04b7:88a9, and make an udev rule by creating a configuration file\n\n```\n/etc/udev/rules.d/51-android.rules\n```\n\n```\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"04b7\", ATTR{idProduct}==\"88a9\", MODE=\"0660\", GROUP=\"uucp\", ENV{ID_MTP_DEVICE}=\"1\", SYMLINK+=\"libmtp\"\n```\n\nReload the udev rules.\n\n```\n# udevadm control --reload\n```\n\nThe file managers with support for gvfs will be able to show MTP devices and mount them if supported by #libmtp but if has no support and cannot be opened then change settings in the phone to PTP and install gvfs-gphoto2 for having access at least to the photos, command line mounting of PTP is a little similar to mounting of the MTP devices: gio mount gphoto2://[usb:002,019]/.\n\n"
    },
    {
      "title": "libmtp (gvfs-mtp): filemanager (nautilus, pcmanfm, vifm and etc) hangs on accessing DCIM/Camera of Android device",
      "level": 3,
      "content": "Symptoms: everything works fine till moment of entering DCIM/Camera directory. In this case filemanager freezes and even in command line you cannot run even ls on that directory.\n\nPossible and very probable reason is the bug of libmtp.\n\nIt seems that it is caused by file with name like 20180915_180351(0).jpg. Samsung phones for example like to create files with such names.\n\nThere are several tickets (one, two and etc) and questions (one, two) about it.\n\nSo possible workaround is to use different mtp option from #FUSE filesystems like go-mtpfs for such directories or somehow change file naming policy of your phone camera (or switch to another camera app like Open Camera for example).\n\n"
    },
    {
      "title": "jmtpfs: Input/output error upon first access",
      "level": 3,
      "content": "Symptoms: jmtpfs successfully mounts, but as soon as one attempts to access files on the device (e.g. via ls), an error is reported:\n\n```\ncannot access <mount-point>: Input/output error\n```\n\nThis appears to be a security feature: MTP does not work when the phone is locked by the lockscreen. Unlock the phone and it should work again as long as the cord remains connected.\n\n"
    },
    {
      "title": "kio-mtp: cannot use \"Open with File Manager\" action",
      "level": 3,
      "content": "If you are not able to use the action \"Open with File Manager\", you may work around this problem by editing the file /usr/share/solid/actions/solid_mtp.desktop.\n\nChange the line Exec=kioclient exec mtp:udi=%i/ to Exec=dolphin \"mtp:/\".\n\n"
    },
    {
      "title": "kio-mtp being called simultaneously by different services",
      "level": 3,
      "content": "Parallel usage of mtpfs and kio-mtp, as well as conflicting services using kio-mtp -music players included- should be avoided, as mentioned in this forum.\n\nAmarok's plugin for MTP services, for example, might be preventing Dolphin (plasma) to access different phone model's files. Switching it off was a solution for at least one user.\n\n"
    }
  ]
}