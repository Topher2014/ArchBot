{
  "title": "VSCode",
  "url": "https://wiki.archlinux.org/title/VSCode",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Code is a cross-platform text editor developed by Microsoft, built on the Electron framework. Visual Studio Code is a binary distribution of the MIT-licensed Code - OSS repository, with Microsoft specific customizations and released under a proprietary license. For details on the mixed licensing, see this GitHub comment. There is also a community-driven, MIT-licensed binary release called VSCodium with telemetry disabled by default.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "The following flavors of Visual Studio Code are available:\n\n- Code - OSS — Official Arch Linux open-source release. Ships a configuration enabling Open VSX.\n\n- Visual Studio Code — Proprietary Microsoft-branded release.\n\n- VSCodium — Community open-source release. Nullifies telemetry in the source code [1], also ships configuration with Open VSX.\n\nThese different flavors are all built from the Code - OSS repository, but with different licensing and default configurations. Notably, only the proprietary builds are permitted to use Microsoft's marketplace and use Microsoft proprietary extensions such as the OmniSharp C# Debugger. The latter is enforced by a handshake mechanism, and cannot be circumvented. For more info on the differences between open source and proprietary \"Visual Studio Code\" branded builds, consult the Code - OSS GitHub wiki.\n\n"
    },
    {
      "title": "Extensions support",
      "level": 3,
      "content": "One of Code's main strengths is its flexible API and rich extension ecosystem hosted on the Visual Studio Marketplace. However, the terms of use of the marketplace only permit it to be used with the Microsoft branded releases. As a result, the Code - OSS source does not include a configured marketplace. The open-source releases above add the Open VSIX extension registry, but this does not offer the same breadth of extensions. It is possible to bypass this limitation.\n\nKnown workarounds are:\n\n- ask the maintainer to upload its extension to the Open VSX registry;\n- add the Microsoft Visual Studio Code Marketplace by using one of the following packages relative to the build you are using: code-marketplaceAUR/vscodium-bin-marketplaceAUR/vscodium-marketplaceAUR/vscodium-electron-marketplaceAUR. Those packages install a Pacman hook that patches the file product.json as shown in this Github comment after every package update.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Run code to start the application (or if you are using other releases, run code-git for code-gitAUR or codium for vscodium-binAUR/vscodiumAUR/vscodium-gitAUR/vscodium-electronAUR).\n\nIf for any reason you wish to launch multiple instances of Visual Studio Code, the -n flag can be used.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "VSC stores settings in $XDG_CONFIG_HOME/nameShort/User/settings.json and the extension data in an XDG-nonstandard $HOME/dataFolderName directory, using variables from product.json.\n\nThis translates to the following default paths in various versions:\n\n- code stores settings in ~/.config/Code - OSS/User/settings.json and extensions in ~/.vscode-oss\n\n- visual-studio-code-binAUR stores settings in ~/.config/Code/User/settings.json and extensions in ~/.vscode\n\n- vscodiumAUR and related packages store settings in ~/.config/VSCodium/User/settings.json and extensions in ~/.vscode-oss\n\nWhen migrating from Code to Codium (or vice versa), the settings directory can be copied or moved, since they share most of their codebase, the settings are compatible.\n\n"
    },
    {
      "title": "Integrated terminal",
      "level": 3,
      "content": "View > Integrated Terminal or Ctrl + ` opens up an integrated terminal. By default, Bash is used with no additional arguments, although this can be changed. terminal.integrated.shell.linux sets the default shell to be used and terminal.integrated.shellArgs.linux sets the arguments to be passed to the shell.\n\nExample:\n\n```\n~/.config/Code/User/settings.json\n```\n\n```\n\"terminal.integrated.shell.linux\": \"/usr/bin/fish\",\n\"terminal.integrated.shellArgs.linux\": [\"-l\",\"-d 3\"]\n```\n\nYou might face weird prompts after setting the integrated shell arguments with an external terminal. Remove the line to solve the problem or use an external terminal.\n\n"
    },
    {
      "title": "External terminal",
      "level": 3,
      "content": "If you are using Terminator as default terminal for Arch and you have an error on Visual Studio Code: Unable to launch debugger worker process (vsdbg) through the terminal. spawn truecolor ENOENT, you can change the terminal that will be used by Visual Studio to another terminal (e.g. gnome-terminal).\n\n\"terminal.external.linuxExec\": \"Your alternative terminal\" sets the default terminal to be used for exec debug.\n\nExample:\n\n```\n~/.config/Code/User/settings.json\n```\n\n```\n\"terminal.external.linuxExec\": \"gnome-terminal\"\n```\n\n"
    },
    {
      "title": "Running natively under Wayland",
      "level": 3,
      "content": "Visual Studio Code uses Electron, see Wayland#Electron for more information on how to run it natively under Wayland.\n\nIf you choose not to use the environment variable for it, you will need to keep in mind that some applications do not use system electron, but bring their own. Such applications will not read the standard Electron flags file.\n\nWhen using a per-user configuration, both visual-studio-code-binAUR and code read ~/.config/code-flags.conf. Note that this is specific to these packages, as they use a patched loader script that reads these options.\n\nIf using vscodium-binAUR, use the ~/.config/codium-flags.conf file. If running from terminal, make sure to run it as codium (not vscodium), otherwise, it will not use native Wayland window.\n\nvscodiumAUR does not load config files (as it does not use a patched loader script). It provides a dedicated vscodium-wayland.desktop desktop entry file, which appears as \"VSCodium - Wayland\" in the menu.\n\n"
    },
    {
      "title": "Native file dialog",
      "level": 3,
      "content": "If using Plasma, by default VS Codium opens GTK file dialogs. To fix that, ensure that KDE desktop portal (xdg-desktop-portal-kde) is installed and set the GTK_USE_PORTAL=1 environment variable.\n\n"
    },
    {
      "title": "Remote SSH",
      "level": 3,
      "content": "The official \"Remote - SSH\" extension is not working with code (VSCode-OSS).\n\nThere are two options:\n\n- install code-featuresAUR\n\n- install the Open Remote-SSH extension (there is a PR to make it work with VSCode-OSS).\n\n"
    },
    {
      "title": "Global menu not working in KDE/Plasma",
      "level": 3,
      "content": "Visual Studio Code uses DBus to pass the menu to Plasma, try installing libdbusmenu-glib. [3]\n\n"
    },
    {
      "title": "Unable to move items to trash",
      "level": 3,
      "content": "By default, Electron applications use gio to delete files. kioclient5 is automatically selected instead if Plasma is detected. Different trash implementations can be used by setting the ELECTRON_TRASH environment variable.\n\nFor example, for deleting files using trash-cli:\n\n```\n$ ELECTRON_TRASH=trash-cli code\n```\n\nAt the time of writing, Electron supports kioclient5, kioclient, trash-cli, gio (default) and gvfs-trash (deprecated). More info is available at this documentation page.\n\n"
    },
    {
      "title": "Unable to debug C#",
      "level": 3,
      "content": "If you want to debug C#.NET (using the OmniSharp extension) then you need to install the Microsoft branded release (from the AUR). This is apparently because the .NET Core debugger is only licensed to be used with official Microsoft products - see this github discussion.\n\nWhen using the open-source package, debugging fails fairly quietly. The debug console will just show the initial message:\n\n```\nYou may only use the Microsoft .NET Core Debugger (vsdbg) with\nVisual Studio Code, Visual Studio or Visual Studio for Mac software\nto help you develop and test your applications.\n```\n\nFor debugging with the open-source package netcoredbgAUR can be used. To run it in VS Code, add this configuration to .NET Core launch configuration of the project:\n\n```\n./.vscode/launch.json\n```\n\n```\n\"configurations\": [\n    {\n...\n    \"pipeTransport\": {\n        \"pipeCwd\": \"${workspaceFolder}\",\n        \"pipeProgram\": \"/usr/bin/bash\",\n        \"pipeArgs\": [\"-c\"],\n        \"debuggerPath\": \"/usr/bin/netcoredbg\"\n    }\n...\n```\n\n"
    },
    {
      "title": "Unable to open .csproj with OmniSharp server, invalid Microsoft.Common.props location",
      "level": 3,
      "content": "You have to switch from mono to proper SDK version props.\n\n```\n/opt/dotnet/sdk/{VERSION}/Sdks/Microsoft.NET.Sdk/Sdk/Sdk.props\n```\n\n```\n$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\n```\n\nModify import to look like this:\n\n```\n/opt/dotnet/sdk/{VERSION}/Sdks/Microsoft.NET.Sdk/Sdk/Sdk.props\n```\n\n```\n/opt/dotnet/sdk/{VERSION}/Current/Microsoft.Common.props\n```\n\n"
    },
    {
      "title": "Error from OmniSharp that MSBuild cannot be located",
      "level": 3,
      "content": "It is noted in the OmniSharp introduction that Arch Linux users should install the mono-msbuild package. Without it, you might get an error like:\n\n```\nOmniSharp Log\n```\n\n```\n[info]: OmniSharp.MSBuild.Discovery.MSBuildLocator\n        Registered MSBuild instance: StandAlone 15.0 - \"~/.vscode/extensions/ms-vscode.csharp-1.18.0/.omnisharp/1.32.11/omnisharp/msbuild/15.0/Bin\"\n            MSBuildExtensionsPath = /usr/lib/mono/xbuild\n            BypassFrameworkInstallChecks = true\n            CscToolPath = ~/.vscode/extensions/ms-vscode.csharp-1.18.0/.omnisharp/1.32.11/omnisharp/msbuild/15.0/Bin/Roslyn\n            CscToolExe = csc.exe\n            MSBuildToolsPath = ~/.vscode/extensions/ms-vscode.csharp-1.18.0/.omnisharp/1.32.11/omnisharp/msbuild/15.0/Bin\n            TargetFrameworkRootPath = /usr/lib/mono/xbuild-frameworks\nSystem.TypeLoadException: Could not load type of field 'OmniSharp.MSBuild.ProjectManager:_queue' (13) due to: Could not load file or assembly 'System.Threading.Tasks.Dataflow, Version=4.5.24.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\n...\n```\n\nYou might be able to build anyway (possibly depending whether you have mono installed too).\n\nOmnisharp ships with its own mono version, so, if it is unable to locate the installed one, if you want to tell omnisharp to look for a \"global\" mono installed in your machine, put this in your settings.json:\n\n```\nsettings.json\n```\n\n```\n\"omnisharp.useGlobalMono:\"always\"\n```\n\n"
    },
    {
      "title": "Saving with \"Retry as Sudo\" does not work",
      "level": 3,
      "content": "This feature does not work in the code package, because Microsoft does not support the way the Arch package is packaged (native instead of bundled Electron). See FS#61516 and the upstream bug report for more information.\n\nThe binary release visual-studio-code-binAUR does not have this issue, and the feature works there.\n\n"
    },
    {
      "title": "Keyboard variants or keymappings do not map",
      "level": 3,
      "content": "As per the wiki on GitHub:\n\nPer the wiki, there are two possible solutions:\n\n1. make sure setxkbmap -query returns as the first keyboard layout the one you want to work with in VS Code.\n1. use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. This will prevent VS Code from trying to determine your keyboard layout whatsoever.\n\n"
    },
    {
      "title": "Command \"...\" not found",
      "level": 3,
      "content": "In the Microsoft branded releases, the product.json file lists the extensions that are allowed to use certain proposed APIs accessed by extensions. Code - OSS and VSCodium distributions lack these values, though this does not appear to be due to licensing. Unlike the forced Marketplace enabling, this workaround is endorsed by Microsoft [4].\n\nThis issue can be resolved by installing a Pacman hook that patches the file on every package update:\n\n- For code, install code-featuresAUR\n- For vscodiumAUR, install vscodium-featuresAUR\n- For vscodium-binAUR, install vscodium-bin-featuresAUR\n- For vscodium-electronAUR, install vscodium-electron-featuresAUR\n\nYou can also manually add the relevant entries to the extensionAllowedProposedApi section in the product.json file:\n\n- For code, edit /usr/lib/code/product.json\n- For vscodiumAUR, edit /usr/share/vscodium/resources/app/product.json\n- For vscodium-binAUR, edit /opt/vscodium-bin/resources/app/product.json\n- For vscodium-electronAUR, edit /usr/lib/vscodium/product.json\n\nAn example of a manual configuration that would make Live Share work is [5]:\n\n```\nproduct.json\n```\n\n```\n...\n  \"extensionAllowedProposedApi\": [\n    \"ms-vsliveshare.vsliveshare\",\n    \"ms-vscode.node-debug\",\n    \"ms-vscode.node-debug2\"\n  ]\n...\n```\n\nFinally, you can also enable these options using command line flags, as described for the GitHub pull request extension.\n\n"
    },
    {
      "title": "VS Live Share missing API",
      "level": 4,
      "content": "Use either the solution above by editing the product.json, or open VS Code with:\n\n```\n$ code --enable-proposed-api ms-vsliveshare.vsliveshare\n```\n\nAlso note that for this extension to work, you need to install dependencies listed here [6].\n\n"
    },
    {
      "title": "Command 'remote-containers.openFolder' not found",
      "level": 4,
      "content": "Open VS Code enabling remote-containers API as commented in FS#63374:\n\n```\n$ code-oss --enable-proposed-api ms-vscode-remote.remote-containers\n```\n\n"
    },
    {
      "title": "Command 'GitHub Pull Requests: Configure Remotes...' resulted in an error (command 'pr.configureRemotes' not found)",
      "level": 4,
      "content": "Open VS Code with:\n\n```\n$ code --enable-proposed-api GitHub.vscode-pull-request-github\n```\n\n"
    },
    {
      "title": "Git: ssh_askpass: exec(/usr/lib/ssh/ssh-askpass): No such file or directory",
      "level": 3,
      "content": "This error is a result of an encrypted ssh-key and inability to use ssh agent, see bug report. The issue can be solved by installing a dialogue provider like SSH keys#x11-ssh-askpass or the alternatives listed there (e.g. ksshaskpass for KDE).\n\nOne thing to note is that for ksshaskpass you would either need to link it from /usr/lib/ssh/ssh-askpass to get VSCode to find it:\n\n```\n# ln /usr/bin/ksshaskpass /usr/lib/ssh/ssh-askpass\n```\n\nor set the following environment variables for your shell, see [7]:\n\n```\nGIT_ASKPASS=ksshaskpass\nSSH_ASKPASS=ksshaskpass\nSSH_ASKPASS_REQUIRE=prefer\n```\n\nTo disable VSCode's internal git-askpass, add:\n\n```\n~/.config/Code - OSS/User/settings.json\n```\n\n```\n{\n    \"git.useIntegratedAskPass\": false\n}\n```\n\n"
    },
    {
      "title": "Cutoff characters in integrated Terminal",
      "level": 3,
      "content": "Characters that are too wide can end up clipping. For example the italic bold text of Deno stack-traces.\n\nThis can be avoided by setting \"terminal.integrated.rendererType\" to \"experimentalWebgl\".\n\n"
    },
    {
      "title": "Blurry text under Wayland",
      "level": 3,
      "content": "Visual Studio Code defaults to run under Xwayland, which may cause blurry text if you are using HiDPI screens. To fix this issue, try forcing Electron to run under Wayland—see #Running natively under Wayland.\n\nAlternatively, if your Wayland environment provides the option to run Xwayland applications unscaled, you can circumvent this issue. You may then run Visual Studio Code with the --force-device-scale-factor= option to achieve an appropriate scale for your screen.\n\nFor example, for a scaling factor of 2:\n\n```\n$ code --force-device-scale-factor=2\n```\n\n"
    },
    {
      "title": "No such interface“org.freedesktop.Secret.Collection”",
      "level": 3,
      "content": "See settings-sync#_troubleshooting-keychain-issues\n\n"
    },
    {
      "title": "Authentication with Github failed while using VSCodium",
      "level": 3,
      "content": "When connecting a Github account, change \"vscodium\" to \"vscode\" in the URL as seen in this comment. Then copy the identification token into VSCodium. Should it still fail, install a keyring like gnome-keyring or create a new keyring as mentioned here in the Visual Studio Code docs and here on Github.\n\n"
    },
    {
      "title": "An OS keyring couldn't be identified",
      "level": 3,
      "content": "On some desktop environments like i3, VSCode fails to detect the keyring. If you are using gnome-keyring, you can add the following line to force VSCode to use that keyring:\n\n```\n~/.vscode-oss/argv.json\n```\n\n```\n{\n    ...\n    \"password-store\": \"gnome-libsecret\",\n}\n```\n\nThe example path above is for the official code package. You might have to adjust the .vscode-oss directory path depending if you have a different one installed.\n\n"
    }
  ]
}