{
  "title": "YouCompleteMe",
  "url": "https://wiki.archlinux.org/title/YouCompleteMe",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "YouCompleteMe (shortened as YCM) is a code-completion engine for Vim. It supports the following languages:\n\n- C/C++/Objective-C/Objective-C++\n- Python\n- C#\n- Go\n- Rust\n- Java\n- JavaScript\n- TypeScript\n- Other languages (Ruby, PHP etc.) through the use of omnicompletion system\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the vim-youcompleteme-gitAUR package. For an alternative manual way of installing YouCompleteMe see upstream instructions.\n\n"
    },
    {
      "title": "C/C++",
      "level": 3,
      "content": "YCM uses a python script called .ycm_extra_conf.py to set project wide settings, needed to provide completion and syntax check. A brief introduction to essential configuration follows, for details and advanced options see the upstream documentation.\n\nAlternatively, provide a compile_commands.json in the project's root.\n\n"
    },
    {
      "title": "Extra conf structure",
      "level": 4,
      "content": "A sample .ycm_extra_conf.py may be found in [1]. You should save a copy of this file in your project folder and customize it with adequate settings for your source files.\n\nThe most important settings (which usually suffices for a minimal configuration) are the -x and --std options, which respectively tells the syntax checker the language used in the project and the standard followed. The -x value may be set to c or c++, while common values for the --std are --std=c89, --std=c99, --std=c11, --std=c14 and their respective c++ version. The standard parameter will determine the warning and the errors in the syntax check (e.g., a line commented with // will be marked as unallowed in C89, but not under following versions of the standard).\n\nA third party script and vim plugin for the automatic generation of the .ycm_extra_conf.py is available on this repo.\n\n"
    },
    {
      "title": "Extra conf location",
      "level": 4,
      "content": "The program searches for the .ycm_extra_conf.py file on startup in the current source file directory and in its parent folders. If the file is not found, YCM features are not available. A global file (used as fallback when a local extra conf file is not found) may be set adding the following to ~/.vimrc:\n\n```\n~/.vimrc\n```\n\n```\nlet g:ycm_global_ycm_extra_conf = '/path/to/the/file'\n```\n\nBeing the extra conf file a python script, when a file is found a confirmation is asked for security reason before to load it. This behaviour may be disabled adding the following to ~/.vimrc:\n\n```\n~/.vimrc\n```\n\n```\nlet g:ycm_confirm_extra_conf = 0\n```\n\nFor a less unsecure solution, when the confirmation is enabled an extra conf file blacklist/whitelist may be set assigning a list of patterns to the ycm_extra_conf_globlist variable. A file matching one pattern is blacklisted if the pattern begins with !, whitelisted otherwise, confirmation is asked if the file does not match any pattern. Rule precedence is determined by the order, and the first match is applied. Some glob pattern rules are available:\n\n- * matches everything\n- ? matches any single character\n- [seq] matches any character in seq\n- [!seq] matches any char not in seq\n\nIn example, with the following setting\n\n```\n~/.vimrc\n```\n\n```\nlet g:ycm_extra_conf_globlist = ['~/dev/*','!~/*']\n```\n\nany file in ~/dev will be whitelisted, any in ~/ will be blacklisted, and due to order precedence any file in ~/ excepted the ~/dev folder will be blacklisted.\n\n"
    },
    {
      "title": "Java",
      "level": 3,
      "content": "YCM has integrated support for jdt.ls which can be installed by passing --java-completer to the install.py script.\n\n"
    },
    {
      "title": "Java - alternative",
      "level": 3,
      "content": "For Java completion, a project file should be present and Eclim headless server must be running.\n\nInstall eclimAUR, then edit your .vimrc as follows:\n\n```\n~/.vimrc\n```\n\n```\nlet g:EclimCompletionMethod = 'omnifunc'\n```\n\nStart eclimd script in a separate terminal:\n\n```\n$ /usr/lib/eclipse/plugins/org.eclim_$pkgver/bin/eclimd\n```\n\nCreate a file named .project in the same directory as your Java files:\n\n```\n.project\n```\n\n```\n<projectDescription>\n    <name>PROJECTNAME</name>\n</projectDescription>\n```\n\nOpen your Java file in Vim and run:\n\n```\n:ProjectCreate . -n java\n```\n\nTo compile the project:\n\n```\n:ProjectBuild\n```\n\nTo run the project:\n\n```\n:Java\n```\n\nTo run only current file:\n\n```\n:JavaÂ %\n```\n\nA list of available commands may be found here.\n\n"
    },
    {
      "title": "C#",
      "level": 3,
      "content": "Before starting work with a C# project, ensure that mono-msbuild is installed on your system as it is a required dependency of Omnisharp-Roslyn, the C# completion engine used by YouCompleteMe. More information can be found in Omnisharp-Roslyn's README and the following Github issue.\n\nFirst create a solution file:\n\n```\nSOLUTION.sln\n```\n\n```\nMicrosoft Visual Studio Solution File, Format Version 11.00\n# Visual Studio 2010\nProject(\"{00000000-0000-0000-0000-000000000000}\") = \"PROJECT\", \"PROJECT\\PROJECT.csproj\", \"{11111111-1111-1111-1111-111111111111}\"\nEndProject\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{11111111-1111-1111-1111-111111111111}.Debug|x86.ActiveCfg = Debug|x86\n\t\t{11111111-1111-1111-1111-111111111111}.Debug|x86.Build.0 = Debug|x86\n\t\t{11111111-1111-1111-1111-111111111111}.Release|x86.ActiveCfg = Release|x86\n\t\t{11111111-1111-1111-1111-111111111111}.Release|x86.Build.0 = Release|x86\n\tEndGlobalSection\nEndGlobal\n```\n\nThen create a directory named PROJECT and in it a file named PROJECT.csproj:\n\n```\nPROJECT/PROJECT.csproj\n```\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project DefaultTargets=\"Build\" ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\n    <Platform Condition=\" '$(Platform)' == '' \">x86</Platform>\n    <ProductVersion>10.0.0</ProductVersion>\n    <SchemaVersion>2.0</SchemaVersion>\n    <ProjectGuid>{11111111-1111-1111-1111-111111111111}</ProjectGuid>\n    <OutputType>Exe</OutputType>\n    <RootNamespace>PROJECT</RootNamespace>\n    <AssemblyName>PROJECT</AssemblyName>\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|x86' \">\n    <DebugSymbols>true</DebugSymbols>\n    <DebugType>full</DebugType>\n    <Optimize>false</Optimize>\n    <OutputPath>bin\\Debug</OutputPath>\n    <DefineConstants>DEBUG;</DefineConstants>\n    <ErrorReport>prompt</ErrorReport>\n    <WarningLevel>4</WarningLevel>\n    <ConsolePause>false</ConsolePause>\n    <PlatformTarget>x86</PlatformTarget>\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|x86' \">\n    <DebugType>full</DebugType>\n    <Optimize>true</Optimize>\n    <OutputPath>bin\\Release</OutputPath>\n    <ErrorReport>prompt</ErrorReport>\n    <WarningLevel>4</WarningLevel>\n    <ConsolePause>false</ConsolePause>\n    <PlatformTarget>x86</PlatformTarget>\n  </PropertyGroup>\n  <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" />\n  <ItemGroup>\n    <Compile Include=\"HelloWorld.cs\" />\n    <Compile Include=\"CSharpFile1.cs\" />\n    <Compile Include=\"CSharpFile2.cs\" />\n  </ItemGroup>\n</Project>\n```\n\nPlace your C# files in PROJECT directory and do not forget to manually add them at the bottom of PROJECT/PROJECT.csproj.\n\nNow YouCompleteMe should work for C# files in that directory and you can build the project. To compile the project from inside Vim:\n\n```\n:!xbuild\n```\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "Remember that it might take some time for YouCompleteMe to generate a list of completion strings.\n\nThe following commands are available for diagnostics:\n\n- :messages - show previous errors or messages from Vim\n- :YcmDiags\n- :YcmDebugInfo\n\n"
    },
    {
      "title": "E764: Option 'omnifunc' is not set",
      "level": 3,
      "content": "If this happens for Java files, you forgot to put this in your .vimrc:\n\n```\n~/.vimrc\n```\n\n```\nlet g:EclimCompletionMethod = 'omnifunc'\n```\n\n"
    },
    {
      "title": "No completion in Java files",
      "level": 3,
      "content": "Make sure eclimd daemon is running:\n\n```\n$ ps -ax|grep eclimd\n```\n\nand that you have first generated project files.\n\n"
    },
    {
      "title": "URLError: <urlopen error [Errno 111] Connection refused>",
      "level": 3,
      "content": "This error appears when you do not have a .sln file in current or parent directory.\n\n"
    },
    {
      "title": "RuntimeError: Error starting OmniSharp server: no solutionfile found",
      "level": 3,
      "content": "Same as above.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- GitHub page\n\n"
    }
  ]
}