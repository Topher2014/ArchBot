{
  "title": "Java Fonts",
  "url": "https://wiki.archlinux.org/title/Java_Fonts",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Fonts\n- Font configuration\n- Microsoft fonts\n- X Logical Font Description\n\nSome users may find the default Java fonts or the display mode of fonts in Java applications to be unpleasant. Several methods to improve the font display in the Java Runtime Environment (JRE) are available. These methods may be used separately, but many users will find they achieve better results by combining them.\n\nTrueType fonts appear to be the best supported format for use with Java.\n\n"
    },
    {
      "title": "Anti-aliasing",
      "level": 2,
      "content": "Anti-aliasing of fonts is available with Oracle Java 1.6 and OpenJDK on Linux.\n\n"
    },
    {
      "title": "Running an xsettings daemon",
      "level": 3,
      "content": "Java tries to get the system defaults through xsettings. On GNOME you do not have to do anything, gnome-settings-daemon is already running. Otherwise Xsettingsd is a lightweight alternative.\n\n"
    },
    {
      "title": "Overriding the automatically picked up settings",
      "level": 3,
      "content": "If you do not want to run an xsettings daemon, or the fonts still look ugly, there is also an environment variable to configure anti-aliasing:\n\n```\n_JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=setting'\n```\n\nWhere setting is one of the values:\n\nTable content:\nSetting | Description\noff, false, default | No anti-aliasing\non | Full anti-aliasing\ngasp | Use the font's built-in hinting instructions\nlcd, lcd_hrgb | Anti-aliasing tuned for many popular LCD monitors\nlcd_hbgr, lcd_vrgb, lcd_vbgr | Alternative LCD monitor setting\n\nThe gasp and lcd settings work well in many instances.\n\nTo optionally to use GTK look and feel, add the following instead:\n\n```\n_JAVA_OPTIONS='-Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'\n```\n\nNote: **TrueType** \n\n- The described Java options only work for applications that draw their GUI in Java, like Jdownloader, and not for applications which utilize Java as backend only, like Openoffice.org and Matlab.\n- TrueType fonts contain a grid-fitting and scan-conversion procedure (GASP) table with the designer's recommendations for the font's display at different point sizes. Some sizes are recommended to be fully anti-aliased, others are to be hinted, and some are to be displayed as bitmaps. Combinations are sometimes used for certain point sizes.\n\n"
    },
    {
      "title": "TrueType fonts",
      "level": 3,
      "content": "Some Java applications may specify use of a particular TrueType font; these applications must be made aware of the directory path to the desired font. TrueType fonts are installed in the directory /usr/share/fonts/TTF. Add the following environment variable:\n\n```\nJAVA_FONTS=/usr/share/fonts/TTF\n```\n\n"
    },
    {
      "title": "Fixing tofu",
      "level": 3,
      "content": "Place font files in /usr/lib/jvm/java-8-openjdk/jre/lib/fonts/fallback/. Create it if needed.\n\nSubstitute the /usr/lib/jvm/java-8-openjdk for the $JAVA_HOME of the JRE you are actually using. Note that the feature is removed since Oracle Java 9, as Oracle considers it a bug to encourage users to change lib, moved the configuration files to conf and called the fallback functionality a \"mis-feature\". The specific function providing this behavior is sun.awt.FontConfiguration.getInstalledFallbackFonts, and OpenJDK seems to still have it.\n\nDoing so makes Java always add the fonts in this directory into the fallback sequence to look for character shapes (glyphs) in. This way, no matter what fonts the application has asked for, these additional fonts will provide the missing glyphs when needed.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Java Font Configuration Files (Java 11); Java 8\n\n"
    }
  ]
}