{
  "title": "Zmena MAC adresy",
  "url": "https://wiki.archlinux.org/title/Zmena_MAC_adresy",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "This article gives several methods to spoof a Media Access Control (MAC) address.\n\n"
    },
    {
      "title": "Manually",
      "level": 2,
      "content": "There are two methods for spoofing a MAC address: installing and configuring either iproute2 or macchanger. Both of them are outlined below.\n\n"
    },
    {
      "title": "iproute2",
      "level": 3,
      "content": "First, you can check your current MAC address with the command:\n\n```\n# ip link show interface\n```\n\nwhere interface is the name of your network interface.\n\nThe section that interests us at the moment is the one that has \"link/ether\" followed by a 6-byte number. It will probably look something like this:\n\n```\nlink/ether 00:1d:98:5a:d1:3a\n```\n\nThe first step to spoofing the MAC address is to bring the network interface down. It can be accomplished with the command:\n\n```\n# ip link set dev interface down\n```\n\nNext, we actually spoof our MAC. Any hexadecimal value will do, but some networks may be configured to refuse to assign IP addresses to a client whose MAC does not match up with any of known vendors. Therefore, unless you control the network(s) you are connecting to, use MAC prefix of any real vendor (basically, the first three bytes), and use random values for next three bytes. For more information please read Wikipedia:Organizationally unique identifier.\n\nTo change the MAC, we need to run the command:\n\n```\n# ip link set dev interface address XX:XX:XX:XX:XX:XX\n```\n\nWhere any 6-byte value will suffice for XX:XX:XX:XX:XX:XX.\n\nThe final step is to bring the network interface back up. This can be accomplished by running the command:\n\n```\n# ip link set dev interface up\n```\n\nIf you want to verify that your MAC has been spoofed, simply run ip link show interface again and check the value for 'link/ether'. If it worked, 'link/ether' should be whatever address you decided to change it to.\n\n"
    },
    {
      "title": "macchanger",
      "level": 3,
      "content": "Another method uses macchanger (a.k.a., the GNU MAC Changer). It provides a variety of features such as changing the address to match a certain vendor or completely randomizing it.\n\nInstall the package macchanger.\n\nThe spoofing is done on per-interface basis, specify network interface name as interface in each of the following commands.\n\nThe MAC address can be spoofed with a fully random address:\n\n```\n# macchanger -r interface\n```\n\nTo randomize only device-specific bytes of current MAC address (that is, so that if the MAC address was checked it would still register as being from the same vendor), you would run the command:\n\n```\n# macchanger -e interface\n```\n\nTo change the MAC address to a specific value, you would run:\n\n```\n# macchanger --mac=XX:XX:XX:XX:XX:XX interface\n```\n\nWhere XX:XX:XX:XX:XX:XX is the MAC you wish to change to.\n\nFinally, to return the MAC address to its original, permanent hardware value:\n\n```\n# macchanger -p interface\n```\n\n"
    },
    {
      "title": "systemd-udevd",
      "level": 3,
      "content": "udev allows you to perform MAC address spoofing by creating systemd.link(5) files or udev rules.\n\n"
    },
    {
      "title": "systemd.link",
      "level": 4,
      "content": "To set a static spoofed MAC address:\n\n```\n/etc/systemd/network/01-mac.link\n```\n\n```\n[Match]\nPermanentMACAddress=original MAC\n\n[Link]\nMACAddress=spoofed MAC\n```\n\nTo randomize the MAC address on every boot, set MACAddressPolicy=random instead of MACAddress=spoofed MAC.\n\n"
    },
    {
      "title": "udev rule",
      "level": 4,
      "content": "Use address attribute to match the correct device by its original MAC address and change it using the ip command:\n\n```\n/etc/udev/rules.d/81-mac-spoof.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"net\", ATTR{address}==\"original MAC\", RUN+=\"/usr/bin/ip link set dev $name address spoofed MAC\"\n```\n\n"
    },
    {
      "title": "Creating unit",
      "level": 4,
      "content": "Below you find two examples of systemd units to change a MAC address at boot, one sets a static MAC using ip and one uses macchanger to assign a random MAC address. The systemd network-pre.target is used to ensure the MAC is changed before a network manager like Netctl or NetworkManager, systemd-networkd or dhcpcd service starts.\n\nsystemd unit setting a predefined MAC address:\n\n```\n/etc/systemd/system/macspoof@.service\n```\n\n```\n[Unit]\nDescription=MAC Address Change %I\nWants=network-pre.target\nBefore=network-pre.target\nBindsTo=sys-subsystem-net-devices-%i.device\nAfter=sys-subsystem-net-devices-%i.device\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/ip link set dev %i address 36:aa:88:c8:75:3a\nExecStart=/usr/bin/ip link set dev %i up\n\n[Install]\nWantedBy=multi-user.target\n```\n\nsystemd unit setting a random address while preserving the original NIC vendor bytes. Ensure that macchanger is installed:\n\n```\n/etc/systemd/system/macspoof@.service\n```\n\n```\n[Unit]\nDescription=macchanger on %I\nWants=network-pre.target\nBefore=network-pre.target\nBindsTo=sys-subsystem-net-devices-%i.device\nAfter=sys-subsystem-net-devices-%i.device\n\n[Service]\nExecStart=/usr/bin/macchanger -e %I\nType=oneshot\n\n[Install]\nWantedBy=multi-user.target\n```\n\nA full random address can be set using the -r option, see #macchanger.\n\n"
    },
    {
      "title": "Enabling service",
      "level": 4,
      "content": "Append the desired network interface to the service name (e.g. eth0) and enable the service (e.g. macspoof@eth0.service).\n\nReboot, or stop and start the prerequisite and requisite services in the proper order. If you are in control of your network, verify that the spoofed MAC has been picked up by your router by examining the static, or DHCP address tables within the router.\n\n"
    },
    {
      "title": "netctl interfaces",
      "level": 3,
      "content": "You can use a netctl hook to run a command each time a netctl profile is re-/started for a specific network interface. Replace interface accordingly:\n\n```\n/etc/netctl/interfaces/interface\n```\n\n```\n#!/usr/bin/env sh\n/usr/bin/macchanger -r interface\n```\n\nMake the script executable.\n\nSource: akendo.eu (archive)\n\n"
    },
    {
      "title": "NetworkManager",
      "level": 3,
      "content": "See NetworkManager#Configuring MAC address randomization.\n\n"
    },
    {
      "title": "wpa_supplicant",
      "level": 3,
      "content": "wpa_supplicant can use random MAC address for each ESS connection(AP) (see [1] for details).\n\nAdd this to your configuration:\n\n```\n/etc/wpa_supplicant/wpa_supplicant-wlan0.conf\n```\n\n```\nmac_addr=1\npreassoc_mac_addr=1\ngas_rand_mac_addr=1\n```\n\n"
    },
    {
      "title": "iwd",
      "level": 3,
      "content": "To randomize the MAC address when iwd starts (see iwd.config(5) for details):\n\n```\n/etc/iwd/main.conf\n```\n\n```\n[General]\nAddressRandomization=once\nAddressRandomizationRange=nic\n```\n\nSpecifying AddressRandomizationRange enables control over which part of the address is randomized. If set to nic, only the NIC specific octets (last three octets) are randomized. The permanent mac address of the network interface is used for the initial 3 octets. If set to full, all six octets of the address are randomized.\n\n"
    },
    {
      "title": "Connection to DHCPv4 network fails",
      "level": 3,
      "content": "If you cannot connect to a DHCPv4 network and you are using dhcpcd, which is the default for NetworkManager, you might need to modify the dhcpcd configuration to obtain a lease.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:MAC spoofing\n- Macchanger GitHub page\n- Article on DebianAdmin with more macchanger options\n\n"
    }
  ]
}