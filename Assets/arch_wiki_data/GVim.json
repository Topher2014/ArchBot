{
  "title": "GVim",
  "url": "https://wiki.archlinux.org/title/GVim",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Neovim\n- Vis\n\nVim is a terminal text editor. It is an extended version of vi with additional features, including syntax highlighting, a comprehensive help system, native scripting (Vim script), a visual mode for text selection, comparison of files (vimdiff(1)), and tools with restricted capabilities such as rview(1) and rvim(1).\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install one of the following packages:\n\n- vim — with Python, Lua, Ruby and Perl interpreters support but without GTK/X support.\n- gvim — which also provides the same as the above vim package with GTK/X support.\n\n- The vim package is built without Xorg support; specifically the +clipboard feature is missing, so Vim will not be able to operate with the primary and clipboard selection buffers. The gvim package provides also the CLI version of Vim with the +clipboard feature.\n- The unofficial repository herecura also provides a number of Vim/gVim variants: vim-cli, vim-gvim-common, vim-gvim-gtk3, vim-rt and vim-tiny.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "For a basic overview on how to use Vim, follow the Vim tutorial by running either vimtutor (for the terminal version) or gvimtutor (for the graphical version).\n\nVim includes a broad help system that can be accessed with the :h subject command. Subjects include commands, configuration options, key bindings, plugins etc. Use the :h command (without any subject) for information about the help system and jumping between subjects.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Vim's user-specific configuration file is located in the home directory: ~/.vimrc, and Vim files of current user are located inside ~/.vim/. The global configuration file is located at /etc/vimrc. Global Vim files such as defaults.vim and archlinux.vim are located inside /usr/share/vim/.\n\nFrom version 9.1.0327 Vim adopts freedesktop XDG Base Directory Specification: that means, you can now place your configuration files under ~/.config/vim/ so Vim will stop littering your home directory.\n\nFor gVim, the user-specific configuration file is located at ~/.gvimrc and the global configuration file is located at /etc/gvimrc.\n\nNote: **s configuration file, while ** \n\n- Commonly expected behavior such as syntax highlighting is enabled in defaults.vim, which is loaded when no ~/.vimrc is present. Add let skip_defaults_vim=1 to /etc/vimrc to disable loading of defaults.vim completely. [1]. Alternatively, to enable defaults.vim even when ~/.vimrc is present, see :h defaults in vim.\n- gVim loads both Vim's and gVims configuration file, while Vim only loads Vims configuration file.\n\n"
    },
    {
      "title": "Clipboard",
      "level": 3,
      "content": "Vim commands such as :yank or :put normally operate with the unnamed register \"\". If the +clipboard feature is available and its value includes unnamed, then Vim yank, delete, change and put operations which would normally go to the unnamed register will use the clipboard register \"* instead, which is the PRIMARY buffer in X.\n\nTo change the default register, you can :set clipboard=unnamedplus to use the \"+ register instead. The \"+ clipboard register corresponds to the CLIPBOARD buffer in X. It should be noted that the clipboard option can be set to a comma-delimited value. If you :set clipboard=unnamedplus,unnamed, then yank operations will also copy the yanked text to the \"* register in addition to the \"+ register (however, delete, change and put operations will still only operate on the \"+ register).\n\nFor more information, see :help 'clipboard'. There are other values which can be set for the clipboard feature. You can use :help clipboard-unnamed to take you to the help topic for the first valid value which can be set for this feature, followed by help for all other valid values.\n\n- Custom shortcuts for copy and paste operations can be created. See e.g. [2] for binding Ctrl+c, Ctrl+v and Ctrl+x.\n- The X clipboard gets flushed when Vim exits. To make the Vim selection persistent within X clipboard, you need a clipboard manager. Alternatively, you can add autocmd VimLeave * call system(\"echo -n $'\" . escape(getreg(), \"'\") . \"' | xsel --input --clipboard\") to your .vimrc (requires the xsel package).\n\n"
    },
    {
      "title": "Syntax highlighting",
      "level": 3,
      "content": "To enable syntax highlighting for many programming languages:\n\n```\n:filetype plugin on\n:syntax on\n```\n\n"
    },
    {
      "title": "Indentation",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nThe indent file for specific file types can be loaded with:\n\n```\n:filetype indent on\n```\n\n"
    },
    {
      "title": "Visual wrapping",
      "level": 3,
      "content": "The wrap option is on by default, which instructs Vim to wrap lines longer than the width of the window, so that the rest of the line is displayed on the next line. The wrap option only affects how text is displayed, the text itself is not modified.\n\nThe wrapping normally occurs after the last character that fits the window, even when it is in the middle of a word. More intelligent wrapping can be controlled with the linebreak option. When it is enabled with set linebreak, the wrapping occurs after characters listed in the breakat string option, which by default contains a space and some punctuation marks (see :help breakat).\n\nWrapped lines are normally displayed at the beginning of the next line, regardless of any indentation. The breakindent option instructs Vim to take indentation into account when wrapping long lines, so that the wrapped lines keep the same indentation of the previously displayed line. The behaviour of breakindent can be fine-tuned with the breakindentopt option, for example to shift the wrapped line another four spaces to the right for Python files (see :help breakindentopt for details):\n\n```\nautocmd FileType python set breakindentopt=shift:4\n```\n\n"
    },
    {
      "title": "Using the mouse",
      "level": 3,
      "content": "Vim has the ability to make use of the mouse, but it only works for certain terminals:\n\n- xterm/urxvt-based terminal emulators\n- Linux console with gpm (see Console mouse support for details)\n- PuTTY\n\nTo enable this feature, add this line into ~/.vimrc:\n\n```\nset mouse=a\n```\n\nThe mouse=a option is set in defaults.vim.\n\n"
    },
    {
      "title": "Traverse line breaks with arrow keys",
      "level": 3,
      "content": "By default, pressing Left at the beginning of a line, or pressing Right at the end of a line, will not let the cursor traverse to the previous, or following, line.\n\nThe default behavior can be changed by adding set whichwrap=b,s,<,>,[,] to your ~/.vimrc file.\n\n"
    },
    {
      "title": "Merging files",
      "level": 2,
      "content": "Vim includes a diff editor (a program that shows differences between two or more files and aids to conveniently merge them). Use vimdiff to run the diff editor — just specify some couple of files to it: vimdiff file1 file2. Here is the list of vimdiff-specific commands.\n\nTable content:\nAction | Shortcut\nnext change | ]c\nprevious change | [c\ndiff obtain | do\ndiff put | dp\nfold open | zo\nfold close | zc\nrescan files | :diffupdate\n\n"
    },
    {
      "title": "Line numbers",
      "level": 3,
      "content": "To show the line number column, use :set number. By default absolute line numbers are shown, relative numbers can be enabled with :set relativenumber. Setting both enables hybrid line numbers—the current line is absolute, while the others are relative.\n\nJumping to a specific line is possible with :line number or line numbergg. Jumps are remembered in a jump list, see :h jump-motions for details.\n\n"
    },
    {
      "title": "Spell checking",
      "level": 3,
      "content": "Vim has the ability to do spell checking, enable by entering:\n\n```\nset spell\n```\n\nBy default, only English language dictionaries are installed (in /usr/share/vim/vim82/spell/). More dictionaries can be found in the official repositories by searching for vim-spell. Additional dictionaries can be put in the folder ~/.vim/spell/ and enabled with the command: :setlocal spell spelllang=en_us (replacing the en_us with the name of the needed dictionary).\n\nTable content:\nAction | Shortcut\nnext spelling | ]s\nprevious spelling | [s\nspelling suggestions | z=\nspelling good, add | zg\nspelling good, session | zG\nspelling wrong, add | zw\nspelling wrong, session | zW\nspelling repeat all in file | :spellr\n\nNote: **tex** \n\n- To enable spelling in two languages (for instance English and German), add set spelllang=en,de into your ~/.vimrc or /etc/vimrc, and then restart Vim.\n- You can enable spell checking for arbitrary file types (e.g. .txt) by using the FileType plugin and a custom rule for file type detection. To enable spell checking for any file ending with .txt, create the file /usr/share/vim/vimfiles/ftdetect/plaintext.vim, and insert the line autocmd BufRead,BufNewFile *.txt set filetype=plaintext into that file. Next, insert the line autocmd FileType plaintext setlocal spell spelllang=en_us into your ~/.vimrc or /etc/vimrc, and then restart Vim. Alternatively, one can simply insert the line autocmd BufRead,BufNewFile *.txt setlocal spell into their ~/.vimrc or /etc/vimrc, and then restart Vim. Be sure to edit this line (specifically *.txt) to include the filetype(s) intended for spell checking.\n- To enable spell checking for LaTeX (or TeX) documents only, add autocmd FileType tex setlocal spell spelllang=en_us into your ~/.vimrc or /etc/vimrc, and then restart Vim.\n\n"
    },
    {
      "title": "Saving runtime state",
      "level": 3,
      "content": "Normally, exiting vim discards all unessential information such as opened files, command line history, yanked text etc. Preserving this information can be configured in the following ways.\n\n"
    },
    {
      "title": "viminfo files",
      "level": 4,
      "content": "The viminfo file may also be used to store command line history, search string history, input-line history, registers' content, marks for files, location marks within files, last search/substitute pattern (to be used in search mode with n and & within the session), buffer list, and any global variables you may have defined. For the viminfo modality to be available, the version of vim you installed must have been compiled with the +viminfo feature.\n\nConfigure what is kept in your viminfo file, by adding (for example) the following to your ~/.vimrc file:\n\n```\nset viminfo='10,<100,:100,%,n~/.vim/.viminfo\n```\n\nwhere each parameter is preceded by an identifier:\n\n```\n'q  : q, number of edited file remembered\n<m  : m, number of lines saved for each register\n:p  : p, number of history cmd lines remembered\n%   : saves and restores the buffer list\nn...: fully qualified path to the viminfo files (note that this is a literal \"n\")\n```\n\nSee the official viminfo documentation for particulars on how a pre-existing viminfo file is modified as it is updated with current session information, say from several buffers in the current session you are in the process of exiting.\n\n"
    },
    {
      "title": "Session files",
      "level": 4,
      "content": "Session files can be used to save the state of any number of particular sessions over time. One distinct session file may be used for each session or project of your interest. For that modality to be available, the version of vim you installed must have been compiled with the +mksession feature.\n\nWithin a session, :mksession[!] [my_session_name.vim] will write a vim-script to my_session_name.vim in the current directory, or Session.vim by default if you choose not to provide a file name. The optional ! will clobber a pre-existing session file with the same name and path.\n\nA Vim session can be resumed either when starting Vim from terminal:\n\n```\n$ vim -S [my_session_name.vim]\n```\n\nOr in an already opened session buffer by running the Vim command:\n\n```\n:source my_session_name.vim\n```\n\nExactly what is saved and additional details on session files options are extensively covered in the Vim documentation. Commented examples are found here.\n\n"
    },
    {
      "title": "Saving cursor position",
      "level": 4,
      "content": "See Restore cursor to file position in previous editing session on the Vim wiki.\n\n"
    },
    {
      "title": "Replace vi command with Vim",
      "level": 3,
      "content": "Create an alias for vi to vim.\n\nAlternatively, if you want to be able to type sudo vi and get vim, install vi-vim-symlinkAUR which will remove vi and replace it with a symlink to vim. You could also create this symlink yourself and place it somewhere higher in your path than /usr/bin to have it take precedence.\n\n"
    },
    {
      "title": "DOS/Windows carriage returns",
      "level": 3,
      "content": "If there is a ^M at the end of each line then this means you are editing a text file which was created in MS-DOS or Windows. This is because in Linux only a single line feed character (LF) used for line break, but in Windows/MS DOS systems they are using a sequence of a carriage return (CR) and a line feed (LF) for the same. And this carriage returns are displayed as ^M.\n\nTo remove all carriage returns from a file do:\n\n```\n:%s/^M//g\n```\n\nNote that there ^ is a control letter. To enter the control sequence ^M press Ctrl+v,Ctrl+m.\n\nAlternatively install the package dos2unix and run dos2unix file to fix the file.\n\n"
    },
    {
      "title": "Empty space at the bottom of gVim windows",
      "level": 3,
      "content": "When using a window manager configured to ignore window size hints, gVim will fill the non-functional area with the GTK theme background color.\n\nThe solution is to adjust how much space gVim reserves at the bottom of the window. Put the following line in ~/.vimrc:\n\n```\nset guiheadroom=0\n```\n\n"
    },
    {
      "title": "Vim as a pager",
      "level": 3,
      "content": "Scripts allow Vim to be used as a terminal pager, with the benefit of various vim features such as color schemes. To change the default pager, export the PAGER environment variable.\n\nVim comes with the /usr/share/vim/vim91/macros/less.sh script, for which you can create an alias. Note that this script does not support any command-line flags mentioned in less(1) § OPTIONS.\n\nAlternatively, there is also the vimpager Vim script. Note that not all command-line flags are supported; the list of supported flags is available on GitHub.\n\nA middle way between a pager and an editor are [g]vim -R (gvim -R is equivalent to gview). This will cause the editor to open files in a readonly mode. Every editor feature that does not involve modifying the files is available as usual. In fact, the readonly mode can be explicitly overridden, to enable modification as well.\n\n"
    },
    {
      "title": "Highlighting search results",
      "level": 3,
      "content": "In order to highlight the first string that will be matched in a search while typing the search, add the following line to your ~/.vimrc:\n\n```\nset incsearch\n```\n\nIn order to highlight all strings that will be matched in a search while typing the search, and after the search has been executed, add the following line to your ~/.vimrc:\n\n```\nset hlsearch\n```\n\n- Setting hlsearch will keep all matches highlighted until a further search is made. This behaviour may be undesired, so to temporarily disable the highlighting until the next search, run :nohlsearch. If you find yourself running this command often, consider binding it to a key.\n- This behaviour will also be observed when matching regex during other commands that involve them like s or g.\n\n"
    },
    {
      "title": "Workaround for XDG Base Directory specification",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nSince 7.3.1178 Vim will search for ~/.vim/vimrc if ~/.vimrc is not found.\n\n```\n\"$XDG_CONFIG_HOME\"/vim/vimrc\n```\n\n```\nset runtimepath^=$XDG_CONFIG_HOME/vim\nset runtimepath+=$XDG_DATA_HOME/vim\nset runtimepath+=$XDG_CONFIG_HOME/vim/after\n\nset packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim\nset packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after\n\nlet g:netrw_home = $XDG_DATA_HOME.\"/vim\"\ncall mkdir($XDG_DATA_HOME.\"/vim/spell\", 'p')\n\nset backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')\nset directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p')\nset undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p')\nset viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')\n\nif !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif\n```\n\n```\n~/.profile\n```\n\n```\nexport GVIMINIT='let $MYGVIMRC=\"$XDG_CONFIG_HOME/vim/gvimrc\" | source $MYGVIMRC'\nexport VIMINIT='let $MYVIMRC=\"$XDG_CONFIG_HOME/vim/vimrc\" | source $MYVIMRC'\n```\n\n[G]VIMINIT environment variable will also affect Neovim. If separate configs for Vim and Neovim are desired then the following will be a better choice:\n\n```\nexport GVIMINIT='let $MYGVIMRC = !has(\"nvim\") ? \"$XDG_CONFIG_HOME/vim/gvimrc\" : \"$XDG_CONFIG_HOME/nvim/init.gvim\" | so $MYGVIMRC'\nexport VIMINIT='let $MYVIMRC = !has(\"nvim\") ? \"$XDG_CONFIG_HOME/vim/vimrc\" : \"$XDG_CONFIG_HOME/nvim/init.vim\" | so $MYVIMRC'\n```\n\n- https://jorenar.com/blog/vim-xdg\n- https://tlvince.com/vim-respect-xdg\n\n"
    },
    {
      "title": "Plugins",
      "level": 2,
      "content": "Adding plugins to Vim can increase your productivity by extending Vim features. Plugins can alter Vim UI, add new commands, enable code completion support, integrate other programs and utilities with Vim, add support for additional languages and more.\n\n"
    },
    {
      "title": "Using the built-in package manager",
      "level": 4,
      "content": "Vim has the possibility to load third-party plugins natively. This functionality can be used by storing third-party packages in the ~/.vim/pack folder. The structure of this folder differs slightly from that of typical plugin managers which will usually have a single directory per plugin. What follows is a typical installation procedure and directory structure (using Tim Pope's vim-surround plugin as an example):\n\n```\n$ mkdir -p ~/.vim/pack/tpope/start\n```\n\nIt is important to note that ~/.vim/pack/tpope is a package directory which is loosely defined as directory containing one or more plugins in the Vim documentation. Plugin repositories should not be downloaded to this directory though. The name of the package directory is also arbitrary. You can choose to keep all your plugins in a single package directory or, as in our example, use the author's GitHub name, tpope.\n\nThe package directory can contain the following subfolders:\n\n- start - plugins from this subfolder will be loaded automatically when Vim starts. This is the most frequently used location.\n- opt - plugins from this subfolder can be loaded on-demand by issuing :packadd command inside Vim.\n\nNow change into the start folder and checkout the plugin repository:\n\n```\n$ cd ~/.vim/pack/tpope/start\n$ git clone https://tpope.io/vim/surround.git\n```\n\nThis creates an additional subfolder, ~/.vim/pack/tpope/start/surround, where the plugin files are placed.\n\nNext, update the help index if the plugin contains help files:\n\n```\n$ vim -u NONE -c \"helptags surround/doc\" -c q\n```\n\nThe plugin will now be loaded automatically when starting Vim. No changes to ~/.vimrc are required, barring plugin-specific options.\n\n"
    },
    {
      "title": "Using a plugin manager",
      "level": 4,
      "content": "A plugin manager is a plugin that installs, manages and updates Vim plugins. This can be useful if you are also using Vim on platforms other than Arch Linux and want a consistent method of updating plugins.\n\n- Vim-plug is a minimalist Vim plugin manager with many features like on-demand plugin loading and parallel updating, available as vim-plugAUR or vim-plug-gitAUR.\n- Vundle is available as vundleAUR or vundle-gitAUR.\n- pathogen.vim is a simple plugin for managing Vim's runtimepath, available as vim-pathogenAUR or vim-pathogen-gitAUR.\n- Dein.vim is a plugin manager replacing NeoBundle, available as vim-deinAUR or vim-dein-gitAUR.\n\n"
    },
    {
      "title": "From Arch repositories",
      "level": 4,
      "content": "The vim-plugins group provides various plugins. Use pacman -Sg vim-plugins command to list available packages which you can then install with pacman.\n\n"
    },
    {
      "title": "cscope",
      "level": 4,
      "content": "Cscope is a tool for browsing a project. By navigating to a word/symbol/function and calling cscope (usually with shortcut keys) it can find: functions calling the function, the function definition, and more.\n\nInstall the cscope package.\n\nCopy the cscope default file where it will be automatically read by Vim:\n\n```\nmkdir -p ~/.vim/plugin\nwget -P ~/.vim/plugin https://cscope.sourceforge.net/cscope_maps.vim\n```\n\nCreate a file which contains the list of files you wish cscope to index (cscope can handle many languages but this example finds .c, .cpp and .h files, specific for C/C++ project):\n\n```\n$ cd /path/to/project/dir\n$ find . -type f -print | grep -E '\\.(c(pp)?|h)$' > cscope.files\n```\n\nCreate database files that cscope will read:\n\n```\n$ cscope -bq\n```\n\nDefault keyboard shortcuts:\n\n```\nCtrl-\\ and\n      c: Find functions calling this function\n      d: Find functions called by this function\n      e: Find this egrep pattern\n      f: Find this file\n      g: Find this definition\n      i: Find files #including this file\n      s: Find this C symbol\n      t: Find assignments to\n```\n\nFeel free to change the shortcuts.\n\n```\n#Maps ctrl-c to find functions calling the function\nnnoremap <C-c> :cs find c <C-R>=expand(\"<cword>\")<CR><CR>\n```\n\n"
    },
    {
      "title": "Taglist",
      "level": 4,
      "content": "Taglist provides an overview of the structure of source code files and allows you to efficiently browse through source code files in different programming languages.\n\nInstall the vim-taglistAUR package.\n\nUseful options to be put in ~/.vimrc:\n\n```\nlet Tlist_Compact_Format = 1\nlet Tlist_GainFocus_On_ToggleOpen = 1\nlet Tlist_Close_On_Select = 1\nnnoremap <C-l> :TlistToggle<CR>\n```\n\n"
    },
    {
      "title": "gVim is slow",
      "level": 3,
      "content": "Vim's GTK 3 GUI may be slower than the GTK 2 version (see FS#51366). gvim-gtk2AUR can be installed as a workaround.\n\n"
    },
    {
      "title": "Bidirectional support",
      "level": 3,
      "content": "Vim still lacks full bidirectional support, and this varies depending on the terminal.\n\nUse :rightleft to force text alignment using. It can be assigned to a keybind using:\n\n```\ninoremap <C-X> <C-O>:silent if &rl <Bar> set rl! <Bar> else <Bar> set rl <Bar> endif<CR>\n```\n\nVim has its own letter shaping functionality. Despite some rendering issues, this works on terminals with no letter shaping support like alacritty and st. The shaping depends on Arabic Presentation Forms-B (U+FE70–FEFF), so make sure your font includes support for these characters. As there is no known monospace font with full support for these characters, you need to have an additional fallback font (e.g: vazir-code-fontsAUR with fallback to ttf-dejavu). See St#Arabic shaping support for example terminal fonts setup.\n\nHowever, if the terminal supports letter shaping like gnome-terminal and other libvte-based terminals, then Vim and the terminal letter shaping could conflict, resulting in mangled Arabic text. Currently, Vim doesn't detect if the terminal has letter-shaping capabilities or not. So the workaround is to manually tell Vim to leave letter-shaping up to the terminal by :set notbidi. Note that will cause reversed text when :set rightleft because of a limitation. See :set arabic for more info.\n\n"
    },
    {
      "title": "Official",
      "level": 3,
      "content": "- Homepage\n- Documentation\n- Vim Wiki\n- Vim Scripts\n\n"
    },
    {
      "title": "Tutorials",
      "level": 3,
      "content": "- vim Tutorial and Primer\n- vi Tutorial and Reference Guide\n- Graphical vi-Vim Cheat Sheet and Tutorial\n- Vim Introduction and Tutorial\n- Open Vim — collection of Vim learning tools\n- Learn Vim Progressively\n- Learning Vim in 2014\n- Seven habits of effective text editing\n- Basic Vim Tips[dead link 2025-03-15 ⓘ]\n\n"
    },
    {
      "title": "Videos",
      "level": 4,
      "content": "- Vimcasts — screencasts in .ogg format.\n- Vim Tutorial Videos — covering the basics up to advanced topics.\n\n"
    },
    {
      "title": "Cheat sheets",
      "level": 4,
      "content": "- https://devhints.io/vim\n- https://vim.rtorr.com/ - A mobile friendly Vim cheat sheet - Sources\n\n"
    },
    {
      "title": "Games",
      "level": 4,
      "content": "- Vim Adventures\n- VimGolf\n\n"
    },
    {
      "title": "Configuration",
      "level": 3,
      "content": "- nion's\n- A detailed configuration from Amir Salihefendic\n- Bart Trojanowski\n- Steve Francia's Vim Distribution\n- Vim Awesome - Vim Plugins\n- W4RH4WK's Vim configuration\n- Fast vimrc/colorscheme from askapache\n- Basic vimrc\n\n"
    },
    {
      "title": "Colors",
      "level": 4,
      "content": "- Vivify\n- Vim colorscheme customization\n\n"
    }
  ]
}