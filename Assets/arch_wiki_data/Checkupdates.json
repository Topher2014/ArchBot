{
  "title": "Checkupdates",
  "url": "https://wiki.archlinux.org/title/Checkupdates",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- General recommendations\n\nRegular system maintenance is necessary for the proper functioning of Arch over a period of time. Timely maintenance is a practice many users get accustomed to.\n\n"
    },
    {
      "title": "Failed systemd services",
      "level": 3,
      "content": "Check if any systemd services have failed:\n\n```\n$ systemctl --failed\n```\n\nSee systemd#Using units for more information.\n\n"
    },
    {
      "title": "Log files",
      "level": 3,
      "content": "Look for errors in the log files located in /var/log/, as well as messages logged in the systemd journal:\n\n```\n# journalctl -b\n```\n\nSee systemd/Journal for more information and filtering options.\n\nSee Xorg#Troubleshooting for information on where and how Xorg logs errors.\n\n"
    },
    {
      "title": "Backup",
      "level": 2,
      "content": "Having backups of important data is a necessary measure to take, since human and machine processing errors are very likely to generate corruption as time passes, and also the physical media where the data is stored is inevitably destined to fail.\n\nSee Synchronization and backup programs for many alternative applications that may better suit your case. See Category:System recovery for other articles of interest.\n\nIt is encouraged to automate backups, see Autostarting#On time events.\n\n"
    },
    {
      "title": "Configuration files",
      "level": 3,
      "content": "Before editing any configuration files, create a backup so that you can revert to a working version in case of problems. Editors like vim and emacs can do this automatically. On a larger scale, consider using a configuration manager.\n\nFor dotfiles (configuration files in the home directory), see dotfiles#Tracking dotfiles directly with Git.\n\n"
    },
    {
      "title": "List of installed packages",
      "level": 3,
      "content": "Maintain a list of all installed packages so that if a complete re-installation is inevitable, it is easier to re-create the original environment.\n\nSee pacman tips#List of installed packages for details.\n\n"
    },
    {
      "title": "Pacman database",
      "level": 3,
      "content": "See pacman/Tips and tricks#Back up the pacman database.\n\n"
    },
    {
      "title": "Encryption metadata",
      "level": 3,
      "content": "See Data-at-rest encryption#Backup for disk encryption scenarios.\n\n"
    },
    {
      "title": "System and user data",
      "level": 3,
      "content": "See System backup.\n\n"
    },
    {
      "title": "Upgrading the system",
      "level": 2,
      "content": "It is recommended to perform full system upgrades regularly via pacman#Upgrading packages, to enjoy both the latest bug fixes and security updates, and also to avoid having to deal with too many package upgrades that require manual intervention at once. When requesting support from the community, it will usually be assumed that the system is up to date.\n\nMake sure to have the Arch install media or another Linux \"live\" CD/USB available so you can easily rescue your system if there is a problem after updating. If you are running Arch in a production environment, or cannot afford downtime for any reason, test changes to configuration files, as well as updates to software packages, on a non-critical duplicate system first. Then, if no problems arise, roll out the changes to the production system.\n\nIf the system has packages from the AUR, carefully upgrade all of them.\n\npacman is a powerful package management tool, but it does not attempt to handle all corner cases. Users must be vigilant and take responsibility for maintaining their own system.\n\n"
    },
    {
      "title": "Read before upgrading the system",
      "level": 3,
      "content": "Before upgrading, users are expected to visit the Arch Linux home page to check the latest news, or alternatively subscribe to the RSS feed or the arch-announce mailing list. When updates require out-of-the-ordinary user intervention (more than what can be handled simply by following the instructions given by pacman), an appropriate news post will be made.\n\nBefore upgrading fundamental software (such as the kernel, xorg, systemd, or glibc) to a new version, look over the appropriate forum to see if there have been any reported problems.\n\nUsers must equally be aware that upgrading packages can raise unexpected problems that could need immediate intervention; therefore, it is discouraged to upgrade a stable system shortly before it is required for carrying out an important task. Instead, wait to upgrade until there is enough time available to resolve any post-upgrade issues.\n\n"
    },
    {
      "title": "Avoid certain pacman commands",
      "level": 3,
      "content": "Avoid doing partial upgrades. In other words, never run pacman -Sy; instead, always use pacman -Syu.\n\nGenerally avoid using the --overwrite option with pacman. The --overwrite option takes an argument containing a glob. When used, pacman will bypass file conflict checks for files that match the glob. In a properly maintained system, it should only be used when explicitly recommended by the Arch Developers. See the #Read before upgrading the system section.\n\nAvoid using the -d option with pacman. pacman -Rdd package skips dependency checks during package removal. As a result, a package providing a critical dependency could be removed, resulting in a broken system.\n\n"
    },
    {
      "title": "Partial upgrades are unsupported",
      "level": 3,
      "content": "Arch Linux is a rolling release distribution. That means when new library versions are pushed to the repositories, the Developers and Package Maintainers rebuild all the packages in the repositories that need to be rebuilt against the libraries. For example, if two packages depend on the same library, upgrading only one package might also upgrade the library (as a dependency), which might then break the other package which depends on an older version of the library.\n\nThat is why partial upgrades are not supported. Do not use:\n\n- pacman -Sy package\n- pacman -Sy followed by pacman -S package (Note the absence of -Su in the installation of the package.)\n- pacman -Syuw (Note that pacman -Syuw does imply the same risks like pacman -Sy, as it will update the pacman sync database without installing the newer packages.)\n\nWhen refreshing the package database, always do a full upgrade with pacman -Syu. Note that if pacman -Syu does not perform the upgrade because of an error, the end result is the same as running pacman -Sy. Therefore, the error must be resolved and the upgrade operation completed as soon as possible.\n\nBe very careful when using IgnorePkg and IgnoreGroup for the same reason. If the system has locally built packages (such as AUR packages), users will need to rebuild them when their dependencies receive a soname bump.\n\nIf a partial upgrade scenario has been created, and binaries are broken because they cannot find the libraries they are linked against, do not \"fix\" the problem simply by symlinking. Libraries receive soname bumps when they are not backwards compatible. A simple pacman -Syu to a properly synced mirror will fix the problem as long as pacman is not broken.\n\nThe bash script checkupdates, included with the pacman-contrib package, provides a safe way to check for upgrades to installed packages without running a system update at the same time, and provides an option to download the pending updates to the pacman cache without touching the sync database.\n\n"
    },
    {
      "title": "Act on alerts during an upgrade",
      "level": 3,
      "content": "When upgrading the system, be sure to pay attention to the alert notices provided by pacman. If any additional actions are required by the user, be sure to take care of them right away. If a pacman alert is confusing, search the forums and the recent news posts for more detailed instructions.\n\n"
    },
    {
      "title": "Deal promptly with new configuration files",
      "level": 3,
      "content": "When pacman is invoked, .pacnew and .pacsave files can be created. Pacman provides notice when this happens and users must deal with these files promptly. Users are referred to the pacman/Pacnew and Pacsave wiki page for detailed instructions.\n\nAlso, think about other configuration files you may have copied or created. If a package had an example configuration that you copied to your home directory, check to see if a new one has been created.\n\n"
    },
    {
      "title": "Restart or reboot after upgrades",
      "level": 3,
      "content": "Upgrades are typically not applied to existing processes. You must restart processes to fully apply the upgrade.\n\nThe archlinux-contrib package provides a script called checkservices which runs pacdiff to merge .pacnew files then checks for processes running with outdated libraries and prompts the user if they want them to be restarted.\n\nThe kernel is particularly difficult to patch without a reboot. A reboot is always the most secure option, but if this is very inconvenient kernel live patching can be used to apply upgrades without a reboot.\n\n"
    },
    {
      "title": "Revert broken updates",
      "level": 3,
      "content": "If a package update is expected/known to cause problems, packagers will ensure that pacman displays an appropriate message when the package is updated. If experiencing trouble after an update, double-check pacman's output by looking at /var/log/pacman.log.\n\nAt this point, only after ensuring there is no information available through pacman, there is no relevant news on https://archlinux.org/, and there are no forum posts regarding the update, consider seeking help on the forum, over IRC, or by downgrading the offending package.\n\n"
    },
    {
      "title": "Check for orphans and dropped packages",
      "level": 3,
      "content": "After upgrading you may now have packages that are no longer needed or that are no longer in the official repositories.\n\nUse pacman -Qtd to check for packages that were installed as a dependency but now, no other packages depend on them. If an orphaned package is still needed, it is recommended to change the installation reason to explicit. Otherwise, if the package is no longer needed, it can be removed. See pacman/Tips and tricks#Removing unused packages (orphans) for details.\n\nAdditionally, some packages may no longer be in the remote repositories, but they still may be on your local system. To list all foreign packages use pacman -Qm. Note that this list will include packages that have been installed manually (e.g., from the AUR). To exclude packages that are (still) available on the AUR, use the script from BBS#288205 or try the ancient-packagesAUR tool.\n\n"
    },
    {
      "title": "Use the package manager to install software",
      "level": 2,
      "content": "Pacman does a much better job than you at keeping track of files. If you install things manually you will, sooner or later, forget what you did, forget where you installed to, install conflicting software, install to the wrong locations, etc.\n\n- Install packages from the official repositories using the method in the pacman#Installing packages section.\n- If the program you desire is not available, check to see if someone has created a package in the AUR. Follow the method in that article for installation.\n- Lastly, if the program you want is not in the official repositories or in the AUR, learn how to create a package for it.\n\nTo clean up improperly installed files, see pacman/Tips and tricks#Identify files not owned by any package.\n\n"
    },
    {
      "title": "Choose open-source drivers",
      "level": 3,
      "content": "Always try open source drivers before resorting to proprietary drivers. Most of the time, open source drivers are more stable and reliable than proprietary drivers. Open source driver bugs are fixed more easily and quickly. While proprietary drivers can offer more features and capabilities, this can come at the cost of stability. To avoid this dilemma, try to choose hardware components known to have mature open source driver support with full features. Information about hardware with open source Linux drivers is available at linux-drivers.org.\n\n"
    },
    {
      "title": "Be careful with unofficial packages",
      "level": 3,
      "content": "Use precaution when using packages from the AUR or an unofficial user repository. Most are supplied by regular users and thus may not have the same standards as those in the official repositories. Avoid AUR helpers which automate installation of AUR packages. Always check PKGBUILDs for sanity and signs of mistake or malicious code before building and/or installing the package.\n\nTo simplify maintenance, limit the amount of unofficial packages used. Make periodic checks on which are in actual use, and remove (or replace with their official counterparts) any others. See pacman/Tips and tricks#Maintenance for useful commands. Following system upgrade, use rebuild-detector to identify any unofficial packages that may need to be rebuilt.\n\n"
    },
    {
      "title": "Update the mirrorlist",
      "level": 3,
      "content": "Update pacman's mirrorlist, as the quality of mirrors can vary over time, and some might go offline or their download rate might degrade.\n\nSee mirrors for details.\n\n"
    },
    {
      "title": "Clean the filesystem",
      "level": 2,
      "content": "When looking for files to remove, it is important to find the files that take up the most disk space. Programs that help with this are found in:\n\n- List of applications/Utilities#Disk usage display.\n- List of applications/Utilities#Disk cleaning.\n\n"
    },
    {
      "title": "Package cache",
      "level": 3,
      "content": "Remove unwanted .pkg files from /var/cache/pacman/pkg/ to free up disk space.\n\nSee pacman#Cleaning the package cache for more information.\n\n"
    },
    {
      "title": "Unused packages (orphans)",
      "level": 3,
      "content": "Remove unused packages from the system to free up disk space and simplify maintenance.\n\nSee pacman/Tips and tricks#Removing unused packages (orphans) for details.\n\n"
    },
    {
      "title": "Old configuration files",
      "level": 3,
      "content": "Old configuration files may conflict with newer software versions, or corrupt over time. Remove unneeded configurations periodically, particularly in your home directory and ~/.config. For similar reasons, be careful when sharing home directories between installations.\n\nLook for the following directories:\n\n- ~/.config/ -- where applications stores their configuration\n- ~/.cache/ -- cache of some programs may grow in size\n- ~/.local/share/ -- old files may be lying there\n\nSee XDG Base Directory support for more information.\n\nTo keep the home directory clean from temporary files created at the wrong place, it is a good idea to manage a list of unwanted files and remove them regularly, for example with rmshit.py.\n\nrmlint-gitAUR can be used to find and optionally remove duplicate files, empty files, recursive empty directories and broken symlinks.\n\n"
    },
    {
      "title": "Broken symlinks",
      "level": 3,
      "content": "Old, broken symbolic links might be sitting around your system; you should remove them. Examples on achieving this can be found here and here. However, you should not blindly delete all broken symbolic links, as some of them serve a purpose [1].\n\nTo quickly list all the broken symlinks of permanent files on your system, use:\n\n```\n# find / -type d \\( -path \"/dev\" -o -path \"/proc\" -o -path \"/run\" -o -path \"/sys\" \\) -prune -o -xtype l -print\n```\n\nThen inspect and remove unnecessary entries from this list.\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "The following tips are generally not required, but certain users may find them useful.\n\n"
    },
    {
      "title": "Use proven software packages",
      "level": 3,
      "content": "Arch's rolling releases can be a boon for users who want to try the latest features and get upstream updates as soon as possible, but they can also make system maintenance more difficult. To simplify maintenance and improve stability, try to avoid cutting edge software and install only mature and proven software. Such packages are less likely to receive difficult upgrades such as major configuration changes or feature removals. Prefer software that has a strong and active development community, as well as a high number of competent users, in order to simplify support in the event of a problem.\n\nAvoid any use of the testing repository, even individual packages from testing. These packages are experimental and not suitable for a stable system. Similarly, avoid packages which are built directly from upstream development sources. These are usually found in the AUR, with names including things like: \"dev\", \"devel\", \"svn\", \"cvs\", \"git\", etc.\n\n"
    },
    {
      "title": "Install the linux-lts package",
      "level": 3,
      "content": "The linux-lts package is an alternative Arch kernel package, and is available in the core repository. This particular kernel version has long-term support (LTS) from upstream, including security and bug fixes. It is useful if you use out-of-tree kernel modules and want to ensure their compatibility or if you want a fallback kernel in case a new kernel version causes problems.\n\nTo make it available as a boot option, you will need to update your boot loader's configuration file to use the LTS kernel and ram disk: vmlinuz-linux-lts and initramfs-linux-lts.img.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Arch News Bash Script\n- fwupd\n\n"
    }
  ]
}