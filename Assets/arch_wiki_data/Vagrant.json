{
  "title": "Vagrant",
  "url": "https://wiki.archlinux.org/title/Vagrant",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Docker\n- KVM\n- Libvirt\n- VirtualBox\n\nVagrant is a tool for managing and configuring virtualised development environments.\n\nVagrant has a concept of 'providers', which map to the virtualisation engine and its API. The most popular and well-supported provider is Virtualbox; plugins exist for libvirt, lxc, vmware and more.\n\nVagrant uses a mostly declarative Vagrantfile to define virtualised machines. A single Vagrantfile can define multiple machines.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the vagrant package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Vagrant is configured with environment variables. See the full list of options in the official documentation.\n\nFor example, to change the location where vagrant stores its \"potentially large\" files, set VAGRANT_HOME to a suitable directory. (The default is ~/.vagrant.d).\n\n"
    },
    {
      "title": "Plugins",
      "level": 2,
      "content": "Vagrant has a middleware architecture providing support for powerful plugins.\n\nPlugins can be installed with Vagrant's built-in plugin manager. You can specify multiple plugins to install:\n\n```\n$ vagrant plugin install vagrant-vbguest vagrant-share\n```\n\n"
    },
    {
      "title": "vagrant-libvirt",
      "level": 3,
      "content": "Note: An alternative in order to use this plugin without such issues, is to use the container image via either Podman or Docker, as shown in the official documentation [1].\n\nAn alternative in order to use this plugin without such issues, is to use the container image via either Podman or Docker, as shown in the official documentation [1].\n\nThis plugin adds a libvirt provider to Vagrant. libvirt and related packages (e.g. QEMU) must be installed and configured before using the provider.\n\nTo install the plugin, make sure base-devel is installed and libvirtd.service has been started. Then run\n\n```\n$ vagrant plugin install vagrant-libvirt\n```\n\nOnce the plugin is installed, the libvirt provider will be available:\n\n```\n$ vagrant up --provider=libvirt\n```\n\nIf you have issues with dependency mismatch, the following environment variable can be set to ignore gem versions.\n\n```\nexport VAGRANT_DISABLE_STRICT_DEPENDENCY_ENFORCEMENT=1\n```\n\nIf you have issues building ruby-libvirt, try the following (replace lib with lib64 as needed):\n\n```\n$ CONFIGURE_ARGS='with-ldflags=-L/opt/vagrant/embedded/lib with-libvirt-include=/usr/include/libvirt with-libvirt-lib=/usr/lib' \\\n   GEM_HOME=~/.vagrant.d/gems \\\n   GEM_PATH=$GEM_HOME:/opt/vagrant/embedded/gems \\\n   PATH=/opt/vagrant/embedded/bin:$PATH \\\n       vagrant plugin install vagrant-libvirt\n```\n\nSee [2] for more troubleshooting.\n\n"
    },
    {
      "title": "vagrant-lxc",
      "level": 3,
      "content": "First install lxc from the official repositories, then:\n\n```\n$ vagrant plugin install vagrant-lxc\n```\n\nNext, configure lxc as directed in the official repository. The plugin can now be used with a Vagrantfile like so:\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n```\nVAGRANTFILE_API_VERSION = \"2\"\n\nVagrant.configure(\"2\") do |config|\n\n    config.vm.define \"main\" do |config|\n        config.vm.box = 'http://bit.ly/vagrant-lxc-wheezy64-2013-10-23'\n\n        config.vm.provider :lxc do |lxc|\n            lxc.customize 'cgroup.memory.limit_in_bytes', '512M'\n        end\n\n        config.vm.provision :shell do |shell|\n            shell.path = 'provision.sh'\n        end\n    end\nend\n```\n\nThe provision.sh file should be a shell script beside the Vagrantfile. Do whatever setup is appropriate; for example, to remove puppet, which is packaged in the above box:\n\n```\nrm /etc/apt/sources.list.d/puppetlabs.list\napt-get purge -y puppet facter hiera puppet-common puppetlabs-release ruby-rgen\n```\n\n"
    },
    {
      "title": "Provisioning",
      "level": 2,
      "content": "Provisioners allow you to automatically install software, alter and automate configurations as part of the vagrant up process. The most common provisioner is puppet.\n\n"
    },
    {
      "title": "Base Boxes for Vagrant",
      "level": 2,
      "content": "Here is a list of places to get all sorts of vagrant base boxes for different purposes: development, testing, or even production.\n\n- The official Arch Linux vagrant boxes. The corresponding Arch-boxes project contains the packerfile and provisioning scripts used for building.\n\n- A well maintained up-to-date Arch Linux x86_64 base box for Vagrant.\n\n- Vagrant Cloud is HashiCorp's official site for Vagrant boxes. You can browse user-submitted boxes or upload your own. A single Vagrant Cloud box can support multiple providers with versioning.\n\n- vagrantbox.es—A List of vagrant base boxes. Initiated by Gareth Rushgrove @garethr hosted on Heroku using Nginx. See the story here: The Vagrantbox.es Story.\n\n- Bento is a project that encapsulates Packer templates for building Vagrant base boxes. A subset of templates are built and published to the bento org on Vagrant Cloud.\n\n- Puppet Labs Vagrant Boxes—Pre-rolled vagrant boxes, ready for use. Made by the folks at Puppet Labs.\n\n- Vagrant Ubuntu Cloud Images—It has been there since Jan, 2013. For some reason Canonical has NOT officially promoted it yet, may be still in beta. Remember these are vanilla images, NOT very useful without Chef or Puppet.\n\n- packer-arch project on Github provides configuration files to build light Arch Linux Vagrant images from the official iso image, using packer.\n\n"
    },
    {
      "title": "No ping between host and vagrant box (host-only networking)",
      "level": 3,
      "content": "Sometimes there are troubles with host-only networking not functioning. Host have no ip on vboxnet interface, host cannot ping vagrant boxes and cannot be pinged from them. This is solved by installing good old net-tools as mentioned in this thread by kevin1024\n\n"
    },
    {
      "title": "Virtual machine is not network accessible from the Arch host OS",
      "level": 3,
      "content": "As of version 1.8.4, Vagrant appears to use the deprecated route command to configure routing to the virtual network interface which bridges to the virtual machine(s). If route is not installed, you will not be able to access the virtual machine from the host OS due to the lack of suitable route. The solution, as mentioned above, is to install the net-tools package, which includes the route command.\n\n"
    },
    {
      "title": "'vagrant up' hangs on NFS mounting (Mounting NFS shared folders...)",
      "level": 3,
      "content": "Installing nfs-utils package may solve this problem.\n\nMake sure the connection is not blocked by iptables or nftables. If you are using libvirt along with firewalld, enable nfs (nfs3), rpc-bind and mountd for the libvirt zone.\n\n"
    },
    {
      "title": "Mounting NFS shared folders: mount.nfs: requested NFS version or transport protocol is not supported",
      "level": 3,
      "content": "Install the nfs-utils package. Enable (v3 and) UDP support by editing /etc/nfs.conf and uncommenting the following lines:\n\n```\n[nfsd]\nvers3=y\nudp=y\n```\n\nRestart nfs-server.service to apply the changes immediately.\n\n"
    },
    {
      "title": "Error starting network 'default': internal error: Failed to initialize a valid firewall backend",
      "level": 3,
      "content": "Most likely the firewall dependencies were not installed. Install the iptables-nft and dnsmasq packages and restart the libvirtd.service unit.\n\n"
    },
    {
      "title": "Unable to ssh to vagrant guest",
      "level": 3,
      "content": "Check that virtualization is enabled in your BIOS. Because vagrant reports that the vm guest is booted, you would think that all was well with virtualization, but some vagrant boxes (e.g. tantegerda1/archlinux) allow you to get all the way to the ssh stage before the lack of cpu virtualization capabilities bites you.\n\n"
    },
    {
      "title": "Could not get preferred machine for domain",
      "level": 3,
      "content": "```\nError while creating domain: Error saving the server: Call to virDomainDefineXML failed: could not get preferred machine for domain\n```\n\nCheck that virtualization is enabled in your BIOS.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- official Vagrant documentation\n- Wikipedia:Vagrant (software)\n\n"
    }
  ]
}