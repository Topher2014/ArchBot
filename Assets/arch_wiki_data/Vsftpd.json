{
  "title": "Vsftpd",
  "url": "https://wiki.archlinux.org/title/Vsftpd",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "vsftpd (Very Secure FTP Daemon) is a lightweight, stable and secure FTP server for UNIX-like systems.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install vsftpd and start/enable the vsftpd.service daemon.\n\nTo use xinetd for monitoring and controlling vsftpd connections, see #Using xinetd.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Most of the settings in vsftpd are done by editing the file /etc/vsftpd.conf. The file itself is well-documented, so this section only highlights some important changes you may want to modify. For all available options and documentation, see the vsftpd.conf(5) man page. Files are served by default from /srv/ftp.\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nEnable connections /etc/hosts.allow:\n\n```\n# Allow all connections\nvsftpd: ALL\n# IP address range\nvsftpd: 10.0.0.0/255.255.255.0\n```\n\n"
    },
    {
      "title": "Enabling uploading",
      "level": 3,
      "content": "The WRITE_ENABLE flag must be set to YES in /etc/vsftpd.conf in order to allow changes to the filesystem, such as uploading:\n\n```\nwrite_enable=YES\n```\n\n"
    },
    {
      "title": "Local user login",
      "level": 3,
      "content": "One must set the line local_enable in /etc/vsftpd.conf to YES in order to allow users in /etc/passwd to login:\n\n```\nlocal_enable=YES\n```\n\n"
    },
    {
      "title": "Anonymous login",
      "level": 3,
      "content": "These lines controls whether anonymous users can login. By default, anonymous logins are enabled for download only from /srv/ftp:\n\n```\n/etc/vsftpd.conf\n```\n\n```\n...\n# Allow anonymous FTP? (Beware - allowed by default if you comment this out).\nanonymous_enable=YES\n...\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n...\n```\n\nYou may also add e.g. the following options (see vsftpd.conf(5) for more):\n\n```\n/etc/vsftpd.conf\n```\n\n```\n# No password is required for an anonymous login          \nno_anon_password=YES\n\n# Maximum transfer rate for an anonymous client in Bytes/second          \nanon_max_rate=30000\n\n# Directory to be used for an anonymous login  \nanon_root=/example/directory/\n```\n\n"
    },
    {
      "title": "Chroot jail",
      "level": 3,
      "content": "A chroot environment that prevents the user from leaving its home directory can be set up. To enable this, add the following lines to /etc/vsftpd.conf:\n\n```\nchroot_list_enable=YES\nchroot_list_file=/etc/vsftpd.chroot_list\n```\n\nThe chroot_list_file variable specifies the file which contains users that are jailed.\n\nFor a more restricted environment, specify the line:\n\n```\nchroot_local_user=YES\n```\n\nThis will make local users jailed by default. In this case, the file specified by chroot_list_file lists users that are not in a chroot jail.\n\n"
    },
    {
      "title": "Limiting user login",
      "level": 3,
      "content": "It is possible to prevent users from logging into the FTP server by adding two lines to /etc/vsftpd.conf:\n\n```\nuserlist_enable=YES\nuserlist_file=/etc/vsftpd.user_list\n```\n\nuserlist_file now specifies the file which lists users that are not able to login.\n\nIf you only want to allow certain users to login, add the line:\n\n```\nuserlist_deny=NO\n```\n\nThe file specified by userlist_file will now contain users that are able to login.\n\n"
    },
    {
      "title": "Limiting connections",
      "level": 3,
      "content": "The data transfer rate, i.e. number of clients and connections per IP for local users can be limited by adding the information in /etc/vsftpd.conf:\n\n```\nlocal_max_rate=1000000 # Maximum data transfer rate in bytes per second\nmax_clients=50         # Maximum number of clients that may be connected\nmax_per_ip=2           # Maximum connections per IP\n```\n\n"
    },
    {
      "title": "Using xinetd",
      "level": 3,
      "content": "Xinetd provides enhanced capabilities for monitoring and controlling connections. It is not necessary though for a basic good working vsftpd-server.\n\nInstallation of vsftpd will add a necessary service file, /etc/xinetd.d/vsftpd. By default services are disabled. Enable the ftp service:\n\n```\nservice ftp\n{\n        socket_type             = stream\n        wait                    = no\n        user                    = root\n        server                  = /usr/bin/vsftpd\n        log_on_success  += HOST DURATION\n        log_on_failure  += HOST\n        disable                 = no\n}\n```\n\nIf you have set the vsftpd daemon to run in standalone mode make the following change in /etc/vsftpd.conf:\n\n```\nlisten=NO\n```\n\nOtherwise connection will fail:\n\n```\n500 OOPS: could not bind listening IPv4 socket\n```\n\nInstead of starting the vsftpd daemon start and enable xinetd.service.\n\n"
    },
    {
      "title": "Using SSL/TLS to secure FTP",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nFirst, you need a X.509 SSL/TLS certificate to use TLS. If you do not have one, you can easily generate a self-signed certificate as follows:\n\n```\n# cd /etc/ssl/certs\n# openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout vsftpd.pem -out vsftpd.pem\n# chmod 600 vsftpd.pem\n```\n\nYou will be asked questions about your company, etc. As your certificate is not a trusted one, it does not really matter what is filled in, it will just be used for encryption. To use a trusted certificate, you can get one from a certificate authority like Let's Encrypt.\n\nThen, edit the configuration file:\n\n```\n/etc/vsftpd.conf\n```\n\n```\nssl_enable=YES\n\n# if you accept anonymous connections, you may want to enable this setting\n#allow_anon_ssl=NO\n\n# by default all non anonymous logins and forced to use SSL to send and receive password and data, set to NO to allow non secure connections\nforce_local_logins_ssl=NO\nforce_local_data_ssl=NO\n\n# TLS v1 protocol connections are preferred and this mode is enabled by default while SSL v2 and v3 are disabled\n# the settings below are the default ones and do not need to be changed unless you specifically need SSL\n#ssl_tlsv1=YES\n#ssl_sslv2=NO\n#ssl_sslv3=NO\n\n# provide the path of your certificate and of your private key\n# note that both can be contained in the same file or in different files\nrsa_cert_file=/etc/ssl/certs/vsftpd.pem\nrsa_private_key_file=/etc/ssl/certs/vsftpd.pem\n\n# this setting is set to YES by default and requires all data connections exhibit session reuse which proves they know the secret of the control channel.\n# this is more secure but is not supported by many FTP clients, set to NO for better compatibility\nrequire_ssl_reuse=NO\n```\n\n"
    },
    {
      "title": "Resolve hostname in passive mode",
      "level": 3,
      "content": "To override the IP address vsftpd advertises in passive mode by the hostname of your server and have it DNS resolved at startup, add the following two lines in /etc/vsftpd.conf:\n\n```\npasv_addr_resolve=YES\npasv_address=yourdomain.org\n```\n\nNote: **not** \n\n- For dynamic DNS, it is not necessary to periodically update pasv_address and restart the server as it can sometimes be read.\n- You may not be able to connect in passive mode via LAN anymore, in this case try the active mode instead from the LAN clients.\n\n"
    },
    {
      "title": "Port configurations",
      "level": 3,
      "content": "It may be necessary to adjust the default FTP listening port and the passive mode data ports. This is a way to resolve traffic when the server is behind a NAT:\n\n- For FTP servers exposed to the web, to reduce the likelihood of the server being attacked, the listening port can be changed to something other than the standard port 21.\n- To limit the passive mode ports to open ports, a range can be provided.\n\nThe ports can be defined in the configuration file as illustrated below:\n\n```\n/etc/vsftpd.conf\n```\n\n```\nlisten_port=2211\n\npasv_min_port=5000\npasv_max_port=5003\n```\n\n"
    },
    {
      "title": "Configuring iptables",
      "level": 3,
      "content": "Often the server running the FTP daemon is protected by an iptables firewall. To allow access to the FTP server the corresponding port needs to be opened using something like\n\n```\n# iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 21 -j ACCEPT\n```\n\nThis article will not provide any instruction on how to set up iptables but here is an example: Simple stateful firewall.\n\nThere are some kernel modules needed for proper FTP connection handling by iptables that should be referenced here. Among those especially nf_conntrack_ftp. It is needed as FTP uses the given listen_port (21 by default) for commands only; all the data transfer is done over different ports. These ports are chosen by the FTP daemon at random and for each session (also depending on whether active or passive mode is used). To tell iptables that packets on ports should be accepted, nf_conntrack_ftp is required. You can explicitly load the module at boot.\n\nIf the kernel >= 4.7 you either need to set net.netfilter.nf_conntrack_helper=1 via sysctl e.g.\n\n```\n# echo net.netfilter.nf_conntrack_helper=1 > /etc/sysctl.d/70-conntrack.conf\n```\n\nor use\n\n```\n# iptables -A PREROUTING -t raw -p tcp --dport 21 -j CT --helper ftp\n```\n\n"
    },
    {
      "title": "PAM with virtual users",
      "level": 3,
      "content": "Since PAM no longer provides pam_userdb.so another easy method is to use libpam_pwdfileAUR. This section is however limited to explain how to configure a chroot environment and authentication by pam_pwdfile.so.\n\nIn this example we create the directory vsftpd:\n\n```\n# mkdir /etc/vsftpd\n```\n\nOne option to create and store user names and passwords is to use the Apache generator htpasswd:\n\n```\n# htpasswd -c /etc/vsftpd/.passwd <username>\n```\n\nReplace the <username> with the user you want to create.\n\nA problem with the above command is that vsftpd might not be able to read the generated MD5 hashed password. If running the same command with the -d switch, crypt() encryption, password become readable by vsftpd, but the downside of this is less security and a password limited to 8 characters. Openssl could be used to produce a MD5 based BSD password with algorithm 1:\n\n```\n# openssl passwd -1\n```\n\nWhatever solution the produced /etc/vsftpd/.passwd should look like this:\n\n```\nusername1:hashed_password1\nusername2:hashed_password2\n...\n```\n\nNext you need to create a PAM service using pam_pwdfile.so and the generated /etc/vsftpd/.passwd file. In this example we create a PAM policy for vsftpd with the following content:\n\n```\n/etc/pam.d/vsftpd\n```\n\n```\nauth required pam_pwdfile.so pwdfile /etc/vsftpd/.passwd\naccount required pam_permit.so\n```\n\nNow it is time to create a home for the virtual users. In the example /srv/ftp is decided to host data for virtual users, which also reflects the default directory structure of Arch. First create the general user virtual and make /srv/ftp its home:\n\n```\n# useradd -d /srv/ftp virtual\n```\n\nMake virtual the owner:\n\n```\n# chown virtual:virtual /srv/ftp\n```\n\nA basic /etc/vsftpd.conf with no private folders configured, which will default to the home folder of the virtual user:\n\n```\nlisten=YES\nlisten 21\nconnect_from_port_20=YES    # sample config file enables it, ftp data\ndirmessage_enable=YES       # sample config data enables it\nxferlog_enable=YES          # sample config data enables it\npam_service_name=vsftpd     # pointing to the correct PAM service file `/etc/pam.d/vsftpd` rather than `/etc/pam.d/ftp`\n\nanonymous_enable=NO         # we does not use anonymous mode\nlocal_enable=YES            # we config virtual user use local privileges, virtual_use_local_privs=YES\n\nwrite_enable=YES            # global config, write to filesystem\nhide_ids=YES                # in ftp client interactive console, ls -la: uid=1001 -> ftp\n\nchroot_local_user=YES       # we do not want user to get the real root(/) directory\nguest_enable=YES            # for virtual user\nguest_username=virtual      # virtual user name: virtual\nvirtual_use_local_privs=YES # permission of virtual user=local user\n```\n\nFor more detailed meaning of above options, see the vsftpd.conf(5) man page.\n\nSome parameters might not be necessary for your own setup. If you want the chroot environment to be writable you will need to add the following to the configuration file:\n\n```\nallow_writeable_chroot=YES\n```\n\nOtherwise vsftpd because of default security settings will complain if it detects that chroot is writable.\n\nStart vsftpd.service.\n\nYou should now be able to login from a ftp-client with any of the users and passwords stored in /etc/vsftpd/.passwd.\n\n"
    },
    {
      "title": "Adding private folders for the virtual users",
      "level": 4,
      "content": "First create directories for users:\n\n```\n# mkdir /srv/ftp/user1\n# mkdir /srv/ftp/user2\n# chown virtual:virtual /srv/ftp/user?/\n```\n\nThen, add the following lines to /etc/vsftpd.conf:\n\n```\nlocal_root=/srv/ftp/$USER\nuser_sub_token=$USER\n```\n\n"
    },
    {
      "title": "vsftpd: refusing to run with writable root inside chroot()",
      "level": 3,
      "content": "As of vsftpd 2.3.5, the chroot directory that users are locked to must not be writable. This is in order to prevent a security vulnerabilty.\n\nThe safe way to allow upload is to keep chroot enabled, and configure your FTP directories.\n\n```\nlocal_root=/srv/ftp/user\n```\n\n```\n# mkdir -p /srv/ftp/user/upload\n# chmod 550 /srv/ftp/user\n# chmod 750 /srv/ftp/user/upload\n```\n\nIf you must:\n\nYou can put this into your /etc/vsftpd.conf to workaround this security enhancement (since vsftpd 3.0.0; from Fixing 500 OOPS: vsftpd: refusing to run with writable root inside chroot ()):\n\n```\nallow_writeable_chroot=YES\n```\n\n"
    },
    {
      "title": "FileZilla Client: GnuTLS error -8 -15 -110 when connecting via SSL",
      "level": 3,
      "content": "vsftpd tries to display plain-text error messages in the SSL session. In order to debug this, temporarily disable encryption and you will see the correct error message.[1]\n\nOften these errors can be solved by adding[2]: seccomp_sandbox=NO\n\n"
    },
    {
      "title": "vsftpd.service fails to run on boot",
      "level": 3,
      "content": "If you have enabled vsftpd.service and it fails to run on boot, edit it and make sure it is set to load after network.target in the service file:\n\n```\nvsftpd.service\n```\n\n```\n[Unit]\nDescription=vsftpd daemon\nAfter=network.target\n```\n\n"
    },
    {
      "title": "Passive mode replies with the local IP address to a remote connection",
      "level": 3,
      "content": "If vsftpd returns a local address to a remote connection, like:\n\n```\n227 Entering Passive Mode (192,168,0,19,192,27).\n```\n\nIt may be that the FTP server is behind a NAT router and while some devices monitor FTP connections and dynamically replace the local IP address specification by the external IP address for packets containing the PASV response, some do not.\n\nIndicate the external IP address in the vsftpd configuration using:\n\n```\npasv_address=externalIPaddress\n```\n\nor alternatively:\n\n```\npasv_addr_resolve=YES\npasv_address=my.domain.name\n```\n\nIn case internal connection is not possible after this change, one may need to run 2 vsftpd, one for internal and one for external connections.\n\n"
    },
    {
      "title": "ipv6 only fails with: 500 OOPS: run two copies of vsftpd for IPv4 and IPv6",
      "level": 3,
      "content": "you most likely have commented out the line\n\n```\n# When \"listen\" directive is enabled, vsftpd runs in standalone mode and\n# listens on IPv4 sockets. This directive cannot be used in conjunction\n# with the listen_ipv6 directive.\n#listen=YES\n#\n# This directive enables listening on IPv6 sockets. To listen on IPv4 and IPv6\n# sockets, you must run two copies of vsftpd with two configuration files.\n# Make sure, that one of the listen options is commented !!\nlisten_ipv6=YES\n```\n\ninstead of setting\n\n```\n# When \"listen\" directive is enabled, vsftpd runs in standalone mode and\n# listens on IPv4 sockets. This directive cannot be used in conjunction\n# with the listen_ipv6 directive.\nlisten=NO\n```\n\n"
    },
    {
      "title": "vsftpd connections fail on a machine using nis with: yp_bind_client_create_v2: RPC: Unable to send",
      "level": 3,
      "content": "as mentioned on the vsftpd faq page, \"...built-in sandboxing uses network isolation on Linux. This may be interfering with any module that needs to use the network to perform operations or lookups\"\n\nadd this undocumented line to your /etc/vsftpd.conf\n\n```\nisolate_network=NO\n```\n\n"
    },
    {
      "title": "LIST command resets connection",
      "level": 3,
      "content": "Adding\n\n```\nseccomp_sandbox=NO\n```\n\nin the vsftpd.conf file fixes this issue.\n\n"
    },
    {
      "title": "Hardening",
      "level": 2,
      "content": "Just like any other service, VSFTPD can be hardened by modifying its systemd unit. Hardening is also called sandboxing in the literature. The following sandboxing options are an effective way to limit the exposure of the system towards the unit's processes.\n\nBelow is an example of a hardened drop-in file. Adjust the following file to your liking:\n\n```\n/etc/systemd/system/vsftpd.service.d/harden.conf\n```\n\n```\n[Service]\nPrivateTmp = true\nProtectSystem = strict\nProtectHome = true\nProtectKernelTunables = true\nReadWritePaths=/srv/ftp /mnt/cctv /var/log/vsftpd.log\nReadOnlyPaths = /mnt\nInaccessiblePaths = /mnt/mybackup\n```\n\nThis will allow VSFTPD to only write to /srv/ftp, /mnt/cctv and to its own log file, and will restrict writing to the rest of the file system. It will also deny access to the entire /home. This also restrict any access to /mnt/mybackup. Multiple paths can be specified for this option.\n\nMore details on the systemd sandboxing options can be found at systemd.exec(5) § SANDBOXING.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- vsftpd official homepage\n- vsftpd.conf(5)\n- vsftpd FAQ\n\n"
    }
  ]
}