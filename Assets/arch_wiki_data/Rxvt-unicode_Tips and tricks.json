{
  "title": "Rxvt-unicode/Tips and tricks",
  "url": "https://wiki.archlinux.org/title/Rxvt-unicode/Tips_and_tricks",
  "sections": [
    {
      "title": "Improved Kuake-like behavior in Openbox",
      "level": 2,
      "content": "This was originally posted on the forum by Xyne [1], and it relies on the xdotool package.\n\n"
    },
    {
      "title": "Scriptlets",
      "level": 3,
      "content": "Save this scriptlet from the urxvtc man page somewhere on your system as urxvtc (e.g., in ~/.config/openbox/):\n\n```\n#!/bin/sh\n\nurxvtc \"$@\"\nif [ $? -eq 2 ]; then\n   urxvtd -q -o -f\n   urxvtc \"$@\"\nfi\n```\n\nand save this one as urxvtq:\n\n```\n#!/bin/bash\n\nwid=$(xdotool search --classname urxvtq | head -1)\nif [ -z \"$wid\" ]; then\n  ''/path/to/urxvtc'' -name urxvtq -geometry 80x28\n  wid=$(xdotool search --classname urxvtq | head -1)\n  xdotool windowfocus \"$wid\"\n  xdotool key Control_L+l\nelse\n  if [ -z \"$(xdotool search --onlyvisible --classname urxvtq 2>/dev/null)\" ]; then\n    xdotool windowmap \"$wid\"\n    xdotool windowfocus \"$wid\"\n  else\n    xdotool windowunmap \"$wid\"\n  fi\nfi\n```\n\nMake both files executable.\n\nMake sure that you change /path/to/urxvtc to the actual path to the urxvtc scriptlet that you saved above. We will be using urxvtc to launch both regular instances of urxvt and the kuake-like instance.\n\n"
    },
    {
      "title": "urxvtq with tabbing",
      "level": 3,
      "content": "To activate tab support, you can either replace the fifth line of your urxvtq:\n\n```\n/path/to/urxvtc -name urxvtq -geometry 80x28\n```\n\nwith:\n\n```\n/path/to/urxvtc -name urxvtq -pe tabbed -geometry 80x28\n```\n\nor replace this line of your ~/.Xresources file:\n\n```\nURxvt.perl-ext-common: default,matcher\n```\n\nwith\n\n```\nURxvt.perl-ext-common: default,matcher,tabbed\n```\n\n"
    },
    {
      "title": "Tab control",
      "level": 4,
      "content": "Table content:\nKey | Description\nShift+Left | Switch to the tab left of the current one\nShift+Right | Switch to the tab right of the current one\nShift+Down | Create a new tab\n\nYou can also use your mouse to switch the tabs by clicking the wished one and create a new tab by clicking on [NEW].\n\nTo close a tab just enter exit like you would to normally close a terminal.\n\n"
    },
    {
      "title": "Openbox configuration",
      "level": 3,
      "content": "Now add the following lines to the <applications> section of ~/.config/openbox/rc.xml:\n\n```\n<application name=\"urxvtq\">\n   <decor>no</decor>\n   <position force=\"yes\">\n     <x>center</x>\n     <y>0</y>\n   </position>\n   <desktop>all</desktop>\n   <layer>above</layer>\n   <skip_pager>yes</skip_pager>\n   <skip_taskbar>yes</skip_taskbar>\n   <maximized>Horizontal</maximized>\n</application>\n```\n\nand add these lines to the <keyboard> section:\n\n```\n<keybind key=\"W-t\">\n  <action name=\"Execute\">\n    <command>/path/to/urxvtc</command>\n  </action>\n</keybind>\n<keybind key=\"W-grave\">\n  <action name=\"Execute\">\n    <execute>/path/to/urxvtq</execute>\n  </action>\n</keybind>\n```\n\nHere too you need to change the /path/to/* lines to point to the scripts that you saved above. Save the file and then reconfigure Openbox. You should now be able to launch regular instances of urxvt with Super+T, and toggle the kuake-like console with Super+` (the grave key also known as the backtick).\n\n"
    },
    {
      "title": "Further configuration",
      "level": 3,
      "content": "The advantage of this configuration over the urxvt kuake Perl script is that Openbox provides more keybinding options such as modifier keys. The kuake script hijacks an entire physical key regardless of any modifier combination. Review the Openbox bindings documentation for the full range or possibilities.\n\nThe Openbox per-app settings can be used to further configure the behavior of the kuake-like console (e.g. screen position, layer, etc.). You may need to change the \"geometry\" parameter in the urxvtq scriptlet to adjust the height of the console.\n\n"
    },
    {
      "title": "Related scripts",
      "level": 3,
      "content": "- hbekel has posted a generalized version of the urxvtq here which can be used to toggle any application using xdotool.\n- http://www.jukie.net/~bart/blog/20070503013555 - A script for opening URLs with your keyboard instead of mouse with urxvt.\n\n"
    },
    {
      "title": "Improving performance",
      "level": 2,
      "content": "- Avoid the use of Xft fonts. If Xft fonts must be used, append :antialias=false to the setting value.[2]\n- Build rxvt-unicode with disabled support for unnecessary features, --disable-xft and --disable-unicode3 in particular.[3]\n- Limit the number of saveLines (option -sl) in the scrollback buffer to reduce memory usage. [4] Use tmux for scrollback buffer and set saveLines to 0\n- Disable perl\n- Consider running urxvtd as a daemon accepting connections from urxvtc clients.\n\n- Use tmux for scrollback buffer and set saveLines to 0\n\n"
    },
    {
      "title": "Xinitrc",
      "level": 4,
      "content": "See the Examples section in urxvtd(1). This is the preferred option.\n\n"
    },
    {
      "title": "systemd",
      "level": 4,
      "content": "System service:\n\n```\n/etc/systemd/system/urxvtd@.service\n```\n\n```\n[Unit]\nDescription=RXVT-Unicode Daemon\n\n[Service]\nUser=%i\nExecStart=/usr/bin/urxvtd -q -o\n\n[Install]\nWantedBy=multi-user.target\n```\n\nPass the username when starting the service:\n\n```\nurxvtd@username.service\n```\n\nFor a systemd/User service, place the following unit files in ~/.config/systemd/user:\n\n```\nurxvtd.service\n```\n\n```\n[Unit]\nDescription=Urxvt Terminal Daemon\nRequires=urxvtd.socket\n\n[Service]\nExecStart=/usr/bin/urxvtd -o -q\nEnvironment=RXVT_SOCKET=%t/urxvtd-%H\n\n[Install]\nAlso=urxvtd.socket\nWantedBy=MyTarget.target\n```\n\n```\nurxvtd.socket\n```\n\n```\n[Unit]\nDescription=urxvt daemon (socket activation)\nDocumentation=man:urxvtd(1) man:urxvt(1)\n\n[Socket]\nListenStream=%t/urxvtd-%H\n\n[Install]\nWantedBy=sockets.target\n```\n\n"
    },
    {
      "title": "Advanced tab management",
      "level": 2,
      "content": "Install the urxvt-tabbedexAUR package, then add the tabbedex value to the URxvt.perl-ext-common X resource in your ~/.Xresources:\n\n```\nURxvt.perl-ext-common: ...,tabbedex,...\n```\n\nBy default, the \"[NEW]\" button (which is rarely used and usable only with the mouse) is disabled with tabbedex. You can reenable this feature by setting the new-button to true.\n\n```\nURxvt.tabbedex.new-button: true\n```\n\nTabs can be named with Shift+Up (Enter to confirm, Escape to cancel).\n\nThe tabs bar is hidden when only one tab is present. If you want to always show the tabs bar:\n\n```\nURxvt.tabbedex.autohide: false\n```\n\nTo prevent the last tab from closing Urxvt, enable the following resource:\n\n```\nURxvt.tabbedex.reopen-on-close: yes\n```\n\nTo start a new tab or cycle through tabs, use the following user commands: tabbedex:(new|next|prev)_tab. Example of mappings:\n\n```\nURxvt.keysym.Control-t: perl:tabbedex:new_tab\nURxvt.keysym.Control-Tab: perl:tabbedex:next_tab\nURxvt.keysym.Control-Shift-Tab: perl:tabbedex:prev_tab\n```\n\nTo define your own key bindings to rename a tab or move a tab to the right or to the left, use the following commands: tabbedex:move_tab_(left|right) and tabbedex:rename_tab. Example of mappings:\n\n```\nURxvt.keysym.Control-Shift-Left: perl:tabbedex:move_tab_left\nURxvt.keysym.Control-Shift-Right: perl:tabbedex:move_tab_right\nURxvt.keysym.Control-Shift-R: perl:tabbedex:rename_tab\n```\n\n```\nURxvt.tabbedex.no-tabbedex-keys: true\n```\n\n"
    },
    {
      "title": "True transparency",
      "level": 3,
      "content": "To use true transparency, you need to be using a window manager that supports compositing or a separate compositor.\n\nFrom the command-line:\n\n```\n$ urxvt -depth 32 -bg rgba:3f00/3f00/3f00/dddd\n```\n\nUsing the configuration file:\n\n```\n~/.Xresources\n```\n\n```\nURxvt.depth: 32\nURxvt.background: rgba:1111/1111/1111/dddd\n```\n\nor\n\n```\n~/.Xresources\n```\n\n```\nURxvt.depth: 32\nURxvt.background: [95]#000000\n```\n\nwhere '95' is the opacity level in percentage and '#000000' is the background color.\n\nTo use a color i.e. #302351 with the rgba:rrrr/gggg/bbbb/aaaa syntax it would be rgba:3000/2300/5100/ee00. \"ee00\" (the alpha value) to make it nicely transparent.\n\n"
    },
    {
      "title": "Native transparency",
      "level": 3,
      "content": "If there is no need for true transparency, or if compositing uses too many resources on your system, you can get transparency working in the following way:\n\n```\n~/.Xresources\n```\n\n```\n! Xresources file\n\nURxvt*inheritPixmap: true\nURxvt*transparent: true\n! URxvt*shading: 0 to 99 darkens, 101 to 200 lightens\nURxvt*shading: 110\n```\n\nUsing the URxvt*background setting exemplified above instead of URxvt*shading will also work.\n\n"
    },
    {
      "title": "Set icon",
      "level": 2,
      "content": "By default URxvt does not feature a taskbar icon. However, this can be easily changed by adding the following line to ~/.Xresources and pointing to the desired icon:\n\n```\nURxvt.iconFile:    /usr/share/icons/Clarity/scalable/apps/terminal.svg\n```\n\n"
    },
    {
      "title": "Use urxvt as application launcher",
      "level": 2,
      "content": "urxvt can be used as a lightweight alternative to application launchers such as gmrunAUR. Run urxvt with the following configuration to imitate look and behaviour of an application launcher or assign the command to a custom alias:\n\n```\n$ urxvt -geometry 80x3 -name 'bashrun' -e sh -c \"/bin/bash -i -t\"\n```\n\n"
    },
    {
      "title": "Xterm escape sequences",
      "level": 2,
      "content": "It is possible for rxvt-unicode to mimic the Xterm escape sequences. These can be found for arbitrary key combinations by running cat -v inside xterm, then bound in urxvt using keysyms.\n\nTake this word by word movement binding as an example:\n\n```\n~/.Xresources\n```\n\n```\n!Xterm escapes, word by word movement\nURxvt.keysym.Control-Left:    \\033[1;5D\nURxvt.keysym.Control-Right:    \\033[1;5C\n```\n\nFor more information, see ascii(7) and the keysym section of the urxvt(1) man page.\n\n"
    },
    {
      "title": "Bidirectional support",
      "level": 2,
      "content": "It is possible to add bidirectional support for languages like Hebrew, Farsi or Arabic using the bidi extension.\n\n"
    },
    {
      "title": "Bell Command",
      "level": 2,
      "content": "It is possible to execute a shell command when the terminal rings the bell. The pre-packed bell-command extension needs to be enabled first in the ~/.Xresources file:\n\n```\nURxvt.perl-ext-common: ...,bell-command,...\n```\n\nThe following example will use ALSA's aplay command to play a .wav file:\n\n```\nURxvt.bell-command: aplay /path/to/a/file.wav\n```\n\nThe following example will use libcanberra's canberra-gtk-play command to play the bell sound of your current sound theme:\n\n```\nURxvt.bell-command: canberra-gtk-play -i bell\n```\n\nAnd the next setting will pop a visual notification:\n\n```\nURxvt.bell-command: notify-send \"rxvt-unicode: bell!\"\n```\n\n"
    },
    {
      "title": "Xterm-like colors",
      "level": 2,
      "content": "urxvt uses the same colors as Xterm, except one. Add URxvt.color12: rgb:5c/5c/ff to ~/.Xresources to change this.\n\n"
    },
    {
      "title": "Launch rxvt-unicode with current working directory of another window",
      "level": 2,
      "content": "There are three possibilities to launch rxvt-unicode \"from here\": some sort of shell script, Perl extension, and xcwd.\n\n"
    },
    {
      "title": "xcwd",
      "level": 3,
      "content": "Install xcwdAUR or xcwd-gitAUR, see the README for more information.\n\ni3 sample setup:\n\n```\n~/.config/i3/config\n```\n\n```\nbindsym $mod+KP_Enter exec urxvt --chdir \"`xcwd`\"\n```\n\n"
    }
  ]
}