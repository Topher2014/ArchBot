{
  "title": "Entradas de desktop",
  "url": "https://wiki.archlinux.org/title/Entradas_de_desktop",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "The XDG Desktop Entry specification defines a standard for applications to integrate into application menus of desktop environments implementing the XDG Desktop Menu specification.\n\n"
    },
    {
      "title": "Basics",
      "level": 2,
      "content": "Each desktop entry must have a Type and a Name key and can optionally define its appearance in the application menu.\n\nThe three available types are:\n\nThe following sections will roughly explain how these are created and validated.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Use a desktop opener like dex:\n\n```\n$ dex /usr/share/applications/firefox.desktop\n```\n\nTable content:\nDesktop environment | Launcher(Package) | Autostart | Application | Link\nCinnamon | gio(glib2) | No | Yes | No\nGNOME\nGNOME Flashback\nMATE\nDeepin | dde-open1(deepin-api) | Yes | Partially | \nEnlightenment | enlightenment_open(enlightenment) |  |  | \nKDE Plasma | kde-open2(kde-cli-tools) | Yes | Yes | Yes\nLXDE | pcmanfm(pcmanfm) |  |  | \nLXQt | â€“ |  |  | \nXfce | exo-open3(exo) |  |  | \nEnvironment-agnostic | gtk-launch4(gtk3) | No | Partially | No\ndex(dex) | Yes | Yes | No\nxdg-open(xdg-utils) | No | Buggy | No\n\n1. .desktop files of type Application must have the executable bit set to be launched by dde-open\n1. If KDE_SESSION_VERSION is unset, then kfmclient from konqueror will be used instead. (KDE Plasma should set this variable under any condition, though.)\n1. gio (from glib2) will also be tried\n1. Only if application is in /usr/share/applications\n\n"
    },
    {
      "title": "Application entry",
      "level": 2,
      "content": "Desktop entries for applications, or .desktop files, are generally a combination of meta information resources and a shortcut of an application. These files usually reside in /usr/share/applications/ or /usr/local/share/applications/ for applications installed system-wide, or ~/.local/share/applications/ for user-specific applications. User entries take precedence over system entries.\n\n"
    },
    {
      "title": "File example",
      "level": 3,
      "content": "Following is an example of its structure with additional comments. The example is only meant to give a quick impression, and does not show how to utilize all possible entry keys. The complete list of keys can be found in the freedesktop specification.\n\n```\n[Desktop Entry]\n\n# The type as listed above\nType=Application\n\n# The version of the desktop entry specification to which this file complies\nVersion=1.0\n\n# The name of the application\nName=jMemorize\n\n# A comment which can/will be used as a tooltip\nComment=Flash card based learning tool\n\n# The path to the folder in which the executable is run\nPath=/opt/jmemorise\n\n# The executable of the application, possibly with arguments.\nExec=jmemorize\n\n# The name of the icon that will be used to display this entry\nIcon=jmemorize\n\n# Describes whether this application needs to be run in a terminal or not\nTerminal=false\n\n# Describes the categories in which this entry should be shown\nCategories=Education;Languages;Java;\n```\n\n"
    },
    {
      "title": "Key definition",
      "level": 3,
      "content": "All recognized entries can be found on the freedesktop site. For example, the Type key defines three types of desktop entries: Application (type 1), Link (type 2) and Directory (type 3).\n\n- Version key does not stand for the version of the application, but for the version of the desktop entry specification to which this file complies.\n\n- Name, GenericName and Comment often contain redundant values in the form of combinations of them, like:\n\n```\nName=Pidgin Internet Messenger\nGenericName=Internet Messenger\n```\n\nor\n\n```\nName=NoteCase notes manager\nComment=Notes Manager\n```\n\nThis should be avoided, as it will only be confusing to users. The Name key should only contain the name, or maybe an abbreviation/acronym if available.\n\n- GenericName should state what you would generally call an application that does what this specific application offers (i.e. Firefox is a \"Web Browser\").\n- Comment is intended to contain any useful additional information.\n\n"
    },
    {
      "title": "Validation",
      "level": 3,
      "content": "As some keys have become deprecated over time, you may want to validate your desktop entries using desktop-file-validate(1) which is part of the desktop-file-utils package. To validate, run:\n\n```\n$ desktop-file-validate <your desktop file>\n```\n\nThis will give you very verbose and useful warnings and error messages.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "Use desktop-file-install(1) to install desktop file into target directory. For example:\n\n```\n$ desktop-file-install --dir=$HOME/.local/share/applications ~/app.desktop\n```\n\nThis is also useful for customizing existing desktop entries (e.g. from /usr/share/applications) via edit options.\n\n"
    },
    {
      "title": "Update database of desktop entries",
      "level": 3,
      "content": "Usually, desktop entry changes are automatically picked up by desktop environments.\n\nIf this is not the case, and you want to forcefully update the desktop entries defined in ~/.local/share/applications, run the following command:\n\n```\n$ update-desktop-database ~/.local/share/applications\n```\n\n"
    },
    {
      "title": "Icons",
      "level": 2,
      "content": "See also the Icon Theme Specification.\n\n"
    },
    {
      "title": "Common image formats",
      "level": 3,
      "content": "Here is a short overview of image formats commonly used for icons.\n\nTable content:\nExtension | Full Name and/or Description | Graphics Type | Container Format | Supported\n.png | Portable Network Graphics | Raster | No | Yes\n.svg(z) | Scalable Vector Graphics | Vector | No | Yes (optional)\n.xpm | X PixMap | Raster | No | Yes (deprecated)\n.gif | Graphics Interchange Format | Raster | No | No\n.ico | MS Windows Icon Format | Raster | Yes | No\n.icns | Apple Icon Image | Raster | Yes | No\n\n"
    },
    {
      "title": "Converting icons",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with ImageMagick#Usage.** This article or section is a candidate for merging with ImageMagick#Usage.\n\nThis article or section is a candidate for merging with ImageMagick#Usage.\n\nIf you stumble across an icon which is in a format that is not supported by the freedesktop.org standard (like gif or ico), you can use the convert tool (which is part of the imagemagick package) to convert it to a supported/recommended format, e.g.:\n\n```\n$ convert <icon name>.gif <icon name>.png\n```\n\nIf you convert from a container format like ico, you will get all images that were encapsulated in the ico file in the form <icon name>-<number>.png. If you want to know the size of the image, or the number of images in a container file like ico you can use the identify tool (also part of the imagemagick package):\n\n```\n$ identify /usr/share/vlc/vlc48x48.ico\n```\n\n```\n/usr/share/vlc/vlc48x48.ico[0] ICO 32x32 32x32+0+0 8-bit DirectClass 84.3kb\n/usr/share/vlc/vlc48x48.ico[1] ICO 16x16 16x16+0+0 8-bit DirectClass 84.3kb\n/usr/share/vlc/vlc48x48.ico[2] ICO 128x128 128x128+0+0 8-bit DirectClass 84.3kb\n/usr/share/vlc/vlc48x48.ico[3] ICO 48x48 48x48+0+0 8-bit DirectClass 84.3kb\n/usr/share/vlc/vlc48x48.ico[4] ICO 32x32 32x32+0+0 8-bit DirectClass 84.3kb\n/usr/share/vlc/vlc48x48.ico[5] ICO 16x16 16x16+0+0 8-bit DirectClass 84.3kb\n```\n\nAs you can see, the example ico file, although its name might suggest a single image of size 48x48, contains no less than 6 different sizes, of which one is even greater than 48x48, namely 128x128.\n\nAlternatively, you can use icotool (from icoutils) to extract png images from ico container:\n\n```\n$ icotool -x <icon name>.ico\n```\n\nFor extracting images from .icns container, you can use icns2png (provided by libicns):\n\n```\n$ icns2png -x <icon name>.icns\n```\n\n"
    },
    {
      "title": "Obtaining icons",
      "level": 3,
      "content": "Although packages that already ship with a .desktop file most certainly contain an icon or a set of icons, there is sometimes the case when a developer has not created a .desktop file, but may ship icons, nonetheless. So a good start is to look for icons in the source package. You can i.e. first filter for the extension with find and then use grep to filter further for certain buzzwords like the package name, \"icon\", \"logo\", etc, if there are quite a lot of images in the source package.\n\n```\n$ find /path/to/source/package -regex \".*\\.\\(svg\\|png\\|xpm\\|gif\\|ico\\)$\"\n```\n\nIf the developers of an application do not include icons in their source packages, the next step would be to search on their web sites. Some projects, like i.e. tvbrowserAUR have an artwork/logo page where additional icons may be found. If a project is multi-platform, there may be the case that even if the linux/unix package does not come with an icon, the Windows package might provide one. If the project uses a Version control system like CVS/SVN/etc. and you have some experience with it, you also might consider browsing it for icons. If everything fails, the project might simply have no icon/logo yet.\n\n"
    },
    {
      "title": "Icon path",
      "level": 3,
      "content": "The freedesktop.org standard specifies in which order and directories programs should look for icons:\n\n1. $HOME/.icons (for backwards compatibility)\n1. $XDG_DATA_DIRS/icons\n1. /usr/share/pixmaps\n\n"
    },
    {
      "title": "Tools",
      "level": 2,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\n"
    },
    {
      "title": "Arronax",
      "level": 3,
      "content": "Arronax is a graphical program to create and modify desktop entries for applications and locations. Install the arronaxAUR package to use it.\n\n"
    },
    {
      "title": "Alacarte",
      "level": 3,
      "content": "alacarte is a graphical menu editor for GNOME using the freedesktop.org menu specification. It also supports overriding desktop entries.\n\n"
    },
    {
      "title": "jdDesktopEntryEdit",
      "level": 3,
      "content": "jddesktopentryeditAUR is a graphical program using Qt to edit desktop entries.\n\n"
    },
    {
      "title": "MenuLibre",
      "level": 3,
      "content": "menulibreAUR is a graphical menu editor using GTK that provides modern features in a clean, easy-to-use interface.\n\n"
    },
    {
      "title": "LibreMenuEditor",
      "level": 3,
      "content": "libre-menu-editorAUR is a graphical program for editing desktop entries that aims to be feature-rich yet beginner-friendly.\n\nIt uses GTK with libadwaita and follows GNOME's interface guidelines, but is designed to work on any freedesktop.org compliant desktop environment.\n\n"
    },
    {
      "title": "gendesk",
      "level": 3,
      "content": "gendesk started as an Arch Linux-specific tool for generating .desktop files by fetching the needed information directly from PKGBUILD files. Now it is a general tool that takes command-line arguments.\n\nIcons can be automatically downloaded from openiconlibrary, if available. (The source for icons is configurable).\n\n"
    },
    {
      "title": "How to use",
      "level": 4,
      "content": "- Add gendesk to makedepends\n\n- Start the prepare() function with:\n\n```\ngendesk --pkgname \"$pkgname\" --pkgdesc \"$pkgdesc\"\n```\n\n- Alternatively, if an icon is already provided ($pkgname.png, for instance). The -n flag is for not downloading an icon or using the default icon. Example:\n\n```\ngendesk -n --pkgname \"$pkgname\" --pkgdesc \"$pkgdesc\"\n```\n\n- $srcdir/$pkgname.desktop will be created and can be installed in the package() function with:\n\n```\ninstall -Dm644 \"$pkgname.desktop\" \"$pkgdir/usr/share/applications/$pkgname.desktop\"\n```\n\n- The icon can be installed with:\n\n```\ninstall -Dm644 \"$pkgname.png\" \"$pkgdir/usr/share/pixmaps/$pkgname.png\"\n```\n\n- Use --name='Program Name' for choosing a name for the menu entry.\n\n- Use --exec='/opt/some_app/elf --some-arg --other-arg' for setting the exec field.\n\n- See the gendesk project for more information.\n\n"
    },
    {
      "title": "lsdesktopf",
      "level": 3,
      "content": "lsdesktopfAUR can list available .desktop files or search their contents.\n\n```\n$ lsdesktopf\n$ lsdesktopf --list\n$ lsdesktopf --list gtk zh_TW,zh_CN,en_GB\n```\n\nIt can also perform MIME-type-related searches. See XDG MIME Applications#lsdesktopf.\n\n"
    },
    {
      "title": "fbrokendesktop",
      "level": 3,
      "content": "The fbrokendesktopAUR Bash script detects broken Exec values pointing to non-existent paths. Without any arguments it uses preset directories in the DskPath array. It shows only broken .desktop with full path and filename that is missing.\n\nExamples:\n\n```\n$ fbrokendesktop\n$ fbrokendesktop /usr\n$ fbrokendesktop /usr/share/xsessions/icewm.desktop\n```\n\n"
    },
    {
      "title": "Modify desktop files",
      "level": 3,
      "content": "For system-wide .desktop files (e.g. those installed from a package), first copy the relevant .desktop file (e.g. from /usr/share/applications/) to $XDG_DATA_HOME/applications/ (e.g. ~/.local/share/applications/). This prevents your changes from being overwritten when the package gets updated during system upgrades. The local user-specific .desktop files should automatically take precedence over the system-wide files. Now you can modify the local user-specific .desktop file as needed.\n\nNote: Now, the file in your application launcher will stay the same as the one that is autostarted.\n\n- Move the desktop file from $XDG_CONFIG_HOME/autostart/ to $XDG_DATA_HOME/applications.\n- Using ls -l, make sure that this desktop entry is a regular file you can edit, and not a link to the system location. If it is a link, replace it with a copy of the original as described above.\n- Make a symbolic link to the user application directory (default XDG dirs substituted for convenience):\n\n```\nln -s ~/.local/share/applications/desktop_entry ~/.config/autostart/\n```\n\nNow, the file in your application launcher will stay the same as the one that is autostarted.\n\n"
    },
    {
      "title": "Modify environment variables",
      "level": 4,
      "content": "To set environment variables, in the .desktop file, edit the Exec= line to first use the env(1) command to set your variables. For example, with the original line commented out:\n\n```\n~/.local/share/applications/abiword.desktop\n```\n\n```\n...\n# Exec=abiword %U\nExec=env LANG=he_IL.UTF-8 abiword %U\n...\n```\n\nAlso remove DBusActivatable=true (or set it to false) if present as it will cause the Exec line to be ignored.[1]\n\n"
    },
    {
      "title": "Modify command line arguments",
      "level": 4,
      "content": "To change or add the command line arguments, edit the Exec= line to append the desired options. As an example, with the original line commented out:\n\n```\n~/.local/share/applications/steam.desktop\n```\n\n```\n...\n# Exec=/usr/bin/steam-runtime %U\nExec=/usr/bin/steam-runtime -no-browser %U\n...\n```\n\nAlso remove DBusActivatable=true (or set it to false) if present as it will cause the Exec line to be ignored.[2]\n\n"
    },
    {
      "title": "Hide desktop entries",
      "level": 4,
      "content": "The visibility of the desktop entry can be controlled in multiple ways. See the Desktop Entry Specification for more information. Add one of the following lines to your .desktop file:\n\n- All desktop environments, choose one (or both) of the following: Add the line NoDisplay=true for applications that you do not want displayed in the menus. Add the line Hidden=true for applications that you consider deleted and do not want displayed in the menus.\n- Specified desktop environments, choose one of the following where desktop_names is a semicolon-delimited list of desktop environments (e.g. GNOME, GNOME;Xfce;KDE;): Add the line NotShowIn=desktop_names to hide the entry only in the specified desktop environments. Add the line OnlyShowIn=desktop_names to show the entry only in the specified desktop environments.\n\n- Add the line NoDisplay=true for applications that you do not want displayed in the menus.\n- Add the line Hidden=true for applications that you consider deleted and do not want displayed in the menus.\n\n- Add the line NotShowIn=desktop_names to hide the entry only in the specified desktop environments.\n- Add the line OnlyShowIn=desktop_names to show the entry only in the specified desktop environments.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:.desktop\n- Information for developers\n\n"
    }
  ]
}