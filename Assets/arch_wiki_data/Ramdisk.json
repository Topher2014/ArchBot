{
  "title": "Ramdisk",
  "url": "https://wiki.archlinux.org/title/Ramdisk",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "tmpfs is a temporary filesystem that resides in memory and/or swap partition(s). Mounting directories as tmpfs can be an effective way of speeding up accesses to their files, or to ensure that their contents are automatically cleared upon reboot.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Some directories where tmpfs(5) is commonly used are /tmp, /var/lock and /var/run. Do not use it on /var/tmp, because that directory is meant for temporary files that are preserved across reboots.\n\nArch uses a tmpfs /run directory, with /var/run and /var/lock simply existing as symlinks for compatibility. It is also used for /tmp by the default systemd setup and does not require an entry in fstab unless a specific configuration is needed.\n\nglibc 2.2 and above expects tmpfs to be mounted at /dev/shm for POSIX shared memory. Mounting tmpfs at /dev/shm is handled automatically by systemd and manual configuration in fstab is not necessary.\n\nGenerally, tasks and programs that run frequent read/write operations can benefit from using a tmpfs directory. Some applications can even receive a substantial gain by offloading some (or all) of their data onto the shared memory. For example, relocating the Firefox profile into RAM shows a significant improvement in performance.\n\n"
    },
    {
      "title": "Examples",
      "level": 2,
      "content": "By default, a tmpfs partition has its maximum size set to half of the available RAM, however it is possible to overrule this value. To explicitly set a maximum size, in this example to override the default /tmp mount, use the size mount option:\n\n```\n/etc/fstab\n```\n\n```\ntmpfs   /tmp         tmpfs   rw,nodev,nosuid,size=2G          0  0\n```\n\nTo specify a more secure mounting, specify the following mount option:\n\n```\n/etc/fstab\n```\n\n```\ntmpfs   /www/cache    tmpfs  rw,size=1G,nr_inodes=5k,noexec,nodev,nosuid,uid=user,gid=group,mode=1700 0 0\n```\n\nSee the tmpfs(5) man page and Security#File systems for more information.\n\nReboot for the changes to take effect. Note that although it may be tempting to simply run mount -a to make the changes effective immediately, this will make any files currently residing in these directories inaccessible (this is especially problematic for running programs with lockfiles, for example). However, if all of them are empty, it should be safe to run mount -a instead of rebooting (or mount them individually).\n\nAfter applying changes, verify that they took effect by looking at /proc/mounts and using findmnt:\n\n```\n$ findmnt /tmp\n```\n\n```\nTARGET SOURCE FSTYPE OPTIONS\n/tmp   tmpfs  tmpfs  rw,nosuid,nodev,relatime\n```\n\nThe tmpfs can also be temporarily resized without the need to reboot, for example when a large compile job needs to run soon. In this case, run:\n\n```\n# mount -o remount,size=4G /tmp\n```\n\nOr resize based on RAM:\n\n```\n# mount -o remount,size=80% /tmp\n```\n\n"
    },
    {
      "title": "Disable automatic mount",
      "level": 2,
      "content": "Under systemd, /tmp is automatically mounted as a tmpfs, if it is not already a dedicated mountpoint (either tmpfs or on-disk) in /etc/fstab. To disable the automatic mount, mask the tmp.mount systemd unit.\n\nFiles will no longer be stored in a tmpfs, but on the block device instead. The /tmp contents will now be preserved between reboots (they are still cleaned up after 10 days though), which might not be the desired behavior. To regain the previous behavior and clean the /tmp directory automatically when restarting, consider using tmpfiles.d(5):\n\n```\n/etc/tmpfiles.d/tmp.conf\n```\n\n```\n# see tmpfiles.d(5)\n# always enable /tmp directory cleaning\nD! /tmp 1777 root root 0\n\n# remove files in /var/tmp older than 10 days\nD /var/tmp 1777 root root 10d\n\n# namespace mountpoints (PrivateTmp=yes) are excluded from removal\nx /tmp/systemd-private-*\nx /var/tmp/systemd-private-*\nX /tmp/systemd-private-*/tmp\nX /var/tmp/systemd-private-*/tmp\n```\n\n"
    },
    {
      "title": "Opening symlinks in tmpfs as root fails",
      "level": 3,
      "content": "Considering /tmp is using tmpfs, change the current directory to /tmp, then create a file and create a symlink to that file in the same /tmp directory. Permission denied errors are to be expected when attempting to read the symlink due to /tmp having the sticky bit set.\n\nThis behavior can be controlled via /proc/sys/fs/protected_symlinks or simply via sysctl: sysctl -w fs.protected_symlinks=0. See Sysctl#Configuration to make this permanent.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Linux kernel documentation\n\n"
    }
  ]
}