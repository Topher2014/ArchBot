{
  "title": "Python/Virtualenv",
  "url": "https://wiki.archlinux.org/title/Python/Virtualenv",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "virtualenv is a tool used to create an isolated workspace for a Python application. It has various advantages such as the ability to install modules locally, export a working environment, and execute a Python program in that environment.\n\n"
    },
    {
      "title": "Overview",
      "level": 2,
      "content": "A virtual environment is a directory into which some binaries and shell scripts are installed. The binaries include python for executing scripts and pip for installing other modules within the environment. There are also shell scripts (one for bash, csh, and fish) to activate the environment. Essentially, a virtual environment mimics a full system install of Python and all of the desired modules without interfering with any system on which the application might run.\n\nIn 2017, Pipenv was published which manages all the above tools - managing virtual environments of python interpreters, package dependencies, their activation and reproducible locking of versions in Pipfiles.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Python 3.3+ comes with a module called venv. For applications that require an older version of Python, virtualenv must be used.\n\n"
    },
    {
      "title": "Packages",
      "level": 3,
      "content": "Install one of these packages to use a Python virtual environment:\n\n- Python 3.3+: python\n- Python 3: python-virtualenv\n\nFor Pipenv:\n\n- Python 3: python-pipenv\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "All three tools use a similar workflow.\n\n"
    },
    {
      "title": "Creation",
      "level": 3,
      "content": "Use venv or virtualenv to create the virtual environment within your project directory. Be sure to exclude the venv directory from version control--a copy of pip freeze will be enough to rebuild it.\n\n"
    },
    {
      "title": "venv",
      "level": 4,
      "content": "This tool is provided by python (3.3+):\n\n```\n$ python -m venv envname\n```\n\n"
    },
    {
      "title": "virtualenv",
      "level": 4,
      "content": "Use virtualenv for Python 3, available in python-virtualenv.\n\n```\n$ virtualenv envname\n```\n\n"
    },
    {
      "title": "Activation",
      "level": 3,
      "content": "Use one of the provided shell scripts to activate and deactivate the environment. This example assumes bash is used.\n\n```\n$ source envname/bin/activate\n(envname) $\n```\n\nOnce inside the virtual environment, modules can be installed with pip and scripts can be run as normal.\n\nTo exit the virtual environment, run the function provided by bin/activate:\n\n```\n(envname) $ deactivate\n```\n\n"
    },
    {
      "title": "Python versions",
      "level": 2,
      "content": "By default, virtual environments are created using system Python. The bin/python binary is just a symlink to system python:\n\n```\n$ ls -l envname/bin/python\nlrwxrwxrwx 1 foo foo 15 Jan 29 18:48 envname/bin/python -> /usr/bin/python\n```\n\nIf you want to use a different Python version inside the virtual environment, you can use the -p/--python option of virtualenv:\n\n```\n$ virtualenv -p 3.8 envname\n$ ls -l envname/bin/python\nlrwxrwxrwx 1 foo foo 18 Jan 29 18:48 envname/bin/python -> /usr/bin/python3.8\n```\n\npypy3 can also be used:\n\n```\n$ virtualenv -p pypy3 envname\n```\n\n"
    },
    {
      "title": "virtualenvwrapper",
      "level": 2,
      "content": "virtualenvwrapper allows more natural command line interaction with your virtual environments by exposing several useful commands to create, activate and remove virtual environments. This package is a wrapper for python-virtualenv.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "Install the python-virtualenvwrapper package and add the following lines to your ~/.bashrc:\n\n```\n~/.bashrc\n```\n\n```\nexport WORKON_HOME=~/.virtualenvs\nsource /usr/bin/virtualenvwrapper.sh\n```\n\nThe line source /usr/bin/virtualenvwrapper.sh can cause some slowdown when starting a new shell. To fix this try using source /usr/bin/virtualenvwrapper_lazy.sh, which will load virtualenvwrapper the first time virtualenvwrapper functions are called.\n\nRe-open your console to apply changes. The WORKON_HOME directory will be created automatically.\n\n"
    },
    {
      "title": "Basic usage",
      "level": 3,
      "content": "See https://virtualenvwrapper.readthedocs.io/en/latest/ for usage (and extension capability).\n\nCreate the virtual environment (all command line options except -a, -i, -r, and -h are passed directly to virtualenv, so you can use -p to select Python version):\n\n```\n$ mkvirtualenv envname\n```\n\nActivate the virtual environment:\n\n```\n$ workon envname\n```\n\nInstall some package inside the virtual environment (say, Django):\n\n```\n(envname) $ pip install django\n```\n\nAfter you have done your things, leave the virtual environment:\n\n```\n(envname) $ deactivate\n```\n\n"
    },
    {
      "title": "Pipenv",
      "level": 2,
      "content": "pipenv allows better managed CLI interactions by providing a single program that does all the functions of the above tools.\n\n"
    },
    {
      "title": "Installation",
      "level": 3,
      "content": "Install the python-pipenv package.\n\n"
    },
    {
      "title": "Basic usage",
      "level": 3,
      "content": "All commands can be executed in the project folder, and pipenv will recognize the specific situation - whether a virtualenv exists in the directory, locating it, and running on the specific virtual interpreter when pipenv is executed.\n\nMore information at [1], [2], [3].\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Python venv\n- virtualenv PyPI page\n- virtualenvwrapper documentation\n\n"
    }
  ]
}