{
  "title": "Vulkan",
  "url": "https://wiki.archlinux.org/title/Vulkan",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "From Wikipedia:\n\nLearn more on Vulkan's website.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "- Vulkan is not currently officially supported by Bumblebee [1] but does work with primus_vk or primus-vk-gitAUR.\n- The Radeon Vulkan driver now supports PRIME [2].\n\nTo run a Vulkan application, you will need to install the vulkan-icd-loader package (and lib32-vulkan-icd-loader from the multilib repository if you also want to run 32-bit applications), as well as Vulkan drivers for your graphics card(s). There are several packages providing a vulkan-driver and lib32-vulkan-driver:\n\n- Intel: vulkan-intel (or lib32-vulkan-intel)\n- NVIDIA: there are two implementations: nvidia-utils (or lib32-nvidia-utils) - NVIDIA proprietary vulkan-nouveau (or lib32-vulkan-nouveau) - NVK (part of Mesa project) Note: Enabling NVK also requires additional system configuration, see Nouveau#Using the Mesa NVK Vulkan Driver for details.\n- AMD: there are three implementations, which could be installed simultaneously: vulkan-radeon (or lib32-vulkan-radeon) - RADV (part of Mesa project) amdvlk (or lib32-amdvlk) - AMDVLK Open (maintained by AMD) vulkan-amdgpu-proAUR (or lib32-vulkan-amdgpu-proAUR) - AMDVLK Closed (maintained by AMD)\n\n- nvidia-utils (or lib32-nvidia-utils) - NVIDIA proprietary\n- vulkan-nouveau (or lib32-vulkan-nouveau) - NVK (part of Mesa project) Note: Enabling NVK also requires additional system configuration, see Nouveau#Using the Mesa NVK Vulkan Driver for details.\n\n- vulkan-radeon (or lib32-vulkan-radeon) - RADV (part of Mesa project)\n- amdvlk (or lib32-amdvlk) - AMDVLK Open (maintained by AMD)\n- vulkan-amdgpu-proAUR (or lib32-vulkan-amdgpu-proAUR) - AMDVLK Closed (maintained by AMD)\n\nThe following are software rasterizers, so that you can use it on devices that do not provide Vulkan support.\n\n- Lavapipe: vulkan-swrast (or lib32-vulkan-swrast)\n- SwiftShader: swiftshader-gitAUR\n\nFor Vulkan application development, install vulkan-headers, and optionally vulkan-validation-layers, vulkan-man-pagesAUR and vulkan-tools (you can find the vulkaninfo, and vkcube tools in there).\n\n"
    },
    {
      "title": "Verification",
      "level": 2,
      "content": "To see which Vulkan implementations are currently installed on your system, use the following command:\n\n```\n$ ls /usr/share/vulkan/icd.d/\n```\n\nTo ensure that Vulkan is working with your hardware, install vulkan-tools and use the vulkaninfo command to pull up relevant information about your system. If you get info about your graphics card, you will know that Vulkan is working.\n\n```\n$ vulkaninfo\n```\n\n"
    },
    {
      "title": "Switching between devices",
      "level": 3,
      "content": "On systems with multiple GPUs you may need to force the usage of a specific GPU. vulkan-mesa-layers is required for this to work. By setting MESA_VK_DEVICE_SELECT to vendorID:deviceID, you can choose the desired GPU.\n\nTo list the candidates, use:\n\n```\n$ MESA_VK_DEVICE_SELECT=list vulkaninfo\n```\n\nAppending an ! at the end of the specified value enforces this behavior. See Vulkan mesa device select layer environment variables for more information.\n\n"
    },
    {
      "title": "Switching between AMD drivers",
      "level": 3,
      "content": "On AMD systems, it is valid to have multiple Vulkan drivers installed at once, and it may be desirable to switch between them.\n\n"
    },
    {
      "title": "Selecting via environment variable",
      "level": 4,
      "content": "As of amdvlk 2021.Q3.4, a new switching logic was implemented which enforces AMDVLK as the default and mandates you either\n\n- set AMD_VULKAN_ICD=RADV to switch from the AMDVLK default,\n- or globally set DISABLE_LAYER_AMD_SWITCHABLE_GRAPHICS_1=1 to re-enable the ICD loader method below.\n\nWhen DISABLE_LAYER_AMD_SWITCHABLE_GRAPHICS_1=1, you can choose your preferred driver by setting the environment variable VK_DRIVER_FILES. For example, running Steam with the RADV driver is done by\n\n```\n$ VK_DRIVER_FILES=/usr/share/vulkan/icd.d/radeon_icd.i686.json:/usr/share/vulkan/icd.d/radeon_icd.x86_64.json steam\n```\n\nTo avoid crashes with 32-bit games, it is possible to assign the 32-bit variant and the 64-bit variant to the environment variable.\n\n"
    },
    {
      "title": "Selecting via AMD Vulkan Prefixes",
      "level": 4,
      "content": "AMD Vulkan Prefixes is a script for switching between all three Vulkan implementations. Install amd-vulkan-prefixesAUR, and prepend your application with the prefix you want. The executables provided are vk_radv, vk_amdvlk, and vk_pro. For example, to use the AMDVLK Closed drivers:\n\n```\n$ vk_pro command\n```\n\n"
    },
    {
      "title": "Software rendering",
      "level": 2,
      "content": "You can install the software Vulkan rasterizer known as lavapipe, for example to debug hardware issues: vulkan-swrast (or lib32-vulkan-swrast for the 32-bit version).\n\nThe following example shows running vulkaninfo with the required environment variables to force a full software rendering for Vulkan and OpenGL (with __GLX_VENDOR_LIBRARY_NAME=mesa ensuring the command also works for PRIME users):\n\n```\n$ LIBGL_ALWAYS_SOFTWARE=1 __GLX_VENDOR_LIBRARY_NAME=mesa VK_DRIVER_FILES=/usr/share/vulkan/icd.d/lvp_icd.i686.json:/usr/share/vulkan/icd.d/lvp_icd.x86_64.json vulkaninfo\n```\n\n"
    },
    {
      "title": "Vulkan hardware database",
      "level": 2,
      "content": "The Vulkan Hardware Database provides user reported GPU/driver combinations. Supplying own information is possible by using vulkan-caps-viewer-waylandAUR or vulkan-caps-viewer-x11AUR.\n\n"
    },
    {
      "title": "Environment variables",
      "level": 4,
      "content": "Invalid or contradictory environment variable values might cause Vulkan to fail, and inappropriate values can result in the use of a different GPU than intended on machines with multiple GPUs. Properly setting the variables can also help keep a secondary GPU powered down when it is not needed.\n\n"
    },
    {
      "title": "GPU switching",
      "level": 4,
      "content": "If your machine has multiple GPUs and Vulkan cannot see or use one of them, make sure it is not currently disabled by the BIOS/UEFI or in the kernel. See NVIDIA Optimus for an overview of the different methods of switching between GPUs.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nExample command to check the current status with optimus-manager-gitAUR:\n\n```\n$ optimus-manager --status\n```\n\n```\nOptimus Manager (Client) version 1.4\n\nCurrent GPU mode : nvidia\nGPU mode requested for next login : no change\nGPU at startup : integrated\nTemporary config path: no\n```\n\n"
    },
    {
      "title": "GSP firmware",
      "level": 4,
      "content": "See NVIDIA/Troubleshooting#GSP firmware.\n\n"
    },
    {
      "title": "No device for the display GPU found. Are the intel-mesa drivers installed?",
      "level": 3,
      "content": "Try to list both the intel_icd and primus_vk_wrapper configurations in VK_DRIVER_FILES\n\n```\nexport VK_DRIVER_FILES=/usr/share/vulkan/icd.d/intel_icd.x86_64.json:/usr/share/vulkan/icd.d/nv_vulkan_wrapper.json\n```\n\n"
    },
    {
      "title": "AMDGPU - ERROR_INITIALIZATION_FAILED after vulkaninfo",
      "level": 3,
      "content": "If after running vulkaninfo on AMD card from GCN1 or GCN2 family you got error message like:\n\n```\nERROR at /build/vulkan-tools/src/Vulkan-Tools-1.2.135/vulkaninfo/vulkaninfo.h:240:vkEnumerateInstanceExtensionProperties failed with ERROR_INITIALIZATION_FAILED\n```\n\nThen check if you have correctly enable support for this models of graphics cards (AMDGPU#Enable Southern Islands (SI) and Sea Islands (CIK) support).\n\nOne of possibility to check if gpu drivers are correctly loaded is lspci -k, after running this command check kernel driver of your gpu. It should be amdgpu.\n\n```\n$ lspci -k\n```\n\n```\n...\n01:00.0 VGA compatible controller: Advanced Micro Devices, Inc. [AMD/ATI] Curacao PRO [Radeon R7 370 / R9 270/370 OEM]\n\tSubsystem: Gigabyte Technology Co., Ltd Device 226c\n\tKernel driver in use: amdgpu\n\tKernel modules: radeon, amdgpu\n...\n```\n\nSome forum threads about this problem: [3] [4]\n\n"
    },
    {
      "title": "AMDGPU - Hangs when playing DirectX Vulkan games",
      "level": 3,
      "content": "Radeon-Vulkan seems to cause driver and/or GPU hangs when playing some games with usage of DirectX Vulkan.\n\n```\nkernel: [drm:amdgpu_dm_atomic_commit_tail [amdgpu]] *ERROR* Waiting for fences timed out!\nkernel: [drm:amdgpu_job_timedout [amdgpu]] *ERROR* ring gfx_0.0.0 timeout, signaled ..., emitted ...\nkernel: [drm:amdgpu_job_timedout [amdgpu]] *ERROR* Process information: process ... pid ... thread dxvk-submit pid\n...\n```\n\nSwitching to or enabling AMDVLK seems to fix the problem as discovered in BBS#275991.\n\n"
    },
    {
      "title": "AMDGPU - Crashes with DirectX Vulkan games",
      "level": 3,
      "content": "AMDVLK has been reported as causing crashes by multiple users (see BBS#284118, BBS#283008, BBS#274737): switching to or enabling the Radeon-Vulkan driver fixes the issue.\n\n"
    },
    {
      "title": "AMDGPU - Vulkan applications launch slowly",
      "level": 3,
      "content": "If you install cuda, you might find Vulkan applications, for example, Chromium, launch slowly. It's because nvidia-utils provides an Vulkan driver and Vulkan would try nvidia drivers before radeon drivers. To solve it, set the environment variable VK_DRIVER_FILES to /usr/share/vulkan/icd.d/radeon_icd.i686.json:/usr/share/vulkan/icd.d/radeon_icd.x86_64.json.\n\n"
    },
    {
      "title": "AMDGPU - Found no drivers!",
      "level": 3,
      "content": "When encountering Found no drivers!:\n\n```\n$ vulkaninfo\n```\n\n```\nWARNING: [Loader Message] Code 0 : terminator_CreateInstance: Failed to CreateInstance in ICD 0.  Skipping ICD.\nERROR: [Loader Message] Code 0 : terminator_CreateInstance: Found no drivers!\nCannot create Vulkan instance.\nThis problem is often caused by a faulty installation of the Vulkan driver or attempting to use a GPU that does not support Vulkan.\nERROR at /usr/src/debug/vulkan-tools/Vulkan-Tools-1.3.269/vulkaninfo/./vulkaninfo.h:688:vkCreateInstance failed with ERROR_INCOMPATIBLE_DRIVER\n```\n\nAMD has regularly dropped support for pre-Polaris and up to Vega. If your GPU support was removed from amdvlk, uninstall it and install vulkan-radeon.\n\n"
    }
  ]
}