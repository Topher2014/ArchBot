{
  "title": "Vault",
  "url": "https://wiki.archlinux.org/title/Vault",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Vault is an open-source tool from HashiCorp for securely managing secrets and protecting sensitive data. It provides encryption as a service, access control, and detailed audit logging.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the vault package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Vault can be run in development mode for testing or configured as a production server with enhanced security settings. The configuration is defined in a file using the \"Hashicorp Command Language\" (HCL) format.\n\n"
    },
    {
      "title": "Development mode",
      "level": 3,
      "content": "For testing, Vault can be run in development mode, which starts with an in-memory storage backend and automatically unseals itself.\n\nTo start Vault in development mode, run the following command:\n\n```\n$ vault server -dev\n```\n\n"
    },
    {
      "title": "Production configuration",
      "level": 3,
      "content": "To set up a production-ready Vault server, create a configuration file:\n\n```\n# mkdir /etc/vault\n# touch /etc/vault/config.hcl\n```\n\nThen, add your desired configuration settings to /etc/vault/config.hcl.\n\n"
    },
    {
      "title": "Storage configuration",
      "level": 4,
      "content": "Vault supports multiple storage backends. For a simple file-based backend, use:\n\n```\nstorage \"file\" {\n    path = \"/opt/vault/data\"\n}\n```\n\nFor high-availability or heavy usage environments, consider using consul, dynamodbAUR, or other supported storage solutions that offer scalability and reliability.\n\n"
    },
    {
      "title": "Listener configuration",
      "level": 4,
      "content": "Vault listens on a TCP port for API requests. For basic configurations without TLS, use:\n\n```\nlistener \"tcp\" {\n    address     = \"127.0.0.1:8200\"\n    tls_disable = \"true\"\n}\n```\n\nIf TLS is required for secure communication, configure it as follows:\n\n```\nlistener \"tcp\" {\n    address     = \"127.0.0.1:8200\"\n    tls_disable = \"false\"\n    tls_cert_file = \"/etc/vault/vault-cert.pem\"\n    tls_key_file  = \"/etc/vault/vault-key.pem\"\n}\n```\n\n"
    },
    {
      "title": "UI configuration",
      "level": 4,
      "content": "To enable the Vault web interface, add:\n\n```\nui = true\n```\n\n"
    },
    {
      "title": "API and cluster addresses",
      "level": 4,
      "content": "Set the API and cluster addresses for proper networking:\n\n```\napi_addr = \"http://127.0.0.1:8200\"\ncluster_addr = \"http://127.0.0.1:8201\"}}\n```\n\nIf using TLS:\n\n```\napi_addr = \"https://127.0.0.1:8200\"\ncluster_addr = \"https://127.0.0.1:8201\"\n```\n\n"
    },
    {
      "title": "Security considerations",
      "level": 4,
      "content": "By default, Vault locks memory to prevent sensitive data from being swapped to disk. This enhances security by ensuring that secrets do not end up in the swap space, where they could be accessed by unauthorized users or forensic tools.\n\nHowever, using mlock requires ensuring that the system has sufficient memory and allows unlimited memory locking. If the system lacks adequate RAM or has restrictive memory limits, enabling mlock could cause Vault to fail unexpectedly. To safely use mlock, ensure:\n\n- The system has enough free RAM to accommodate Vaultâ€™s memory usage.\n- The systemd service is configured with:\n\n```\nAmbientCapabilities=CAP_IPC_LOCK\nLimitMEMLOCK=infinity\n```\n\nIf your system does not meet these requirements, you may need to disable mlock. To do so (not recommended for production environments):\n\n```\ndisable_mlock = true\n```\n\n"
    },
    {
      "title": "Audit logging configuration",
      "level": 4,
      "content": "Vault uses audit devices to log client requests and responses for security and troubleshooting purposes. The audit logs help track access patterns, detect anomalies, and ensure compliance.\n\nTo enable a file-based audit log, configure an audit device in Vault:\n\n```\naudit_device \"file\" {\n    path   = \"/var/log/vault-audit.log\"\n    format = \"json\"\n}\n```\n\nThis will log audit events to /var/log/vault-audit.log in JSON format, making it easier to parse and analyze.\n\nTo ensure Vault can write to the audit log securely, set the correct permissions:\n\n```\n# touch /var/log/vault-audit.log\n# chown vault:vault /var/log/vault-audit.log\n# chmod 640 /var/log/vault-audit.log\n```\n\nVault supports multiple audit logging backends besides files, For a full list of supported audit devices and advanced configuration options, refer to the official documentation.\n\n"
    },
    {
      "title": "Logging configuration",
      "level": 4,
      "content": "Vault provides logging capabilities to help monitor its operations, troubleshoot issues, and analyze system behavior. By default, logs are sent to stdout, but they can also be written to a file.\n\nTo configure Vault to log to a file, specify the log file path and log level in the configuration:\n\n```\nlog_file = \"/var/log/vault.log\"\nlog_level = \"info\"\n```\n\nTo ensure Vault can write logs properly, adjust file permissions:\n\n```\n# touch /var/log/vault.log\n# chown vault:vault /var/log/vault.log\n# chmod 640 /var/log/vault.log\n```\n\n"
    },
    {
      "title": "Example configuration",
      "level": 4,
      "content": "Below is a complete example combining the above settings:\n\n```\nstorage \"file\" {\n    path = \"/opt/vault/data\"\n}\n\nlistener \"tcp\" {\n    address     = \"127.0.0.1:8200\"\n    tls_disable = \"true\"\n}\n\nui = true\n\napi_addr = \"http://127.0.0.1:8200\"\ncluster_addr = \"http://127.0.0.1:8201\"\n\ndisable_mlock = true\n\naudit_device \"file\" {\n    path   = \"/var/log/vault-audit.log\"\n    format = \"json\"\n}\n\nlog_file = \"/var/log/vault.log\"\nlog_level = \"info\"\n```\n\nIf using TLS:\n\n```\nstorage \"file\" {\n    path = \"/opt/vault/data\"\n}\n\nlistener \"tcp\" {\n    address     = \"127.0.0.1:8200\"\n    tls_disable = \"false\"\n    tls_cert_file = \"/etc/vault/vault-cert.pem\"\n    tls_key_file  = \"/etc/vault/vault-key.pem\"\n}\n\nui = true\n\napi_addr = \"https://127.0.0.1:8200\"\ncluster_addr = \"https://127.0.0.1:8201\"\n\ndisable_mlock = true\n\naudit_device \"file\" {\n    path   = \"/var/log/vault-audit.log\"\n    format = \"json\"\n}\n\nlog_file = \"/var/log/vault.log\"\nlog_level = \"info\"\n```\n\n"
    },
    {
      "title": "Creating the storage directory",
      "level": 3,
      "content": "```\n# mkdir -p /opt/vault/data\n# chown -R vault:vault /opt/vault\n```\n\n"
    },
    {
      "title": "Running Vault as a systemd service",
      "level": 3,
      "content": "Optionally, Vault can be run as a systemd service to ensure it starts automatically at boot, restarts upon failure, and integrates well with process management on Linux. This approach is particularly useful in production environments where Vault needs to remain available without manual intervention.\n\n"
    },
    {
      "title": "Creating the systemd service file",
      "level": 4,
      "content": "Create a unit file:\n\n```\n/etc/systemd/system/vault.service\n```\n\n```\n[Unit]\nDescription=HashiCorp Vault - A secrets management solution\nAfter=network.target\n\n[Service]\nUser=vault\nGroup=vault\nProtectSystem=full\nProtectHome=true\nPrivateTmp=true\nPrivateDevices=true\nSecureBits=keep-caps\nAmbientCapabilities=CAP_IPC_LOCK\nLimitMEMLOCK=infinity\nNoNewPrivileges=yes\nExecStart=/usr/bin/vault server -config=/etc/vault/config.hcl\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nKillSignal=SIGINT\nRestart=on-failure\nRestartSec=5\nTimeoutStopSec=30\nProtectKernelModules=yes\nProtectControlGroups=yes\nReadOnlyPaths=/etc/vault\nSystemCallFilter=@system-service\nSystemCallFilter=~@privileged\n\n[Install]\nWantedBy=multi-user.target\n```\n\nNext, enable/start the vault.service.\n\n"
    },
    {
      "title": "Setting environment variables",
      "level": 3,
      "content": "Set the environment variable to specify the Vault address. This ensures that Vault commands interact with the correct server instance without requiring the address to be manually specified each time.\n\n```\n$ export VAULT_ADDR='http://127.0.0.1:8200'\n```\n\nTo make this persistent across reboots, add it to /etc/environment:\n\n```\n# echo \"VAULT_ADDR='http://127.0.0.1:8200'\" | sudo tee -a /etc/environment\n```\n\n"
    },
    {
      "title": "Initializing vault",
      "level": 3,
      "content": "Vault encrypts and protects secrets, requiring an \"unsealing\" process to decrypt and access them after a restart. When initialized, Vault generates multiple unseal keys, and a minimum threshold of these keys is needed to unseal the Vault. This ensures that no single person has full access, adding an extra layer of security.\n\nTo initialize Vault, run:\n\n```\n$ vault operator init\n```\n\nThis will output 5 unseal keys and an initial root token. Save these securely!\n\n"
    },
    {
      "title": "Automatic unsealing",
      "level": 4,
      "content": "Vault can be configured to auto-unseal using cloud-based KMS services (such as AWS KMS, GCP KMS) or hardware security modules (HSMs). This eliminates the need for manual key entry upon startup. For more info refer to the official Vault auto-unseal documentation.\n\n"
    },
    {
      "title": "Manual unsealing",
      "level": 4,
      "content": "For manual unsealing, Vault must be unsealed with at least three different keys:\n\n```\n$ vault operator unseal <unseal-key-1>\n$ vault operator unseal <unseal-key-2>\n$ vault operator unseal <unseal-key-3>\n```\n\n"
    },
    {
      "title": "Login to the vault",
      "level": 4,
      "content": "```\n$ vault login <root-token>\n```\n\n"
    },
    {
      "title": "Accessing the UI",
      "level": 3,
      "content": "Open http://127.0.0.1:8200 in your browser.\n\nYou will see a login screen where you can use your root token to access the Vault UI.\n\n"
    }
  ]
}