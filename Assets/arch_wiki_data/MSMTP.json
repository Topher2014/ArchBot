{
  "title": "MSMTP",
  "url": "https://wiki.archlinux.org/title/MSMTP",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Mail server\n\nmsmtp is a very simple and easy to use SMTP client with fairly complete sendmail compatibility.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the msmtp package. Additionally, install msmtp-mta, which creates a sendmail alias to msmtp.\n\n"
    },
    {
      "title": "Basic setup",
      "level": 2,
      "content": "Since msmtp version 1.8.6 you can place your user configuration either at ~/.msmtprc or $XDG_CONFIG_HOME/msmtp/config. The following is an example of a msmtp configuration (the file is based on the per-user example file located at /usr/share/doc/msmtp/msmtprc-user.example; the system configuration file belongs at /etc/msmtprc and its corresponding example file is located at /usr/share/doc/msmtp/msmtprc-system.example).\n\n- Use OAuth, via #OAuth2 Setup.\n- If you use two factor authentication: create an app password.\n\n```\n~/.msmtprc\n```\n\n```\n# Set default values for all following accounts.\ndefaults\nauth           on\ntls            on\ntls_trust_file /etc/ssl/certs/ca-certificates.crt\nlogfile        ~/.msmtp.log\n\n# Gmail\naccount        gmail\nhost           smtp.gmail.com\nport           465\ntls_starttls   off\nfrom           username@gmail.com\nuser           username\npassword       plain-text-password\n\n# A freemail service\naccount        freemail\nhost           smtp.freemail.example\nfrom           joe_smith@freemail.example\n...\n\n# Accounts can inherit info from another account\naccount        postmasterfreemailÂ : freemail\nfrom           postmaster*@freemail.example\n\n# Set a default account\naccount default: gmail\n```\n\nThe user configuration file must be explicitly readable/writeable by its owner or msmtp will fail:\n\n```\n$ chmod 600 ~/.msmtprc\n```\n\nTo avoid saving the password in plain text in the configuration file, use passwordeval to launch an external program, or see the #Password management section below. This example using Gnu PG is commonly used to perform decryption of a password:\n\n```\necho -e \"password\\n\" | gpg --encrypt -o .msmtp-gmail.gpg # enter id (email...)\n```\n\n```\n~/.msmtprc\n```\n\n```\npasswordeval    \"gpg --quiet --for-your-eyes-only --no-tty --decrypt ~/.msmtp-gmail.gpg\"\n```\n\n"
    },
    {
      "title": "OAuth2 Setup",
      "level": 3,
      "content": "OAuth2 can be used to securely authenticate msmtp when basic username/password authentication is unsupported by the site configuration or otherwise undesirable.\n\n"
    },
    {
      "title": "oama",
      "level": 4,
      "content": "msmtp alone lacks the ability to renew or authorize OAuth2 credentials. A comprehensive solution is using the oama utility which provides IMAP/SMTP clients with renewal capabilities and authorization of OAuth2 credentials.\n\nTo use oama, install oama-binAUR and configure msmtp to use it:\n\n```\n# account at Google with oauth2 access                                    \n   account YOUR_EMAIL_NAME@gmail.com\n   from YOUR_EMAIL_NAME@gmail.com\n   user YOUR_EMAIL_NAME@gmail.com\n   auth oauthbearer\n   passwordeval oama access YOUR_EMAIL_NAME@gmail.com\n   host smtp.gmail.com\n   port 587\n   tls on\n   tls_trust_file /etc/ssl/certs/ca-certificates.crt\n```\n\nAccess token renewal happens automatically in the background transparent to the user.\n\n"
    },
    {
      "title": "Using the mail command",
      "level": 2,
      "content": "To send mails using the mail command you must install the package s-nail, which also provides the mailx command. You will also need to provide a sendmail-compatible MTA, either by installing msmtp-mta (which symlinks sendmail to msmtp) or by editing /etc/mail.rc to set the sendmail path:\n\n```\n/etc/mail.rc\n```\n\n```\nset mta=/usr/bin/msmtp\n```\n\nA .msmtprc file will need to be in the home of every user who wants to send mail or alternatively the system wide /etc/msmtprc can be used.\n\nmsmtp also understands aliases. Add the following line to the defaults section of msmtprc or your local configuration file:\n\n```\n/etc/msmtprc\n```\n\n```\naliases               /etc/aliases\n```\n\nand create an aliases file in /etc\n\n```\n/etc/aliases\n```\n\n```\n# Example aliases file\n     \n# Send root to Joe and Jane\nroot: joe_smith@example.com, jane_chang@example.com\n   \n# Send everything else to admin\ndefault: admin@domain.example\n```\n\n"
    },
    {
      "title": "Test functionality",
      "level": 2,
      "content": "The account option (--account=,-a) tells which account to use as sender:\n\n```\n$ echo \"hello there username.\" | msmtp -a default username@domain.com\n```\n\nOr, send both a subject and a body:\n\n```\n$ printf \"Subject: Test\\n\\nhello there username.\" | msmtp -a default username@domain.com\n```\n\nOr, with the addresses in a file:\n\n```\nTo: username@domain.com\nFrom: username@gmail.com\nSubject: A test\n\nHello there.\n```\n\n```\n$ cat test.mail | msmtp -a default <username>@domain.com\n```\n\n"
    },
    {
      "title": "Cronie default email client",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nTo make Cronie use msmtp rather than sendmail, make sure msmtp-mta is installed, or edit the cronie.service systemd unit:\n\n```\n/etc/systemd/system/cronie.service.d/msmtp.conf\n```\n\n```\n[Service]\nExecStart=\nExecStart=/usr/bin/crond -n -m '/usr/bin/msmtp -t'\n```\n\nThen you must tell cronie or msmtp what your email address is. One way to accomplish this is by adding it to the msmtp configuration:\n\n1. Add to /etc/msmtprc:aliases /etc/aliases\n1. Create /etc/aliases:your_username: email@address.com\n\n```\naliases /etc/aliases\n```\n\n```\nyour_username: email@address.com\n```\n\nAlternatively, you can add it directly to the crontab:\n\n- Add a MAILTO line to the crontab:MAILTO=email@address.com\n- Add a MAILFROM line to the crontab:MAILFROM=email@address-from-msmtp.com\n\n```\nMAILTO=email@address.com\n```\n\n```\nMAILFROM=email@address-from-msmtp.com\n```\n\n```\nsendmail: server message: 550 5.7.1 Rejected due to unmatching envelope and header sender.\n```\n\n"
    },
    {
      "title": "Password management",
      "level": 2,
      "content": "Passwords for msmtp can be stored in plaintext, encrypted files, or a keyring.\n\n"
    },
    {
      "title": "GNOME Keyring",
      "level": 3,
      "content": "Storing passwords in GNOME Keyring is supported natively in msmtp. Setup the keyring as described on the linked wiki page and install libsecret. Then, store a password by running:\n\n```\nsecret-tool store --label=msmtp host smtp.your.domain service smtp user yourusername\n```\n\nmsmtp should now find the password automatically.\n\n"
    },
    {
      "title": "GnuPG",
      "level": 3,
      "content": "The password directive may be omitted. In that case, if the account in question has auth set to a legitimate value other than off, invoking msmtp from an interactive shell will ask for the password before sending mail. msmtp will not prompt if it has been called by another type of application, such as Mutt. For such cases, the --passwordeval parameter can be used to call an external keyring tool like GnuPG.\n\nTo do this, set up GnuPG, including gpg-agent to avoid having to enter the password every time. Then, create an encrypted password file for msmtp, as follows. Create a secure directory with 700 permissions located on a tmpfs to avoid writing the unencrypted password to the disk. In that directory create a plain text file with the mail account password. Then, encrypt the file with your private key:\n\n```\n$ gpg --default-recipient-self -e /path/to/plain/password\n```\n\nRemove the plain text file and move the encrypted file to the final location, e.g. ~/.mail/.msmtp-credentials.gpg. In ~/.msmtprc add:\n\n```\n~/.msmtprc\n```\n\n```\npasswordeval  \"gpg --quiet --for-your-eyes-only --no-tty --decrypt ~/.mail/.msmtp-credentials.gpg\"\n```\n\nNormally this is sufficient for a GUI password prompt to appear when, for example, sending a message from Mutt. If gpg prompt for the passphrase cannot be issued, then start the gpg-agent before. A simple hack to start the agent is to execute a external command in your muttrc using the backtick `command` syntax. For example, you can put something like the following in your muttrc:\n\n```\nmuttrc\n```\n\n```\nset my_msmtp_pass=`gpg -d mypwfile.gpg`\n```\n\nMutt will execute this when it starts, gpg-agent will cache your password, msmtp will be happy and you can send mail.\n\nAn alternative is to place passwords in ~/.netrc, a file that can act as a common pool for msmtp, OfflineIMAP, and associated tools.\n\n"
    },
    {
      "title": "pass",
      "level": 3,
      "content": "You may store your credentials inside of the pass password manager.\n\nIf you are using your main password (which is customarily stored in the first line of your pass file) to login into your SMTP server, you can add the following to your .msmptrc:\n\n```\n~/.msmtprc\n```\n\n```\npasswordeval   \"pass your_email_password_entry | head -n1\"\n```\n\nIf you are using Gmail, and have set up an app password, the following configuration will suit you better. Save your app password inside your pass password file, but with a msmtp: prefix:\n\n```\nyour_email_password_entry\n```\n\n```\nyour_main_password\n\nlogin: your_username\nurl: the_url_of_your_email\nmsmtp: your_msmtp_app_password\n```\n\nThen add the following to your .msmptrc:\n\n```\n~/.msmtprc\n```\n\n```\npasswordeval   \"pass your_email_password_entry | awk '/^msmtp:/ { print $2; }'\"\n```\n\nIn either case, trying to send an email with msmtp will trigger pass, which may ask you for your pass master password if you have not entered it recently.\n\n"
    },
    {
      "title": "Using msmtp offline",
      "level": 3,
      "content": "Although msmtp is great, it requires that you be online to use it. This is not ideal for people on laptops with intermittent connections to the Internet or dialup users. Several scripts have been written to remedy this fact, collectively called msmtpqueue.\n\nThe scripts are installed under /usr/share/doc/msmtp/msmtpqueue. You might want to copy the scripts to a convenient location on your computer, (/usr/local/bin is a good choice).\n\nFinally, change your MUA to use msmtp-enqueue.sh instead of msmtp when sending e-mail. By default, queued messages will be stored in ~/.msmtpqueue. To change this location, change the QUEUEDIR=$HOME/.msmtpqueue line in the scripts (or delete the line, and export the QUEUEDIR variable in .bash_profile like so: export QUEUEDIR=\"$XDG_DATA_HOME/msmtpqueue\").\n\nWhen you want to send any mail that you have created and queued up run:\n\n```\n$ /usr/local/bin/msmtp-runqueue.sh\n```\n\nAdding /usr/local/bin to your PATH can save you some keystrokes if you are doing it manually. The README file that comes with the scripts has some handy information, reading it is recommended.\n\n"
    },
    {
      "title": "Vim syntax highlighting",
      "level": 3,
      "content": "The msmtp source distribution includes an msmtprc syntax-highlighting script for Vim, which is available at /usr/share/vim/vimfiles/syntax/msmtp.vim. The filetype is not detected automatically. The easiest way to enable it is by adding a modeline at the top or bottom of the file(s), i.e.:\n\n```\n# vim:filetype=msmtp\n```\n\n"
    },
    {
      "title": "Send mail with PHP using msmtp",
      "level": 3,
      "content": "Look for sendmail_path option in your php.ini and edit like this:\n\n```\nsendmail_path = \"/usr/bin/msmtp -C /path/to/your/config -t\"\n```\n\nNote that you can not use a user configuration file (ie: one under ~/) if you plan on using msmtp as a sendmail replacement with php or something similar. In that case just create /etc/msmtprc, and remove your user configuration (or not if you plan on using it for something else). Also make sure it is readable by whatever you are using it with (php, django, etc...).\n\nFrom the msmtp manual: Accounts defined in the user configuration file override accounts from the system configuration file. The user configuration file must have no more permissions than user read/write\n\nSo it is impossible to have a conf file under ~/ and have it still be readable by the php user.\n\nTo test it place this file in your php enabled server or using php-cli.\n\n```\n<?php\nmail(\"your@email.com\", \"Test email from PHP\", \"msmtp as sendmail for PHP\");\n?>\n```\n\nphp-fpm will fail to send mails and logs the warning: PHP Warning: mail(mail.log): failed to open stream unless you set the permissions of your /etc/msmtprc to user read/write (600).\n\n"
    },
    {
      "title": "Issues with TLS",
      "level": 3,
      "content": "If you see the following message:\n\n```\nmsmtp: TLS certificate verification failed: the certificate hasn't got a known issuer\n```\n\nIt probably means your tls_trust_file is not right.\n\nJust follow the fine manual. It explains you how to find out the server certificate issuer of a given smtp server. Then you can explore the /usr/share/ca-certificates/ directory to find out if by any chance, the certificate you need is there. If not, you will have to get the certificate on your own. If you are using your own certificate, you can make msmtp trust it by adding the following to your ~/.msmtprc:\n\n```\ntls_fingerprint <SHA1 (recommended) or MD5 fingerprint of the certificate>\n```\n\nIf you are trying to send mail through Gmail and are receiving this error, have a look at this thread or just use the second Gmail example above.\n\nIf you are completely desperate, but are 100% sure you are communicating with the right server, you can always temporarily disable the cert check:\n\n```\n$ msmtp --tls-certcheck off\n```\n\nIf you see the following message:\n\n```\nmsmtp: TLS handshake failed: the operation timed out\n```\n\nYou may be affected by this bug. Recompile with --with-ssl=openssl (msmtp is compiled with GnuTLS by default).\n\n"
    },
    {
      "title": "Server sent empty reply",
      "level": 3,
      "content": "If you get a \"server sent empty reply\" error, this probably means the mail server does not support STARTTLS over port 587, but requires TLS over port 465.\n\nTo let msmtp use TLS over port 465, add the following line to ~/.msmtprc:\n\n```\ntls_starttls off\n```\n\n"
    },
    {
      "title": "Zoho SMTP server",
      "level": 4,
      "content": "It can also happen on Zoho SMTP servers when the mail has no blank line between mail headers and mail body (see Debian bug #917260). The solution to this is to add an extra space in between:\n\n```\n\"test-header\\n\\ntest-body\"\n```\n\n"
    },
    {
      "title": "Issues with GSSAPI",
      "level": 3,
      "content": "If you get the following error\n\n```\nGNU SASL: GSSAPI error in client while negotiating security context in gss_init_sec_context() in SASL library.  This is most likely due insufficient credentials or malicious interactions.\n```\n\nTry changing your auth setting to plain, instead of gssapi in your .msmtprc file [1]:\n\n```\nauth plain\n```\n\n"
    },
    {
      "title": "Envelope not accepted",
      "level": 3,
      "content": "In the case of\n\n```\nmsmtp: envelope from address mail@server not accepted by the server\nmsmtp: server message: 530 5.5.1 Authentication Required.\nmsmtp: could not send mail (account default from /etc/msmtprc)\n```\n\nTry enabling authentication with\n\n```\nauth on\n```\n\nor any other method.\n\n"
    }
  ]
}