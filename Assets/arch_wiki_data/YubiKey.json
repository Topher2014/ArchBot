{
  "title": "YubiKey",
  "url": "https://wiki.archlinux.org/title/YubiKey",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Universal 2nd Factor\n- OATH\n- dm-crypt/Encrypting an entire system\n- PAM\n- GnuPG\n- KeePass\n- OpenPGP-card-tools\n- Smartcards\n\nThe YubiKey is a small USB Security token. Depending on the model, it can:\n\n- Act as a smartcard (using the CCID protocol) - allowing storage of both PGP and PIV secret keys.\n- Handle Universal 2nd Factor (U2F) requests.\n- Store and query approximately 30 Initiative for Open Authentication (OATH) credentials.\n- Handle challenge-response requests, in either the Yubico OTP mode or the HMAC-SHA1 mode.\n- Generate One-time passwords (OTP) - Yubico's AES based standard.\n- \"Type\" a static password up to 63 characters.\n\nWhile offering many features, newer versions of the YubiKey are not released as open source. Alternatives are the Solo, TKey or Nitrokey.\n\n"
    },
    {
      "title": "Management tools",
      "level": 3,
      "content": "- YubiKey Manager — Python library and command-line tool (ykman) for configuring and querying a YubiKey over USB. Has optional GUI.\n\n- YubiKey Personalization — Library and tool for configuring and querying a YubiKey over the OTP USB connection. More powerful than ykman, but harder to use. Has optional GUI.\n\n"
    },
    {
      "title": "Authentication tools",
      "level": 3,
      "content": "- Yubico PAM — PAM user authentication with either Yubico OTP or challenge-response.\n\n- Yubico PAM-U2F — PAM user authentication with U2F.\n\n- Yubico Authenticator for Desktop — GUI to read OATH codes from your YubiKey over USB. Support the newer OATH implementation (YubiKey NEO and 4) as well as the older slot-based implementation (YubiKey Standard and Edge). Note archlinux/packaging/packages/yubioath-desktop#2.\n\n- Yubico Authenticator 6.0+ for Desktop — Yubico Authenticator 6.0+ (Version 6.0 and higher) is an application for managing the YubiKey's second factor credentials. Starting with Version 6.0, the codebase has been completely rewritten using the Flutter framework.\n\n- libfido2 — Client-side U2F support. Enables web browsers to use the U2F protocol for authentication with your YubiKey.\n\n- YubiKey Full Disk Encryption — Use challenge-response mode to create strong LUKS passphrases. Supports full disk encryption.\n\n"
    },
    {
      "title": "Inputs",
      "level": 2,
      "content": "The YubiKey takes inputs in the form of API calls over USB and button presses.\n\nThe button is very sensitive. Depending on the context, touching it does one of these things:\n\n- Trigger a static password or one-time password (OTP) (Short press for slot 1, long press for slot 2). This is the default behavior, and easy to trigger inadvertently.\n- Confirm / allow a function or access. The LED will illuminate to prompt the user.\n- Insert / eject the smartcard\n\n"
    },
    {
      "title": "Outputs",
      "level": 2,
      "content": "The YubiKey transforms these inputs into outputs:\n\n- Keystrokes (emulating a USB keyboard), used to type static passwords and OTPs. (Note that static passwords are vulnerable to keyloggers.)\n- The built-in LED: Blinks once when plugged in, useful for troubleshooting. Blinks steadily when a button press is required to permit an API response.\n- API responses over USB. This is used for: Challenge-Response requests (calculated using either Yubico OTP mode or HMAC-SHA1 mode) U2F Challenge-Response requests CCID Smartcard related requests\n\n- Blinks once when plugged in, useful for troubleshooting.\n- Blinks steadily when a button press is required to permit an API response.\n\n- Challenge-Response requests (calculated using either Yubico OTP mode or HMAC-SHA1 mode)\n- U2F Challenge-Response requests\n- CCID Smartcard related requests\n\n"
    },
    {
      "title": "USB connection modes",
      "level": 2,
      "content": "Depending on the YubiKey model, the device provides up to three different USB interfaces. Two of the interfaces implement the USB HID (Human Interface Device) device class; the third is a smart card interface (CCID). All three can be enabled or disabled independently, allowing control of their associated protocols.\n\nThe following table shows which protocols use which interfaces:\n\nTable content:\nProtocol | Interface\nOTP | Keyboard HID\nFIDO | Other HID\nPIV | CCID\nOpenPGP | CCID\nOATH | CCID\n\nykman uses the term \"modes\", named OTP, FIDO, and CCID.\n\n"
    },
    {
      "title": "Get enabled modes",
      "level": 3,
      "content": "For YubiKey prior to version 5:\n\n```\n$ ykman config mode\n```\n\n```\nCurrent connection mode is: OTP+FIDO+CCID\n```\n\nFor YubiKey version 5:\n\n```\n$ ykman info\n```\n\n```\nDevice type: YubiKey 5 NFC\nSerial number: XXXXXXXXX\nFirmware version: 5.4.3\nForm factor: Keychain (USB-A)\nEnabled USB interfaces: OTP, FIDO, CCID\nNFC transport is enabled.\n\nApplications    USB     NFC\nFIDO2           Enabled Enabled\nOTP             Enabled Enabled\nFIDO U2F        Enabled Enabled\nOATH            Enabled Enabled\nYubiHSM Auth    Enabled Enabled\nOpenPGP         Enabled Enabled\nPIV             Enabled Enabled\n```\n\n"
    },
    {
      "title": "Set modes",
      "level": 3,
      "content": "All modes are enabled from the factory. To change them:\n\n```\n$ ykman mode [OPTIONS] MODE\n```\n\n- MODE can be a string, such as OTP+FIDO+CCID, or a shortened form o+f+c.\n- MODE can be a mode-number, which encodes several enabled modes.\n\nHere is a table of mode-numbers, if you care to use them:\n\nTable content:\n0 | OTP device only.\n1 | CCID device only.\n2 | OTP/CCID composite device.\n3 | U2F device only.\n4 | OTP/U2F composite device.\n5 | U2F/CCID composite device.\n6 | OTP/U2F/CCID composite device.\n81 | CCID device only, with touch-eject.\n\nOptions:\n\n- --touch-eject - The button will insert and eject the smart card. This only works if the mode is CCID only; FIDO and OTP must be disabled.\n- --autoeject-timeout SECONDS - Automatically eject the smart card after some time. Same restrictions as --touch-eject.\n- --chalresp-timeout SECONDS - Set the challenge-response timeout.\n\nFor more information, see ykman mode --help.\n\n"
    },
    {
      "title": "One-time password",
      "level": 2,
      "content": "This feature has a somewhat misleading name, because it also encompasses the static password and challenge-response functions.\n\n2 slots are provided for this feature, accessible by short and long button presses respectively. Each can be configured with one of the following:\n\n- Yubico OTP\n- OATH-HOTP\n- OATH-TOTP\n- Challenge-response\n- Static Password\n\nEach function has several configuration options provided at the time of creation, but once set they cannot be read back. It is possible to swap slots 1 and 2, with ykman otp swap.\n\n"
    },
    {
      "title": "Factory configuration",
      "level": 3,
      "content": "On a new YubiKey, Yubico OTP is preconfigured on slot 1. This initial AES symmetric key is stored in the YubiKey and on the Yubico Authentication server. This allows validating against YubiCloud, allowing the use of Yubico OTP in combination with the Yubico Forum website for instance or on https://demo.yubico.com).\n\n"
    },
    {
      "title": "Yubico OTP",
      "level": 3,
      "content": "The Yubico OTP is based on symmetric cryptography. More specifically, each YubiKey contains a 128-bit AES key unique to that device, which is also stored on a validation server. When asked for a password, the YubiKey will create a token by concatenating different fields such as the ID of the key, a counter, and a random number, and encrypting the result.\n\nThis OTP is sent to the target system, which passes it to a validation server. The validation server (also in posession of the secret key) decrypts it and verifies the information inside. The result is returned to the target system, which can then decide whether to grant access.\n\n"
    },
    {
      "title": "YubiCloud and validation servers",
      "level": 4,
      "content": "Yubico provides a validation server with free unlimited access, called YubiCloud. YubiCloud knows the factory configuration of all YubiKeys, and is the \"default\" validation service used by (for example) yubico-pam. Yubico also offers open-source implementations of the server.\n\nNote: **HMAC** \n\n- HMAC: use https://upgrade.yubico.com/getapikey/ to get an HMAC key and ID\n- HTTPS: the validation server's certificate is signed by GoDaddy, and is thus trusted by default in Arch installs (at least if you have ca-certificates installed)\n\n"
    },
    {
      "title": "Configuration and usage",
      "level": 4,
      "content": "Generate a new key in slot 2, and upload it to YubiCloud (opens in a browser):\n\n```\n$ ykman otp yubiotp --generate-key --upload 2\n```\n\nFor more information, see ykman otp yubiotp --help.\n\n"
    },
    {
      "title": "Security risks",
      "level": 4,
      "content": "As you can imagine, the AES key should be kept secret. It cannot be retrieved from the YubiKey itself (or it should not, at least not with software). It is also present in the validation server, so the security of this server is very important.\n\nSince the target system relies on a validation server, a possible attack would be to impersonate it. To prevent this, the target system needs to authenticate the validation server, either using HMAC or HTTPS.\n\n"
    },
    {
      "title": "Challenge-response",
      "level": 3,
      "content": "A challenge is sent to the YubiKey, which calculates a response based on some secret. The same challenge always results in the same response. Without the secret this calculation is not feasible, even with many challenge-response pairs.\n\nThis can be used for\n\n- True 2-factor authentication: The user is provided a challenge, they must provide the correct response in addition to a password. Both parties must have the secret key.\n- \"Semi\" 2-factor authentication: the challenge acts as a password, and the server stores the correct response. This is not an OTP, and if anyone can obtain the response they will gain access, but it is simpler as the server does not need the secret key.\n\nThere are two Challenge-Response algorithms:\n\n- HMAC-SHA1\n- Yubico OTP\n\nYou can set them up with a GUI using the yubikey-personalization-gui, or with the following instructions:\n\n"
    },
    {
      "title": "HMAC-SHA1 algorithm",
      "level": 4,
      "content": "Set up slot 2 in challenge response mode with a generated key:\n\n```\n$ ykman otp chalresp --generate 2\n```\n\nYou can omit the --generate flag in order to provide a key, see ykman otp chalresp --help. A main advantage of providing a key is that it can be used to setup a second device as a backup. The command openssl rand -hex 20 generates a suitable key, for example.\n\n"
    },
    {
      "title": "Yubico OTP algorithm",
      "level": 4,
      "content": "ykman Does not appear to support setting the chal-yubico algorithm, but you can use ykpersonalize. Generate a random key in slot 2:\n\n```\n$ ykpersonalize -2 -ochal-resp -ochal-yubico\n```\n\nFor more information, see ykpersonalize(1).\n\n"
    },
    {
      "title": "Sending a challenge",
      "level": 4,
      "content": "To send a challenge and get a response, the ykchalresp -slot challenge command can be used. For example,\n\n```\n$ ykchalresp -2 archie\n```\n\n```\n12a19763be77d75af46fb76f0b737c117fa47205\n```\n\nreturns a 40-byte SHA1-hash unique to the programmed slot 2. A different challenge produces another unique response.\n\n"
    },
    {
      "title": "Static password",
      "level": 3,
      "content": "You can either generate a static password:\n\n```\n$ ykman otp static --generate slot\n```\n\nor provide one:\n\n```\n$ ykman otp static slot password\n```\n\nYou have several options; you can set the length and character set of the generated password, and whether or not to send an Enter keystroke. See ykman otp static --help for more.\n\n"
    },
    {
      "title": "Emulated USB keyboard limitations, or \"Why does my password look so weak?\"",
      "level": 3,
      "content": "In order for the YubiKey to work with most keyboard layouts, passwords are by default limited to the ModHex alphabet (cbdefghijklnrtuv), digits 0-9, and !. These characters use the same scan codes across a very large number of keyboard layouts, ensuring compatibility with most computers.\n\nYubico has provided a whitepaper on the subject.\n\n"
    },
    {
      "title": "OATH",
      "level": 2,
      "content": "The YubiKey offers 2 OATH implementations:\n\n"
    },
    {
      "title": "OATH API",
      "level": 3,
      "content": "If you prefer a GUI, you can use yubioath-desktopAUR.\n\nykman can add codes in the URI format with ykman oath uri. Here is a one-liner that will add a credential from an image of a QR code:\n\n```\n$ zbarimg qr_code.png --quiet --raw | xargs ykman oath accounts uri\n```\n\nYou can also do things manually. Program a TOTP key, requiring a button touch to generate a code:\n\n```\n$ ykman oath accounts add --touch name secret\n```\n\nProgram an HOTP key:\n\n```\n$ ykman oath accounts add --oath-type HOTP name secret\n```\n\nList credentials:\n\n```\n$ ykman oath accounts list\n```\n\nGenerate codes:\n\n```\n$ ykman oath accounts code query\n```\n\nTo see all available subcommands see ykman oath --help. To see information about each, use ykman oath subcommand --help.\n\n"
    },
    {
      "title": "OTP slot implementation",
      "level": 3,
      "content": "Program an HOTP in slot 2:\n\n```\n$ ykman otp hotp 2 key\n```\n\nProgram a TOTP:\n\n```\n$ ykman otp chalresp --totp slot key\n```\n\nGenerate an HOTP:\n\n```\n$ ykman otp calculate slot\n```\n\nGenerate a TOTP:\n\n```\n$ ykman otp calculate --totp slot\n```\n\nSee also: ykman otp --help and https://developers.yubico.com/OATH/\n\n"
    },
    {
      "title": "U2F",
      "level": 2,
      "content": "Universal 2nd Factor (U2F) with a YubiKey is very simple, requiring no configuration for the key itself. Note that this mode is also referred to as 'FIDO' in some documentation and utilities. You have a few limited management options through the ykman utility:\n\n- Set a PIN: ykman fido access change-pin\n- delete individual credentials: ykman fido credentials delete QUERY\n- Reset all credentials and PIN: ykman fido reset\n\nTo use U2F for authentication, see the instructions in U2F.\n\nAlso see WebAuthn.\n\n"
    },
    {
      "title": "CCID smartcard",
      "level": 2,
      "content": "CCID (Chip Card Interface Device) is a USB standard device class for use by USB devices that act as smart card readers or with security tokens that connect directly via USB, like the YubiKey. HID (Human Interface Device) and CCID are both USB device classes, i.e. they are in the same category of USB specifications. HID is a specification for computer peripherals, like keyboards. The YubiKey works like a USB (HID) keyboard when used in the OTP and FIDO modes, but switches to the CCID protocol when using the PIV application, or as an OpenPGP device.\n\nCCID mode should be enabled by default on all YubiKeys shipped since November 2015 [1][dead link 2025-04-06 ⓘ]. Enable at least the CCID mode. Please see #Get enabled modes.\n\n"
    },
    {
      "title": "PIV",
      "level": 3,
      "content": "Starting with the YubiKey NEO, the YubiKeys contain a PIV (Personal Identity Verification) application on the chip. PIV is a US government standard (FIPS 201) that specifies how a token using RSA or ECC (Elliptic Curve Cryptography) is used for personal electronic identification. The YubiKey NEO only supports RSA encryption, later models (YubiKey 4 and 5) support both RSA and ECC. The exact algorithms supported depends on the firmware. For example, only YubiKeys with firmware 5.7 and up support RSA 3072, RSA 4096, Ed25519, and X25519 keys [2]. The distinguishing characteristic of a PIV token is that it is built to protect private keys and operate on-chip. A private key never leaves the token after it has been installed on it. Optionally, the private key can even be generated on-chip with the aid of an on-chip random number generator. If generated on-chip, the private key is never handled outside of the chip, and there is no way to recover it from the token. When using the PIV mechanism, the YubiKey functions as a CCID device.\n\n"
    },
    {
      "title": "OpenPGP smartcards",
      "level": 3,
      "content": "The YubiKey can act as a standard OpenPGP smartcard; see GnuPG#Smartcards for instructions on how to set up and use it with GnuPG. Yubico also provides some documentation in https://developers.yubico.com/PGP/.\n\nIf you do not want to use the other features (U2F and OTP), the button can be configured to insert and eject it, and an auto-eject timeout can be set as well. See #USB connection modes for more.\n\nThe default user pin is 123456 and the default admin pin is 12345678. The default PUK is also 12345678. Remember to change all 3.\n\n"
    },
    {
      "title": "Use cases",
      "level": 2,
      "content": "This section details how to use your YubiKey for various authentication purposes. It is by no means an exhaustive list.\n\n"
    },
    {
      "title": "Full disk encryption with LUKS",
      "level": 3,
      "content": "You have several options:\n\n- Challenge-Response: the response to some challenge is used as a LUKS key. The challenge can act as a password for true 2-factor authentication, or stored in plain-text for one-factor authentication.\n- GnuPG: Uses the yubikey's PGP smartcard functionality. Offers strong 2-factor authentication without needing a huge passphrase.\n- FIDO HMAC Secret: If your YubiKey supports U2F, it can be configured to return a symmetric secret.\n\n"
    },
    {
      "title": "Common prerequisites",
      "level": 4,
      "content": "- A bootable LUKS encrypted system, using the encrypt mkinitcpio hook, with at least one free keyslot. With the exception of mkinitcpio-ykfdeAUR, the sd-encrypt hook is not supported by any of these tools.\n- Backed up LUKS header (Optional, though advisable)\n\n- With the exception of mkinitcpio-ykfdeAUR, the sd-encrypt hook is not supported by any of these tools.\n\n"
    },
    {
      "title": "Challenge-response",
      "level": 4,
      "content": "See yubikey-full-disk-encryption's official documentation for complete instructions. Broadly:\n\n1. Install yubikey-full-disk-encryption.\n1. Configure /etc/ykfde.conf.\n1. Enroll the disk: # ykfde-enroll -d /dev/DISK -s LUKS_SLOT\n1. Add the ykfde mkinitcpio hook before the encrypt hook.\n1. Regenerate the initramfs.\n\nThere are a few variations available:\n\n- 2FA: default behavior. You must provide the challenge as a password when enrolling the device, and upon boot.\n- 1FA: Set YKFDE_CHALLENGE in ykfde.conf. Note that this is stored in plaintext. Consider disabling non-root read permissions to this file.\n- NFC support (Experimental)\n- Suspend & Resume support (Experimental) Automatically lock encrypted volumes on suspend, unlock them on resume.\n\nYou must regenerate the initramfs for any configuration changes to take effect.\n\n"
    },
    {
      "title": "systemd-based initramfs",
      "level": 4,
      "content": "Users of the sd-encrypt hook may install mkinitcpio-ykfdeAUR or mkinitcpio-ykfde-gitAUR and follow the instruction in the project documentation. The procedure is broadly similar to yubikey-full-disk-encryption.\n\n"
    },
    {
      "title": "GnuPG encrypted keyfile",
      "level": 4,
      "content": "One tool to accomplish this is initramfs-scencrypt; see its docs for complete instructions. Note that as of October 2022 this package is not in the AUR and is not thoroughly tested, though the GitHub repository offers a PKGBUILD.\n\nThe dm-crypt pages offer a few alternatives, though they are mostly links to old forum posts.\n\n"
    },
    {
      "title": "HMAC secret extension of FIDO2 protocol",
      "level": 4,
      "content": "Yet another way of using YubiKey for full disk encryption is to utilize HMAC Secret Extension to retrieve the LUKS password from YubiKey. This can be protected by a passphrase. This functionality requires at least YubiKey 5 with firmware 5.2.3+. For a passphrase protected solution, install khefinAUR and follow instructions available in project documentation. For single factor (optionally PIN-protected) solution and starting with systemd 248, it is possible to use your FIDO2 key as LUKS2 keyslot. Instructions available in the author's blog post.\n\n"
    },
    {
      "title": "KeePass",
      "level": 3,
      "content": "KeePass can be configured for YubiKey support; see the YubiKey section for instructions.\n\n"
    },
    {
      "title": "CCID",
      "level": 4,
      "content": "If your YubiKey supports CCID smartcards, you can use it as a hardware-backed SSH key, either based on GPG or PIV keys. Yubico offers good documentation:\n\n- An overview of both possibilities, giving their advantages and disadvantages\n- Instructions for PGP authentication\n- Instructions for PIV authentication through user certificates\n- Instructions for PIV authentication through #PKCS11\n\n"
    },
    {
      "title": "U2F",
      "level": 4,
      "content": "You may also use the U2F feature of the YubiKey to create hardware-backed SSH keys. See SSH keys#FIDO/U2F for instructions.\n\n"
    },
    {
      "title": "PIV",
      "level": 4,
      "content": "yubikey-agentAUR stores the SSH key as PIV token. See https://github.com/FiloSottile/yubikey-agent#readme for a setup guide.\n\n"
    },
    {
      "title": "Linux user authentication with PAM",
      "level": 3,
      "content": "PAM, and therefore anything which uses PAM for user authentication, can be configured to use a YubiKey as a factor of its user authentication process. This includes sudo, su, ssh, screen lockers, display managers, and nearly every other instance where a Linux system needs to authenticate a user. Its flexible configuration allows you to set whichever authentication requirements fit your needs, for the entire system, a specific application, or for groups of applications. For example, you could accept the YubiKey as an alternative to a password for local sessions, while requiring both for remote sessions. In addition to the Arch Wiki, You are encouraged to read pam(8) and pam.conf(5) to understand how it works and how to configure it.\n\nThere are several modules available which integrate YubiKey-supported protocols into PAM:\n\n- pam-u2f - Supports #U2F via the FIDO2 standard. If you are not sure which method to use, this one is a good choice. Universal 2nd Factor#Authentication for user sessions Yubico's official docs, including a list of supported module parameters. Man Pages: pam_u2f(8), pamu2fcfg(1)\n- oath-toolkit - Supports #OATH one-time passwords (either HOTP or TOTP) pam_oath\n- yubico-pam - Supports #Yubico OTP and challenge-response OTPs. Note that Yubico OTP mode requires a network connection to a validation server, while challenge-response mode does not. Yubico's official docs[dead link 2025-03-15 ⓘ] pam_yubico(8) - Take note of the mode parameter, used to set challenge-response mode.\n\n- Universal 2nd Factor#Authentication for user sessions\n- Yubico's official docs, including a list of supported module parameters.\n- Man Pages: pam_u2f(8), pamu2fcfg(1)\n\n- pam_oath\n\n- Yubico's official docs[dead link 2025-03-15 ⓘ]\n- pam_yubico(8) - Take note of the mode parameter, used to set challenge-response mode.\n\nPAM configuration is beyond the scope of this article, but for a brief overview:\n\n- Create file(s) containing authorized keys, either in users' home directories or centrally.\n- Add a line in the appropriate place in the appropriate PAM configuration file which follows this format:\n\n```\nauth [required|sufficient] [module_name].so [module arguments]\n```\n\n- auth required for multifactor, auth sufficient for single factor.\n- module_name - Example: pam_u2f.so. See a list of installed modules: ls /usr/lib/security\n- Module configuration arguments are for things like the location of the keyfile, or which method the module should use for authentication.\n\n"
    },
    {
      "title": "SSH notes",
      "level": 4,
      "content": "- Yubico has provided additional guidance[dead link 2025-03-15 ⓘ]. It is written for an old version of Ubuntu, but much of it still applies to an updated Arch system.\n- If you are configuring a distant server to use YubiKey, you should open at least one additional, rescue SSH session, so that you are not locked out if the configuration fails.\n- Check that /etc/ssh/sshd_config contains the following settings. The sshd_config shipped with openssh has these set correctly by default.\n\n```\nChallengeResponseAuthentication no\n   UsePAM yes\n```\n\n"
    },
    {
      "title": "Browser/web integration",
      "level": 3,
      "content": "Many web services are beginning to support FIDO hardware tokens. See the U2F and WebAuthn pages for more information, but usually the only thing you need to do is to install libfido2 and try it.\n\n"
    },
    {
      "title": "Executing actions on insertion/removal of YubiKey device",
      "level": 3,
      "content": "For example, you want to perform an action when you pull your YubiKey out of the USB slot, create /etc/udev/rules.d/80-yubikey-actions.rules and add the following contents:\n\n```\nACTION==\"remove\", ENV{ID_VENDOR}==\"Yubico\", ENV{ID_VENDOR_ID}==\"1050\", ENV{ID_MODEL_ID}==\"0010|0111|0112|0113|0114|0115|0116|0401|0402|0403|0404|0405|0406|0407|0410\", RUN+=\"/usr/local/bin/script args\"\n```\n\nPlease note, most keys are covered within this example but it may not work for all versions of YubiKey. You will have to look at the output of lsusb to get the vendor and model ID's, along with the description of the device or you could use udevadm to get information. Of course, to execute a script on insertion, you would change the action to 'add' instead of remove.\n\n"
    },
    {
      "title": "Start Yubico Authenticator on insertion",
      "level": 3,
      "content": "The authenticator is a long-running GUI process. If run directly in a udev rule, the process would block udev's processing. If forked, udev would unconditionally kill the process after the event handling finishes. Thus you cannot start the authenticator from udev rules. However, systemd.device may be used to handle this case.\n\nSimilar to above, create /etc/udev/rules.d/80-yubikey-actions.rules and add the following contents:\n\n```\nENV{ID_VENDOR}==\"Yubico\", ENV{ID_VENDOR_ID}==\"1050\", ENV{ID_MODEL_ID}==\"0010|0111|0112|0113|0114|0115|0116|0401|0402|0403|0404|0405|0406|0407|0410\", SYMLINK+=\"yubikey\", TAG+=\"systemd\"\n```\n\nThen create a new systemd user unit:\n\n```\n~/.config/systemd/user/yubioath-desktop.service\n```\n\n```\n[Unit]\nDescription=Autostart Yubico Authenticator\n# Uncomment if you want to stop the authenticator when unplugged.\n#StopPropagatedFrom=dev-yubikey.device\n\n[Install]\nWantedBy=dev-yubikey.device\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/yubioath-desktop\n```\n\nand enable it. systemctl would warn that it is added as a dependency to a non-existent unit dev-yubikey.device. But it is okay. Such unit will start existing once the YubiKey is plugged in.\n\n"
    },
    {
      "title": "Installing the OATH Applet for a YubiKey NEO",
      "level": 3,
      "content": "These steps will allow you to install the OATH applet onto your YubiKey NEO. This allows the use of Yubico Authenticator in the Google Play Store.\n\n"
    },
    {
      "title": "Configure the NEO as a CCID device",
      "level": 4,
      "content": "1. Install yubikey-personalization-gui (yubikey-personalization-gui-gitAUR).\n1. Add the udev rules and reboot so you can manage the YubiKey without needing to be root\n1. Run ykpersonalize -m82, enter y, and hit enter.\n\n"
    },
    {
      "title": "Install the applet",
      "level": 4,
      "content": "1. Install gpshellAUR, gppcscconnectionpluginAUR, globalplatformAUR, and pcsclite.\n1. Start pcscd.service.\n1. Download the most recent CAP file from the ykneo-oath site.\n1. Download gpinstall.txt from GitHub.\n1. Edit the line in gpinstall.txt beginning with install -file to reflect the path where the CAP file is located.\n1. Open a terminal and run gpshell path/to/gpinstall.txt.\n1. Ideally, a bunch of text will scroll by and it ends saying something likeCommand --> 80E88013D7C000C400BE00C700CA00CA00B400BE00CE00D200D500D700B000DB00C700DF00BEFFFF00BE00E400AC00AE00AE00DB00E700A A00EA00ED00ED00ED00BE00EF00F100F400F100F700FA00FF00BE00F700AA01010103010700CA00C400B400AA00F700B400AA00B600C7010C 010C00AA0140012001B0056810B0013005600000056810E0011006B4B44304B44404B44106B44B4405B443400343B002410636810E06B4B44 407326810B004B43103441003334002B102B404B3B403BB4003B440076820A4100221024405B4341008B44600000231066820A100 Wrapped command --> 84E88013DFC000C400BE00C700CA00CA00B400BE00CE00D200D500D700B000DB00C700DF00BEFFFF00BE00E400AC00AE00AE00DB00E700A A00EA00ED00ED00ED00BE00EF00F100F400F100F700FA00FF00BE00F700AA01010103010700CA00C400B400AA00F700B400AA00B600C7010C 010C00AA0140012001B0056810B0013005600000056810E0011006B4B44304B44404B44106B44B4405B443400343B002410636810E06B4B44 407326810B004B43103441003334002B102B404B3B403BB4003B440076820A4100221024405B4341008B44600000231066820A15D848CB77 27D0EDA00 Response <-- 009000 Command --> 80E60C002107A000000527210108A00000052721010108A000000527210101010003C901000000 Wrapped command --> 84E60C002907A000000527210108A00000052721010108A000000527210101010003C9010000B4648127914A4C7C00 Response <-- 009000 card_disconnect release_context\n1. Unplug the NEO and try it with the Yubico Authenticator app.\n\n```\nCommand --> 80E88013D7C000C400BE00C700CA00CA00B400BE00CE00D200D500D700B000DB00C700DF00BEFFFF00BE00E400AC00AE00AE00DB00E700A\nA00EA00ED00ED00ED00BE00EF00F100F400F100F700FA00FF00BE00F700AA01010103010700CA00C400B400AA00F700B400AA00B600C7010C\n010C00AA0140012001B0056810B0013005600000056810E0011006B4B44304B44404B44106B44B4405B443400343B002410636810E06B4B44\n407326810B004B43103441003334002B102B404B3B403BB4003B440076820A4100221024405B4341008B44600000231066820A100\nWrapped command --> 84E88013DFC000C400BE00C700CA00CA00B400BE00CE00D200D500D700B000DB00C700DF00BEFFFF00BE00E400AC00AE00AE00DB00E700A\nA00EA00ED00ED00ED00BE00EF00F100F400F100F700FA00FF00BE00F700AA01010103010700CA00C400B400AA00F700B400AA00B600C7010C\n010C00AA0140012001B0056810B0013005600000056810E0011006B4B44304B44404B44106B44B4405B443400343B002410636810E06B4B44\n407326810B004B43103441003334002B102B404B3B403BB4003B440076820A4100221024405B4341008B44600000231066820A15D848CB77\n27D0EDA00\nResponse <-- 009000\nCommand --> 80E60C002107A000000527210108A00000052721010108A000000527210101010003C901000000\nWrapped command --> 84E60C002907A000000527210108A00000052721010108A000000527210101010003C9010000B4648127914A4C7C00\nResponse <-- 009000\ncard_disconnect\nrelease_context\n```\n\n"
    },
    {
      "title": "(Optional) Install the Yubico Authenticator desktop client",
      "level": 4,
      "content": "You can get the desktop version of the Yubico Authenticator by installing yubioath-desktopAUR.\n\nWhile pcscd.service is running, run yubioath-desktop and insert your YubiKey when prompted.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "Restart, especially if you have completed updates since your YubiKey last worked. Do this even if some functions appear to be functioning.\n\n"
    },
    {
      "title": "YubiKey not acting as HID device",
      "level": 3,
      "content": "Add udev rule as described in this article:\n\n```\n/etc/udev/rules.d/10-security-key.rules\n```\n\n```\nKERNEL==\"hidraw*\", SUBSYSTEM==\"hidraw\", MODE=\"0664\", GROUP=\"users\", ATTRS{idVendor}==\"2581\", ATTRS{idProduct}==\"f1d0\"\n```\n\nRun udevadm trigger afterwards.\n\n"
    },
    {
      "title": "ykman fails to connect to the YubiKey",
      "level": 3,
      "content": "If the manager fails to connect to the YubiKey, make sure you have started pcscd.service or pcscd.socket.\n\n"
    },
    {
      "title": "Error: Failed connecting to YubiKey 5 [OTP+FIDO+CCID]. Make sure the application have the required permissions.",
      "level": 3,
      "content": "This can occur when using ykman to access the oath credentials on the device if scdaemon has already taken exclusive control of the device. [3]\n\nTo fix this you can set the reader-port option with the correct value for your device in ~/.gnupg/scdaemon.conf. [4]\n\nFor YubiKey NEO and YubiKey 4:\n\n```\nreader-port Yubico Yubikey\n```\n\nor for YubiKey 5:\n\n```\nreader-port Yubico Yubi\n```\n\n"
    },
    {
      "title": "YubiKey fails to bind within a guest VM",
      "level": 3,
      "content": "Assuming the YubiKey is available to the guest, the issue results from a driver binding to the device on the host. To unbind the device, the bus and port information is needed from dmesg on the host:\n\n```\n# dmesg | grep -B1 Yubico | tail -n 2 | head -n 1 | sed -E 's/^\\[[^]]+\\] usb ([^:]*):.*/\\1/'\n```\n\nThe resulting USB id should be of the form X-Y.Z or X-Y. Then, on the host, use find to search /sys/bus/usb/drivers for which driver the YubiKey is binded to (e.g. usbhid or usbfs).\n\n```\n$ find /sys/bus/usb/drivers -name \"*X-Y.Z*\"\n```\n\nTo unbind the device, use the result from the previous command (i.e. /sys/bus/usb/drivers/DRIVER/X-Y.Z:1.0):\n\n```\n# echo 'X-Y.Z:1.0' > /sys/bus/usb/drivers/DRIVER/unbind\n```\n\n"
    },
    {
      "title": "Error: [key] could not be locally signed or gpg: No default secret key: No public key",
      "level": 3,
      "content": "Occurs when attempting to sign keys on a non-standard keyring while a YubiKey is plugged in, e.g. as Pacman does in pacman-key --populate. The solution is to remove the offending YubiKey and start over.\n\n"
    },
    {
      "title": "YubiKey disappears and reappears in Yubico Authenticator",
      "level": 3,
      "content": "This happens when the CCID driver is not installed. You may need to install the ccid package.\n\n"
    },
    {
      "title": "YubiKey core error: timeout",
      "level": 3,
      "content": "You are probably using the wrong slot. Try the other one.\n\n"
    },
    {
      "title": "gpg: no such device",
      "level": 3,
      "content": "Because gpg(scdaemon) tries to acquire exclusive access to the yubikey. It needs to be configured to use pscs and use shared access.[5][6]\n\nYour file ~/.gnupg/scdaemon.conf should contain:\n\n```\ndisable-ccid\npcsc-shared\n```\n\nFor old versions of GnuPG, the pcsc-shared option is not available. Only keep disable-ccid and restart pcscd.service as a workaround.\n\n"
    }
  ]
}