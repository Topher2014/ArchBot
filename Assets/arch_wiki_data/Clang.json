{
  "title": "Clang",
  "url": "https://wiki.archlinux.org/title/Clang",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Clang is a C/C++/Objective C/CUDA compiler based on LLVM. The most recent iteration is distributed under the \"Apache 2.0 License with LLVM exceptions\".\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the clang package. Alternatively, install llvm-gitAUR or clang-minimal-gitAUR from the Arch User Repository.\n\n"
    },
    {
      "title": "Build packages with Clang",
      "level": 2,
      "content": "Note: **This article or section is a candidate for merging with makepkg.** This article or section is a candidate for merging with makepkg.\n\nThis article or section is a candidate for merging with makepkg.\n\n"
    },
    {
      "title": "Generic setup",
      "level": 3,
      "content": "To change the default compiler for building packages, edit:\n\n```\n/etc/makepkg.conf\n```\n\n```\n...\nexport CC=clang\nexport CXX=clang++\n```\n\nTo use libc++ as the C++ Standard Library instead of GCC's libstdc++: install the libc++ package, then add -stdlib=libc++ to CXXFLAGS in your /etc/makepkg.conf.\n\nFor LTO support: install the lld package, then add -fuse-ld=lld to LDFLAGS in your /etc/makepkg.conf.\n\nIf you are building with debug, you also need to remove -fvar-tracking-assignments from DEBUG_CFLAGS and DEBUG_CXXFLAGS, as Clang does not support it.\n\n"
    },
    {
      "title": "Qt packages",
      "level": 3,
      "content": "Qt packages may require extra setup. Qt has predefined build configurations called \"mkspecs\", defaulting to GCC for Linux.\n\nIn some cases, mkspec will be automatically set to linux-clang based on CC/CXX variables. But in other cases (e.g. packages with direct call of qmake) it will not, so we can set it explicitly:\n\n```\n/etc/makepkg.conf\n```\n\n```\nexport QMAKESPEC=linux-clang\n```\n\n"
    },
    {
      "title": "Rust packages",
      "level": 3,
      "content": "Whenever clang is set as the system default compiler, Rust needs to be configured to use clang as the linker for C code often compiled as a part of the process for building Rust applications.\n\nTo do so, clang (and optionally lld) needs to be specified in /etc/makepkg.conf.d/rust.conf.\n\nFor example, to use clang and lld:\n\n```\n/etc/makepkg.conf.d/rust.conf\n```\n\n```\nRUSTFLAGS=\"-Cforce-frame-pointers=yes -Clinker=clang -Clink-arg=-fuse-ld=lld\"\n```\n\n"
    },
    {
      "title": "Using the Static Analyzer",
      "level": 2,
      "content": "To analyze a project, simply place the word scan-build in front of your build command. For example:\n\n```\n$ scan-build make\n```\n\nIf your project is already compiled, scan-build will not rebuild and will not analyse it. To force recompilation and analysis, use -B switch:\n\n```\n$ scan-build make -B\n```\n\nIt is also possible to analyze specific files:\n\n```\n$ scan-build gcc -c t1.c t2.c\n```\n\n"
    },
    {
      "title": "Tips and tricks",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\n"
    },
    {
      "title": "Bash completion",
      "level": 3,
      "content": "In order to enable Bash completion, install bash-completion and source /usr/share/clang/bash-autocomplete.sh in a Bash startup file.\n\n"
    },
    {
      "title": "Stack protector",
      "level": 3,
      "content": "The clang package enables -fstack-protector-strong on default. This practice should not cause any problem for compiling most programs and improve the overall security and robustness with a minimal cost. However, there are situations where the stack protector canary is uninitialized in TLS (for example, when you are implementing the _start function on yourself). In such cases, compiling with -fstack-protector-strong may lead to segmentation faults or other unexpected errors. One should be aware of the divergence between the clang package and upstream.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:Clang\n- scan-build: running the analyzer from the command line\n- Compiling CUDA with clang\n\n"
    }
  ]
}