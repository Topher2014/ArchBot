{
  "title": "Wdm",
  "url": "https://wiki.archlinux.org/title/Wdm",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Start X at login\n\nA display manager, or login manager, is typically a graphical user interface that is displayed at the end of the boot process in place of the default shell. There are various implementations of display managers, just as there are various types of window managers and desktop environments. There is usually a certain amount of customization and themeability available with each one.\n\n"
    },
    {
      "title": "Console",
      "level": 3,
      "content": "- CDM — Login manager written in Bash.\n\n- Console TDM — Extension for xinit written in pure Bash.\n\n- emptty — Simple CLI Display Manager on TTY with X and Wayland support.\n\n- Lemurs — TUI display manager for Linux, written in Rust. Supports X, Wayland and TTY shell sessions.\n\n- lidm — A fully colorful customizable TUI display manager made in C\n\n- loginx — A getty/login/xinit combination with a friendly curses ui.\n\n- Ly — TUI (ncurses-like) display manager for Linux and BSD. Supports X and Wayland sessions.\n\n- nodm — Display manager for automatic logins. Discontinued since 2017.\n\n- tbsm — A Bash session or application launcher. Supports X and Wayland sessions.\n\n"
    },
    {
      "title": "Graphical",
      "level": 3,
      "content": "- Entrance — Enlightenment display manager. Highly experimental, and does not have proper systemd support. No longer in development.\n\n- GDM — GNOME display manager.\n\n- LightDM — Cross-desktop display manager, can use various front-ends written in any toolkit.\n\n- LXDM — LXDE display manager. Can be used independent of the LXDE desktop environment.\n\n- SDDM — QML-based display manager and successor to KDM; recommended for Plasma and LXQt.\n\n- SLiM — Lightweight and elegant graphical login solution. Discontinued since 2013, not fully compatible with systemd.\n\n- XDM — X display manager with support for XDMCP, host chooser.\n\n"
    },
    {
      "title": "Login daemons",
      "level": 3,
      "content": "- greetd — Login daemon which supports both console and graphical greeters.\n\n"
    },
    {
      "title": "Loading the display manager",
      "level": 2,
      "content": "To enable graphical login, enable the appropriate systemd service. For example, for SDDM, enable sddm.service.\n\nThis should work out of the box. If not, you might have to reset a custom default.target symlink to point to the default graphical.target. See systemd#Change default target to boot into.\n\nAfter enabling SDDM a symlink display-manager.service should be set in /etc/systemd/system/. You may need to use --force to override old symlinks.\n\n```\n$ file /etc/systemd/system/display-manager.service\n```\n\n```\n/etc/systemd/system/display-manager.service: symbolic link to /usr/lib/systemd/system/sddm.service\n```\n\n"
    },
    {
      "title": "Using systemd-logind",
      "level": 3,
      "content": "In order to check the status of your user session, you can use loginctl. All polkit actions like suspending the system or mounting external drives will work out of the box.\n\n```\n$ loginctl show-session $XDG_SESSION_ID\n```\n\n"
    },
    {
      "title": "Session configuration",
      "level": 2,
      "content": "Many display managers read available sessions from /usr/share/xsessions/ directory. It contains standard desktop entry files for each desktop environment or window manager. Some display managers use a separate /usr/share/wayland-sessions/ to list Wayland-specific sessions.\n\nTo add/remove entries to your display manager's session list, create/remove the .desktop files in /usr/share/xsessions/ as desired. A typical .desktop file will look something like:\n\n```\n[Desktop Entry]\nName=Openbox\nComment=Log in using the Openbox window manager (without a session manager)\nExec=/usr/bin/openbox-session\nTryExec=/usr/bin/openbox-session\nIcon=openbox.png\nType=Application\n```\n\n"
    },
    {
      "title": "Run ~/.xinitrc as a session",
      "level": 3,
      "content": "Installing xinit-xsessionAUR will provide an option to run your xinitrc as a session. Simply set xinitrc as the session in your display manager's settings and make sure that the ~/.xinitrc file is executable.\n\n"
    },
    {
      "title": "Starting applications without a window manager",
      "level": 3,
      "content": "You can also launch an application without any decoration, desktop, or window management. For example to launch google-chromeAUR create a web-browser.desktop file in /usr/share/xsessions/ like this:\n\n```\n[Desktop Entry]\nName=Web Browser\nComment=Use a web browser as your session\nExec=/usr/bin/google-chrome --auto-launch-at-startup\nTryExec=/usr/bin/google-chrome --auto-launch-at-startup\nIcon=google-chrome\nType=Application\n```\n\nIn this case, once you login, the application set with Exec will be launched immediately. When you close the application, you will be taken back to the login manager (same as logging out of a normal desktop environment or window manager).\n\nIt is important to remember that most graphical applications are not intended to be launched this way and you might have manual tweaking to do or limitations to live with (there is no window manager, so do not expect to be able to move or resize any windows, including dialogs; nonetheless, you might be able to set the window geometry in the application's configuration files).\n\nSee also xinitrc#Starting applications without a window manager.\n\n"
    },
    {
      "title": "Autostarting",
      "level": 3,
      "content": "Most display managers source /etc/xprofile, ~/.xprofile and /etc/X11/xinit/xinitrc.d/. For more details, see xprofile.\n\n"
    },
    {
      "title": "Set language for user session",
      "level": 3,
      "content": "For display managers that use AccountsService the locale for the user session can be set by editing:\n\n```\n/var/lib/AccountsService/users/$USER\n```\n\n```\n[User]\nLanguage=your_locale\n```\n\nwhere your_locale is a value such as en_GB.UTF-8.\n\nAlternatively, you can achieve this using D-Bus: busctl call org.freedesktop.Accounts /org/freedesktop/Accounts/User$UID org.freedesktop.Accounts.User SetLanguage s your_locale\n\nLog out and then back in again for the changes to take effect.\n\n"
    },
    {
      "title": "Unlock Gnome Keyring / KDE KWallet automatically on autologin with LUKS",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nSince systemd version 255, pam_systemd_loadkey can be used to unlock a GNOME/Kwallet keyring, if the user password matches the LUKS passphrase of the system. For this to work, you need to enable autologin in the display manager.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Login managers: An introduction - Discusses implementation of a login manager\n\n"
    }
  ]
}