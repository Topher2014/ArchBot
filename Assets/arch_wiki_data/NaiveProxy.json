{
  "title": "NaiveProxy",
  "url": "https://wiki.archlinux.org/title/NaiveProxy",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Trojan\n- Shadowsocks\n- V2Ray\n- WireGuard\n\nNa√ØveProxy is a cross-platform proxy that uses Chromium's network stack to camouflage traffic and provides strong censorship resistence and low detectablility when bypassing the Great Firewall of China. It can mitigate TLS fingerprint issues which lead to detection and survived large scale blocking of TLS-based censorship circumvention tools in China. It requires a naiveproxy client and requires a Caddy server with forwardproxy module to work.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install naiveproxyAUR and run naiveproxy config.json. Here is an example config file:\n\n```\nconfig.json\n```\n\n```\n{\n  \"listen\": \"socks://127.0.0.1:1080\",\n  \"proxy\": \"https://myUsername:myStrongPassword@my.domain\"\n}\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Naiveproxy cannot run without a caddy server with forwardproxy module. You can build it with xcaddy:\n\n```\n$ go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest\n$ ~/go/bin/xcaddy build --with github.com/caddyserver/forwardproxy@caddy2=github.com/klzgrad/forwardproxy@naive\n```\n\nThen, config caddy:\n\n```\n/etc/caddy/Caddyfile\n```\n\n```\n{\n  order forward_proxy before file_server\n}\n:443, my.domain:443 {\n  tls /etc/caddy/ssl.cer /etc/caddy/ssl.key\n  forward_proxy {\n    basic_auth myUsername myStrongPassword\n    hide_ip\n    hide_via\n    probe_resistance\n  }\n  file_server {\n    root /var/www/html\n  }\n}\n```\n\nNote that :443 must appear first for this Caddyfile to work. See Caddyfile docs for how to configure TLS certificates.\n\nThen start caddy server:\n\n```\n# setcap cap_net_bind_service=+ep ./caddy && ./caddy start\n```\n\nYou may also want to run caddy as a daemon.\n\n"
    }
  ]
}