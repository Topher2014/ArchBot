{
  "title": "Keyboard backlight",
  "url": "https://wiki.archlinux.org/title/Keyboard_backlight",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "There are two general categories of keyboard backlight brightness level control on laptops, depending on the specific hardware:\n\n- The backlight is fully handled by the laptop firmware and the operating system sees nothing happening (e.g. HP EliteBook 745 G4#Function keys),\n- The keybind has to be handled by the operating system, with two sub-categories: The firmware is not involved at all and the raw key sequences is left for the operating system to handle (e.g. what Toshiba Portege Z30-A#Keyboard backlight control describes) The keybind sends a specific XF86 keysym (like what is described in ASUS ROG STRIX G17 (2022)#Function keys).\n\n- The firmware is not involved at all and the raw key sequences is left for the operating system to handle (e.g. what Toshiba Portege Z30-A#Keyboard backlight control describes)\n- The keybind sends a specific XF86 keysym (like what is described in ASUS ROG STRIX G17 (2022)#Function keys).\n\nThis can be tested by installing either xev (from xorg-xev) or wev then pressing the backlight control hotkeys:\n\n- If you see an XF86 keysym, for example XF86KbdBrightnessUp, then you fall into the \"handled by the operating system via keysym\" category.\n- If you see a raw key sequence, for example key: serial: 4887; time: 8232514; key: 55; state: 1 (pressed) sym: v (118), utf8: 'v', then you fall into the \"handled by the operating system via raw sequence\" category.\n- If you see an nothing at all then you fall into the \"handled by firmware\" category.\n\nWhich category your laptop falls into will impact which method you use to control the backlight.\n\nA pure firmware controlled hotkey should always work and requires no configuration for daily usage. This scenario will complicate scripting as no event is exposed to build upon.\n\nIn contrast, either operating systemâ€“controlled scenario allows for easier scripting at the detriment of lacking backlight control outside of a running operating system.\n\n"
    },
    {
      "title": "Controlling the backlight",
      "level": 2,
      "content": "Even when the brightness is controlled by firmware, you can adjust the level programmatically. There are a variety ways to manage the brightness level and different helpers tools to accomplish this, such as brightnessctl or lightAUR.\n\n"
    },
    {
      "title": "sysfs",
      "level": 3,
      "content": "The sys pseudo-file system exposes an interface to the keyboard backlight. The current brightness level can be obtained by reading /sys/class/leds/vendor::kbd_backlight/brightness where vendor can is replaced depending on the manufacturer, e.g. tpacpi for Lenovo (ThinkPads), asus for ASUS or dell for Dell. For example to get the maximum brightness level:\n\n```\n$ cat /sys/class/leds/vendor::kbd_backlight/max_brightness\n```\n\nTo set the brightness to 1:\n\n```\n# echo 1 > /sys/class/leds/vendor::kbd_backlight/brightness\n```\n\nWhen using brightnessctl you can get a list of available brightness controls with brightnessctl --list, then to show the kbd backlight information:\n\n```\n$ brightnessctl --device='vendor::kbd_backlight' info\n```\n\nThis will show the absolute and relative current value and the maximum absolute value. To set a different value:\n\n```\n$ brightnessctl --device='vendor::kbd_backlight' set 1\n```\n\n"
    },
    {
      "title": "xset",
      "level": 3,
      "content": "Some keyboard manufacturers are not recognized by brightnessctl or lightAUR, but you can use xorg-xset to control its lights if you are running Xorg.\n\nThe first parameter led turns on the led, and -led turns it off, the NUMBER parameters accepts integers for 1 to 32 (each number corresponds to a led in you system, keyboards seem to generally be number 3), or 'on' and 'off' (on will turn ALL lights on, and off will turn ALL lights off).\n\nTo turn on the lights:\n\n```\n$ xset led NUMBER\n```\n\nTo turn off the lights:\n\n```\n$ xset -led NUMBER\n```\n\n"
    },
    {
      "title": "D-Bus",
      "level": 3,
      "content": "You can control your computer keyboard backlight via the D-Bus interface. The benefits of using it are that no modification to device files is required and it is vendor agnostic.\n\nThe following is an example implementation in Python, requiring upower and python-dbus to be installed. You can then map your keyboard shortcuts to run /usr/local/bin/kb-light.py + x and /usr/local/bin/kb-light.py - x to increase and decrease your keyboard backlight level by x amounts.\n\n- You should try with an x = 1 to determine the limits of the keyboard backlight levels.\n- Do not forget to make the script executable.\n\n```\n/usr/local/bin/kb-light.py\n```\n\n```\n#!/usr/bin/env python3\n\nimport dbus\nimport sys\n\ndef kb_light_set(delta):\n    bus = dbus.SystemBus()\n    kbd_backlight_proxy = bus.get_object('org.freedesktop.UPower', '/org/freedesktop/UPower/KbdBacklight')\n    kbd_backlight = dbus.Interface(kbd_backlight_proxy, 'org.freedesktop.UPower.KbdBacklight')\n\n    current = kbd_backlight.GetBrightness()\n    maximum = kbd_backlight.GetMaxBrightness()\n    new = max(0, min(current + delta, maximum))\n\n    if 0 <= new <= maximum:\n        current = new\n        kbd_backlight.SetBrightness(current)\n\n    # Return current backlight level percentage\n    return 100 * current / maximum\n\nif __name__ ==  '__main__':\n    if len(sys.argv) == 2 or len(sys.argv) == 3:\n        if sys.argv[1] == \"--up\" or sys.argv[1] == \"+\":\n            if len(sys.argv) == 3:\n                print(kb_light_set(int(sys.argv[2])))\n            else:\n                print(kb_light_set(17))\n        elif sys.argv[1] == \"--down\" or sys.argv[1] == \"-\":\n            if len(sys.argv) == 3:\n                print(kb_light_set(-int(sys.argv[2])))\n            else:\n                print(kb_light_set(-17))\n        else:\n            print(\"Unknown argument:\", sys.argv[1])\n    else:\n        print(\"Script takes one or two argument.\", len(sys.argv) - 1, \"arguments provided.\")\n```\n\nAlternatively with bash, one can get the current brightness with:\n\n```\n$ dbus-send --type=method_call --print-reply=literal --system --dest=\"org.freedesktop.UPower\" /org/freedesktop/UPower/KbdBacklight org.freedesktop.UPower.KbdBacklight.GetBrightness\n```\n\nTo set the brightness to a specific value:\n\n```\n$ dbus-send --system --type=method_call  --dest=\"org.freedesktop.UPower\" \"/org/freedesktop/UPower/KbdBacklight\" \"org.freedesktop.UPower.KbdBacklight.SetBrightness\" int32:value\n```\n\n"
    },
    {
      "title": "On GNOME",
      "level": 4,
      "content": "The following can be run from a terminal or mapped to keybindings\n\n```\n$ gdbus call --session --dest org.gnome.SettingsDaemon.Power --object-path /org/gnome/SettingsDaemon/Power --method org.gnome.SettingsDaemon.Power.Keyboard.StepUp\n$ gdbus call --session --dest org.gnome.SettingsDaemon.Power --object-path /org/gnome/SettingsDaemon/Power --method org.gnome.SettingsDaemon.Power.Keyboard.StepDown\n```\n\n"
    },
    {
      "title": "On MATE",
      "level": 4,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nIn case you use MATE environment you might get tired with repeated lighting keyboard backlight while logging in, unlocking screen or waking up dimmed display. Following setup prevent from automatic lighting up during any action. The only triggers remain plugging in the adapter and fresh boot. After that you can control keyboard backlight only via hotkeys (eg. ThinkPad Fn + spacebar).\n\nTo prevent automatic lighting up just edit file /usr/share/dbus-1/system.d/org.freedesktop.UPower.conf as follows (two occurrences of \"deny\"):\n\n```\n/usr/share/dbus-1/system.d/org.freedesktop.UPower.conf\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- -*- XML -*- -->\n\n<!DOCTYPE busconfig PUBLIC\n \"-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN\"\n \"http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd\">\n<busconfig>\n  <!-- Only root can own the service -->\n  <policy user=\"root\">\n    <allow own=\"org.freedesktop.UPower\"/>\n  </policy>\n  <policy context=\"default\">\n\n    <allow send_destination=\"org.freedesktop.UPower\"\n           send_interface=\"org.freedesktop.DBus.Introspectable\"/>\n\n    <allow send_destination=\"org.freedesktop.UPower\"\n           send_interface=\"org.freedesktop.DBus.Peer\"/>\n    <allow send_destination=\"org.freedesktop.UPower\"\n           send_interface=\"org.freedesktop.DBus.Properties\"/>\n    <allow send_destination=\"org.freedesktop.UPower.Device\"\n           send_interface=\"org.freedesktop.DBus.Properties\"/>\n    <deny  send_destination=\"org.freedesktop.UPower.KbdBacklight\"\n           send_interface=\"org.freedesktop.DBus.Properties\"/>\n    <allow send_destination=\"org.freedesktop.UPower.Wakeups\"\n           send_interface=\"org.freedesktop.DBus.Properties\"/>\n\n    <allow send_destination=\"org.freedesktop.UPower\"\n           send_interface=\"org.freedesktop.UPower\"/>\n    <allow send_destination=\"org.freedesktop.UPower\"\n           send_interface=\"org.freedesktop.UPower.Device\"/>\n    <deny  send_destination=\"org.freedesktop.UPower\"\n           send_interface=\"org.freedesktop.UPower.KbdBacklight\"/>\n    <allow send_destination=\"org.freedesktop.UPower\"\n\t   send_interface=\"org.freedesktop.UPower.Wakeups\"/>\n  </policy>\n</busconfig>\n```\n\n"
    },
    {
      "title": "Restore after sleep",
      "level": 3,
      "content": "On some laptops (e.g. Dell XPS 15) the backlight is always off after sleep. In order to restore the previous brightness level you can use the following service.\n\n```\n~/.config/systemd/system/keyboard-brightness.service\n```\n\n```\n[Unit]\nDescription=Set keyboard brightness after resume\nStopWhenUnneeded=yes\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nWorkingDirectory=/sys/class/leds/vendor::kbd_backlight/\nExecStart=bash -c \"cat brightness >> /var/tmp/kbd_brightness_current\"\nExecStop=bash -c \"sleep 3s && cat /var/tmp/kbd_brightness_current > brightness && rm /var/tmp/kbd_brightness_current\"\n\n[Install]\nWantedBy=sleep.target\n```\n\n"
    }
  ]
}