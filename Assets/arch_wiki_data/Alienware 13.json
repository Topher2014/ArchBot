{
  "title": "Alienware 13",
  "url": "https://wiki.archlinux.org/title/Alienware_13",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section does not follow the Laptop page guidelines.** This article or section does not follow the Laptop page guidelines.\n\nThis article or section does not follow the Laptop page guidelines.\n\nThis article documents configuration and troubleshooting specific to the Alienware 13 laptop.\n\nSee the Installation guide for general installation instructions.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Boot the computer and press F12 to access to the boot menu, from there we select the USB and boot from there.\n\nIf you get stuck into a nouveau loop or a black screen, change the kernel parameters with nomodeset.\n\n"
    },
    {
      "title": "Switching Windows from RAID to AHCI mode",
      "level": 3,
      "content": "The stock installation of Windows is in RAID mode which makes linux unable to see the NVMe disks. However once installed in RAID mode, Windows refuses to boot when the disk is in AHCI mode. You can however fix that by following those steps:\n\n1. Right-click the Windows Start Menu. Choose Command Prompt (Admin) If you don’t see Command Prompt listed, it’s because you have already been updated to a later version of Windows. If so, use this method instead to get to the Command Prompt: Click the Start Button and type cmd Right-click the result and select Run as administrator\n1. Type this command and press Enter: bcdedit /set {current} safeboot minimal If this command does not work for you, try bcdedit /set safeboot minimal\n1. Restart the computer and enter BIOS Setup (the key to press varies between systems).\n1. Change the SATA Operation mode to AHCI from either IDE or RAID (again, the language varies).\n1. Save changes and exit Setup and Windows will automatically boot to Safe Mode.\n1. Right-click the Windows Start Menu once more. Choose Command Prompt (Admin).\n1. Type this command and press ENTER: bcdedit /deletevalue {current} safeboot If you had to try the alternate command above, you will likely need to do so here also: bcdedit /deletevalue safeboot\n1. Reboot once more and Windows will automatically start with AHCI drivers enabled.\n\n- If you don’t see Command Prompt listed, it’s because you have already been updated to a later version of Windows. If so, use this method instead to get to the Command Prompt: Click the Start Button and type cmd Right-click the result and select Run as administrator\n\n1. Click the Start Button and type cmd\n1. Right-click the result and select Run as administrator\n\n- If this command does not work for you, try bcdedit /set safeboot minimal\n\n- If you had to try the alternate command above, you will likely need to do so here also: bcdedit /deletevalue safeboot\n\nSource: [1]\n\n"
    },
    {
      "title": "Touchpad",
      "level": 2,
      "content": "If the touchpad does not work, try to unload the i2c_hid module:\n\n```\n# modprobe -r i2c_hid\n```\n\nand restart the graphical environment. If that helps, consider blacklisting the module.\n\n"
    },
    {
      "title": "Wireless",
      "level": 2,
      "content": "The WiFi network of the Alienware 13 is a Atheros Qualcomm Killer N1525, which is not configured by the default installation. See the ubuntu bug.\n\nFortunately, the following patch is able to get it to work. It was tested on Kernel 4.2.5-1 as follows:\n\n```\n$ git clone https://github.com/sumdog/ath10k-firmware\n# cp -a ath10k-firmware/ath10k/QCA6174 /lib/firmware/ath10k/QCA6174\n# echo \"options ath10k_core skip_otp=y\" | tee -a /etc/modprobe.d/ath10k.conf\n```\n\nAfter a reboot, wireless should work, including WiFi AC speeds.\n\nFor Alienware 13 R3, the WiFi works out of the box. The following kernel error seems to be harmless.\n\n```\nath10k_pci 0000:3d:00.0: could not fetch firmware file 'ath10k/QCA6174/hw3.0/firmware-5.bin': -2\n```\n\n"
    },
    {
      "title": "R1 freezes on suspend/hibernate",
      "level": 3,
      "content": "Due to firmware crashes with the ath10 WiFi driver on R1 you may encounter system freezes upon suspend/hibernate. A workaround would be to unload the ath10 module before going down and load it back upon wake up. Create and make executable:\n\n```\n/usr/lib/systemd/system-sleep/suspend.sh\n```\n\n```\n#!/bin/bash\nif [ \"${1}\" == \"pre\" ]; then\n   rmmod ath10k_pci ath10k_core\n   sleep 1\nelif [ \"${1}\" == \"post\" ]; then\n   modprobe ath10k_pci\nfi\n```\n\nDo not forget to do a daemon-reload after that.\n\nNote that the nouveau driver also can be the source of problems with suspend, so if the above does not help, try to either blacklist it or install the non-free NVIDIA driver to replace it.\n\n"
    },
    {
      "title": "Graphics",
      "level": 2,
      "content": "The Kaby Lake R3 suffers from a X lockup when either trying to start X or running lspci when the discrete GPU is off. There are kernel bug and bumblebee bug open to track this issue. In the meantime you can add the following to your kernel commandline at boot: acpi_osi=! acpi_osi=\"Windows 2009\"\n\nR3 has support for Windows 2012, 2013, 2015. When using 2009, reboot is not available. 2015 works fine and also enables ACPI reboot.\n\nTo have switchable graphics see bumblebee instructions. The utility is able to turn on and off the dedicated graphics card on demand and without having to restart the computer or reopening session.\n\nIt is to be noted that some Alienware laptop (Alienware 13 R3) shows an lspci hang issue where lspci/startx/etc… hangs and freeze the system when probing inactive discrete NVIDIA GPU.\n\n"
    },
    {
      "title": "Intel powersaving options",
      "level": 3,
      "content": "In order to get the most out of your battery life it is recommended to use the following additional powersaving options:\n\n```\n/etc/modprobe.d/i915.conf\n```\n\n```\noptions i915 enable_fbc=1 enable_guc_loading=1 enable_guc_submission=1 enable_psr=1\n```\n\nRefer to Dell XPS 13 (9360)#Power saving for additional information on each of them.\n\n"
    },
    {
      "title": "OLED screen brightness",
      "level": 3,
      "content": "With Gnome, the brightness control keys toggles the on-screen display, but it does not change the brightness level. The screen blanking feature also does not work. The following command can be used to set the brightness to 50%.\n\n```\n$ xrandr --output eDP1 --brightness .5\n```\n\nUntil brightness control is supported by the kernel, we can use the following script to read off the brightness values from sysfs and apply xrandr brightness reduction to it:\n\n```\n/usr/local/bin/xbacklightmon\n```\n\n```\n#!/bin/sh\n\npath=/sys/class/backlight/acpi_video0\n\nluminance() {\n    read -r level < \"$path\"/actual_brightness\n    factor=$((max))\n    new_brightness=\"$(bc -l <<< \"scale = 2; $level / $factor\")\"\n    printf '%f\\n' $new_brightness\n}\n\nread -r max < \"$path\"/max_brightness\n\nxrandr --output eDP-1 --brightness \"$(luminance)\"\n\ninotifywait -me modify --format '' \"$path\"/actual_brightness | while read; do\n    xrandr --output eDP-1 --brightness \"$(luminance)\"\ndone\n```\n\nMake it executable and add it to autostart and you are set. We use inotifywait to know when the value is modified so we do not busy wait but are still responsive.\n\n"
    },
    {
      "title": "OLED screen does not light up after resume",
      "level": 3,
      "content": "Sometimes when you sleep the computer and resume it, the OLED screen will flicker but not actually light up again. To fix this use the following xrandr command:\n\n```\n/usr/local/bin/resmon\n```\n\n```\n#!/bin/sh\nxrandr -d :0.0 --output eDP-1 --off && xrandr -d :0.0 --output eDP-1 --auto\n```\n\nThis is a script so that it can easily run it if the monitor is off after resume: you can add it to a keyboard shortcut, or use run command, whichever is easier.\n\n"
    },
    {
      "title": "HDMI/Mini-DP audio",
      "level": 2,
      "content": "The HDMI and the mini-DP are connected to the NVIDIA card, which means that in order for them to play audio you need to route it through the sound card attached to the NVIDIA device. However by default the GPU has its audio disabled for whatever reason. To enable it follow NVIDIA/Troubleshooting#No audio over HDMI\n\n"
    },
    {
      "title": "Keyboard lights",
      "level": 2,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nTo get access to the keyboard lights they can be controlling by sending data to the correct device (ID 187c:0527 Alienware Corporation)\n\nThere are plenty of programs like pyAlienFX or Alienware-KBL and none of these work, but the following GitHub project that consists on sending data to USB using libusb that worked fine.\n\n```\n$ git clone https://github.com/snooze6/hack-alienfx\n$ make all\n```\n\nIn case of a compilation error similar to \"FILE is not defined\", try adding:\n\n```\n/usr/include/readline/rltypedefs.h\n```\n\n```\n...\n#include <stdio.h>\n...\n```\n\nOnce it is compiled, test by running:\n\n```\n# ./run seq/snooze\n```\n\nand keyboard lights should work.\n\nTo register it as a command and can use this program without being root we can do the next:\n\n```\n# cp run /usr/local/bin/\n# mkdir /usr/local/fx\n# cp seq/* /usr/local/fx\n# chmod 4755 /bin/fx\n# cp lights.sh /usr/local/bin/lights\n# chmod +x /usr/local/bin/lights\n```\n\nNow it should trigger by executing:\n\n```\n$ lights\n$ lights on\n$ lights off\n```\n\nfrom a console.\n\nWe can simply add the commands to the energy admin or the startup to make keyboard lights change automatically.\n\nIf that does not work try alieneffects-13r3, specifically made for Alienware 13 R3 or alienfx.\n\n"
    }
  ]
}