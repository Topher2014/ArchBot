{
  "title": "Phrik",
  "url": "https://wiki.archlinux.org/title/Phrik",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "phrik is an IRC bot present in most Arch IRC channels. It is a Limnoria (formerly a supybot) with loads of handy factoids and utilities for things like quoting oft-repeated phrases, quickly giving people useful links and other janitorial tasks. Custom \"commands\", called factoids, can be edited or added once registered (not to be confused with NickServ registration.)\n\n"
    },
    {
      "title": "Registering",
      "level": 3,
      "content": "To make new or change already existing factoids you need to have a phrik account, which does not have to be named the same as your IRC nick.\n\n```\nregister name password\n```\n\nExample: register demize stuff to register an account named demize with the password stuff\n\n"
    },
    {
      "title": "Identifying",
      "level": 3,
      "content": "To identify with phrik for the current session, or until you unidentify, you need to run the following command:\n\n```\nidentify name password\n```\n\nExample: identify demize stuff\n\n"
    },
    {
      "title": "Identify with hostname",
      "level": 3,
      "content": "If you do not want to have to identify with phrik every time you connect you can add a hostmask to your phrik account which will make it identify you automatically every time you connect from that host. They are in the form of nick!ident@host.\n\nBe careful what hostmask you add though, since anyone connecting with that hostmask will be identified as you so you do not want to add the host from your ISP since that will likely change a lot. To be autoidentified with a hostmask you will want to either IRC from a server or have a cloak, otherwise the host will likely change a lot and thus others might get identified as you. If you are going to get identified with a host you might also want to run an ident server so that others connecting from the same server will not be able to fake being you.\n\nTwo good examples are demize!kyrias@theos.kyriasis.com or *!*@archlinux/op/demize.\n\n"
    },
    {
      "title": "Adding a new hostmask",
      "level": 4,
      "content": "To add a hostmask send the following command to phrik in private:\n\n```\nhostmask add hostmask\n```\n\nExample: !hostmask add demize!kyrias@theos.kyriasis.com\n\n"
    },
    {
      "title": "Removing a hostmask",
      "level": 4,
      "content": "```\nhostmask remove name hostmask\n```\n\n```\nhostmask remove demize demize!kyrias@theos.kyriasis.com\n```\n\n"
    },
    {
      "title": "Listing hostmasks",
      "level": 4,
      "content": "```\nhostmask list\n```\n\n"
    },
    {
      "title": "Factoids",
      "level": 2,
      "content": "phrik has the MoobotFactoids plugins, meaning users can create, recall and give others factoids, which are small messages.\n\nTo make phrik recall a factoid you can either send the key of the factoid prefixed with an exclamation mark either to a channel where it is in or in private, like this:\n\n```\n!welcome\n```\n\n"
    },
    {
      "title": "Searching factoids",
      "level": 3,
      "content": "To search existing factoids, you can use the listkeys and listvalues commands:\n\n```\n!listkeys welcome\n```\n\nor\n\n```\n!listvalues welcome\n```\n\n"
    },
    {
      "title": "Listing factoids by creator",
      "level": 3,
      "content": "Use !listauth to find all factoids a nick created. This is great when someone accidentally created a factoid since phrik does not return the name of the created factoid.\n\n```\n!listauth phrik\n```\n\n"
    },
    {
      "title": "Finding out info about factoids",
      "level": 3,
      "content": "If you want to find the creator and creation time of a factoid, you can use the factinfo command:\n\n```\n!factinfo welcome\n```\n\n"
    },
    {
      "title": "Creating new factoids",
      "level": 3,
      "content": "Creating a new factoid is as easy as typing the key you want the factoid to be recalled by, is and then the message. Often you want to prepend the message with <reply> so that phrik will just write the message exactly as you give it, instead of printing <key> is <value>.\n\nMaking a factoid like this:\n\n```\n!example is \"<reply>This is an example factoid\"\n```\n\nWill make phrik send This is an example factoid to the channel or pm whenever someone says !example in the channel. If the <reply> is omitted phrik will instead say example is This is an example factoid.\n\n"
    },
    {
      "title": "Factoid locking",
      "level": 3,
      "content": "Factoids can be locked to prevent other people from removing or overwriting a factoid, but there is generally no need for that as it is just in the way if there ends up being a good reason for the factoid being changed. Normally locking and unlocking would be done by calling the commands from the MoobotFactoids plugin, but !fact is aliased to !MoobotFactoids for convenience.\n\nIf a factoid you think should be changed is locked, firstly contact the person who locked it (!factinfo will tell you), and if the person is either unavailable or refuses to change it but you still think it should be, due to breaking the rules or similar, feel free to contact the ops. (To get a list of ops send !listops to phrik in a pm.)\n\n```\n!fact lock factoid_key\n```\n\nor\n\n```\n!fact unlock factoid_key\n```\n\n"
    },
    {
      "title": "Modifying factoids",
      "level": 3,
      "content": "For modifying a factoid there are two alternatives, the first is using a regex substitute and the second is replacing it completely. Regex replaces have the good property of keeping the original creator info and who last modified it.\n\n"
    },
    {
      "title": "Regex substitute",
      "level": 4,
      "content": "To replace the word \"This\" in the example factoid with the word \"That\" you can use regex replace like this:\n\n```\n!example =~ s/This/That/\n```\n\n"
    },
    {
      "title": "Replacing a factoid",
      "level": 4,
      "content": "Completely replacing a factoid with something new can be done with the no command like this:\n\n```\n!no example is \"<reply>a really bad example factoid\"\n```\n\n"
    },
    {
      "title": "Deleting factoids",
      "level": 3,
      "content": "Removing a factoid is done with !MoobotFactoids remove factoid_key, but since that is too long, there exists an alias for convenience called !rmfact. Do not delete others factoids without a good reason, and do ask first if you are unsure.\n\n```\n!rmfact factoid_key\n```\n\n"
    },
    {
      "title": "Quotes",
      "level": 2,
      "content": "phrik uses the QuoteGrabs plugin to provide an easy to use system for storing and retrieving things users say. You do not need to be identified with phrik to grab/retrieve quotes. All the QuoteGrabs commands can be listed using the command !list QuoteGrabs.\n\n(The channel argument does not seem to make any difference to the result of any of the commands listed below.)\n\n"
    },
    {
      "title": "Grab",
      "level": 3,
      "content": "The !grab nickname command is used to \"grab\" a quote. This means that the last thing nickname said will be stored in phrik's internal database. Example:\n\n```\n!grab Arch-TK\n```\n\n!grab is synonymous to !QuoteGrabs grab.\n\n"
    },
    {
      "title": "Quote",
      "level": 3,
      "content": "The !quote nickname command is used to view the last grabbed quote.\n\n!quote is synonymous to !QuoteGrabs quote, and so is !q\n\n"
    },
    {
      "title": "Random",
      "level": 3,
      "content": "The !QuoteGrabs random nickname command is used to view a random selection of quotes. Given a <nickname> the selection is narrowed to just one user.\n\nThe alias !rq can be used in place of !QuoteGrabs random and the alias !multirq gives a selection of 5 random quotes instead of just 1.\n\n"
    },
    {
      "title": "Search",
      "level": 3,
      "content": "The !QuoteGrabs search [channel] text command is used to search phrik's quote database for a quote containing a given string. This command does a literal search, this means that searching for \"Arch-TK broken\" will not return any search results unless that literal result is found. For example:\n\n```\n!QuoteGrabs search \"Arch-TK Windows\"\n```\n\nWill not return #35732: Windows ME, best windows..\n\nThe alias !qfind can be used in place of !QuoteGrabs search.\n\n"
    },
    {
      "title": "List",
      "level": 3,
      "content": "The !QuoteGrabs list [channel] nickname command is used to list all the quotes for a given user.\n\nThe alias !qlist can be used in place of !QuoteGrabs list.\n\n"
    },
    {
      "title": "Say",
      "level": 3,
      "content": "The !QuoteGrabs say [channel] id command is used to view the full quote text using an ID returned by the search and list functions.\n\nFor example:\n\n```\n!QuoteGrabs say 34656\n```\n\nWill return:\n\n```\n<sudokode> ew you might as well be using windows\n```\n\nThe alias !qsay can be used in place of !QuoteGrabs say.\n\n"
    },
    {
      "title": "Get",
      "level": 3,
      "content": "The !QuoteGrabs get [channel] id command is very similar to the Say command. It returns the full text of the quote along with additional information.\n\nFor example:\n\n```\n!QuoteGrabs get 34656\n```\n\nWill return:\n\n```\n<sudokode> ew you might as well be using windows (Said by: sudokode!~ponies@unaffiliated/sudokode; grabbed by quantum-mechanic!~neutrino@unaffiliated/electron/x-8286743 at 11:21 AM, November 12, 2014\n```\n\nThe alias !qget can be used in place of !QuoteGrabs get but does not permit using a channel argument.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Limnoria's documentation\n\n"
    }
  ]
}