{
  "title": "Uvesafb",
  "url": "https://wiki.archlinux.org/title/Uvesafb",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Kernel modules\n- Kernel parameters\n- sysctl\n\nNote: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nIn contrast with other framebuffer drivers, uvesafb needs a userspace virtualizing daemon, called v86dAUR. It may seem foolish to emulate x86 code on a x86, but this is important if one wants to use the framebuffer code on other architectures (notably non-x86 ones). It was added in kernel 2.6.24 and has many more features than the standard vesafb, including:\n\n1. Proper blanking and hardware suspension after delay\n1. Support for custom resolutions as in the system BIOS.\n\nIt should support as much hardware as vesafb.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the uvesafb-dkmsAUR package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Remove any framebuffer-related kernel parameter from the boot loader configuration to disable the old vesafb framebuffer from loading. The following commands should return no result:\n\n```\n$ grep vga /proc/cmdline\n$ grep -ir vga /etc/modprobe.d/\n```\n\nIf you do have a vga= option somewhere, you will need to remove it.\n\n"
    },
    {
      "title": "mkinitcpio hook",
      "level": 3,
      "content": "Add the v86d hook to HOOKS in /etc/mkinitcpio.conf. This allows uvesafb to take over at boot time.\n\n```\nHOOKS=(base udev v86d ...)\n```\n\n"
    },
    {
      "title": "Define a resolution",
      "level": 3,
      "content": "The settings for uvesafb are defined in /usr/lib/modprobe.d/uvesafb.conf.\n\nDocumentation for mode_option can be found at [1].\n\nTo prevent your customizations being overwritten when the package is updated, copy this file to /etc/modprobe.d/uvesafb.conf:\n\n```\n# cp /usr/lib/modprobe.d/uvesafb.conf /etc/modprobe.d/uvesafb.conf\n```\n\nand then make sure /etc/mkinitcpio.conf includes modconf in the HOOKS array.\n\nTo make changes take effect, regenerate the initramfs and reboot the system.\n\n"
    },
    {
      "title": "Optimizing resolution",
      "level": 3,
      "content": "A list of possible resolutions can be generated via the following command:\n\n```\n$ cat /sys/bus/platform/drivers/uvesafb/uvesafb.0/vbe_modes\n```\n\nUsers can then modify /usr/lib/modprobe.d/uvesafb.conf with any entry returned above.\n\n"
    },
    {
      "title": "Checking current resolution",
      "level": 3,
      "content": "Either of following commands can be used to show the current framebuffer resolution as a sanity check to see that settings are honored:\n\n```\n$ cat /sys/devices/virtual/graphics/fbcon/subsystem/fb0/virtual_size\n```\n\n```\n$ cat /sys/class/graphics/fb0/virtual_size\n```\n\n"
    },
    {
      "title": "Kernel module parameters",
      "level": 2,
      "content": "If you compile your own kernel then you can also compile uvesafb into the kernel and run v86d later. In this case, the options can be passed as kernel parameters in the format video=uvesafb:options.\n\n"
    },
    {
      "title": "Uvesafb cannot reserve memory",
      "level": 3,
      "content": "Check if you forgot to remove any vga= kernel parameter âˆ’ this overrides the UVESA framebuffer with a standard VESA one.\n\nTry to add video=vesa:off vga=normal to the kernel command line.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Uvesafb Kernel Page\n- Gentoos uvesafb Page\n- VESA mode numbers\n\n"
    }
  ]
}