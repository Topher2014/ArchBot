{
  "title": "Pacman-key",
  "url": "https://wiki.archlinux.org/title/Pacman-key",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- GnuPG\n- OpenPGP\n\nTo determine if packages are authentic, pacman uses OpenPGP keys in a web of trust model. The current Master Signing Keys are found here. At least three of these Master Signing Keys are used to sign the Developers' and Package Maintainers' own keys. They are then used to sign their packages. Each user also has a unique OpenPGP key, which is generated when you configure pacman-key(8). It is this web of trust that links the user's key to the master keys.\n\nExamples of webs of trust:\n\n- Custom packages: Packages made and signed with a local key.\n- Unofficial packages: Packages made and signed by a developer. Then, a local key was used to sign the developer's key.\n- Official packages: Packages made and signed by a developer. The developer's key was signed by the Arch Linux master keys. You used your key to sign the master keys, and you trust them to vouch for developers.\n\n"
    },
    {
      "title": "Configuring pacman",
      "level": 3,
      "content": "The SigLevel option in /etc/pacman.conf determines the level of trust required to install a package with pacman -S. For a detailed explanation of SigLevel, see pacman.conf(5) ยง PACKAGE AND DATABASE SIGNATURE CHECKING, and the file comments. One can set signature checking globally, or per repository. If SigLevel is set globally in the [options] section, all packages installed with pacman -S will require signing. With the LocalFileSigLevel setting from the default pacman.conf, any packages you build, and install with pacman -U, will not need to be signed using makepkg.\n\nFor remote packages, the default configuration will only support the installation of packages signed by trusted keys:\n\n```\n/etc/pacman.conf\n```\n\n```\nSigLevel = Required DatabaseOptional\n```\n\nTrustedOnly is a default compiled-in pacman parameter. The default configuration is identical to using the global option of:\n\n```\nSigLevel = Required DatabaseOptional TrustedOnly\n```\n\nThe above can be achieved too on a repository level further below in the configuration, e.g.:\n\n```\n[core]\nSigLevel = PackageRequired\nInclude = /etc/pacman.d/mirrorlist\n```\n\nexplicitly adds signature checking for the packages of the repository, but does not require the database to be signed. Optional here would turn off a global Required for this repository.\n\n"
    },
    {
      "title": "Initializing the keyring",
      "level": 3,
      "content": "To initialize the pacman keyring run:\n\n```\n# pacman-key --init\n```\n\n"
    },
    {
      "title": "Verifying the master keys",
      "level": 3,
      "content": "The initial setup of keys is achieved using:\n\n```\n# pacman-key --populate\n```\n\nTake time to verify the Master Signing Keys when prompted as these are used to co-sign (and therefore trust) all other packager's keys.\n\nOpenPGP keys are too large (2048 bits or more) for humans to work with, so they are usually hashed to create a 40-hex-digit fingerprint which can be used to check by hand that two keys are the same. The last eight digits of the fingerprint serve as a name for the key known as the '(short) key ID' (the last sixteen digits of the fingerprint would be the 'long key ID').\n\n"
    },
    {
      "title": "Adding developer keys",
      "level": 3,
      "content": "The official Developers' and Package Maintainers' keys are signed by the master keys, so you do not need to use pacman-key to sign them yourself. Whenever pacman encounters a key it does not recognize, it will prompt you to download it from a keyserver configured in /etc/pacman.d/gnupg/gpg.conf (or by using the --keyserver option on the command line). Wikipedia maintains a list of keyservers.\n\nOnce you have downloaded a developer key, you will not have to download it again, and it can be used to verify any other packages signed by that developer.\n\n"
    },
    {
      "title": "Adding unofficial keys",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nThis method can be utilized to add a key to the pacman keyring, or to enable signed unofficial user repositories.\n\nFirst, get the key ID (keyid) from its owner. Then add it to the keyring using one of the two methods:\n\n1. If the key is found on a keyserver, import it with: # pacman-key --recv-keys keyid\n1. If otherwise a link to a keyfile is provided, download it and then run: # pacman-key --add /path/to/downloaded/keyfile\n\n```\n# pacman-key --recv-keys keyid\n```\n\n```\n# pacman-key --add /path/to/downloaded/keyfile\n```\n\nIt is recommended to verify the fingerprint, as with any master key or any other key you are going to sign:\n\n```\n$ pacman-key --finger keyid\n```\n\nFinally, you must locally sign the imported key:\n\n```\n# pacman-key --lsign-key keyid\n```\n\nYou now trust this key to sign packages.\n\n"
    },
    {
      "title": "Debugging with gpg",
      "level": 3,
      "content": "For debugging purposes, you can access pacman's keyring directly with gpg, e.g.:\n\n```\n# gpg --homedir /etc/pacman.d/gnupg --list-keys\n```\n\n"
    },
    {
      "title": "Upgrade system regularly",
      "level": 3,
      "content": "Upgrading the system regularly via pacman#Upgrading packages prevents most signing errors. If delay is unavoidable and system upgrade gets delayed for an extended period, manually sync the package database and upgrade the archlinux-keyring package before system upgrade:\n\n```\n# pacman -Sy --needed archlinux-keyring && pacman -Su\n```\n\nThis command is not considered a partial upgrade since it syncs the package database and upgrades the keyring package first. Both must be processed just before starting system upgrade to ensure signatures of all upgraded packages can be properly verified.\n\n"
    },
    {
      "title": "Update system time regularly",
      "level": 3,
      "content": "When the system time is faulty, signing keys could be considered expired (or invalid) and signature checks on packages will fail. Synchronize the system clock regularly by using the Network Time Protocol daemon.\n\n"
    },
    {
      "title": "Invalid signature errors",
      "level": 3,
      "content": "pacman-key depends on system time. If your system clock is not synchronized, system installation/upgrade may fail with:\n\n```\nerror: PackageName: signature from \"User <email@archlinux.org>\" is invalid\nerror: failed to commit transaction (invalid or corrupted package (PGP signature))\nErrors occurred, no packages were upgraded.\n```\n\nIf using ntpd, correct the system time (as root) with ntpd -qg followed by hwclock -w.\n\nOther NTP clients can be used. See time synchronization.\n\nIf correction of the system clock does not resolve the failure, try one of the following approaches:\n\n"
    },
    {
      "title": "Removing packages from cache",
      "level": 4,
      "content": "Some packages could be corrupted or may be unsigned, causing failure. Remove each offending package from the system cache rm /var/cache/pacman/pkg/pkgname so it gets freshly downloaded, or clear the entire cache.\n\n"
    },
    {
      "title": "Resetting all the keys",
      "level": 4,
      "content": "Remove or reset all the keys installed in your system by removing the /etc/pacman.d/gnupg directory (as root) and by rerunning pacman-key --init followed by pacman-key --populate to re-add the default keys.\n\n"
    },
    {
      "title": "Disabling signature checking",
      "level": 4,
      "content": "If you are not concerned about package signing, you can disable OpenPGP signature checking completely. Edit /etc/pacman.conf to have the following lines under [options]:\n\n```\nSigLevel = Never\n#LocalFileSigLevel = Optional\n#RemoteFileSigLevel = Required\n```\n\nYou need to comment out any repository-specific SigLevel settings because they override the global settings. This will result in no signature checking, which was the behavior before pacman 4. If you do this, you do not need to set up a keyring with pacman-key. You can change those options later if you decide to enable package verification.\n\n"
    },
    {
      "title": "Cannot import keys",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThere are multiple possible sources of this problem:\n\n- An outdated archlinux-keyring package.\n- The clock being set to an incorrect date.\n- Your ISP blocked the port used to import OpenPGP keys.\n- Your pacman cache contains copies of unsigned packages from previous attempts.\n- dirmngr is not correctly configured.\n\nYou might be stuck because of an outdated archlinux-keyring package when doing an upgrade synchronization.\n\nBelow are a few solutions that could work depending on your case.\n\n"
    },
    {
      "title": "Upgrade the system",
      "level": 4,
      "content": "See if upgrading the system can fix it first.\n\n"
    },
    {
      "title": "Change keyserver",
      "level": 4,
      "content": "If you suspect that something is not working right with the keyserver, you could try to switch to the Ubuntu keyserver. To do this, edit /etc/pacman.d/gnupg/gpg.conf and change the keyserver line to:\n\n```\nkeyserver hkp://keyserver.ubuntu.com\n```\n\n"
    },
    {
      "title": "Clean cached packages",
      "level": 4,
      "content": "If you suspect that your pacman cache at /var/cache/pacman/pkg/ might contain unsigned packages, try cleaning the cache manually or run:\n\n```\n# pacman -Sc\n```\n\nwhich removes all cached packages that have not been installed.\n\n"
    },
    {
      "title": "Signature is unknown trust",
      "level": 3,
      "content": "Sometimes when running pacman -Syu you might encounter this error:\n\n```\nerror: package-name: signature from \"packager\" is unknown trust\n```\n\nThis occurs because the packager's key used in the package package-name is not present and/or not trusted in the local pacman-key gpg database. Pacman does not seem to always be able to check if the key was received and marked as trusted before continuing. This could also be because a key has expired since it was added to your keychain.\n\nMitigate by:\n\n- Manually upgrading the archlinux-keyring package prior to the system upgrade, or\n- refreshing your keys with pacman-key --refresh-keys, or\n- resetting all the keys, or\n- manually signing the untrusted key locally (not recommended), or\n- setting temporarily SigLevel to TrustAll (not recommended).\n\nThe last two options above break the chain of trust, and should be used with care.\n\n"
    },
    {
      "title": "Updating keys via proxy",
      "level": 3,
      "content": "In order to use a proxy when updating keys the honor-http-proxy option must be set in both /etc/gnupg/dirmngr.conf and /etc/pacman.d/gnupg/dirmngr.conf. See GnuPG#Use a keyserver for more information.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Pacman Package Signing โ 1: Makepkg and Repo-add\n- Pacman Package Signing โ 2: Pacman-key\n- Pacman Package Signing โ 3: Pacman\n- Pacman Package Signing โ 4: Arch Linux\n\n"
    }
  ]
}