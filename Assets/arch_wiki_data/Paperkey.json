{
  "title": "Paperkey",
  "url": "https://wiki.archlinux.org/title/Paperkey",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- GnuPG\n- OpenPGP\n\nPaperkey is a command line tool to export OpenPGP keys on paper. It reduces the size of the exported key, by removing the public key parts from the private key. Paperkey also includes CRC-24 checksums in the key to allow the user to check whether their private key has been restored correctly.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the paperkey package.\n\n"
    },
    {
      "title": "Backup",
      "level": 3,
      "content": "To create a backup of your GnuPG key, pipe the private key to paperkey:\n\n```\n$ gpg --export-secret-key key-id | paperkey --output secret-key-paper.asc\n```\n\n"
    },
    {
      "title": "Restore secret key",
      "level": 3,
      "content": "To restore the secret key you need to have a file with the paperkey data and the public key. Then run the following command to import the private key to ~/.gnupg:\n\n```\n$ paperkey --pubring public-key.gpg --secrets secret-key-paper.asc | gpg --import\n```\n\nAlternatively, restore the private key to a file:\n\n```\n$ paperkey --pubring public-key.gpg --secrets secret-key-paper.asc --output secret-key.gpg\n```\n\n"
    },
    {
      "title": "Error: unable to parse OpenPGP packets (is this armored data?)",
      "level": 4,
      "content": "If you receive this error while restoring your key, you need to dearmor your public key first:\n\n```\n$ gpg --dearmor public-key.asc\n```\n\n"
    },
    {
      "title": "Print secret key directly",
      "level": 3,
      "content": "If no --output argument is given, paperkey will print its output to stdout. It is possible to print the key directly without intermediate file, which might have security implications. To do so, install CUPS, and pipe to lpr:\n\n```\n$ gpg --export-secret-key key-id | paperkey | lpr\n```\n\n"
    },
    {
      "title": "Encode the secret key as QR Code",
      "level": 3,
      "content": "By default, paperkey will output the secret key as human readable text. While this format guarantees the ability to read and restore the printed information, it is not very convenient. The --output-type raw option tells paperkey to output the raw secret key data instead. This enables the use of other encodings, including machine-readable ones such as the QR code.\n\nThe qrencode program can be used for this:\n\n```\n$ gpg --export-secret-key key-id | paperkey --output-type raw | qrencode --8bit --output secret-key.qr.png\n```\n\nIt is possible to increase the error correction level to maximum with the --level H option. This provides a lost data restoration rate of about 30% at the cost of reduced capacity. Should the secret key not fit in the QR code, the lower Q and M error correction levels are also available and give restoration rates of about 25% and 15% respectively. The default error correction level is L which allows restoration of about 7% of lost data.\n\n"
    },
    {
      "title": "Restore the secret key from QR code",
      "level": 3,
      "content": "With zbar it is possible to restore the key using a camera:\n\n```\n$ zbarcam -1 --raw -Sbinary | paperkey --pubring public-key.gpg | gpg --import\n```\n\nThe same options can also be applied to zbarimg:\n\n```\n$ zbarimg -1 --raw -q -Sbinary secret-key.qr.png | paperkey --pubring public-key.gpg | gpg --import\n```\n\nIf you are using a scanned image, you might have to blur it by\n\n```\n$ convert secret-key.qr.png -blur 0 secret-key-blurred.qr.png\n```\n\n"
    }
  ]
}