{
  "title": "Gromacs",
  "url": "https://wiki.archlinux.org/title/Gromacs",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- List of applications/Science\n\nAccording to the official website, GROMACS is:\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the gromacsAUR package. Be sure to edit the PKGBUILD to suit your system (i.e. for MPI or GPU support). Some of the CMake options you may want to add/modify in the PKGBUILD are (cf.the latest GROMACS installation guide):\n\n- -DGMX_DOUBLE=ON - Add if you need double precision. According to the GROMACS install guide, double precision is \"slower, and not normally useful.\" If you set this flag, the default suffix for all GROMACS programs is set to _d.\n- -DGMX_GPU=value, where value is one of CUDA, OpenCL, SYCL, HIP - Add in order to build with GPGPU support. Several other flags may be necessary; refer to the latest GROMACS installation guide.\n- -DGMX_MPI=ON - Add to create a build able to run across multiple compute nodes. You will also need to have an MPI library such as openmpi or mpichAUR. If you do not need MPI support (i.e., you just run on a single computer), you do not need this flag. If you set this flag, the default suffix for all GROMACS programs is set to _mpi.\n- -DGMX_SIMD=xxx - GROMACS should detect the best SIMD instructions for your processor, so this flag should not be needed. But if you have some kind of compilation error, you can specify the SIMD level here. A list of available options for xxx is listed in the latest GROMACS installation guide.\n\n- -DGMX_X11=ON - Set to use gmx view, the built-in trajectory viewer. This flag requires the openmotif and libx11 packages.\n- -DREGRESSIONTEST_DOWNLOAD=ON - Set to test your GROMACS build. To run the tests set your build to run make check. The libxml2 package is required.\n- -DGMX_DEFAULT_SUFFIX=OFF - Set to turn of default suffix for GROMACS programs for MPI or double precision builds.\n- -DGMX_BINARY_SUFFIX=xxx and -DGMX_LIBS_SUFFIX=xxx - Set the default suffix to xxx for binaries and libraries, respectively.\n\nSome other packages that may increase performance are:\n\n- boost-libs - An external Boost library can be used to provide better implementation support for smart pointers and exception handling.\n- hwloc - Run-time detection of hardware capabilities can be improved by linking with hwloc\n- lapack - Hardware-optimized BLAS and LAPACK libraries are useful for a few of the GROMACS utilities focused on normal modes and matrix manipulation, but they do not provide any benefits for normal simulations.\n\nSince version 2019, GROMACS build is reproducible.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "By default the top-level force field directory is located at /usr/share/gromacs/top. This can be changed by setting a different directory to the GMXLIB environment variable. This is useful if you make modifications to a force field, or if you have another set of force fields you would like to use.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Below is a basic workflow with most of the major commands mentioned. Every command should begin with gmx. For more details on using GROMACS find a good tutorial and read the manual. A helpful flow chart is here.\n\n"
    },
    {
      "title": "Setup",
      "level": 3,
      "content": "Simulations require a structure file (.gro/.pdb), a topology file (.top), and a parameters file (.mdp). The following steps illustrate how to obtain these.\n\n"
    },
    {
      "title": "Obtain structure file",
      "level": 4,
      "content": "A structure file, which contains the coordinates of all particles, can be obtained from a protein database or created by the user using a program.\n\n"
    },
    {
      "title": "Generate a topology",
      "level": 4,
      "content": "A topology file indicates how atomic particles interact with one another. One method for generating a topology file is to use gmx pdb2gmx. If your solute is in a file named protein.pdb, do the following:\n\n```\n$ gmx pdb2gmx -f protein.pdb\n```\n\nThen you will be prompted to select a force field and water model. A new structure file in gro format will be generated (conf.gro) as well as the corresponding topology file (topol.top).\n\nIf you did not obtain your structure file from a protein database, but instead created it yourself, most likely you will need to create a residue template file (.rtp) for your molecule as well as update the .pdb file. An example .rtp file for OPLS methane is found here with its corresponding .pdb file here (both files are from James Barnett's tutorial). The .rtp file must be placed in the force field directory for the force field you are going to use.\n\nSee below for alternative ways to generate or obtain topologies.\n\n"
    },
    {
      "title": "Box creation",
      "level": 4,
      "content": "A quick way to create a simulation box full of water around a solute is to do:\n\n```\n$ gmx solvate -cp conf.gro -cs water -box X Y Z -o conf.gro -p topol.top\n```\n\nIn the above the solute/protein's coordinates are initially stored in conf.gro. A water model using water.gro (either found in the top-level force field directory or the current one) is used to fill the box with solvent, and the box dimensions are X, Y, and Z. The topology file, topol.top is updated and the new system is output to conf.gro.\n\nIf -cs is omitted, a three-point water model is used. The other available water structures are tip4p and tip5p.\n\nYou can also use different box types and non-water solvents.\n\n"
    },
    {
      "title": "Adding ions",
      "level": 4,
      "content": "If the system is not charge-neutral, ions should generally be added. For example if the net charge of your system is -2, to add two positive sodium ions do:\n\n```\n$ gmx grompp -f grompp.mdp\n$ gmx genion -s topol.tpr -np 2 -pname Na -o conf.gro -p topol.top\n```\n\nThen select the index group corresponding with the solvent, which will be replaced by the ions. The -nname argument should correspond to an ion in the force field you are using.\n\n"
    },
    {
      "title": "Parameter files",
      "level": 4,
      "content": "A parameters file should be created for each different step of a set of simulations (e.g., minimization, equilibration, production). A list of all possible options is here.\n\nHere is a sample parameter file for a ten second production run at standard conditions:\n\n```\ndt                       = 0.002\nnsteps                   = 5000000\n\nnstxout-compressed       = 2500\n\ncoulombtype              = PME\nrcoulomb                 = 1.0\n\nvdwtype                  = Cut-off\nrvdw                     = 1.0\nDispCorr                 = EnerPres\n\ntcoupl                   = Nose-Hoover\nnh-chain-length          = 1\ntc-grps                  = System\ntau-t                    = 2.0\nref-t                    = 298.15\n\npcoupl                   = Parrinello-Rahman \ntau_p                    = 2.0\ncompressibility          = 4.46e-5\nref_p                    = 1.0 \n\nconstraints              = h-bonds\ncontinuation             = yes\n```\n\n"
    },
    {
      "title": "Basics",
      "level": 4,
      "content": "Simulations typically consist of two parts, described below.\n\nFirst, there is a preprocessing step where the structure file, topology file, and parameters file are read in and written out to a single .tpr file, also sometimes referred to as a topology file:\n\n```\n$ gmx grompp -f grompp.mdp -c conf.gro -p topol.top -o topol.tpr\n```\n\nHere grompp.mdp is the parameters file for this simulation step, conf.gro is the structure file that begins this simulation step, and topol.top is the topology file. A structure file (.gro) is output at the end of every simulation, so it should be used with -c in a simulation that continues from the previous one (e.g., an initial equilibration run should use the structure file output from a previous minimization step).\n\nNext, there is the actual simulation. The .tpr file is read in with the main program gmx mdrun to run the simulation:\n\n```\n$ gmx mdrun -s topol.tpr\n```\n\nIn general these two parts are repeated for an energy minimization step, an equilibration step, and a production step. Multiple equilibration steps may be needed, especially when turning on pressure coupling. The production step and the last equilibration step should use the exact same parameters (.mdp) except for the length of the simulation.\n\nAs an example, a set of simulations consisting of one minimization step, one equilbration step, and one production step might look like this:\n\n```\n#!/bin/sh\n\ngmx grompp -f min.mdp -o min.tpr -c conf.gro -p topol.top\ngmx mdrun -deffnm min\n\ngmx grompp -f eql.mdp -o eql.tpr -c min.gro -p topol.top\ngmx mdrun -deffnm eql\n\ngmx grompp -f prd.mdp -o prd.tpr -t eql.cpt -p topol.top\ngmx mdrun -deffnm prd\n```\n\nHere min.mdp, eql.mdp, and prd.mdp are parameter files for the minimization, equilibration, and production steps, respectively.\n\n"
    },
    {
      "title": "Acceleration & Parallelization",
      "level": 4,
      "content": "By default GROMACS uses all available processors on a single node. To run across multiple nodes, an MPI library is required. Using openmpi to run GROMACS takes the following form:\n\n```\n$ mpirun -np totalranks -npernode rankspernode --hostfile filename gmx mdrun -s topol.tpr\n```\n\nHere totalranks is the total number of MPI ranks to create, rankspernode is the number of MPI ranks per node, and filename is the hostfile used to determine on which hosts to run the processes.\n\nOpenMPI be used together with OpenMP as seen here:\n\n```\n$ mpirun -np totalranks -npernode rankspernode --hostfile filename gmx mdrun -ntomp openmpthreads -s topol.tpr\n```\n\nIf compiled without an external MPI library one can control MPI ranks and OMP threads, using GROMAC's thread-MPI. This will not be able to be run across multiple compute nodes:\n\n```\n$ gmx mdrun -ntmpi totalranks -ntomp openmpthreads -s topol.tpr\n```\n\nHere openmpthreads is the number of OpenMP threads to create. totalranks*openmpthreads should equal the total number of processors.\n\nGROMACS automatically detects any available GPUs if it was compiled with GPU support. The number of MPI ranks must be a multiple of the number of GPUs to be used. Using a GPU requires the Verlet cut-off scheme, which is set with the parameter cutoff-scheme in your .mdp file. The command takes the basic form:\n\n```\n$ mpirun -np totalranks -npernode rankspernode --hostfile filename gmx mdrun -ntomp openmpthreads -s topol.tpr -gpu_id gpuids\n```\n\nHere gpuids is the zero-based id of each GPU in a list. That is, with only one GPU (-np 1), you would use -gp_uid 0. If two GPUs are available (-np 2), you would use -gpu_id 01. To use a GPU on multiple MPI ranks, simply list its id the number of times to be used. For example, to use four MPI ranks on two GPUS one would use -np 4, and -gpu_id 0011, thus using each GPU on two MPI ranks. If running on two twenty-core machines, the command would look like:\n\n```\n$ mpirun -np 8 -npernode 4 --hostfile filename gmx mdrun -ntomp 5 -s topol.tpr -gpu_id 0011\n```\n\nIf using GROMACS thread-MPI on one twenty core machine this would be:\n\n```\n$ gmx mdrun -ntmpi 4 -ntomp 5 -s topol.tpr -gpu_id 0011\n```\n\nSee mpirun(1) as well as the GROMACS section on MPI acceleration and parallelization for more options.\n\n"
    },
    {
      "title": "Restart a simulation",
      "level": 4,
      "content": "To restart a simulation from a checkpoint file do:\n\n```\n$ gmx mdrun -s topol.tpr -cpi state.cpt\n```\n\nHere topol.tpr is the original .tpr used in the simulation, and state.cpt is the last checkpoint file from that simulation.\n\n"
    },
    {
      "title": "Extend a simulation",
      "level": 4,
      "content": "To extend a simulation create a modified .tpr file and use it with gmx mdrun:\n\n```\n$ gmx convert-tpr -s topol.tpr -extend time -o tpxout.tpr\n$ gmx mdrun -s tpxout.tpr -cpi state.cpt\n```\n\nWhere time is how much longer to run the simulation in picoseconds, topol.tpr is the .tpr file associated with the original simulation, and state.cpt is the latest checkpoint file from that simulation. Instead of using -extend one can also use -until to specify the absolute ending time in picoseconds.\n\n"
    },
    {
      "title": "Tools",
      "level": 4,
      "content": "GROMACS comes with many analysis tools built-in. A list of all possible possible commands can be obtained by typing gmx help commands or by opening the man page for gromacs.\n\nSome of the more prominent analysis commands are:\n\n- gmx bar — calculate free energy difference estimates through Bennett's acceptance ratio.\n- gmx energy — writes energies to xvg files and display averages.\n- gmx rdf — calculate radial distribution functions.\n- gmx trjconv — convert and manipulates trajectory files.\n- gmx wham — Perform weighted histogram analysis after umbrella sampling.\n\nSee below for other available tools.\n\n"
    },
    {
      "title": "Index Files",
      "level": 4,
      "content": "Index files are optionally used in almost all GROMACS analysis programs. The program gmx make_ndx controls the creation and modification of index files. Index files consist of group names and integer indices indicating the location of atomic sites in a trajectory frame. They are only required if the available residues found in a structure file do not group atomic sites together in the desired way. When running gmx make_ndx the user is presented with a prompt in order to select, combine, and split groups of atoms through various commands. Typing h at the make_ndx prompt gives a full description of the commands available.\n\n"
    },
    {
      "title": "Development",
      "level": 2,
      "content": "GROMACS uses Git for version control, so familiarize yourself with its usage, especially the topic on collaboration. To begin contributing you need to have a GitLab account with an SSH key. The official repository is located at gromacs/gromacs and it can be forked. Changes should be submitted as merge requests. When making changes, follow the style guidelines for the code and commits.\n\nWhen you are ready to share your changes, ensure your HEAD is up to date with a branch that you want to contribute to. In general three branches are used:\n\n- main is used for long-term development of major features which may require large changes in code.\n- release-x-y is for features that do not require as much code change, where x and y are the major and minor version numbers of the next release respectively.\n- release-x-y-patches is for bug fixes and small documentation changes to a previous release.\n\n"
    },
    {
      "title": "Create non-cubic box and fill with solvent",
      "level": 3,
      "content": "To create a non-cubic box filled with solvent, first do:\n\n```\n$ gmx editconf -f protein.pdb -bt boxtype -d dist -o box.gro\n```\n\nThe above command creates a boxtype box around the molecule in protein.pdb at dist nm in every direction. The box is saved as box.gro. boxtype can be triclinic, cubic, dodecahedron, or octahedron.\n\nThen fill with solvent:\n\n```\n$ gmx solvate -cs tip4p -cp box.gro -o conf.gro -p topol.top\n```\n\n"
    },
    {
      "title": "Use multiple solutes",
      "level": 3,
      "content": "If you want to use multiple solutes randomly inserted, first do:\n\n```\n$ gmx insert-molecules -box X Y Z -ci solute.pdb -nmol N -o box.gro\n```\n\nWhere X, Y, and Z are the box dimensions in nanometers, and N is the number to insert. You will need to update your topology file with the inserted number of molecules.\n\nThen fill with solvent:\n\n```\n$ gmx solvate -cs tip4p -cp box.gro -o conf.gro -p topol.top\n```\n\n"
    },
    {
      "title": "Use a non-water solvent",
      "level": 3,
      "content": "To use a non-water solvent with standard tools such as gmx pdb2gmx and gmx solvate do the following:\n\n1. Create one solvent molecule's structure file and topology.\n1. Create a box containing a couple hundred of the solvent molecules (216 seems to be a standard) and run a short equilibration on the system at standard conditions.\n1. Copy the output structure file .gro from the simulation to solvent.gro, where solvent is the name you wish to use for this molecule. Place this copy in the top level force field directory (where each force field has its own directory).\n1. Modify the topology file for the single solvent by removing everything but the [moleculetype] section and name the molecule in the file as SOL.\n1. Rename the topology file as solvent.itp and move it to the force field directory to which it applies.\n1. Update watermodels.dat for the force field you wish to use with this solvent (located in the force field's directory), adding the solvent. You will simply add a line with filename shortdescription longdescription where filename omits the file extension.\n\nNow when you run gmx pdb2gmx this solvent model should be available for the applicable force field. Additionally you can use -cs solvent when running gmx solvate.\n\n"
    },
    {
      "title": "Structure and topology databases",
      "level": 3,
      "content": "- Automated Topology Builder & Repository — repository for building blocks and interaction parameter files for molecules as well as an automated builder to help generate building blocks for novel molecules.\n- RCSB Protein Data Bank — information about the 3D shapes of proteins, nucleic acids, and complex assemblies that helps students and researchers understand all aspects of biomedicine and agriculture, from protein synthesis to health and disease.\n- SwissParam — provides topology and parameters for small organic molecules compatible with the CHARMM all atoms force field, for use with CHARMM and GROMACS.\n- TraPPE Parameter Database — search by molecule name, or build your own, in order to obtain TraPPE force field parameters. Note that it is necessary to convert the parameters to the correct units.\n- Virtual Chemistry — comparison of experimental and computational results for thousands of molecules. Contains validated topology input files for CGenFF, GAFF and OPLS/AA.\n\n"
    },
    {
      "title": "External libraries and programs",
      "level": 3,
      "content": "See List of applications/Science#Chemistry.\n\n"
    },
    {
      "title": "Development",
      "level": 3,
      "content": "- GROMACS Issues on GitLab — project management page, where bugs, issues, and features are reported and tracked.\n- GROMACS Merge requests on GitLab — the project's code review system.\n\n"
    },
    {
      "title": "Documentation",
      "level": 3,
      "content": "- GROMACS forums — very active forums for users seeking help. Make sure to read the manual and search the archive before posting.\n- GROMACS Manual — official GROMACS manual for the current version.\n- GROMACS Online Reference\n\n"
    },
    {
      "title": "Tutorials",
      "level": 3,
      "content": "- Official GROMACS Tutorials\n- Justin Lemkul's Tutorials — includes a variety of different simulation methods (umbrella sampling, free energy calculations, etc).\n- James Barnett's Tutorials — a few basic tutorials on simulations with an organic solute. Includes how to use gmx pdb2gmx with a user-created molecule.\n\n"
    }
  ]
}