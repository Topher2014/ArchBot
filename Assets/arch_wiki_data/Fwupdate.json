{
  "title": "Fwupdate",
  "url": "https://wiki.archlinux.org/title/Fwupdate",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Secure Boot\n- Unified Extensible Firmware Interface\n\nfwupd is a simple daemon to allow session software to update device firmware on your local machine. It's designed for desktops, but also usable on phones and headless servers.\n\nSupported devices are listed here and more are to come.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the fwupd or fwupd-gitAUR package.\n\nSee #Setup for UEFI upgrade if you intend such use.\n\n"
    },
    {
      "title": "Graphical front-ends",
      "level": 3,
      "content": "Certain desktop environments front-end solutions have built-in fwupd support:\n\n- Discover — Software center used with Plasma. With the release of KDE Plasma 5.14, a new fwupd backend has been implemented in KDE Discover for firmware updates. These firmware updates are shown with other system updates. Part of plasma.\n\n- GNOME Firmware — Application to upgrade, downgrade and reinstall firmware on devices supported by fwupd. It can unlock locked fwupd devices, verify firmware on supported devices and display all releases for a fwupd device.\n\n- GNOME Software — Will check for updates periodically and automatically download firmwares in the background on GNOME. After a firmware has been downloaded a popup will be displayed in Gnome Software to perform the update. Part of gnome.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nThe package provides a fwupd.service which will automatically start the fwupd daemon when the first query is received. [1]\n\nTo display all devices detected by fwupd:\n\n```\n$ fwupdmgr get-devices\n```\n\nTo download the latest metadata from the Linux Vendor firmware Service (LVFS):\n\n```\n$ fwupdmgr refresh\n```\n\nTo list updates available for any devices on the system:\n\n```\n$ fwupdmgr get-updates\n```\n\nTo install updates:\n\n```\n$ fwupdmgr update\n```\n\n- Updates that can be applied live will be done immediately.\n- Updates that run at bootup will be staged for the next reboot.\n- The root user may be required to perform certain device updates.\n\n"
    },
    {
      "title": "Disable local cache server (passim)",
      "level": 3,
      "content": "fwupd v1.9.5 from September 2023 introduced a dependency on passim, a local cache server intended to help reduce LVFS bandwidth usage by making each machine able to serve the metadata file it downloads everyday to others[2][3].\n\npassimd is a daemon which listens for connections on port 27500 from any IP addresses (i.e. it listens on 0.0.0.0:27500). This has led to some criticism regarding the security implications[4][5], and indeed several vulnerabilities were reported just a few weeks later[6][7].\n\nOn Arch the request from FS#79614 to make the dependency optional at compile-time was denied because it would require creating a split-package for a library.\n\nAs a consequence, if you wish to disable passimd you should follow the advice given by the author[8]: add P2pPolicy=nothing to /etc/fwupd/fwupd.conf and/or mask passim.service.\n\n"
    },
    {
      "title": "Setup for UEFI upgrade",
      "level": 2,
      "content": "The following requirements should be met:\n\n1. Make sure you are booted in UEFI mode, because it will not work in legacy boot mode.\n1. Verify your EFI variables are accessible.\n1. Mount your EFI system partition (ESP) properly. esp is used to denote the mountpoint in this section.\n1. Make sure the optional dependency udisks2 is installed and the associated systemd unit is started before fwupd unit; it will provide UEFI firmware upgrade support.\n\n"
    },
    {
      "title": "Prepare ESP",
      "level": 3,
      "content": "fwupd will copy all the necessary files over to the esp, but for this to work, a basic folder layout must be present on your esp; this constitutes the creation of an EFI directory on your esp:\n\n```\n# mkdir esp/EFI/\n```\n\nNote: **must** \n\nRestart the fwupd.service unit afterwards. You can now fwupdmgr refresh and fwupdmgr update. You will be prompted to reboot (into the firmware updater).\n\nNote: **black screen without any messages** \n\n"
    },
    {
      "title": "Secure Boot",
      "level": 3,
      "content": "Currently, fwupd relies on shim to chainload the fwupd EFI binary on systems with Secure Boot enabled; for this to work, shim has to be installed correctly.\n\n"
    },
    {
      "title": "Using your own keys",
      "level": 4,
      "content": "Alternatively, you can manually sign the UEFI executable used to perform upgrades, which is located in /usr/lib/fwupd/efi/fwupdx64.efi. The signed UEFI executable is expected in /usr/lib/fwupd/efi/fwupdx64.efi.signed. Using sbsigntools, this can be achieved by running:\n\n```\n# sbsign --key keyfile --cert certfile /usr/lib/fwupd/efi/fwupdx64.efi\n```\n\nTo automatically sign this file when installed or upgraded, a Pacman hook can be used:\n\n```\n/etc/pacman.d/hooks/sign-fwupd-secureboot.hook\n```\n\n```\n[Trigger]\nOperation = Install\nOperation = Upgrade\nType = Path\nTarget = usr/lib/fwupd/efi/fwupdx64.efi\n\n[Action]\nWhen = PostTransaction\nExec = /usr/bin/sbsign --key keyfile --cert certfile /usr/lib/fwupd/efi/fwupdx64.efi\nDepends = sbsigntools\n```\n\nMake sure to replace keyfile and certfile with the corresponding paths of your keys.\n\nInstead of a pacman hook, you can also create a symlink from /usr/lib/fwupd/efi/fwupdx64.efi to /usr/lib/fwupd/efi/fwupdx64.efi.signed, and add the file to the EXTRA_SIGN list in /etc/sbupdate.conf.\n\nFinally, you have to set DisableShimForSecureBoot in /etc/fwupd/fwupd.conf and restart fwupd.service:\n\n```\n/etc/fwupd/fwupd.conf\n```\n\n```\n...\n\n[uefi_capsule]\nDisableShimForSecureBoot=true\n```\n\n- If you set this up before fwupd 1.9, this option is located in /etc/fwupd/uefi_capsule.conf.\n- If you set this up before fwupd 1.4, be aware of the subtle change to the configuration option name.\n\nSee https://github.com/fwupd/fwupd/issues/669 for more information.\n\n"
    },
    {
      "title": "Stuck when rebooting",
      "level": 3,
      "content": "fwupdmgr update reports no error, but the reboot it prompts stuck and holding the power button has no response. Try switching off the power, or press the reset button (on a laptop, it might be a hole on the back) to force-reboot.\n\n"
    },
    {
      "title": "No error but no upgrade on reboot",
      "level": 3,
      "content": "Symptom: fwupdmgr update reports no error and prompts for reboot (e.g., on BIOS update). However, the system reboots normally (or stuck) and the firmware update does NOT happen.\n\nPossible cause: In BIOS settings changing the boot order must be allowed.\n\nPossible other solution if there are multiple updates pending: Try updating packages one at a time. Use the following to select packages:\n\n```\n$ fwupdmgr update update_ID\n```\n\n(Where update_ID is something like f95c9218acd12697af946874bfe4239587209232.)\n\n"
    },
    {
      "title": "read-only filesystem error",
      "level": 3,
      "content": "At least fwupdmgr 1.5.2 deduces the wrong mount point if bind is used to mount the EFI system partition to /boot. Consequently it fails to write the UEFI update file to /boot/EFI/arch/fw (fwupdmgr while it should be written to esp/EFI/arch/fw.) This results in a (misleading) file system is read-only error message. In case the update was performed by Discover (or any other fwupd-capable Update GUI), no error or misleading errors may be shown.\n\nAs a workaround, run umount /boot first if it was bind-mounted to esp/EFI/arch before, then run fwupdmgr update to write the UEFI update file to esp/EFI/arch/fw, mount /boot and reboot the system to perform the UEFI update.\n\n"
    },
    {
      "title": "UEFI ESP partition not detected or configured",
      "level": 3,
      "content": "If the EFI system partition (ESP) is still not detected after all requirements in #Setup for UEFI upgrade are met, the mount point can be specified manually:\n\n```\n/etc/fwupd/fwupd.conf\n```\n\n```\n[fwupd]\nEspLocation=/efi\n```\n\nSee the relevant article in the fwupd wiki for additional reasons that this might occur.\n\nSetting the ESP location prevents fwupdx64.efi from being installed in unwanted EFI system partitions located on other disks.\n\n"
    },
    {
      "title": "MSR plugin is failing to load",
      "level": 3,
      "content": "The MSR plugin allows querying the state of DCI, a debugging interface available for Intel CPUs that should be disabled on production machines according to fwupd's documentation.\n\nThis plugin needs the msr kernel module loaded. msr is a built-in kernel module in all the official Arch Linux kernel packages, but unofficial kernel packages might have it as a loadable kernel module. In the latter case, we need to explicitly load the module at boot.\n\n"
    },
    {
      "title": "Failed to load daemon: failed to load engine: No ESP with path",
      "level": 3,
      "content": "When starts fwupd, it checks the esp location as EspLocation from /etc/fwupd/fwupd.conf. Modify it to your corresponding setup if encounter this error.\n\n"
    }
  ]
}