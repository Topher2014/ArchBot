{
  "title": "Nvim",
  "url": "https://wiki.archlinux.org/title/Nvim",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- List of applications/Documents#Vi-style text editors\n\nNeovim is a fork of Vim aiming to improve the codebase, allowing for easier implementation of APIs, improved user experience and plugin implementation. Neovim inspired editors like Helix.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the neovim package, or neovim-gitAUR for the latest development version, which strongly encourages the use of Lua as its main configuration language. To make the system clipboard work with Neovim, you may need to install xclip (X11) or wl-clipboard (Wayland).\n\nIt is also possible to install one of many GUIs and other related projects:\n\n- neovim-qt — Fast, lightweight, and customizable Qt GUI. Provides a modern interface, including support for multiple tabs, split windows, and customizable themes.\n\n- neovim-gtkAUR — GTK GUI. Provides a modern, customizable interface, including support for split windows, multiple tabs, and customizable themes.\n\n- uivonim-gitAUR — (Inactive) Simple and lightweight GTK GUI. Provides a minimalistic interface, including support for split windows and customizable themes.\n\n- neovide — Rust GUI.\n\n- neoray-gitAUR — Go GUI.\n\n- gnvimAUR — GTK GUI.\n\n- fvimAUR — F# GUI.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Nvim's user-specific configuration file is located at $XDG_CONFIG_HOME/nvim/init.vim, by default ~/.config/nvim/init.vim. The system-wide configuration file is located at $XDG_CONFIG_DIRS/nvim/sysinit.vim, by default /etc/xdg/nvim/sysinit.vim. When the system-wide configuration file does not exist, Nvim checks for /usr/share/nvim/sysinit.vim, which is not intended to be edited by users.[1] By default, the former global configuration file does not exist. If you create the former file, you may wish to have it source the latter if you still want the functionality it provides, which is allowing pacman-installed vim packages to work with Nvim.\n\nNvim is compatible with most of Vim's options; however, there are options specific to Nvim. For a complete list of Nvim options, see Neovim's help file.\n\nNvim's data directory is located in ~/.local/share/nvim/ and contains swap for open files, the ShaDa (Shared Data) file, and the site directory for plugins.\n\nStarting from Nvim's version 0.5, it is possible to setup Nvim via Lua, by default ~/.config/nvim/init.lua, the API is still young, but common configurations work out-of-the-box without much more steps. See [2] for suggestions on how to convert your current configuration. At the moment, there is not much of an advantage when using init.lua vs the common init.vim, but when correctly done, Lua provides a small improvement in startup times, and it becomes specially useful when using several plugins written in Lua, due to ease of configuration.\n\n"
    },
    {
      "title": "Migrating from Vim",
      "level": 3,
      "content": "If you wish to migrate your existing Vim configuration to Nvim, simply copy your ~/.vimrc to ~/.config/nvim/init.vim. If applicable, copy the contents of ~/.vim/autoload/ to ~/.local/share/nvim/site/autoload/.\n\n"
    },
    {
      "title": "Shared configuration between Vim and Nvim",
      "level": 3,
      "content": "Neovim uses $XDG_CONFIG_HOME/nvim instead of ~/.vim as its main configuration directory and $XDG_CONFIG_HOME/nvim/init.vim instead of ~/.vimrc as its main configuration file.\n\nIf you wish to continue using Vim and wish to source your existing Vim configuration in Nvim, see nvim-from-vim or the :help nvim-from-vim neovim command.\n\n"
    },
    {
      "title": "Loading plugins",
      "level": 4,
      "content": "Vim/Nvim plugins installed from official repositories or AUR get automatically sourced by /etc/xdg/nvim/sysinit.vim, so there is no need to take any extra steps. A vast amount of plugins can be found on both places, but the most recommended way to add plugins is by using a plugin manager, most commonly used are vim-plugAUR which works for both Vim and Nvim, and lazy.nvim which only works on Nvim and is written in Lua. Both of them allow for expressive configurations, ranging from github branch to runtime commands.\n\nMost plugins written for vim work without much effort on Nvim, but not every plugin written for Nvim works for Vim, so if your intention is to ensure a compatible configuration, stick to a traditional init.vim or .vimrc\n\n"
    },
    {
      "title": "Replacing vi and vim with neovim",
      "level": 3,
      "content": "Setting $VISUAL and $EDITOR environment variables should be sufficient in most cases.\n\nSome applications may hardcode vi or vim as default editor; to use neovim in their place, install neovim-symlinksAUR or neovim-drop-inAUR.\n\n"
    },
    {
      "title": "Symlinking init.vim to .vimrc",
      "level": 3,
      "content": "As neovim is mostly compatible with standard vim, you can symlink nvim/init.vim to your old .vimrc to keep old configuration options:\n\n```\n$ ln -s ~/.vimrc ~/.config/nvim/init.vim\n```\n\nIf you want some lines to be specific to each version, you can use an if block:\n\n```\n.vimrc\n```\n\n```\nif has('nvim')\n    \" Neovim specific commands\nelse\n    \" Standard vim specific commands\nendif\n```\n\n"
    },
    {
      "title": "True color support",
      "level": 3,
      "content": "The READMEs of this project explain how to add 24-bits \"True Color\" support to your syntax highlighting and how to use a color picker to see how it looks in real-time. Comes with the syntax highlighting of the author (if installed) for C++.\n\n"
    },
    {
      "title": "Lastplace cursor support",
      "level": 3,
      "content": "If you like to keep your last position of cursor to be saved, lastplace.lua is quite useful. It just needs to be placed in ~/.config/nvim/plugin/ or in the system-wide directory /usr/share/nvim/runtime/plugin/.\n\n"
    },
    {
      "title": "Language Server Protocol",
      "level": 3,
      "content": "Neovim contains a built-in Language Server Protocol client and the nvim-lspconfig plugin provides common configurations for it.\n\nSee Language Server Protocol for a list of Arch packages.\n\n"
    },
    {
      "title": "Use as a pager",
      "level": 3,
      "content": "You can use the :Man command to open manual pages. To open all manual pages with neovim set the MANPAGER environment variable to nvim +Man!.\n\nFor other pager support install either the nvimpagerAUR or the nvimpager-gitAUR package and set the PAGER environment variable to nvimpager.\n\nYou can also try page, packaged in page-gitAUR.\n\n"
    },
    {
      "title": "Cursor is not restored to previous state after exit",
      "level": 3,
      "content": "If the cursor keeps blinking after exiting neovim, see the solution in the neovim FAQ.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Github repository\n- Github wiki\n\n"
    }
  ]
}