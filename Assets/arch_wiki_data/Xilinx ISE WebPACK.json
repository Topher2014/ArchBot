{
  "title": "Xilinx ISE WebPACK",
  "url": "https://wiki.archlinux.org/title/Xilinx_ISE_WebPACK",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThe Xilinx ISE WebPACK is a complete FPGA/CPLD programmable logic design suite providing:\n\n- Specification of programmable logic via schematic capture or Verilog/VHDL\n- Synthesis and Place & Route of specified logic for various Xilinx FPGAs and CPLDs\n- Functional (Behavioral) and Timing (post-Place & Route) simulation\n- Download of configuration data into target device via communications cable\n\nThe development of the ISE WebPACK has been stopped in favor of the Vivado Suite, but it is still useful to develop for older devices not supported by the new suite.\n\nWhile Arch Linux is not one of the officially supported distributions, many features are known to work on Arch Linux.\n\n"
    },
    {
      "title": "Download ISE WebPACK",
      "level": 3,
      "content": "The Xilinx ISE WebPACK is a freeware software released under a proprietary license which does not allow redistribution. To obtain the install data visit the official download page.\n\n"
    },
    {
      "title": "Dependencies",
      "level": 3,
      "content": "Several tools included in the ISE Webpack (and the installer itself) depends on ncurses5-compat-libsAUR. Additionally other tools (e.g. the FPGA editor) requires libstdc++5AUR openmotif xorg-fonts-75dpi xorg-fonts-100dpi.\n\nIf you plan to develop software for an embedded ARM core (e.g. for Xilinx Zynq SoC devices), you will want to install the GCC cross-compiler bundled included with the Xilinx Embedded Development Kit (EDK). This compiler requires the lib32-glibc package from the multilib repository and lib32-ncurses5-compat-libsAUR.\n\n"
    },
    {
      "title": "Default shell",
      "level": 3,
      "content": "During the installation, the Mentor CodeSourcery toolchains for embedded processors can be installed along with the Xilinx tools. This installation silently fails when the default shell is set to dash. Make sure /usr/bin/sh points to /usr/bin/bash.\n\nThis can be checked by running this command:\n\n```\n$ ls -l /usr/bin/sh\n```\n\nIf the output looks like this:\n\n```\nlrwxrwxrwx 1 root root 15 13 Mar 06:47 /usr/bin/sh -> bash\n```\n\nthen /usr/bin/sh already points to /usr/bin/bash. (the default in Arch Linux).\n\nIf not, link /usr/bin/sh to bash:\n\n```\n# ln -sfT bash /usr/bin/sh\n```\n\n"
    },
    {
      "title": "Install from AUR",
      "level": 3,
      "content": "Install the package xilinx-iseAUR, you will have to place the tarball with the installation data in the same folder of the PKGBUILD before starting the building process.\n\n"
    },
    {
      "title": "Manual installation",
      "level": 3,
      "content": "Extract the tarball containing the installation data:\n\n```\n$ tar -xvf Xilinx_ISE_DS_Lin_14.7_1015_1.tar\n```\n\nThe ISE design tools installer is a Qt application. If you are running the KDE desktop environment, the installer may try to load the \"Oxygen\" widget theme, which will fail due to the older Qt framework bundled with the Xilinx ISE design tools. You need to remove the QT_PLUGIN_PATH environment variable before executing the installer:\n\n```\n$ unset QT_PLUGIN_PATH\n```\n\nThen, install the ISE Design Tools:\n\n```\n$ cd Xilinx_ISE_DS_Lin_14.7_1015_1\n$ ./xsetup\n```\n\nFollow the instructions to install the ISE. By default, the whole application is installed to /opt/Xilinx/, so make sure the user running the installer has permissions to write to this directory.\n\nDuring installation, uncheck the \"Install Cable Drivers\" option. Leaving it checked will cause errors during the installation.\n\n"
    },
    {
      "title": "Launching the ISE design tools",
      "level": 3,
      "content": "The ISE design tools include a shell script that modifies the environment variables (mostly PATH and LD_LIBRARY_PATH). This script must be sourced before starting the ISE tools:\n\n```\n$ source /opt/Xilinx/14.7/ISE_DS/settings64.sh\n```\n\nThen, the ISE design tools will be found in your PATH and can be started by typing their name in the terminal (e.g. ise, planAhead, xsdk, ...)\n\n"
    },
    {
      "title": "Launching via desktop icons",
      "level": 4,
      "content": "You can also create a desktop entry at /usr/share/applications/\n\n```\n/usr/share/applications/ise.desktop\n```\n\n```\n#!/usr/bin/env xdg-open\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Xilinx ISE\nExec=sh -c \"unset LANG && unset QT_PLUGIN_PATH && source /opt/Xilinx/14.7/ISE_DS/settings64.sh && ise\"\nIcon=/opt/Xilinx/14.7/ISE_DS/ISE/data/images/pn-ise.png\nCategories=Development;\nComment=Xilinx ISE\nStartupWMClass=_pn\n```\n\nAfter that you can copy this file to the ~/Desktop folder and launch ISE tools from the desktop.\n\n"
    },
    {
      "title": "License installation",
      "level": 3,
      "content": "After requesting a WebPACK license from Xilinx using their Licensing Site, you will be e-mailed a license file. This file can be imported with the Xilinx License Manager (run xlcm -manage from the terminal).\n\nAnother way to import the license is to simply copy it to the ~/.Xilinx or /opt/Xilinx/14.7/ISE_DS/ISE/coregen/core_licenses directory.\n\n"
    },
    {
      "title": "Node-locked licenses",
      "level": 3,
      "content": "Arch Linux by default uses systemd's Predictable Network Interface Names. This means that your system will most likely not have its network interfaces named eth0, eth1 and so forth.\n\nHowever, the Xilinx License Manager looks for these names to find out the system's MAC addresses, which are used for node-locked licenses. If you want to use node-locked licenses, you will have to manually assign to your interface a name in the format expected by the License Manager. Network configuration#Revert to traditional interface names explains how to do so. If your machine does not have a wired Ethernet adapter, then it is possible to use systemd and the dummy kernel module to create a virtual Ethernet adapter with the proper MAC address. To do this, create the following:\n\n```\n/etc/systemd/network/25-dummy.netdev\n```\n\n```\n[Match]\n\n[NetDev]\nName=eth0\nKind=dummy\nMACAddress=00:11:22:33:44:55:66\n```\n\nThen, restart the systemd-networkd service.\n\n"
    },
    {
      "title": "Post-installation fixes and tweaks",
      "level": 2,
      "content": "After installation, a few manual fixes are required to work around problems caused by running the Xilinx tools on a Linux distribution that is not officially supported by Xilinx. Some of these fixes are taken from this forum post.[dead link 2023-09-16 â“˜]\n\n"
    },
    {
      "title": "Dynamic library fix (libstdc++.so)",
      "level": 3,
      "content": "The ISE tools supply an outdated version of the libstdc++.so library, which may cause segfaults when using the Xilinx Microprocessor Debugger and prevents the usage of the oxygen-gtk theme. This outdated version is located in two directories within the installation tree: /opt/Xilinx/14.7/ISE_DS/ISE/lib/lin64/ and /opt/Xilinx/14.7/ISE_DS/common/lib/lin64. To use Arch's newer version of libstdc++, rename or delete the original files and replace them with symlinks:\n\n```\n$ cd /opt/Xilinx/14.7/ISE_DS/ISE/lib/lin64/\n$ mv libstdc++.so libstdc++.so.bak\n$ mv libstdc++.so.6 libstdc++.so.6.bak\n$ mv libstdc++.so.6.0.8 libstdc++.so.6.0.8.bak\n$ ln -s /usr/lib/libstdc++.so\n$ ln -s libstdc++.so libstdc++.so.6\n$ ln -s libstdc++.so libstdc++.so.6.0.8\n```\n\nThen, repeat this process in the /opt/Xilinx/14.7/ISE_DS/common/lib/lin64 directory.\n\n"
    },
    {
      "title": "Digilent USB-JTAG drivers",
      "level": 3,
      "content": "To use Digilent Adept USB-JTAG adapters (e.g. the onboard JTAG adapter on the ZedBoard) from within the Xilinx design tools, you need to install the Digilent Adept Runtime and Plugin.\n\nMake sure you have installed fxloadAUR from the Arch User Repository .\n\nTo install the Digilent Adept Runtime, it is recommended to install digilent.adept.runtimeAUR from the Arch User Repository.\n\nIn addition, installing digilent.adept.utilitiesAUR may do good to configuring your board.\n\nTo install the Digilent plugin, you have to copy two files to the ISE plugin directory\n\n```\n# mkdir -p /opt/Xilinx/14.7/ISE_DS/ISE/lib/lin64/plugins/Digilent/libCseDigilent\n# cd /opt/Xilinx/14.7/ISE_DS/ISE/bin/lin64/digilent/libCseDigilent_2.4.4-x86_64/lin64/14.1/libCseDigilent\n# cp libCseDigilent.{so,xml} /opt/Xilinx/14.7/ISE_DS/ISE/lib/lin64/plugins/Digilent/libCseDigilent\n# chmod -x /opt/Xilinx/14.7/ISE_DS/ISE/lib/lin64/plugins/Digilent/libCseDigilent/libCseDigilent.xml\n```\n\nFinally, add every user that should have access to the Digilent USB-JTAG adapter to the \"uucp\" group.\n\nTo grant access to the USB driver for normal users you may have to add the USB Vendor/Product IDs of your JTAG adapter which can be found with\n\n```\n$ lsusb | grep Xilinx\n```\n\nto the udev rules in /etc/udev/rules.d/20-digilent.rules:\n\n```\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"xxxx\", ATTRS{idProduct}==\"xxxx\", GROUP=\"users\", MODE=\"666\"\n```\n\nIf it still does not work, you can make further reading in Xilinx_JTAG_Linux. The magic git repository there may be help.\n\n"
    },
    {
      "title": "Xilinx Platform Cable USB-JTAG drivers",
      "level": 3,
      "content": "Make sure you have installed fxloadAUR or fxload-libusbAUR from the Arch User Repository . We need to build driver from source (git and some make stuff need to be installed, make will say what programs or libraries are missed):\n\n```\n$ cd /opt/Xilinx\n# git clone git://git.zerfleddert.de/usb-driver\n$ cd usb-driver/\n$ make\n```\n\nIf you using 32-bit version of ISE on 64-bit system, pass \"lib32\" to make:\n\n```\n$ make lib32\n```\n\nAnd install driver (replace 14.7 to your version):\n\n```\n$ ./setup_pcusb /opt/Xilinx/14.7/ISE_DS/ISE\n```\n\nOr in older versions:\n\n```\n$ ./setup_pcusb /opt/Xilinx/10.x/ISE\n```\n\nFor the new fxload version: fxload-libusbAUR, the file /etc/udev/rules.d/xusbdfwu.rules needs to be changed to:\n\n```\n$ /etc/udev/rules.d/xusbdfwu.rules\n```\n\n```\nACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"03fd\", ATTRS{idProduct}==\"0008\", MODE=\"666\"\nACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"03fd\", ATTRS{idProduct}==\"0007\", RUN+=\"/usr/bin/fxload-libusb -t fx2 -I /usr/share/xusbdfwu.hex -d 03fd:0007\"\nACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"03fd\", ATTRS{idProduct}==\"0009\", RUN+=\"/usr/bin/fxload-libusb -t fx2 -I /usr/share/xusb_xup.hex -d 03fd:0009\"\nACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"03fd\", ATTRS{idProduct}==\"000d\", RUN+=\"/usr/bin/fxload-libusb -t fx2 -I /usr/share/xusb_emb.hex -d 03fd:000d\"\nACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"03fd\", ATTRS{idProduct}==\"000f\", RUN+=\"/usr/bin/fxload-libusb -t fx2 -I /usr/share/xusb_xlp.hex -d 03fd:000f\"\nACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"03fd\", ATTRS{idProduct}==\"0013\", RUN+=\"/usr/bin/fxload-libusb -t fx2 -I /usr/share/xusb_xp2.hex -d 03fd:0013\"\nACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"03fd\", ATTRS{idProduct}==\"0015\", RUN+=\"/usr/bin/fxload-libusb -t fx2 -I /usr/share/xusb_xse.hex -d 03fd:0015\"\n```\n\nWhen performing this command, the udev rules file will be created. You can reload udev rules to apply changes immediately:\n\n```\n# udevadm control --reload-rules\n```\n\nIf driver installed correctly and udev rule works, STATUS led should turn on (green or red depending on voltage presence on VREF PIN)\n\n```\n$ export LD_PRELOAD=/opt/Xilinx/usb-driver/libusb-driver.so\n```\n\n"
    },
    {
      "title": "Locale issues",
      "level": 3,
      "content": "PlanAhead does not like locales using other literals than '.' as the decimal point (e.g. German, which uses ','). Run the following command before launching PlanAhead:\n\n```\n$ unset LANG\n```\n\n"
    },
    {
      "title": "Segmentation fault on PlanAhead",
      "level": 3,
      "content": "When launching PlanAhead to generate a .ucf file, a segmentation fault may occur. The issue seems unrelated to the previous topic. The ISE console will show\n\n```\n\"/opt/Xilinx/14.7/ISE_DS/PlanAhead/bin/rdiArgs.sh: line 64: 14275 Segmentation fault      $RDI_PROG $*\"\n```\n\nThe problem seems to come from the bundled JRE as described here. To fix the issue, symlink the OpenJDK libjvm.so into the Xilinx's installation directory.\n\n```\n# pacman -S jre8-openjdk-headless\n# cd /opt/Xilinx/14.7/ISE_DS/PlanAhead/tps/lnx64/jre/lib/amd64/server\n# mv libjvm.so{,-orig}\n# ln -s /usr/lib/jvm/java-8-openjdk/jre/lib/amd64/server/libjvm.so\n```\n\nRemember! newer version of jre such as jre-openjdk-headless (version 17) is not suitable (can lead to error)\n\n"
    },
    {
      "title": "GNU make",
      "level": 3,
      "content": "XSDK looks for the gmake executable, which is not present in Arch Linux by default. Create a symlink somewhere in your path, e.g.\n\n```\n$ ln -s /usr/bin/make /home/<user>/bin/gmake\n```\n\nMake sure this directory is in your PATH variable.\n\n"
    },
    {
      "title": "Running Xilinx tools from within KDE",
      "level": 3,
      "content": "KDE by default defines the QT_PLUGIN_PATH shell variable. Some of the Xilinx ISE tools (ISE, Impact, XPS) are Qt applications, which means that they will search for Qt plugins in the locations defined by this shell variable.\n\nBecause the Xilinx tools are compiled against and ship with an older version of the Qt framework which cannot use these plugins, they will crash when launched with this environment variable present.\n\nTo fix this issue, run the following command before launching the tools:\n\n```\n$ unset QT_PLUGIN_PATH\n```\n\n"
    },
    {
      "title": "CORE Generator fails to generate core",
      "level": 3,
      "content": "In some cases, the CORE Generator will fails to generate a core and output something like this to its console:\n\n```\nERROR:sim - Unable to evaluate Tcl file:\n   /opt/Xilinx/14.7/ISE_DS/ISE/coregen/ip/xilinx/primary/com/xilinx/ip/clk_wiz_v3_6/generate/run_legacy_tcl_flow.tcl\nERROR:sim - Failed executing Tcl generator.\n```\n\n"
    },
    {
      "title": "Solution #1",
      "level": 4,
      "content": "If that happens, make sure you do not have _JAVA_OPTIONS set in your environment. If you normally run coregen with\n\n```\n$ source /opt/Xilinx/14.7/ISE_DS/settings64.sh && coregen\n```\n\nyou need to prepend that with an \"unset _JAVA_OPTIONS\":\n\n```\n$ unset _JAVA_OPTIONS && source /opt/Xilinx/14.7/ISE_DS/settings64.sh && coregen\n```\n\n"
    },
    {
      "title": "Solution #2",
      "level": 4,
      "content": "Solution #1 no longer works due to: coregen's bundled java fails to start. Workaround force using ISE bundled java6 instead of java5.\n\nBackup old version\n\n```\n$ mv /opt/Xilinx/14.7/ISE_DS/ISE/java/lin64/jre/bin/java /opt/Xilinx/14.7/ISE_DS/ISE/java/lin64/jre/bin/java.old\n```\n\nAdd symbolic link to java6\n\n```\n$ ln -s /opt/Xilinx/14.7/ISE_DS/ISE/java6/lin64/jre/bin/java /opt/Xilinx/14.7/ISE_DS/ISE/java/lin64/jre/bin/java\n```\n\n"
    },
    {
      "title": "Solution #3",
      "level": 4,
      "content": "If the previous methods fail, try to run the 32-bit version of coregen:\n\n```\n$ unset _JAVA_OPTIONS && source /opt/Xilinx/14.7/ISE_DS/settings32.sh && coregen\n```\n\n"
    }
  ]
}