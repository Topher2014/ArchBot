{
  "title": "Convert Flac to Mp3",
  "url": "https://wiki.archlinux.org/title/Convert_Flac_to_Mp3",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Convert any Movie to DVD Video\n\nThis article outlines different ways to transcode from FLAC to MP3. FLAC is a lossless audio format, so it is better for archival purposes, but it also takes up more disk space. The idea is to compress the files without creating a perceived loss in fidelity.\n\n"
    },
    {
      "title": "Packages",
      "level": 2,
      "content": "- audiotoolsAUR - Transcode between different formats and keep tags with track2track, can encode from CDDA with cdda2track, has an optional Ncurses GUI.\n- flac2allAUR - Multi-threaded conversion of flac to 70+ other formats retaining all tags and metadata.\n- whatmp3AUR - A small Python script that accepts a list of directories containing FLAC files as arguments and converts them to MP3 with the specified options.\n\n"
    },
    {
      "title": "Graphical applications",
      "level": 3,
      "content": "- SoundConverter — A dedicated audio transcoding utility built for the GNOME desktop and relying on GStreamer. It can make use of GNOME Audio Profiles and features multithreaded conversions. It can also extract the audio from videos.\n\n- soundKonverter — A Qt graphical frontend to various audio manipulation programs. Features conversion, ripping and other audio manipulation functionalities.\n\n- WinFF — A GUI for the powerful multimedia converter FFmpeg. Features dedicated profiles for audio transcoding.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "In these two examples, FLAC files in current directory are encoded by the LAME MP3 encoder. Both scripts pass the ID3 tags from the FLAC files to the resulting MP3 files, and encode to MP3 V0. V0 results in a variable bitrate usually between 220-260 kbps. The audio of a V0 file is transparent, meaning one cannot tell the difference between the lossy file and the original source (compact disc/lossless), but yet the file size is significantly reduced. For more information on LAME switches/settings such as V0, visit the Hydrogenaudio LAME Wiki.\n\nThe original .flac files are not modified and the resulting .mp3s will be in the same directory. All files with extensions not matching *.flac in the working directory (.nfo, images, .sfv, etc.) are ignored.\n\nFor ease of use, add the script to your PATH. Open up a terminal, cd to the directory of FLAC files that you wish to convert, and invoke flac2mp3 (or whatever you named the script). You will see the verbose decoding/encoding process in the terminal which may take a few moments. Done! At this point, it is trivial to mv *.mp3 all your new MP3s wherever you wish.\n\n"
    },
    {
      "title": "With FFmpeg",
      "level": 3,
      "content": "Chances are, your system already has FFmpeg installed, which brings in the flac and lame packages. FFmpeg has all the encoding and decoding facilities built in to do the job.\n\n```\n#!/bin/bash\n\nfor a in ./*.flac; do\n  < /dev/null ffmpeg -i \"$a\" -qscale:a 0 \"${a[@]/%flac/mp3}\"\ndone\n```\n\n"
    },
    {
      "title": "Parallel version",
      "level": 4,
      "content": "Since LAME is a single-threaded encoder, conversion can be accelerated by encoding multiple files concurrently on multiple cores. To do this, install the parallel package, and run:\n\n```\nparallel ffmpeg -i {} -qscale:a 0 {.}.mp3 ::: ./*.flac\n```\n\n"
    },
    {
      "title": "Parallel with recursion",
      "level": 4,
      "content": "Fd is a fast, user-friendly alternative to find. This one liner avoids the \"while read\" loop, which may have performance implications according to a response on Stack Exchange. [1]\n\nInstall fd first, then run:\n\n```\nfd -t f -e flac -x ffmpeg -i \"{}\" -qscale:a 0 \"{.}.mp3\"\n```\n\n"
    },
    {
      "title": "Makefile for incremental recursive transcoding",
      "level": 4,
      "content": "Besides transcoding in parallel with make -j$(nproc), this has the added benefit of not regenerating transcoded files that already exist on subsequent executions:\n\n```\nSOURCE_DIR := flacdir\nXCODE_MP3_DIR := mp3dir\n# NOTE: see lame -v option for quality meaning\nXCODE_MP3_QUALITY := 0\n\n# Find .flac sources and determine corresponding targets\nflac_srcs := $(shell find $(SOURCE_DIR) -type f -name '*.flac')\nflac_2_mp3_tgts := $(patsubst $(SOURCE_DIR)/%.flac, $(XCODE_MP3_DIR)/%.mp3, \\\n    $(flac_srcs))\n\n.PHONY: all mp3 flac_2_mp3\n\nall: mp3 \n\nmp3: flac_2_mp3\n\nflac_2_mp3: $(flac_2_mp3_tgts)\n\n$(XCODE_MP3_DIR)/%.mp3: $(SOURCE_DIR)/%.flac\n        @echo \"converting -> $@\"\n        @mkdir -p \"$(@D)\"\n        @ffmpeg -v error -i \"$<\" -codec:a libmp3lame \\\n            -q:a $(XCODE_MP3_QUALITY) \"$(@)\"\n```\n\n"
    },
    {
      "title": "Without FFmpeg",
      "level": 3,
      "content": "If for some reason FFmpeg is not installed and you do not want to install it, you still need to have flac and lame installed. Here, the tagging process is more explicit using the metadata utility that comes with flac and passing the information to lame. The process duration will slightly increase since FLACs must first be decoded to WAVE and then fed into the MP3 encoder.\n\n```\n#!/bin/bash\n\nfor a in ./*.flac; do\n  # give output correct extension\n  OUTF=\"${a[@]/%flac/mp3}\"\n\n  # get the tags\n  ARTIST=$(metaflac \"$a\" --show-tag=ARTIST | sed s/.*=//g)\n  TITLE=$(metaflac \"$a\" --show-tag=TITLE | sed s/.*=//g)\n  ALBUM=$(metaflac \"$a\" --show-tag=ALBUM | sed s/.*=//g)\n  GENRE=$(metaflac \"$a\" --show-tag=GENRE | sed s/.*=//g)\n  TRACKNUMBER=$(metaflac \"$a\" --show-tag=TRACKNUMBER | sed s/.*=//g)\n  DATE=$(metaflac \"$a\" --show-tag=DATE | sed s/.*=//g)\n\n  # stream flac into the lame encoder\n  flac -c -d \"$a\" | lame -V0 --add-id3v2 --pad-id3v2 --ignore-tag-errors \\\n    --ta \"$ARTIST\" --tt \"$TITLE\" --tl \"$ALBUM\"  --tg \"${GENRE:-12}\" \\\n    --tn \"${TRACKNUMBER:-0}\" --ty \"$DATE\" - \"$OUTF\"\ndone\n```\n\n"
    },
    {
      "title": "Recursively",
      "level": 3,
      "content": "A useful extension of the above scripts is to let them recurse into all subdirectories of the working directory. To do so, replace the first line (for .... do) with:\n\n```\nfind -type f -name \"*.flac\" -print0 | while read -d $'\\0' a; do\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- https://www.xiph.org/flac/\n- Wikipedia:FLAC\n- https://lame.sourceforge.net/\n- https://wiki.hydrogenaudio.org/index.php?title=Flac - More information on FLAC.\n- CUE Splitting to split a single FLAC with cue sheet into multiple audio files\n\n"
    }
  ]
}