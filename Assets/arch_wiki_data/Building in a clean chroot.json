{
  "title": "Building in a clean chroot",
  "url": "https://wiki.archlinux.org/title/Building_in_a_clean_chroot",
  "sections": [
    {
      "title": "Why",
      "level": 2,
      "content": "Building in a clean chroot prevents missing dependencies in packages, whether due to unwanted linking or packages missing in the depends array in the PKGBUILD. It also allows users to build a package for the stable repositories (core, extra) while having packages from core-testing or extra-testing installed.\n\n"
    },
    {
      "title": "Convenience way",
      "level": 2,
      "content": "To quickly build a package in a clean chroot without any further tinkering, one can use the helper scripts from the devtools package.\n\nThese helper scripts should be called in the same directory where the PKGBUILD is, just like with makepkg. For instance, extra-x86_64-build automatically sets up a chroot from a clean chroot matrix in /var/lib/archbuild, updates it, and builds a package for the extra repository. For multilib builds there is just multilib-build without an architecture. Consult the table below for information on which script to use when building for a specific repository and architecture.\n\nThe -c parameter resets the chroot matrix, which can be useful in case of breakage. It is not needed for building in a clean chroot.\n\n- core is omitted because those packages are required to go through core-testing first before landing in core.\n- If the objective is to build a core package for your own local usage, it may be desirable to use the stable repositories instead of the testing ones. In this case you may simply use the extra build scripts.\n\nTable content:\nTarget repository | Architecture | Build script to use | Pacman configuration file used\nextra | x86_64 | extra-x86_64-build | /usr/share/devtools/pacman.conf.d/extra.conf\ncore-testing / extra-testing | x86_64 | extra-testing-x86_64-build | /usr/share/devtools/pacman.conf.d/extra-testing.conf\ncore-staging / extra-staging | x86_64 | extra-staging-x86_64-build | /usr/share/devtools/pacman.conf.d/extra-staging.conf\nmultilib | x86_64 | multilib-build | /usr/share/devtools/pacman.conf.d/multilib.conf\nmultilib-testing | x86_64 | multilib-testing-build | /usr/share/devtools/pacman.conf.d/multilib-testing.conf\nmultilib-staging | x86_64 | multilib-staging-build | /usr/share/devtools/pacman.conf.d/multilib-staging.conf\n\n"
    },
    {
      "title": "Setting up a chroot",
      "level": 3,
      "content": "The devtools package provides tools for creating and building within clean chroots. Install it if not done already.\n\nTo make a clean chroot, create a directory in which the chroot will reside. For example, $HOME/chroot.\n\n```\n$ mkdir ~/chroot\n```\n\nDefine the CHROOT variable:\n\n```\n$ CHROOT=$HOME/chroot\n```\n\nNow create the chroot (the sub directory root is required because the $CHROOT directory will get other sub directories for clean working copies):\n\n```\n$ mkarchroot $CHROOT/root base-devel\n```\n\n- One can also define the CHROOT variable in $HOME/.bashrc using the export command if the location is to be repeatedly used.\n- On btrfs, the chroot is created as a subvolume, so you have to remove it by removing the subvolume by running btrfs subvolume delete $CHROOT/root as root.\n\nEdit ~/.makepkg.conf to set the packager name and any makeflags. Also adjust the mirrorlist in $CHROOT/root/etc/pacman.d/mirrorlist and enable the testing repositories in $CHROOT/root/etc/pacman.conf, if desired.\n\n"
    },
    {
      "title": "Custom pacman.conf",
      "level": 4,
      "content": "Alternatively, provide a custom pacman.conf and makepkg.conf with the following:\n\n```\n$ mkarchroot -C <pacman.conf> -M <makepkg.conf> $CHROOT/root base-devel\n```\n\n"
    },
    {
      "title": "Building in the chroot",
      "level": 3,
      "content": "Firstly, make sure the base chroot ($CHROOT/root) is up to date:\n\n```\n$ arch-nspawn $CHROOT/root pacman -Syu\n```\n\nThen, build a package by calling makechrootpkg in the directory containing its PKGBUILD:\n\n```\n$ makechrootpkg -c -r $CHROOT\n```\n\n"
    },
    {
      "title": "Pre-install required packages",
      "level": 4,
      "content": "To build a package with dependencies unavailable from the repositories enabled in $CHROOT/root/pacman.conf, pre-install them to the working chroot with -I package:\n\n```\n$ makechrootpkg -c -r $CHROOT -I build-dependency-1.0-1-x86_64.pkg.tar.xz -I required-package-2.0-2-x86_64.pkg.tar.xz\n```\n\n"
    },
    {
      "title": "Passing arguments to makepkg",
      "level": 4,
      "content": "To pass arguments to makepkg, list them after an end-of-options marker; e.g., to force a check():\n\n```\n$ makechrootpkg -c -r $CHROOT -- --check\n```\n\n"
    },
    {
      "title": "Handling major rebuilds",
      "level": 2,
      "content": "The cleanest way to handle a major rebuild is to use the staging repositories. Build the first package against extra and push it to staging. Then rebuild all following packages against staging and push them there.\n\nIf you cannot use staging, you can build against custom packages using a command like this:\n\n```\n# extra-x86_64-build -- -I ~/packages/foobar/foobar-2-1-any.pkg.tar.xz\n```\n\nYou can specify more than one package to be installed using multiple -I arguments.\n\nA simpler, but dirtier way to handle a major rebuild is to install all built packages in the chroot, never cleaning it. Build the first package using:\n\n```\n# extra-x86_64-build\n```\n\nAnd build all following packages using:\n\n```\n# makechrootpkg -n -r /var/lib/archbuild/extra-x86_64\n```\n\nRunning namcap (the -n argument) implies installing the package in the chroot. *-build also does this by default.\n\n"
    },
    {
      "title": "Build in tmpfs",
      "level": 3,
      "content": "If the system has enough RAM, it is possible to specify a tmpfs for the devtools build scripts.\n\n```\n# mount --mkdir -t tmpfs -o defaults,size=20G tmpfs /mnt/chroots/arch\n# extra-x86_64-build -c -r /mnt/chroots/arch\n```\n\n"
    }
  ]
}