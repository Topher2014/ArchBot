{
  "title": "Blueman",
  "url": "https://wiki.archlinux.org/title/Blueman",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Blueman is a full featured Bluetooth manager written in Python and using GTK.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install either blueman or blueman-gitAUR for the development version.\n\nBe sure to enable the Bluetooth unit and start Blueman with blueman-applet. A graphical settings panel can be launched with blueman-manager.\n\n"
    },
    {
      "title": "Autostarting",
      "level": 3,
      "content": "The following autostart file should have been created: /etc/xdg/autostart/blueman.desktop. This means that Blueman should be autostarted with most desktop environments without manual intervention. See the article for your desktop environment or window manager as well as the Autostarting article for further information on autostarting.\n\n"
    },
    {
      "title": "Permissions",
      "level": 3,
      "content": "To receive files remember to right click on the Blueman tray icon > Local Services > Transfer > File Receiving (Object Push) and tick the Accept files from trusted devices box.\n\nTo be able to manage devices, you might need to add your user to the lp group, else you might receive the following error when connecting to a device: DBusFailedError: No such file or directory. This is because the user needs to be authorized to communicate with the Bluetooth daemon via D-Bus - the lp group is specified in /etc/dbus-1/system.d/bluetooth.conf. For information on adding a user to a group, see Users and groups#Other examples of user management.\n\nFrom version 2.0.6 the official documentation recommends creating polkit rules in order to avoid polkit agents asking for password on every boot, as root user add the following polkit rules:\n\n```\n/etc/polkit-1/rules.d/51-blueman.rules\n```\n\n```\n/* Allow users in wheel group to use blueman feature requiring root without authentication */\npolkit.addRule(function(action, subject) {\n    if ((action.id == \"org.blueman.network.setup\" ||\n         action.id == \"org.blueman.dhcp.client\" ||\n         action.id == \"org.blueman.rfkill.setstate\" ||\n         action.id == \"org.blueman.pppd.pppconnect\") &&\n        subject.isInGroup(\"wheel\")) {\n\n        return polkit.Result.YES;\n    }\n});\n```\n\nNote that users must belong to the wheel group.\n\n"
    },
    {
      "title": "Mounting Bluetooth devices",
      "level": 3,
      "content": "The instructions below describe a method for using different file managers with Blueman. The examples in this section focus on Thunar. If you are using a different file manager, substitute thunar with the name of the file manager you are using.\n\n```\nobex_thunar.sh\n```\n\n```\n#!/bin/bash\n[Â ! -d ~/Bluetooth ] && mkdir ~/Bluetooth   \nfusermount -u ~/Bluetooth\nobexfs -b $1 ~/Bluetooth\nthunar ~/Bluetooth\n```\n\nNow you will need to move the script to an appropriate location (e.g., /usr/local/bin). After that, mark it as executable.\n\nThe last step is to change the line in Blueman tray icon > Local Services > Transfer > Advanced to obex_thunar.sh %d.\n\n"
    },
    {
      "title": "Blueman and PulseAudio",
      "level": 3,
      "content": "Users who want to use PulseAudio with a Bluetooth headset, in addition to installing pulseaudio-bluetooth, may want to activate the PulseAudio plugin of Blueman. This automatically loads PulseAudio Bluetooth module after audio device is connected and plays all audio through the Bluetooth headset. For more information see Bluetooth headset.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Configuration is done through dconf (or gsettings or dconf-editor) under /org/blueman.\n\n"
    },
    {
      "title": "Disable auto power-on",
      "level": 3,
      "content": "Blueman automatically enables the Bluetooth adapter (rfkill unblock bluetooth) when certain events (on boot, laptop lid is opened, ...) occur. This can be disabled with the auto-power-on in org.blueman.plugins.powermanager:\n\n```\n$ gsettings set org.blueman.plugins.powermanager auto-power-on false\n```\n\n"
    },
    {
      "title": "Receive notifications through a notification daemon",
      "level": 3,
      "content": "Blueman can send notifications through a notification daemon (e.g. dunst) if present. In case of unavailability of a notification daemon, blueman uses a window-based fallback. This behavior can be configured by toggling the notification-daemon setting in org.blueman.general\n\n```\n$ gsettings set org.blueman.general notification-daemon true\n```\n\n"
    },
    {
      "title": "No adapters detected",
      "level": 3,
      "content": "If your Bluetooth applet or manager does not show or detect any Bluetooth adapter, your wireless card may be blocked. Try un-block it using rfkill.\n\n"
    },
    {
      "title": "Cannot receive files",
      "level": 3,
      "content": "If you cannot send or receive files and you encounter a python-dbus-exception error similar or exactly like process org.bluez.obex exited with status 1 then it is advised to start the obexd-service manually from /usr/lib/bluetooth/obexd and see if that helps. Since the default permissions assume 755 it is possible to start the daemon from a user-account.\n\nStart it with this line:\n\n```\n# /usr/lib/bluetooth/obexd -n\n```\n\nLet the terminal in which the command runs open and test if sending files work. Check if you actually receive the file. You can add the command to your autostarter so you will not have to manually start the service every time. Your desktop environment autostarter should be able to run the program once you login. Logout and login and you should be able to receive files without running the line manually now.\n\nShould the error persist or another occur then try using ObexFTP for file transfers instead.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Blueman development, on GitHub\n\n"
    }
  ]
}