{
  "title": "Universal Wayland Session Manager",
  "url": "https://wiki.archlinux.org/title/Universal_Wayland_Session_Manager",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "The Universal Wayland Session Manager (uwsm) wraps standalone Wayland compositors into a set of systemd units on the fly. This provides robust session management including environment, XDG Autostart support, bi-directional binding with login session, and clean shutdown.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the uwsm package.\n\n"
    },
    {
      "title": "Service startup notification and vars set by compositor",
      "level": 3,
      "content": "In order to find the current compositor, a Wayland application run as a systemd service needs the WAYLAND_DISPLAY environment variable (or DISPLAY if they are intended to run through Xwayland). Therefore this and other useful environment variables should be put into the systemd/dbus activation environment once the compositor has set their values.\n\nThe command uwsm finalize puts WAYLAND_DISPLAY, DISPLAY and other environment variables listed via the white-space separated UWSM_FINALIZE_VARNAMES list into the activation environment. It is recommended to execute this command after the compositor is ready.\n\nIf other variables set by the compositors are needed in the activation environment, they can be passed as arguments to uwsm finalize or put into a white-space separated list in UWSM_FINALIZE_VARNAMES. See the examples below:\n\n```\nexec uwsm finalize VAR1 VAR2 ...\nexport UWSM_FINALIZE_VARNAMES=VAR1 VAR2 ...\n```\n\n"
    },
    {
      "title": "Environment variables",
      "level": 3,
      "content": "All environment variables set in ${XDG_CONFIG_HOME}/uwsm/env are sourced by uwsm and available to all managed compositors and graphical applications run inside such a session.\n\nIf you need certain environment variables to be set only for a specific compositor (and graphical applications in that graphical session), then put them in ${XDG_CONFIG_HOME}/uwsm/env-compositor instead.\n\nAn example of such a file can be seen below:\n\n```\n~/.config/uwsm/env\n```\n\n```\nexport KEY1=VAR1\nexport KEY2=VAR2\nexport KEY3=VAR3\n...\n```\n\n"
    },
    {
      "title": "Startup",
      "level": 3,
      "content": "uwsm can be started both by TTY and by a display manager.\n\n"
    },
    {
      "title": "TTY",
      "level": 4,
      "content": "Add in your ~/.profile file:\n\n```\nif uwsm check may-start && uwsm select; then\n  exec uwsm start default\nfi\n```\n\nIf you want to always start the same compositor, then you can use instead in your ~/.profile file:\n\n```\nif uwsm check may-start; then\n  exec uwsm start compositor.desktop\nfi\n```\n\n"
    },
    {
      "title": "Display manager",
      "level": 4,
      "content": "You can create a custom session desktop entry which starts your compositor through uwsm:\n\n```\n/usr/share/wayland-sessions/my-compositor-uwsm.desktop\n```\n\n```\n[Desktop Entry]\nName=My compositor (with UWSM)\nComment=My cool compositor, UWSM session\n\n# either full command line with metadata and executable\nExec=uwsm start -N \"My compositor\" -D mycompositor:mylib -C \"My cool compositor\" -- my-compositor\n\n# or a reference to another entry\nExec=uwsm start -- my-compositor.desktop\n\nDesktopNames=mycompositor;mylib\nType=Application\n```\n\n"
    },
    {
      "title": "Session termination",
      "level": 3,
      "content": "If you want to terminate the current uwsm session, then you should use either loginctl terminate-user \"\" (terminates the entire user session) or uwsm stop (executes code after uwsm start or terminates user session, if it replaced the login shell).\n\n"
    },
    {
      "title": "Applications and autostart",
      "level": 3,
      "content": "By default uwsm launches compositors through a custom systemd service in session.slice. Many Wayland compositors allow you to start other applications that would then be launched inside the compositor service, which would uselessly consume compositor resources or even interfere with notification sockets.\n\nTo start applications as separate systemd scope units you can use uwsm app, which can launch both executables\n\n```\nuwsm app -- /my/program/path\n```\n\nand desktop entries\n\n```\nuwsm app -- myprogram.desktop\n```\n\nBy default uwsm puts launched scope units in app-graphical.slice slice. If you want to put them in background-graphical.slice or session-graphical.slice, then you should respectively use options -s b, -s s:\n\n```\nuwsm app -s b -- background-app.desktop\n```\n\nInstead of uwsm app (which run as a Python script) you can instead use app2unit-gitAUR, which is generally faster since it is a shell script. You can use it as a drop-in replacement of uwsm app by setting the APP2UNIT_SLICES environment variable as follows:\n\n```\nAPP2UNIT_SLICES='a=app-graphical.slice b=background-graphical.slice s=session-graphical.slice'\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- uwsm(1)\n\n"
    }
  ]
}