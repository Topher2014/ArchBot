{
  "title": "PulseAudio Examples",
  "url": "https://wiki.archlinux.org/title/PulseAudio_Examples",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- PulseAudio/Troubleshooting\n\n"
    },
    {
      "title": "Creating user configuration files",
      "level": 2,
      "content": "System-wide configuration files are located under /etc/pulse/ while user configuration files are located under $XDG_CONFIG_HOME/pulse/, which defaults to ~/.config/pulse/. For the examples below which modify the user's configuration file it may be necessary to first create the file. This can be done either by copying the system file under /etc/pulse/ to the user's configuration directory, or by creating a new file that includes it with the syntax .include /etc/pulse/name. For simple changes the latter is preferred because the user will not be required to update the file when system-wide defaults change.\n\n"
    },
    {
      "title": "User client configuration file example",
      "level": 3,
      "content": "```\n~/.config/pulse/client.conf\n```\n\n```\n.include /etc/pulse/client.conf\n# User's directives go here.\n```\n\nThis syntax works for default.pa, daemon.conf and system.pa, even if the latter makes no sense as a user configuration file.\n\nNote: Errors in such as Sink alsa_output.pci-0000_03_00.0.analog-stereo does not exist. may indirectly indicate such whitespace.\n\nErrors in such as Sink alsa_output.pci-0000_03_00.0.analog-stereo does not exist. may indirectly indicate such whitespace.\n\n"
    },
    {
      "title": "Set default input source",
      "level": 2,
      "content": "List available input sources:\n\n```\n$ pacmd list-sources | grep -e 'index:' -e device.string -e 'name:'\n```\n\n```\nindex: 0\n    name: <input>\n      device.string = \"hw:2\"\n* index: 1\n    name: <oss_input.dsp>\n      device.string = \"/dev/dsp\"\n  index: 2\n    name: <alsa_output.pci-0000_04_01.0.analog-stereo.monitor>\n```\n\nThe * in front of the index indicates the current default input.\n\nTo set a system wide default, add the source name in the default.pa file:\n\n```\n/etc/pulse/default.pa\n```\n\n```\n...\nset-default-source alsa_output.pci-0000_04_01.0.analog-stereo.monitor\n...\n```\n\nFor temporary use:\n\n```\n$ pacmd set-default-source alsa_output.pci-0000_04_01.0.analog-stereo.monitor\n```\n\n"
    },
    {
      "title": "Set the default output sink",
      "level": 2,
      "content": "To list the output sinks available, type the following command:\n\n```\n$ pacmd list-sinks | grep -e 'name:' -e 'index:'\n```\n\n```\n* index: 0\n\tname: <alsa_output.pci-0000_04_01.0.analog-stereo>\n    index: 1\n\tname: <combined>\n```\n\nThe * in front of the index indicates the current default output.\n\nTo set a system wide default, add the source name in the default.pa file:\n\n```\n/etc/pulse/default.pa\n```\n\n```\n...\nset-default-sink alsa_output.pci-0000_04_01.0.analog-stereo\n...\n```\n\nor per-user configuration default.pa file (which loads the default configuration from /etc/pulse/default.pa and overwrites the lines specified in this file):\n\n```\n~/.config/pulse/default.pa\n```\n\n```\n.include /etc/pulse/default.pa\n...\nset-default-sink alsa_output.pci-0000_04_01.0.analog-stereo\n...\n```\n\nWhen done then you can logout/login or restart PulseAudio manually for these changes to take effect.\n\n- The numbering of sinks is not guaranteed to be persistent, so all sinks in the default.pa file should be identified by the name.\n- For quick identification at runtime (e.g. to manage sound volume), you can use the sink index instead of the sink name: $ pactl set-sink-volume 0 +3% $ pactl set-sink-volume 0 -3% $ pactl set-sink-mute 0 toggle\n- To avoid unnecessary overriding of 100% normal volume it is better to use alternative utilities for managing of sound. See the forum thread for more information.\n\n```\n$ pactl set-sink-volume 0 +3%\n$ pactl set-sink-volume 0 -3%\n$ pactl set-sink-mute 0 toggle\n```\n\n"
    },
    {
      "title": "Set the default output sink profile",
      "level": 2,
      "content": "Sometimes PulseAudio neglects to load the desired profile on start (e.g. a profile for having #Independent analog and digital outputs on the same card). To change the default profile, append the following to default.pa:\n\n```\n/etc/pulse/default.pa\n```\n\n```\n...\nset-card-profile symbolic-name profile-name\n```\n\nFind symbolic-name by running:\n\n```\n$ pacmd list-cards\n```\n\n```\n3 card(s) available.\n    index: 0\n\tname: <alsa_card.pci-0000_01_00.1>\n\tdriver: <module-alsa-card.c>\n\towner module: 6\n        (...)\n\n    index: 1\n\tname: <alsa_card.usb-Sony_Interactive_Entertainment_Wireless_Controller-00>\n\tdriver: <module-alsa-card.c>\n\towner module: 7\n        (...)\n\n    index: 2\n\tname: <alsa_card.pci-0000_00_14.2>\n\tdriver: <module-alsa-card.c>\n\towner module: 8\n\t(...)\n```\n\nFor example, if you want to use the device with index number 2, its symbolic-name is alsa_card.pci-0000_00_14.2.\n\nTo find profile-name, set the desired profile manually (e.g. using pavucontrol), then run:\n\n```\n$ pacmd list-cards | grep 'active profile'\n```\n\n```\nactive profile: <off>\n\tactive profile: <off>\n\tactive profile: <output:analog-stereo+output:iec958-stereo+input:analog-stereo>\n```\n\nIn this case, default.pa should now be changed to this:\n\n```\n/etc/pulse/default.pa\n```\n\n```\n...\nset-card-profile alsa_card.pci-0000_00_14.2 output:analog-stereo+output:iec958-stereo+input:analog-stereo\n```\n\nYou can test your configuration by running pactl set-card-profile symbolic-name profile-name.\n\n"
    },
    {
      "title": "Independent analog and digital outputs on the same card",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nSound cards may have both analog and digital (iec958) outputs. PulseAudio does not generate combined profiles by default, you can choose either digital or analog profiles.\n\nThe easiest way to make both outputs available is to add a combined profile to the end of default profile configuration file:\n\n```\n/usr/share/pulseaudio/alsa-mixer/profile-sets/default.conf\n```\n\n```\n...\n# Profile must be a '+' separated list of relevant mappings configured above\n[Profile output:analog-stereo+output:iec958-stereo+input:analog-stereo]\n# Human readable description\ndescription = Analog and digital stereo output and analog stereo input\noutput-mappings = analog-stereo iec958-stereo\ninput-mappings = analog-stereo\n```\n\nThis way a defined profile is added to the end of the list of available profiles.\n\nAlthough this works, PulseAudio has a nasty habit of falling back to auto-generated profiles, so you may eventually need to set your card back to the combined profile. The best way to overcome this is by writing a custom configuration with disabled auto-profiles. Copy default.conf to custom-profile.conf, and edit it to suit your needs (this example is for stereo output/input):\n\n```\n/usr/share/pulseaudio/alsa-mixer/profile-sets/custom-profile.conf\n```\n\n```\n[General]\nauto-profiles = no # disable profile auto-generation\n# Leave only relevant mappings:\n[Mapping analog-stereo]\ndevice-strings = front:%f\nchannel-map = left,right\npaths-output = analog-output analog-output-lineout analog-output-speaker analog-output-headphones analog-output-headphones-2\npaths-input = analog-input-front-mic analog-input-rear-mic analog-input-internal-mic analog-input-dock-mic analog-input analog-input-mic analog-input-linein analog-input-aux analog-input-video analog-input-tvtuner analog-input-fm analog-input-mic-line analog-input-headphone-mic analog-input-headset-mic\npriority = 15\n\n[Mapping iec958-stereo]\ndevice-strings = iec958:%f\nchannel-map = left,right\npaths-input = iec958-stereo-input\npaths-output = iec958-stereo-output\npriority = 5\n\n[Profile output:analog-stereo+output:iec958-stereo+input:analog-stereo]\ndescription = Analog and digital stereo output and analog stereo input\noutput-mappings = analog-stereo iec958-stereo\ninput-mappings = analog-stereo\nskip-probe=yes # since you know what your sound card has, there is no need for checking which sinks are available\n```\n\nNow that you have your custom profile you need to tell PulseAudio to use it. This can be done by defining an udev rule.\n\nFirst get relevant information about your sound card:\n\n```\n$ pactl list cards\n```\n\n```\nCard #0\n        Name: alsa_card.pci-0000_00_1b.0\n--- snip ---\n        Properties:\n--- snip ---\n                device.vendor.id = \"8086\" # This is a 'vendor' attribute for udev rule\n                device.product.id = \"1c20\" # This is a 'device' attribute for udev rule\n```\n\nNow create a configuration file:\n\n```\n/usr/lib/udev/rules.d/91-pulseaudio-custom.rules\n```\n\n```\nSUBSYSTEM!=\"sound\", GOTO=\"pulseaudio_end\"\nACTION!=\"change\", GOTO=\"pulseaudio_end\"\nKERNEL!=\"card*\", GOTO=\"pulseaudio_end\"\n\nSUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x8086\", ATTRS{device}==\"0x1c20\", ENV{PULSE_PROFILE_SET}=\"custom-profile.conf\"\n\nLABEL=\"pulseaudio_end\"\n```\n\nNow tell udev to reload sound subsystem udevadm trigger -ssound (as the root user) and restart PulseAudio. Your sound card should now use only the defined profile and have both analog and digital outputs available.\n\n"
    },
    {
      "title": "Simultaneous HDMI and analog output",
      "level": 2,
      "content": "PulseAudio allows for simultaneous output to multiple sources. In this example, some applications are configured to use HDMI while others are configured to use analog. Multiple applications are able to receive audio at the same time. (aplay is from the alsa-utils package.)\n\n```\n$ aplay -l\n```\n\n```\n**** List of PLAYBACK Hardware Devices ****\ncard 0: Intel [HDA Intel], device 0: ALC889A Analog [ALC889A Analog]\n  Subdevices: 0/1\n  Subdevice #0: subdevice #0\ncard 0: Intel [HDA Intel], device 1: ALC889A Digital [ALC889A Digital]\n  Subdevices: 1/1\n  Subdevice #0: subdevice #0\ncard 0: Intel [HDA Intel], device 3: HDMI 0 [HDMI 0]\n  Subdevices: 0/1\n  Subdevice #0: subdevice #0\n```\n\nOr by using the pacmd command:\n\n```\n$ pacmd list-sinks | grep -e 'name:' -e 'alsa.card ' -e 'alsa.device '\n```\n\n```\nname: <alsa_output.pci-0000_00_1b.0.analog-stereo>\n\t\talsa.device = \"0\"\n\t\talsa.card = \"0\"\n```\n\nThe key to a configuration like this is to understand that whatever is selected in pavucontrol under Configuration > Internal Audio is the default device. Load pavucontrol > Configuration and select HDMI as the profile.\n\nTo setup the analog device as a secondary source, add the following to /etc/pulse/default.pa or ~/.config/pulse/default.pa:\n\n```\n### Load analog device\nload-module module-alsa-sink device=hw:card,device\nload-module module-combine-sink sink_name=combined\nset-default-sink combined\n```\n\nRestart PulseAudio, run pavucontrol and select the Output Devices tab. Three settings should be displayed:\n\n1. Internal Audio Digital Stereo (HDMI)\n1. Internal Audio\n1. Simultaneous output to Internal Audio Digital Stereo (HDMI), Internal Audio\n\nNow start a program that will use PulseAudio such as MPlayer, VLC, mpd, etc. and switch to the Playback tab. A drop-down list should be available for the running program to select one of the three sources.\n\nAlso see this thread for a variation on this theme and PulseAudio FAQ.\n\n"
    },
    {
      "title": "Alternative solution using module-loopback with delay compensation",
      "level": 3,
      "content": "If the example above does not work for you, for instance because of echos / delays, you can try the following configuration.\n\nIn this case, the HDMI-Audio was 65ms behind analog when using module-combine-sink.\n\nAdd these lines somewhere before load-module module-udev-detect to make sure it will not conflict with this manual configuration.\n\n```\n/etc/pulse/default.pa\n```\n\n```\n[...]\nload-module module-alsa-sink device=hw:0,0 sink_name=analog sink_properties=device.description=analog\nload-module module-alsa-sink device=hw:0,1 sink_name=digital sink_properties=device.description=digital\nload-module module-alsa-sink device=hw:0,3 sink_name=hdmi sink_properties=device.description=hdmi\nload-module module-loopback sink=analog latency_msec=65\n[...]\nset-default-sink hdmi\n```\n\n"
    },
    {
      "title": "Simultaneous output to multiple HDMI / DisplayPort outputs",
      "level": 2,
      "content": "By default, PulseAudio uses only one HDMI / DisplayPort output per device. It allows you to choose an output by setting a profile, but does not allow to use multiple outputs at the same time. As a workaround, you can manually add another output as a separate PulseAudio device.\n\n"
    },
    {
      "title": "Finding HDMI / DisplayPort output",
      "level": 3,
      "content": "Find the working output by listing the available cards:\n\n```\n$ aplay -l\n```\n\n```\n**** List of PLAYBACK Hardware Devices ****\n card 0: NVidia [HDA NVidia], device 0: ALC1200 Analog [ALC1200 Analog]\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n card 0: NVidia [HDA NVidia], device 3: ALC1200 Digital [ALC1200 Digital]\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n card 1: NVidia_1 [HDA NVidia], device 3: HDMI 0 [HDMI 0]\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n card 1: NVidia_1 [HDA NVidia], device 7: HDMI 0 [HDMI 0]\n   Subdevices: 0/1\n   Subdevice #0: subdevice #0\n card 1: NVidia_1 [HDA NVidia], device 8: HDMI 0 [HDMI 0]\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n card 1: NVidia_1 [HDA NVidia], device 9: HDMI 0 [HDMI 0]\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n```\n\nIn case your HDMI / DisplayPort output is wired to the NVIDIA card, but aplay does not detect an NVIDIA audio card, follow NVIDIA/Troubleshooting#No audio over HDMI.\n\n"
    },
    {
      "title": "Testing for the correct card",
      "level": 3,
      "content": "Now that we have a list of detected cards and devices, users will need to test for which one is outputting to the TV/monitor; for example, to test card 1, device 3 from the list above:\n\n```\n$ aplay -D plughw:1,3 /usr/share/sounds/alsa/Front_Right.wav\n```\n\nIf you get Device or resource busy, this probably means the device is already being used by PulseAudio; you may need to stop it temporarily.\n\nIf there is no audio, then try substituting a different card and/or device number. In this example, the TV/monitor is connected to card 1, device 7.\n\n"
    },
    {
      "title": "Manually configuring PulseAudio to add the additional output",
      "level": 3,
      "content": "Having identified which HDMI / DisplayPort device is working, PulseAudio can be forced to use it by creating a .pa configuration file in /etc/pulse/default.pa.d/:\n\n```\nload-module module-alsa-sink device=hw:1,7\n```\n\nwhere the 1 is the card and the 7 is the device found to work in the previous section.\n\nRestart PulseAudio:\n\n```\n$ pulseaudio -k\n$ pulseaudio --start\n```\n\nBoth outputs should now be available as separate devices (see the Output Devices tab in pavucontrol).\n\nIf the second device does not appear, this may be because the output you chose is already used by PulseAudio by default; change it by choosing a different profile (you can use the Configuration tab in pavucontrol), or set a different output in the configuration file you created, then restart PulseAudio.\n\nThe Playback tab in pavucontrol allows you to route applications to specific outputs.\n\nIf you want to output the same audio to both outputs, you can use module-combine-sink or module-loopback in a way similar to that described in #Simultaneous HDMI and analog output (but you do not need to add load-module module-alsa-sink because you have already added it).\n\n"
    },
    {
      "title": "Automatically switch audio to HDMI / DisplayPort",
      "level": 3,
      "content": "Instead of creating an additional PulseAudio device, you can create a script to switch to the desired audio profile if an HDMI / DisplayPort cable is plugged in (adapt the names of all devices to match your system):\n\n```\n/usr/local/bin/hdmi_sound_toggle.sh\n```\n\n```\n#!/bin/bash\n\nexport PATH=/usr/bin\n\nUSER_NAME=$(who | awk -v vt=tty$(fgconsole) '$0 ~ vt {print $1}')\nUSER_ID=$(id -u \"$USER_NAME\")\nCARD_PATH=\"/sys/class/drm/card0/\"\nAUDIO_OUTPUT=\"analog-surround-40\"\nPULSE_SERVER=\"unix:/run/user/\"$USER_ID\"/pulse/native\"\n\nfor OUTPUT in $(cd \"$CARD_PATH\" && echo card*); do\n  OUT_STATUS=$(<\"$CARD_PATH\"/\"$OUTPUT\"/status)\n  if [[ $OUT_STATUS == connected ]]\n  then\n    echo $OUTPUT connected\n    case \"$OUTPUT\" in\n      \"card0-HDMI-A-1\")\n        AUDIO_OUTPUT=\"hdmi-stereo\" # Digital Stereo (HDMI 1)\n     ;;\n      \"card0-HDMI-A-2\")\n        AUDIO_OUTPUT=\"hdmi-stereo-extra1\" # Digital Stereo (HDMI 2)\n     ;;\n    esac\n  fi\ndone\necho selecting output $AUDIO_OUTPUT\nsleep 0.2 # prevents sound issues caused by switching too fast\nsudo -u \"$USER_NAME\" pactl --server \"$PULSE_SERVER\" set-card-profile 0 output:$AUDIO_OUTPUT+input:analog-stereo\n```\n\nMake the script executable.\n\nCreate a udev rule to run this script when the status of the HDMI / DisplayPort change:\n\n```\n/etc/udev/rules.d/99-hdmi_sound.rules\n```\n\n```\nKERNEL==\"card0\", SUBSYSTEM==\"drm\", ACTION==\"change\", RUN+=\"/usr/local/bin/hdmi_sound_toggle.sh\"\n```\n\nTo make the change effective do not forget to reload the udev rules:\n\n```\n# udevadm control --reload-rules\n```\n\nA reboot might be required.\n\n"
    },
    {
      "title": "Surround sound systems",
      "level": 2,
      "content": "Many people have a surround sound card, but have speakers for just two channels, so PulseAudio cannot really default to a surround sound setup. To enable all of the channels, edit /etc/pulse/daemon.conf: uncomment the default-sample-channels line (i.e. remove the semicolon from the beginning of the line) and set the value to 6 for a 5.1 setup, or 8 for a 7.1 setup etc.\n\n```\n# Default\ndefault-sample-channels=2\n# For 5.1\ndefault-sample-channels=6\n# For 7.1\ndefault-sample-channels=8\n```\n\nIf your channels are not correctly mapped or the volume controls for the individual channels do not work as expected in pavucontrol, and you have a HDMI and an analog soundcard, then try to add the following line to /etc/pulse/default.pa\n\n```\nload-module module-combine channels=6 channel_map=front-left,front-right,rear-left,rear-right,front-center,lfe\n```\n\nNote that this example is for a 5.1 setup.\n\nAfter doing the edit, restart PulseAudio.\n\n"
    },
    {
      "title": "Disabling UCM/\"HiFi\"",
      "level": 3,
      "content": "Most guides to making surround sound work with PulseAudio will tell you that you need to select the correct surround sound profile for your card/HDMI output, which you can do using the Configuration tab in pavucontrol. However, you may find that the only profile for your card is \"HiFi: Play HiFi quality Music\", which is not a surround sound profile. You may then waste far too much time trying to create a profile for your card, or set up udev rules correctly, neither of which will do anything.\n\nWhat is actually happening here is that you have alsa-ucm-conf installed, and so PulseAudio is ignoring its own profiles and trying to use ALSA Use Case Manager profiles instead. Unfortunately, if ALSA UCM does not have a useful profile for your card, you are stuck with the default 2-channel \"HiFi\" instead. Fortunately, you can fix this by switching back to PulseAudio profiles, which default to a surround sound configuration for surround sound capable sound cards/HDMI outputs.\n\nThe easiest way to do this is to edit /etc/pulse/default.pa as follows:\n\n```\nload-module module-udev-detect use_ucm=0\n```\n\nand then reload the pulseaudio.service user unit.\n\nYour PulseAudio installation will then ignore UCM and use PulseAudio profiles, which, if you have changed your default-sample-channels as per the above instructions, will include a surround sound profile that you can use to output surround sound. You can verify by checking the configuration tab in pavucontrol, where you should no longer see \"HiFi\".\n\n"
    },
    {
      "title": "Splitting front/rear",
      "level": 3,
      "content": "Connect speakers to front analog output and headphones to rear output. It would be useful to split front/rear to separate sinks. Add to /etc/pulse/default.pa:\n\n```\nload-module module-remap-sink sink_name=speakers sink_properties=\"device.description='Speakers'\" remix=no master=alsa_output.pci-0000_05_00.0.analog-surround-40 channels=2 master_channel_map=front-left,front-right channel_map=front-left,front-right\nload-module module-remap-sink sink_name=headphones sink_properties=\"device.description='Headphones'\" remix=no master=alsa_output.pci-0000_05_00.0.analog-surround-40 channels=2 master_channel_map=rear-left,rear-right channel_map=front-left,front-right\n```\n\nMake sure to replace alsa_output.pci-0000_05_00.0.analog-surround-40 with the sound card name shown in pacmd list-sinks.\n\nNow you have 2 additional sinks which can be used separately. You can choose 'sink_name' freely, as long as there is no sink with that name already. The 'remix' parameter controls whether the audio should be down-/upmixed to match the channels in the sink.\n\n"
    },
    {
      "title": "Splitting 7.1 into 5.1+2.0",
      "level": 3,
      "content": "Similar to the example above, you can also split a 7.1 configuration into 5.1 surround and stereo output devices. Set your card to 7.1 mode, then add the following lines to /etc/pulse/default.pa:\n\n```\nload-module module-remap-sink sink_name=Surround sink_properties=\"device.description='Surround'\" remix=no master=alsa_output.pci-0000_00_14.2.analog-surround-71 channels=6 master_channel_map=front-left,front-right,rear-left,rear-right,front-center,lfe channel_map=front-left,front-right,rear-left,rear-right,front-center,lfe\nload-module module-remap-sink sink_name=Stereo sink_properties=\"device.description='Stereo'\" remix=no master=alsa_output.pci-0000_00_14.2.analog-surround-71 channels=2 master_channel_map=side-left,side-right channel_map=front-left,front-right\n```\n\nMake sure to replace alsa_output.pci-0000_00_14.2 with your sound card name, get it by running pacmd list-sinks.\n\nThis configuration will use the front/rear/center+lfe (green/black/orange) jacks for the 5.1 sink and the side (grey) jack for the stereo sink. It will also downmix any audio to stereo for the stereo sink, but will not touch the 5.1 output.\n\n"
    },
    {
      "title": "LFE remixing",
      "level": 3,
      "content": "The low-frequency effects (LFE) or Subwoofer channel is not remixed per default. To enable it, the following needs to be set in /etc/pulse/daemon.conf:\n\n```\n/etc/pulse/daemon.conf\n```\n\n```\nremixing-produce-lfe = yes\nremixing-consume-lfe = yes\n```\n\nYou should also consider to set a proper crossover frequency for the LFE channel. The crossover frequency is the frequency up to which the audio signal is rerouted to the LFE sink. The optimal crossover frequency in Hz depends on the size of all your speakers.\n\n```\n/etc/pulse/daemon.conf\n```\n\n```\nlfe-crossover-freq = 40-200\n```\n\n"
    },
    {
      "title": "Binaural headphones",
      "level": 3,
      "content": "ladspa-bs2bAUR provides a plugin to simulate surround sound on stereo headphones. To use it, find your headphones with:\n\n```\n$ pacmd list-sinks | grep -e 'name:'\n```\n\n```\nname: <alsa_output.pci-0000_00_1b.0.iec958-ac3-surround-51>\n\tname: <alsa_output.pci-0000_00_1b.0.iec958-ac3-surround-51.equalizer>\n\tname: <bluez_sink.00_1F_82_28_93_51>\n```\n\nLoad the plugin (new sink_name is up to you, master=headphone's sink name):\n\n```\n$ pacmd load-module module-ladspa-sink sink_name=binaural master=bluez_sink.00_1F_82_28_93_51 plugin=bs2b label=bs2b control=700,4.5\n```\n\nUse pavucontrol to transfer streams to the new sink, or:\n\n```\n$ pactl move-sink-input sink-input-id binaural-sink-name\n```\n\n"
    },
    {
      "title": "PulseAudio over network",
      "level": 2,
      "content": "One of PulseAudio's unique features is its ability to stream audio from clients over TCP to a server running the PulseAudio daemon reliably within a LAN. Ensure that client and server systems agree on the time (i.e., use NTP), or audio streams may be choppy or may not work at all. For a more detailed guide visit the official PulseAudio documentation.\n\nTo enable the TCP module on the server (the computer that actually outputs sound), create the following .pa file:\n\n```\n/etc/pulse/default.pa.d/tcp.pa\n```\n\n```\nload-module module-native-protocol-tcp\n```\n\nOr you can use the paprefs GUI application (root is not required). Go to Network Server > Enable network access to local sound devices.\n\nTo make sure module-native-protocol-tcp is loaded on the server, you can use:\n\n```\n$ pacmd list-modules | grep module-native-protocol-tcp\n```\n\nIt is a requirement that both the client and server share the same cookie. Ensure that the clients and server share the same cookie file found under ~/.config/pulse/cookie. It does not matter whose cookie file you use (the server or a client's), just that the server and client(s) share the same one.\n\nIf it is undesirable to copy the cookie file from clients, anonymous clients can access the server by passing auth-anonymous to module-native-protocol-tcp on the server (again in /etc/pulse/default.pa.d/):\n\n```\nload-module module-native-protocol-tcp auth-anonymous=1\n```\n\nIt is also possible to authenticate based on client IP address:\n\n```\nload-module module-native-protocol-tcp auth-ip-acl=127.0.0.1;192.168.0.0/24\n```\n\nChange the LAN IP subnet to match that of those clients you wish to have access to the server.\n\n"
    },
    {
      "title": "Selecting the server",
      "level": 3,
      "content": "For a single shell or command you can set the PULSE_SERVER environment variable to the host name or IP address of the desired PulseAudio server:\n\n```\n$ env PULSE_SERVER=server-hostname-or-ip mplayer test.mp3\n```\n\nAlternatively, you can create or modify ~/.config/pulse/client.conf or /etc/pulse/client.conf to set a default-server persistently:\n\n```\ndefault-server = server-hostname-or-ip\n```\n\nIt is also possible to specify multiple servers separated by spaces which are subsequently tried by PulseAudio[2]:\n\n```\ndefault-server = server1 backup\n```\n\n"
    },
    {
      "title": "Selecting the server with Zeroconf",
      "level": 3,
      "content": "For the remote PulseAudio server to appear in the PulseAudio Device Chooser (pasystray), load the appropriate zeroconf modules, and enable the Avahi daemon. On both machines, the client and server, install the pulseaudio-zeroconf package. Start/enable avahi-daemon.service afterwards.\n\nOn the server, add load-module module-zeroconf-publish to /etc/pulse/default.pa. On the client, add load-module module-zeroconf-discover to /etc/pulse/default.pa. Now redirect any stream or complete audio output to the remote PulseAudio server by selecting the appropriate sink.\n\nIf you have issues with the remote syncs appearing on the client, try restarting the Avahi daemon on the server to rebroadcast the available interfaces.\n\nRun the graphical PulseAudio Volume Control pavucontrol. Under the Output Devices tab, you should see the local and remote output devices. Under the Playback tab, to the left of the \"X\" Mute Audio button, you should see a box containing the name of an output device. That box is actually a button, which will display a drop-down radio-button list of the available output devices, with one output device selected. Selecting an output device from the list will allow the audio stream to be switched to the PulseAudio server associated with that output device. This control is not at all obvious until you have used it, and is especially useful with a remote Headless sound server.\n\nSimilarly, under the Input Devices tab, local and remote input devices will be seen. And under the Recording tab, there will be a box, to the left of the \"X\" Mute Audio button, with the name of an input device which is actually a button which will display a drop-down radio-button list of available input devices.\n\n"
    },
    {
      "title": "Using RTP/UDP instead of native-protocol-tcp",
      "level": 3,
      "content": "There are serious issues with trying to send data in real time over TCP, especially over lossy connections like Wi-Fi. This is why RTP over UDP was invented. It can be used to increase reliability and reduce latency.\n\nWhen RTP is working properly, late or dropped packets will just create a few milliseconds of silence instead of a long pause while TCP is orchestrating the packet resend logistics. As an added bonus, if the remote server is ever restarted, the connection will be re-established automatically. However there will no longer be a way to remotely control the server's master volume, with each client machine having its own independent master volume instead.\n\nTo use RTP instead of native-protocol-tcp, PulseAudio clients must connect to a local PulseAudio server first. This local server then connects to the remote PulseAudio server through RTP.\n\nTo use RTP in PulseAudio, install pulseaudio-rtp on the remote and local servers.\n\nTo configure the remote PulseAudio server, add the following to /etc/pulse/default.pa (or to /etc/pulse/system.pa if running PulseAudio in --system mode):\n\n```\nload-module module-rtp-recv latency_msec=10 sap_address=0.0.0.0\n```\n\nsap_address=0.0.0.0 is important to prevent PulseAudio from trying to use multicast, which does not work at all over Wi-Fi. Use latency_msec to tune the receiving buffer size on the remote end. If you find the audio is spotty, try increasing this number. If you care more about latency, try decreasing it. Restart the remote server to cause the changes to take effect.\n\nTo configure the local PulseAudio server, add the following to /etc/pulse/default.pa:\n\n```\nload-module module-null-sink sink_name=rtp sink_properties=\"device.description='RTP'\"\nload-module module-rtp-send source=rtp.monitor destination_ip=remote_host\n```\n\nremote_host is the host name of the remote PulseAudio server.\n\nAfter restarting the local server, a new sink labelled \"RTP\" will appear in pavucontrol. To route a particular client's output to it, find the client under the Playback tab, then change the client from its current sink (e.g. \"Built-in Audio Analog Stereo\") to \"RTP\". To use the RTP sink by default for all clients, add this to /etc/pulse/default.pa, then restart the local PulseAudio server:\n\n```\nset-default-sink rtp\n```\n\n"
    },
    {
      "title": "Enable autodiscover AirPlay (raop) server support",
      "level": 3,
      "content": "To autodiscover and use a AirPlay server, ensure the pulseaudio-zeroconf is installed and Avahi is running (this is for autodetection itself). Also install pulseaudio-rtp (for the raop protocol). Then, add the following to /etc/pulse/default.pa:\n\n```\nload-module module-raop-discover\n```\n\nRestart pulseaudio.service and devices should automatically appear in the list of sinks.\n\nThis example is taken from julianxhokaxhiu's gist.\n\n"
    },
    {
      "title": "ALSA monitor source",
      "level": 2,
      "content": "To be able to record from a monitor source (a.k.a. \"What-U-Hear\", \"Stereo Mix\") using an ALSA application, run pactl list to find out the name of the source in PulseAudio (e.g. alsa_output.pci-0000_00_1b.0.analog-stereo.monitor). Then install pulseaudio-alsa and add lines like the following to /etc/asound.conf or ~/.asoundrc (see PulseAudio#ALSA for details):\n\n```\npcm.pulse_monitor {\n  type pulse\n  device alsa_output.pci-0000_00_1b.0.analog-stereo.monitor\n}\n\nctl.pulse_monitor {\n  type pulse\n  device alsa_output.pci-0000_00_1b.0.analog-stereo.monitor\n}\n```\n\nNow you can select pulse_monitor as a recording source.\n\nAlternatively, you can use pavucontrol to do this: make sure you have set up the display to All Input Devices, then select Monitor of [your sound card] as the fallback recording source.\n\n"
    },
    {
      "title": "Monitor specific output",
      "level": 2,
      "content": "It is possible to monitor a specific output, for example to stream audio from a music player into a VoIP application. Simply create a null output device:\n\n```\n$ pactl load-module module-null-sink sink_name=name sink_properties=device.description=description\n```\n\nIn PulseAudio Volume Control (pavucontrol), under the Playback tab, change the output of an application to \"name\", and in the Recording tab change the input of an application to \"Monitor of name\". Audio will now be outputted from one application into the other.\n\n"
    },
    {
      "title": "PulseAudio through JACK",
      "level": 2,
      "content": "The JACK Audio Connection Kit is popular for audio work, and is widely supported by Linux audio applications. It fills a similar niche as PulseAudio, but with more of an emphasis on professional audio work. It can offer lower latency audio monitoring along with greater control of input and output of multi-i/o sound devices.\n\n"
    },
    {
      "title": "The KXStudio method",
      "level": 3,
      "content": "JACK now has native features for bridging between ALSA, PulseAudio, and JACK. This will allow you to simultaneously have JACK and PulseAudio running with both outputting at the same time, with no configuration editing or terminal commands required.\n\nIf you have qjackctl installed, make sure that it is not running (it might be running minified in the system tray). Also ensure that no jackd process is running (use ps xw | grep jackd in a terminal to check).\n\nInstall cadenceAUR, as well as pulseaudio-jack. Once installed and started, JACK Bridges configuration is found in the bottom right of the Cadence window. Set ALSA Audio > Bridge Type to ALSA -> PulseAudio -> JACK (Plugin), then start JACK and enable the PulseAudio bridge. Make sure in pavucontrol that all output devices besides the JACK sink are muted, and all input devices besides the JACK input are muted. Now PulseAudio programs should begin outputting to JACK.\n\nIf PulseAudio is not running, Cadence will try to start its own PulseAudio instance, so you should either start the pulseaudio.service user unit before starting Cadence or stop the pulseaudio.socket user unit to prevent conflicts.\n\n"
    },
    {
      "title": "The manual sink configuration method",
      "level": 3,
      "content": "This configuration provides a method of allowing JACK and PulseAudio to run at the same time and output to each other. It uses manual configuration of the systems that bridge between JACK and PulseAudio. This configuration has no reliance on scripts or commands and is entirely based in configuration.\n\nThis configuration only works with jack2-dbus (use jackdbus or jack_control to start JACK).\n\nTo use this configuration, just install the pulseaudio-jack package. /etc/pulse/default.pa is already configured to load the modules in pulseaudio-jack if they are present. If you want to be sure, open the file and look for the line:\n\n```\nload-module module-jackdbus-detect options\n```\n\nWhere options can be any options supported by this module, usually channels=2.\n\nAs described on the JACK DBus packaging page:\n\nServer auto-launching is implemented as D-Bus call that auto-activates JACK D-Bus service, in case it is not already started, and starts the JACK server. Correct interaction with PulseAudio is done using a D-Bus based audio card \"acquire/release\" mechanism. When JACK server starts, it asks this D-Bus service to acquire the audio card and PulseAudio will unconditionally release it. When JACK server stops, it releases the audio card that can be grabbed again by PulseAudio.\n\nmodule-jackdbus-detect.so dynamically loads and unloads module-jack-sink and module-jack-source when jackdbus is started and stopped.\n\nIf PulseAudio sound does not work, check with pavucontrol to see if the relevant programs appear in the Playback tab. If not, add the following to ~/.asoundrc or /etc/asound.conf to redirect ALSA to PulseAudio:\n\n```\npcm.pulse {\n    type pulse\n}\n\nctl.pulse {\n    type pulse\n}\n\npcm.!default {\n    type pulse\n}\n\nctl.!default {\n    type pulse\n}\n```\n\nIf it still does not work, check with pavucontrol in the Playback tab and make sure the relevant programs are outputting to PulseAudio JACK Sink instead of your audio card (which JACK has control of, so it will not work). Also ensure that in the JACK graph the PulseAudio JACK Source is connected to the system audio output.\n\n"
    },
    {
      "title": "The shell script method",
      "level": 3,
      "content": "This method allows JACK and PulseAudio to output at the same time. It mostly relies on shell scripts that are automatically run by QjackCtl to manage aspects of how the JACK sinks and PulseAudio behave.\n\nThe basic idea is that killing PulseAudio is a bad idea because it may crash any applications using PulseAudio and disrupt any audio playing.\n\nThe flow of how this setup works:\n\n1. PulseAudio releases the sound card\n1. JACK grabs sound card and starts up\n1. script redirects PulseAudio to JACK\n1. manually send PulseAudio applications to JACK output (pavucontrol may come in helpful for this)\n1. use JACK programs etc\n1. via script, stop redirecting PulseAudio to JACK\n1. stop JACK and release sound card\n1. PulseAudio grabs sound card and reroutes audio to it directly\n\nOpen QjackCtl > Setup > Options and set up these scripts (do not forget to make them executable):\n\nExecute script on Startup:\n\n```\npulse-jack-pre-start.sh\n```\n\n```\n#!/bin/sh\npacmd suspend true\n```\n\nExecute script after Startup:\n\n```\npulse-jack-post-start.sh\n```\n\n```\n#!/bin/sh\npactl load-module module-jack-sink channels=2\npactl load-module module-jack-source channels=2\npacmd set-default-sink jack_out\npacmd set-default-source jack_in\n```\n\nExecute script on Shutdown:\n\n```\npulse-jack-pre-stop.sh\n```\n\n```\n#!/bin/sh\nSINKID=$(LC_ALL=C.UTF-8 pactl list | grep -B 1 \"Name: module-jack-sink\" | grep Module | sed 's/[^0-9]//g')\nSOURCEID=$(LC_ALL=C.UTF-8 pactl list | grep -B 1 \"Name: module-jack-source\" | grep Module | sed 's/[^0-9]//g')\npactl unload-module $SINKID\npactl unload-module $SOURCEID\nsleep 5\n```\n\nExecute script after Shutdown:\n\n```\npulse-jack-post-stop.sh\n```\n\n```\n#!/bin/sh\npacmd suspend false\n```\n\n"
    },
    {
      "title": "The PulseAudio kill method",
      "level": 3,
      "content": "This method relies on shell scripts to automatically stop PulseAudio when JACK is started, and automatically restart it when JACK is stopped. This will result in lower CPU usage than having both running, but can cause errors in already running PulseAudio application and does not allow simultaneous output of both.\n\nOpen QjackCtl > Setup > Options and set up these scripts (do not forget to make them executable):\n\nExecute script on Startup:\n\n```\njack-startup.sh\n```\n\n```\n#!/bin/sh\n# Stop PulseAudio clients (for example PulseAudio system tray)\nkillall pasystray\n\n# And stop PulseAudio before starting JACK\nsystemctl --user stop pulseaudio.{service,socket}\n```\n\nExecute script after Shutdown:\n\n```\njack-shutdown.sh\n```\n\n```\n#!/bin/sh\n# Start PulseAudio after stopping JACK\nsystemctl --user start pulseaudio.{service,socket}\n\n# And start PulseAudio clients (for example PulseAudio system tray)\npasystray &\n```\n\n"
    },
    {
      "title": "When JACK is started, Firefox, Chrome and other applications stop playing video and audio",
      "level": 4,
      "content": "Firefox/Chrome/etc. is using PulseAudio soundcard sink instead of the JACK sink. Open pavucontrol and on the Playback tab switch all audiostreams from something like \"Built-in Audio Analog Stereo\" to something like \"Jack sink (PulseAudio JACK Sink)\".\n\n"
    },
    {
      "title": "After starting JACK, the sound from PulseAudio becomes distorted",
      "level": 4,
      "content": "In QjackCtl click Setup and on the Settings tab, Parameters subtab untick Realtime. In addition, tweaking Sample Rate, Frames/Period and Period/Buffer may help. Look for latency in the bottom right corner, as you still want minimal latency for audio production. Also, Sample Rate should probably match one of the rates supported by your audio interface (cat /proc/asound/cardN/codec\\#M and look for rates, there could be multiple occurrences).\n\n"
    },
    {
      "title": "PulseAudio through OSS",
      "level": 2,
      "content": "Add the following to /etc/pulse/default.pa:\n\n```\nload-module module-oss\n```\n\nThen start PulseAudio as usual, making sure that sinks and sources are defined for OSS devices.\n\n"
    },
    {
      "title": "PulseAudio from within a chroot",
      "level": 2,
      "content": "PulseAudio clients, if not set up to connect to any specific server as described in #PulseAudio over network, will attempt to connect to the local PulseAudio server, failing which it will spawn a new server.\n\nTo allow for chrooted applications to access the PulseAudio server, you need to make the PulseAudio Unix socket available inside the chroot environment. By default, it is located at $XDG_RUNTIME_DIR/pulse/native, and since $XDG_RUNTIME_DIR is /run/user/uid by default, you can simply do mount --rbind /run /chroot/run.\n\n/dev/shm should also be mounted for efficiency and good performance. Note that mounting /home would normally also allow sharing of the ~/.config/pulse directory.\n\nBy default, PulseAudio selects the path to the Unix socket via $XDG_RUNTIME_DIR, so be sure to drag it along when you chroot as a normal user using sudo (see Sudo#Environment variables).\n\nThe UID inside the chroot must match the UID of the PulseAudio server for the Unix socket connection to work. Alternatively, you can reconfigure the PulseAudio server as described in #Allowing multiple users to share a PulseAudio daemon.\n\n"
    },
    {
      "title": "Remapping sinks",
      "level": 2,
      "content": "The module-remap-sink module creates a virtual sink, which is identified as a unique sink, but is connected to the master sink by a virtual stream. In doing so, it has the ability to remap how the master sink's channels are used for playback.\n\n"
    },
    {
      "title": "Remapping select audio sources",
      "level": 3,
      "content": "Naturally, the virtual sink has its own monitor, which can be used as a source only capturing applications using the virtual sink. sink_name can be determined by looking at the name field in pacmd list-sinks. As with other modules, it can be invoked from /etc/pulse/default.pa, or using pacmd:\n\n```\n$ pacmd load-module module-remap-sink sink_name=secondary master=sink_name\n```\n\nFor instance, to record a program's output without including any other system sounds, you could:\n\n- Load the module by running the command.\n- Using pavucontrol, in the Playback tab, change the desired program's output device to the remapping. Repeat for any other programs whose audio should be included.\n- Activate the recording program.\n- In pavucontrol, in the Recording tab, change the recording program's input to the Monitor of option for the remapping.\n\n"
    },
    {
      "title": "Remap stereo to mono",
      "level": 3,
      "content": "Remap a stereo input-sink to a mono sink by creating a virtual sink. It would be useful if you only have one speaker. Add to /etc/pulse/default.pa:\n\n```\nload-module module-remap-sink master=alsa_output.pci-0000_00_1f.5.analog-stereo sink_name=mono sink_properties=\"device.description='Mono'\" channels=2 channel_map=mono,mono\n# Optional: Select new remap as default\nset-default-sink mono\n```\n\n(replace alsa_output.pci-0000_00_1f.5.analog-stereo in the sound card name shown from pacmd list-sinks)\n\nSwitch player between virtual mono sink and real stereo sink.\n\n"
    },
    {
      "title": "Remap left or right to mono",
      "level": 3,
      "content": "Particularly useful in the case an audio stream has different content in the left and right channels, such as Japanese television broadcasts with bilingual audio.\n\n```\n# For Japanese bilingual TV\nload-module module-remap-sink sink_name=Left-to-Mono sink_properties=\"device.description='Left to Mono (5.1 AC3 on ALC892 Digital)'\" master=alsa_output.pci-0000_00_1b.0.iec958-ac3-surround-51 channels=2 master_channel_map=mono,mono channel_map=front-left,rear-left\nload-module module-remap-sink sink_name=Right-to-Mono sink_properties=\"device.description='Right to Mono (5.1 AC3 on ALC892 Digital)'\" master=alsa_output.pci-0000_00_1b.0.iec958-ac3-surround-51 channels=2 master_channel_map=mono,mono channel_map=front-right,rear-right\n```\n\nReplace alsa_output.pci-0000_00_1b.0.iec958-ac3-surround-51 (5.1 AC3 on ALC892 Digital) with your own card (pacmd list-sinks).\n\n- master_channel_map is a list of outputs to be remapped to.\n- channel_map is a list of inputs to be remapped from.\n- A stereo card will not have to specify as many channels, eg. channels=1 master_channel_map=mono channel_map=right\n\n"
    },
    {
      "title": "Remap for broadcasting software",
      "level": 3,
      "content": "If you do not want to capture sound from the application you need to create Remap sink:\n\n```\n### Create Remap sink\nload-module module-remap-sink sink_name=Remap_sink master=SINK_NAME channels=2 remix=no\nset-default-sink Remap_sink\n```\n\nThen restart PulseAudio daemon:\n\n```\n$ pulseaudio -k\n$ pulseaudio --start\n```\n\nNow you need set the Remap_sink as the default sound source in broadcast software\n\n"
    },
    {
      "title": "Remap left (or right) input to mono for stereo use",
      "level": 3,
      "content": "Sometimes the incoming audio is only present on one channel (e.g. when using a mono XLR microphone on a two channel audio interface that is configured as stereo input by default). Using module-remap-source, the left channel can be remapped to be a mono source for further use:\n\n```\nload-module module-remap-source master=alsa_input.usb-BEHRINGER_UMC204HD_192k-00.analog-stereo channels=1 master_channel_map=front-left channel_map=mono\n```\n\n- Replace alsa_input.usb-BEHRINGER_UMC204HD_192k-00.analog-stereo with the real name of the source pacmd list-sources.\n- Replace master_channel_map variable front-left with the channel to take as a mono source.\n\n"
    },
    {
      "title": "Swap left/right channels",
      "level": 2,
      "content": "This is the same as \"reverse stereo\", where the left and right channels are to be swapped.\n\nFirst, identify the card you want its channels swapped:\n\n```\n$ cat /proc/asound/cards\n```\n\nand use the name string for the device you wish to use (the one in square brackets, e.g. [Intel]).\n\nAdd the following line somewhere before load-module module-udev-detect:\n\n```\n/etc/pulse/default.pa\n```\n\n```\nload-module module-alsa-sink device=hw:device_name channel_map=right,left\n```\n\nThen restart PulseAudio.\n\nPulseAudio FAQ: How can I reverse my left and right speaker channels?\n\nAlternatively, you can create a virtual device using module-remap-sink [3]:\n\n```\nload-module module-remap-sink sink_name=reverse-stereo master=0 channels=2 master_channel_map=front-right,front-left channel_map=front-left,front-right\nset-default-sink reverse-stereo\n```\n\n"
    },
    {
      "title": "Pipe a source directly into a sink",
      "level": 2,
      "content": "Sometimes you want an input to be replicated to an output, e.g. if you want to play back your microphone on your speakers for troubleshooting, or want to hear your capture card's captured audio. Here is how to set that up dynamically using module-loopback:\n\n```\n$ pactl load-module module-loopback source=input_name sink=sink_name\n```\n\nThis command will print the module's ID so that you can stop the piping later like this:\n\n```\n$ pactl unload-module id\n```\n\nIf you lose the ID, you can obtain it from pactl list modules short.\n\n"
    },
    {
      "title": "Capture digital input from S/PDIF and play on analog output in (nearly) real time",
      "level": 2,
      "content": "Sometimes you have a digital sound source that outputs S/PDIF signal encoded in PCM or AC3 (for example a smart TV) and you would like to use your Linux box as a converter for this signal to analog audible signal that you can play on your speakers. The challenge is to have no audible delay between your digital source and analog output (which can result in audio/video out of sync in our smart TV example).\n\nYou can use audio_async_loopback-gitAUR tool for that purpose.\n\nThe usage is fairly simple. Just connect S/PDIF cable to your sound card digital input and issue:\n\n```\n$ audio_async_loopback digital-input-device-name latency-in-microseconds\n```\n\nFor example:\n\n```\n$ audio_async_loopback alsa_input.pci-0000_04_00.0.iec958-stereo 12500\n```\n\nTo find out your digital-input-device-name, use command:\n\n```\n$ pacmd list-sources | grep 'name:'\n```\n\nUsually the digital input contains iec958 substring. If still unsure, remove grep part from command and check field:\n\n```\nproperties:\n   device.description\n```\n\nlatency-in-microseconds is a matter of trial and error to determine, depending highly of your hardware speed. You can try to omit this parameter, letting audio_async_loopback to determine the latency automatically. If you hear clicks and cracks, increase the value. If sound is clear but audio is out of sync or delayed, decrease the value. You can also do a fine-tuning of different buffers in config.h before building the package but this should not be necessary.\n\nAuthor also recommends setting input volume to 100% (you can do it in your favorite PulseAudio mixer) and setting PulseAudio to work with 48kHz sampling rate for this tool to function correctly.\n\nTo set the sampling rate, edit /etc/pulse/daemon.conf and change line:\n\n```\ndefault-sample-rate = 44100\n```\n\nto:\n\n```\ndefault-sample-rate = 48000\n```\n\nTo apply changes, restart pulseaudio.service.\n\n"
    },
    {
      "title": "PulseAudio as a minimal unintrusive dumb pipe to ALSA",
      "level": 2,
      "content": "Some people do not want to run PulseAudio all the time for various reasons. This example will turn the full fledged audio server into an unobtrusive dumb pipe to ALSA devices that automatically starts and stops itself when done, allowing applications that requires PulseAudio to fully function while not touching any ALSA setting nor setting itself as the default ALSA device.\n\nThis configuration tells native PulseAudio clients to autospawn the daemon when they need it, then the daemon is configured to autoexit as soon as all clients have disconnected. The daemon itself uses a plain simple static configuration that uses your configured pcm.!default ALSA devices and nothing more. No replacement of ALSA's default, no playing with mixer levels, nothing but record/playback. Also make sure pulseaudio-alsa is not installed so standard ALSA clients do not default to pulse. Since pulseaudio-alsa contains only a configuration file /etc/asound.conf, if it is installed as dependency, one could simply comment all contents in /etc/asound.conf. alsamixer(1) functions properly as well as any other ALSA clients. Also make sure common frameworks like Xine, Gstreamer and Phonon are configured to use ALSA: by default if they detect PulseAudio is installed they will try to use it before ALSA.\n\n```\n/etc/pulse/daemon.conf\n```\n\n```\n# Replace these with the proper values\nexit-idle-time = 1 # Exit as soon as unneeded\nflat-volumes = yes # Prevent messing with the master volume\n```\n\n```\n/etc/pulse/client.conf\n```\n\n```\n# Replace these with the proper values\n\n# Applications that uses PulseAudio *directly* will spawn it,\n# use it, and pulse will exit itself when done because of the\n# exit-idle-time setting in daemon.conf\nautospawn = yes\n```\n\n```\n/etc/pulse/default.pa\n```\n\n```\n# Replace the *entire* content of this file with these few lines and\n# read the comments\n\n.fail\n    # Set tsched=0 here if you experience glitchy playback. This will\n    # revert back to interrupt-based scheduling and should fix it.\n    #\n    # Replace the device= part if you want pulse to use a specific device\n    # such as \"dmix\" and \"dsnoop\" so it does not lock an hw: device.\n\n    # INPUT/RECORD\n    load-module module-alsa-source device=\"default\" tsched=1\n\n    # OUTPUT/PLAYBACK\n    load-module module-alsa-sink device=\"default\" tsched=1\n\n    # Accept clients -- very important\n    load-module module-native-protocol-unix\n\n.nofail\n.ifexists module-x11-publish.so\n    # Publish to X11 so the clients know how to connect to Pulse. Will\n    # clear itself on unload.\n    load-module module-x11-publish\n.endif\n```\n\n"
    },
    {
      "title": "Having both speakers and headphones plugged in and switching in software on-the-fly",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nBy design, PulseAudio automatically turns off Line Out when headphones are plugged in and uses Headphone slider instead. You can observe this behavior in alsamixer(1). What we want is to have Headphone and Line Out sliders working separately and at the same time. This is extremely useful if you want to remap Realtek's jacks to have, say, Rear Green for headphones and Blue for speakers (with the help of hdajackretask from alsa-tools).\n\nTo achieve this, you should directly edit PulseAudio mixer configuration.\n\n1. We tell PulseAudio that headphones are always plugged in.\n\nEdit: /usr/share/pulseaudio/alsa-mixer/paths/analog-output-lineout.conf.\n\nFind:\n\n```\n[Jack Headphone]\nstate.plugged = no\nstate.unplugged = unknown\n```\n\nChange no to yes.\n\n2. By default, Line Out's volume controlled only by Master, and not by Line Out slider itself. We want to merge Line Out with Master.\n\nAdd this snippet to the end of the file:\n\n```\n[Element Line Out]\nswitch = mute\nvolume = merge\n```\n\n3. We need to completely cut off Line Out when we use headphones.\n\nEdit: /usr/share/pulseaudio/alsa-mixer/paths/analog-output-headphones.conf.\n\nAdd this snippet to the end of the file:\n\n```\n[Element Line Out]\nswitch = off\nvolume = off\n```\n\n4. Like PulseAudio, ALSA itself cuts off speakers when headphones are plugged in. Run alsamixer (in case of Realtek HDA alsamixer -c0) and change Auto-Mute mode to disabled.\n\n5. Restart PulseAudio:\n\n```\n$ pulseaudio -k\n$ pulseaudio --start\n```\n\nNow you have two separate ports on the same sink in PulseAudio. They mute each other, so you can switch to headphones and this will mute Line Out, and vice versa. To switch between ports you can use GNOME or Plasma sound mixer, or install appropriate desktop extension.\n\n"
    },
    {
      "title": "Allowing multiple users to share a PulseAudio daemon",
      "level": 2,
      "content": "Normally each system user runs their own instance of PulseAudio and the instance is only accessible by the user running it. This is a security measure which prevents other users from accessing potentially sensitive audio channels such as voice calls. However, there are situations in which it is desirable to isolate an application by running it as a separate user. For example, one may wish to run a web browser as a different user while still being able to listen to audio from the browser while using the primary user account. Another use is to share a Bluetooth headset among multiple system users.\n\nThis can be achieved by creating a UNIX socket to allow other users to access the primary user's PulseAudio daemon. With this setup, the primary user account runs the PulseAudio daemon and the other user accounts connect to it and share it. Note that the following assumes that the environment variable XDG_CONFIG_HOME points to the default location ~/.config. If this is not the case, replace ~/.config with the correct path in the examples below.\n\n"
    },
    {
      "title": "Primary user setup",
      "level": 3,
      "content": "The primary user should add the following directive to /home/primary-user/.config/pulse/default.pa to create a UNIX socket and accept connections from other users:\n\n```\n~/.config/pulse/default.pa\n```\n\n```\nload-module module-native-protocol-unix auth-anonymous=1 socket=/tmp/pulse-socket\n```\n\nNote that this will allow all users on the system to access the primary user's PulseAudio server and thus all audio data. A more secure solution is to create a custom user group for shared audio and limit the socket to it. For example, to allow only users in the group sharepulse to access the socket, change the line to\n\n```\n~/.config/pulse/default.pa\n```\n\n```\nload-module module-native-protocol-unix auth-group=sharepulse socket=/tmp/pulse-socket\n```\n\nSince the PulseAudio server reads /etc/group directly, this will not work if the secondary user is chrooted; in this case, use cookie files for authentication as described below.\n\nAfter adding the line, start the PulseAudio daemon on the primary user's account.\n\n"
    },
    {
      "title": "Secondary user setup",
      "level": 3,
      "content": "The secondary user should add the following line to /home/secondary-user/.config/pulse/client.conf:\n\n```\n~/.config/pulse/client.conf\n```\n\n```\ndefault-server = unix:/tmp/pulse-socket\n```\n\nwhere /tmp/pulse-socket is the path to the UNIX socket set in the primary user's default.pa file above. If the primary user has restricted the socket to a specific system group, the secondary user must be added to it.\n\nIf the socket is not restricted to a specific system group and auth-anonymous=1 is not used, the secondary user will also need to copy the primary user's PulseAudio daemon cookie (/home/primary-user/.config/pulse/cookie) to /home/secondary-user/.config/pulse/cookie in their configuration directory. Alternatively, the primary user can copy the cookie to a location accessible by the intended system users (e.g. /tmp/sharepulse/pa_cookie) and the secondary user can access it by adding the following line to the client configuration file:\n\n```\n~/.config/pulse/client.conf\n```\n\n```\ncookie-file = /tmp/sharepulse/pa_cookie\n```\n\nThe secondary user should now have full access to the primary user's PulseAudio daemon and all audio should be accessible to bother users. To grant access to more users, simply repeat the setup for the secondary user on each user account.\n\n"
    },
    {
      "title": "Alternative setup",
      "level": 3,
      "content": "If there is no primary user to reliably run the shared PulseAudio daemon, the following script can be used by all users in a group (sharepulse in this example) to check if a shared server is already running and launch one if not (requires inotify-tools).\n\n```\npulseaudio-shared\n```\n\n```\n#!/usr/bin/bash\nset -eu\n\n# The group with access to the shared PulseAudio daemon.\nPA_GROUP=sharepulse\n\n# The shared directory.\nPA_DIR=/tmp/sharepulse\n\n# Restrict access to users outside of the group.\numask 007\n\n# Create a group-restricted common directory for the socket and cookie if missing.\nif [[ ! -e $PA_DIR ]]\nthen\n  /usr/bin/mkdir -p -- \"$PA_DIR\"\n  /usr/bin/chgrp -- \"$PA_GROUP\" \"$PA_DIR\"\n  /usr/bin/chmod -- g+s \"$PA_DIR\"\nfi\n\nfunction start_daemon()\n{\n\n  # Only start the daemon if one is not already running.\n  if [[ ! -e $PA_DIR/socket ]]\n  then\n    echo \"Attempting to (re)start the PulseAudio daemon.\"\n\n    # Create a new random common cookie.\n    /usr/bin/dd if=/dev/urandom of=\"$PA_DIR/cookie\" bs=256 count=1\n\n    # Copy it to the configuration directory of the user running the daemon.\n    /usr/bin/cp -- \"$PA_DIR/cookie\" \"${XDG_CONFIG_HOME:-$HOME/.config}/pulse/cookie\"\n\n    # Start the daemon.\n    /usr/bin/pulseaudio \"$@\" || true\n\n    # Kill the daemon if it is not the owner of the socket.\n    if [[ ! -O $PA_DIR/socket ]]\n    then\n      /usr/bin/pulseaudio --check && /usr/bin/pulseaudio -k\n    fi\n  fi\n}\n\n# Restart the daemon when necessary.\nwhile true\ndo\n  # Wait for the socket to be deleted when a running daemon is killed. If the\n  # socket does not exist then this will be skipped.\n  inotifywait -e delete_self \"$PA_DIR/socket\" || true\n  start_daemon\ndone\n```\n\nEach user will need to add the following lines to their PulseAudio configuration files to configure the daemon and clients to use the shared socket and cookie:\n\n```\n~/.config/pulse/default.pa\n```\n\n```\nload-module module-native-protocol-unix auth-group=sharepulse socket=/tmp/sharepulse/socket\n```\n\n```\n~/.config/pulse/client.conf\n```\n\n```\ndefault-server = unix:/tmp/sharepulse/socket\ncookie-file = /tmp/sharepulse/cookie\n```\n\npulseaudio-shared should be run by each user when logging in (e.g. via their Bash profile or their desktop environment's autostart file) to start the daemon when needed. Any arguments passed to the script will be passed through to the PulseAudio daemon. When any shared daemon is stopped, pulseaudio-shared will automatically restart as the current user and all other users should reconnect to the new daemon automatically.\n\n"
    },
    {
      "title": "No sound when switching TTY",
      "level": 4,
      "content": "If the sound stops when switching between users on different TTYs or desktop environments (Ctrl+Alt+Fn) then the users likely do not have access to the sound hardware when their TTY session is not selected. This can be fixed by adding the users to the audio group; see Users and groups#Pre-systemd groups.\n\n"
    },
    {
      "title": "Mixing additional audio into the microphone's audio",
      "level": 2,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nUsing a setup of null sinks and loopbacks you can mix arbitrary applications' audio output into your microphone's audio, for example to play sound effects or music on voice chat applications.\n\nThe setup suggested here will also play your sound effects back to you and use PulseAudio echo cancellation to prevent the effects from feeding back into your microphone.\n\n"
    },
    {
      "title": "PulseAudio management with pulse-autoconf",
      "level": 3,
      "content": "As of August 2020 there is pulse-autoconfAUR, a PulseAudio server dynamic configuration daemon that supports this setup with its 'EchoCancellationWithSourcesMix' preset and that comes with further benefits, such as dynamically reacting to changes in the PulseAudio server, for example when a headset or a webcam is plugged in or unplugged.\n\nIf pulse-autoconfAUR does not work out for your use case, read on for the manual way.\n\n"
    },
    {
      "title": "PulseAudio configuration",
      "level": 3,
      "content": "Symbology: (Application), {Audio source}, [Audio sink], {m} = Monitor of audio sink, {}* = Fallback (default) source, []* = Fallback (default) sink\n\n```\n{Microphone}\n    ||\n{src_ec} -----------------> [sink_mix]{m}=={src_main}* -----> (Voice chat)\n              Loopback            ^                                |\n                                  | Loopback                       |\n                                  |                                v\n(Soundboard) ---------> [sink_fx]{m} -----------------------> [sink_main]*\n                                             Loopback             ||\n                                                              [Speakers]\n```\n\n"
    },
    {
      "title": "Applications configuration",
      "level": 3,
      "content": "The applications providing the sound effects must\n\n- Output to \"sink_fx\"\n\nAll other applications, including the voice chat, must\n\n- Record audio from \"src_main\"\n- Output to \"sink_main\"\n\nAccordingly, these devices will be set as defaults. Controlling which application uses which audio source/sink can usually be done in the pavucontrol graphical PulseAudio control panel.\n\nFor some applications changing their sources or sinks in pavucontrol has no effect. In this case you can typically select the source or sink in the applications' audio settings.\n\nNo application whatsoever must record from, or output to, the \"real\" microphone or speakers, as this would bypass the echo cancellation.\n\nAny echo cancellation or other audio processing provided by the voice chat application should be disabled – PulseAudio is doing this already, and as the application is not aware of the sound effects being played on the speakers, it will likely be ineffective in filtering them from the microphone anyway.\n\n"
    },
    {
      "title": "Setup steps",
      "level": 3,
      "content": "1. Connect your microphone and headphones and make sure PulseAudio is configured correctly for their use, for example in the Configuration tab in pavucontrol\n1. First time only: Save the template script below to an executable file of your choice Find the names of your microphone and headphones with pactl list short sources | grep -v \".monitor\" and pactl list short sinks, respectively In the script, replace the values of microphone and speakers with the names of your microphone/headphones\n1. Run the script\n1. Run your voice chat application and make it record audio from \"src_main\" and output audio to \"sink_main\"\n1. Run your sound effects application(s) and make them play to \"sink_fx\"\n\n1. Save the template script below to an executable file of your choice\n1. Find the names of your microphone and headphones with pactl list short sources | grep -v \".monitor\" and pactl list short sinks, respectively\n1. In the script, replace the values of microphone and speakers with the names of your microphone/headphones\n\nAs for applications that can play sound effects, castersoundboard-gitAUR has been found to work quite well. It however needs to be closed and re-opened when PulseAudio is restarted.\n\n"
    },
    {
      "title": "Teardown",
      "level": 3,
      "content": "The changes that the script makes to the running PulseAudio server are not permanent and will be lost when PulseAudio terminates.\n\nTo ditch the custom configuration, just restart PulseAudio, e.g. with pactl exit. (PulseAudio is socket-activated and will automatically start on demand.)\n\n"
    },
    {
      "title": "Template script",
      "level": 3,
      "content": "```\n#!/bin/sh\n\nmicrophone=\"alsa_input.pci-0000_00_1b.0.analog-stereo\"\nspeakers=\"alsa_output.pci-0000_00_1b.0.analog-stereo\"\n\necho \"Setting up echo cancellation\"\npactl load-module module-echo-cancel use_master_format=1 aec_method=webrtc \\\n      aec_args=\"analog_gain_control=0\\\\ digital_gain_control=1\\\\ experimental_agc=1\\\\ noise_suppression=1\\\\ voice_detection=1\\\\ extended_filter=1\" \\\n      source_master=\"$microphone\" source_name=src_ec  source_properties=device.description=src_ec \\\n      sink_master=\"$speakers\"     sink_name=sink_main sink_properties=device.description=sink_main\n\necho \"Creating virtual output devices\"\npactl load-module module-null-sink sink_name=sink_fx  sink_properties=device.description=sink_fx\npactl load-module module-null-sink sink_name=sink_mix sink_properties=device.description=sink_mix\n\necho \"Creating remaps\"\npactl load-module module-remap-source master=sink_mix.monitor \\\n      source_name=src_main source_properties=\"device.description=src_main\"\n\necho \"Setting default devices\"\npactl set-default-source src_main\npactl set-default-sink   sink_main\n\necho \"Creating loopbacks\"\npactl load-module module-loopback latency_msec=60 adjust_time=6 source=src_ec          sink=sink_mix\npactl load-module module-loopback latency_msec=60 adjust_time=6 source=sink_fx.monitor sink=sink_mix\npactl load-module module-loopback latency_msec=60 adjust_time=6 source=sink_fx.monitor sink=sink_main\n```\n\nThis script has been inspired by https://askubuntu.com/a/915064 , for more in-depth information also see that post's author's pulseaudio-config GitHub repository.\n\nUsing module-remap-source to work around applications that do not accept a monitor as source is taken from https://unix.stackexchange.com/a/608482 .\n\n"
    },
    {
      "title": "Invert phase of one audio channel",
      "level": 2,
      "content": "This is useful for compensating when one of your speakers is wired with the wrong polarity. To test if this is needed, see [4].\n\nAdapted from a more general example of Assigning a LADSPA filter to a single audio channel. Requires swh-plugins.\n\n```\n#!/bin/sh\nmaster=\"alsa_output.pci-0000_07_00.0.analog-stereo\"\npacmd load-module module-ladspa-sink sink_name=ladspa_out sink_master=\"$master\" plugin=inv_1429 label=inv\npacmd load-module module-remap-sink sink_name=remapR master=ladspa_out channels=1 master_channel_map=front-right channel_map=front-right\npacmd load-module module-remap-sink sink_name=remapL master=\"$master\" channels=1 master_channel_map=front-left channel_map=front-left\npacmd load-module module-combine-sink sink_name=invert sink_properties=device.description='\"Invert\\ phase\"' slaves=remapL,remapR channels=2\n```\n\n"
    },
    {
      "title": "Renaming devices",
      "level": 2,
      "content": "Sound devices will sometimes have confusing names assigned to them by default. Names like \"CM106 Like Sound Device\" are not very descriptive. This can be easily fixed and it works for both PulseAudio sources and sinks.\n\nThe easiest method is to add the following lines to the end of the /etc/pulse/default.pa file.\n\nTo update a source name:\n\n```\nupdate-source-proplist device_name device.description=\"new_name\"\n```\n\nAnd to update a sink name:\n\n```\nupdate-sink-proplist device_name device.description=\"new_name\"\n```\n\nThe device name can be queried using the command pacmd list-sources | grep name: for sources, or pacmd list-sinks | grep name: for sinks.\n\nThis configuration can also be persisted on a per-user basis:\n\n```\n~/.config/pulse/default.pa\n```\n\n```\n#!/usr/bin/pulseaudio -nF\n\n## Include defaults\n.include /etc/pulse/default.pa\n\n## Rename devices\nupdate-source-proplist device_name device.description=\"new_name\"\n```\n\nThe default PulseAudio configuration needs to be included, otherwise the daemon will not start.\n\n"
    },
    {
      "title": "Use dynamic default sink with modules",
      "level": 2,
      "content": "If you load a module that uses for example master, you can set a \"dynamic\" default sink with master=\"@DEFAULT_SINK@\".\n\nThis way the active chosen default sink will be used. If you change the default sink, the new default sink will be used on command reload/re-run or PulseAudio restart.\n\n"
    }
  ]
}