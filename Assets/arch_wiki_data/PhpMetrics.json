{
  "title": "PhpMetrics",
  "url": "https://wiki.archlinux.org/title/PhpMetrics",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "PHP is a widely-used general-purpose scripting language that is especially suited for Web development and can be embedded into HTML.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the php package.\n\nDue to application software that cannot use the latest PHP version, you may install php-legacy alongside. That package provides the oldest still actively supported PHP branch and must be configured within the applications that require it. For detailed instruction, see Nextcloud#Migrating to php-legacy.\n\nYou can find older and pinned versions of PHP in the AUR, including php56AUR, php74AUR, php80AUR, php81AUR and php82AUR. Those are binary builds using the openSUSE Build Service.\n\n"
    },
    {
      "title": "Running",
      "level": 2,
      "content": "While PHP can be run standalone, it is typically used with web servers. That requires installing additional packages and editing configuration files. For common setups, see the following:\n\n- Apache HTTP Server#PHP\n- nginx#PHP implementation\n- lighttpd#PHP\n- Hiawatha#CGI\n\nTo run PHP scripts as plain CGI, you need the php-cgi package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The main PHP configuration file is well-documented and located at /etc/php/php.ini.\n\n- It is recommended to set your timezone (list of timezones) in /etc/php/php.ini like so:\n\n```\ndate.timezone = Europe/Berlin\n```\n\n- If you want to display errors to debug your PHP code, change display_errors to On in /etc/php/php.ini:\n\n```\ndisplay_errors = On\n```\n\n- The open_basedir directive limits the paths that can be accessed by PHP, thus increasing security at the expense of potentially interfering with normal program execution. Starting with PHP 7.0, it is no longer set by default to more closely match upstream so users who wish to use it must configure it manually. All symbolic links are resolved, so it is not possible to avoid this restriction with a symlink. The default Arch packages for certain webapps like nextcloud & phpmyadmin installs the webapps under /usr/share/webapps and creates a symlink pointing to the actual configuration files for those webapps under /etc/webapps. So, if you are setting up open_basedir, make sure both those folders listed are in the open_basedir. This will obviously be different for webapps installed in other locations. Example:\n\n```\nopen_basedir = /srv/http/:/var/www/:/home/:/tmp/:/var/tmp/:/var/cache/:/usr/share/pear/:/usr/share/webapps/:/etc/webapps/\n```\n\n"
    },
    {
      "title": "Extensions",
      "level": 2,
      "content": "A number of commonly used PHP extensions can also be found in the official repositories:\n\n```\n$ pacman -Ss php-\n```\n\nExisting extensions are located in /usr/lib/php/modules directory.\n\nFor example, to enable ext-iconv extension create file /etc/php/conf.d/extensions.ini with line:\n\n```\nextension=iconv\n```\n\nExtensions for current and older versions of PHP are also available in the AUR under prefixes like php- and php56-, e.g. php-imagick, php-redis, php56-mcryptAUR.\n\n"
    },
    {
      "title": "gd",
      "level": 3,
      "content": "For php-gd uncomment the line in /etc/php/php.ini:\n\n```\nextension=gd\n```\n\n"
    },
    {
      "title": "Imagemagick",
      "level": 3,
      "content": "Install the imagemagick package and install one of the listed PHP extension library.\n\nInstall php-imagick, it will create the file /etc/php/conf.d/imagick.ini to configure the extension.\n\nIf you want imagemagick to have SVG support, e.g. for nextcloud, then install librsvg as a dependency.\n\n"
    },
    {
      "title": "PECL",
      "level": 4,
      "content": "Make sure the php-pearAUR package has been installed:\n\n```\n# pecl install imagick\n```\n\nCreate a /etc/php/conf.d/imagick.ini and enable the extension:\n\n```\n/etc/php/conf.d/imagick.ini\n```\n\n```\nextension=imagick\n```\n\n"
    },
    {
      "title": "Multithreading",
      "level": 3,
      "content": "If you wish to have POSIX multi-threading you will need the parallel extension. To install the extension using pecl you are required to use a compiled version of PHP with the thread safety support flag --enable-maintainer-zts. Currently the most clean way to do this would be to rebuild the original package with the flag. Instruction can be found on the PHP pthreads extension page.\n\n"
    },
    {
      "title": "PCNTL",
      "level": 3,
      "content": "PCNTL allows you to create process directly into the server side machine. While this may seen as something you would want, it also gives PHP the power to mess things up really badly. So it is a PHP extension that cannot be loaded like other more convenient extension. This is because of the great power it gives to PHP. To enable it PCNTL has to be compiled into PHP.\n\nThe php package on Arch Linux is currently built with \"--enable-pcntl\", so that it should be available by default.\n\n"
    },
    {
      "title": "MySQL/MariaDB",
      "level": 3,
      "content": "Install and configure MySQL/MariaDB as described in MariaDB.\n\nUncomment the following lines in /etc/php/php.ini:\n\n```\nextension=pdo_mysql\nextension=mysqli\n```\n\nYou can add minor privileged MySQL users for your web scripts. You might also want to edit /etc/my.cnf.d/server.cnf and add in mysqld section skip-networking line so the MySQL server is only accessible by the localhost, as per MariaDB#Enable access locally only via Unix sockets. You have to restart MySQL for changes to take effect.\n\n"
    },
    {
      "title": "Redis",
      "level": 3,
      "content": "Install and configure Redis, then install php-redis.\n\nUncomment the line of the package, e.g. /etc/php/conf.d/redis.ini. Also ensure that the igbinary extension is enabled (also uncommented) in /etc/php/conf.d/igbinary.ini\n\n"
    },
    {
      "title": "PostgreSQL",
      "level": 3,
      "content": "Install and configure PostgreSQL, then install the php-pgsql package and uncomment the following lines in /etc/php/php.ini:\n\n```\nextension=pdo_pgsql\nextension=pgsql\n```\n\n"
    },
    {
      "title": "Sqlite",
      "level": 3,
      "content": "Install and configure SQLite, then install the php-sqlite package and uncomment the following lines in /etc/php/php.ini:\n\n```\nextension=pdo_sqlite\nextension=sqlite3\n```\n\n"
    },
    {
      "title": "XDebug",
      "level": 3,
      "content": "XDebug allows you to easily debug (using modified var_dump function), profile, or trace PHP code.\n\nInstall xdebug and uncomment the following line in /etc/php/conf.d/xdebug.ini:\n\n```\nzend_extension=xdebug.so\n```\n\nYou can configure what XDebug does by adding a xdebug.mode line to the same file. By default, it is set to xdebug.mode=develop.\n\n"
    },
    {
      "title": "Snuffleupagus",
      "level": 3,
      "content": "Install php-snuffleupagus, uncomment the two lines in /etc/php/conf.d/snuffleupagus.ini, and put the path to the snuffleupagus.rules file in the second line:\n\n```\nextension=snuffleupagus.so\nsp.configuration_file=/etc/php/conf.d/snuffleupagus.rules\n```\n\n"
    },
    {
      "title": "Caching",
      "level": 2,
      "content": "There are two kinds of caching in PHP: opcode/bytecode caching and userland/user data caching. Both allow for substantial gains in applications speed, and therefore should be enabled wherever possible.\n\n- Zend OPCache provides only opcode caching.\n- APCu provides only userland caching.\n\n"
    },
    {
      "title": "OPCache",
      "level": 3,
      "content": "OPCache comes bundled with the standard PHP distribution, therefore to enable it you simply have to add or uncomment the following line in your PHP configuration file:\n\n```\n/etc/php/php.ini\n```\n\n```\nzend_extension=opcache\n```\n\nA list of its options and suggested settings can be found in its official entry on the PHP website.\n\n"
    },
    {
      "title": "APCu",
      "level": 3,
      "content": "APCu can be installed with the php-apcu package. You can then enable it by uncommenting the following line in /etc/php/conf.d/apcu.ini, or adding it to your PHP configuration file:\n\n```\nextension=apcu\n```\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nIts author recommends a few suggested settings, among which:\n\n- apc.enabled=1 and apc.shm_size=32M are not really required as they represent the default values;\n- apc.ttl=7200 on the other hand seems rather beneficial;\n- finally, apc.enable_cli=1, which although not recommended by the manual may be required by some software such as ownCloud.\n\nNote: **or** \n\n"
    },
    {
      "title": "Development tools",
      "level": 2,
      "content": "- Visual Studio Code — Code Editor for programming PHP and other languages.\n\n- Aptana Studio — IDE for programming in PHP and web development. Does not have a PHP debugger.\n\n- Eclipse PDT — The PHP variant of Eclipse.\n\n- Komodo — IDE with good integration for PHP+HTML+JavaScript.\n\n- Netbeans — IDE for many languages including PHP. Includes features like debugging, refactoring, code templating, autocomplete, XML features, and web design and development functionalities.\n\n- JetBrains PhpStorm — Commercial, cross-platform IDE for PHP built on JetBrains' IntelliJ IDEA platform. You can get a free license for education from Jetbrains.[1].\n\n"
    },
    {
      "title": "Composer",
      "level": 3,
      "content": "Composer is a dependency manager for PHP. It can be installed with the composer package.\n\n"
    },
    {
      "title": "Allow user-wide installations",
      "level": 4,
      "content": "To allow global package installations for the current user (e.g. $ composer global require \"package/name\"), you may want to specify a default location by using an environment variable:\n\n```\nPATH=\"$HOME/.config/composer/vendor/bin:$PATH\"\n```\n\n"
    },
    {
      "title": "Usage with php-legacy",
      "level": 4,
      "content": "Some applications may require php-legacy, but by default, composer runs with the latest version of PHP. Thus, in order to use the legacy version instead, one must replace composer with php-legacy /usr/bin/composer in their scripts, makefiles and other applicable locations. An example of this is when building Nextcloud apps.\n\n"
    },
    {
      "title": "Others",
      "level": 3,
      "content": "- Box — An application for building and managing Phars.\n\n- PHP Depend — A software metrics tool for PHP.\n\n- PHP Coding Standards Fixer — A PSR-1 and PSR-2 Coding Standards fixer for your code.\n\n- PHP CodeSniffer — Tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.\n\n- phpcov — A command-line frontend for the PHP_CodeCoverage library.\n\n- phpDox — A documentation generator for PHP projects, including, but is not limited to, API documentation.\n\n- PHPLoc — A tool for quickly measuring the size of a PHP project.\n\n- PhpMetrics — Provides various metrics about PHP projects.\n\n- PHPUnit — A programmer-oriented testing framework for PHP.\n\n- Producer — A command-line quality-assurance tool to validate, and then release, your PHP library package.\n\n"
    },
    {
      "title": "PHP Fatal error: Class 'ZipArchive' not found",
      "level": 3,
      "content": "Ensure the zip extension is enabled.\n\n```\n/etc/php/php.ini\n```\n\n```\nextension=zip\n```\n\n"
    },
    {
      "title": "/etc/php/php.ini not parsed",
      "level": 3,
      "content": "If your php.ini is not parsed, the ini file is named after the sapi it is using. For instance, if you are using uwsgi, the file would be called /etc/php/php-uwsgi.ini. If you are using cli, it is /etc/php/php-cli.ini.\n\n"
    },
    {
      "title": "PHP Warning: PHP Startup: <module>: Unable to initialize module",
      "level": 3,
      "content": "When running php, this error indicates that the aforementioned module is out of date. This will rarely happen in Arch Linux, since maintainers make sure core PHP and all modules be only available in compatible versions.\n\nThis might happen in conjunction with a module compiled from the AUR. You usually could confirm this by looking at the dates of the files /usr/lib/php/modules/.\n\nTo fix, find a compatible update for your module, probably by looking up the AUR using its common name.\n\nIf it applies, flag the outdated AUR package as outdated.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- PHP Official Website\n- Arch Linux PHP legacy package announcement\n\n"
    }
  ]
}