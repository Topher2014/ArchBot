{
  "title": "AUR submission guidelines",
  "url": "https://wiki.archlinux.org/title/AUR_submission_guidelines",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Arch package guidelines\n- Package Maintainer guidelines\n\nUsers can share PKGBUILD scripts using the Arch User Repository. It does not contain any binary packages but allows users to upload PKGBUILDs that can be downloaded by others. These PKGBUILDs are completely unofficial and have not been thoroughly vetted, so they should be used at your own risk.\n\n"
    },
    {
      "title": "Submitting packages",
      "level": 2,
      "content": "Note: **Verify carefully** \n\nIf you are unsure in any way about the package or the build/submission process even after reading this section twice, submit the PKGBUILD to the AUR mailing list, the AUR forum on the Arch forums, or ask on our IRC channel for public review before adding it to the AUR.\n\n"
    },
    {
      "title": "Rules of submission",
      "level": 3,
      "content": "When submitting a package to the AUR, observe the following rules:\n\n- The submitted PKGBUILDs must not build applications already in any of the official binary repositories under any circumstances. Check the official package database for the package. If any version of it exists, do not submit the package. If the official package is out-of-date, flag it as such. If the official package is broken or is lacking a feature, then please file a bug report.\n\n- Check the AUR if the package already exists. If it is currently maintained, changes can be submitted in a comment for the maintainer's attention. If it is unmaintained or the maintainer is unresponsive, the package can be adopted and updated as required. Do not create duplicate packages.\n\n- Make sure the package you want to upload is useful. Will anyone else want to use this package? Is it extremely specialized? If more than a few people would find this package useful, it is appropriate for submission.\n\n- Packages that do not support the x86_64 architecture are not allowed in the AUR.\n\n- Do not use replaces in an AUR PKGBUILD unless the package is to be renamed, for example when Ethereal became Wireshark. If the package is an alternate version of an already existing package, use conflicts (and provides if that package is required by others). The main difference is: after syncing (-Sy) pacman immediately wants to replace an installed, 'offending' package upon encountering a package with the matching replaces anywhere in its repositories; conflicts, on the other hand, is only evaluated when actually installing the package, which is usually the desired behavior because it is less invasive.\n\n- Packages that build from a version control system and are not tied to a specific version need to have an appropriate suffix, -git for git and so on, see VCS package guidelines#Package naming for a full list.\n\n- Packages that use prebuilt deliverables, when the sources are available, must use the -bin suffix. An exception to this is with Java. The AUR should not contain the binary tarball created by makepkg, nor should it contain the filelist.\n\n- Packages that build from source using a specific version do not use a suffix.\n\n- Please add a comment line to the top of the PKGBUILD file which contains information about the current maintainers and previous contributors, respecting the following format. Remember to disguise your email to protect against spam. Additional lines are optional.\n\n```\n# Maintainer: Your Name <address at domain dot tld>\n```\n\n```\n# Maintainer: Your name <address at domain dot tld>\n# Maintainer: Other maintainer's name <address at domain dot tld>\n# Contributor: Previous maintainer's name <address at domain dot tld>\n# Contributor: Original submitter's name <address at domain dot tld>\n```\n\n- Add a LICENSE file to your repository. You are encouraged to license your submission under the 0BSD license. You may copy the license text from RFC 0040. Packages missing a license or containing a different license than 0BSD are not eligible for promotion to the official repositories.\n\n"
    },
    {
      "title": "Authentication",
      "level": 3,
      "content": "For write access to the AUR, you need to have an SSH key pair. The content of the public key needs to be copied to your profile in My Account, and the corresponding private key configured for the aur.archlinux.org host. For example:\n\n```\n~/.ssh/config\n```\n\n```\nHost aur.archlinux.org\n  IdentityFile ~/.ssh/aur\n  User aur\n```\n\nYou should create a new key pair rather than use an existing one, so that you can selectively revoke the keys should something happen:\n\n```\n$ ssh-keygen -f ~/.ssh/aur\n```\n\n"
    },
    {
      "title": "Creating package repositories",
      "level": 3,
      "content": "If you are creating a new package from scratch, establish a local Git repository and an AUR remote by cloning the intended pkgbase. If the package does not yet exist, the following warning is expected:\n\n```\n$ git -c init.defaultBranch=master clone ssh://aur@aur.archlinux.org/pkgbase.git\n```\n\n```\nCloning into 'pkgbase'...\nwarning: You appear to have cloned an empty repository.\nChecking connectivity... done.\n```\n\nIf you already have a package, initialize it as a Git repository if it is not one:\n\n```\n$ git -c init.defaultBranch=master init\n```\n\nand add an AUR remote:\n\n```\n$ git remote add label ssh://aur@aur.archlinux.org/pkgbase.git\n```\n\nThen fetch this remote to initialize it in the AUR.\n\n"
    },
    {
      "title": "Publishing new package content",
      "level": 3,
      "content": "When releasing a new version of the packaged software, update the pkgver or pkgrel variables to notify all users that an upgrade is needed. Do not update those values if only minor changes to the PKGBUILD such as the correction of a typo are being published.\n\nDo not commit mere pkgver bumps for VCS packages. They are not considered out of date when the upstream has new commits. Only do a new commit when other changes are introduced, such as changing the build process.\n\nBe sure to regenerate .SRCINFO whenever PKGBUILD metadata changes, such as pkgver() updates; otherwise the AUR will not show updated version numbers.\n\nTo upload or update a package, add at least PKGBUILD and .SRCINFO, then any additional new or modified helper files (such as .install files or local source files such as patches), commit with a meaningful commit message, and finally push the changes to the AUR.\n\nFor example:\n\n```\n$ makepkg --printsrcinfo > .SRCINFO\n$ git add PKGBUILD .SRCINFO\n$ git commit -m \"useful commit message\"\n$ git push\n```\n\n- If .SRCINFO was not included in your last commit, add it by changing your last commit with git commit --amend so the AUR will permit your push.\n- The AUR only allows pushes to the master branch. If the local branch is named something else, rename it and push again.\n\n"
    },
    {
      "title": "Maintaining packages",
      "level": 2,
      "content": "- Check for feedback and comments from other users and try to incorporate any improvements they suggest; consider it a learning process!\n- Please do not leave a comment containing the version number every time you update the package. This keeps the comment section usable for valuable content mentioned above.\n- Please do not just submit and forget about packages! It is the maintainer's job to maintain the package by checking for updates and improving the PKGBUILD.\n- If you do not want to continue to maintain the package for some reason, disown the package using the AUR web interface and/or post a message to the AUR Mailing List. If all maintainers of an AUR package disown it, it will become an \"orphaned\" package.\n- Automation is a valuable tool for maintainers, but it can not replace manual intervention (e.g. projects can change license, add or remove dependencies, and other notable changes even for \"minor\" releases). Automated PKGBUILD updates are used at your own risk and any malfunctioning accounts and their packages may be removed without prior notice.\n\n"
    },
    {
      "title": "Requests",
      "level": 2,
      "content": "Deletion, merge, and orphan requests can be created by clicking on the \"Submit Request\" link under \"Package Actions\" on the right hand side. This dispatches notification emails to the current package maintainer and to the aur-requests mailing list for discussion. Package Maintainers will then either accept or reject the request.\n\n"
    },
    {
      "title": "Deletion",
      "level": 3,
      "content": "Request to unlist a pkgbase from the AUR. A short note explaining the reason for deletion is required, as well as supporting details (like when a package is provided by another package, if you are the maintainer yourself, it is renamed and the original owner agreed, etc).\n\n- It is not sufficient to explain why a package is up for deletion only in its comments: as soon as a package maintainer takes action, the only place where such information can be obtained is the aur-requests mailing list.\n- Deletion requests can be rejected, in which case if you are the maintainer you will likely be advised to disown the package to allow adoption by another maintainer.\n- After a package is \"deleted\", its git repository remains available for cloning.\n\n"
    },
    {
      "title": "Merge",
      "level": 3,
      "content": "Request to delete a pkgbase and transfer its votes and comments to another pkgbase. The name of the package to merge into is required.\n\nThis is the action to use if, for example, an upstream has renamed their project.\n\n- This has nothing to do with git merge or GitLab's merge requests.\n- As the transfer of the votes and comments requires an already existing destination, if a package has no votes or comments, a deletion request linking to the new package is identical.\n\n"
    },
    {
      "title": "Orphan",
      "level": 3,
      "content": "Request that a pkgbase be disowned. These requests will be granted after two weeks if the current maintainer did not react. The exception is if a package was flagged out-of-date for at least 180 days; orphan requests are then automatically accepted.\n\n"
    }
  ]
}