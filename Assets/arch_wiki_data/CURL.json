{
  "title": "CURL",
  "url": "https://wiki.archlinux.org/title/CURL",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "cURL is a command line tool and library for transferring data with URLs. The command supports a number of different protocols, including HTTP, HTTPS, FTP, SCP, and SFTP. It is also designed to work without user interaction, like in scripts.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the curl package.\n\n"
    },
    {
      "title": "Downloading",
      "level": 3,
      "content": "A common use case for cURL is to download the resource to a specified file:\n\n```\n$ curl --output filename URL\n```\n\nIf the URL contains the file name, you can save the resource directly to a file of that name:\n\n```\n$ curl --remote-name URL\n```\n\nSimilarly, you can use -J/--remote-header-name to accept a hint from an HTTP server (from the Content-Disposition header) for what the file should be named. If combined with -O/--remote-name, curl will use the file name specified by the URL if the HTTP server does not return a file name hint in its response.\n\nAlternatively you can print the resource to stdout by omitting the output options:\n\n```\n$ curl URL\n```\n\n"
    },
    {
      "title": "HTTP POST",
      "level": 3,
      "content": "You can use cURL to make HTTP POST requests:\n\n```\n$ curl --data 'request body' URL\n```\n\nIf the request body cannot fit on the command line, cURL can read it from a file:\n\n```\n$ curl --data @filename URL\n```\n\nSometimes, you may need to specify a custom value for the Content-Type header (cURL's default is application/x-www-form-urlencoded). You can do this with -H. For example, if you wanted to make a POST request with a JSON body:\n\n```\n$ curl --data 'json body' -H 'Content-Type: application/json' URL\n```\n\nnote that curl also has a option to write post data in json and change those headers automatically: --json:\n\n```\n$ curl --json '{\"key\":\"value\"}' URL\n```\n\n"
    },
    {
      "title": "Following redirects",
      "level": 3,
      "content": "To follow redirects (e.g. an HTTP to HTTPS redirect):\n\n```\n$ curl --location URL\n```\n\n"
    },
    {
      "title": "Show download errors",
      "level": 3,
      "content": "By default curl would ignore errors (e.g. when downloading to a file, if there is a error curl would not notify you, and the file would be created empty) so use --fail to make it show a message on error:\n\n```\n$ curl --fail URL\n```\n\n"
    },
    {
      "title": "Compression",
      "level": 3,
      "content": "If you want to transfer the data compressed, (e.g. in situations where bandwidth is more limited than CPU, curl would download the data compressed then uncompressed it after the download):\n\n```\n$ curl --compressed URL\n```\n\n"
    },
    {
      "title": "ProgressBar",
      "level": 3,
      "content": "curl has option to a normal ProgressBar when it download files (e.g. [##### ] 80% )\n\n```\n$ curl --progress-bar URL\n```\n\n"
    },
    {
      "title": "Globbing",
      "level": 3,
      "content": "You can also use globbing in curl:\n\n```\n$ curl \"example.com/images/[1-9].png\"\n$ curl \"example.com/{first_page,second_page,third_page}\"\n```\n\n"
    },
    {
      "title": "config file",
      "level": 2,
      "content": "curl also search for a config file called .curlrc in home directory and in $XDG_CONFIG_HOME. You can just put the command line argument you want to use with curl by default, for example :\n\n```\n$HOME/.curlrc\n```\n\n```\n# this is a comment, the next line would be the option for progressbar:\n-#\n# to make curl always compress:\n--compressed\n# or just\ncompressed\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wikipedia:cURL\n- Everything curl - Extensive guide to using cURL\n- curl(1)\n\n"
    }
  ]
}