{
  "title": "Install from usb",
  "url": "https://wiki.archlinux.org/title/Install_from_usb",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- DVD Burning\n- Archiso\n- Multiboot USB drive\n\nThis page discusses various multi-platform methods on how to create an Arch Linux Installer USB drive (also referred to as \"flash drive\", \"USB stick\", \"USB key\", etc) for booting in BIOS and UEFI systems. The result will be a live USB system that can be used for installing Arch Linux, system maintenance or for recovery purposes, and that, because of using Overlayfs for /, will discard all changes once the computer shuts down.\n\nIf you would like to run a full install of Arch Linux from a USB drive (i.e. with persistent settings), see Install Arch Linux on a removable medium. If you would like to use your bootable Arch Linux USB stick as a rescue USB, see chroot.\n\nBefore following any of these steps, download the ISO from https://archlinux.org/download/ and verify its integrity.\n\n"
    },
    {
      "title": "Using basic command line utilities",
      "level": 4,
      "content": "This method is recommended due to its simplicity and universal availability, since these tools are part of coreutils (pulled in by the base meta package).\n\nFind out the name of your USB drive with ls -l /dev/disk/by-id/usb-* and check with lsblk to make sure that it is not mounted.\n\nRun one of the following commands, replacing /dev/disk/by-id/usb-My_flash_drive with your drive, e.g. /dev/disk/by-id/usb-Kingston_DataTraveler_2.0_408D5C1654FDB471E98BED5C-0:0. (Do not append a partition number, so do not use something like /dev/disk/by-id/usb-Kingston_DataTraveler_2.0_408D5C1654FDB471E98BED5C-0:0-part1 or /dev/sdb1):\n\n- using cat(1): # cat path/to/archlinux-version-x86_64.iso > /dev/disk/by-id/usb-My_flash_drive\n- using cp(1): # cp path/to/archlinux-version-x86_64.iso /dev/disk/by-id/usb-My_flash_drive\n- using dd: # dd bs=4M if=path/to/archlinux-version-x86_64.iso of=/dev/disk/by-id/usb-My_flash_drive conv=fsync oflag=direct status=progress\n- using tee(1): # tee < path/to/archlinux-version-x86_64.iso > /dev/disk/by-id/usb-My_flash_drive\n- using pv: # pv path/to/archlinux-version-x86_64.iso -Yo /dev/disk/by-id/usb-My_flash_drive\n\n```\n# cat path/to/archlinux-version-x86_64.iso > /dev/disk/by-id/usb-My_flash_drive\n```\n\n```\n# cp path/to/archlinux-version-x86_64.iso /dev/disk/by-id/usb-My_flash_drive\n```\n\n```\n# dd bs=4M if=path/to/archlinux-version-x86_64.iso of=/dev/disk/by-id/usb-My_flash_drive conv=fsync oflag=direct status=progress\n```\n\n```\n# tee < path/to/archlinux-version-x86_64.iso > /dev/disk/by-id/usb-My_flash_drive\n```\n\n```\n# pv path/to/archlinux-version-x86_64.iso -Yo /dev/disk/by-id/usb-My_flash_drive\n```\n\nSee [1] and [2] for a comparison and perspective on the use of those tools and why dd may be the least adapted one.\n\n- Executing sync with root privileges after the respective command ensures buffers are fully written to the device before you remove it.\n- If the UEFI version of the USB's Arch ISO hangs or is unable to load, try repeating the medium creation process on the same USB drive one or more times. If this does not work, you may also try updating your motherboard's firmware.\n\n"
    },
    {
      "title": "Using KDE ISO Image Writer",
      "level": 4,
      "content": "KDE ISO Image Writer can be downloaded via isoimagewriter. It can auto-detect the USB-drive and you need to manually select a ISO file. It is recommended to use .sig file to signature but it can be skipped by clicking \"create\".\n\n"
    },
    {
      "title": "Using GNOME Disk Utility",
      "level": 4,
      "content": "Linux distributions running GNOME can easily make a live USB through nautilus and gnome-disk-utility. Simply right-click on the .iso file, and select Open With Disk Image Writer. When GNOME Disk Utility opens, specify the flash drive from the Destination drop-down menu and click Start Restoring.\n\n"
    },
    {
      "title": "Using MultiWriter",
      "level": 4,
      "content": "gnome-multi-writer is a simple GTK3 based graphical tool to write an ISO file to one or multiple USB devices at once.\n\n"
    },
    {
      "title": "Using Kindd",
      "level": 4,
      "content": "Kindd is a Qt based graphical frontend for dd. It is available as kinddAUR.\n\n"
    },
    {
      "title": "Using Popsicle",
      "level": 4,
      "content": "Popsicle is a tool made for flashing ISO files to multiple USB devices in parallel by the PopOS development team. It is written in Rust and uses GTK. It is available as popsicleAUR.\n\n"
    },
    {
      "title": "Using SUSE Studio ImageWriter",
      "level": 4,
      "content": "SUSE Studio ImageWriter is a Qt based tool made by the openSUSE development team. It is available as imagewriterAUR.\n\n"
    },
    {
      "title": "Using xorriso-dd-target",
      "level": 4,
      "content": "xorriso-dd-target (from libisoburn) is a shell script which attempts to reduce the risk of overwriting the wrong storage device. Its safest mode is named -plug_test. For example, to use it as a regular user who can elevate to root using sudo:\n\n```\n$ xorriso-dd-target -with_sudo -plug_test -DO_WRITE -image_file archlinux-version-x86_64.iso\n```\n\nSee xorriso-dd-target(1) for details.\n\n"
    },
    {
      "title": "Using USBImager",
      "level": 4,
      "content": "USBImager is a multiplatform graphical application that writes and verifies compressed disk images to USB drives, and creates backups. It is available as usbimagerAUR.\n\n"
    },
    {
      "title": "Using KDE ISO Image Writer",
      "level": 4,
      "content": "KDE ISO Image Writer can be downloaded as .exe file at isoimagewriter. It can auto-detect the USB-drive and you need to manually select a ISO file. It is recommended to use .sig file to signature but it can be skipped by clicking \"create\".\n\n"
    },
    {
      "title": "Using win32diskimager",
      "level": 4,
      "content": "win32diskimager is another graphical tool for writing images to USB sticks or SD/CF cards from Windows. Select your ISO image and the target USB drive letter (you may have to format it first to assign it a drive letter), and click Write.\n\n"
    },
    {
      "title": "Using USBwriter",
      "level": 4,
      "content": "This method does not require any workaround and is as straightforward as dd under Linux. Just download the Arch Linux ISO, and with local administrator rights use the USBwriter utility to write to your USB flash memory.\n\n"
    },
    {
      "title": "Using USBImager",
      "level": 4,
      "content": "USBImager is a multiplatform graphical application that writes and verifies compressed disk images to USB drives, and creates backups.\n\n"
    },
    {
      "title": "Using Rufus",
      "level": 4,
      "content": "Rufus is a multi-purpose USB ISO writer. It provides a graphical user interface and does not care if the drive is properly formatted or not.\n\nSimply select the Arch Linux ISO, the USB drive you want to create the bootable Arch Linux onto and click START.\n\nNote: **DD Image mode** \n\n"
    },
    {
      "title": "Using Cygwin",
      "level": 4,
      "content": "Make sure your Cygwin installation contains the dd package.\n\nPlace your image file in your home directory:\n\n```\nC:\\cygwin\\home\\User\\\n```\n\nRun cygwin as administrator (required for cygwin to access hardware). To write to your USB drive use the following command:\n\n```\ndd if=archlinux-version-x86_64.iso of=\\\\.\\x: bs=4M\n```\n\nwhere archlinux-version-x86_64.iso is the path to the iso image file within the cygwin directory and \\\\.\\x: is your USB flash drive where x is the windows designated letter, e.g. \\\\.\\d:.\n\nOn Cygwin 6.0, find out the correct partition with:\n\n```\ncat /proc/partitions\n```\n\nand write the ISO image with the information from the output. Example:\n\n```\ndd if=archlinux-version-x86_64.iso of=/dev/sdb bs=4M\n```\n\n"
    },
    {
      "title": "Using dd for Windows",
      "level": 4,
      "content": "A GPL licensed dd version for Windows is available at http://www.chrysocome.net/dd. The advantage of this over Cygwin is a smaller download. Use it as shown in instructions for Cygwin above.\n\nTo begin, download the latest version of dd for Windows. Once downloaded, extract the archive's contents into the Downloads directory or elsewhere.\n\nNow, launch your Command Prompt as an administrator. Next, change directory (cd) into the Downloads directory.\n\nIf your Arch Linux ISO is elsewhere you may need to state the full path, for convenience you may wish to put the Arch Linux ISO into the same folder as the dd executable. The basic format of the command will look like this.\n\n```\n# dd if=archlinux-version-x86_64.iso od=\\\\.\\x: bs=4M\n```\n\n"
    },
    {
      "title": "Using flashnul",
      "level": 4,
      "content": "flashnul is an utility to verify the functionality and maintenance of Flash-Memory (USB-Flash, IDE-Flash, SecureDigital, MMC, MemoryStick, SmartMedia, XD, CompactFlash etc).\n\nFrom a command prompt, invoke flashnul with -p, and determine which device index is your USB drive, e.g.:\n\n```\nC:\\>flashnul -p\n```\n\n```\nAvaible physical drives:\nAvaible logical disks:\nC:\\\nD:\\\nE:\\\n```\n\nWhen you have determined which device is the correct one, you can write the image to your drive, by invoking flashnul with the device index, -L, and the path to your image, e.g:\n\n```\nC:\\>flashnul E: -L path\\to\\archlinux-version-x86_64.iso\n```\n\nAs long as you are really sure you want to write the data, type yes, then wait a bit for it to write. If you get an access denied error, close any Explorer windows you have open.\n\n"
    },
    {
      "title": "Using macOS dd",
      "level": 4,
      "content": "First, you need to identify the USB device. Open /Applications/Utilities/Terminal and list all storage devices with the command:\n\n```\n$ diskutil list\n```\n\nYour USB device will appear as something like /dev/disk2 (external, physical). Verify that this is the device you want to erase by checking its name and size and then use its identifier for the commands below instead of /dev/diskX.\n\nA USB device is normally auto-mounted in macOS, and you have to unmount (not eject) it before block-writing to it with dd. In Terminal, do:\n\n```\n$ diskutil unmountDisk /dev/diskX\n```\n\nNow copy the ISO image file to the device:\n\n- BSD-derived dd, which includes macOS's default dd, uses lower-case m suffix. This differs from GNU dd, used elsewhere in this article.\n- The r before disk is for raw mode which makes the transfer much faster.\n- In newer versions of macOS, the dd command supports status=progress and can be used to show progress. It's also possible to view progress manually as described below.\n\n```\n# dd if=path/to/archlinux-version-x86_64.iso of=/dev/rdiskX bs=1m\n```\n\nThis command will run silently. To view progress, send SIGINFO by pressing Ctrl+t. Note diskX here should not include the s1 suffix, or else the USB device will only be bootable in UEFI mode and not legacy. After completion, macOS may complain that The disk you inserted was not readable by this computer. Select Ignore. The USB device will be bootable.\n\n"
    },
    {
      "title": "Using USBImager",
      "level": 4,
      "content": "USBImager is a multiplatform graphical application that writes and verifies compressed disk images to USB drives, and creates backups.\n\n"
    },
    {
      "title": "Using EtchDroid",
      "level": 4,
      "content": "EtchDroid is a OS image flasher for Android. It works without root permissions since Android 5. Check the upstream GitHub if you have issue.\n\nTo create an Arch Linux installer, download the ISO image file on your Android device. Plug the USB drive to your device, using a USB-OTG adapter if needed. Open EtchDroid, select Flash raw image, select your Arch ISO, then select your USB drive. Grant the USB API permission and confirm.\n\nKeep your phone on a table while it is writing the image: a lot of USB-OTG adapters are a bit wobbly and you might unplug it by mistake.\n\n"
    },
    {
      "title": "In GNU/Linux",
      "level": 4,
      "content": "This method is more complicated than writing the image directly with dd, but it does keep the flash drive usable for data storage (that is, the ISO is installed in a specific partition within the already partitioned device without altering other partitions).\n\n- If not done yet, create a partition table on /dev/disk/by-id/usb-My_flash_drive.\n- If not done yet, create a partition on the device. The partition /dev/disk/by-id/usb-My_flash_drive-partn must be formatted to FAT32.\n- Mount the FAT32 file system located in the USB flash device and extract the contents of the ISO image to it. For example:\n\n```\n# mount /dev/disk/by-id/usb-My_flash_drive-partn /mnt\n# bsdtar -x -f archlinux-version-x86_64.iso -C /mnt\n```\n\nSyslinux files for BIOS systems are already copied to /mnt/boot/syslinux/. Unmount the FAT file system, install the syslinux and mtools packages and run the following commands to make the partition bootable:\n\n```\n# umount /mnt\n# syslinux --directory boot/syslinux --install /dev/disk/by-id/usb-My_flash_drive-partn\n# dd bs=440 count=1 conv=notrunc if=/usr/lib/syslinux/bios/mbr.bin of=/dev/disk/by-id/usb-My_flash_drive\n```\n\n- Replace mbr.bin with gptmbr.bin if /dev/disk/by-id/usb-My_flash_drive has a GUID Partition Table. See Syslinux#Manually for details.\n- For the MBR partition table you will need to set the \"boot\" flag. See Syslinux#MBR partition table for details.\n\n"
    },
    {
      "title": "In Windows",
      "level": 4,
      "content": "Note: **Bootable USB Creator utility** \n\n- For manual formatting, do not use any Bootable USB Creator utility for creating the UEFI bootable USB. For manual formatting, do not use dd for Windows to dd the ISO to the USB drive either.\n- In the below commands, X: is assumed to be the USB flash drive in Windows.\n- Windows uses backward slash \\ as path-separator, so the same is used in the below commands.\n- All commands should be run in Windows command prompt as administrator.\n- > denotes the Windows command prompt.\n\n- Partition and format the USB drive using Rufus USB partitioner. Select partition scheme option as MBR for BIOS and UEFI and File system as FAT32. Uncheck \"Create a bootable disk using ISO image\" and \"Create extended label and icon files\" options.\n- Extract the ISO (similar to extracting ZIP archive) to the USB flash drive using 7-Zip.\n- Download official Syslinux 6.xx binaries (zip file) from https://www.kernel.org/pub/linux/utils/boot/syslinux/ and extract it. The version of Syslinux should be the same version used in the ISO image.\n\n- Run the following command (in Windows cmd prompt, as admin):\n\n```\n> cd bios\\\n> for /r %Y in (*.c32) do copy \"%Y\" \"X:\\boot\\syslinux\\\" /y\n> copy mbr\\*.bin X:\\boot\\syslinux\\ /y\n```\n\n- Install Syslinux to the USB by running (use win64\\syslinux64.exe for x64 Windows):\n\n```\n> cd bios\\\n> win32\\syslinux.exe -d /boot/syslinux -i -a -m X:\n```\n\n- Only copying the files will result in an un-bootable device: this last command installs Syslinux's files to the VBR of the USB partition, sets the partition as \"active/boot\" in the MBR partition table and writes the MBR boot code to the USB device.\n- The -d switch expects a path with forward slash path-separator like in *unix systems.\n\n"
    },
    {
      "title": "In GNU/Linux",
      "level": 4,
      "content": "For some old BIOS systems, only booting from USB-ZIP drives is supported. This method allows you to still boot from a USB hard drive.\n\n- Install syslinux and mtools.\n- Find your USB drive with ls /dev/disk/by-id/usb-*.\n- Type mkdiskimage -4 /dev/disk/by-id/usb-My_flash_drive 0 64 32. This will take a while.\n\nFrom here continue with the manual formatting method. The partition will be /dev/disk/by-id/usb-My_flash_drive-part4 due to the way ZIP drives work.\n\n"
    },
    {
      "title": "UEFI only",
      "level": 3,
      "content": "For UEFI-only booting, it is enough to extract the ISO contents onto a FAT-formatted USB flash drive.\n\nIt does not require creating a EFI system partition on the drive as all UEFI will happily boot any FAT volume from USB flash drives. The most compatible setup would be using the MBR partition table with a single active (bootable) primary partition of type 0c \"W95 FAT32 (LBA)\".[3]\n\n"
    },
    {
      "title": "In GNU/Linux",
      "level": 4,
      "content": "This method extracts files from the ISO image to a USB flash drive.\n\n1. If not done yet, create a partition table on /dev/disk/by-id/usb-My_flash_drive and a partition (/dev/disk/by-id/usb-My_flash_drive-partn) on the device.\n1. If not done yet, format the partition to FAT32: # mkfs.fat -F 32 /dev/disk/by-id/usb-My_flash_drive-partn\n1. Mount the file system: # mount /dev/disk/by-id/usb-My_flash_drive-partn /mnt\n1. Extract the ISO image to the mounted file system: # bsdtar -x -f archlinux-version-x86_64.iso -C /mnt\n1. Unmount the file system.\n\n```\n# mkfs.fat -F 32 /dev/disk/by-id/usb-My_flash_drive-partn\n```\n\n```\n# mount /dev/disk/by-id/usb-My_flash_drive-partn /mnt\n```\n\n```\n# bsdtar -x -f archlinux-version-x86_64.iso -C /mnt\n```\n\n"
    },
    {
      "title": "In Windows",
      "level": 4,
      "content": "This method copies files from the ISO image to a USB flash drive.\n\n1. Partition the USB flash drive and format it to FAT32.\n1. Right click on archlinux-version-x86_64.iso and select Mount.\n1. Navigate to the newly created DVD drive and copy all files and folders to the USB flash drive.\n1. When done copying, right click on the DVD drive and select Eject.\n1. Eject the USB flash drive.\n\n"
    },
    {
      "title": "In macOS",
      "level": 4,
      "content": "Neither DiskImageMounter nor Disk Utility can mount isohybrid ISOs, but since macOS ships with libarchive, the ISO can simply be extracted onto the flash drive using bsdtar.\n\n1. If not done yet, partition the USB flash drive and format the partition to FAT32 using Disk Utility.\n1. Mount the volume.\n1. Open the Terminal application and use bsdtar to extract the ISO image to the mounted file system: $ bsdtar -x -f archlinux-version-x86_64.iso -C /Volumes/your-flash-drive\n1. When done, unmount and eject the USB flash drive.\n\n```\n$ bsdtar -x -f archlinux-version-x86_64.iso -C /Volumes/your-flash-drive\n```\n\n"
    },
    {
      "title": "Using a multiboot USB drive",
      "level": 2,
      "content": "Note: **This article or section is a candidate for merging with Multiboot USB drive.** This article or section is a candidate for merging with Multiboot USB drive.\n\nThis article or section is a candidate for merging with Multiboot USB drive.\n\nThis allows booting multiple ISOs from a single USB device, including the archiso. Updating an existing USB drive to a more recent ISO is simpler than for most other methods. See Multiboot USB drive.\n\n"
    },
    {
      "title": "Using Ventoy",
      "level": 3,
      "content": "Ventoy is an open source tool to create bootable USB drive for ISO/WIM/IMG/VHD(x)/EFI files. With Ventoy, you do not need to format the disk over and over, you just need to copy the ISO/WIM/IMG/VHD(x)EFI files to the USB drive and boot them directly. You can copy many files at a time and Ventoy will give you a boot menu to select them. It is available as ventoy-binAUR.\n\n"
    },
    {
      "title": "Loading the installation medium from RAM",
      "level": 4,
      "content": "This method uses Syslinux and a Ramdisk (MEMDISK) to load the entire Arch Linux ISO image into RAM. Since this will be running entirely from system memory, you will need to make sure the system you will be installing this on has an adequate amount. A minimum amount of RAM between 500 MB and 1 GB should suffice for a MEMDISK based, Arch Linux install.\n\nFor more information on Arch Linux system requirements as well as those for MEMDISK see the Installation guide and here. For reference, here is the preceding forum thread.\n\nBegin by formatting the USB flash drive as FAT32. Then create the following folders on the newly formatted drive.\n\n- Boot Boot/ISOs Boot/Settings\n\n- Boot/ISOs\n- Boot/Settings\n\nNext copy the ISO that you would like to boot to the Boot/ISOs folder. After that, extract from the following files from the latest release of syslinux from here and copy them into the following folders.\n\n- ./win32/syslinux.exe to the Desktop or Downloads folder on your system.\n- ./memdisk/memdisk to the Settings folder on your USB flash drive.\n\nAfter copying the needed files, navigate to the USB flash drive, Boot/Settings and create a syslinux.cfg file.\n\n```\n/Boot/Settings/syslinux.cfg\n```\n\n```\nDEFAULT arch_iso\n\nLABEL arch_iso\n        MENU LABEL Arch Setup\n        LINUX memdisk\n        INITRD /Boot/ISOs/archlinux-version-x86_64.iso\n        APPEND iso\n```\n\nFor more information see the Syslinux article.\n\nFinally, create a *.bat file where syslinux.exe is located and run it (\"Run as administrator\" if you are on Vista or Windows 7):\n\n```\nC:\\Documents and Settings\\username\\Desktop\\install.bat\n```\n\n```\n@echo off\nsyslinux.exe -m -a -d /Boot/Settings X:\n```\n\n"
    },
    {
      "title": "Using etcher",
      "level": 3,
      "content": "etcher contains analytics and first-party advertising. See [4], [5] and [6].\n\n"
    },
    {
      "title": "Using Universal USB Installer",
      "level": 3,
      "content": "- The download page contains fake Download buttons that may contain malware.\n- Universal USB Installer does not write the ISO as-is which breaks BIOS booting due to the discrepancy in syslinux versions. See [7].\n- The Arch Linux installation image's boot loaders expect the ISO contents to reside on volume with the label ARCH_YYYYXX. Universal USB Installer does not update the file system label, nor does it correct the boot loader configuration.\n\n"
    },
    {
      "title": "Using UNetbootin",
      "level": 3,
      "content": "- UNetbootin does not write the ISO as-is which breaks BIOS booting due to the discrepancy in syslinux versions.\n- The Arch Linux installation image's boot loaders expect the ISO contents to reside on volume with the label ARCH_YYYYXX. UNetbootin does not update the file system label, nor does it correct the boot loader configuration.\n\n"
    },
    {
      "title": "Add an additional data partition to the drive",
      "level": 3,
      "content": "There are two ways to add an additional (third) partition to a drive prepared using #Using the ISO as is (BIOS and UEFI).\n\n1. By creating a file system image of a desired size and attaching to the ISO (before writing the ISO to the USB flash drive). See Install Arch Linux via SSH#Using a single USB flash drive for an example.\n1. By using fdisk to edit the drive's MBR partition table without touching the ISO 9660 or invalid GPT structures. This will destroy the backup GPT header in the invalid GPT, but that should not matter.\n\nTo edit the MBR partition table on the drive, run:\n\n```\n# fdisk -t mbr --wipe never /dev/disk/by-id/usb-My_flash_drive\n```\n\nUse the n command to create a new partition (leave the default values for the first and last sectors if it should span all available free size). If you want to access it in other operating systems, change the MBR partition type ID using the t command (e.g. to 0c \"W95 FAT32 (LBA)\" or 07 \"HPFS/NTFS/exFAT\"). Write the changes to disk and exit via the w command.\n\nAfter partitioning, create a file system on the new partition (/dev/disk/by-id/usb-My_flash_drive-part3).\n\n"
    },
    {
      "title": "Device does not show up",
      "level": 3,
      "content": "If you get the device did not show up after 30 seconds error due to /dev/disk/by-label/ARCH_YYYYMM not mounting, try renaming your USB medium to ARCH_YYYYMM so Arch can find it. (e.g. For archlinux-2021.02.01-x86_64.iso, use ARCH_202102).\n\n"
    },
    {
      "title": "Failed to set up loop devices: No such file or directory",
      "level": 3,
      "content": "If you get losetup: /run/archiso/bootmnt/arch/x86_64/airootfs.sfs: failed to set up loop devices: No such file or directory, try using a USB 2.0 port. For example, some USB 3.0 ports through USB hubs do not work.\n\n"
    },
    {
      "title": "Other errors",
      "level": 3,
      "content": "If you get other errors, try using another USB device. There are multiple scenarios in which it solved all issues.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Gentoo:LiveUSB/Guide\n- Fedora:How to create and use Live USB\n- openSUSE wiki - SDB:Live USB stick\n\n"
    }
  ]
}