{
  "title": "Nm",
  "url": "https://wiki.archlinux.org/title/Nm",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Network configuration\n- Wireless network configuration\n\nNetworkManager is a program for providing detection and configuration for systems to automatically connect to networks. NetworkManager's functionality can be useful for both wireless and wired networks. For wireless networks, NetworkManager prefers known wireless networks and has the ability to switch to the most reliable network. NetworkManager-aware applications can switch from online and offline mode. NetworkManager also prefers wired connections over wireless ones, has support for modem connections and certain types of VPN. NetworkManager was originally developed by Red Hat and now is hosted by the GNOME project.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "NetworkManager can be installed with the package networkmanager, which contains a daemon, a command line interface (nmcli) and a curses‐based interface (nmtui).\n\n"
    },
    {
      "title": "Enable NetworkManager",
      "level": 3,
      "content": "After installation, you should start/enable NetworkManager.service. Once the NetworkManager daemon is started, it will automatically connect to any available \"system connections\" that have already been configured. Any \"user connections\" or unconfigured connections will need nmcli or an applet to configure and connect.\n\n- Each network interface should be managed by only one DHCP client or network manager, so it is advised to run only one DHCP client or network manager on the system. Find a list of the currently running services with systemctl --type=service and then stop or reconfigure those that conflict.\n- If systemd-resolved is not started, an error message will start flooding your logs. See #Unit dbus-org.freedesktop.resolve1.service not found for more info.\n\n"
    },
    {
      "title": "Additional interfaces",
      "level": 3,
      "content": "- nm-connection-editor for a graphical user interface,\n- network-manager-applet for a system tray applet (nm-applet).\n\n"
    },
    {
      "title": "Mobile broadband support",
      "level": 3,
      "content": "NetworkManager uses ModemManager for mobile broadband connection support.\n\nInstall modemmanager and usb_modeswitch. Afterwards enable and start ModemManager.service.\n\nIt may be necessary to restart NetworkManager.service for it to detect ModemManager. After you restart it, re-plug the modem again and it should be recognized.\n\nAdd connections from a front-end (e.g. nm-connection-editor) and select mobile broadband as the connection type. After selecting your ISP and billing plan, APN and other settings should be filled in automatically using information from mobile-broadband-provider-info.\n\n"
    },
    {
      "title": "PPPoE / DSL support",
      "level": 3,
      "content": "Install ppp package for PPPoE / DSL connection support. To actually add PPPoE connection, use nm-connection-editor and add new DSL/PPPoE connection.\n\n"
    },
    {
      "title": "VPN support",
      "level": 3,
      "content": "NetworkManager since version 1.16 has native support for WireGuard, all it needs is the wireguard kernel module. Read the WireGuard in NetworkManager blog post for details.\n\nSupport for other VPN types is based on a plug-in system. They are provided in the following packages:\n\n- networkmanager-openconnect for OpenConnect\n- networkmanager-openvpn for OpenVPN\n- networkmanager-pptp for PPTP Client\n- networkmanager-strongswan for strongSwan\n- networkmanager-vpnc\n- networkmanager-fortisslvpnAUR\n- networkmanager-iodine-gitAUR\n- networkmanager-libreswanAUR\n- networkmanager-l2tp\n- networkmanager-ssh-gitAUR\n- network-manager-sstp\n\n- To have fully functioning DNS resolution when using VPN, you should set up conditional forwarding.\n- These plug-ins may not have a documented command line interface, or may not work at all without an applet running. This is not an issue if you are using a regular desktop environment; if you are not, you should run #nm-applet while configuring or activating the connection so that you get the necessary dialogues. [1]\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "NetworkManager comes with nmcli(1) and nmtui(1).\n\n"
    },
    {
      "title": "nmcli examples",
      "level": 3,
      "content": "List nearby Wi-Fi networks:\n\n```\n$ nmcli device wifi list\n```\n\nConnect to a Wi-Fi network:\n\n```\n$ nmcli device wifi connect SSID_or_BSSID password password\n```\n\nConnect to a hidden Wi-Fi network:\n\n```\n$ nmcli device wifi connect SSID_or_BSSID password password hidden yes\n```\n\nConnect to a Wi-Fi on the wlan1 interface:\n\n```\n$ nmcli device wifi connect SSID_or_BSSID password password ifname wlan1 profile_name\n```\n\nDisconnect an interface:\n\n```\n$ nmcli device disconnect ifname eth0\n```\n\nGet a list of connections with their names, UUIDs, types and backing devices:\n\n```\n$ nmcli connection show\n```\n\nActivate a connection (i.e. connect to a network with an existing profile):\n\n```\n$ nmcli connection up name_or_uuid\n```\n\nDelete a connection:\n\n```\n$ nmcli connection delete name_or_uuid\n```\n\nSee a list of network devices and their state:\n\n```\n$ nmcli device\n```\n\nTurn off Wi-Fi:\n\n```\n$ nmcli radio wifi off\n```\n\n"
    },
    {
      "title": "Edit a connection",
      "level": 3,
      "content": "For a comprehensive list of settings, see nm-settings(5).\n\nFirstly, you need to get a list of connections:\n\n```\n$ nmcli connection\n```\n\n```\nNAME                UUID                                  TYPE      DEVICE\nWired connection 2  e7054040-a421-3bef-965d-bb7d60b7cecf  ethernet  enp5s0\nWired connection 1  997f2782-f0fc-301d-bfba-15421a2735d8  ethernet  enp0s25\nMY-HOME-WIFI-5G     92a0f7b3-2eba-49ab-a899-24d83978f308  wifi       --\n```\n\nHere you can use the first column as connection-id used later. In this example, we pick Wired connection 2 as a connection-id.\n\nYou have three methods to configure a connection Wired connection 2 after it has been created:\n\nTo remove a setting, pass an empty field (\"\") to it like this:\n\n"
    },
    {
      "title": "nmtui",
      "level": 3,
      "content": "NetworkManager ships a text user interface (TUI) for managing connections, the system hostname and radio switches. It can be launched by running nmtui.\n\n"
    },
    {
      "title": "Front-ends",
      "level": 2,
      "content": "To provide integration with a desktop environment, most users will want to install an applet. This not only provides easy access to network selection and configuration, but also provides the agent necessary for securely storing secrets. Various desktop environments have their own applet; otherwise, you can use #nm-applet.\n\n"
    },
    {
      "title": "GNOME",
      "level": 3,
      "content": "GNOME has a built-in tool, accessible from the Network settings.\n\n"
    },
    {
      "title": "KDE Plasma",
      "level": 3,
      "content": "Install the plasma-nm package. After that, add it to the KDE taskbar via the Panel options > Add widgets > Networks menu.\n\n"
    },
    {
      "title": "nm-applet",
      "level": 3,
      "content": "network-manager-applet is a GTK 3 front-end which works under Xorg environments with a systray.\n\nTo store connection secrets install and configure an application which implements the Secret Service D-Bus API such as GNOME/Keyring, KDE Wallet, or KeePassXC.\n\nBe aware that after enabling the tick-box option Make available to other users for a connection, NetworkManager stores the password in plain-text, though the respective file is accessible only to root (or other users via nm-applet). See #Encrypted Wi-Fi passwords.\n\nIn order to run nm-applet without a systray, you can use trayer or stalonetray. For example, you can add a script like this one in your path:\n\n```\nnmgui\n```\n\n```\n#!/bin/sh\nnm-applet    2>&1 > /dev/null &\nstalonetray  2>&1 > /dev/null\nkillall nm-applet\n```\n\nWhen you close the stalonetray window, it closes nm-applet too, so no extra memory is used once you are done with network settings.\n\nThe applet can show notifications for events such as connecting to or disconnecting from a Wi-Fi network. For these notifications to display, ensure that you have a notification server installed - see Desktop notifications. If you use the applet without a notification server, you might see some messages in stdout/stderr, and the applet might hang. See [2].\n\nIn order to run nm-applet with such notifications disabled, start the applet with the following command:\n\n```\n$ nm-applet --no-agent\n```\n\n```\nExec=nm-applet --no-agent\n```\n\n"
    },
    {
      "title": "Appindicator",
      "level": 4,
      "content": "As of version 1.18.0 Appindicator support is available in the official network-manager-applet package. To use nm-applet in an Appindicator environment start the applet with the following command:\n\n```\n$ nm-applet --indicator\n```\n\n"
    },
    {
      "title": "networkmanager-dmenu",
      "level": 3,
      "content": "Alternatively there is networkmanager-dmenu-gitAUR which is a small script to manage NetworkManager connections with dmenu or rofi instead of nm-applet. It provides all essential features such as connection to existing NetworkManager Wi-Fi or wired connections, connect to new Wi-Fi connections, requests passphrase if required, connect to existing VPN connections, enable/disable networking, launch nm-connection-editor GUI, connect to Bluetooth networks.\n\n"
    },
    {
      "title": "switchboard",
      "level": 3,
      "content": "Pantheon's switchboard offers a desktop environment-agnostic way to configure NetworkManager when combined with switchboard-plug-network and nm-connection-editor. It can be ran with the following command:\n\n```\n$ io.elementary.settings\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "NetworkManager will require some additional steps to be able run properly. Make sure you have configured /etc/hosts as described in Network configuration#Set the hostname section.\n\nNetworkManager has a global configuration file at /etc/NetworkManager/NetworkManager.conf. Additional configuration files can be placed in /etc/NetworkManager/conf.d/. Usually no configuration needs to be done to the global defaults.\n\nAfter editing a configuration file, the changes can be applied by running:\n\n```\n# nmcli general reload\n```\n\n"
    },
    {
      "title": "NetworkManager-wait-online",
      "level": 3,
      "content": "Enabling NetworkManager.service also enables NetworkManager-wait-online.service, which is a oneshot system service that waits for the network to be configured. The latter has WantedBy=network-online.target, so it will finish only when network-online.target itself is enabled or pulled in by some other unit. See also systemd#Running services after the network is up.\n\nBy default, NetworkManager-wait-online.service waits for NetworkManager startup to complete, rather than waiting for network connectivity specifically (see nm-online(1)). If NetworkManager-wait-online.service finishes before the network is really up, resulting in failed services on boot, extend the unit to remove the -s from the ExecStart line:\n\n```\n[Service]\nExecStart=\nExecStart=/usr/bin/nm-online -q\n```\n\nBe aware that this can cause other issues.\n\nIn some cases, the service will still fail to start successfully on boot due to the timeout setting being too short. Edit the service to change NM_ONLINE_TIMEOUT from 60 to a higher value.\n\n"
    },
    {
      "title": "Set up PolicyKit permissions",
      "level": 3,
      "content": "By default, all users in active local sessions are allowed to change most network settings without a password. See General troubleshooting#Session permissions to check your session type. In most cases, everything should work out of the box.\n\nSome actions (such as changing the system hostname) require an administrator password. In this case, you need to add yourself to the wheel group and run a Polkit authentication agent which will prompt for your password.\n\nFor remote sessions (e.g. headless VNC), you have several options for obtaining the necessary privileges to use NetworkManager:\n\n1. Add yourself to the wheel group. You will have to enter your password for every action. Note that your user account may be granted other permissions as well, such as the ability to use sudo without entering the root password.\n1. Add yourself to the network group and create /etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules with the following content: polkit.addRule(function(action, subject) { if (action.id.indexOf(\"org.freedesktop.NetworkManager.\") == 0 && subject.isInGroup(\"network\")) { return polkit.Result.YES; } }); All users in the network group will be able to add and remove networks without a password (which means you do not have to run a Polkit authentication agent, so this option will also work in SSH sessions).\n\n```\npolkit.addRule(function(action, subject) {\n  if (action.id.indexOf(\"org.freedesktop.NetworkManager.\") == 0 && subject.isInGroup(\"network\")) {\n    return polkit.Result.YES;\n  }\n});\n```\n\n"
    },
    {
      "title": "Proxy settings",
      "level": 3,
      "content": "NetworkManager does support some proxy settings. While they can not be directly modified using nmtui, nm-applet and nmcli support those. See the proxy settings in nm-settings-nmcli(5).\n\nAdditionally, custom proxy commands can always be run using dispatcher scripts, see #Dispatcher examples.\n\nSee also Proxy settings.\n\n"
    },
    {
      "title": "Checking connectivity",
      "level": 3,
      "content": "NetworkManager can try to reach a webserver after connecting to a network in order to determine if it is e.g behind a captive portal. The default host (configured in /usr/lib/NetworkManager/conf.d/20-connectivity.conf) is ping.archlinux.org (a CNAME alias of redirect.archlinux.org). To use a different webserver or to disable connectivity checking, create /etc/NetworkManager/conf.d/20-connectivity.conf, see NetworkManager.conf(5) § CONNECTIVITY SECTION. Below is an example of using GNOME servers (it does not require the use of GNOME):\n\n```\n/etc/NetworkManager/conf.d/20-connectivity.conf\n```\n\n```\n[connectivity]\nuri=http://nmcheck.gnome.org/check_network_status.txt\n```\n\nTo disable NetworkManager's connectivity check, use the following configuration. This can be useful when connected to a VPN that blocks connectivity checks.\n\n```\n/etc/NetworkManager/conf.d/20-connectivity.conf\n```\n\n```\n[connectivity]\nenabled=false\n```\n\n"
    },
    {
      "title": "Captive portals",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nFor those behind a captive portal, the desktop manager may automatically open a window asking for credentials. If your desktop does not, you can use capnet-assist package (however, it currently has a broken NetworkManager dispatcher script). Alternatively, you can create a NetworkManager dispatcher script with the following content:\n\n```\n/etc/NetworkManager/dispatcher.d/90-open_captive_portal\n```\n\n```\n#!/bin/sh -e\n# Script to dispatch NetworkManager events\n#\n# Runs shows a login webpage on walled garden networks.\n# See NetworkManager(8) for further documentation of the dispatcher events.\n\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\nif [ -x \"/usr/bin/logger\" ]; then\n    logger=\"/usr/bin/logger -s -t captive-portal\"\nelse\n    logger=\":\"\nfi\n\nwait_for_process() {\n    PNAME=$1\n    while [ -z \"$(/usr/bin/pgrep $PNAME)\" ]; do\n        sleep 3;\n    done\n}\n\n#launch the browser, but on boot we need to wait that nm-applet starts\nstart_browser() {\n    local user=\"$1\"\n    local display=\"$2\"\n\n    export DISPLAY=\"$display\"\n    wait_for_process nm-applet\n\n    export XAUTHORITY=\"/home/$user/.Xauthority\"\n\n    $logger \"Running browser as '$user' with display '$display' to login in captive portal\"\n    sudo -u \"$user\" --preserve-env=DISPLAY,XAUTHORITY -H xdg-open http://capnet.elementary.io 2>&1 > /dev/null\n}\n\n# Run the right scripts\ncase \"$2\" in\n    connectivity-change)\n    $logger -p user.debug \"dispatcher script triggered on connectivity change: $CONNECTIVITY_STATE\"\n    if [ \"$CONNECTIVITY_STATE\" = \"PORTAL\" ]; then\n        # Match last column of who's output with ' :[at least one digit] '\n        who | awk '$NF ~ /\\(:[0-9]+\\)/ { print $1 \" \" substr($NF, 2, length($NF)-2) };' | \\\n        while read user display; do\n            start_browser $user $display || $logger -p user.err \"Failed for user: '$user' display: '$display'\"\n        done\n    fi\n    ;;\n    *)\n    # In a down phase\n    exit 0\n    ;;\nesac\n```\n\nMake the script executable. But that script assumes you use X and simply opens http page. It might not work for everyone.\n\nYou will need to restart NetworkManager.service or reboot for this to start working. Once you do, the dispatcher script should open a login window once it detects you are behind a captive portal.\n\nSimple solution is captive-portal-sh - shell script that obtains captive portal URL and opens it in your default browser (for Wayland users only).\n\nAnother solution is captive-browser-gitAUR based on Google Chrome.\n\n"
    },
    {
      "title": "DHCP client",
      "level": 3,
      "content": "By default NetworkManager uses its internal DHCP client. The internal DHCPv4 plugin is based on the nettools' n-dhcp4 library, while the internal DHCPv6 plugin is made from code based on systemd-networkd.\n\nTo use a different DHCP client install one of the alternatives:\n\n- dhcpcd - dhcpcd\n- dhclient - dhclient\n\nTo change the DHCP client backend, set the option main.dhcp=dhcp_client_name with a configuration file in /etc/NetworkManager/conf.d/. E.g.:\n\n```\n/etc/NetworkManager/conf.d/dhcp-client.conf\n```\n\n```\n[main]\ndhcp=dhcpcd\n```\n\nNote: Do not enable the systemd units shipped with the dhclient and dhcpcd packages. They will conflict with NetworkManager, see the note in #Installation for details.\n\nDo not enable the systemd units shipped with the dhclient and dhcpcd packages. They will conflict with NetworkManager, see the note in #Installation for details.\n\n"
    },
    {
      "title": "DNS management",
      "level": 3,
      "content": "NetworkManager's DNS management is described in the GNOME project's wiki page—Projects/NetworkManager/DNS.\n\n"
    },
    {
      "title": "DNS caching and conditional forwarding",
      "level": 4,
      "content": "NetworkManager has a plugin to enable DNS caching and conditional forwarding (previously called \"split DNS\" in NetworkManager's documentation) using dnsmasq or systemd-resolved. The advantages of this setup is that DNS lookups will be cached, shortening resolve times, and DNS lookups of VPN hosts will be routed to the relevant VPN's DNS servers. This is especially useful if you are connected to more than one VPN.\n\nMake sure dnsmasq has been installed. Then set main.dns=dnsmasq with a configuration file in /etc/NetworkManager/conf.d/:\n\n```\n/etc/NetworkManager/conf.d/dns.conf\n```\n\n```\n[main]\ndns=dnsmasq\n```\n\nNow run nmcli general reload as root. NetworkManager will automatically start dnsmasq and add 127.0.0.1 to /etc/resolv.conf. The original DNS servers can be found in /run/NetworkManager/no-stub-resolv.conf. You can verify dnsmasq is being used by doing the same DNS lookup twice with drill example.com and verifying the server and query times.\n\n- You do not need to start dnsmasq.service or edit /etc/dnsmasq.conf. NetworkManager will start dnsmasq without using the systemd service and without reading the dnsmasq's default configuration file(s).\n- The dnsmasq instance started by NetworkManager will bind to 127.0.0.1:53, you cannot run any other software (including dnsmasq.service) on the same address and port.\n\nCustom configurations can be created for dnsmasq by creating configuration files in /etc/NetworkManager/dnsmasq.d/. For example, to change the size of the DNS cache (which is stored in RAM):\n\n```\n/etc/NetworkManager/dnsmasq.d/cache.conf\n```\n\n```\ncache-size=1000\n```\n\nYou can check the configuration file syntax with:\n\n```\n$ dnsmasq --test --conf-file=/dev/null --conf-dir=/etc/NetworkManager/dnsmasq.d\n```\n\nSee dnsmasq(8) for all available options.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nEnabling dnsmasq in NetworkManager may break IPv6-only DNS lookups (i.e. drill -6 [hostname]) which would otherwise work. In order to resolve this, creating the following file will configure dnsmasq to also listen to the IPv6 loopback:\n\n```\n/etc/NetworkManager/dnsmasq.d/ipv6-listen.conf\n```\n\n```\nlisten-address=::1\n```\n\nIn addition, dnsmasq also does not prioritize upstream IPv6 DNS. Unfortunately NetworkManager does not do this (Ubuntu Bug). A workaround would be to disable IPv4 DNS in the NetworkManager config, assuming one exists.\n\nThe dnsmasq instance started by NetworkManager by default will not validate DNSSEC since it is started with the --proxy-dnssec option. It will trust whatever DNSSEC information it gets from the upstream DNS server.\n\nFor dnsmasq to properly validate DNSSEC, thus breaking DNS resolution with name servers that do not support it, create the following configuration file:\n\n```\n/etc/NetworkManager/dnsmasq.d/dnssec.conf\n```\n\n```\nconf-file=/usr/share/dnsmasq/trust-anchors.conf\ndnssec\n```\n\nNote: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nNetworkManager can use systemd-resolved as a DNS resolver and cache. Make sure that systemd-resolved is properly configured and that systemd-resolved.service is started before using it.\n\nsystemd-resolved will be used automatically if /etc/resolv.conf is a symlink to /run/systemd/resolve/stub-resolv.conf, /run/systemd/resolve/resolv.conf or /usr/lib/systemd/resolv.conf.\n\nYou can enable it explicitly by setting main.dns=systemd-resolved with a configuration file in /etc/NetworkManager/conf.d/:\n\n```\n/etc/NetworkManager/conf.d/dns.conf\n```\n\n```\n[main]\ndns=systemd-resolved\n```\n\nIf openresolv has a subscriber for your local DNS resolver, set up the subscriber and configure NetworkManager to use openresolv.\n\nBecause NetworkManager advertises a single \"interface\" to resolvconf, it is not possible to implement conditional forwarding between two NetworkManager connections. See NetworkManager issue 153.\n\nThis can be partially mitigated if you set private_interfaces=\"*\" in /etc/resolvconf.conf[6]. Any queries for domains that are not in search domain list will not get forwarded. They will be handled according to the local resolver's configuration, for example, forwarded to another DNS server or resolved recursively from the DNS root.\n\n"
    },
    {
      "title": "Custom DNS servers",
      "level": 4,
      "content": "To set DNS servers for all connections, specify them in NetworkManager.conf(5) using the syntax servers=serveripaddress1,serveripaddress2,serveripaddress3 in a section named [global-dns-domain-*]. For example:\n\n```\n/etc/NetworkManager/conf.d/dns-servers.conf\n```\n\n```\n[global-dns-domain-*]\nservers=::1,127.0.0.1\n```\n\n- If you use NetworkManager's dnsmasq or systemd-resolved plugin or openresolv subscribers, then do not specify loopback addresses with the servers= option, it can break DNS resolution.\n- The specified servers do not get sent to systemd-resolved, the connection's DNS servers are used instead. See NetworkManager issue 1366 and systemd issue 33754.\n\nSetup will depend on the type of front-end used; the process usually involves right-clicking on the applet, editing (or creating) a profile, and then choosing DHCP type as Automatic (specify addresses). The DNS addresses will need to be entered and are usually in this form: 127.0.0.1, DNS-server-one, ....\n\nTo setup DNS Servers per connection, you change the ipv4.dns and ipv6.dns settings (and their associated dns-search and dns-options) in the connection settings.\n\nIf method is set to auto (when you use DHCP/RA), you need to set ignore-auto-dns to yes.\n\nTo use DNS over TLS (requires systemd-resolved), specify the DNS servers using the syntax dns=ip.address#servername; and additionally set the connection.dns-over-tls setting to 2. For example, to use Quad9:\n\n```\n/etc/NetworkManager/system-connections/Example Wi-Fi.nmconnection\n```\n\n```\n...\n[connection]\n...\ndns-over-tls=2\n\n[ipv4]\n...\ndns=9.9.9.9#dns.quad9.net;149.112.112.112#dns.quad9.net;\nignore-auto-dns=true\n\n[ipv6]\n...\ndns=2620:fe::fe#dns.quad9.net;2620:fe::9#dns.quad9.net;\nignore-auto-dns=true\n```\n\n"
    },
    {
      "title": "/etc/resolv.conf",
      "level": 4,
      "content": "NetworkManager's /etc/resolv.conf management mode is configured with the main.rc-manager setting. networkmanager sets it to symlink as opposed to the upstream default auto. The setting and its values are documented in the NetworkManager.conf(5) man page.\n\nNetworkManager also offers hooks via so called dispatcher scripts that can be used to alter the /etc/resolv.conf after network changes. See #Network services with NetworkManager dispatcher and NetworkManager(8) for more information.\n\n- If NetworkManager is configured to use either dnsmasq or systemd-resolved, then the appropriate loopback addresses will be written to /etc/resolv.conf.\n- The resolv.conf file NetworkManager writes or would write to /etc/resolv.conf can be found at /run/NetworkManager/resolv.conf.\n- A resolv.conf file with the acquired name servers and search domains can be found at /run/NetworkManager/no-stub-resolv.conf.\n\nTo stop NetworkManager from touching /etc/resolv.conf, set main.dns=none with a configuration file in /etc/NetworkManager/conf.d/:\n\n```\n/etc/NetworkManager/conf.d/dns.conf\n```\n\n```\n[main]\ndns=none\n```\n\nAfter that /etc/resolv.conf might be a broken symlink that you will need to remove. Then, just create a new /etc/resolv.conf file.\n\n- Do not set main.rc-manager=resolvconf when using systemd-resolved, instead make sure to correctly create the /etc/resolv.conf symlink or configure NetworkManager to use systemd-resolved explicitly.\n- Make sure the systemd-resolvconf package is not installed when systemd-resolved is not used. Unless systemd-resolved.service started, it will break all networking software (not just NetworkManager) that use resolvconf.\n\nTo configure NetworkManager to use openresolv, set main.rc-manager=resolvconf with a configuration file in /etc/NetworkManager/conf.d/:\n\n```\n/etc/NetworkManager/conf.d/rc-manager.conf\n```\n\n```\n[main]\nrc-manager=resolvconf\n```\n\n"
    },
    {
      "title": "Firewall",
      "level": 3,
      "content": "You can assign a firewalld zone based on your current connection. For example a restrictive firewall when at work, and a less restrictive one when at home.\n\nThis can also be done with NetworkManager dispatcher.\n\n"
    },
    {
      "title": "Network services with NetworkManager dispatcher",
      "level": 2,
      "content": "There are quite a few network services that you will not want running until NetworkManager brings up an interface. NetworkManager has the ability to start services when you connect to a network and stop them when you disconnect (e.g. when using NFS, SMB and NTPd).\n\nTo activate the feature you need to enable and start the NetworkManager-dispatcher.service.\n\nOnce the service is active, scripts can be added to the /etc/NetworkManager/dispatcher.d directory.\n\nScripts must be owned by root, otherwise the dispatcher will not execute them. For added security, set group ownership to root as well:\n\n```\n# chown root:root /etc/NetworkManager/dispatcher.d/10-script.sh\n```\n\nMake sure the file is executable.\n\nThe scripts will be run in alphabetical order at connection time, and in reverse alphabetical order at disconnect time. To ensure what order they come up in, it is common to use numerical characters prior to the name of the script (e.g. 10-portmap or 30-netfs (which ensures that the portmapper is up before NFS mounts are attempted).\n\nScripts will receive the following arguments:\n\n- Interface name: e.g. eth0\n- Action: up, down, vpn-up, vpn-down, ... (see NetworkManager-dispatcher(8) for the complete list)\n\n"
    },
    {
      "title": "Avoiding the dispatcher timeout",
      "level": 3,
      "content": "If the above is working, then this section is not relevant. However, there is a general problem related to running dispatcher scripts which take longer to be executed. Initially an internal timeout of three seconds only was used. If the called script did not complete in time, it was killed. Later the timeout was extended to about 20 seconds (see the Bugtracker for more information). If the timeout still creates the problem, a work around may be to use a drop-in file for the NetworkManager-dispatcher.service to remain active after exit:\n\n```\n/etc/systemd/system/NetworkManager-dispatcher.service.d/remain_after_exit.conf\n```\n\n```\n[Service]\nRemainAfterExit=yes\n```\n\nNow start and enable the modified NetworkManager-dispatcher service.\n\nNote: **has** \n\n"
    },
    {
      "title": "Automatically set the timezone",
      "level": 4,
      "content": "Note: **This article or section is a candidate for merging with System time#Update timezone every time NetworkManager connects to a network.** This article or section is a candidate for merging with System time#Update timezone every time NetworkManager connects to a network.\n\nThis article or section is a candidate for merging with System time#Update timezone every time NetworkManager connects to a network.\n\nInstall tzupdateAUR and create an executable script:\n\n```\n/etc/NetworkManager/dispatcher.d/update-timezone.sh\n```\n\n```\n#! /bin/bash\n# Automatically set time zone when connected to the network\niface=$1\naction=$2\n\nif [[ $iface != lo && $action == up ]]; then\n    tz=$(tzupdate -s 1 -p 2>/dev/null)\n    if [[ -n $tz && -r /usr/share/zoneinfo/$tz ]]; then\n\ttimedatectl set-timezone $tz\n    fi\nfi\n```\n\nChange the condition $iface != lo to match a specific interface if desired.\n\n"
    },
    {
      "title": "Mount remote directory with sshfs",
      "level": 4,
      "content": "As the script is run in a very restrictive environment, you have to export SSH_AUTH_SOCK in order to connect to your SSH agent. There are different ways to accomplish this, see this message for more information. The example below works with GNOME Keyring, and will ask you for the password if not unlocked already. In case NetworkManager connects automatically on login, it is likely gnome-keyring has not yet started and the export will fail (hence the sleep). The UUID to match can be found with the command nmcli connection status or nmcli connection list.\n\n```\n#!/bin/sh\nUSER='username'\nREMOTE='user@host:/remote/path'\nLOCAL='/local/path'\n\ninterface=$1 status=$2\nif [ \"$CONNECTION_UUID\" = \"uuid\" ]; then\n  case $status in\n    up)\n      # sleep 10\n      SSH_AUTH_SOCK=$(find /tmp -maxdepth 1 -type s -user \"$USER\" -name 'ssh')\n      export SSH_AUTH_SOCK\n      su \"$USER\" -c \"sshfs $REMOTE $LOCAL\"\n      ;;\n    down)\n      fusermount -u \"$LOCAL\"\n      ;;\n  esac\nfi\n```\n\n"
    },
    {
      "title": "Mounting of SMB shares",
      "level": 4,
      "content": "Some SMB shares are only available on certain networks or locations (e.g. at home). You can use the dispatcher to only mount SMB shares that are present at your current location.\n\nThe following script will check if we connected to a specific network and mount shares accordingly:\n\n```\n/etc/NetworkManager/dispatcher.d/30-mount-smb.sh\n```\n\n```\n#!/bin/sh\n\n# Find the connection UUID with \"nmcli connection show\" in terminal.\n# All NetworkManager connection types are supported: wireless, VPN, wired...\nif [ \"$2\" = \"up\" ]; then\n  if [ \"$CONNECTION_UUID\" = \"uuid\" ]; then\n    mount /your/mount/point & \n    # add more shares as needed\n  fi\nfi\n```\n\nThe following script will unmount all SMB shares before a software initiated disconnect from a specific network:\n\n```\n/etc/NetworkManager/dispatcher.d/pre-down.d/30-umount-smb.sh\n```\n\n```\n#!/bin/sh\n\nif [ \"$CONNECTION_UUID\" = \"uuid\" ]; then\n  umount -a -l -t cifs\nfi\n```\n\nThe following script will attempt to unmount all SMB shares following an unexpected disconnect from a specific network:\n\n```\n/etc/NetworkManager/dispatcher.d/40-umount-smb.sh\n```\n\n```\n#!/bin/sh\n\nif [ \"$CONNECTION_UUID\" = \"uuid\" ]; then\n  if [ \"$2\" = \"down\" ]; then\n    umount -a -l -t cifs\n  fi\nfi\n```\n\n- Since NetworkManager 0.9.8, the pre-down and down events are not executed on shutdown or restart, see this bug report for more info.\n- The previous umount scripts are still prone to leaving applications actually accessing the mount to 'hang'.\n\nAn alternative is to use the script as seen in NFS#Using a NetworkManager dispatcher:\n\n```\n/etc/NetworkManager/dispatcher.d/30-smb.sh\n```\n\n```\n#!/bin/sh\n\n# Find the connection UUID with \"nmcli con show\" in terminal.\n# All NetworkManager connection types are supported: wireless, VPN, wired...\nWANTED_CON_UUID=\"CHANGE-ME-NOW-9c7eff15-010a-4b1c-a786-9b4efa218ba9\"\n\nif [ \"$CONNECTION_UUID\" = \"$WANTED_CON_UUID\" ]; then\n    \n    # Script parameter $1: network interface name, not used\n    # Script parameter $2: dispatched event\n    \n    case \"$2\" in\n        \"up\")\n            mount -a -t cifs\n            ;;\n        \"down\"|\"pre-down\"|\"vpn-pre-down\")\n            umount -l -a -t cifs >/dev/null\n            ;;\n    esac\nfi\n```\n\nCreate a symlink inside /etc/NetworkManager/dispatcher.d/pre-down/ to catch the pre-down events:\n\n```\n# ln -s ../30-smb.sh /etc/NetworkManager/dispatcher.d/pre-down.d/30-smb.sh\n```\n\n"
    },
    {
      "title": "Mounting of NFS shares",
      "level": 4,
      "content": "See NFS#Using a NetworkManager dispatcher.\n\n"
    },
    {
      "title": "Use dispatcher to automatically toggle wireless depending on LAN cable being plugged in",
      "level": 4,
      "content": "The idea is to only turn Wi-Fi on when the LAN cable is unplugged (for example when detaching from a laptop dock), and for Wi-Fi to be automatically disabled, once a LAN cable is plugged in again.\n\nCreate the following dispatcher script[7], replacing Your_Ethernet_Interface with your ethernet interface's device name.\n\nRemember to make the script executable. You can verify that it works by restarting NetworkManager.service, running ip a, and checking that wlp3s0 (or whatever your Wi-Fi interface is called) is in state DOWN. If you encounter unexpected behavior, check the journal of NetworkManager-dispatcher.service.\n\n```\n/etc/NetworkManager/dispatcher.d/99-wifi-auto-toggle\n```\n\n```\n#!/bin/sh\n\nLOG_PREFIX=\"WiFi Auto-Toggle\"\nETHERNET_INTERFACE=\"Your_Ethernet_Interface\"\n\nif [ \"$1\" = \"$ETHERNET_INTERFACE\" ]; then\n    case \"$2\" in\n        up)\n            echo \"$LOG_PREFIX ethernet up\"\n            nmcli radio wifi off\n            ;;\n        down)\n            echo \"$LOG_PREFIX ethernet down\"\n            nmcli radio wifi on\n            ;;\n    esac\nelif [ \"$(nmcli -g GENERAL.STATE device show $ETHERNET_INTERFACE)\" = \"20 (unavailable)\" ]; then\n    echo \"$LOG_PREFIX failsafe\"\n    nmcli radio wifi on\nfi\n```\n\n"
    },
    {
      "title": "Use dispatcher to connect to a VPN after a network connection is established",
      "level": 4,
      "content": "In this example we want to connect automatically to a previously defined VPN connection after connecting to a specific Wi-Fi network. First thing to do is to create the dispatcher script that defines what to do after we are connected to the network.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\n```\n/etc/NetworkManager/dispatcher.d/vpn-up\n```\n\n```\n#!/bin/sh\nVPN_NAME=\"name of VPN connection defined in NetworkManager\"\nESSID=\"Wi-Fi network ESSID (not connection name)\"\n\ninterface=$1 status=$2\ncase $status in\n  up|vpn-down)\n    if iwgetid | grep -qs \":\\\"$ESSID\\\"\"; then\n      nmcli connection up id \"$VPN_NAME\"\n    fi\n    ;;\n  down)\n    if iwgetid | grep -qs \":\\\"$ESSID\\\"\"; then\n      if nmcli connection show --active | grep \"$VPN_NAME\"; then\n        nmcli connection down id \"$VPN_NAME\"\n      fi\n    fi\n    ;;\nesac\n```\n\nIf you would like to attempt to automatically connect to VPN for all Wi-Fi networks, you can use the following definition of the ESSID: ESSID=$(iwgetid -r). Remember to set the script's permissions accordingly.\n\nTrying to connect with the above script may still fail with NetworkManager-dispatcher.service complaining about 'no valid VPN secrets', because of the way VPN secrets are stored. Fortunately, there are different options to give the above script access to your VPN password.\n\n1: One of them requires editing the VPN connection configuration file to make NetworkManager store the secrets by itself rather than inside a keyring that will be inaccessible for root: open up /etc/NetworkManager/system-connections/name of your VPN connection and change the password-flags and secret-flags from 1 to 0.\n\nIf that alone does not work, you may have to create a passwd-file in a safe location with the same permissions and ownership as the dispatcher script, containing the following:\n\n```\n/path/to/passwd-file\n```\n\n```\nvpn.secrets.password:YOUR_PASSWORD\n```\n\nThe script must be changed accordingly, so that it gets the password from the file:\n\n```\n/etc/NetworkManager/dispatcher.d/vpn-up\n```\n\n```\n#!/bin/sh\nVPN_NAME=\"name of VPN connection defined in NetworkManager\"\nESSID=\"Wi-Fi network ESSID (not connection name)\"\n\ninterface=$1 status=$2\ncase $status in\n  up|vpn-down)\n    if iwgetid | grep -qs \":\\\"$ESSID\\\"\"; then\n      nmcli connection up id \"$VPN_NAME\" passwd-file /path/to/passwd-file\n    fi\n    ;;\n  down)\n    if iwgetid | grep -qs \":\\\"$ESSID\\\"\"; then\n      if nmcli connection show --active | grep \"$VPN_NAME\"; then\n        nmcli connection down id \"$VPN_NAME\"\n      fi\n    fi\n    ;;\nesac\n```\n\n2: Alternatively, change the password-flags and put the password directly in the configuration file adding the section vpn-secrets:\n\n```\n[vpn]\n ....\n password-flags=0\n \n [vpn-secrets]\n password=your_password\n```\n\n"
    },
    {
      "title": "Use dispatcher to disable IPv6 on VPN provider connections",
      "level": 4,
      "content": "Many commercial VPN providers support only IPv4. That means all IPv6 traffic bypasses the VPN and renders it virtually useless. To avoid this, dispatcher can be used to disable all IPv6 traffic for the time a VPN connection is up.\n\n```\n/etc/NetworkManager/dispatcher.d/10-vpn-ipv6\n```\n\n```\n#!/bin/sh\n\ncase \"$2\" in\n\tvpn-up)\n\t\techo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6\n\t\t;;\n\tvpn-down)\n\t\techo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6\n\t\t;;\nesac\n```\n\nAs an alternative, dispatcher can be used to temporarily set the IPv6 mode of the device used by the VPN connection to link-local. This will avoid NetworkManager log spam about IPv6 being disabled. This script will not work if multiple devices or connections provide IPv6 connectivity, but could be adapted to iterate over multiple devices. Note that any change to the connection (using nmcli(1) or a desktop environment) will reapply the entire connection to the device and re-enable IPv6 (if it is enabled in the connection).\n\n```\n/etc/NetworkManager/dispatcher.d/10-vpn-ipv6\n```\n\n```\n#!/bin/sh\n\ncase \"$2\" in\n\tvpn-up)\n\t\tnmcli device modify \"${DEVICE_IFACE}\" ipv6.method link-local\n\t\t;;\n\tvpn-down)\n\t\tnmcli device reapply \"${DEVICE_IFACE}\"\n\t\t;;\nesac\n```\n\n"
    },
    {
      "title": "OpenNTPD",
      "level": 4,
      "content": "See OpenNTPD#Using NetworkManager dispatcher.\n\n"
    },
    {
      "title": "Dynamically set NTP servers received via DHCP with systemd-timesyncd",
      "level": 4,
      "content": "When roaming between different networks (e.g. a company's LAN, Wi-Fi at home, various other Wi-Fi now and then) you might want to set the NTP server(s) used by timesyncd to those provided by DHCP. However, NetworkManager itself is not capable to communicate with systemd-timesyncd to set the NTP server(s).\n\nThe dispatcher can work around it.\n\nCreate the overlay directory for your systemd-timesyncd configuration /etc/systemd/timesyncd.conf.d if it does not already exist. Inside /etc/NetworkManager/dispatcher.d, put the following:\n\n```\n/etc/NetworkManager/dispatcher.d/10-update-timesyncd\n```\n\n```\n#!/bin/sh\n\n[ -z \"$CONNECTION_UUID\" ] && exit 0\nINTERFACE=\"$1\"\nACTION=\"$2\"\n\ncase $ACTION in\nup | dhcp4-change | dhcp6-change)\n\t[ -n \"$DHCP4_NTP_SERVERS\" ] || exit 0\n\tmkdir -p /etc/systemd/timesyncd.conf.d\n\tcat <<-THE_END >\"/etc/systemd/timesyncd.conf.d/${CONNECTION_UUID}.conf\"\n\t\t[Time]\n\t\tNTP=$DHCP4_NTP_SERVERS\n\tTHE_END\n\tsystemctl restart systemd-timesyncd.service\n\t;;\ndown)\n\trm -f \"/etc/systemd/timesyncd.conf.d/${CONNECTION_UUID}.conf\"\n\tsystemctl restart systemd-timesyncd.service\n\t;;\nesac\n```\n\nEvery time NetworkManager sets up a new network connection (ACTION=up) or gets some update for an existing connection (ACTION=dhcp4-change or ACTION=dhcp6-change) and the provided connection data contains information about NTP server(s) (DHCP4_NTP_SERVERS), a connection specific overlay configuration file is written to /etc/systemd/timesyncd.conf.d, containing the provided NTP server(s). Whenever a connection is taken down (ACTION=down) the connection specific overlay file is removed. After each change to the configuration of systemd-timesyncd, this service is restarted to pick up the updated configuration. The use of connection specific configuration files is intentional so that when two or more connections are managed by NetworkManager in parallel the different NTP server names in the configuration are not overwritten as up, dhcp4-change, dhcp6-change and down actions might come in an arbitrary order.\n\n"
    },
    {
      "title": "Testing",
      "level": 2,
      "content": "NetworkManager applets are designed to load upon login so no further configuration should be necessary for most users. If you have already disabled your previous network settings and disconnected from your network, you can now test if NetworkManager will work. The first step is to start NetworkManager.service.\n\nSome applets will provide you with a .desktop file so that the NetworkManager applet can be loaded through the application menu. If it does not, you are going to either have to discover the command to use or logout and login again to start the applet. Once the applet is started, it will likely begin polling network connections with for auto-configuration with a DHCP server.\n\nTo start the GNOME applet in non-xdg-compliant window managers like awesome:\n\n```\nnm-applet --sm-disable &\n```\n\nFor static IP addresses, you will have to configure NetworkManager to understand them. The process usually involves right-clicking the applet and selecting something like 'Edit Connections'.\n\n"
    },
    {
      "title": "Encrypted Wi-Fi passwords",
      "level": 3,
      "content": "By default, NetworkManager stores passwords in clear text in the connection files at /etc/NetworkManager/system-connections/. To print the stored passwords, use the following command:\n\n```\n# grep -r '^psk=' /etc/NetworkManager/system-connections/\n```\n\nThe passwords are accessible to the root user in the filesystem and to users with access to settings via the GUI (e.g. nm-applet).\n\nIt is preferable to save the passwords in encrypted form in a keyring instead of clear text. The downside to this is that the connections have to be set up for each user.\n\nIn order to read and write to the keyring, there must be a secret agent available. This can be one of:\n\n- nmcli with the --ask option\n- One of the graphical interfaces from #Front-ends\n\nIf you make neither of these available, then authentication will fail with the error no secrets: No agents were available for this request.\n\n"
    },
    {
      "title": "Using GNOME Keyring",
      "level": 4,
      "content": "The keyring daemon has to be started and the keyring needs to be unlocked for the following to work.\n\nFurthermore, NetworkManager needs to be configured not to store the password for all users. Using GNOME's network-manager-applet, run nm-connection-editor from a terminal, select a network connection, click Edit, select the Wi-Fi Security tab and click on the right icon of password and check Store the password only for this user.\n\n"
    },
    {
      "title": "Using KDE Wallet",
      "level": 4,
      "content": "Using KDE's plasma-nm, click the applet, click on the top right Settings icon, click on a network connection, in the General configuration tab, untick All users may connect to this network. If the option is ticked, the passwords will still be stored in clear text, even if a keyring daemon is running.\n\nIf the option was selected previously and you un-tick it, you may have to use the reset option first to make the password disappear from the file. Alternatively, delete the connection first and set it up again.\n\n"
    },
    {
      "title": "Sharing internet connection over Wi-Fi",
      "level": 3,
      "content": "You can share your internet connection (e.g. 3G or wired) with a few clicks. Please note that a firewall may interfere with internet sharing.\n\nYou will need a Wi-Fi card which supports AP mode, see Software access point#Wi-Fi device must support AP mode for details.\n\nInstall the dnsmasq package to be able to actually share the connection. Note that NetworkManager starts its own instance of dnsmasq, independent of dnsmasq.service, as a DHCP server. See #dnsmasq for the caveats.\n\nCreate the shared connection:\n\n- Click on applet and choose Create new wireless network.\n- Follow wizard (choose WPA2 or higher, be sure to use at least 8 character long password, lower lengths will fail). Choose either Hotspot or Ad-hoc as Wi-Fi mode.\n\n- Choose either Hotspot or Ad-hoc as Wi-Fi mode.\n\nThe connection will be saved and remain stored for the next time you need it.\n\n"
    },
    {
      "title": "Sharing internet connection over Ethernet",
      "level": 3,
      "content": "Scenario: your device has internet connection over Wi-Fi and you want to share the internet connection to other devices over Ethernet.\n\nRequirements:\n\n- Install the dnsmasq and nm-connection-editor packages to be able to actually share the connection. Note that NetworkManager starts its own instance of dnsmasq, independent of dnsmasq.service, as a DHCP server. See #dnsmasq for the caveats.\n- Your internet connected device and the other devices are connected over a suitable Ethernet cable (this usually means a cross over cable or a switch in between).\n- Internet sharing is not blocked by a firewall.\n\nSteps:\n\n- Run nm-connection-editor from terminal.\n- Add a new Ethernet connection.\n- Give it some sensible name. For example \"Shared Internet\"\n- Go to \"IPv4 Settings\".\n- For \"Method:\" select \"Shared to other computers\".\n- Save\n\nNow you should have a new option \"Shared Internet\" under the Wired connections in NetworkManager.\n\n"
    },
    {
      "title": "Checking if networking is up inside a cron job or script",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nSome cron jobs require networking to be up to succeed. You may wish to avoid running these jobs when the network is down. To accomplish this, add an if test for networking that queries NetworkManager's nm-tool and checks the state of networking. The test shown here succeeds if any interface is up, and fails if they are all down. This is convenient for laptops that might be hardwired, might be on wireless, or might be off the network.\n\n```\nif [ $(nm-tool|grep State|cut -f2 -d' ') == \"connected\" ]; then\n    #Whatever you want to do if the network is online\nelse\n    #Whatever you want to do if the network is offline - note, this and the else above are optional\nfi\n```\n\nThis is useful for a cron.hourly script that runs fpupdate for the F-Prot virus scanner signature update, as an example. Another way it might be useful, with a little modification, is to differentiate between networks using various parts of the output from nm-tool; for example, since the active wireless network is denoted with an asterisk, you could grep for the network name and then grep for a literal asterisk.\n\n"
    },
    {
      "title": "Connect to network with secret on boot",
      "level": 3,
      "content": "By default, NetworkManager will not connect to networks requiring a secret automatically on boot. This is because it locks such connections to the user who makes it by default, only connecting after they have logged in. To change this, do the following:\n\n1. Right click on the nm-applet icon in your panel and select Edit Connections and open the Wireless tab\n1. Select the connection you want to work with and click the Edit button\n1. Check the boxes “Connect Automatically” and “Available to all users”\n1. Additionally, ensure that under \"Wi-Fi Security\", \"Store password for all users (not encrypted)\" is selected\n\nLog out and log back in to complete.\n\n"
    },
    {
      "title": "OpenConnect with password in KWallet",
      "level": 3,
      "content": "While you may type both values at connection time, plasma-nm 0.9.3.2-1 and above are capable of retrieving OpenConnect username and password directly from KWallet.\n\nOpen \"KDE Wallet Manager\" and look up your OpenConnect VPN connection under \"Network Management|Maps\". Click \"Show values\" and enter your credentials in key \"VpnSecrets\" in this form (replace username and password accordingly):\n\n```\nform:main:username%SEP%username%SEP%form:main:password%SEP%password\n```\n\nNext time you connect, username and password should appear in the \"VPN secrets\" dialog box.\n\n"
    },
    {
      "title": "Ignore specific devices",
      "level": 3,
      "content": "Sometimes it may be desired that NetworkManager ignores specific devices and does not try to configure addresses and routes for them. You can quickly and easily ignore devices by MAC or interface-name by using the following in /etc/NetworkManager/conf.d/unmanaged.conf:\n\n```\n[keyfile]\nunmanaged-devices=mac:00:22:68:1c:59:b1;mac:00:1E:65:30:D1:C4;interface-name:eth0\n```\n\nAfter editing the file, run nmcli general reload as root. Afterwards you should be able to configure interfaces without NetworkManager altering what you have set.\n\n"
    },
    {
      "title": "Configuring MAC address randomization",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with NetworkManager/Privacy#MAC Randomization.** This article or section is a candidate for merging with NetworkManager/Privacy#MAC Randomization.\n\nThis article or section is a candidate for merging with NetworkManager/Privacy#MAC Randomization.\n\nMAC randomization can be used for increased privacy by not disclosing your real MAC address to the network.\n\nNetworkManager supports two types MAC Address Randomization: randomization during scanning, and for network connections. Both modes can be configured by modifying /etc/NetworkManager/NetworkManager.conf or by creating a separate configuration file in /etc/NetworkManager/conf.d/ which is recommended since the aforementioned configuration file may be overwritten by NetworkManager.\n\nRandomization during Wi-Fi scanning is enabled by default, but it may be disabled by adding the following lines to /etc/NetworkManager/NetworkManager.conf or a dedicated configuration file under /etc/NetworkManager/conf.d:\n\n```\n/etc/NetworkManager/conf.d/wifi_rand_mac.conf\n```\n\n```\n[device]\nwifi.scan-rand-mac-address=no\n```\n\nMAC randomization for network connections can be set to different modes for both wireless and ethernet interfaces. See the GNOME blog post for more details on the different modes.\n\nIn terms of MAC randomization the most important modes are stable and random. stable generates a random MAC address when you connect to a new network and associates the two permanently. This means that you will use the same MAC address every time you connect to that network. In contrast, random will generate a new MAC address every time you connect to a network, new or previously known. You can configure the MAC randomization by adding the desired configuration under /etc/NetworkManager/conf.d:\n\n```\n/etc/NetworkManager/conf.d/wifi_rand_mac.conf\n```\n\n```\n[device-mac-randomization]\n# \"yes\" is already the default for scanning\nwifi.scan-rand-mac-address=yes\n \n[connection-mac-randomization]\n# Randomize MAC for every ethernet connection\nethernet.cloned-mac-address=random\n# Generate a random MAC for each Wi-Fi and associate the two permanently.\nwifi.cloned-mac-address=stable\n```\n\nTo configure MAC randomization for a specific connection (for example, if the network does not like random MAC addresses), edit the connection to set 802-11-wireless.cloned-mac-address to one of the modes (e.g. stable or random).\n\nSee the following GNOME blog post for more details.\n\n"
    },
    {
      "title": "Enable IPv6 Privacy Extensions",
      "level": 3,
      "content": "See IPv6#NetworkManager.\n\n"
    },
    {
      "title": "Configure a unique DUID per connection",
      "level": 3,
      "content": "The DHCPv6 Unique Identifier (DUID) is a value used by the DHCPv6 client to identify itself to DHCPv6 servers. NetworkManager supports 3 types of DUID:\n\n- DUID-UUID (RFC 6355): generated from an Universally Unique IDentifier (UUID).\n- DUID-LL (RFC 3315): generated from the Link-Layer address (aka MAC address).\n- DUID-LLT (RFC 3315): generated from the Link-Layer address plus a timestamp.\n\nIf the internal NetworkManager's DHCP client is in use (the default) it will identify itself with a global and permanent DUID-UUID generated from the machine-id (/etc/machine-id). This means that all connections share the same UUID, which may be a privacy breach.\n\nFortunately, NetworkManager is able to provide unique DUIDs per connection, derived from the connection's stable-id and a per-host unique key. You can enable that by adding the following configuration under /etc/NetworkManager/conf.d:\n\n```\n/etc/NetworkManager/conf.d/duid.conf\n```\n\n```\n[connection]\nipv6.dhcp-duid=stable-uuid\n```\n\nThe stable-ll and stable-llt values are also supported. For further information read the description for dhcp-duid in nm-settings(5) § ipv6 setting.\n\n"
    },
    {
      "title": "Working with wired connections",
      "level": 3,
      "content": "By default, NetworkManager generates a connection profile for each wired ethernet connection it finds. At the point when generating the connection, it does not know whether there will be more Ethernet adapters available. Hence, it calls the first wired connection \"Wired connection 1\". You can avoid generating this connection, by configuring no-auto-default (see NetworkManager.conf(5)), or by simply deleting it. Then NetworkManager will remember not to generate a connection for this interface again.\n\nYou can also edit the connection (and persist it to disk) or delete it. NetworkManager will not re-generate a new connection. Then you can change the name to whatever you want. You can use something like nm-connection-editor for this task.\n\n"
    },
    {
      "title": "Using iwd as the Wi-Fi backend",
      "level": 3,
      "content": "- Do not enable iwd.service or manually configure iwd. NetworkManager will start and manage it itself.\n- Consider existing issues before switching to iwd.\n\nTo enable the experimental iwd backend, first install iwd and then create the following configuration file:\n\n```\n/etc/NetworkManager/conf.d/wifi_backend.conf\n```\n\n```\n[device]\nwifi.backend=iwd\n```\n\nAlternatively, you can install networkmanager-iwdAUR, a modified package configured to build NetworkManager working exclusively with iwd, with the main difference being that iwd is required and wpa_supplicant can be uninstalled after building.\n\n"
    },
    {
      "title": "Running in a network namespace",
      "level": 3,
      "content": "If you would like to run NetworkManager inside a network namespace (e.g., to manage a specific device which should be used by selected applications), bring the device down before moving it to the namespace:\n\n```\n$ ip link set dev MY_DEVICE down\n$ ip link set dev MY_DEVICE netns MY_NAMESPACE\n$ ip netns exec MY_NAMESPACE NetworkManager\n...\n$ ip netns exec MY_NAMESPACE killall NetworkManager\n```\n\notherwise NetworkManager will later fail to establish the connection with a device is strictly unmanaged error.\n\n"
    },
    {
      "title": "Automatically connect to VPN",
      "level": 3,
      "content": "NetworkManager can be set to automatically connect to a VPN when connecting to the internet, on a per network basis. The VPN connection itself can be added in GNOME's NetworkManager front-end, but to make it automatically use the VPN nmcli must be used. Other front-ends might not have this limitation.\n\nFirst, make sure to make the VPN connection available to all users. In the GNOME this is a matter of checking a box under the details tab. Under the Identity tab, in the password field, click the icon on the right side in the field, and set it to Store the password for all users.\n\nThen find the UUID of the VPN connection, and add that to connection.secondaries of the Internet connection:\n\n```\n# UUID=$(nmcli --get-values connection.uuid connection show name-of-VPN-connection)\n# nmcli connection modify name-of-Internet-connection connection.secondaries \"$UUID\"\n```\n\nNow when NetworkManager is restarted and you connect to the Internet connection you have configured, you should automatically get connected to the VPN.\n\n"
    },
    {
      "title": "No prompt for password of secured Wi-Fi networks",
      "level": 3,
      "content": "When trying to connect to a secured Wi-Fi network, no prompt for a password is shown and no connection is established. This happens when no keyring package is installed. An easy solution is to install gnome-keyring. If you want the passwords to be stored in encrypted form, follow GNOME Keyring to set up the gnome-keyring-daemon.\n\n"
    },
    {
      "title": "Network management disabled",
      "level": 3,
      "content": "When NetworkManager shuts down but the pid (state) file is not removed, you will see a Network management disabled message. If this happens, remove the file manually:\n\n```\n# rm /var/lib/NetworkManager/NetworkManager.state\n```\n\n"
    },
    {
      "title": "Problems with internal DHCP client",
      "level": 3,
      "content": "If you have problems with getting an IP address using the internal DHCP client, consider using another DHCP client, see #DHCP client for instructions. This workaround might solve problems in big wireless networks like eduroam.\n\n"
    },
    {
      "title": "DHCP problems with dhclient",
      "level": 3,
      "content": "If you have problems with getting an IP address via DHCP, try to add the following to your /etc/dhclient.conf:\n\n```\ninterface \"eth0\" {\n   send dhcp-client-identifier 01:aa:bb:cc:dd:ee:ff;\n }\n```\n\nWhere aa:bb:cc:dd:ee:ff is the MAC address of this NIC. The MAC address can be found using the ip link show interface command from the iproute2 package.\n\n"
    },
    {
      "title": "3G modem not detected",
      "level": 3,
      "content": "See Mobile broadband modem#NetworkManager.\n\n"
    },
    {
      "title": "Switching off WLAN on laptops",
      "level": 3,
      "content": "Sometimes NetworkManager will not work when you disable your Wi-Fi adapter with a switch on your laptop and try to enable it again afterwards. This is often a problem with rfkill. To check if the driver notifies rfkill about the wireless adapter's status, use:\n\n```\n$ watch -n1 rfkill list all\n```\n\nIf one identifier stays blocked after you switch on the adapter you could try to manually unblock it with (where X is the number of the identifier provided by the above output):\n\n```\n# rfkill event unblock X\n```\n\n"
    },
    {
      "title": "Static IP address settings revert to DHCP",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nDue to an unresolved bug, when changing default connections to a static IP address, nm-applet may not properly store the configuration change, and will revert to automatic DHCP.\n\nTo work around this issue you have to edit the default connection (e.g. \"Auto eth0\") in nm-applet, change the connection name (e.g. \"my eth0\"), uncheck the \"Available to all users\" checkbox, change your static IP address settings as desired, and click Apply. This will save a new connection with the given name.\n\nNext, you will want to make the default connection not connect automatically. To do so, run nm-connection-editor (not as root). In the connection editor, edit the default connection (e.g. \"Auto eth0\") and uncheck \"Connect automatically\". Click Apply and close the connection editor.\n\n"
    },
    {
      "title": "Cannot edit connections as normal user",
      "level": 3,
      "content": "See #Set up PolicyKit permissions.\n\n"
    },
    {
      "title": "Forget hidden wireless network",
      "level": 3,
      "content": "Since hidden networks are not displayed in the selection list of the Wireless view, they cannot be forgotten (removed) with the GUI. You can delete one with the following command:\n\n```\n# rm /etc/NetworkManager/system-connections/SSID\n```\n\nThis also works for any other connection.\n\n"
    },
    {
      "title": "VPN not working in GNOME",
      "level": 3,
      "content": "When setting up OpenConnect or vpnc connections in NetworkManager while using GNOME, you will sometimes never see the dialog box pop up and the following error appears in /var/log/errors.log:\n\n```\nlocalhost NetworkManager[399]: <error> [1361719690.10506] [nm-vpn-connection.c:1405] get_secrets_cb(): Failed to request VPN secrets #3: (6) No agents were available for this request.\n```\n\nThis is caused by the GNOME NetworkManager Applet expecting dialog scripts to be at /usr/lib/gnome-shell, when NetworkManager's packages put them in /usr/lib/networkmanager. As a \"temporary\" fix (this bug has been around for a while now), make the following symlink(s):\n\n- For OpenConnect: ln -s /usr/lib/networkmanager/nm-openconnect-auth-dialog /usr/lib/gnome-shell/\n- For VPNC (i.e. Cisco VPN): ln -s /usr/lib/networkmanager/nm-vpnc-auth-dialog /usr/lib/gnome-shell/\n\nThis may need to be done for any other NetworkManager VPN plugins as well, but these are the two most common.\n\n"
    },
    {
      "title": "Unable to connect to visible European wireless networks",
      "level": 3,
      "content": "WLAN chips are shipped with a default regulatory domain. If your access point does not operate within these limitations, you will not be able to connect to the network. Fixing this is easy:\n\n1. Install wireless-regdb.\n1. Uncomment the correct country code in /etc/conf.d/wireless-regdom.\n1. Reboot the system, because the setting is only read on boot.\n\n"
    },
    {
      "title": "Automatic connect to VPN on boot is not working",
      "level": 3,
      "content": "The problem occurs when the system (i.e. NetworkManager running as the root user) tries to establish a VPN connection, but the password is not accessible because it is stored in the GNOME Keyring of a particular user.\n\nA solution is to keep the password to your VPN in plaintext, as described in step (2.) of #Use dispatcher to connect to a VPN after a network connection is established.\n\nYou do not need to use the dispatcher described in step (1.) to auto-connect anymore, if you use the new \"auto-connect VPN\" option from the nm-applet GUI.\n\n"
    },
    {
      "title": "Systemd Bottleneck",
      "level": 3,
      "content": "Over time the log files (/var/log/journal) can become very large. This can have a big impact on boot performance when using NetworkManager, see: Systemd#Boot time increasing over time.\n\n"
    },
    {
      "title": "Regular network disconnects, latency and lost packets (Wi-Fi)",
      "level": 3,
      "content": "NetworkManager does a scan every 2 minutes.\n\nSome Wi-Fi drivers have issues when scanning for base stations whilst connected/associated. Symptoms include VPN disconnects/reconnects and lost packets, web pages failing to load and then refresh fine.\n\nRunning journalctl -f as root will indicate that this is taking place, messages like the following will be contained in the logs at regular intervals.\n\n```\nNetworkManager[410]: <info>  (wlp3s0): roamed from BSSID 00:14:48:11:20:CF (my-wifi-name) to (none) ((none))\n```\n\nIf roaming is not important, the periodic scanning behavior can be disabled by locking the BSSID of the access point in the Wi-Fi connection profile.\n\n"
    },
    {
      "title": "Unable to turn on Wi-Fi with Lenovo laptop (IdeaPad, Legion, etc.)",
      "level": 3,
      "content": "There is an issue with the ideapad_laptop module on some Lenovo models due to the Wi-Fi driver incorrectly reporting a soft block. The card can still be manipulated with netctl, but managers like NetworkManager break. You can verify that this is the problem by checking the output of rfkill list after toggling your hardware switch and seeing that the soft block persists.\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nUnloading the ideapad_laptop module should fix this. (warning: this may disable the laptop keyboard and touchpad also!).\n\n"
    },
    {
      "title": "Turn off hostname sending",
      "level": 3,
      "content": "NetworkManager by default sends the hostname to the DHCP server. Hostname sending can only be disabled per connection not globally (Issue #584).\n\nTo disable sending your hostname to the DHCP server for a specific connection, add the following to your network connection file:\n\n```\n/etc/NetworkManager/system-connections/your_connection_file\n```\n\n```\n...\n[ipv4]\ndhcp-send-hostname=false\n...\n[ipv6]\ndhcp-send-hostname=false\n...\n```\n\n"
    },
    {
      "title": "nm-applet disappears in i3wm",
      "level": 3,
      "content": "If you use the xfce4-notifyd.service for notifications you must edit the unit and add the following:\n\n```\n/etc/systemd/user/xfce4-notifyd.service.d/display_env.conf\n```\n\n```\n[Service]\nEnvironment=\"DISPLAY=:0.0\"\n```\n\nAfter reloading the daemons restart xfce4-notifyd.service. Exit i3 and start it back up again and the applet should show on the tray.\n\n"
    },
    {
      "title": "Unit dbus-org.freedesktop.resolve1.service not found",
      "level": 3,
      "content": "If systemd-resolved.service is not started, NetworkManager will try to start it using D-Bus and fail:\n\n```\ndbus-daemon[991]: [system] Activating via systemd: service name='org.freedesktop.resolve1' unit='dbus-org.freedesktop.resolve1.service' requested by ':1.23' (uid=0 pid=1012 comm=\"/usr/bin/NetworkManager --no-daemon \")\ndbus-daemon[991]: [system] Activation via systemd failed for unit 'dbus-org.freedesktop.resolve1.service': Unit dbus-org.freedesktop.resolve1.service not found.\ndbus-daemon[991]: [system] Activating via systemd: service name='org.freedesktop.resolve1' unit='dbus-org.freedesktop.resolve1.service' requested by ':1.23' (uid=0 pid=1012 comm=\"/usr/bin/NetworkManager --no-daemon \")\n```\n\nThis is because NetworkManager will try to send DNS information to systemd-resolved regardless of the main.dns= setting in NetworkManager.conf(5).[10]\n\nThis can be disabled with a configuration file in /etc/NetworkManager/conf.d/:\n\n```\n/etc/NetworkManager/conf.d/no-systemd-resolved.conf\n```\n\n```\n[main]\nsystemd-resolved=false\n```\n\nSee FS#62138.\n\n"
    },
    {
      "title": "Secrets were required, but not provided",
      "level": 3,
      "content": "If you received the following error when attempting to connect to a network:\n\n```\n$ nmcli device wifi connect SSID password password\n```\n\n```\nError: Connection activation failed: (7) Secrets were required, but not provided\n```\n\nThis error can have numerous causes and you should read the journal (filter it with -u NetworkManager). For example, if NetworkManager took too long to establish connection, it will believe that the password is incorrect:\n\n```\nNetworkManager[1372]: <warn>  [1643991888.3808] device (wlan0): Activation: (wifi) association took too long\nNetworkManager[1372]: <info>  [1643991888.3809] device (wlan0): state change: config -> need-auth (reason 'none', sys-iface-state: 'managed')\nNetworkManager[1372]: <warn>  [1643991888.3838] device (wlan0): Activation: (wifi) asking for new secrets\n```\n\nYou can try deleting the connection profile and creating a new one:\n\n```\n$ nmcli connection delete SSID\n$ nmcli device wifi connect SSID password password\n```\n\nYou can also try disabling MAC address randomization:\n\n```\n/etc/NetworkManager/conf.d/wifi_rand_mac.conf\n```\n\n```\n[device]\nwifi.scan-rand-mac-address=no\n```\n\n"
    },
    {
      "title": "WPA Enterprise connection with iwd",
      "level": 3,
      "content": "If you try to connect to an WPA Enterprise network like 'eduroam' with NetworkManager with the iwd backend then you will get the following error from NetworkManager:\n\n```\nConnection 'eduroam' is not avialable on device wlan0 because profile is not compatible with device (802.1x connections must have IWD provisioning files)\n```\n\nThis is because NetworkManager can not configure a WPA Enterprise network. Therefore you have to configure it using an iwd configuration file /var/lib/iwd/essid.8021x like described in iwd#WPA Enterprise.\n\n"
    },
    {
      "title": "Failed to request VPN secrets",
      "level": 3,
      "content": "If you get this error:\n\n```\nFailed to request VPN secrets #1: No agents were available for this request.\n```\n\nIt is either because the password is empty or you have to set up PolicyKit permissions.\n\n"
    },
    {
      "title": "OpenVPN connections fail with \"secrets: failed to request VPN secrets\" warn",
      "level": 3,
      "content": "Note: **This article or section is being considered for removal.** This article or section is being considered for removal.\n\nThis article or section is being considered for removal.\n\nThe package networkmanager-openvpn requires libnma-gtk4 and optionally libnma (Gtk3) when integrated within the GNOME-Shell. If libnma is required but not installed a message will be printed to the system log:\n\n```\nNetworkManager[642]: <warn>  [...] vpn[...\"name_of_vpn_profile VPN\"]: secrets: failed to request VPN secrets #3: No agents were available for this request.\n```\n\n"
    },
    {
      "title": "OpenVPN connections fail with OpenSSL \"ca md too weak\" error",
      "level": 3,
      "content": "Since openssl was updated to version 3, certificates generated with legacy cryptographic algorithms are rejected by default. Attempting to use networkmanager-openvpn with such a setup can result in the following error in the logs:\n\n```\nnm-openvpn[14359]: OpenSSL: error:0A00018E:SSL routines::ca md too weak\nnm-openvpn[14359]: Cannot load certificate file /home/archie/.local/share/networkmanagement/certificates/my_issued_cert.crt\nnm-openvpn[14359]: Exiting due to fatal error\n```\n\nThe correct approach is to have the OpenVPN server administrator generate and re-issue more secure certificates. However, as an immediate work-around, OpenVPN requires tls-cipher \"DEFAULT:@SECLEVEL=0\". This may not be possible through the plugin GUI, but it is possible with nmcli. Separately, you will also need to enable the legacy provider in OpenSSL.\n\nFirstly, obtain the name of the VPN connection with the issue, from the output of the following:\n\n```\n$ nmcli connection show\n```\n\nAssuming the connection name is vpn.example.com, use nmcli like so:\n\n```\n$ nmcli connection modify vpn.example.com +vpn.data tls-cipher=DEFAULT:@SECLEVEL=0\n```\n\nThe change should instantly be reflected in /etc/NetworkManager/system-connections/vpn.example.com.nmconnection.\n\nAs for OpenSSL, edit /etc/ssl/openssl.cnf as described on the OpenSSL wiki.\n\nSpecifically, at the end of the [provider_sect] section add legacy = legacy_sect. Under [default_sect] uncomment activate = 1. Lastly, add a new section [legacy_sect] that also contains the line activate = 1. Excluding most other preexisting configuration sections, the end result will look something like:\n\n```\n/etc/ssl/openssl.cnf\n```\n\n```\nopenssl_conf = openssl_init\n\n[openssl_init]\nproviders = provider_sect\n\n[provider_sect]\ndefault = default_sect\nlegacy = legacy_sect\n\n[default_sect]\nactivate = 1\n\n[legacy_sect]\nactivate = 1\n```\n\nFinally, restart the NetworkManager.service to have the new OpenSSL configuration take effect.\n\n"
    },
    {
      "title": "WPA Enterprise connections fail to authenticate with OpenSSL \"unsupported protocol\" error",
      "level": 3,
      "content": "Since openssl was updated to version 3, \"SSL 3, TLS 1.0, TLS 1.1, and DTLS 1.0 only work at security level 0\" by default. Attempting to authenticate to a Wi-Fi network only supporting older standards results in the following error in the logs:\n\n```\nwpa_supplicant[3320]: SSL: SSL3 alert: write (local SSL3 detected an error):fatal:protocol version\nwpa_supplicant[3320]: OpenSSL: openssl_handshake - SSL_connect error:0A000102:SSL routines::unsupported protocol\nwpa_supplicant[3320]: wlp3s0: CTRL-EVENT-EAP-FAILURE EAP authentication failed\n```\n\nThe correct approach is to convince the institution's administrator to upgrade the encrypted networking tunnel protocol to TLS 1.3 and optionally drop support for deprecated security standards, including TLS 1.0/1.1, DTLS 1.0 and SSL 1-3. However, as an immediate workaround, there are multiple ways to allow TLS 1.0 and/or 1.1 by default. One way would be to manually patch or revert the breaking changes in OpenSSL ([11]). As this also lowers security for all other programs using OpenSSL level 1, it is not recommended. Instead, one can directly set the level used by wpa_supplicant, like described in BBS#286417. To only change the affected connection, it is possible to set phase1-auth-flags=32 or phase1-auth-flags=64 in the [802-1x] section of the connection's configuration file. This may not be possible through GUIs, but it is possible with nmcli.\n\nFirstly, obtain the name of the Wi-Fi connection with the issue, from the output of the following:\n\n```\n$ nmcli connection show\n```\n\nAssuming the connection uses TLS 1.0 and its name is Example Wi-Fi, use nmcli like so:\n\n```\n$ nmcli connection modify 'Example Wi-Fi' 802-1x.phase1-auth-flags 32\n```\n\nAnd for a TLS 1.1 connection, type \"64\" instead:\n\n```\n$ nmcli connection modify 'Example Wi-Fi' 802-1x.phase1-auth-flags 64\n```\n\nNote: **n** \n\nThe change should instantly be reflected in /etc/NetworkManager/system-connections/Example Wi-Fi.nmconnection.\n\nFinally, restart the NetworkManager.service to have the new OpenSSL configuration take effect.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- NetworkManager for Administrators Part 1\n- Wikipedia:NetworkManager\n- NetworkManager official website\n\n"
    }
  ]
}