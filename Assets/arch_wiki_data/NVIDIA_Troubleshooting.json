{
  "title": "NVIDIA/Troubleshooting",
  "url": "https://wiki.archlinux.org/title/NVIDIA/Troubleshooting",
  "sections": [
    {
      "title": "System will not boot after driver was installed",
      "level": 3,
      "content": "If after installing the NVIDIA driver your system becomes stuck before reaching the display manager, try to disable kernel mode setting.\n\n"
    },
    {
      "title": "Xorg fails to load or Red Screen of Death",
      "level": 3,
      "content": "If you get a red screen and use GRUB, disable the GRUB framebuffer by editing /etc/default/grub and uncomment GRUB_TERMINAL_OUTPUT=console. For more information see GRUB/Tips and tricks#Disable framebuffer.\n\n"
    },
    {
      "title": "Black screen at X startup / Machine poweroff at X shutdown",
      "level": 3,
      "content": "If you have installed an update of NVIDIA and your screen stays black after launching Xorg, or if shutting down Xorg causes a machine poweroff, try the below workarounds:\n\n- Prepend \"xrandr --auto\" to your xinitrc\n- Use the rcutree.gp_init_delay=1 kernel parameter.\n- You can also try to add the nvidia module directly to your mkinitcpio.conf.\n- If the screen still stays black with both the rcutree.gp_init_delay=1 kernel parameter and the nvidia module directly in the mkinitcpio.conf, try re-installing nvidia and nvidia-utils in that order, and finally reload the driver:\n\n```\n# modprobe nvidia\n```\n\n"
    },
    {
      "title": "Screen(s) found, but none have a usable configuration",
      "level": 3,
      "content": "Sometimes NVIDIA and X have trouble finding the active screen. If your graphics card has multiple outputs try plugging your monitor into the other ones. On a laptop it may be because your graphics card has VGA/TV out. Xorg.0.log will provide more info.\n\nAnother thing to try is adding an invalid Option \"ConnectedMonitor\" to Section \"Device\" to force Xorg throw an error and show you how to correct it. See the documentation for more information about the ConnectedMonitor setting.\n\nAfter re-run X see Xorg.0.log to get valid CRT-x,DFP-x,TV-x values.\n\nnvidia-xconfig --query-gpu-info could be helpful.\n\n"
    },
    {
      "title": "X fails with \"Failing initialization of X screen\"",
      "level": 3,
      "content": "If /var/log/Xorg.0.log says X server fails to initialize screen\n\n```\n(EE) NVIDIA(G0): GPU screens are not yet supported by the NVIDIA driver\n(EE) NVIDIA(G0): Failing initialization of X screen\n```\n\nand nvidia-smi says No running processes found\n\nThe solution is at first reinstall latest nvidia-utils, and then copy /usr/share/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf to /etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf, and then edit /etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf and add the line Option \"PrimaryGPU\" \"yes\". Restart the computer. The problem will be fixed.\n\n"
    },
    {
      "title": "Xorg fails during boot, but otherwise starts fine",
      "level": 3,
      "content": "On very fast booting systems, systemd may attempt to start the display manager before the NVIDIA driver has fully initialized. You will see a message like the following in your logs only when Xorg runs during boot.\n\n```\n/var/log/Xorg.0.log\n```\n\n```\n[     1.807] (EE) NVIDIA(0): Failed to initialize the NVIDIA kernel module. Please see the\n[     1.807] (EE) NVIDIA(0):     system's kernel log for additional error messages and\n[     1.808] (EE) NVIDIA(0):     consult the NVIDIA README for details.\n[     1.808] (EE) NVIDIA(0):  *** Aborting ***\n```\n\nIn this case you will need to establish an ordering dependency from the display manager to the DRI device. First create device units for DRI devices by creating a new udev rules file.\n\n```\n/etc/udev/rules.d/99-systemd-dri-devices.rules\n```\n\n```\nACTION==\"add\", KERNEL==\"card*\", SUBSYSTEM==\"drm\", TAG+=\"systemd\"\n```\n\nThen create dependencies from the display manager to the device(s).\n\n```\n/etc/systemd/system/display-manager.service.d/10-wait-for-dri-devices.conf\n```\n\n```\n[Unit]\nWants=dev-dri-card0.device\nAfter=dev-dri-card0.device\n```\n\nIf you have additional cards needed for the desktop then list them in Wants and After seperated by spaces.\n\n"
    },
    {
      "title": "Black screen on systems with integrated GPU",
      "level": 3,
      "content": "If you have a system with an integrated GPU (e.g. Intel HD 4000, VIA VX820 Chrome 9 or AMD Cezanne) and have installed the nvidia package, you may experience a black screen on boot, when changing virtual terminal, or when exiting an X session. This may be caused by a conflict between the graphics modules. This is solved by blacklisting the relevant GPU modules. Create the file /etc/modprobe.d/blacklist.conf and prevent the relevant modules from loading on boot:\n\n```\n/etc/modprobe.d/blacklist.conf\n```\n\n```\ninstall i915 /usr/bin/false\ninstall intel_agp /usr/bin/false\ninstall viafb /usr/bin/false\ninstall radeon /usr/bin/false\ninstall amdgpu /usr/bin/false\n```\n\n"
    },
    {
      "title": "X fails with \"no screens found\" when using Multiple GPUs",
      "level": 3,
      "content": "In situations where you might have multiple GPUs on a system and X fails to start with:\n\n```\n[ 76.633] (EE) No devices detected.\n[ 76.633] Fatal server error:\n[ 76.633] no screens found\n```\n\nthen you need to add your discrete card's BusID to your X configuration. This can happen on systems with an Intel CPU and an integrated GPU or if you have more than one NVIDIA card connected. Find your BusID:\n\n```\n# lspci -dÂ ::03xx\n```\n\n```\n00:02.0 VGA compatible controller: Intel Corporation Xeon E3-1200 v2/3rd Gen Core processor Graphics Controller (rev 09)\n01:00.0 VGA compatible controller: NVIDIA Corporation GK107 [GeForce GTX 650] (rev a1)\n08:00.0 3D controller: NVIDIA Corporation GM108GLM [Quadro K620M / Quadro M500M] (rev a2)\n```\n\nThen you fix it by adding it to the card's Device section in your X configuration. In my case:\n\n```\n/etc/X11/xorg.conf.d/10-nvidia.conf\n```\n\n```\nSection \"Device\"\n    Identifier     \"Device0\"\n    Driver         \"nvidia\"\n    VendorName     \"NVIDIA Corporation\"\n    BusID          \"PCI:1:0:0\"\nEndSection\n```\n\nIn the example above 01:00.0 is stripped to be written as 1:0:0, however some conversions can be more complicated. lspci output is in hex format, but in configuration files the BusID's are in decimal format! This means that in cases where the BusID is greater than 9 you will need to convert it to decimal!\n\nie: 5e:00.0 from lspci becomes PCI:94:0:0.\n\n"
    },
    {
      "title": "Modprobe Error: \"Could not insert 'nvidia': No such device\" on linux >=4.8",
      "level": 3,
      "content": "With linux 4.8, one can get the following errors when trying to use the discrete card:\n\n```\n$ modprobe nvidia -vv\n```\n\n```\nmodprobe: INFO: custom logging function 0x409c10 registered\nmodprobe: INFO: Failed to insert module '/lib/modules/4.8.6-1-ARCH/extramodules/nvidia.ko.gz': No such device\nmodprobe: ERROR: could not insert 'nvidia': No such device\nmodprobe: INFO: context 0x24481e0 released\ninsmod /lib/modules/4.8.6-1-ARCH/extramodules/nvidia.ko.gz\n```\n\n```\n# dmesg\n```\n\n```\n...\nNVRM: The NVIDIA GPU 0000:01:00.0 (PCI ID: 10de:139b)\nNVRM: installed in this system is not supported by the 370.28\nNVRM: NVIDIA Linux driver release.  Please see 'Appendix\nNVRM: A - Supported NVIDIA GPU Products' in this release's\nNVRM: README, available on the Linux driver download page\nNVRM: at www.nvidia.com.\n...\n```\n\nThis problem is caused by bad commits pertaining to PCIe power management in the Linux Kernel (as documented in this NVIDIA DevTalk thread).\n\nThe workaround is to add pcie_port_pm=off to your kernel parameters. Note that this disables PCIe power management for all devices.\n\n"
    },
    {
      "title": "System does not return from suspend",
      "level": 3,
      "content": "What you see in the log:\n\n```\nkernel: nvidia-modeset: ERROR: GPU:0: Failed detecting connected display devices\nkernel: nvidia-modeset: ERROR: GPU:0: Failed detecting connected display devices\nkernel: nvidia-modeset: WARNING: GPU:0: Failure processing EDID for display device DELL U2412M (DP-0).\nkernel: nvidia-modeset: WARNING: GPU:0: Unable to read EDID for display device DELL U2412M (DP-0)\nkernel: nvidia-modeset: ERROR: GPU:0: Failure reading maximum pixel clock value for display device DELL U2412M (DP-0).\n```\n\nA possible solution based on [1]:\n\nRun this command to get the version string:\n\n```\n# strings /sys/firmware/acpi/tables/DSDT | grep -i 'windows ' | sort | tail -1\n```\n\nAdd the acpi_osi=! \"acpi_osi=version\" kernel parameter to your boot loader configuration.\n\nAnother possible cause to the issue could be the use of the nvidia-open package, as described here:\n\n- https://bbs.archlinux.org/viewtopic.php?pid=2047692\n- https://github.com/NVIDIA/open-gpu-kernel-modules/issues/450\n- https://github.com/NVIDIA/open-gpu-kernel-modules/issues/223\n- https://github.com/NVIDIA/open-gpu-kernel-modules/issues/94\n\n"
    },
    {
      "title": "Black screen returning from suspend",
      "level": 3,
      "content": "If experiencing black screen issues and logs containing:\n\n```\narchlinux kernel: NVRM: GPU at PCI:0000:08:00: GPU-926ecdb0-adb1-6ee9-2fad-52e7214c5011\narchlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid='<unknown>', name=<unknown>, Graphi>\narchlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid='<unknown>', name=<unknown>, Graphi>\narchlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid='<unknown>', name=<unknown>, Graphi>\narchlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid='<unknown>', name=<unknown>, Graphi>\narchlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid='<unknown>', name=<unknown>, Graphi>\n```\n\nYou need to enable the NVIDIA suspend, hibernate and sleep services as explained in NVIDIA/Tips and tricks#Preserve video memory after suspend.\n\n"
    },
    {
      "title": "Crashing in general",
      "level": 3,
      "content": "- Try disabling the GSP firmware.\n- Try disabling RenderAccel in xorg.conf.\n- If Xorg outputs an error about \"conflicting memory type\" or \"failed to allocate primary buffer: out of memory\", or crashes with a \"Signal 11\" while using nvidia-96xx drivers, add nopat to your kernel parameters.\n- If the NVIDIA compiler complains about different versions of GCC between the current one and the one used for compiling the kernel, add in /etc/profile:\n\n```\nexport IGNORE_CC_MISMATCH=1\n```\n\n- If fullscreen applications are freezing or crashing, try enabling Display Compositing and Direct fullscreen rendering options in your desktop environment's settings.\n\n"
    },
    {
      "title": "Bad support of mesh shaders",
      "level": 3,
      "content": "This bug is present only for new games that depend on them, like Final Fantasy VII Rebirth. This is reflected in the absence of environments when using NVIDIA GPUs even with latest beta drivers. [2]\n\nHowever, pyroveil, recently developed, allows you to get around the problem with SPIR-V, while waiting for a fix from NVIDIA.\n\nYou need to compile and install the tool by following the tutorial on GitHub, then run the game with the PYROVEIL=1 and PYROVEIL_CONFIG=/path/to/pyroveil/hacks/ffvii-rebirth-nvidia/pyroveil.json environment variables.\n\n"
    },
    {
      "title": "Visual glitches, hangs and errors in OpenGL applications",
      "level": 3,
      "content": "If you are using a recent CPU (Intel Sandy Bridge (2011) and later or AMD Zen (2017) and later) it has a micro operations cache. Using a micro op cache can lead to problems with NVIDIA's driver in OpenGL due to Cache Aliasing [3]. You usually are able to disable the micro op cache in your systems BIOS, but this comes at the cost of performance [4]. Disabling the micro op cache also helps with the most severe graphical glitches in Xwayland applications, although it does not solve the problem fully [5].\n\n"
    },
    {
      "title": "Kernel panic when updating and/or rebooting the system",
      "level": 3,
      "content": "This is a known bug that is present in the NVIDIA 550 series drivers. [6] As of yet the cause is unknown however it only appears to affect laptops. See BBS#293400 for more details.\n\nTo workaround this issue, switch to nvidia-open-dkms if supported by the hardware, otherwise use nvidia-535xx-dkmsAUR instead.\n\n"
    },
    {
      "title": "GSP firmware",
      "level": 3,
      "content": "The use of the GSP firmware, enabled by default since version 555 of the NVIDIA driver released in June 2024, is known to cause a range of issues including Vulkan failures and system crashes.\n\nTo disable it, use the NVreg_EnableGpuFirmware=0 module parameter for the nvidia kernel module. This only works with the proprietary NVIDIA driver: see NVIDIA#Installation if switching from the open source driver.\n\nDo not forget to regenerate the initramfs if needed. To have this new kernel module option take effect, reboot.\n\n"
    },
    {
      "title": "Avoid screen tearing",
      "level": 3,
      "content": "- This has been reported to reduce the performance of some OpenGL applications and may produce issues in WebGL. It also drastically increases the time the driver needs to clock down after load (NVIDIA Support Thread).\n- ForceFullCompositionPipeline is known to break some games using Vulkan under Proton with NVIDIA driver 535.\n\nTearing can be avoided by forcing a full composition pipeline, regardless of the compositor you are using. To test whether this option will work, run:\n\n```\n$ nvidia-settings --assign CurrentMetaMode=\"nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }\"\n```\n\nOr click on the Advanced button that is available on the X Server Display Configuration menu option. Select either Force Composition Pipeline or Force Full Composition Pipeline and click on Apply.\n\nIn order to make the change permanent, it must be added to the \"Screen\" section of the Xorg configuration file. When making this change, TripleBuffering should be enabled and AllowIndirectGLXProtocol should be disabled in the driver configuration as well. See example configuration below:\n\n```\n/etc/X11/xorg.conf.d/20-nvidia.conf\n```\n\n```\nSection \"Device\"\n        Identifier \"NVIDIA Card\"\n        Driver     \"nvidia\"\n        VendorName \"NVIDIA Corporation\"\n        BoardName  \"GeForce GTX 1050 Ti\"\nEndSection\n\nSection \"Screen\"\n    Identifier     \"Screen0\"\n    Device         \"Device0\"\n    Monitor        \"Monitor0\"\n    Option         \"ForceFullCompositionPipeline\" \"on\"\n    Option         \"AllowIndirectGLXProtocol\" \"off\"\n    Option         \"TripleBuffer\" \"on\"\nEndSection\n```\n\nIf you do not have an Xorg configuration file, you can create one for your present hardware using nvidia-xconfig (see NVIDIA#Automatic configuration) and move it from /etc/X11/xorg.conf to the preferred location /etc/X11/xorg.conf.d/20-nvidia.conf.\n\n"
    },
    {
      "title": "Multi-monitor",
      "level": 4,
      "content": "For multi-monitor setup you will need to specify ForceCompositionPipeline=On for each display. For example:\n\n```\n$ nvidia-settings --assign CurrentMetaMode=\"DP-2: nvidia-auto-select +0+0 {ForceCompositionPipeline=On}, DP-4: nvidia-auto-select +3840+0 {ForceCompositionPipeline=On}\"\n```\n\nWithout doing this, the nvidia-settings command will disable your secondary display.\n\nYou can get the current screen names and offsets using --query:\n\n```\n$ nvidia-settings --query CurrentMetaMode\n```\n\nThe above line is for two 3840x2160 monitors connected to DP-2 and DP-4. You will need to read the correct CurrentMetaMode by exporting xorg.conf and append ForceCompositionPipeline to each of your displays. Setting ForceCompositionPipeline only affects the targeted display.\n\n"
    },
    {
      "title": "Screen corruption after resuming from suspend or hibernation",
      "level": 3,
      "content": "This also applies if an external monitor does not wake up after suspend or hibernation.\n\nSee NVIDIA/Tips and tricks#Preserve video memory after suspend\n\nA corruption after suspend bug when using GDM service was solved as of driver version 515.43.04 [7].\n\n"
    },
    {
      "title": "Corrupted screen: \"Six screens\" Problem",
      "level": 3,
      "content": "For some users, using GeForce GT 100M's, the screen gets corrupted after X starts, divided into 6 sections with a resolution limited to 640x480. The same problem has been reported with Quadro 2000 and hi-res displays.\n\nTo solve this problem, enable the Validation Mode NoTotalSizeCheck in section Device:\n\n```\nSection \"Device\"\n ...\n Option \"ModeValidation\" \"NoTotalSizeCheck\"\n ...\nEndSection\n```\n\n"
    },
    {
      "title": "Invisible text and icons with nvidia-470",
      "level": 3,
      "content": "An update of GTK4 brought an issue for users relying on the nvidia-470 driver for legacy cards. After the update text and icons randomly disappear and re-appear only after hovering with the mouse over the windows.[8]\n\nSee the forum for work-arounds.\n\n"
    },
    {
      "title": "Fix graphical corruption in GNOME Shell when resuming from sleep",
      "level": 3,
      "content": "If you are facing strange fonts and/or having weird graphical glitches in GNOME Shell when resuming from sleep, try setting the following kernel parameter to enable power management:\n\n```\nnvidia.NVreg_DynamicPowerManagement=0x02\n```\n\nMore info: https://download.nvidia.com/XFree86/Linux-x86_64/570.86.16/README/dynamicpowermanagement.html\n\n"
    },
    {
      "title": "Bad performance after installing a new driver version",
      "level": 3,
      "content": "If FPS have dropped in comparison with older drivers, check if direct rendering is enabled (glxinfo is included in mesa-utils):\n\n```\n$ glxinfo | grep direct\n```\n\nIf the command prints:\n\n```\ndirect rendering: No\n```\n\nA possible solution could be to regress to the previously installed driver version and rebooting afterwards.\n\n"
    },
    {
      "title": "Extreme lag on Xorg",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nA common issue with Mutter is that animations, video playback and gaming cause extreme desktop lag on Xorg.\n\nSee NVIDIA/Tips and tricks#Preserve video memory after suspend.\n\nThis should resolve this issue, however if it did not, you are most likely out of luck. One way you can remedy this issue is by adding these options:\n\n```\n/etc/environment\n```\n\n```\nCLUTTER_DEFAULT_FPS=YOUR_MAIN_DISPLAY_REFRESHRATE\n__GL_SYNC_DISPLAY_DEVICE=YOUR_MAIN_DISPLAY_OUTPUT_NAME\n```\n\nturning Sync to VBlank and Allow flipping off within NVIDIA Settings, and configuring NVIDIA Settings to launch on startup using the flag --load-config-only. This will still result in a laggy desktop behavior, in particular on an eventual second (or third) monitor, but it should be much better.\n\n"
    },
    {
      "title": "CPU spikes with 400 series cards",
      "level": 3,
      "content": "If you are experiencing intermittent CPU spikes with a 400 series card, it may be caused by PowerMizer constantly changing the GPU's clock frequency. Switching PowerMizer's setting from Adaptive to Performance, add the following to the Device section of your Xorg configuration:\n\n```\nOption \"RegistryDwords\" \"PowerMizerEnable=0x1; PerfLevelSrc=0x3322; PowerMizerDefaultAC=0x1\"\n```\n\n"
    },
    {
      "title": "Vulkan error on applications start",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nOn executing an application that require Vulkan acceleration, if you get this error\n\n```\nVulkan call failed: -4\n```\n\ntry to delete the ~/.nv or ~/.cache/nvidia directory.\n\n"
    },
    {
      "title": "No audio over HDMI",
      "level": 3,
      "content": "Sometimes NVIDIA HDMI audio devices are not shown when you do\n\n```\n$ aplay -l\n```\n\nOn some new machines, the audio chip on the NVIDIA GPU is disabled at boot. Read more on NVIDIA's website and a forum post.\n\nYou need to reload the NVIDIA device with audio enabled. In order to do that make sure that your GPU is on (in case of laptops/Bumblebee) and that you are not running X on it, because it is going to reset:\n\n```\n# setpci -s 01:00.0 0x488.l=0x2000000:0x2000000\n# rmmod nvidia-drm nvidia-modeset nvidia\n# echo 1 > /sys/bus/pci/devices/0000:01:00.0/remove\n# echo 1 > /sys/bus/pci/devices/0000:00:01.0/rescan\n# modprobe nvidia-drm\n# xinit -- -retro\n```\n\nIf you are running your TTY on NVIDIA, put the lines in a script so you do not end up with no screen.\n\n"
    },
    {
      "title": "Backlight is not turning off in some occasions",
      "level": 3,
      "content": "By default, DPMS should turn off backlight with the timeouts set or by running xset. However, probably due to a bug in the proprietary NVIDIA drivers the result is a blank screen with no powersaving whatsoever. To workaround it, until the bug has been fixed you can use the vbetool as root.\n\nInstall the vbetool package.\n\nTurn off your screen on demand and then by pressing a random key backlight turns on again:\n\n```\nvbetool dpms off && read -n1; vbetool dpms on\n```\n\nAlternatively, xrandr is able to disable and re-enable monitor outputs without requiring root.\n\n```\nxrandr --output DP-1 --off; read -n1; xrandr --output DP-1 --auto\n```\n\n"
    },
    {
      "title": "HardDPMS",
      "level": 4,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nProprietary driver 415 includes a new feature called HardDPMS. This is reported by some users to solve the issues with suspending monitors connected over DisplayPort. It is enabled by default since 440.26. If you are using an older driver, the HardDPMS option can be set in the Device or Screen sections. For example:\n\n```\n/etc/X11/xorg.conf.d/20-nvidia.conf\n```\n\n```\nSection \"Device\"\n    ...\n    Option         \"HardDPMS\" \"true\"\n    ...\nEndSection\n\nSection \"Screen\"\n    ...\n    Option         \"HardDPMS\" \"true\"\n    ...\nEndSection\n```\n\nHardDPMS will trigger on screensaver settings like BlankTime. The following ServerFlags will set your monitor(s) to suspend after 10 minutes of inactivity:\n\n```\n/etc/X11/xorg.conf.d/20-nvidia.conf\n```\n\n```\nSection \"ServerFlags\"\n    Option     \"BlankTime\" \"10\"\nEndSection\n```\n\n"
    },
    {
      "title": "xrandr BadMatch",
      "level": 3,
      "content": "If you are trying to configure a WQHD monitor such as DELL U2515H using xrandr and xrandr --addmode gives you the error X Error of failed request: BadMatch, it might be because the proprietary NVIDIA driver clips the pixel clock maximum frequency of HDMI output to 225 MHz or lower. To set the monitor to maximum resolution you have to install nouveau drivers. You can force nouveau to use a specific pixel clock frequency by setting nouveau.hdmimhz=297 (or 330) in your Kernel parameters.\n\nAlternatively, it may be that your monitor's EDID is incorrect. See #Override EDID.\n\nAnother reason could be that by default current NVIDIA drivers will only allow modes explicitly reported by EDID, but sometimes refresh rates and/or resolutions are desired which are not reported by the monitor (although the EDID information is correct; it is just that current NVIDIA drivers are too restrictive).\n\nIf this happens, you may want to add an option to xorg.conf to allow non-EDID modes:\n\n```\nSection \"Device\"\n    Identifier     \"Device0\"\n    Driver         \"nvidia\"\n    VendorName     \"NVIDIA Corporation\"\n...\n    Option         \"ModeValidation\" \"AllowNonEdidModes\"\n...\nEndSection\n```\n\nThis can be set per-output. See README - Appendix B. X Config Options for more information.\n\n"
    },
    {
      "title": "Override EDID",
      "level": 3,
      "content": "See Kernel mode setting#Forcing modes and EDID, Xrandr#Troubleshooting and Qnix QX2710#Fixing X11 with Nvidia.\n\n"
    },
    {
      "title": "Overclocking with nvidia-settings GUI not working",
      "level": 3,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nWorkaround is to use nvidia-settings CLI to query and set certain variables after enabling overclocking (as explained in NVIDIA/Tips and tricks#Enabling overclocking in nvidia-settings, see nvidia-settings(1) for more information).\n\nExample to query all variables:\n\n```\nnvidia-settings -q all\n```\n\nExample to set PowerMizerMode to prefer performance mode:\n\n```\nnvidia-settings -a [gpu:0]/GPUPowerMizerMode=1\n```\n\nExample to set fan speed to fixed 21%:\n\n```\nnvidia-settings -a [gpu:0]/GPUFanControlState=1 -a [fan:0]/GPUTargetFanSpeed=21\n```\n\nExample to set multiple variables at once (overclock GPU by 50MHz, overclock video memory by 50MHz, increase GPU voltage by 100mV):\n\n```\nnvidia-settings -a GPUGraphicsClockOffsetAllPerformanceLevels=50 -a GPUMemoryTransferRateOffsetGPUGraphicsClockOffsetAllPerformanceLevels=50 -a GPUOverVoltageOffset=100\n```\n\n"
    },
    {
      "title": "Overclocking not working with Unknown Error",
      "level": 3,
      "content": "If you are running Xorg as a non-root user and trying to overclock your NVIDIA GPU, you will get an error similar to this one:\n\n```\n$ nvidia-settings -a \"[gpu:0]/GPUGraphicsClockOffset[3]=10\"\n```\n\n```\nERROR: Error assigning value 10 to attribute 'GPUGraphicsClockOffset' (trinity-zero:1[gpu:0]) as specified in assignment\n        '[gpu:0]/GPUGraphicsClockOffset[3]=10' (Unknown Error).\n```\n\nTo avoid this issue, Xorg has to be run as the root user. See Xorg#Rootless Xorg for details.\n\n"
    },
    {
      "title": "Power draw",
      "level": 3,
      "content": "Note: **This article or section needs expansion.** This article or section needs expansion.\n\nThis article or section needs expansion.\n\nCheck driver usage:\n\n```\n# lsof /dev/nvidia*\n```\n\n```\nkwin_wayl  867      user   17u   CHR   195,0      0t0  418 /dev/nvidia\nkwin_wayl  867      user   18u   CHR   195,0      0t0  418 /dev/nvidiactl\n```\n\nIf power save is configured on the kernel module:\n\n```\n$ grep . /sys/bus/pci/devices/0000:01:00.0/power/*\n```\n\n```\n/sys/bus/pci/devices/0000:01:00.0/power/control:auto\n/sys/bus/pci/devices/0000:01:00.0/power/runtime_active_time:445933\n/sys/bus/pci/devices/0000:01:00.0/power/runtime_status:active\n/sys/bus/pci/devices/0000:01:00.0/power/runtime_suspended_time:1266\n/sys/bus/pci/devices/0000:01:00.0/power/wakeup:disabled\n```\n\n```\n# rmmod nvidia_drm\n```\n\n```\n$ grep . /sys/bus/pci/devices/0000:01:00.0/power/*\n```\n\n```\n/sys/bus/pci/devices/0000:01:00.0/power/control:auto\n/sys/bus/pci/devices/0000:01:00.0/power/runtime_active_time:461023\n/sys/bus/pci/devices/0000:01:00.0/power/runtime_status:suspended\n/sys/bus/pci/devices/0000:01:00.0/power/runtime_suspended_time:1064192\n/sys/bus/pci/devices/0000:01:00.0/power/wakeup:disabled\n```\n\n"
    },
    {
      "title": "Test software GL",
      "level": 3,
      "content": "The binary NVIDIA driver will not adhere to the Mesa environment variable LIBGL_ALWAYS_SOFTWARE=1 but you can direct libglvnd and EGL to use Mesa by setting the following environment variables:\n\n```\n__GLX_VENDOR_LIBRARY_NAME=mesa\n__EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/50_mesa.json\n```\n\nwhich will result in the Mesa libgl being used for GLX and EGL and result in software GL to see whether a bug is related to the NVIDIA GL library.\n\n"
    }
  ]
}