{
  "title": "PPTP Server",
  "url": "https://wiki.archlinux.org/title/PPTP_Server",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- PPTP Client\n\nPoint-to-Point Tunneling Protocol (PPTP) is a method for implementing virtual private networks. PPTP uses a control channel over TCP and a GRE tunnel operating to encapsulate PPP packets.\n\nThis entry will show you on how to create a PPTP server in Arch.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the pptpd package.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "A typical configuration may look like:\n\n```\n/etc/pptpd.conf\n```\n\n```\n# Read man pptpd.conf, see samples in /usr/share/doc/pptpd\n# and write your pptpd configuration here\n\n# pppd options file. By default, /etc/ppp/options is used\noption /etc/ppp/options.pptpd\n\n# Server IP in local network\nlocalip 192.168.1.2\n\n# IP address ranges used to assign IPs to new connecting clients\n# Here we define two ranges for our 192.168.1.* subnet: 234-238 and 245\nremoteip 192.168.1.234-238,192.168.1.245\n```\n\nNow create the pppd options file, in our example this is /etc/ppp/options.pptpd:\n\n```\n/etc/ppp/options.pptpd\n```\n\n```\n# Read man pppd to see the full list of available options\n\n# The name of the local system for authentication purposes\nname pptpd\n\n# Refuse PAP, CHAP or MS-CHAP connections but accept connections with\n# MS-CHAPv2 or MPPE with 128-bit encryption\nrefuse-pap\nrefuse-chap\nrefuse-mschap\nrequire-mschap-v2\nrequire-mppe-128\n\n# Add entry to the ARP system table\nproxyarp\n\n# For the serial device to ensure exclusive access to the device\nlock\n\n# Disable BSD-Compress and Van Jacobson TCP/IP header compression\nnobsdcomp\nnovj\nnovjccomp\n\n# Disable file logging\nnolog\n\n# DNS servers for Microsoft Windows clients. Using Google's public servers here\nms-dns 8.8.8.8\nms-dns 8.8.4.4\n```\n\nNow create credentials file for authenticating users:\n\n```\n/etc/ppp/chap-secrets\n```\n\n```\n# Secrets for authentication using CHAP\n# client\tserver\tsecret\t\t\tIP addresses\n  user2         pptpd   123                     *\n```\n\nNow you can be authenticated with user2 as username and 123 for password.\n\nCreate a sysctl configuration file /etc/sysctl.d/30-ipforward.conf and enable kernel packet forwarding that allow connecting clients to have access to your subnet (see also Internet Share#Enable packet forwarding):\n\n```\n/etc/sysctl.d/30-ipforward.conf\n```\n\n```\nnet.ipv4.ip_forward=1\n```\n\nNow apply changes to let the sysctl configuration take effect:\n\n```\n# sysctl --system\n```\n\n"
    },
    {
      "title": "iptables firewall configuration",
      "level": 3,
      "content": "Configure your iptables settings to enable access for PPTP Clients\n\n```\n# Accept all packets via ppp* interfaces (for example, ppp0)\niptables -A INPUT -i ppp+ -j ACCEPT\niptables -A OUTPUT -o ppp+ -j ACCEPT\n\n# Accept incoming connections to port 1723 (PPTP)\niptables -A INPUT -p tcp --dport 1723 -j ACCEPT\n\n# Accept GRE packets\niptables -A INPUT -p 47 -j ACCEPT\niptables -A OUTPUT -p 47 -j ACCEPT\n\n# Enable IP forwarding\niptables -F FORWARD\niptables -A FORWARD -j ACCEPT\n\n# Enable NAT for eth0 on ppp* interfaces\niptables -A POSTROUTING -t nat -o eth0 -j MASQUERADE\niptables -A POSTROUTING -t nat -o ppp+ -j MASQUERADE\n```\n\nNow save the new iptables rules with:\n\n```\n# iptables-save > /etc/iptables/iptables.rules\n```\n\nTo load /etc/iptables/iptables.rules automatically after boot, enable the iptables.service unit.\n\nRead Iptables for more information.\n\n"
    },
    {
      "title": "UFW firewall configuration",
      "level": 3,
      "content": "Configure your ufw settings to enable access for PPTP Clients.\n\nYou must change default forward policy in /etc/default/ufw\n\n```\n/etc/default/ufw\n```\n\n```\nDEFAULT_FORWARD_POLICY=\"ACCEPT\"\n```\n\nNow change /etc/ufw/before.rules, add following code after header and before *filter line\n\n```\n/etc/ufw/before.rules\n```\n\n```\n# nat Table rules\n*nat\n:POSTROUTING ACCEPT [0:0]\n\n# Allow traffic from clients to eth0\n-A POSTROUTING -s 192.168.1.0/24 -o eth0 -j MASQUERADE\n\n# commit to apply changes\nCOMMIT\n```\n\nAllow GRE packets (protocol 47) in /etc/ufw/before.rules, find the line with: # drop INVALID packets and add rule:\n\n```\n/etc/ufw/before.rules\n```\n\n```\n# drop INVALID packets (logs these in loglevel medium and higher)\n-A ufw-before-input -p 47 -i $iface -j ACCEPT\n-A ufw-before-input -m conntrack --ctstate INVALID -j ufw-logging-deny\n-A ufw-before-input -m conntrack --ctstate INVALID -j DROP\n```\n\nOpen pptp port 1723\n\n```\nufw allow 1723\n```\n\nRestart ufw for good measure\n\n```\nufw disable\nufw enable\n```\n\n"
    },
    {
      "title": "Start the server",
      "level": 2,
      "content": "Now you can start and enable your PPTP Server using pptpd.service.\n\n"
    },
    {
      "title": "Troubleshooting",
      "level": 2,
      "content": "As with any service, see Systemd#Troubleshooting to investigate errors.\n\n"
    },
    {
      "title": "Error 619 on the client side",
      "level": 3,
      "content": "Search for the logwtmp option in /etc/pptpd.conf and comment it out. When this is enabled, wtmp will be used to record client connections and disconnections.\n\n```\n#logwtmp\n```\n\n"
    },
    {
      "title": "pptpd[xxxxx]: Long config file line ignored",
      "level": 3,
      "content": "Add a blank line at the end of /etc/pptpd.conf. [1]\n\n"
    },
    {
      "title": "ppp0: ppp: compressor dropped pkt",
      "level": 3,
      "content": "If you have this error while a client is connected to the server, add the following script to /etc/ppp/ip-up.d/mppefixmtu.sh:\n\n```\n#!/bin/sh\nCURRENT_MTU=\"`ip link show $1 | grep -Po '(?<=mtu )([0-9]+)'`\"\nFIXED_MTU=\"`expr $CURRENT_MTU + 4`\"\nip link set $1 mtu $FIXED_MTU\n```\n\nMake the script executable.\n\nSee also: [2]\n\n"
    }
  ]
}