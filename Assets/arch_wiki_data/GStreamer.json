{
  "title": "GStreamer",
  "url": "https://wiki.archlinux.org/title/GStreamer",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "GStreamer is a pipeline-based multimedia framework written in the C programming language with the type system based on GObject.\n\nGStreamer allows a programmer to create a variety of media-handling components, including simple audio playback, audio and video playback, recording, streaming and editing. The pipeline design serves as a base to create many types of multimedia applications such as video editors, streaming media broadcasters, and media players.\n\nDesigned to be cross-platform, it is known to work on Linux (x86, PowerPC and ARM), Solaris (Intel and SPARC), macOS, Microsoft Windows and OS/400. GStreamer has bindings for programming-languages like Python, C++, Perl, GNU Guile (guile), and Ruby. GStreamer is free software, licensed under the GNU Lesser General Public License.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the gstreamer package.\n\nTo make GStreamer useful, install the plugins packages you require. See official documentation for list of features in each plugin.\n\n- gst-libav - Libav-based plugin containing many decoders and encoders.\n- gst-plugins-bad - Plugins that need more quality, testing or documentation.\n- gst-plugins-base - Essential exemplary set of elements.\n- gst-plugins-good - Good-quality plugins under LGPL license.\n- gst-plugins-ugly - Good-quality plugins that might pose distribution problems.\n\n"
    },
    {
      "title": "Using gst-launch-1.0",
      "level": 3,
      "content": "A helpful tool of GStreamer is the gst-launch-1.0(1) command. It is an extremely versatile command line tool to create GStreamer pipelines. It is very similar to and can do many of the things the FFmpeg command can do. Here are some examples:\n\nConvert an MP4 file to MKV:\n\n```\n$ gst-launch-1.0 filesrc location=source.mp4 ! qtdemux name=demux matroskamux name=mux ! filesink location=dest.mkv  demux.audio_0 ! queue ! aacparse ! queue ! mux.audio_0  demux.video_0 ! queue ! h264parse ! queue ! mux.video_0\n```\n\n"
    },
    {
      "title": "Using gst-discoverer-1.0",
      "level": 3,
      "content": "Another helpful tool is gst-discoverer-1.0(1), which is the GStreamer equivalent of FFmpeg's ffprobe(1).\n\nGet info on a video file:\n\n```\n$ gst-discoverer-1.0 file.mp4\n```\n\n```\nProperties:\n  Duration: 0:02:55.613000000\n  Seekable: yes\n  Live: no\n  container: Quicktime\n    audio: MPEG-4 AAC\n      Stream ID: c910ef2fa357f9f4ad365aebc98cfca88d23fdca99d832645f5113efa43b0cd3/002\n      Language: <unknown>\n      Channels: 2 (front-left, front-right)\n      Sample rate: 44100\n      Depth: 16\n      Bitrate: 125588\n      Max bitrate: 125588\n    video: H.264 (Constrained Baseline Profile)\n      Stream ID: c910ef2fa357f9f4ad365aebc98cfca88d23fdca99d832645f5113efa43b0cd3/001\n      Width: 192\n      Height: 144\n      Depth: 24\n      Frame rate: 15000/1001\n      Pixel aspect ratio: 1/1\n      Interlaced: false\n      Bitrate: 107884\n      Max bitrate: 107884\n```\n\n"
    },
    {
      "title": "PulseAudio",
      "level": 3,
      "content": "PulseAudio support is provided by the gst-plugins-good package.\n\n"
    },
    {
      "title": "PipeWire",
      "level": 3,
      "content": "PipeWire support is provided by the gst-plugin-pipewire package.\n\n"
    },
    {
      "title": "KDE / Phonon integration",
      "level": 3,
      "content": "See Phonon.\n\n"
    },
    {
      "title": "Hardware video acceleration",
      "level": 3,
      "content": "See Hardware video acceleration.\n\nGStreamer will automatically detect and use the correct API [1]. Depending on the system install:\n\n- gst-plugin-va for VA-API support.\n- gst-plugins-bad and nvidia-utils for NVDECODE/NVENCODE support.\n\nIf the new elements do not show up after installing the packages, you may want to delete and rebuild the plugin registry. Usually it suffices to\n\n```\n$ rm ~/.cache/gstreamer-1.0/registry.*.bin\n```\n\nGstreamer will then rebuild the registry on the next invocation, which usually takes a few seconds.\n\n"
    },
    {
      "title": "Verify VA-API support",
      "level": 4,
      "content": "To verify VA-API support:\n\n```\n$ gst-inspect-1.0 va\n```\n\n```\nPlugin Details:\n  Name                     va\n  Description              VA-API codecs plugin\n  Filename                 /usr/lib/gstreamer-1.0/libgstva.so\n  Version                  version\n  License                  LGPL\n  Source module            gst-plugins-bad\n  Documentation            https://gstreamer.freedesktop.org/documentation/va/\n  Source release date      date\n  Binary package           Arch Linux gst-plugins-bad version\n  Origin URL               https://archlinux.org/\n\n  vaav1dec: VA-API AV1 Decoder\n  vacompositor: VA-API Video Compositor\n  vadeinterlace: VA-API Deinterlacer\n  vah264dec: VA-API H.264 Decoder\n  vah264enc: VA-API H.264 Encoder\n  vah264lpenc: VA-API H.264 Low Power Encoder\n  vah265dec: VA-API H.265 Decoder\n  vah265enc: VA-API H.265 Encoder\n  vah265lpenc: VA-API H.265 Low Power Encoder\n  vajpegdec: VA-API JPEG Decoder\n  vampeg2dec: VA-API Mpeg2 Decoder\n  vapostproc: VA-API Video Postprocessor\n  vavp8dec: VA-API VP8 Decoder\n  vavp9dec: VA-API VP9 Decoder\n\n  14 features:\n  +-- 14 elements\n```\n\n"
    },
    {
      "title": "Verify NVDECODE/NVENCODE support",
      "level": 4,
      "content": "To verify NVDECODE/NVENCODE support:\n\n```\n$ gst-inspect-1.0 nvcodec\n```\n\n```\nPlugin Details:\n  Name                     nvcodec\n  Description              GStreamer NVCODEC plugin\n  Filename                 /usr/lib/gstreamer-1.0/libgstnvcodec.so\n  Version                  version\n  License                  LGPL\n  Source module            gst-plugins-bad\n  Source release date      date\n  Binary package           GStreamer Bad Plugins (Arch Linux)\n  Origin URL               https://archlinux.org/\n\n  cudadownload: CUDA downloader\n  cudaupload: CUDA uploader\n  nvautogpuh264enc: NVENC H.264 Video Encoder Auto GPU select Mode\n  nvautogpuh265enc: NVENC H.265 Video Encoder Auto GPU select Mode\n  nvav1dec: NVDEC AV1 Decoder\n  nvcudah264enc: NVENC H.264 Video Encoder CUDA Mode\n  nvcudah265enc: NVENC H.265 Video Encoder CUDA Mode\n  nvh264dec: NVDEC h264 Video Decoder\n  nvh264enc: NVENC H.264 Video Encoder\n  nvh264sldec: NVDEC H.264 Stateless Decoder\n  nvh265dec: NVDEC h265 Video Decoder\n  nvh265enc: NVENC HEVC Video Encoder\n  nvh265sldec: NVDEC H.265 Stateless Decoder\n  nvjpegdec: NVDEC jpeg Video Decoder\n  nvmpeg2videodec: NVDEC mpeg2video Video Decoder\n  nvmpeg4videodec: NVDEC mpeg4video Video Decoder\n  nvmpegvideodec: NVDEC mpegvideo Video Decoder\n  nvvp8dec: NVDEC vp8 Video Decoder\n  nvvp8sldec: NVDEC VP8 Stateless Decoder\n  nvvp9dec: NVDEC vp9 Video Decoder\n  nvvp9sldec: NVDEC VP9 Stateless Decoder\n\n  21 features:\n  +-- 21 elements\n```\n\n"
    },
    {
      "title": "Set decoder ranks",
      "level": 4,
      "content": "For some NVIDIA users, gst-libav may prioritize the Libav decoder over nvcodec decoders which will inhibit hardware acceleration. The GST_PLUGIN_FEATURE_RANK environment variable can be used to rank decoders and thus alleviate this issue. See \"GST_PLUGIN_FEATURE_RANK\" in the documentation for more information. For example:\n\n```\nGST_PLUGIN_FEATURE_RANK=nvmpegvideodec:MAX,nvmpeg2videodec:MAX,nvmpeg4videodec:MAX,nvh264sldec:MAX,nvh264dec:MAX,nvjpegdec:MAX,nvh265sldec:MAX,nvh265dec:MAX,nvvp9dec:MAX\n```\n\nThose without AV1 hardware support may also want to disable AV1 decoders (e.g., for YouTube on webkit2gtk-based browsers) by appending avdec_av1:NONE and av1dec:NONE to the list above.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Sound system\n- website\n\n"
    }
  ]
}