{
  "title": "Dzen",
  "url": "https://wiki.archlinux.org/title/Dzen",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Dzen is \"a general purpose messaging, notification and menuing program for X11. It was designed to be scriptable in any language and integrate well with window managers like dwm, wmii and xmonad though it will work with any window manager.\"\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the dzen2 package, which includes Xft, XPM, and Xinerama support.\n\n"
    },
    {
      "title": "Usage",
      "level": 2,
      "content": "Dzen receives string from a pipe and output it graphically, this fact makes dzen scriptable in any language. Example:\n\n```\n$ echo \"Hello World\" | dzen2 -p\n```\n\n"
    },
    {
      "title": "Options",
      "level": 3,
      "content": "Dzen has a lot of options. The following list explains some of them:\n\n- -fg Foreground color.\n- -bg Background color.\n- -fn Font.\n- -ta Align the title window content, l(eft), c(enter), r(ight).\n- -tw Width of the title window.\n- -sa Align the slave window content. See -ta.\n- -l Number of lines in the slave window.\n- -e Events and action.\n- -m Menu mode.\n- -u Update contents of title and slave window simultaneously.\n- -p Persist EOF (optional timeout in seconds).\n- -x X position .\n- -y Y position .\n- -h Height of the line (default: fontheight + 2 pixels).\n- -w Width of the window.\n- -v Version.\n\n"
    },
    {
      "title": "Making a pop-up with dzen",
      "level": 2,
      "content": "The following code will open a dzen window in the top right corner of the screen. It will have a width of 100px, a height of 15px with a black foreground and white background (right button click to close dzen).\n\n```\n$ seq 1 3 | dzen2 -p -w '100' -h '15' -fg '#000000' -bg '#FFFFFF'\n```\n\nNote that the window is with the number 3 in the middle, try to run the same code with -l option.\n\n```\n$ seq 1 3 | dzen2 -p -w '100' -h '15' -fg '#000000' -bg '#FFFFFF' -l '2'\n```\n\nNow when you hover the mouse through the dzen it will uncollapse the slave window. If you click on the lines in the slave window nothing will happen, try to use the -m option.\n\n```\n$ seq 1 3 | dzen2 -p -w '100' -h '15' -fg '#000000' -bg '#FFFFFF' -l '2' -m\n```\n\nNow if you click on the lines it will print the numbers in your terminal. This feature is useful to make menus.\n\nBut if you want to center the numbers and align the title to the left, you will need the options: -sa and -ta.\n\n```\n$ seq 1 3 | dzen2 -p -w '100' -h '15' -fg '#000000' -bg '#FFFFFF' -l '2' -m -ta 'l' -sa 'c'\n```\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "Dzen is able to read font and color settings from X resources. As an example, you can add following lines to ~/.Xresources:\n\n```\ndzen2.font:       -*-fixed-*-*-*-*-*-*-*-*-*-*-*-*\ndzen2.foreground: #22EE11\ndzen2.background: black\n```\n\n"
    },
    {
      "title": "Using custom fonts with dzen",
      "level": 3,
      "content": "Dzen follows the X Logical Font Description, so it will only find fonts in the X font path. See Fonts#Older applications for details.\n\n"
    },
    {
      "title": "Dzen and Conky",
      "level": 3,
      "content": "Conky can be used to pipe information directly to dzen for output in a status bar. This can be done with conky and conky-cliAUR, a stripped-down version of the Conky status utility.\n\nThe following example displays the average load values in red and the current time in the default dzen foreground colour:\n\n```\n~/.conkyrc\n```\n\n```\nconky.config = {\n      background = false\n    , out_to_console = true\n    , out_to_x = false\n    , update_interval = 1.0\n    , total_run_times = 0\n    , use_spacer = none\n}\n\nconky.text = [[^fg(\\#ff0000)${loadavg 1 2 3} ^fg()${time %a %b %d %I:%M%P}]]\n```\n\n```\n~/bin/dzconky\n```\n\n```\n#!/bin/sh\n \n FG='#aaaaaa'\n BG='#1a1a1a'\n FONT='-*-terminus-*-r-normal-*-*-120-*-*-*-*-iso8859-*'\n conky | dzen2 -e - -h '16' -w '600' -ta r -fg $FG -bg $BG -fn $FONT &\n```\n\nSimply execute dzconky in your startup scripts.\n\n"
    },
    {
      "title": "Clickable areas and popups",
      "level": 3,
      "content": "dzen2 allows you to define clickable areas using ^ca(button, command)Text^ca(). You can use this property to create popups giving arbitrary information, as seen in various screenshot gifs like this.\n\nA simple example can be:\n\n```\nsysinfo_popup.sh\n```\n\n```\n#/bin/bash\n\n #A simple popup showing system information\n\n HOST=$(uname -n)\n KERNEL=$(uname -r)\n UPTIME=$( uptime | sed 's/.* up //' | sed 's/[0-9]* us.*//' | sed 's/ day, /d /'\\\n          | sed 's/ days, /d /' | sed 's/:/h /' | sed 's/ min//'\\\n            |  sed 's/,/m/' | sed 's/  / /')\n PACKAGES=$(pacman -Q | wc -l)\n UPDATED=$(awk '/upgraded/ {line=$0;} END { $0=line; gsub(/[\\[\\]]/,\"\",$0); \\\n          printf \"%s %s\",$1,$2;}' /var/log/pacman.log)\n\n (\n echo \"System Information\" # Fist line goes to title\n # The following lines go to slave window\n echo \"Host: $HOST \"\n echo \"Kernel: $KERNEL\"\n echo \"Uptime: $UPTIME \"\n echo \"Pacman: $PACKAGES packages\"\n echo \"Last updated on: $UPDATED\"\n ) | dzen2 -p -x \"500\" -y \"30\" -w \"220\" -l \"5\" -sa 'l' -ta 'c'\\\n    -title-name 'popup_sysinfo' -e 'onstart=uncollapse;button1=exit;button3=exit'\n\n # \"onstart=uncollapse\" ensures that slave window is visible from start.\n```\n\nSave this script and make it executable and then use the ^ca() attribute in your conkyrc (or the script that you pipe to dzen2) to trigger it.\n\n```\n^ca(1,<path to your script>)Sysinfo^ca()\n```\n\nThis will bind the script to mouse button 1 and execute it when it is clicked over the text.\n\n"
    },
    {
      "title": "Gadgets",
      "level": 3,
      "content": "There are some gadgets on dzen that may be used to make a good customize. Follow below some of they with a brief explanation and examples.\n\n"
    },
    {
      "title": "dbar",
      "level": 4,
      "content": "Dbar receive a pipe from another command with any number and outputs a semi-graphical progress bar with it, by default the max number of 100% is 100. The maximum and minimum values can be changed with -max/-min respectively.\n\nOutput example:\n\n```\n50% [=============            ]\n```\n\nCode example:\n\n```\n~/test\n```\n\n```\n#!/bin/sh\n\n(\namixer get Master | \\\nawk '/Left:/{gsub(/[[:punct:]]/,\"\",$5);left=$5}\n     /Right:/{gsub(/[[:punct:]]/,\"\",$5);right=$5}\n     END {print left ORS right}'\n) | dbar -max 100 -min 0 -s '|' -l 'Vol'\n```\n\nSee README.dbar for details.\n\n"
    },
    {
      "title": "gdbar",
      "level": 4,
      "content": "Gdbar as well as dbar outputs a progress bar based on a value of 100%, but here it is full-graphical. Gdbar have the same options of dbar with some additional options. Some of the options are:\n\n- -fg set the foreground.\n- -bg set the background.\n- -w/-h set the width and height respectively.\n\nCode example:\n\n```\n~/test\n```\n\n```\n#!/bin/sh\n\n(\namixer get Master | \\\nawk '/Left:/{gsub(/[[:punct:]]/,\"\",$5);left=$5}\n     /Right:/{gsub(/[[:punct:]]/,\"\",$5);right=$5}\n     END{print left ORS right}'\n) | gdbar -max 100 -min 0 -l 'Vol ' -bg '#777777' -fg '#00ff00' -ss '2' | dzen2 -p -l '1' -w '150' -y '100' -x '100' -ta c -sa c -e 'onstartup=uncollapse;button3=exit'\n```\n\nSee README.gdbar for details.\n\n"
    },
    {
      "title": "Others",
      "level": 4,
      "content": "Information about others gadgets can be found here.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Official website, wiki, and source\n\nForum threads\n\n- 2007-12-04 - Arch Linux - dzen & xmobar Hacking Thread\n\n"
    }
  ]
}