{
  "title": "Mouse polling rate",
  "url": "https://wiki.archlinux.org/title/Mouse_polling_rate",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Mouse acceleration\n- Mouse buttons\n\nIf you have invested in a high resolution mouse, adjusting the USB polling rate is a common trick to utilize the added precision it brings. The polling rate (or report rate) determines how often the mouse sends information to your computer.\n\n"
    },
    {
      "title": "Polling rate and polling interval",
      "level": 2,
      "content": "The polling rate of a device is measured in Hertz (Hz) and is determined by the polling interval. The polling interval is measured in milliseconds (ms) or microseconds and equates to lag time.\n\nThe default polling interval is 10ms. However, USB controllers round the interval down to the nearest power of two. Thus, an interval setting of 10ms will actually use 8ms, 7ms will use 4ms, etc.\n\nIf the polling rate is 125 Hz, the mouse position will be updated every 8 milliseconds. In situations where lag is critical — for example games — some users decrease the interval to as little as possible. However, this puts more load on the CPU, so care should be taken when adjusting this value.\n\nFor the USB 2.0 High Speed and USB 3.0+ devices are able to poll in intervals smaller that 1 millisecond - in such case kernel will report polling interval in microseconds.\n\nThe following table shows the relation between polling rate Hertz and the corresponding interval milliseconds (rate = 1000 / interval) and microseconds (rate = 1000000 / interval):\n\nTable content:\nHz | 8000 | 4000 | 2000 | 1000 | 500 | 250 | 125\nms | 0.125 | 0.25 | 0.5 | 1 | 2 | 4 | 8\nus | 125 | 250 | 500 | 1000 | 2000 | 4000 | 8000\n\n"
    },
    {
      "title": "Measure polling rate via libinput",
      "level": 3,
      "content": "In case libinput is used on the host, one can use the libinput debug-events while running as root or otherwise having access to the /dev pseudo file system) and observe that events happen periodically. For example, for a 500 Hz mouse polling rate one can see maximum difference between two consecutive events being 0.002 seconds, for 1000 Hz updates each millisecond (so 0.001 seconds), and for the polling rates higher, the reported events may occur at the same millisecond.\n\n```\n# libinput debug-events\n```\n\nFor 500 Hz:\n\n```\nevent22  POINTER_MOTION          +10.918s\t  1.22/  1.22 ( +1.00/ +1.00)\nevent22  POINTER_MOTION          +10.920s\t  0.00/  1.22 ( +0.00/ +1.00)\nevent22  POINTER_MOTION          +10.922s\t  0.00/  1.12 ( +0.00/ +1.00)\nevent22  POINTER_MOTION          +10.924s\t  1.25/  1.25 ( +1.00/ +1.00)\n```\n\nFor 1000 Hz:\n\n```\nevent18  POINTER_MOTION          +0.235s\t -1.87/ -1.87 ( -1.00/ -1.00)\nevent18  POINTER_MOTION          +0.236s\t -1.87/  0.00 ( -1.00/ +0.00)\nevent18  POINTER_MOTION          +0.237s\t -1.66/  0.00 ( -1.00/ +0.00)\nevent18  POINTER_MOTION          +0.238s\t -1.66/  0.00 ( -1.00/ +0.00)\n```\n\nFor 2000 Hz:\n\n```\nevent22  POINTER_MOTION          +14.114s\t -2.00/  0.00 ( -1.00/ +0.00)\nevent22  POINTER_MOTION          +14.114s\t -2.00/  0.00 ( -1.00/ +0.00)\nevent22  POINTER_MOTION          +14.115s\t  0.00/ -2.00 ( +0.00/ -1.00)\nevent22  POINTER_MOTION          +14.115s\t -2.00/  0.00 ( -1.00/ +0.00)\n```\n\n"
    },
    {
      "title": "Measure polling rate via evhz",
      "level": 3,
      "content": "The evhz tool can display the actual mouse refresh rate.\n\nYou can install it from evhz-gitAUR and execute as root:\n\n```\n# evhz\n```\n\nNow move the mouse continuously in large circles until the displayed Average stabilizes then press Ctrl+c to exit.\n\nIf the Latest value does not stabilize and switches between two values, then the attempted polling rate is faster than the device is capable of; see #USB device speed.\n\n"
    },
    {
      "title": "Measure polling rate via Wine+DirectX",
      "level": 3,
      "content": "Alternatively, Windows tools such as DirectX mouserate checker can be run using Wine. Or use a website based checker like the one provided by CPS-Check.\n\n"
    },
    {
      "title": "Display polling interval",
      "level": 2,
      "content": "Device information including polling interval can be found in debugfs if it is mounted and you have root access.\n\nFirst, find the vendor and product IDs of your device with:\n\n```\n$ lsusb\n```\n\n```\nBus 001 Device 002: ID 045e:0024 Microsoft Corp. Trackball Explorer\nBus 001 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub\n```\n\nThen run the following as root with those IDs to display the debug information for that device:\n\n```\n# grep -B3 -A6 \"045e.*0024\" /sys/kernel/debug/usb/devices\n```\n\n```\nT:  Bus=01 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  2 Spd=1.5  MxCh= 0\nD:  Ver= 1.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1\nP:  Vendor=045e ProdID=0024 Rev= 1.21\nS:  Manufacturer=Microsoft\nS:  Product=Microsoft Trackball Explorer®\nC:* #Ifs= 1 Cfg#= 1 Atr=a0 MxPwr=100mA\nI:* If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=01 Prot=02 Driver=usbhid\nE:  Ad=81(I) Atr=03(Int.) MxPS=   4 Ivl=10ms\n```\n\nThe Ivl is the polling interval; this device has requested 10ms (and actually reports every 8ms as explained in #Polling rate and polling interval). The Spd is the device speed explained in #USB device speed. For information about the other fields, see the kernel documentation.\n\nIf debugfs or root access are not available, the polling interval can be shown with:\n\n```\n$ lsusb -vd 045e:0024 | grep bInterval\n```\n\n```\nbInterval 10\n```\n\n"
    },
    {
      "title": "USB device speed",
      "level": 2,
      "content": "USB devices are designed to operate at a certain bitrate. Many pointing devices are \"Low Speed\" 1.5Mbit/s devices. The speed of a device can be shown as explained in #Display polling interval.\n\n\"Low Speed\" devices may not be capable of polling at intervals less than 8ms.\n\nAll USB hubs should be capable of at least \"Full Speed\" 12Mbit/s. The speed of the hub that the device is attached to can be shown with the following command with the same Bus=xx as the device:\n\n```\n# grep -B1 -A10 \"Bus=01 Lev=00\" /sys/kernel/debug/usb/devices\n```\n\n```\nT:  Bus=01 Lev=00 Prnt=00 Port=00 Cnt=00 Dev#=  1 Spd=12   MxCh= 2\nB:  Alloc= 11/900 us ( 1%), #Int=  1, #Iso=  0\nD:  Ver= 1.10 Cls=09(hub  ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1\nP:  Vendor=1d6b ProdID=0001 Rev= 4.01\nS:  Manufacturer=Linux 4.1.18-1-lts uhci_hcd\nS:  Product=UHCI Host Controller\nS:  SerialNumber=0000:00:10.0\nC:* #Ifs= 1 Cfg#= 1 Atr=e0 MxPwr=  0mA\nI:* If#= 0 Alt= 0 #EPs= 1 Cls=09(hub  ) Sub=00 Prot=00 Driver=hub\nE:  Ad=81(I) Atr=03(Int.) MxPS=   2 Ivl=255ms\n```\n\nThe Ivl of the hub is independent of the device and does not affect the polling rate of the device.\n\n"
    },
    {
      "title": "Set polling interval",
      "level": 2,
      "content": "To configure the polling rate, use the mousepoll option of the usbhid kernel module. The default value is 0 which means the module uses the interval requested by the device(s).\n\nThe current value of the option can be verified with:\n\n```\n$ systool -m usbhid -A mousepoll\n```\n\n```\nModule = \"usbhid\"\n    mousepoll           = \"0\"\n```\n\nTo change the configuration, add the following kernel module parameter:\n\n```\noptions usbhid mousepoll=4\n```\n\nThis example requests a polling rate of 250Hz. Similarly, you may use jspoll or kbpoll to change the polling rate of gamepads/joysticks or keyboards.\n\nTo change the polling interval without rebooting:\n\n```\n# modprobe -r usbhid && modprobe usbhid mousepoll=4\n```\n\nYou may have to unplug the mouse and plug it back in for the change to take effect.\n\n"
    },
    {
      "title": "Polling at half of requested rate",
      "level": 3,
      "content": "There is a kernel bug that for certain configurations prevents devices from reaching 1000 Hz (1ms) polling rate. See the BBS and Bug.\n\nA work-around that may help is to connect the device to a port using a different driver.\n\n"
    },
    {
      "title": "Polling rate not changing",
      "level": 3,
      "content": "The USB 3 driver xhci-hcd may be ignoring the usbhid mousepoll setting. See the linux-usb mailing list message and Bug.\n\nThe xhci-hcd module should respect the interval requested by the device, so check the documentation for the device for a hardware or firmware setting.\n\nA work-around that may help is to connect the device to a port using a different driver.\n\nAnother work-around is to disable xHCI. There might be a BIOS setting for this or you can do so by blacklisting the xhci-hcd module. However, either way will cause any USB 3 ports to act as USB 2 as the kernel will use the ehci-hcd module instead.\n\nAs an alternative, one can install a kernel module wmo_oc-dkmsAUR (or build it manually from wmo_oc-kmod), which is a fork of gcadapter-oc-kmod for wmo1.1a (MS Wheel Mouse Optical 1.1a). The wmo_oc-dkms identifies a mouse with its vendor and product ID (VID:PID) values to overclock it even with XHCI hubs, without losing USB 3 functionality. Changing the polling rate of any USB mouse other than the default wmo1.1a requires modifying the default VID:PID values (045e:0040) found in the module's source file wmo_oc.c in /usr/src/module_name/ and finally rebuilding (removing and installing) the kernel module using DKMS. The polling rate of the wmc_oc module can be configured by editing the source, or with a runtime option e.g. a .conf file in /etc/modprobe.d/:\n\n```\noptions wmc_oc rate=2\n```\n\nThe example above would set an interval of 2ms, or 500Hz.\n\n"
    },
    {
      "title": "Polling rate resulting in lag with wine",
      "level": 3,
      "content": "Having a mouse with a high poll rate and using wine can result in game lag; see Wine bug 46976. It would seem that the user who created that bug had the problem solved by updating the bios. The bug, however, is not resolved for other users.\n\nIt is not possible to change the polling rate of the mouse using the methods within this wiki (the \"usbhid\" method) if your computer only has a USB3 xHCI Controller.\n\nUnfortunately, there is currently no fix for users with a combination of a mouse with a high polling rate and only a USB3 xHCI Controller.\n\nA workaround is to use a mouse with a lower polling rate.\n\n"
    },
    {
      "title": "Polling rates higher than 1000 Hz",
      "level": 3,
      "content": "Make sure the device is connected to a USB slot supporting at least USB 2.0 High Speed. Polling rates higher than 1 kHz are only supported starting with USB 2.0 High Speed. This will allow the device \"to be polled\" at a higher rate.\n\n"
    },
    {
      "title": "Logitech mice with onboard memory",
      "level": 3,
      "content": "Certain Logitech mice can store the polling rate among other parameters in their built-in onboard memory. If onboard memory is enabled, it can be configured with solaar. This may not work if onboard memory has been disabled. The Logitech G HUB software for Windows and MacOS tends to disable onboard memory to allow for more advanced customisations handled by the software itself. If the onboard memory is disabled, the mouse will default to a 125 Hz polling rate and ignore the usbhid mousepoll setting.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- CS:S Mouse Optimization Guide — largely aimed at Windows users, though the same principles apply for Linux.\n\n"
    }
  ]
}