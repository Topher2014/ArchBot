{
  "title": "Runit",
  "url": "https://wiki.archlinux.org/title/Runit",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- init\n\nRunit is a process supervisor. It includes runit-init, which can replace sysv's init as pid1, or can be run from inittab or your init system of choice. Runit's simple collection of tools can be used to build flexible dependency structures and distributed systems, or blazing fast parallel runlevel changes (including the initial boot). Runit can be used as a simple process supervisor, see the #User Services for an example.\n\n"
    },
    {
      "title": "Using BusyBox's implementation",
      "level": 4,
      "content": "BusyBox provides a minimal implementation of runit that can be used for simple processing supervision needs. First, create symbolic links to the BusyBox binary for the necessary tools that are going to be needed:\n\n```\n# busybox --list | awk '/^runsv|^chpst$|^sv/' | xargs -I{} ln -sv /usr/bin/busybox /usr/local/bin/{}\n```\n\nAfterwards, a systemd unit file can be created in order to run BusyBox's runit when needed:\n\n```\n/etc/systemd/system/busybox-runit.service\n```\n\n```\n[Unit]\nDescription=Runit service supervision - BusyBox implementation\nDocumentation=man:busybox(1) https://smarden.org/runit/\n\n[Service]\nEnvironment=\"PATH=/usr/local/sbin:/usr/local/bin:/usr/bin\"\nExecStart=/usr/local/bin/runsvdir -P /var/service\nKillSignal=SIGHUP\nKillMode=process\nRestart=always\nSuccessExitStatus=111\n\n[Install]\nWantedBy=multi-user.target\n```\n\n```\n${XDG_CONFIG_HOME:-$HOME/.config}/systemd/user/busybox-runit.service\n```\n\n```\n[Unit]\nDescription=Runit service supervision - BusyBox implementation\nDocumentation=man:busybox(1) https://smarden.org/runit/\n\n[Service]\nEnvironment=\"HOME=%h\" \"PATH=/usr/local/sbin:/usr/local/bin:/usr/bin\"\nExecStart=/usr/local/bin/runsvdir -P %h/service\nKillSignal=SIGHUP\nKillMode=process\nRestart=always\nSuccessExitStatus=111\n\n[Install]\nWantedBy=default.target\n```\n\n- This example unit file presupposes that the directory which is going to contain the enabled services is /var/service for the system instance or $HOME/service for user instance. This path can be changed according to each specific use case.\n- The SIGHUP kill signal is used instead of the default SIGTERM, and only on the main runsvdir process (thanks to KillMode=process) so that processes being controlled by BusyBox's runit implementation are controllably stopped by runsvdir before terminating the supervisor. When runsvdir ends the processes that are being supervised after receiving a SIGHUP signal, it exits with an status code of 111, which needs to be interpreted as a success.\n\nBe sure to create the directory which is going to be supervised by runsvdir according to the systemd unit file created. It is also recommended to create a directory in which runit services can be stored (usually /etc/sv), and only enabled when needed by creating a symbolic link directed to them from the directory being supervised. See #General use for more details.\n\nWhen everything is correctly configured, busybox-runit.service can be enabled and started.\n\n"
    },
    {
      "title": "Using standard runit",
      "level": 4,
      "content": "It is possible to use runit as a simple process supervisor alongside the default Arch Linux's init system (systemd). For this purpose, install runit-systemdAUR, which provides a barebones runit installation without any stage scripts (/etc/runit/{1..3}) or runlevels (/etc/runit/runsvdir/*), which are generally only useful when using runit as the init system. The package provides a directory (/var/service) in which the desired runit services can be put and a systemd unit which starts runit monitoring that directory. Only the services configured in /var/service will be supervised by runit. Just enable and start runit.service.\n\n"
    },
    {
      "title": "The tools",
      "level": 3,
      "content": "- sv - used for controlling services, getting status of services, and dependency checking.\n- chpst - control of a process environment, including memory caps, limits on cores, data segments, environments, user/group privileges, and more.\n- runsv - supervises a process, and optionally a log service for that process.\n- svlogd - a simple but powerful logger, includes auto-rotation based on different methods (time, size, etc), post-processing, pattern matching, and socket (remote logging) options. Say goodbye to logrotate and the need to stop your services to rotate logs.\n- runsvchdir - changes service levels (runlevels, see below).\n- runsvdir - starts a supervision tree\n\nSee the manpages for usage details not covered below.\n\n"
    },
    {
      "title": "Run levels and service directories",
      "level": 3,
      "content": "Runit uses directories of symlinks to specify runlevels, other than the 3 main ones, which are defined in /etc/runit/1, 2, and 3.\n\n1 bootstraps the system, 2 starts runsvdir on /service, and 3 stops the system.\n\nWhile in run level 2, you are not constrained to any amount of service levels (equivalent to runlevels in sysvinit). You can runschdir to any directory (full of service directory symlinks) you have made in /etc/runit/runsvdir/. This becomes very handy in cases where you have an HA (Failover) setup, and you have one machine that can take over services for many other machines, simply by runsvchdir <theservicedir>.\n\nYou can also run trees of dependent service levels by having user-level supervision directories. See User Level Services below.\n\nBy default, the runit-run package uses a very minimal service set, defined in /etc/runit/runsvdir/archlinux-default and symlinked to /etc/runit/runsvdir/default.\n\nIt only gives gettys on tty2 and tty3, so you will boot to just console scroll and a tidy 'runsvchdir: default: current'. This means when you start X it will be on tty4.\n\nTo go back to the standard arch consoles, remove the link /service/ngetty and link as many /etc/sv/*getty* services you like in /service, or edit the /etc/sv/ngetty/run file to get more getties. Better yet, create your own directory in /etc/runit/runsvdir and add the symlinks you want for just the services you desire. Remember to take any services you start with runit out of DAEMONS in /etc/rc.conf or systemctl disable them, they do not need to be started there, and runit will allow parallel startup without backgrounding them.\n\n"
    },
    {
      "title": "General use",
      "level": 3,
      "content": "In this explanation, /var/service is the chosen service directory being supervised by runsvdir and /etc/sv is the chosen directory for containing the services that can be enabled.\n\n- Listing running services:\n\n```\n# sv status /var/service/*\nrun: /var/service/agetty-2: (pid 4120) 7998s\nrun: /var/service/agetty-3: (pid 4119) 7998s\nrun: /var/service/bougyman: (pid 4465) 7972s\nrun: /var/service/bougyx: (pid 4135) 7998s; run: log: (pid 4127) 7998s\nrun: /var/service/cron: (pid 4137) 7998s; run: log: (pid 4122) 7998s\nrun: /var/service/dialer: (pid 4121) 7998s\nrun: /var/service/qmail: (pid 4138) 7998s; run: log: (pid 4126) 7998s\nrun: /var/service/smtpd: (pid 4136) 7998s; run: log: (pid 4125) 7998s\nrun: /var/service/socklog-klog: (pid 4139) 7998s; run: log: (pid 4132) 7998s\nrun: /var/service/socklog-unix: (pid 4133) 7998s; run: log: (pid 4124) 7998s\nrun: /var/service/ssh: (pid 4134) 7998s; run: log: (pid 4123) 7998s\n```\n\n- Create and start a service:\n\n```\n# ln -s /etc/sv/ssh /var/service/ssh\n```\n\n- Stops a service immediately (would still start on next boot):\n\n```\n# sv down /var/service/ssh\n```\n\n- Starts a service which has been previously stopped, or which is configured to not start automatically:\n\n```\n# sv up /var/service/ssh\n```\n\n- Restarts a service:\n\n```\n# sv restart /var/service/ssh\n```\n\n- Reloads a service:\n\n```\n# sv reload /var/service/ssh\n```\n\n- Shows status of a service and its log service:\n\n```\n# sv status /var/service/ssh\n```\n\n- Stops a service, and disables it (will not start next boot):\n\n```\n# rm /var/service/ssh\n```\n\n"
    },
    {
      "title": "User Services",
      "level": 2,
      "content": "There are two ways of creating a user supervision tree: using a Systemd/User service or with runit itself. See #Using BusyBox's implementation for an example systemd user service. To use runit itself refer to the section in the Voidlinux Handbook.\n\n"
    },
    {
      "title": "Example Service",
      "level": 3,
      "content": "Create a directory where you will keep your services.\n\n```\n$ mkdir -p ~/.config/sv\n```\n\nCreate a directory for your service.\n\n```\n$ mkdir ~/.config/sv/mpd\n```\n\nCreate a run file in the service directory. You can find example run files in runit's site\n\n```\n$HOME/.config/sv/mpd/run\n```\n\n```\n#!/bin/sh\nMPDCONF=${XDG_CONFIG_HOME:-$HOME/.config}/mpd/mpd.conf\nexec mpd --no-daemon $MPDCONF\n```\n\nMake it executable.\n\nTo enable the service make a symlink to your service directory. This will make the service start automatically when the runit starts. The service should start immediately.\n\n```\n$ ln -s ~/.config/sv/mpd ~/service/mpd\n```\n\nTo stop the service:\n\n```\n$ SVDIR=~/service sv down mpd   # or\n$ sv down ~/service/mpd\n```\n\nTo start the service again:\n\n```\n$ SVDIR=~/service sv up mpd   # or\n$ sv up ~/service/mpd\n```\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Runit's Homepage. G Pape's runit homepage.\n- Voidlinux Handbook - Services and Daemons - runit. The section in the Voidlinux Handbook about runit.\n\n"
    }
  ]
}