{
  "title": "Rebuilderd",
  "url": "https://wiki.archlinux.org/title/Rebuilderd",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Rebuilderd is an independent verification system for binary packages. It allows verification of pre-compiled packages by repeating the build step in an identical environment and then verifies that the package is identical. Right now only Arch Linux packages can be verified.\n\nIf you run a rebuilder or consider running a rebuilder feel free to join the #archlinux-reproducible IRC channel.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the rebuilderd package.\n\n"
    },
    {
      "title": "Single machine",
      "level": 3,
      "content": "On a single machine you just enable rebuilderd.service and the worker service(s): rebuilderd-worker@workername.service.\n\nAfterwards you can verify rebuilderd is correctly running with a single worker by running:\n\n```\n# rebuildctl status\n```\n\nIf you get an error that no authentication cookie could be found, you might need to add yourself to the rebuilderd user group.\n\nContinue with the next section to sync packages that our worker can rebuild.\n\n"
    },
    {
      "title": "Multi-node rebuilder",
      "level": 3,
      "content": "To run a multi-node rebuilder network we need at least two servers:\n\nThe worker needs to authenticate itself to the daemon with a secret signup key (worker.signup_secret). This key can be generated with pwgen -1s 32.\n\nYou can also generate a second secret to use rebuildctl remotely (auth.cookie). This is optional, you can also run rebuildctl on the server after adding yourself to the rebuilderd group.\n\n```\n/etc/rebuilderd.conf\n```\n\n```\n## Configuration for http daemon\n[http]\n## The address to bind to. This is 127.0.0.1:8484 by default.\nbind_addr = \"0.0.0.0:8484\"\n## If you use a reverse proxy, use this header instead of the actual connecting ip.\n## Make sure the reverse proxy has filters in place to prevent spoofing issues.\n#real_ip_header = \"X-Real-IP\"\n## Set a default endpoint for rebuildctl. This is especially useful for the sync timer.\n#endpoint = \"http://127.0.0.1:8484\"\n\n## A random cookie for administration is generated at startup and written to /var/lib/rebuilderd/auth-cookie\n## You can set this to a fixed value here. Use `pwgen -1s 32` to generate one.\n## rebuildctl is searching for this cookie in ~/.config/rebuilderd.conf, /etc/rebuilderd.conf and\n## /var/lib/rebuilderd/auth-cookie in that order.\n#[auth]\n#cookie = \"INSECURE\"\n\n## The auth cookie above is only used for the default endpoint.\n## You can use different endpoints with `rebuildctl -H https://rebuilder.example.com status`,\n## In that case you need to configure a section below if you want to attach a cookie.\n#[endpoints.\"https://rebuilder.example.com\"]\n#cookie = \"INSECURE\"\n\n## IMPORTANT: in production, make sure either `authorized_workers` or `signup_secret` is configured.\n[worker]\n## If we have a fixed set of workers we can allow-list the keys here.\n#authorized_workers = [\"key1\", \"key2\"]\n## If we want to spawn new workers dynamically we can configure a sign up secret below.\n## Use `pwgen -1s 32` to generate one.\nsignup_secret = \"INSECURE\"\n\n#[schedule]\n## Configure the delay to automatically retry failed rebuilds in hours. The\n## default is 24h, this base is multiplied with the number of rebuilds, so the\n## first retry would happen after 24h, the second retry would happen 48h after the\n## first retry and the third retry would happen 72h after the second retry. There\n## is no upper limit of retries, if you can't afford frequent retries it's\n## recommended to set this to a high value like 168 (1 week) or higher.\n## Successful rebuilds are not retried.\n#retry_delay_base = 24\n```\n\nStart and enable rebuilderd.service.\n\nNext we head over to our worker machines to set them up. Install rebuilderd as well and edit /etc/rebuilderd-worker.conf:\n\n```\n/etc/rebuilderd-worker.conf\n```\n\n```\n## The rebuilderd to connect to\nendpoint = \"https://rebuilder.example.com\" # or http://rebuilder.example.com:8484\n## The server would either allowlist our key or require a signup secret\nsignup_secret = \"INSECURE-CHANGE-ME\"\n\n[build]\n#timeout = 86400 # 24 hours\n## Set a maximum build log limit in bytes (default: none).\n## When reaching this limit the log is truncated but the rebuilder backend is *not* terminated.\nmax_bytes = 10485760 # 10 MiB\n## By default build output is forwarded to stdout/stderr.\n## This can be disabled by settings this to true.\n#silent = true\n\n[diffoscope]\n## Generate and attach diffs with diffoscope when rebuilding\nenabled = true\n## Pass additional arguments to diffoscope. Use wisely, some options might not work well.\n#args = [\"--max-container-depth\", \"2\", \"--fuzzy-threshold\", \"0\"]\n## Set a timeout in seconds after which diffoscope is terminated (default: 3600)\n#timeout = 600 # 10 minutes\n## Set a maximum diffoscope output limit in bytes (default: none).\n## When reaching this limit, diffoscope is terminated and the output is truncated.\nmax_bytes = 41943040 # 40 MiB\n```\n\nWe can start the worker unit multiple times for concurrent rebuilds (if the machine has enough resources). We are going to start with just one worker (and call it 0) by starting/enabling rebuilderd-worker@0.service\n\n"
    },
    {
      "title": "Syncing packages to rebuild",
      "level": 2,
      "content": "The rebuilder setup will not do anything by default until you explicitly configure where to sync packages from. The sync profiles are configured in /etc/rebuilderd-sync.conf. The profile names are supposed to be unique. You configure it to only build packages of a specific maintainer with the maintainer option. By default it is importing packages of all maintainers.\n\n```\n## rebuild all of core\n[profile.\"archlinux-core\"]\ndistro = \"archlinux\"\nsuite = \"core\"\narchitecture = \"x86_64\"\nsource = \"https://ftp.halifax.rwth-aachen.de/archlinux/$repo/os/$arch\"\n\n## rebuild extra packages of specific maintainers, or whitelist packages by name.\n## If no filter is set, all packages are imported, if both filters are set the package only\n## has to match one of them to be included.\n#[profile.\"archlinux-extra\"]\n#distro = \"archlinux\"\n#suite = \"extra\"\n#architecture = \"x86_64\"\n#source = \"https://ftp.halifax.rwth-aachen.de/archlinux/$repo/os/$arch\"\n#maintainers = [\"somebody\"]\n#pkgs = [\"some-pkg\", \"python-*\"]\n#excludes = [\"tensorflow*\"]\n```\n\nAfterwards you can enable rebuilderd-sync@archlinux-core.timer to automatically sync the profile.\n\n"
    },
    {
      "title": "Ansible playbook",
      "level": 2,
      "content": "An Ansible playbook with a rebuilderd role can be found in Arch Linux's infastructure repository. Use this as inspiration as the Ansible repository is heavily dependent on how the Arch Linux infrastructure is set up.\n\n"
    },
    {
      "title": "Requeueing failed builds",
      "level": 3,
      "content": "Starting with rebuilderd 0.5.0 failed builds are retried automatically with increasing delays. You can retry packages immediately with:\n\n```\n# rebuildctl pkgs requeue --suite core --status BAD\n```\n\nIn older versions you had to use this command to add all failed builds to the queue again:\n\n```\n# rebuildctl pkgs ls --distro archlinux --suite core --status BAD --json | jq -r '.[].name' | xargs -L1 rebuildctl queue push archlinux core\n```\n\n"
    },
    {
      "title": "Removing suites after being synced",
      "level": 3,
      "content": "Currently, using rebuildctl is not possible to remove whole suites after they have been synced once. However, this can be achieved by setting a filter that does not match on any packages before removing the sync profile. For example, adding the following maintainers filter will effectively remove the core suite from rebuilderd.\n\n```\n[profile.\"archlinux-core\"]\ndistro = \"archlinux\"\nsuite = \"core\"\narchitecture = \"x86_64\"\nsource = \"https://ftp.halifax.rwth-aachen.de/archlinux/$repo/os/$arch\"\nmaintainers = [\"nonexistent\"]\n```\n\n"
    },
    {
      "title": "Package rebuilders",
      "level": 3,
      "content": "Rebuilders using Rebuilderd.\n\nTable content:\nURL | Contact | Comment\nhttps://reproducible.archlinux.org/ | jelle | \nhttps://wolfpit.net/rebuild/ | wahrwolf | \nhttps://r-b.engineering.nyu.edu/ | NYU Secure Systems Lab\nhttps://rebuilder.pitastrudl.me/[dead link 2025-03-15 â“˜] | pitastrudl | Contact on IRC Libera or pitastrudl@chaos.social\nhttps://reproducible.crypto-lab.ch/ | Applied Cyber Security Research Lab (HSLU) | Contact iyanmv on #archlinux-reproducible\n\n"
    }
  ]
}