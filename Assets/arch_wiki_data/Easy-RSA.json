{
  "title": "Easy-RSA",
  "url": "https://wiki.archlinux.org/title/Easy-RSA",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "The first step when setting up OpenVPN is to create a Public Key Infrastructure (PKI). In summary, this consists of:\n\n- A public master Certificate Authority (CA) certificate and a private key.\n- A separate public certificate and private key pair for each server.\n- A separate public certificate and private key pair for each client.\n\nOne can think of the key-based authentication in terms similar to that of how SSH keys work with the added layer of a signing authority (the CA). OpenVPN relies on a bidirectional authentication strategy, so the client must authenticate the server's certificate and in parallel, the server must authenticate the client's certificate. This is accomplished by the 3rd party's signature (the CA) on both the client and server certificates. Once this is established, further checks are performed before the authentication is complete. For more details, see secure-computing's guide.\n\n- The process outlined below requires users to securely transfer private key files to/from machines. For the purposes of this guide, using scp is shown, but readers may employ alternative methods as well. Since the Arch default is to deny the root user over ssh, using scp requires transferring ownership of the files to be exported to a non-root user called archie throughout the guide.\n- Avoid generating keys on devices without a good entropy source. See [1]. Sometimes, cryptographically secure pseudorandom number generators can be used.\n\n"
    },
    {
      "title": "Certificate Authority (CA)",
      "level": 2,
      "content": "For security purposes, it is recommended that the CA machine be separate from the machine running OpenVPN.\n\nOn the CA machine, install easy-rsa, initialize a new PKI and generate a CA keypair that will be used to sign certificates:\n\n```\n# cd /root\n# export EASYRSA=/etc/easy-rsa\n# easyrsa init-pki\n# easyrsa build-ca\n```\n\nStarting from OpenVPN 2.4, one can also use elliptic curves for TLS connections (e.g. tls-cipher TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384). Elliptic curve cryptography provides more security and eliminates the need for a Diffie-Hellman parameters file. See [2] and [3].\n\nAppend the following lines to /etc/easy-rsa/vars:\n\n```\n/etc/easy-rsa/vars\n```\n\n```\nset_var EASYRSA_DIGEST \"sha512\"  # Default sha256\nset_var EASYRSA_NS_SUPPORT \"yes\" # for Netscape compatibility, deprecated\n```\n\nFor elliptic curve:\n\n```\n/etc/easy-rsa/vars\n```\n\n```\nset_var EASYRSA_ALGO ec\nset_var EASYRSA_CURVE secp521r1\n```\n\nor for Twisted Edwards curve:\n\n```\n/etc/easy-rsa/vars\n```\n\n```\nset_var EASYRSA_ALGO  ed\nset_var EASYRSA_CURVE ed25519\n```\n\nNow set up PKI and generate a CA certificate:\n\n```\n# cd /root\n# export EASYRSA=/etc/easy-rsa\n# export EASYRSA_VARS_FILE=/etc/easy-rsa/vars\n# easyrsa init-pki\n# easyrsa build-ca\n```\n\n"
    },
    {
      "title": "OpenVPN server files",
      "level": 2,
      "content": "A functional OpenVPN server requires the following:\n\n1. The CA's public certificate\n1. The Diffie-Hellman (DH) parameters file (required by TLS mode when not using TLS with elliptic curves).\n1. The server key pair (a public certificate and a private key).\n1. The Hash-based Message Authentication Code (HMAC) key.\n\nUpon completing the steps outlined in this article, users will have generated the following files on the server:\n\n1. /etc/openvpn/server/ca.crt\n1. /etc/openvpn/server/dh.pem (not when using TLS with elliptic curves)\n1. /etc/openvpn/server/servername.crt and /etc/openvpn/server/servername.key\n1. /etc/openvpn/server/ta.key\n\n"
    },
    {
      "title": "CA public certificate",
      "level": 3,
      "content": "The CA public certificate /etc/easy-rsa/pki/ca.crt generated in the previous step needs to be copied over to the machine that will be running OpenVPN.\n\nOn the CA machine:\n\n```\n# scp /etc/easy-rsa/pki/ca.crt archie@hostname-of-openvpn-server:/tmp/ca.crt\n```\n\nOn the OpenVPN server machine:\n\n```\n# mv /tmp/ca.crt /etc/openvpn/server/\n# chown openvpn:network /etc/openvpn/server/ca.crt\n```\n\n"
    },
    {
      "title": "Server certificate and private key",
      "level": 3,
      "content": "On the OpenVPN server machine, install easy-rsa and generate a key pair for the server:\n\n```\n# cd /etc/easy-rsa\n# easyrsa init-pki\n# easyrsa gen-req servername nopass\n# cp /etc/easy-rsa/pki/private/servername.key /etc/openvpn/server/\n```\n\nThis will create two files:\n\n- /etc/easy-rsa/pki/reqs/servername.req\n- /etc/easy-rsa/pki/private/servername.key\n\n"
    },
    {
      "title": "Diffie-Hellman (DH) parameters file",
      "level": 3,
      "content": "On the OpenVPN server machine, create the initial dh.pem file:\n\n```\n# openssl dhparam -out /etc/openvpn/server/dh.pem 2048\n```\n\n"
    },
    {
      "title": "Hash-based Message Authentication Code (HMAC) key",
      "level": 3,
      "content": "On the OpenVPN server machine, create the HMAC key:\n\n```\n# openvpn --genkey secret /etc/openvpn/server/ta.key\n# chown openvpn:network /etc/openvpn/server/ta.key\n```\n\nIf elliptic curve is used, the HMAC key is generated with the following command:\n\n```\n# openvpn --genkey tls-auth /etc/openvpn/server/ta.key\n# chown openvpn:network /etc/openvpn/server/ta.key\n```\n\nThis will be used to add an additional HMAC signature to all SSL/TLS handshake packets. In addition any UDP packet not having the correct HMAC signature will be immediately dropped, protecting against:\n\n- Portscanning.\n- DOS attacks on the OpenVPN UDP port.\n- SSL/TLS handshake initiations from unauthorized machines.\n- Any eventual buffer overflow vulnerabilities in the SSL/TLS implementation.\n\n"
    },
    {
      "title": "Client certificate and private key",
      "level": 3,
      "content": "Any machine can generate client files provided that easy-rsa is installed.\n\nIf the pki is not initialized, do so via:\n\n```\n# cd /etc/easy-rsa\n# easyrsa init-pki\n```\n\nNote: Else it is possible not to use the Environmental Variables and use the corresponding options instead, eg.\n\n```\n# export EASYRSA=$(pwd)\n# export EASYRSA_VARS_FILE=/etc/easy-rsa/vars\n```\n\nElse it is possible not to use the Environmental Variables and use the corresponding options instead, eg.\n\n```\n# easyrsa --use-algo=ec --curve=secp521r1 --digest=sha512 init-pki\n```\n\nGenerate the client key and certificate:\n\n```\n# cd /etc/easy-rsa\n# easyrsa gen-req client1 nopass\n```\n\nThis will create two files:\n\n- /etc/easy-rsa/pki/reqs/client1.req\n- /etc/easy-rsa/pki/private/client1.key\n\nThe gen-req set can be repeated as many times as needed for additional clients.\n\n"
    },
    {
      "title": "Obtain and sign the certificates on the CA",
      "level": 3,
      "content": "The server and client(s) certificates need to be signed by the CA then transferred back to the OpenVPN server/client(s).\n\nOn the OpenVPN server (or the box used to generate the certificate/key pairs):\n\n```\n# cp /etc/easy-rsa/pki/reqs/*.req /tmp\n# chown archie /tmp/*.req\n```\n\nSecurely transfer the files to the CA machine for signing:\n\n```\n$ scp /tmp/*.req archie@hostname-of-CA:/tmp\n```\n\nOn the CA machine, import and sign the certificate requests:\n\n```\n# cd /etc/easy-rsa\n# easyrsa import-req /tmp/servername.req servername\n# easyrsa import-req /tmp/client1.req client1\n# easyrsa sign-req server servername\n# easyrsa sign-req client client1\n```\n\nThis will create the following signed certificates which can be transferred back to their respective machines:\n\n- /etc/easy-rsa/pki/issued/servername.crt\n- /etc/easy-rsa/pki/issued/client1.crt\n\nThe leftover .req files can be safely deleted:\n\n```\n# rm -f /tmp/*.req\n```\n\n"
    },
    {
      "title": "Pass the signed certificates back to the server and client(s)",
      "level": 3,
      "content": "On the CA machine, copy the signed certificates and transfer them to the server/client(s):\n\n```\n# cp /etc/easy-rsa/pki/issued/*.crt /tmp\n# chown archie /tmp/*.crt\n$ scp /tmp/*.crt archie@hostname-of-openvpn_server:/tmp\n```\n\nOn the OpenVPN server, move the certificates in place and reassign ownership. For the server:\n\n```\n# mv /tmp/servername.crt /etc/openvpn/server/\n# chown openvpn:network /etc/openvpn/server/servername.crt\n```\n\nFor the client:\n\n```\n# mv /tmp/clientname.crt /etc/openvpn/client/\n# chown openvpn:network /etc/openvpn/client/clientname.crt\n```\n\nThat is it. To generate the client profile. See: OpenVPN#ovpngen.\n\n"
    },
    {
      "title": "Revoke a certificate",
      "level": 3,
      "content": "Over time, it may become necessary to revoke a certificate thus denying access to the affected user(s). This example revokes the \"client1\" certificate.\n\nOn the CA machine:\n\n```\n# cd /etc/easy-rsa\n# easyrsa revoke client1\n# easyrsa gen-crl\n```\n\nThis will produce the CRL file /etc/easy-rsa/pki/crl.pem that needs to be transferred to the OpenVPN server and made active there.\n\n"
    },
    {
      "title": "Alert the OpenVPN server",
      "level": 3,
      "content": "On the CA machine:\n\n```\n# cp /etc/easy-rsa/pki/crl.pem /tmp\n# chown archie /tmp/crl.pem\n```\n\nOn the OpenVPN machine, copy crl.pem and inform the server to read it:\n\n```\n# mv /tmp/crl.pem /etc/openvpn/server/\n# chown openvpn:network /etc/openvpn/server/crl.pem\n```\n\nEdit /etc/openvpn/server/server.conf uncommenting the crl-verify directive, then restart openvpn-server@server.service to re-read it:\n\n```\n/etc/openvpn/server/server.conf\n```\n\n```\n.\ncrl-verify /etc/openvpn/server/crl.pem\n.\n```\n\n"
    },
    {
      "title": "Abbreviated example specifically for containerized Openvpn",
      "level": 2,
      "content": "This section is specifically for users wanting to run Openvpn in a Linux container (LXC). The code below is designed to be pasted into a root shell; the standard hash has been omitted to allow for easy copy/paste operations. It is recommended to have two different shell windows open, one for the host and one for the container.\n\n- It is assumed that the CA machine is the host and the server machine is the container.\n- Both the host and container need to have both openvpn and easy-rsa installed.\n- The container needs to be running.\n- Define the name of the container in the CONTAINERNAME variable below.\n\nOn the host:\n\n```\nCONTAINERNAME=foo\n/etc/easy-rsa\neasyrsa init-pki && easyrsa build-ca\ncp /etc/easy-rsa/pki/ca.crt /var/lib/lxc/$CONTAINERNAME/rootfs/etc/openvpn/server/\n```\n\nIn the container:\n\n```\ncd /etc/easy-rsa && easyrsa init-pki\nfor i in server client; do easyrsa gen-req $i nopass; done\ncp /etc/easy-rsa/pki/private/server.key /etc/openvpn/server/\nopenssl dhparam -out /etc/openvpn/server/dh.pem 2048\nopenvpn --genkey secret /etc/openvpn/server/ta.key\n```\n\nBack on the host:\n\n```\neasyrsa import-req /var/lib/lxc/$CONTAINERNAME/rootfs/etc/easy-rsa/pki/reqs/junk.req junk\neasyrsa import-req /var/lib/lxc/$CONTAINERNAME/rootfs/etc/easy-rsa/pki/reqs/client.req client\neasyrsa sign-req client client\neasyrsa sign-req server server\nmkdir /var/lib/lxc/$CONTAINERNAME/rootfs/etc/easy-rsa/pki/issued/\nmkdir /var/lib/lxc/$CONTAINERNAME/rootfs/etc/easy-rsa/pki/signed/\ncp /etc/easy-rsa/pki/issued/*.crt /var/lib/lxc/$CONTAINERNAME/rootfs/etc/easy-rsa/pki/issued/\n```\n\nThat will provide the needed files to make an OpenVPN compatible tunnel profile for the client, and the needed server key files for the server. To generate a client profile, refer to OpenVPN#ovpngen.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- README.quickstart.\n- EASYRSA-Advanced.\n\n"
    }
  ]
}