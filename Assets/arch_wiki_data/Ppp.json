{
  "title": "Ppp",
  "url": "https://wiki.archlinux.org/title/Ppp",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "ppp (Paul's PPP Package) is an open source package which implements the point-to-point protocol (PPP) on Linux and Solaris systems. It is implemented as single pppd daemon and acts as backend for xl2tpd, pptpd and netctl. 3G, L2TP and PPPoE connections are internally based on PPP protocol and therefore can be managed by ppp.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install the ppp package.\n\n"
    },
    {
      "title": "PPPoE",
      "level": 3,
      "content": "Create the connection configuration file:\n\n```\n/etc/ppp/peers/your_provider\n```\n\n```\nplugin pppoe.so\n# pppoe-ac \"your ac name\"\n# pppoe-service \"your service name\"\n\n# network interface\neth0\n# login name\nname \"someloginname\"\nusepeerdns\npersist\n# Uncomment this if you want to enable dial on demand\n#demand\n#idle 180\ndefaultroute\nhide-password\nnoauth\n```\n\nIf usepeerdns option is used, pppd will create the /etc/ppp/resolv.conf file with obtained DNS addresses while establishing a connection. By default, the /etc/ppp/ip-up.d/00-dns.sh hook script moves this file to /etc/resolv.conf, allowing the system to use these name servers. If this is undesirable (e.g. you are using a local caching DNS), edit the /etc/ppp/ip-up.d/00-dns.sh as you need.\n\nPut a line like this in /etc/ppp/pap-secrets or /etc/ppp/chap-secrets as required by the authentication method used by your ISP.\n\nChap should always be preferred, when possible, if aiming at security (to understand how chap works see this), however it is OK to write these two files at the same time, pppd will automatically use the appropriate one:\n\n```\nsomeloginname * yourpassword\n```\n\nYou can now start the link using the command:\n\n```\n# pppd call your_provider\n```\n\nAlternatively, you can use this\n\n```\n# pon your_provider\n```\n\nwhere your_provider is the exact name of your options file in /etc/ppp/peers.\n\nTo see whether your PPPoE connection is started correctly, check the pppd output in system logs:\n\n```\n# journalctl -b /usr/bin/pppd\n```\n\nOn a successful connection, you will see something like the following:\n\n```\nJul 09 22:42:33 localhost pppd[239]: Plugin pppoe.so loaded.\nJul 09 22:42:33 localhost pppd[239]: PPPoE plugin from pppd 2.5.2\nJul 09 22:42:33 localhost pppd[239]: pppd 2.5.2 started by root, uid 0\nJul 09 22:42:39 localhost pppd[239]: PPP session is 292\nJul 09 22:42:39 localhost pppd[239]: Connected to a0:f3:e4:4f:e3:b0 via interface enp4s0\nJul 09 22:42:39 localhost pppd[239]: Using interface ppp0\nJul 09 22:42:39 localhost pppd[239]: Connect: ppp0 <--> enp4s0\nJul 09 22:42:39 localhost pppd[239]: CHAP authentication succeeded: CHAP authentication success\nJul 09 22:42:39 localhost pppd[239]: CHAP authentication succeeded\nJul 09 22:42:39 localhost pppd[239]: peer from calling number A0:F3:E4:4F:E3:B0 authorized\nJul 09 22:42:39 localhost pppd[239]: Cannot determine ethernet address for proxy ARP\nJul 09 22:42:39 localhost pppd[239]: local  IP address 10.6.2.137\nJul 09 22:42:39 localhost pppd[239]: remote IP address 10.6.1.1\nJul 09 22:42:39 localhost pppd[239]: primary   DNS address 10.6.1.1\nJul 09 22:42:39 localhost pppd[239]: secondary DNS address 210.21.196.6\n```\n\nBy default the configuration in /etc/ppp/peers/provider is treated as the default, so if you want to make \"your_provider\" the default, you can create a link like this\n\n```\n# ln -s /etc/ppp/peers/your_provider /etc/ppp/peers/provider\n```\n\nNow you can start the link by simply running:\n\n```\n# pon\n```\n\nTo close a connection, use this\n\n```\n# poff your_provider\n```\n\n"
    },
    {
      "title": "Using NetworkManager (nmcli)",
      "level": 3,
      "content": "On systems using NetworkManager, you can use nmcli to configure a PPoE connection:\n\n```\nnmcli con edit type pppoe con-name \"<Connection Name>\"\nnmcli> set pppoe.username <username>\nnmcli> set pppoe.password <password>\nnmcli> set connection.autoconnect <yes/no>\nnmcli> save\nnmcli> quit\n```\n\n"
    },
    {
      "title": "Easy wizard configuration",
      "level": 3,
      "content": "pppconfigAUR provides a dialog interface to create pppd configuration easily. The usage is as simple as running pppconfig as root and it will guide the configuration creation.\n\n```\n# pppconfig --dialog\n```\n\nThe resulting configuration can be called using pon and discarded using poff as mentioned before.\n\n"
    },
    {
      "title": "Starting pppd on boot",
      "level": 3,
      "content": "- Configure the ppp_generic module to load on boot. See Kernel module#systemd for more information.\n- Enable the systemd service ppp@your_provider.service.\n\n"
    },
    {
      "title": "Do an auto redial",
      "level": 3,
      "content": "If pppd is running, you can force a connection reset by sending the SIGHUP signal to the process:\n\n```\n# export PPPD_PID=$(pidof pppd)\n# kill -s HUP $PPPD_PID\n```\n\nAnd you have redialed the connection.\n\n"
    },
    {
      "title": "Using cron",
      "level": 4,
      "content": "As root, do the following:\n\nCreate a bash script similar to this and give it a name (e.g. pppd_redial.sh):\n\n```\n#!/bin/bash\n\nmessage=\"Restarting the PPP connection @:\" $(date)\npppd_id=$(pidof pppd)\n\nkill -s HUP $pppd_id\necho $message\n```\n\nGive it execute permissions and put it on a path visible to root.\n\nThen create a cron job using crontab -e. Check that your EDITOR env variable is set if the command fails. So add anywhere in the file,\n\n```\n0 4 * * * /bin/bash /root/pppd_redial.sh\n```\n\nConfirm that cronie service is up and running. If this is not the case, just enable and start it.\n\nSave and exit. Your PPPoE connection will now restart every day at 4AM.\n\n"
    },
    {
      "title": "Using a systemd timer",
      "level": 4,
      "content": "An alternative way to force a reconnect is using a systemd timer and the poff script (in particular its -r option). Simply create a .service and .timer files with the same name:\n\n```\nppp-redial.timer\n```\n\n```\n[Unit]\nDescription=Reconnect PPP connections daily\n\n[Timer]\nOnCalendar=*-*-* 05:00:00\n\n[Install]\nWantedBy=multi-user.target\n```\n\n```\nppp-redial.service\n```\n\n```\n[Unit]\nDescription=Reconnect PPP connections\n\n[Service]\nType=simple\nExecStart=/usr/bin/poff -r\n```\n\nNow just enable and start the timer and systemd will cause a restart at the specified time.\n\n"
    },
    {
      "title": "Default route",
      "level": 3,
      "content": "If you have a preconfigured default route before the pppd is started, the default route is kept, so take a look in /var/log/errors.log and if you have something like:\n\n```\npppd[nnnn]: not replacing existing default route via xxx.xxx.xxx.xxx\n```\n\nand xxx.xxx.xxx.xxx is not the correct route for you\n\n- Create a new script in /etc/ppp/ip-pre-up.d with this content:\n\n```\n/etc/ppp/ip-pre-up.d/10-route-del-default.sh\n```\n\n```\n#!/bin/sh\n/usr/bin/route del default\n```\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\n- Restart the pppd service.\n\n"
    },
    {
      "title": "Masquerading seems to be working fine but some sites do not work",
      "level": 3,
      "content": "The MTU under pppoe is 1492 bytes. Most sites use an MTU of 1500. So your connection sends an ICMP 3:4 (fragmentation needed) packet, asking for a smaller MTU, but some sites have their firewall blocking that.\n\nEnabling the PMTU clamping in iptables can solve that:\n\n```\niptables -I FORWARD -o ppp0 -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu\n```\n\nNow, for some reason, just trying to save the resulting iptables configuration with iptables-save and restoring it later, does not work. It has to be executed after the other iptables configuration had been loaded. So, here is a systemd unit to solve it:\n\n```\npmtu-clamping.service\n```\n\n```\n[Unit]\nDescription=PMTU clamping for pppoe\nRequires=iptables.service\nAfter=iptables.service\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/iptables -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu\n\n[Install]\nWantedBy=multi-user.target\n```\n\nAnd enable it.\n\n"
    },
    {
      "title": "pppd cannot load kernel module ppp_generic",
      "level": 3,
      "content": "When starting PPTP client, the pppd process cannot locate the appropriate module:\n\n```\nCouldn't open the /dev/ppp device: No such device or address\nPlease load the ppp_generic kernel module.\n```\n\nThe solution is to create a /etc/modprobe.d/ppp.conf file with:\n\n```\nalias char-major-108 ppp_generic\n```\n\nThe correct module will be loaded after reboot.\n\n"
    }
  ]
}