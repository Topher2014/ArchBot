{
  "title": "Acer Chromebook 14 CB3-431 (Edgar)",
  "url": "https://wiki.archlinux.org/title/Acer_Chromebook_14_CB3-431_(Edgar)",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Note: **This article or section does not follow the Laptop page guidelines.** This article or section does not follow the Laptop page guidelines.\n\nThis article or section does not follow the Laptop page guidelines.\n\nThe following article briefly explains all necessary procedures to install a fully-functional Arch Linux configuration on the Acer Chromebook 14 cb3-431 (Edgar).\n\n"
    },
    {
      "title": "Option with SeaBios",
      "level": 3,
      "content": "Write Protection does not have to be voided to follow the guideline of using SeaBios.\n\n"
    },
    {
      "title": "Option with coreboot",
      "level": 3,
      "content": "An another option would be by using the third party coreboot Script where you need to disable write protection by removing the screws nearby the wifi chip and battery which are market with a white arrow first.\n\n"
    },
    {
      "title": "Developer Mode",
      "level": 2,
      "content": "Prior to the installation, certain actions must be taken to grant bios reading permission on unsigned installation mediums. This includes enabling Developer Mode, and flashing a custom SeaBios or coreboot.\n\nEnabling Developer Mode:\n\n1. Enter recovery mode by pressing the power button while holding down Esc+F3 (Refresh).\n1. Once greeted in recovery mode (large yellow exclamation mark) press Ctrl+d.\n1. You will be prompted for confirmation, press enter to confirm developer mode.\n1. The device will reset and greet the user with a warning screen on every boot, that can be skipped by pressing Ctrl+d.\n\n"
    },
    {
      "title": "Flashing a custom SeaBios",
      "level": 2,
      "content": "See Chrome OS devices/Custom firmware#Flashing the custom firmware.\n\nSelect option 1 to Install RW_LEGACY, permitting booting from an external installation media from SeaBios.\n\nBefore selecting the reboot option and proceeding to the next part, ensure a USB flash installation medium is inserted.\n\n"
    },
    {
      "title": "Flashing with the Coreboot Script",
      "level": 2,
      "content": "Download the file with cd;curl -LO mrchromebox.tech/firmware-util.sh , view it: cat firmware-util.sh , and run the script sudo install -Dt /usr/local/bin -m 755 firmware-util.sh && sudo firmware-util.sh to execute the script. Choose the option of\n\n```\nInstall/Update UEFI (FUll ROM) Firmware\n```\n\nWhen the installation is finished you can reboot, where you have UEFI with coreboot.\n\n"
    },
    {
      "title": "Using SeaBios",
      "level": 4,
      "content": "During the white \"OS verification disabled\" screen, toggle Ctrl+l to enter SeaBios. Then press the Esc key to load the boot menu, and select your external installation media.\n\nUnless the installation media runs on a Linux version 4.8.14 or prior, the internal keyboard, sound, and trackpad will not function during the installation. From this point on, proceed with the official Arch Linux Installation Guide.\n\n"
    },
    {
      "title": "Using Coreboot",
      "level": 4,
      "content": "In default it would boot into UEFI if you have no OS which supports UEFI on the drive which includes ChromeOS. In UEFI you can select the USB flash installation medium.\n\n"
    },
    {
      "title": "Post installation",
      "level": 3,
      "content": "Unless RW protection has been voided and SeaBios has been set to boot as default, booting into grub is only possible by toggling Ctrl+l during the white \"OS verification disabled\" screen on boot.\n\n"
    },
    {
      "title": "Sound",
      "level": 3,
      "content": "See Sound Open Firmware.\n\n"
    },
    {
      "title": "Internal Keyboard",
      "level": 3,
      "content": "The internal keyboard should be fully functional when using the latest kernel, with the exception of the top row hotkeys which are mapped to the function keys by default. See Chrome OS devices#Hotkeys for methods to implement the Chrome OS keyboard hotkeys.\n\n"
    },
    {
      "title": "Trackpad",
      "level": 3,
      "content": "To fix trackpad pressure sensitivity issues for the xf86-input-synaptics driver, add the following configuration file under /etc/X11/xorg.conf.d/10-synaptics.conf\n\n```\n/etc/X11/xorg.conf.d/10-synaptics.conf\n```\n\n```\nSection \"InputClass\"\n\tIdentifier \"touchpad catchall\"\n\tDriver \"synaptics\"\n\tMatchIsTouchpad \"on\"\n\tMatchDevicePath \"/dev/input/event*\"\n\tOption \"FingerLow\" \"1\"\n\tOption \"FingerHigh\" \"5\"\nEndSection\n```\n\nTo fix trackpad sensitivity issues when using the libinput driver, add the following local device quirk under /etc/libinput/local-overrides.quirks\n\n```\n/etc/libinput/local-overrides.quirks\n```\n\n```\n[Touchpad pressure override]\nMatchUdevType=touchpad\nMatchName=*Elan Touchpad\nMatchDMIModalias=dmi:*svnGOOGLE:*pnEdgar*\nAttrPressureRange=4:3\n```\n\nAfter the XServer has been restarted, the changes will take place.\n\nWhen using hibernation (Suspend and hibernate#Hibernation) an issue may be encountered where the module required for the touchpad elan_i2c is not loaded on resuming, meaning that the touchpad will not be operable. A workaround for this is to enable the required module during the initramfs stage.\n\n```\n/etc/mkinitcpio.conf\n```\n\n```\nMODULES=(... elan_i2c ...)\n```\n\nAfter the recreating the initramfs image and rebooting the touchpad should now be working on resuming from hibernation.\n\n"
    }
  ]
}