{
  "title": "Initiative for Open Authentication",
  "url": "https://wiki.archlinux.org/title/Initiative_for_Open_Authentication",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- U2F\n- Data-at-rest encryption\n- Google Authenticator\n- identity management\n- Yubikey\n- pam_oath\n- pass\n\nThe Initiative for Open Authentication (OATH) is an industry-wide collaboration to develop an open reference architecture using open standards to promote the adoption of strong authentication. They publish the standard which Google Authenticator and other common 2-factor applications use.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "The following packages can be used to generate, transfer, and validate OATH credentials:\n\n- oath-toolkit - Takes credentials and generates codes. Includes a PAM module for user authentication. See pam_oath.\n- libpam-google-authenticator - Offers a client program google-authenticator for generating new credentials and a PAM module for user authentication. See Google Authenticator.\n- pass-otp - Adds OATH support to pass\n- zbar - Decodes QR codes\n- qrencode - Encodes QR codes\n\n"
    },
    {
      "title": "Standards",
      "level": 2,
      "content": "OATH has created two standards of significance to an Arch user, both based on a Base32-encoded shared secret of arbitrary length:\n\n"
    },
    {
      "title": "URI credential format",
      "level": 2,
      "content": "Credentials are usually shared in a QR-encoded URI format. All fields must be URI-encoded strings:\n\n```\notpauth://TYPE/LABEL?PARAMETERS\n```\n\n- secret - required; this is the Base32 shared secret.\n- issuer - Indicates the provider or service the account is associated with. If this is absent, the issuer prefix of the label will be used. If both are present, they should be equal.\n- algorithm - SHA1 by default. Can also be SHA256 or SHA512.\n- digits - How long passcodes should be. Default is 6, can be 8.\n- counter - Required if using HOTP. Initial counter value.\n- period - Optional if using TOTP. Sets how long a code is valid, 30 seconds by default.\n\nHere is an example:\n\n```\notpauth://totp/Example%20Company:alice@google.com?secret=JBSWY3DPEHPK3PXP&issuer=Example%20Company\n         |type|  issuer prefix  |    account     |         secret        |     issuer            |\n              |               label              |                  parameters                   |\n```\n\n"
    },
    {
      "title": "Decode QR codes",
      "level": 3,
      "content": "This can be accomplished with tools from zbar. Decode a PNG file:\n\n```\n$ zbarimg my_qr_code.png --quiet --raw\n```\n\nDecode images from a camera:\n\n```\n$ zbarcam /dev/video0\n```\n\n"
    },
    {
      "title": "Create QR codes",
      "level": 3,
      "content": "The qrencode package is useful here.\n\nEncode a URI, save it as a PNG:\n\n```\n$ qrencode -o my_code.png 'MY_URI'\n```\n\nEncode a URI, print a QR code to the terminal:\n\n```\n$ qrencode -t ansiutf8 'MY_URI'\n```\n\n"
    },
    {
      "title": "Generate keys",
      "level": 3,
      "content": "To generate your own key in the proper format, you can use something like the following:\n\n```\n$ head -c 16 /dev/urandom | base32 --wrap 0\n```\n\n"
    },
    {
      "title": "Generate OTPs from the command line",
      "level": 3,
      "content": "Use oathtool(1) from oath-toolkit:\n\n```\n$ oathtool --base32 --totp KEY\n```\n\nMany password managers, including pass and KeePass also offer support for generating these codes.\n\n"
    },
    {
      "title": "Linux User authentication with PAM",
      "level": 3,
      "content": "See either pam_oath or Google Authenticator.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Standard specifications\n- URI format reference\n- QR and barcode decoder - Do not enter actual credentials here.\n- QR code tester (archive.org) - Do not enter actual credentials here.\n\n"
    }
  ]
}