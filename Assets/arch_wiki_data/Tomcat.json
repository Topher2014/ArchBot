{
  "title": "Tomcat",
  "url": "https://wiki.archlinux.org/title/Tomcat",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Tomcat is an open source Java Servlet container developed by the Apache Software Foundation.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "Install one of tomcat8, tomcat9, or tomcat10.\n\nIf deploying Tomcat onto a production environment, consider installing tomcat-native. The native library for Tomcat configures the server to use the Apache Portable Runtime (APR) library's network connection (socket) and RNG implementations. It uses native 32- or 64-bit code to enhance performance and is sometimes used in production environments where speed is crucial. No configuration is necessary for default Tomcat installations. More information is available in the official Tomcat docs.\n\nUsing tomcat-native will remove the following warning in catalina.err:\n\n```\nINFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path [...]\n```\n\n"
    },
    {
      "title": "Filesystem hierarchy",
      "level": 3,
      "content": "Replace the n with your installed version (8, 9, 10).\n\nTable content:\nPathname | Use\n/etc/tomcatn | Configuration files. Among some: tomcat-users.xml (defines users allowed to use administration tools and their roles), server.xml (Main Tomcat configuration file), catalina.policy (security policies configuration file)\n/usr/share/tomcatn | Main Tomcat folder containing scripts and links to other directories\n/usr/share/java/tomcatn | Tomcat Java libraries (jars)\n/var/log/tomcatn | Log files not handled by systemd (see #Logging)\n/var/lib/tomcatn/webapps | Where Tomcat deploys your web applications\n/var/tmp/tomcatn | Where Tomcat store your webapps' data\n\n"
    },
    {
      "title": "Initial configuration",
      "level": 2,
      "content": "In order to be able to use the manager webapp and the admin webapp, you need to edit /etc/tomcatn/tomcat-users.xml.\n\nUncomment the \"role and user\" XML declaration and modify it to enable roles tomcat, admin-gui, admin-script and/or manager-gui, manager-script, manager-jmx, manager-status, depending on your needs (see Configuring Manager Application Access). To keep it short, tomcat is the mandatory role used to run, manager-* are roles able to administer web applications and admin-* are full right administrator roles on the Tomcat server.\n\nHere is a bare configuration file that declares some of these roles along with usernames and passwords (be sure to change the following [CHANGE_ME] passwords to something secure):\n\n```\n/etc/tomcatn/tomcat-users.xml\n```\n\n```\n<?xml version='1.0' encoding='utf-8'?>\n<tomcat-users>\n  <role rolename=\"tomcat\"/>\n  <role rolename=\"manager-gui\"/>\n  <role rolename=\"manager-script\"/>\n  <role rolename=\"manager-jmx\"/>\n  <role rolename=\"manager-status\"/>\n  <role rolename=\"admin-gui\"/>\n  <role rolename=\"admin-script\"/>\n  <user username=\"tomcat\" password=\"[CHANGE_ME]\" roles=\"tomcat\"/>\n  <user username=\"manager\" password=\"[CHANGE_ME]\" roles=\"manager-gui,manager-script,manager-jmx,manager-status\"/>\n  <user username=\"admin\" password=\"[CHANGE_ME]\" roles=\"admin-gui\"/>\n</tomcat-users>\n```\n\nKeep in mind that Tomcat must be restarted each time a modification is made to this file.\n\nThis blog post gives a good description of these roles.\n\nTo have read permissions on the configuration files and work well with some IDEs, you must add your user to the tomcatn user group.\n\n"
    },
    {
      "title": "Start/stop Tomcat",
      "level": 2,
      "content": "Start the tomcatn.service.\n\nOnce Tomcat is started, you can visit this page to see the result: http://localhost:8080. If a nice Tomcat local home page is displayed, this means your Servlet container is up and running and ready to host you web apps. If the startup script failed or you can only see a Java error displayed in you browser, have a look at startup logs using systemd's journalctl. Google is full of answers on recurrent issues found in Tomcat logs.\n\nNote: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\n"
    },
    {
      "title": "Alternate \"manual\" way",
      "level": 3,
      "content": "Tomcat can also be controlled directly using upstream scripts:\n\n```\n/usr/share/tomcat/bin/{startup.sh,shutdown.sh,..}\n```\n\nThis can be useful to debug applications or even debug Tomcat, but do not use it to start Tomcat for the first time as doing so can set some permissions wrongly and stop web apps from working. In order to be able to use these scripts, some further configuration may be needed. Be aware that using these scripts prevents the jsvc security advantage described above.\n\n"
    },
    {
      "title": "Deploy and handle web applications",
      "level": 2,
      "content": "Tomcat is bundled with 5 already deployed web applications (change localhost with your server's FQDN if needed):\n\n- The default home page: http://localhost:8080/\n- Tomcat's local documentation: http://localhost:8080/docs/\n- Examples of Servlets and JSP: http://localhost:8080/examples/\n- The host-manager to handle virtual hosts: http://localhost:8080/host-manager/\n- The manager to administer web applications: http://localhost:8080/manager/html/\n\n"
    },
    {
      "title": "The GUI way",
      "level": 3,
      "content": "Probably the easiest way is to use the manager webapp http://localhost:8080/manager/html. Use the username/password you defined as manager in tomcat-users.xml. Once logged in, you can see five already deployed web applications. Add yours through the \"Deploy\" area and then stop/start/undeploy it with the \"Applications\" area.\n\n"
    },
    {
      "title": "The CLI way",
      "level": 3,
      "content": "One can also just copy the WAR file of the application to directory /usr/share/tomcatn/webapps. For that later, be sure that the autoDeploy option is still set for the right host as shown here:\n\n```\n/etc/tomcatn/server.xml\n```\n\n```\n...\n<Host name=\"localhost\"  appBase=\"webapps\"\n      unpackWARs=\"true\" autoDeploy=\"true\">\n...\n```\n\nOtherwise simply restart the tomcat service.\n\n"
    },
    {
      "title": "Hosting files outside the webapps folder",
      "level": 3,
      "content": "If you want to keep your project outside the webapps folder, this is possible by creating a Context. Go to /etc/tomcatn/Catalina/localhost/ and create your context. A context is a simple xml file which specifies where tomcat should look for the project. The basic format of the file is:\n\n```\n/etc/tomcatn/Catalina/localhost/whatShouldFollowLocalhost.xml\n```\n\n```\n<Context path=\"/whatSholdFollwLocalhost\" docBase=\"/where/your/project/is/\" reloadable=\"true\"/>\n```\n\nA working example is as follows. This assumes that the project is hosted somewhere in the users /home-folder.\n\n```\n/etc/tomcatn/Catalina/localhost/myProject.xml\n```\n\n```\n<Context path=\"/myProject\" docBase=\"/home/archie/code/jsp/myProject\" reloadable=\"true\"/>\n```\n\nThe files can now be hosted in /home/archie/code/jsp/myProject/. To see the project in your webbrowser, go to http://localhost:8080/myProject. If tomcat is unable to load the files, it might be an issue with permissions. Making /home/archie/code/jsp/myProject executable should fix the issue.\n\n"
    },
    {
      "title": "Logging",
      "level": 2,
      "content": "Tomcat when used with official Arch Linux packages uses systemd's journalctl for startup log. This means that files /var/log/tomcatn/catalina.err and /var/log/tomcatn/catalina.out are not used. Other logs such as access logs and business logs defined in /etc/tomcatn/server.xml as Valve will still by default end up in /var/log/tomcatn/.\n\nTo restore upstream style logging, use a drop-in file to change both SYSLOG for the absolute paths of log files.\n\n"
    },
    {
      "title": "Further setup",
      "level": 2,
      "content": "Basic configuration can be made through the virtual host manager web application: http://localhost:8080/host-manager/html. Provide the username/password you set in tomcat-users.xml. Other options are tweaked in configuration files in /etc/tomcatn, the most important being server.xml. Using these files is out of the scope of this 101 wiki page. Please have a look at the latest official Tomcat documentation for more details.\n\n"
    },
    {
      "title": "Migrating from previous versions of Tomcat",
      "level": 3,
      "content": "As said in the introduction, Tomcat 10 does not deprecate Tomcat 9, Tomcat 9 does not deprecate Tomcat 8 and so on. They all are implementations of Servlet/JSP standards. Hence you must first determine which version of Tomcat you need depending on the versions of Servlet/JSP your application uses. If you need to migrate, the official website gives instructions on how to handle such a process.\n\n"
    },
    {
      "title": "Using Tomcat with a different JRE/JDK",
      "level": 3,
      "content": "Apart from installing the desired JRE/JDK, the only requirement is to set the TOMCAT_JAVA_HOME variable with a drop-in file:\n\n```\n/etc/systemd/system/tomcatn.service.d/start.conf\n```\n\n```\n[Service]\nEnvironment=TOMCAT_JAVA_HOME=/usr/lib/jvm/java-8-openjdk\n```\n\n"
    },
    {
      "title": "Security configuration",
      "level": 3,
      "content": "Note: **This article or section is out of date.** This article or section is out of date.\n\nThis article or section is out of date.\n\nThis page gives the bare minimum to get your first web application to run on Tomcat. It is not intended to be the definitive guide to administering Tomcat (it is a job of its own). The official Tomcat website will provide all necessary official matter. One could also refer to this O'Reilly page and this unidata one. Still, here are some security tips to get you started:\n\n- Keep your Tomcat installation up to date to get the latest fixes to security issues\n- Remove unwanted default applications such as examples, docs, default home page ROOT (\"_\" in the manager webapp). This prevents potential security holes to be exploited. Use the manager for that.\n\nFor more security, you could even remove the host-manager and manager web applications. Keep in mind that the later is useful to deploy web applications.\n\n- Disable the WAR auto-deploy option. This would prevent someone who gained restricted access to the server to copy a WAR into the /usr/share/java/webapps directory to get it running. Edit server.xml and set the autoDeploy to false:\n\n```\n/etc/tomcatn/server.xml\n```\n\n```\n...\n<Host name=\"localhost\"  appBase=\"webapps\"\n      unpackWARs=\"true\" autoDeploy=\"false\">\n...\n```\n\n- Anonymize Tomcat's default error page to prevent potential attackers to retrieve Tomcat's version. To see what Tomcat says by default, just visit an nonexistent page such as http://localhost:8080/I_dont_exist. You get a 404 error page with Tomcat's version at the bottom.\n\nTo anonymize this, edit/open the following JAR (Editors like vim can edit zips directly)\n\n```\n/usr/share/tomcatn/lib/catalina.jar\n```\n\nAnd edit the following file:\n\n```\norg/apache/catalina/util/ServerInfo.properties\n```\n\n```\n...\nserver.info=\nserver.number=\nserver.built=\n...\n```\n\n- Disable unused connectors in server.xml\n- Keep restricted access to /etc/tomcatn/server.xml. Only tomcat user and/or root should be able to read and write this.\n- Keep jsvc usage. Do not use upstream startup scripts unless particular reason as explained in the security note above.\n- Use strong different passwords for each user in tomcat-users.xml, give roles to users who really need them and even disable usernames/roles you do not use/need.\n\nOne can even crypt tomcat-users.xml passwords using the following upstream script:\n\n```\n/usr/share/tomcatn/bin/digest.sh -a sha-512 -h org.apache.catalina.realm.MessageDigestCredentialHandler NEW_PASSWORD\n```\n\nThis will output something like:\n\n```\nNEW_PASSWORD:58adca01951a24aebce28f4d7a759aa30ef2f38bc54e41e51071c257ed4a1a9b$1$b4ccaafa86c26dea13825d35da73f9d11ce63f5deae15a13aafb835bdaf710d38922843c8065f35f245a20b1d2df9b20ddf2c005990512c598a62514f78cf3d2\n```\n\nPaste the hashed part in place of the clear password in tomcat-users.xml and add the following to server.xml:\n\n```\n/etc/tomcatn/server.xml\n```\n\n```\n<Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\">\n               <CredentialHandler className=\"org.apache.catalina.realm.MessageDigestCredentialHandler\"\n                                  algorithm=\"sha-512\"/>\n        </Realm>\n      </Realm>\n  ...\n/>\n```\n\nNote that this may not be relevant because only root and/or tomcat is supposed to have read/write access to that file. If an intruder manages to gain root access, they would not need such passwords to mess with your applications/data anyway. Be sure to keep restricted read and write access to that file, and always know what you are deploying!\n\n"
    },
    {
      "title": "Tomcat service is started, but page is not loaded",
      "level": 3,
      "content": "First, check /etc/tomcatn/tomcat-users.xml for any syntax error. If everything is fine and tomcatn is correctly running, run journalctl -r as root to check the logs for any exception thrown (see #Logging). If you read anything like java.lang.Exception: Socket bind failed: [98] Address already in use, this is due to some other service listening on the same port. For instance, it is possible that Apache HTTP Server and Tomcat are listening on the same port (if for example you have Apache running on port 8080 with Nginx serving it as a proxy on port 80). If this is the case, edit the /etc/tomcatn/server.xml file and change the Connector port to something else under <Service name=\"Catalina\">:\n\n```\n/etc/tomcatn/server.xml\n```\n\n```\n<?xml version='1.0' encoding='utf-8'?>\n...\n...\n<!-- Change port from 8080 to something else, like 8090 -->\n<Service name=\"Catalina\">\n    <Connector executor=\"tomcatThreadPool\"\n                 port=\"8090\" protocol=\"HTTP/1.1\"\n                 connectionTimeout=\"20000\"\n                 redirectPort=\"8443\" />\n...\n...\n</Service>\n```\n\nFinally, restart tomcatn and httpd services.\n\nIf you have no solution and you are in a VM, it can help to delete /dev/random and create it again (cf. Solution: FUTEX_WAIT hangs Java on Linux / Ubuntu in vmware or virtual box):\n\n```\n# rm /dev/random \n# mknod -m 644 /dev/random c 1 9\n```\n\nOr another solution to keep it even after a reboot is to modify /usr/lib/jvm/java-8-openjdk/jre/lib/security/java.security (for example) to point to /dev/urandom/\n\n"
    }
  ]
}