{
  "title": "Velox",
  "url": "https://wiki.archlinux.org/title/Velox",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- KMS\n- Xorg\n- Screen capture#Wayland\n\nWayland is a display server protocol. It is aimed to become the successor of the X Window System. You can find a comparison between Wayland and Xorg on Wikipedia.\n\nDisplay servers using the Wayland protocol are called compositors because they also act as compositing window managers. Below you can find a list of Wayland compositors.\n\nFor compatibility with native X11 applications to run them seamlessly, Xwayland can be used, which provides an X Server in Wayland.\n\n"
    },
    {
      "title": "Requirements",
      "level": 2,
      "content": "Most Wayland compositors only work on systems using Kernel mode setting. Wayland by itself does not provide a graphical environment; for this you also need a compositor (see the following section), or a desktop environment that includes a compositor (e.g. GNOME or Plasma).\n\nFor the GPU driver and Wayland compositor to be compatible they must support the same buffer API. There are two main APIs: GBM and EGLStreams.\n\nTable content:\nBuffer API | GPU driver support | Wayland compositor support\nGBM | All except NVIDIA < 495* | All\nEGLStreams | NVIDIA | GNOME\n\nSince NVIDIA introduced GBM support, many compositors (including Mutter and KWin) started using it by default for NVIDIA ≥ 495. GBM is generally considered better with wider support, and EGLStreams only had support because NVIDIA did not provide any alternative way to use their GPUs under Wayland with their proprietary drivers. Furthermore, KWin dropped support for EGLStreams after GBM was introduced into NVIDIA.\n\nIf you use a popular desktop environment/compositor and a GPU still supported by NVIDIA, you are most likely already using GBM backend. To check, run journalctl -b 0 --grep \"renderer for\". To force GBM as a backend, set the following environment variables:\n\n```\nGBM_BACKEND=nvidia-drm\n__GLX_VENDOR_LIBRARY_NAME=nvidia\n```\n\n"
    },
    {
      "title": "Compositors",
      "level": 2,
      "content": "See Window manager#Types for the difference between Stacking, Tiling and Dynamic.\n\n"
    },
    {
      "title": "Stacking",
      "level": 3,
      "content": "- Enlightenment — See Enlightenment#Manually. More Info: [2] [3]\n\n- hikari — wlroots-based compositor inspired by cwm which is actively developed on FreeBSD but also supports Linux.\n\n- KDE KWin — See KDE#Starting Plasma.\n\n- Liri Shell — Part of Liri, built using QtQuick and QtCompositor as a compositor for Wayland.\n\n- labwc — wlroots-based compositor inspired by Openbox.\n\n- Mutter — See GNOME#Starting.\n\n- wayfire — 3D compositor inspired by Compiz and based on wlroots.\n\n- Weston — Wayland compositor designed for correctness, reliability, predictability, and performance.\n\n- wio — wlroots-based compositor that aims to replicate the look and feel of Plan 9's Rio desktop.\n\n"
    },
    {
      "title": "Tiling",
      "level": 3,
      "content": "- Cagebreak — Based on cage, inspired by ratpoison.\n\n- miracle-wm — A Wayland compositor based on Mir in the style of i3 and sway with the intention to be flashier and more feature-rich than either, like swayfx.\n\n- niri — A scrollable-tiling Wayland compositor.\n\n- Qtile — A full-featured, hackable tiling window manager and Wayland compositor written and configured in Python.\n\n- Sway — i3-compatible Wayland compositor based on wlroots.\n\n- SwayFx — Sway, but with eye candy!\n\n- Velox — Simple window manager based on swc, inspired by dwm and xmonad.\n\n"
    },
    {
      "title": "Dynamic",
      "level": 3,
      "content": "- dwl — dwm-like Wayland compositor based on wlroots.\n\n- Hyprland — A dynamic tiling Wayland compositor that does not sacrifice on its looks.\n\n- japokwm — Dynamic Wayland tiling compositor based around creating layouts, based on wlroots.\n\n- river — Dynamic tiling Wayland compositor inspired by dwm and bspwm.\n\n- Vivarium — A dynamic tiling Wayland compositor using wlroots, with desktop semantics inspired by xmonad.\n\n"
    },
    {
      "title": "Other",
      "level": 3,
      "content": "- Cage — Displays a single fullscreen application like a kiosk.\n\n- phoc — A tiny wlroots-based compositor for mobile devices.\n\nSome of the above may support display managers. Check /usr/share/wayland-sessions/compositor.desktop to see how they are started.\n\n"
    },
    {
      "title": "Display managers",
      "level": 2,
      "content": "Display managers listed below support launching Wayland compositors.\n\nTable content:\nName | Runs on | Description\nemptty | tty | Simple CLI Display Manager on TTY.\nGDM | Wayland/Xorg | GNOME display manager.\ngreetd | Wayland/Xorg/tty See Greetd#Greeters. | Minimal and flexible login daemon.\nlemurs | tty | TUI display manager written in Rust.\nlidmAUR | tty | A fully colorful customizable TUI display manager made in C.\nLightDM | Xorg[4] | Cross-desktop display manager.\nly | tty | TUI display manager written in C\nSDDM | Wayland/Xorg | QML-based display manager.\ntbsmAUR | tty | Simple CLI session launcher written in pure bash.\nuwsm | tty | Session and XDG autostart manager for standalone compositors. Provides a TUI menu, but can also be used with other display managers.\n\nSee Greetd#Greeters.\n\nXorg[4]\n\nProvides a TUI menu, but can also be used with other display managers.\n\n"
    },
    {
      "title": "Xwayland",
      "level": 2,
      "content": "Xwayland(1) is an X server that runs under Wayland and provides compatibility for native X11 applications that are yet to provide Wayland support. To use it, install the xorg-xwayland package.\n\nXwayland is started via a compositor, so you should check the documentation for your chosen compositor for Xwayland compatibility and instructions on how to start Xwayland.\n\n- Security: Xwayland is an X server, so it does not have the security features of Wayland\n- Performance: Xwayland has a nearly identical performance to that of X11. In some cases you might notice degraded performance, especially on NVIDIA cards.\n- Compatibility: Xwayland is not fully backward compatible with X11. Some applications may not work properly under Xwayland.\n\n"
    },
    {
      "title": "NVIDIA driver",
      "level": 3,
      "content": "Enabling DRM KMS is required. There may be additional information in the official documentation regarding your display manager (e.g. GDM).\n\n"
    },
    {
      "title": "Kwin Wayland debug console",
      "level": 3,
      "content": "If you use kwin, execute the following to see which windows use Xwayland or native Wayland, surfaces, input events, clipboard contents, and more.\n\n```\n$ qdbus6 org.kde.KWin /KWin org.kde.KWin.showDebugConsole\n```\n\n"
    },
    {
      "title": "Detect Xwayland applications",
      "level": 3,
      "content": "To determine whether an application is running via Xwayland, you can run extramausAUR. Move your mouse pointer over the window of an application. If the red mouse moves, the application is running via Xwayland.\n\nAlternatively, you can use xorg-xeyes and see if the eyes are moving, when moving the mouse pointer over an application window.\n\nAnother option is to run xwininfo (from xorg-xwininfo) in a terminal window: when hovering over an Xwayland window the mouse pointer will turn into a + sign. If you click the window it will display some information and end, but it will not do anything with native Wayland windows.You can use Ctrl+C to end it.\n\nYou can also use xlsclients (from the xorg-xlsclients package). To list all applications running via Xwayland, run xlsclients -l.\n\n"
    },
    {
      "title": "GTK",
      "level": 3,
      "content": "The gtk3 and gtk4 packages have the Wayland backend enabled. GTK will default to the Wayland backend, but it is possible to override it to Xwayland by modifying an environment variable: GDK_BACKEND=x11.\n\nFor theming issues, see GTK#Wayland backend.\n\n"
    },
    {
      "title": "Qt",
      "level": 3,
      "content": "To enable Wayland support in Qt 5 or 6, install the qt5-wayland or qt6-wayland package, respectively. Qt applications will then run under Wayland on a Wayland session.\n\nWhile it should not be necessary, to explicitly run a Qt application with the Wayland plugin [5], use -platform wayland or QT_QPA_PLATFORM=wayland environment variable.\n\nTo force the usage of X11 on a Wayland session, use QT_QPA_PLATFORM=xcb.\n\nThis might be necessary for some proprietary applications that do not use the system's implementation of Qt. QT_QPA_PLATFORM=\"wayland;xcb\" allows Qt to use the xcb (X11) plugin instead if Wayland is not available.[6]\n\nNote: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nOn some compositors, for example sway, Qt applications running natively might have missing functionality. For example, KeepassXC will be unable to minimize to tray. This can be solved by installing qt5ct and setting QT_QPA_PLATFORMTHEME=qt5ct before running the application.\n\nDue to the Incorrect sizing and bad text rendering with WebEngine using fractional scaling on Wayland Qt WebEngine bug, applications using Qt WebEngine, for example Calibre, may display jagged fonts. A workaround is launching the application with QT_SCALE_FACTOR_ROUNDING_POLICY=RoundPreferFloor. This prevents the application window being fractional scaled.\n\n"
    },
    {
      "title": "Clutter",
      "level": 3,
      "content": "The Clutter toolkit has a Wayland backend that allows it to run as a Wayland client. The backend is enabled in the clutter package.\n\nTo run a Clutter application on Wayland, set CLUTTER_BACKEND=wayland.\n\n"
    },
    {
      "title": "SDL",
      "level": 3,
      "content": "In SDL3, Wayland is used by default to communicate with the desktop compositor.\n\nTo run an SDL2 application on Wayland, set SDL_VIDEODRIVER=wayland. SDL_VIDEODRIVER=\"wayland,x11\" allows SDL2 to use the x11 video driver instead if Wayland is not available.[7]. You may also want to install libdecor to enable window decorations (for example, on GNOME).\n\nRefer to the official documentation for more details.\n\n"
    },
    {
      "title": "GLFW",
      "level": 3,
      "content": "The glfw package has support for Wayland, and uses the Wayland backend if the environment variable XDG_SESSION_TYPE is set to wayland and the application developer has not set a specific desired backend.\n\nSee the source code for more information.\n\n"
    },
    {
      "title": "GLEW",
      "level": 3,
      "content": "If the glew-wayland-gitAUR package does not work with the needed GLEW-based applications, the option is to use glew with Xwayland. See FS#62713.\n\n"
    },
    {
      "title": "EFL",
      "level": 3,
      "content": "Enlightenment has complete Wayland support.\n\n"
    },
    {
      "title": "winit",
      "level": 3,
      "content": "Winit is a window handling library in Rust. It will default to the Wayland backend, but it is possible to override it to Xwayland by modifying environment variables:\n\n- Prior to version 0.29.2, set WINIT_UNIX_BACKEND=x11\n- For version 0.29.2 and higher, unset WAYLAND_DISPLAY, which forces a fallback to X using the DISPLAY variable. [8]\n\n"
    },
    {
      "title": "Electron",
      "level": 3,
      "content": "Wayland support can be activated either using per-application command line flags or more globally using a configuration file. Refer to #Configuration file for details.\n\nTo determine which electron version the application uses, see [9].\n\n"
    },
    {
      "title": "Environment variable",
      "level": 4,
      "content": "Applications using Electron 28 and higher can use the environment variable ELECTRON_OZONE_PLATFORM_HINT set to auto or wayland.\n\nThis takes lower priority than the command line flags.\n\n"
    },
    {
      "title": "Command line flags",
      "level": 4,
      "content": "Unlike on Chromium which Electron is based on, Electron applications do not enable WebRTC screen capture over PipeWire by default. Using --enable-features=WebRTCPipeWireCapturer is therefore recommended to avoid screen capture problems on Wayland. The capture is based on xdg-desktop-portal.\n\nTo use electron-based applications natively under Wayland when using the environment variable is not desirable or feasible, --ozone-platform-hint=auto can be added on Electron 20+.\n\nA case of missing top bars can be solved by using: --enable-features=WaylandWindowDecorations. This will typically be necessary under GNOME (supported since electron17).\n\nYou can set these flags more permanently by means of modifying the .desktop file of an application and adding the flags to the end of the Exec= line, or more cleanly by using the below-described configuration files.\n\n"
    },
    {
      "title": "Configuration file",
      "level": 4,
      "content": "Electron packages read ~/.config/electronXX-flags.conf files, where XX is Electron version, or fallback to shared ~/.config/electron-flags.conf, if the versioned file is not present.\n\nPut the previously mentioned flags one per line:\n\n```\n~/.config/electron-flags.conf\n```\n\n```\n--enable-features=WaylandWindowDecorations\n--ozone-platform-hint=auto\n```\n\n"
    },
    {
      "title": "Older Electron versions",
      "level": 4,
      "content": "electron25-flags.conf applies only to version 25 of Electron. Older versions of Electron can be configured using their own electron<version>-flags.conf file.\n\nOlder versions may also require different flags, depending on the corresponding Chromium version. For example, the following flags work on Electron 13:\n\n```\n~/.config/electron13-flags.conf\n```\n\n```\n--enable-features=UseOzonePlatform\n--ozone-platform=wayland\n```\n\n"
    },
    {
      "title": "Java",
      "level": 3,
      "content": "The open source implementation of the Java platform OpenJDK, does not yet have native support for Wayland. Until Wakefield, the project that aims to implement Wayland in OpenJDK, is available, Xwayland can be used.\n\nSee Debian:Wayland#Java Programs (supported since OpenJDK 16?):\n\nSince XWayland doesn't have full feature parity with Wayland, WLToolkit can be used to fill the gaps while Wakefield isn't ready. It can be activated with -Dawt.toolkit.name=WLToolkit. Some programs such as the JetBrains IDEs support it.\n\n"
    },
    {
      "title": "Automation",
      "level": 3,
      "content": "- ydotool (ydotool) - Generic command-line automation tool (not limited to wayland). Enable/start the ydotool.service user unit. See ydotoold(8), ydotool(1).\n- wtype (wtype) - xdotool type for wayland. See wtype(1).\n- keyboard - Python library that works on Windows and Linux with experimental OS X support. Also see the mouse library.\n- wlrctl (wlrctlAUR) - A command line utility for miscellaneous wlroots extensions (supports the foreign-toplevel-management, virtual-keyboard, virtual-pointer)\n\n"
    },
    {
      "title": "Remap keyboard or mouse keys",
      "level": 3,
      "content": "See Input remap utilities.\n\n"
    },
    {
      "title": "Screencast Wayland windows with X11 applications",
      "level": 3,
      "content": "See Screen capture#Screencast Wayland windows with X11 applications.\n\n"
    },
    {
      "title": "Chromium does not fully maximize",
      "level": 3,
      "content": "Note: **This article or section is a candidate for moving to Chromium.** This article or section is a candidate for moving to Chromium.\n\nThis article or section is a candidate for moving to Chromium.\n\nYou have to enable Use system title bar and borders via the chrome://settings/appearance menu.\n\n"
    },
    {
      "title": "Persist clipboard after app close",
      "level": 3,
      "content": "Note: **This article or section is a candidate for merging with Clipboard.** This article or section is a candidate for merging with Clipboard.\n\nThis article or section is a candidate for merging with Clipboard.\n\nDue to Wayland's design philosophy, clipboard data is stored in the memory of the source client. When the client closes, the clipboard data is lost. You can solve this using wl-clip-persist, which runs in the background to reads the clipboard data and stores it in its own memory, separate from the source client.\n\n"
    },
    {
      "title": "Autostart wayland compositor as systemd service",
      "level": 3,
      "content": "Note: **The factual accuracy of this article or section is disputed.** The factual accuracy of this article or section is disputed.\n\nThe factual accuracy of this article or section is disputed.\n\nIf you do not want to use a display manager or a shell, you can autostart your Wayland compositor with a systemd service. Adjust the ExecStart line with the compositor you want to use:\n\n```\n/etc/systemd/system/wayland-compositor.service\n```\n\n```\n[Unit]\nAfter=graphical.target systemd-user-sessions.service modprobe@drm.service\nConflicts=getty@tty1.service\n\n[Service]\nUser=username\nWorkingDirectory=~\n\nPAMName=login\nTTYPath=/dev/tty1\nUnsetEnvironment=TERM\n\nStandardOutput=journal\nExecStart=/bin/labwc -s gtklock\n\n[Install]\nWantedBy=graphical.target\n```\n\n"
    },
    {
      "title": "Use another renderer for wlroots based compositor",
      "level": 3,
      "content": "You can use another wlroots renderer such as vulkan by specifying the WLR_RENDERER environment variable for wlroots based compositor. The list of available ones is on the wlroots documentation.\n\n"
    },
    {
      "title": "Color correction",
      "level": 3,
      "content": "See Backlight#Color correction.\n\n"
    },
    {
      "title": "Slow motion, graphical glitches, and crashes",
      "level": 3,
      "content": "Gnome-shell users may experience display issues when they switch to Wayland from X. One of the root cause might be the CLUTTER_PAINT=disable-clipped-redraws:disable-culling set by yourself for Xorg-based gnome-shell. Just try to remove it from /etc/environment or other rc files to see if everything goes back to normal.\n\n"
    },
    {
      "title": "Remote display",
      "level": 3,
      "content": "- wlroots (used by sway) offers a VNC backend via wayvnc since version 0.10. RDP backend has been removed [10].\n- mutter has now remote desktop enabled at compile time, see [11] and gnome-remote-desktop for details.\n- krfb offers a VNC server for kwin. krfb-virtualmonitor can be used to set up another device as an extra monitor.\n- There was a merge of FreeRDP into Weston in 2013, enabled via a compile flag. The weston package has it enabled since version 6.0.0.\n- waypipe (or waypipe-gitAUR) is a transparent proxy for Wayland applications, with a wrapper command to run over SSH Here is an example for launching a remote KDE kcalc under Plasma:\n\n- Here is an example for launching a remote KDE kcalc under Plasma:\n\n```\n$ waypipe ssh example.local env QT_QPA_PLATFORM=wayland-egl QT_QPA_PLATFORMTHEME=KDE dbus-launch kcalc\n```\n\n"
    },
    {
      "title": "Input grabbing in games, remote desktop and VM windows",
      "level": 3,
      "content": "In contrast to Xorg, Wayland does not allow exclusive input device grabbing, also known as active or explicit grab (e.g. keyboard, mouse), instead, it depends on the Wayland compositor to pass keyboard shortcuts and confine the pointer device to the application window.\n\nThis change in input grabbing breaks current applications' behavior, meaning:\n\n- Hotkey combinations and modifiers will be caught by the compositor and will not be sent to remote desktop and virtual machine windows.\n- The mouse pointer will not be restricted to the application's window which might cause a parallax effect where the location of the mouse pointer inside the window of the virtual machine or remote desktop is displaced from the host's mouse pointer.\n\nWayland solves this by adding protocol extensions for Wayland and Xwayland. Support for these extensions is needed to be added to the Wayland compositors. In the case of native Wayland clients, the used widget toolkits (e.g GTK, Qt) needs to support these extensions or the applications themselves if no widget toolkit is being used. In the case of Xorg applications, no changes in the applications or widget toolkits are needed as the Xwayland support is enough.\n\nThese extensions are already included in wayland-protocols, and supported by xorg-xwayland.\n\nThe related extensions are:\n\n- Xwayland keyboard grabbing protocol\n- Compositor shortcuts inhibit protocol\n- Relative pointer protocol\n- Pointer constraints protocol\n\nSupporting Wayland compositors:\n\n- Mutter, GNOME's compositor since release 3.28\n- wlroots supports relative-pointer and pointer-constraints\n- Kwin KDE#X11 shortcuts conflict on Wayland Keyboard shortcuts inhibit\n\n- KDE#X11 shortcuts conflict on Wayland\n- Keyboard shortcuts inhibit\n\nSupporting widget toolkits:\n\n- GTK since release 3.22.18.\n\n"
    },
    {
      "title": "GTK themes not working",
      "level": 3,
      "content": "See https://github.com/swaywm/sway/wiki/GTK-3-settings-on-Wayland.\n\n"
    },
    {
      "title": "Avoid loading NVIDIA modules",
      "level": 3,
      "content": "Add __EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/50_mesa.json as environment variable before launching a Wayland compositor like sway.\n\n"
    },
    {
      "title": "Magnifying/surface scaling",
      "level": 3,
      "content": "Screen magnifying is not solved yet, a pull request was merged mid-2022 providing the protocol wp-surface-scale.\n\n"
    },
    {
      "title": "Wayland lag/stuttering since kernel 6.11.2 (AMD)",
      "level": 3,
      "content": "Until this issue is patched in future kernel releases, a workaround is to add amdgpu.dcdebugmask=0x400 to the cmdline.\n\nSee: https://community.frame.work/t/wayland-lag-stuttering-since-kernel-6-11-2/59422\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Wayland documentation online\n- Official repository\n- Fedora:How to debug Wayland problems\n- We are Wayland now! - An updated version of \"Are we Wayland yet?\"\n- Awesome Wayland projects\n- Cursor themes\n- Arch Linux forum discussion\n- i3 Migration Guide - Common X11 apps used on i3 with Wayland alternatives\n- Wayland Explorer - A better way to read Wayland documentation\n- How can I tell if an application is using XWayland\n\n"
    }
  ]
}