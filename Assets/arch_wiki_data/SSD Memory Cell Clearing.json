{
  "title": "SSD Memory Cell Clearing",
  "url": "https://wiki.archlinux.org/title/SSD_Memory_Cell_Clearing",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "Related articles\n\n- Solid state drive\n- Securely wipe disk\n\nOn occasion, users may wish to completely reset the SSD to the initial \"clean\" state it was manufactured with, thus restoring it to its factory default write performance. Write performance is known to degrade over time even on SSDs with native TRIM support. TRIM only safeguards against file deletes, not replacements such as an incremental save.\n\nPerforming the Secure Erase does not reset the wear leveling status of SSD cells - a drive close to the end of its lifespan may become writable for a short while, but it will still fail after a limited amount of writes.\n\nNote: **this procedure will destroy all data on the SSD** \n\n- Back up all data of importance prior to continuing! Using this procedure will destroy all data on the SSD and render it unrecoverable by even data recovery services! Users will have to repartition the device and restore the data after completing this procedure!\n- Do not proceed with this if the target drive is not connected directly to a SATA/NVMe interface. Issuing the Secure Erase/Format/Sanitize command on a drive connected via USB or a SAS/RAID card could potentially brick the drive!\n\n"
    },
    {
      "title": "SATA drive",
      "level": 2,
      "content": "ATA has two commands for wiping a drive—SECURITY ERASE UNIT and ENHANCED SECURITY ERASE UNIT.[1]\n\n"
    },
    {
      "title": "Make sure the drive security is not in frozen mode",
      "level": 3,
      "content": "Issue the following command:\n\n```\n# hdparm -I /dev/sdX | grep frozen\n```\n\nIn the security section of the output it should say not frozen. If it shows as just frozen then you cannot continue to the next step. See Solid state drive#Frozen mode for details.\n\nA possible solution is to simply suspend (using S3 not S0ix) the system. Upon waking up, it is likely that the freeze will be lifted. If unsuccessful, one can try hot-(re)plug the data cable (which might crash the kernel). If hot-(re)plugging the SATA data cable crashes the kernel try letting the operating system fully boot up, then quickly hot-(re)plug both the SATA power and data cables. If hot-(re)plugging of SATA cables still crashes the kernel, make sure that AHCI is enabled in the BIOS (AHCI allows hot-(re)plugging operations without a crash). Using a USB-to-SATA adapter is an option if it supports hotplugging. One can also use hdparm via USB.\n\n"
    },
    {
      "title": "Dell Systems",
      "level": 4,
      "content": "If the command output shows \"frozen\", you may be able to work around it by:\n\n1. Reboot into the Dell BIOS by pressing F2 on startup.\n1. Set the Internal HDD Password in the BIOS (be careful, the keymap is en_US / qwerty).\n1. Apply the changes and reboot.\n1. When prompted for the password by Dell Security Manager, press Escape rather than entering it. The drive will remain locked but not frozen.\n1. Skip step 2, and go directly to Step 3 below.\n\nNote: **proprietary tool** \n\n"
    },
    {
      "title": "Enable security by setting a user password",
      "level": 3,
      "content": "Note: **not** \n\nAny password will do, as this should only be temporary. After the secure erase the password will be set back to NULL. In this example, the password is PasSWorD as shown:\n\n```\n# hdparm --user-master u --security-set-pass PasSWorD /dev/sdX\n```\n\n```\nsecurity_password=\"PasSWorD\"\n/dev/sdX:\nIssuing SECURITY_SET_PASS command, password=\"PasSWorD\", user=user, mode=high\n```\n\nAs a sanity check, issue the following command\n\n```\n# hdparm -I /dev/sdX\n```\n\nThe command output should display \"enabled\":\n\n```\nSecurity:\n        Master password revision code = 65534\n                supported\n                enabled\n        not     locked\n        not     frozen\n        not     expired: security count\n                supported: enhanced erase\n        Security level high\n        2min for SECURITY ERASE UNIT. 2min for ENHANCED SECURITY ERASE UNIT.\n```\n\n"
    },
    {
      "title": "Issue the ATA SECURITY ERASE UNIT command",
      "level": 3,
      "content": "The final step is to issue the ATA SECURITY ERASE UNIT command, instructing the device's firmware to erase its contents. Note for the device used in this example, earlier output states:\n\n```\n2min for SECURITY ERASE UNIT. 2min for ENHANCED SECURITY ERASE UNIT.\n```\n\nAs per ATA specification the enhanced security erase (--security-erase-enhanced) performs a more elaborate wipe. If the estimated completion time for both commands is equal, it indicates the drive manufacturer shortcut the specification and uses the same erase function for both. A short time (like 2 minutes) in turn indicates the device is self-encrypting and its firmware function will wipe the internal encryption key instead of overwriting all data cells.[3]\n\nNote: **no turning back** \n\n- Triple check that the correct drive designation is used. There is no turning back once the command is confirmed. You have been warned.\n- Ensure that the drive is not mounted when this is ran. If a secure erase command is issued while the device is mounted, it will not erase properly.\n\n```\n# hdparm --user-master u --security-erase PasSWorD /dev/sdX\n```\n\nWait until the command completes. This example output shows it took about 40 seconds for an Intel X25-M 80GB SSD.\n\n```\nsecurity_password=\"PasSWorD\"\n/dev/sdX:\nIssuing SECURITY_ERASE command, password=\"PasSWorD\", user=user\n0.000u 0.000s 0:39.71 0.0%      0+0k 0+0io 0pf+0w\n```\n\nThe drive is now erased. After a successful erasure the drive security should automatically be set to disabled (thus no longer requiring a password for access). Verify this by running the following command:\n\n```\n# hdparm -I /dev/sdX\n```\n\nThe command output should display \"not enabled\":\n\n```\nSecurity:\n        Master password revision code = 65534\n                supported\n        not     enabled\n        not     locked\n        not     frozen\n        not     expired: security count\n                supported: enhanced erase\n        2min for SECURITY ERASE UNIT. 2min for ENHANCED SECURITY ERASE UNIT.\n```\n\n"
    },
    {
      "title": "NVMe drive",
      "level": 2,
      "content": "The NVMe specification defines a standardized way to format NVMe drives, since those do not use the SATA interface protocol and therefore cannot be cleared in the same way as SATA SSDs. Originally it was the nvme-format(1) command (part of the nvme-cli) which provided this feature, but while it still does Specification 1.3 added support for a dedicated nvme-sanitize(1) command. As described by the NVM Express Consortium:\n\nIn order to verify what is supported by your drive, use the Identify Controller command:\n\n```\n# nvme id-ctrl /dev/nvme0 -H | grep -E 'Format |Crypto Erase|Sanitize'\n```\n\nExample output:\n\n```\n[1:1] : 0x1\tFormat NVM Supported\n  [29:29] : 0\tNo-Deallocate After Sanitize bit in Sanitize command Supported\n    [2:2] : 0\tOverwrite Sanitize Operation Not Supported\n    [1:1] : 0x1\tBlock Erase Sanitize Operation Supported\n    [0:0] : 0x1\tCrypto Erase Sanitize Operation Supported\n  [2:2] : 0x1\tCrypto Erase Supported as part of Secure Erase\n  [1:1] : 0\tCrypto Erase Applies to Single Namespace(s)\n  [0:0] : 0\tFormat Applies to Single Namespace(s)\n```\n\nThen proceed with either format or sanitize.\n\n"
    },
    {
      "title": "Format command",
      "level": 3,
      "content": "The Format command is conceptually closer to a mix of hdparm and fdisk, as it allows to set low-level parameters for the drive and additionally to send a secure erase command.\n\nnvme-format(1) gives the following details about the Secure Erase Settings (-s/--ses) option:\n\nPossible values :\n\nTable content:\nValue | Definitions\n0 | No secure erase operation requested\n1 | User Data Erase: All user data shall be erased, contents of the user data after the erase is indeterminate (e.g., the user data may be zero filled, one filled, etc). The controller may perform a cryptographic erase when a User Data Erase is requested if all user data is encrypted.\n2 | Cryptographic Erase: All user data shall be erased cryptographically. This is accomplished by deleting the encryption key.\n\nWhile the Format command accepts either the whole NVMe character device (e.g. /dev/nvme0) or a specific namespace block device (e.g. /dev/nvme0n1), make sure this feature is supported by your drive before triggering it. E.g. in the output of the Identify Controller command above, we see that the Crypto Erase Applies to Single Namespace(s) and Format Applies to Single Namespace(s) bits are set to zero, which according to the spec means that \"the controller supports format on a per namespace basis\" (see figure 249 byte row 524 \"Format NVM Attributes (FNA)\").\n\nFor example, to format /dev/nvme0 with a crypto erase to namespace 1:\n\n```\n# nvme format /dev/nvme0 -s 2 -n 1\n```\n\nUse -n 0xffffffff to format all the namespaces.\n\nSee nvme-format(1) for more information and important warnings regarding device/namespace selection.\n\n"
    },
    {
      "title": "Sanitize command",
      "level": 3,
      "content": "The Sanitize command was created to be \"functionally equivalent to the command of the same name in SATA and SAS implementations\"[4]. From the aforementioned article:\n\nUsage and possible values for the -a/--sanact options are described in nvme-sanitize(1).\n\nThe difference between Block Erase and Crypto Erase is that Crypto Erase only erases an encryption key (as defined in the NVMe 1.4 specification):\n\nYou can get an estimation of the time the various methods would take on your drive (if supported):\n\n```\n# nvme sanitize-log /dev/nvme0\n```\n\n```\n...\nEstimated Time For Overwrite                   :  4294967295 (No time period reported)\nEstimated Time For Block Erase                 :  174\nEstimated Time For Crypto Erase                :  34\n```\n\nIf instead you get a result such as:\n\n```\n# nvme sanitize-log /dev/nvme0\n```\n\n```\n...\nEstimated Time For Overwrite                   :  4294967295 (No time period reported)\nEstimated Time For Block Erase                 :  4294967295 (No time period reported)\nEstimated Time For Crypto Erase                :  4294967295 (No time period reported)\n```\n\nThen be sure that the operation will take a long time to complete. For reference, a Block Erase took around 2-3 hours to complete on the Intel 660p 512GB reporting those results.\n\nTo start a Crypto Erase sanitize operation:\n\n```\n# nvme sanitize device -a start-crypto-erase\n```\n\nNote: **not** \n\nFor a Block Erase:\n\n```\n# nvme sanitize device -a start-block-erase\n```\n\nYou can follow the progress with the Sanitize Log:\n\n```\n# nvme sanitize-log /dev/nvme0\n```\n\nExample output for a drive with a Crypto Erase in progress:\n\n```\nSanitize Progress                      (SPROG) :  655\nSanitize Status                        (SSTAT) :  0x4\nSanitize Command Dword 10 Information (SCDW10) :  0x4\nEstimated Time For Overwrite                   :  4294967295 (No time period reported)\nEstimated Time For Block Erase                 :  174\nEstimated Time For Crypto Erase                :  34\nEstimated Time For Overwrite (No-Deallocate)   :  0\nEstimated Time For Block Erase (No-Deallocate) :  0\nEstimated Time For Crypto Erase (No-Deallocate):  0\n```\n\nWhen the command has completed successfully:\n\n```\nSanitize Progress                      (SPROG) :  65535\nSanitize Status                        (SSTAT) :  0x101\nSanitize Command Dword 10 Information (SCDW10) :  0x4\nEstimated Time For Overwrite                   :  4294967295 (No time period reported)\nEstimated Time For Block Erase                 :  174\nEstimated Time For Crypto Erase                :  34\nEstimated Time For Overwrite (No-Deallocate)   :  0\nEstimated Time For Block Erase (No-Deallocate) :  0\nEstimated Time For Crypto Erase (No-Deallocate):  0\n```\n\n"
    },
    {
      "title": "Common method with blkdiscard",
      "level": 2,
      "content": "The blkdiscard(8) command from the util-linux package offers a --secure option to \"Perform a secure discard. A secure discard is the same as a regular discard except that all copies of the discarded blocks that were possibly created by garbage collection must also be erased. This requires support from the device\".\n\nTo use it, execute:\n\n```\n# blkdiscard --secure /dev/device\n```\n\nFor devices which do not support a secure erase, a -z/--zeroout option fills the device with zeroes instead of simply discarding all blocks on the device by default.\n\nSee [5] for a discussion of the general security of blkdiscard and [6] for an illustration of wiping volumes using blkdiscard.\n\n"
    },
    {
      "title": "UEFI boot entries get removed after wiping a drive",
      "level": 3,
      "content": "Some UEFI implementations remove boot entries referencing nonexistent files upon system startup. If you plan to restore the system from a backup after memory cell clearing, make sure to also restore the boot entry using efibootmgr or by reinstalling the boot loader.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- Secure Erase HDDs/SSDs (SATA/NVMe) using hdparm & nvme-cli on Linux (2019): good tutorial with images\n- Verifying SSD Sanitization\n\n"
    }
  ]
}