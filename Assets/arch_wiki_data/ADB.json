{
  "title": "ADB",
  "url": "https://wiki.archlinux.org/title/ADB",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "The Android Debug Bridge (ADB) is a command-line tool that can be used to install, uninstall and debug apps, transfer files and access the device's shell.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "ADB is part of the Platform-Tools SDK package and the android-tools package.\n\n"
    },
    {
      "title": "Connect device",
      "level": 3,
      "content": "- For some devices, you may have to enable MTP on the device, before ADB will work. Some other devices require enable PTP mode to work.\n- Many devices' udev rules are included in libmtp, so if you have this installed, the following steps may not be necessary.\n- Make sure your USB cable is capable of both charge and data. Many USB cables bundled with mobile devices do not include the USB data pin.\n\nTo connect to a real device or phone via ADB under Arch, you must:\n\n1. You might want to install android-udev if you wish to connect the device to the proper /dev/ entries.\n1. plug in your android device via USB.\n1. Enable USB Debugging on your phone or device: Jelly Bean (4.2) and newer: Go to Settings > About Phone tap Build Number 7 times until you get a popup that you have become a developer. Build number may be under a menu called Software info on newer Android OS versions. Then go to Settings > Developer > USB debugging and enable it. The device will ask to allow the computer with its fingerprint to connect. Check allowing it permanently option will copy ~/.android/adbkey.pub to the target phone's /data/misc/adb/adb_keys location. Older versions: This is usually done from Settings > Applications > Development > USB debugging. Reboot the phone after checking this option to make sure USB debugging is enabled.\n\n- Jelly Bean (4.2) and newer: Go to Settings > About Phone tap Build Number 7 times until you get a popup that you have become a developer. Build number may be under a menu called Software info on newer Android OS versions. Then go to Settings > Developer > USB debugging and enable it. The device will ask to allow the computer with its fingerprint to connect. Check allowing it permanently option will copy ~/.android/adbkey.pub to the target phone's /data/misc/adb/adb_keys location.\n- Older versions: This is usually done from Settings > Applications > Development > USB debugging. Reboot the phone after checking this option to make sure USB debugging is enabled.\n\nIf ADB recognizes your device (adb devices shows it as \"device\" and not as \"unauthorized\", or it is visible and accessible in IDE), you are done. Otherwise see the instructions below.\n\n"
    },
    {
      "title": "Figure out device IDs",
      "level": 3,
      "content": "Each Android device has a USB vendor/product ID. An example for HTC Evo is:\n\n```\nvendor id: 0bb4\nproduct id: 0c8d\n```\n\nPlug in your device and execute:\n\n```\n$ lsusb\n```\n\n```\n...\nBus 002 Device 006: ID 0bb4:0c8d High Tech Computer Corp.\n...\n```\n\n"
    },
    {
      "title": "Adding udev rules",
      "level": 3,
      "content": "If your device is not included in android-udev (or android-udev-gitAUR), use the following template to create a custom udev rule by replacing [VENDOR ID] and [PRODUCT ID] with the IDs of your device.\n\n```\n/etc/udev/rules.d/51-android.rules\n```\n\n```\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"[VENDOR ID]\", MODE=\"0660\", GROUP=\"adbusers\", TAG+=\"uaccess\"\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"[VENDOR ID]\", ATTR{idProduct}==\"[PRODUCT ID]\", SYMLINK+=\"android_adb\"\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"[VENDOR ID]\", ATTR{idProduct}==\"[PRODUCT ID]\", SYMLINK+=\"android_fastboot\"\n```\n\nThen reload the udev rules.\n\n"
    },
    {
      "title": "Detect the device",
      "level": 3,
      "content": "After you have setup the udev rules, unplug your device and replug it.\n\nAfter running:\n\n```\n$ adb devices\n```\n\n```\nList of devices attached \nHT07VHL00676    device\n```\n\nIf adb still does not detect the device after plugging your device back in, kill and restart the adb server as root and check devices again:\n\n```\n# adb kill-server\n# adb start-server\n$ adb devices\n```\n\nIf adb devices still shows unauthorized next to your device, make sure that that device has debugging permission allowed on the device itself. A Allow USB Debugging? dialog should be presented when you physically connect the device. Select Always Allow..., then tap OK. If the dialog was never presented, try Settings > Developer Options > Revoke USB Debugging Authorizations, then tap OK, and repeat the steps in this section. If you still do not see the Allow USB Debugging? dialog, and the device is listed as unauthorized, then enter the Developer Options on the device and first uncheck USB Debugging and then check it again.\n\n"
    },
    {
      "title": "Transferring files",
      "level": 3,
      "content": "You can now use adb to transfer files between the device and your computer. To transfer files to the device, use:\n\n```\n$ adb push what-to-copy where-to-place\n```\n\nTo transfer files from the device, use:\n\n```\n$ adb pull what-to-pull where-to-place\n```\n\nAlso see #Tools building on ADB.\n\n"
    },
    {
      "title": "Backup and restore",
      "level": 3,
      "content": "Note: **adb backup/restore** \n\nYou can also backup and restore your device with adb. Moreover, no root is required to follow the process. The commands below led to backup your device to a single file which can also be successively restored.\n\nThe command to create a backup is:\n\n```\n$ adb backup -apk -shared -all -f backupFileName.ab\n```\n\nThe command parameters list is:\n\n```\nadb backup [-f <file>] [-apk|-noapk] [-shared|-noshared] [-all] [-system|nosystem] [<packages...>]\n```\n\nThen confirm the process on your device's display and provide a password whether a backup password has been set before.\n\nThe command to restore a previous backup is:\n\n```\n$ adb restore backupFileName.ab\n```\n\n"
    },
    {
      "title": "Tools building on ADB",
      "level": 2,
      "content": "Note: **This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.** This article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\nThis article or section needs language, wiki syntax or style improvements. See Help:Style for reference.\n\n- adbfs-rootless-gitAUR – mount an Android device connected via USB.\n- adb-sync-gitAUR – a tool to synchronize files between a PC and an Android device using the ADB protocol.\n- androidscreencast-binAUR – view and control your Android device via ADB from a PC.\n- logcat-color3AUR – a colorful and highly configurable alternative to the standard adb logcat command.\n- scrcpy – display and control your Android device.\n- qtscrcpyAUR – Android real-time display control software.\n- adbmanager-binAUR - The program is designed for visual and easy management of the ADB-Server and connection of Android smartphones. Allows you to monitor the status of the adb service, manage it, and control the list of connected devices. Allows you to manage your smartphone: search for installed packages by part name, install, delete APK, screenshot, reboot (Normal, Bootloader, Recovery mode) and shutdown the device. For advanced users, there is an Android Shell terminal and an SD-Card file manager.\n\n"
    },
    {
      "title": "Empty device list",
      "level": 3,
      "content": "Possible causes for your device to not show up:\n\n- Not having enabled USB debugging on your device. See enable USB debugging.\n- Using a power only (charge-only) USB cable and not an USB data transfer cable.\n\n"
    },
    {
      "title": "No permissions error",
      "level": 3,
      "content": "If the device shows up with a \"no permissions\" label, it probably has a different vendor/product ID with respect to the ones collected by android-udev.\n\nThis can happen for instance when the device uses a custom ROM, or when it is switched from MTP to USB tethering mode, sideload and/or fastboot mode. Verify the actual device's ID with lsusb and #Adding udev rules.\n\n"
    },
    {
      "title": "Daemon exits with insufficient permissions error",
      "level": 3,
      "content": "If you see following error when running adb:\n\n```\nE adb     : usb_libusb.cpp:571 failed to open device: Access denied (insufficient permissions)\n```\n\ncheck if you are in adbusers group.\n\n"
    }
  ]
}