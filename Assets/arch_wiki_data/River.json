{
  "title": "River",
  "url": "https://wiki.archlinux.org/title/River",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "river is a wlroots-based Wayland dynamic tiling compositor, inspired by, but not based on dwm, xmonad and bspwm. Configuration is by an external executable file.\n\nIts declared design goals are:\n\n- Simple and predictable behavior, river should be easy to use and have a low cognitive load.\n- Window management based on a stack of views and tags.\n- Dynamic layouts generated by external, user-written executables. A default rivertile layout generator is provided.\n- Scriptable configuration and control through a custom Wayland protocol and separate riverctl binary implementing it.\n\n"
    },
    {
      "title": "Installation",
      "level": 2,
      "content": "River is installed with the river or river-gitAUR package.\n\n"
    },
    {
      "title": "Starting",
      "level": 2,
      "content": "A single executable file is used as a configuration file. No initialisation file is set up for the user by default, so no keybindings or default applications are available until an init file is created. Note that this includes the exit keybinding, so set up in tty or another desktop environment before running river.\n\nAn example config init file is available in /usr/share/river/example/. Copy this as ~/.config/river/init and ensure it is executable.\n\n"
    },
    {
      "title": "Manually",
      "level": 3,
      "content": "Enter river (exits to tty with user still logged in) or exec river (more securely exits to tty with user logged out)\n\n"
    },
    {
      "title": "From TTY",
      "level": 3,
      "content": "River can be autostarted in a similar manner to startx, by setting up the environment variable checks in .bash_profile or the equivalent file for other shells. See Xinit#Autostart X at login, replacing $DISPLAY with $WAYLAND_DISPLAY, and running exec river.\n\n"
    },
    {
      "title": "Display manager",
      "level": 3,
      "content": "River does not officially support display managers but many will work with no or minimal effort. A session entry is installed by default in /usr/share/wayland-sessions/.\n\n"
    },
    {
      "title": "Configuration",
      "level": 2,
      "content": "The configuration file can be a shell script or executable program, comprising a list of riverctl individual commands which define key bindings, input settings and window rules. It is executed once at start-up but can be re-run like any other shell script (consider the effects of duplicating any autostarted spawned actions). Each setting can also be run individually by simply running the relevant riverctl line in a terminal. This allows temporary override of the init settings, dynamic updates and testing new settings.\n\nFor example, to map the shortcut Super+PrtSc to take a screenshot with the application grim and display a temporary desktop notification:\n\n```\nriverctl map normal Super Print spawn \"grim && notify-send -t 2000 'Screenshot taken'\"\n```\n\nThe spawn command can launch any application or script but expects a single word argument. Quote any longer expressions.\n\n"
    },
    {
      "title": "Keyboard layout",
      "level": 3,
      "content": "```\nriverctl keyboard-layout gb\n```\n\nMultiple layouts can be entered as a comma-separated list, e.g. gb,fr.\n\nVariables and other shell constructs can be used: mod='Mod4', set term foot, etc, as per your shell.\n\n"
    },
    {
      "title": "Touchpad examples",
      "level": 3,
      "content": "Certain touchpad behaviour and focus preferences are available.\n\n```\nriverctl input pointer-2-7-SynPS/2_Synaptics_TouchPad tap enabled\nriverctl focus-follows-cursor normal\n```\n\nExact keyboard, mouse and touchpad models for use in these settings can be identified using:\n\n```\nriverctl list-inputs\n```\n\n"
    },
    {
      "title": "Window rules",
      "level": 3,
      "content": "It is sometimes desirable to set certain windows to be non-tiling by default. Floating windows can be defined by class or title:\n\n```\nriverctl float-filter-add app-id 'galculator'\nriverctl float-filter-add title 'File Operation Progress'\n```\n\nNote that new rule-add settings will be introduced for River 0.3 and this syntax will change to fit these broader definitions:\n\n```\nriverctl rule-add -app-id 'galculator' float\n```\n\n"
    },
    {
      "title": "Autostart",
      "level": 3,
      "content": "Use riverctl spawn without a keybinding to launch any executable at startup, for example:\n\n```\nriverctl spawn \"i3-battery-popup -n -m 'Battery Low!'\"\n```\n\n"
    },
    {
      "title": "Scratchpads",
      "level": 3,
      "content": "River does not define any scratchpads by default, but these can be set up on any tag beyond the default 0-9. First, define the tag number, then the key mapping to move an application to the scratchpad tag and toggle its appearance, and, finally, prevent new windows being assigned to the scratchpad.\n\n```\nscratch_tag=$((1 << 20 ))\n\nriverctl map normal Super P toggle-focused-tags ${scratch_tag}\t\t# toggle the scratchpad\nriverctl map normal Super+Shift P set-view-tags ${scratch_tag}\t\t# send windows to the scratchpad\n\n# Set spawn tagmask to ensure new windows do not have the scratchpad tag unless explicitly set.\nall_but_scratch_tag=$(( ((1 << 32) - 1) ^ $scratch_tag ))\nriverctl spawn-tagmask ${all_but_scratch_tag}\n```\n\n"
    },
    {
      "title": "Modes",
      "level": 3,
      "content": "River supports modes for key mapping, which allows for reuse of mappings, and combinations of fewer keys. There are two default modes of 'normal' and 'locked' (defining allowed key mappings when the screen is locked). Custom modes can be added. Eg. if floating windows are rarely used, the key mapping to manipulate those windows can be defined in a 'float' mode. Entry and exit key mappings for the mode are set as the first and last mappings, with other mapping between these.\n\n```\nriverctl declare-mode float\nriverctl map normal Super R enter-mode float\t\t# Super+R to enter float mode\n \n### Floating window mappings but note that these also apply to tiled windows.\n#\n# Super {Arrows} to move views\n  riverctl map float Super Left move left 100\n  riverctl map float Super Down move down 100\n  riverctl map float Super Up move up 100\n  riverctl map float Super Right move right 100\n \n# Alt+{arrows} to snap views to screen edges\n  riverctl map float Alt Left snap left\n  riverctl map float Alt Down snap down\n  riverctl map float Alt Up snap up\n  riverctl map float Alt Right snap right\n \n# Shift+{arrows} to resize views\n  riverctl map float Shift Left resize horizontal -100\n  riverctl map float Shift Down resize vertical 100\n  riverctl map float Shift Up resize vertical -100\n  riverctl map float Shift Right resize horizontal 100\n \nriverctl map float None Escape enter-mode normal\t# Escape to exit float mode and return to normal mode\n```\n\nNote that floating window modifiers also work on tiled windows, making them floating and giving potentially unpredictable layouts.\n\n"
    },
    {
      "title": "External tools",
      "level": 3,
      "content": "In common with many other Wayland minimalist tiling clients, other tools are not included. Example external bars, screenshot tools, launchers, etc. are listed in the River wiki, including several with River-specific functionality.\n\n"
    },
    {
      "title": "Screencasting",
      "level": 3,
      "content": "If Screencasting is not working with river, check if the needed environment variables are properly set for systemd:\n\n```\n$ systemctl --user show-environment\n```\n\nYou should find something like:\n\n```\nWAYLAND_DISPLAY=wayland-1\nXDG_CURRENT_DESKTOP=river\n```\n\nIf any of these variables are not set, you may add this to your .config/river/init:\n\n```\nsystemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP\ndbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=river\nsystemctl --user restart xdg-desktop-portal\n```\n\nIf you need further troubleshooting, try to:\n\n- Make sure XDG Desktop Portal services are running:\n\n```\n$ systemctl --user status xdg-desktop-portal.service\n$ systemctl --user status xdg-desktop-portal-wlr.service\n```\n\n- Stop the xdg-desktop-portal.service and run it manually to see if it works:\n\n```\n$ systemctl --user stop xdg-desktop-portal\n$ XDG_CURRENT_DESKTOP=river /usr/lib/xdg-desktop-portal\n```\n\n- Test it using Mozilla WebRTC test\n\nNote: Contrary to what you may find in older posts in the internet, it is not necessary to install pipewire-media-session, since wireplumber is working just fine now.\n\nContrary to what you may find in older posts in the internet, it is not necessary to install pipewire-media-session, since wireplumber is working just fine now.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- River Codeberg repository\n- River wiki\n- Developer set-up blog post[dead link 2025-03-15 â“˜]\n\n"
    }
  ]
}