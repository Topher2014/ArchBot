{
  "title": "Core dump",
  "url": "https://wiki.archlinux.org/title/Core_dump",
  "sections": [
    {
      "title": "Introduction",
      "level": 1,
      "content": "A core dump is a file containing a process's address space (memory) when the process terminates unexpectedly. Core dumps may be produced on-demand (such as by a debugger), or automatically upon termination. Core dumps are triggered by the kernel in response to program crashes, and may be passed to a helper program (such as systemd-coredump(8)) for further processing. A core dump is not typically used by an average user, but developers could use it as a post-mortem snapshot of the program's state at the time of the crash, especially if the fault is hard to reliably reproduce.\n\n"
    },
    {
      "title": "Disabling automatic core dumps",
      "level": 2,
      "content": "Users may wish to disable automatic core dumps for a number of reasons:\n\n- Performance: generating core dumps for memory-heavy processes can waste system resources and delay the cleanup of memory.\n- Disk space: core dumps of memory-heavy processes may consume disk space equal to, if not greater, than the process's memory footprint if not compressed.\n- Security: core dumps, although typically readable only by root, may contain sensitive data (such as passwords or cryptographic keys), which are written to disk following a crash.\n\n"
    },
    {
      "title": "Using sysctl",
      "level": 3,
      "content": "sysctl can be used to set the kernel.core_pattern to nothing to disable core dump handling. Create this file\n\n```\n/etc/sysctl.d/50-coredump.conf\n```\n\n```\nkernel.core_pattern=|/bin/false\n```\n\nTo apply the setting immediately, use sysctl:\n\n```\n# sysctl -p /etc/sysctl.d/50-coredump.conf\n```\n\n"
    },
    {
      "title": "Using systemd",
      "level": 3,
      "content": "systemd's default behavior is defined in /usr/lib/sysctl.d/50-coredump.conf, which sets kernel.core_pattern to call systemd-coredump. It generates core dumps for all processes in /var/lib/systemd/coredump. systemd-coredump behavior can be overridden by creating a configuration snippet in the /etc/systemd/coredump.conf.d/ directory with the following content (See coredump.conf(5) ยง DESCRIPTION, [1]):\n\n```\n/etc/systemd/coredump.conf.d/custom.conf\n```\n\n```\n[Coredump]\nStorage=none\nProcessSizeMax=0\n```\n\nThen reload the systemd manager configuration with daemon-reload.\n\nSee systemd-coredump(8) ยง Disabling coredump processing.\n\n"
    },
    {
      "title": "Using PAM limits",
      "level": 3,
      "content": "See limits.conf#core.\n\n"
    },
    {
      "title": "Using ulimit",
      "level": 3,
      "content": "Command-line shells such as bash or zsh provide a builtin ulimit command which can be used to report or set resource limits of the shell and the processes started by the shell. See bash(1) ยง SHELL BUILTIN COMMANDS or zshbuiltins(1) for details.\n\nTo disable core dumps in the current shell:\n\n```\n$ ulimit -c 0\n```\n\nIf the system is setup to pipe coredumps into a program such as systemd-coredump using kernel.core_pattern, the Linux kernel itself ignores the ulimit setting (see core(5)), so then it depends on the program the dump gets piped to whether this setting is respected or not (systemd-coredump will still use it).\n\nFor programs not using the ulimit setting of the crashed process, dumpable prctl(2) can be used to disable coredump processing for selected processes.\n\n"
    },
    {
      "title": "Making a core dump",
      "level": 2,
      "content": "To generate a core dump of an arbitrary process, first install the gdb package. Then attach to this process by following Debugging/Getting traces#Attaching to an existing process.\n\nThen at the (gdb) prompt:\n\n```\n(gdb) generate-core-file\nSaved corefile core.2071\n(gdb) quit\n```\n\nNow you have a coredump file called core.2071.\n\n"
    },
    {
      "title": "Where do they go?",
      "level": 3,
      "content": "The kernel.core_pattern sysctl decides where automatic core dumps go. By default, core dumps are sent to systemd-coredump which can be configured in /etc/systemd/coredump.conf. By default, all core dumps are stored in /var/lib/systemd/coredump (due to Storage=external) and they are compressed with zstd (due to Compress=yes). Additionally, various size limits for the storage can be configured.\n\nTo retrieve a core dump from the journal, see coredumpctl(1).\n\n"
    },
    {
      "title": "Managing the core dump files",
      "level": 2,
      "content": "Use coredumpctl to find the corresponding dump. Note that regular users can run coredumpctl without special privileges to manage core dumps of their processes.\n\n```\n# coredumpctl list\n```\n\n"
    },
    {
      "title": "Cleanup of core dump files",
      "level": 3,
      "content": "The core dump files stored in /var/lib/systemd/coredump/ will be automatically cleaned by systemd-tmpfiles --clean, which is triggered daily with systemd-tmpfiles-clean.timer. Core dumps are configured to persist for at least 3 days, see systemd-tmpfiles --cat-config.\n\n"
    },
    {
      "title": "Analyzing a core dump",
      "level": 2,
      "content": "First, you need to uniquely identify the relevant dump. This is possible by specifying a PID, name of the executable, path to the executable or a journalctl predicate (see coredumpctl(1) and journalctl(1) for details). To see details of the core dumps:\n\n```\n# coredumpctl info match\n```\n\nPay attention to \"Signal\" row, that helps to identify crash cause. For the analysis one usually examine the backtrace using a debugger (gdb(1) by default):\n\n```\n# coredumpctl debug match\n```\n\nWhen gdb is started, use the bt command to print the full backtrace:\n\n```\n(gdb) thread apply all backtrace full\n```\n\nIn many cases, the output will contain question marks as placeholders for missing debugging symbols. See Debugging/Getting traces for how to obtain them.\n\n"
    },
    {
      "title": "See also",
      "level": 2,
      "content": "- american fuzzy lop - A tool for automated tests of the kernel and programs\n- Filesystem fuzzing - LWN article about testing filesystems for bugs\n\n"
    }
  ]
}